// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: participant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_participant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_participant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "handle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_participant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_participant_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_participant_2eproto;
namespace livekit {
namespace proto {
class OwnedParticipant;
struct OwnedParticipantDefaultTypeInternal;
extern OwnedParticipantDefaultTypeInternal _OwnedParticipant_default_instance_;
class ParticipantInfo;
struct ParticipantInfoDefaultTypeInternal;
extern ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;
class ParticipantInfo_AttributesEntry_DoNotUse;
struct ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal;
extern ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal _ParticipantInfo_AttributesEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::proto::OwnedParticipant* Arena::CreateMaybeMessage<::livekit::proto::OwnedParticipant>(Arena*);
template<> ::livekit::proto::ParticipantInfo* Arena::CreateMaybeMessage<::livekit::proto::ParticipantInfo>(Arena*);
template<> ::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {
namespace proto {

enum ParticipantKind : int {
  PARTICIPANT_KIND_STANDARD = 0,
  PARTICIPANT_KIND_INGRESS = 1,
  PARTICIPANT_KIND_EGRESS = 2,
  PARTICIPANT_KIND_SIP = 3,
  PARTICIPANT_KIND_AGENT = 4
};
bool ParticipantKind_IsValid(int value);
constexpr ParticipantKind ParticipantKind_MIN = PARTICIPANT_KIND_STANDARD;
constexpr ParticipantKind ParticipantKind_MAX = PARTICIPANT_KIND_AGENT;
constexpr int ParticipantKind_ARRAYSIZE = ParticipantKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantKind_descriptor();
template<typename T>
inline const std::string& ParticipantKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParticipantKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParticipantKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParticipantKind_descriptor(), enum_t_value);
}
inline bool ParticipantKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParticipantKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParticipantKind>(
    ParticipantKind_descriptor(), name, value);
}
enum DisconnectReason : int {
  UNKNOWN_REASON = 0,
  CLIENT_INITIATED = 1,
  DUPLICATE_IDENTITY = 2,
  SERVER_SHUTDOWN = 3,
  PARTICIPANT_REMOVED = 4,
  ROOM_DELETED = 5,
  STATE_MISMATCH = 6,
  JOIN_FAILURE = 7,
  MIGRATION = 8,
  SIGNAL_CLOSE = 9,
  ROOM_CLOSED = 10,
  USER_UNAVAILABLE = 11,
  USER_REJECTED = 12,
  SIP_TRUNK_FAILURE = 13
};
bool DisconnectReason_IsValid(int value);
constexpr DisconnectReason DisconnectReason_MIN = UNKNOWN_REASON;
constexpr DisconnectReason DisconnectReason_MAX = SIP_TRUNK_FAILURE;
constexpr int DisconnectReason_ARRAYSIZE = DisconnectReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisconnectReason_descriptor();
template<typename T>
inline const std::string& DisconnectReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisconnectReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisconnectReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DisconnectReason_descriptor(), enum_t_value);
}
inline bool DisconnectReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DisconnectReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DisconnectReason>(
    DisconnectReason_descriptor(), name, value);
}
// ===================================================================

class ParticipantInfo_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParticipantInfo_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParticipantInfo_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ParticipantInfo_AttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ParticipantInfo_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ParticipantInfo_AttributesEntry_DoNotUse& other);
  static const ParticipantInfo_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ParticipantInfo_AttributesEntry_DoNotUse*>(&_ParticipantInfo_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.proto.ParticipantInfo.AttributesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.proto.ParticipantInfo.AttributesEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_participant_2eproto;
};

// -------------------------------------------------------------------

class ParticipantInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.ParticipantInfo) */ {
 public:
  inline ParticipantInfo() : ParticipantInfo(nullptr) {}
  ~ParticipantInfo() override;
  explicit PROTOBUF_CONSTEXPR ParticipantInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParticipantInfo(const ParticipantInfo& from);
  ParticipantInfo(ParticipantInfo&& from) noexcept
    : ParticipantInfo() {
    *this = ::std::move(from);
  }

  inline ParticipantInfo& operator=(const ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantInfo& operator=(ParticipantInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipantInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParticipantInfo* internal_default_instance() {
    return reinterpret_cast<const ParticipantInfo*>(
               &_ParticipantInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParticipantInfo& a, ParticipantInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ParticipantInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipantInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipantInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParticipantInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParticipantInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParticipantInfo& from) {
    ParticipantInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticipantInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.ParticipantInfo";
  }
  protected:
  explicit ParticipantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 5,
    kSidFieldNumber = 1,
    kNameFieldNumber = 2,
    kIdentityFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kKindFieldNumber = 6,
    kDisconnectReasonFieldNumber = 7,
  };
  // map<string, string> attributes = 5;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // required string sid = 1;
  bool has_sid() const;
  private:
  bool _internal_has_sid() const;
  public:
  void clear_sid();
  const std::string& sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sid();
  PROTOBUF_NODISCARD std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string identity = 3;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // required string metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // required .livekit.proto.ParticipantKind kind = 6;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::livekit::proto::ParticipantKind kind() const;
  void set_kind(::livekit::proto::ParticipantKind value);
  private:
  ::livekit::proto::ParticipantKind _internal_kind() const;
  void _internal_set_kind(::livekit::proto::ParticipantKind value);
  public:

  // required .livekit.proto.DisconnectReason disconnect_reason = 7;
  bool has_disconnect_reason() const;
  private:
  bool _internal_has_disconnect_reason() const;
  public:
  void clear_disconnect_reason();
  ::livekit::proto::DisconnectReason disconnect_reason() const;
  void set_disconnect_reason(::livekit::proto::DisconnectReason value);
  private:
  ::livekit::proto::DisconnectReason _internal_disconnect_reason() const;
  void _internal_set_disconnect_reason(::livekit::proto::DisconnectReason value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.ParticipantInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ParticipantInfo_AttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    int kind_;
    int disconnect_reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_participant_2eproto;
};
// -------------------------------------------------------------------

class OwnedParticipant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.OwnedParticipant) */ {
 public:
  inline OwnedParticipant() : OwnedParticipant(nullptr) {}
  ~OwnedParticipant() override;
  explicit PROTOBUF_CONSTEXPR OwnedParticipant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnedParticipant(const OwnedParticipant& from);
  OwnedParticipant(OwnedParticipant&& from) noexcept
    : OwnedParticipant() {
    *this = ::std::move(from);
  }

  inline OwnedParticipant& operator=(const OwnedParticipant& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnedParticipant& operator=(OwnedParticipant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnedParticipant& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnedParticipant* internal_default_instance() {
    return reinterpret_cast<const OwnedParticipant*>(
               &_OwnedParticipant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OwnedParticipant& a, OwnedParticipant& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnedParticipant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnedParticipant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnedParticipant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnedParticipant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnedParticipant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OwnedParticipant& from) {
    OwnedParticipant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnedParticipant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.OwnedParticipant";
  }
  protected:
  explicit OwnedParticipant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // required .livekit.proto.FfiOwnedHandle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::livekit::proto::FfiOwnedHandle& handle() const;
  PROTOBUF_NODISCARD ::livekit::proto::FfiOwnedHandle* release_handle();
  ::livekit::proto::FfiOwnedHandle* mutable_handle();
  void set_allocated_handle(::livekit::proto::FfiOwnedHandle* handle);
  private:
  const ::livekit::proto::FfiOwnedHandle& _internal_handle() const;
  ::livekit::proto::FfiOwnedHandle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::livekit::proto::FfiOwnedHandle* handle);
  ::livekit::proto::FfiOwnedHandle* unsafe_arena_release_handle();

  // required .livekit.proto.ParticipantInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::livekit::proto::ParticipantInfo& info() const;
  PROTOBUF_NODISCARD ::livekit::proto::ParticipantInfo* release_info();
  ::livekit::proto::ParticipantInfo* mutable_info();
  void set_allocated_info(::livekit::proto::ParticipantInfo* info);
  private:
  const ::livekit::proto::ParticipantInfo& _internal_info() const;
  ::livekit::proto::ParticipantInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::livekit::proto::ParticipantInfo* info);
  ::livekit::proto::ParticipantInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:livekit.proto.OwnedParticipant)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::FfiOwnedHandle* handle_;
    ::livekit::proto::ParticipantInfo* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_participant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ParticipantInfo

// required string sid = 1;
inline bool ParticipantInfo::_internal_has_sid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParticipantInfo::has_sid() const {
  return _internal_has_sid();
}
inline void ParticipantInfo::clear_sid() {
  _impl_.sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParticipantInfo::sid() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ParticipantInfo.sid)
  return _internal_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipantInfo::set_sid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.ParticipantInfo.sid)
}
inline std::string* ParticipantInfo::mutable_sid() {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:livekit.proto.ParticipantInfo.sid)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_sid() const {
  return _impl_.sid_.Get();
}
inline void ParticipantInfo::_internal_set_sid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(value, GetArenaForAllocation());
}
inline std::string* ParticipantInfo::_internal_mutable_sid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sid_.Mutable(GetArenaForAllocation());
}
inline std::string* ParticipantInfo::release_sid() {
  // @@protoc_insertion_point(field_release:livekit.proto.ParticipantInfo.sid)
  if (!_internal_has_sid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sid_.IsDefault()) {
    _impl_.sid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParticipantInfo::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sid_.SetAllocated(sid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sid_.IsDefault()) {
    _impl_.sid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.ParticipantInfo.sid)
}

// required string name = 2;
inline bool ParticipantInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParticipantInfo::has_name() const {
  return _internal_has_name();
}
inline void ParticipantInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParticipantInfo::name() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ParticipantInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipantInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.ParticipantInfo.name)
}
inline std::string* ParticipantInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.proto.ParticipantInfo.name)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ParticipantInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ParticipantInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ParticipantInfo::release_name() {
  // @@protoc_insertion_point(field_release:livekit.proto.ParticipantInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParticipantInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.ParticipantInfo.name)
}

// required string identity = 3;
inline bool ParticipantInfo::_internal_has_identity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParticipantInfo::has_identity() const {
  return _internal_has_identity();
}
inline void ParticipantInfo::clear_identity() {
  _impl_.identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ParticipantInfo::identity() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ParticipantInfo.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipantInfo::set_identity(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.ParticipantInfo.identity)
}
inline std::string* ParticipantInfo::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:livekit.proto.ParticipantInfo.identity)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void ParticipantInfo::_internal_set_identity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* ParticipantInfo::_internal_mutable_identity() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* ParticipantInfo::release_identity() {
  // @@protoc_insertion_point(field_release:livekit.proto.ParticipantInfo.identity)
  if (!_internal_has_identity()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.identity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParticipantInfo::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.ParticipantInfo.identity)
}

// required string metadata = 4;
inline bool ParticipantInfo::_internal_has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParticipantInfo::has_metadata() const {
  return _internal_has_metadata();
}
inline void ParticipantInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ParticipantInfo::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ParticipantInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipantInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.ParticipantInfo.metadata)
}
inline std::string* ParticipantInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.proto.ParticipantInfo.metadata)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void ParticipantInfo::_internal_set_metadata(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* ParticipantInfo::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* ParticipantInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.proto.ParticipantInfo.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.metadata_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParticipantInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.ParticipantInfo.metadata)
}

// map<string, string> attributes = 5;
inline int ParticipantInfo::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int ParticipantInfo::attributes_size() const {
  return _internal_attributes_size();
}
inline void ParticipantInfo::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ParticipantInfo::_internal_attributes() const {
  return _impl_.attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ParticipantInfo::attributes() const {
  // @@protoc_insertion_point(field_map:livekit.proto.ParticipantInfo.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ParticipantInfo::_internal_mutable_attributes() {
  return _impl_.attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ParticipantInfo::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.proto.ParticipantInfo.attributes)
  return _internal_mutable_attributes();
}

// required .livekit.proto.ParticipantKind kind = 6;
inline bool ParticipantInfo::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParticipantInfo::has_kind() const {
  return _internal_has_kind();
}
inline void ParticipantInfo::clear_kind() {
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::livekit::proto::ParticipantKind ParticipantInfo::_internal_kind() const {
  return static_cast< ::livekit::proto::ParticipantKind >(_impl_.kind_);
}
inline ::livekit::proto::ParticipantKind ParticipantInfo::kind() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ParticipantInfo.kind)
  return _internal_kind();
}
inline void ParticipantInfo::_internal_set_kind(::livekit::proto::ParticipantKind value) {
  assert(::livekit::proto::ParticipantKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.kind_ = value;
}
inline void ParticipantInfo::set_kind(::livekit::proto::ParticipantKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:livekit.proto.ParticipantInfo.kind)
}

// required .livekit.proto.DisconnectReason disconnect_reason = 7;
inline bool ParticipantInfo::_internal_has_disconnect_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParticipantInfo::has_disconnect_reason() const {
  return _internal_has_disconnect_reason();
}
inline void ParticipantInfo::clear_disconnect_reason() {
  _impl_.disconnect_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::livekit::proto::DisconnectReason ParticipantInfo::_internal_disconnect_reason() const {
  return static_cast< ::livekit::proto::DisconnectReason >(_impl_.disconnect_reason_);
}
inline ::livekit::proto::DisconnectReason ParticipantInfo::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ParticipantInfo.disconnect_reason)
  return _internal_disconnect_reason();
}
inline void ParticipantInfo::_internal_set_disconnect_reason(::livekit::proto::DisconnectReason value) {
  assert(::livekit::proto::DisconnectReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.disconnect_reason_ = value;
}
inline void ParticipantInfo::set_disconnect_reason(::livekit::proto::DisconnectReason value) {
  _internal_set_disconnect_reason(value);
  // @@protoc_insertion_point(field_set:livekit.proto.ParticipantInfo.disconnect_reason)
}

// -------------------------------------------------------------------

// OwnedParticipant

// required .livekit.proto.FfiOwnedHandle handle = 1;
inline bool OwnedParticipant::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool OwnedParticipant::has_handle() const {
  return _internal_has_handle();
}
inline const ::livekit::proto::FfiOwnedHandle& OwnedParticipant::_internal_handle() const {
  const ::livekit::proto::FfiOwnedHandle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::FfiOwnedHandle&>(
      ::livekit::proto::_FfiOwnedHandle_default_instance_);
}
inline const ::livekit::proto::FfiOwnedHandle& OwnedParticipant::handle() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OwnedParticipant.handle)
  return _internal_handle();
}
inline void OwnedParticipant::unsafe_arena_set_allocated_handle(
    ::livekit::proto::FfiOwnedHandle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.OwnedParticipant.handle)
}
inline ::livekit::proto::FfiOwnedHandle* OwnedParticipant::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::FfiOwnedHandle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::FfiOwnedHandle* OwnedParticipant::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:livekit.proto.OwnedParticipant.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::FfiOwnedHandle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::livekit::proto::FfiOwnedHandle* OwnedParticipant::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::FfiOwnedHandle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::livekit::proto::FfiOwnedHandle* OwnedParticipant::mutable_handle() {
  ::livekit::proto::FfiOwnedHandle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OwnedParticipant.handle)
  return _msg;
}
inline void OwnedParticipant::set_allocated_handle(::livekit::proto::FfiOwnedHandle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OwnedParticipant.handle)
}

// required .livekit.proto.ParticipantInfo info = 2;
inline bool OwnedParticipant::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool OwnedParticipant::has_info() const {
  return _internal_has_info();
}
inline void OwnedParticipant::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::ParticipantInfo& OwnedParticipant::_internal_info() const {
  const ::livekit::proto::ParticipantInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::ParticipantInfo&>(
      ::livekit::proto::_ParticipantInfo_default_instance_);
}
inline const ::livekit::proto::ParticipantInfo& OwnedParticipant::info() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OwnedParticipant.info)
  return _internal_info();
}
inline void OwnedParticipant::unsafe_arena_set_allocated_info(
    ::livekit::proto::ParticipantInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.OwnedParticipant.info)
}
inline ::livekit::proto::ParticipantInfo* OwnedParticipant::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::ParticipantInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::ParticipantInfo* OwnedParticipant::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:livekit.proto.OwnedParticipant.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::ParticipantInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::livekit::proto::ParticipantInfo* OwnedParticipant::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::ParticipantInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::livekit::proto::ParticipantInfo* OwnedParticipant::mutable_info() {
  ::livekit::proto::ParticipantInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OwnedParticipant.info)
  return _msg;
}
inline void OwnedParticipant::set_allocated_info(::livekit::proto::ParticipantInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OwnedParticipant.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace livekit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::livekit::proto::ParticipantKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::ParticipantKind>() {
  return ::livekit::proto::ParticipantKind_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::DisconnectReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::DisconnectReason>() {
  return ::livekit::proto::DisconnectReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_participant_2eproto
