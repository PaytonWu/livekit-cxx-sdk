// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_livekit_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_livekit_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_livekit_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_livekit_5fmetrics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_livekit_5fmetrics_2eproto;
namespace livekit {
class EventMetric;
struct EventMetricDefaultTypeInternal;
extern EventMetricDefaultTypeInternal _EventMetric_default_instance_;
class MetricSample;
struct MetricSampleDefaultTypeInternal;
extern MetricSampleDefaultTypeInternal _MetricSample_default_instance_;
class MetricsBatch;
struct MetricsBatchDefaultTypeInternal;
extern MetricsBatchDefaultTypeInternal _MetricsBatch_default_instance_;
class TimeSeriesMetric;
struct TimeSeriesMetricDefaultTypeInternal;
extern TimeSeriesMetricDefaultTypeInternal _TimeSeriesMetric_default_instance_;
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::EventMetric* Arena::CreateMaybeMessage<::livekit::EventMetric>(Arena*);
template<> ::livekit::MetricSample* Arena::CreateMaybeMessage<::livekit::MetricSample>(Arena*);
template<> ::livekit::MetricsBatch* Arena::CreateMaybeMessage<::livekit::MetricsBatch>(Arena*);
template<> ::livekit::TimeSeriesMetric* Arena::CreateMaybeMessage<::livekit::TimeSeriesMetric>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {

enum MetricLabel : int {
  AGENTS_LLM_TTFT = 0,
  AGENTS_STT_TTFT = 1,
  AGENTS_TTS_TTFB = 2,
  CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT = 3,
  CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION = 4,
  CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT = 5,
  CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION = 6,
  CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES = 7,
  CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES = 8,
  CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS = 9,
  CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT = 10,
  CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION = 11,
  CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY = 12,
  CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT = 13,
  CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH = 14,
  CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU = 15,
  CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER = 16,
  PUBLISHER_RTT = 17,
  SERVER_MESH_RTT = 18,
  SUBSCRIBER_RTT = 19,
  METRIC_LABEL_PREDEFINED_MAX_VALUE = 4096,
  MetricLabel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MetricLabel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MetricLabel_IsValid(int value);
constexpr MetricLabel MetricLabel_MIN = AGENTS_LLM_TTFT;
constexpr MetricLabel MetricLabel_MAX = METRIC_LABEL_PREDEFINED_MAX_VALUE;
constexpr int MetricLabel_ARRAYSIZE = MetricLabel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricLabel_descriptor();
template<typename T>
inline const std::string& MetricLabel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricLabel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricLabel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricLabel_descriptor(), enum_t_value);
}
inline bool MetricLabel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricLabel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricLabel>(
    MetricLabel_descriptor(), name, value);
}
// ===================================================================

class MetricsBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.MetricsBatch) */ {
 public:
  inline MetricsBatch() : MetricsBatch(nullptr) {}
  ~MetricsBatch() override;
  explicit PROTOBUF_CONSTEXPR MetricsBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricsBatch(const MetricsBatch& from);
  MetricsBatch(MetricsBatch&& from) noexcept
    : MetricsBatch() {
    *this = ::std::move(from);
  }

  inline MetricsBatch& operator=(const MetricsBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsBatch& operator=(MetricsBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsBatch* internal_default_instance() {
    return reinterpret_cast<const MetricsBatch*>(
               &_MetricsBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricsBatch& a, MetricsBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricsBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricsBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricsBatch& from) {
    MetricsBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.MetricsBatch";
  }
  protected:
  explicit MetricsBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrDataFieldNumber = 3,
    kTimeSeriesFieldNumber = 4,
    kEventsFieldNumber = 5,
    kNormalizedTimestampFieldNumber = 2,
    kTimestampMsFieldNumber = 1,
  };
  // repeated string str_data = 3;
  int str_data_size() const;
  private:
  int _internal_str_data_size() const;
  public:
  void clear_str_data();
  const std::string& str_data(int index) const;
  std::string* mutable_str_data(int index);
  void set_str_data(int index, const std::string& value);
  void set_str_data(int index, std::string&& value);
  void set_str_data(int index, const char* value);
  void set_str_data(int index, const char* value, size_t size);
  std::string* add_str_data();
  void add_str_data(const std::string& value);
  void add_str_data(std::string&& value);
  void add_str_data(const char* value);
  void add_str_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_data();
  private:
  const std::string& _internal_str_data(int index) const;
  std::string* _internal_add_str_data();
  public:

  // repeated .livekit.TimeSeriesMetric time_series = 4;
  int time_series_size() const;
  private:
  int _internal_time_series_size() const;
  public:
  void clear_time_series();
  ::livekit::TimeSeriesMetric* mutable_time_series(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::TimeSeriesMetric >*
      mutable_time_series();
  private:
  const ::livekit::TimeSeriesMetric& _internal_time_series(int index) const;
  ::livekit::TimeSeriesMetric* _internal_add_time_series();
  public:
  const ::livekit::TimeSeriesMetric& time_series(int index) const;
  ::livekit::TimeSeriesMetric* add_time_series();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::TimeSeriesMetric >&
      time_series() const;

  // repeated .livekit.EventMetric events = 5;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::livekit::EventMetric* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::EventMetric >*
      mutable_events();
  private:
  const ::livekit::EventMetric& _internal_events(int index) const;
  ::livekit::EventMetric* _internal_add_events();
  public:
  const ::livekit::EventMetric& events(int index) const;
  ::livekit::EventMetric* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::EventMetric >&
      events() const;

  // .google.protobuf.Timestamp normalized_timestamp = 2;
  bool has_normalized_timestamp() const;
  private:
  bool _internal_has_normalized_timestamp() const;
  public:
  void clear_normalized_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_normalized_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_normalized_timestamp();
  void set_allocated_normalized_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_normalized_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_normalized_timestamp();
  public:
  void unsafe_arena_set_allocated_normalized_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_normalized_timestamp();

  // int64 timestamp_ms = 1;
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.MetricsBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::TimeSeriesMetric > time_series_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::EventMetric > events_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp_;
    int64_t timestamp_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.TimeSeriesMetric) */ {
 public:
  inline TimeSeriesMetric() : TimeSeriesMetric(nullptr) {}
  ~TimeSeriesMetric() override;
  explicit PROTOBUF_CONSTEXPR TimeSeriesMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesMetric(const TimeSeriesMetric& from);
  TimeSeriesMetric(TimeSeriesMetric&& from) noexcept
    : TimeSeriesMetric() {
    *this = ::std::move(from);
  }

  inline TimeSeriesMetric& operator=(const TimeSeriesMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesMetric& operator=(TimeSeriesMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeriesMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeriesMetric* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesMetric*>(
               &_TimeSeriesMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeSeriesMetric& a, TimeSeriesMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeriesMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeriesMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeriesMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeriesMetric& from) {
    TimeSeriesMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.TimeSeriesMetric";
  }
  protected:
  explicit TimeSeriesMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 4,
    kLabelFieldNumber = 1,
    kParticipantIdentityFieldNumber = 2,
    kTrackSidFieldNumber = 3,
    kRidFieldNumber = 5,
  };
  // repeated .livekit.MetricSample samples = 4;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::livekit::MetricSample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::MetricSample >*
      mutable_samples();
  private:
  const ::livekit::MetricSample& _internal_samples(int index) const;
  ::livekit::MetricSample* _internal_add_samples();
  public:
  const ::livekit::MetricSample& samples(int index) const;
  ::livekit::MetricSample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::MetricSample >&
      samples() const;

  // uint32 label = 1;
  void clear_label();
  uint32_t label() const;
  void set_label(uint32_t value);
  private:
  uint32_t _internal_label() const;
  void _internal_set_label(uint32_t value);
  public:

  // uint32 participant_identity = 2;
  void clear_participant_identity();
  uint32_t participant_identity() const;
  void set_participant_identity(uint32_t value);
  private:
  uint32_t _internal_participant_identity() const;
  void _internal_set_participant_identity(uint32_t value);
  public:

  // uint32 track_sid = 3;
  void clear_track_sid();
  uint32_t track_sid() const;
  void set_track_sid(uint32_t value);
  private:
  uint32_t _internal_track_sid() const;
  void _internal_set_track_sid(uint32_t value);
  public:

  // uint32 rid = 5;
  void clear_rid();
  uint32_t rid() const;
  void set_rid(uint32_t value);
  private:
  uint32_t _internal_rid() const;
  void _internal_set_rid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.TimeSeriesMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::MetricSample > samples_;
    uint32_t label_;
    uint32_t participant_identity_;
    uint32_t track_sid_;
    uint32_t rid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MetricSample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.MetricSample) */ {
 public:
  inline MetricSample() : MetricSample(nullptr) {}
  ~MetricSample() override;
  explicit PROTOBUF_CONSTEXPR MetricSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricSample(const MetricSample& from);
  MetricSample(MetricSample&& from) noexcept
    : MetricSample() {
    *this = ::std::move(from);
  }

  inline MetricSample& operator=(const MetricSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricSample& operator=(MetricSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricSample& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricSample* internal_default_instance() {
    return reinterpret_cast<const MetricSample*>(
               &_MetricSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MetricSample& a, MetricSample& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricSample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricSample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricSample& from) {
    MetricSample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.MetricSample";
  }
  protected:
  explicit MetricSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalizedTimestampFieldNumber = 2,
    kTimestampMsFieldNumber = 1,
    kValueFieldNumber = 3,
  };
  // .google.protobuf.Timestamp normalized_timestamp = 2;
  bool has_normalized_timestamp() const;
  private:
  bool _internal_has_normalized_timestamp() const;
  public:
  void clear_normalized_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_normalized_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_normalized_timestamp();
  void set_allocated_normalized_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_normalized_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_normalized_timestamp();
  public:
  void unsafe_arena_set_allocated_normalized_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_normalized_timestamp();

  // int64 timestamp_ms = 1;
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // float value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.MetricSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp_;
    int64_t timestamp_ms_;
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class EventMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.EventMetric) */ {
 public:
  inline EventMetric() : EventMetric(nullptr) {}
  ~EventMetric() override;
  explicit PROTOBUF_CONSTEXPR EventMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMetric(const EventMetric& from);
  EventMetric(EventMetric&& from) noexcept
    : EventMetric() {
    *this = ::std::move(from);
  }

  inline EventMetric& operator=(const EventMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetric& operator=(EventMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMetric* internal_default_instance() {
    return reinterpret_cast<const EventMetric*>(
               &_EventMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventMetric& a, EventMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMetric& from) {
    EventMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.EventMetric";
  }
  protected:
  explicit EventMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 8,
    kNormalizedStartTimestampFieldNumber = 6,
    kNormalizedEndTimestampFieldNumber = 7,
    kLabelFieldNumber = 1,
    kParticipantIdentityFieldNumber = 2,
    kStartTimestampMsFieldNumber = 4,
    kEndTimestampMsFieldNumber = 5,
    kTrackSidFieldNumber = 3,
    kRidFieldNumber = 9,
  };
  // string metadata = 8;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .google.protobuf.Timestamp normalized_start_timestamp = 6;
  bool has_normalized_start_timestamp() const;
  private:
  bool _internal_has_normalized_start_timestamp() const;
  public:
  void clear_normalized_start_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_start_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_normalized_start_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_normalized_start_timestamp();
  void set_allocated_normalized_start_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_start_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_normalized_start_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_normalized_start_timestamp();
  public:
  void unsafe_arena_set_allocated_normalized_start_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_start_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_normalized_start_timestamp();

  // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
  bool has_normalized_end_timestamp() const;
  private:
  bool _internal_has_normalized_end_timestamp() const;
  public:
  void clear_normalized_end_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_end_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_normalized_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_normalized_end_timestamp();
  void set_allocated_normalized_end_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_end_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_normalized_end_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_normalized_end_timestamp();
  public:
  void unsafe_arena_set_allocated_normalized_end_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_end_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_normalized_end_timestamp();

  // uint32 label = 1;
  void clear_label();
  uint32_t label() const;
  void set_label(uint32_t value);
  private:
  uint32_t _internal_label() const;
  void _internal_set_label(uint32_t value);
  public:

  // uint32 participant_identity = 2;
  void clear_participant_identity();
  uint32_t participant_identity() const;
  void set_participant_identity(uint32_t value);
  private:
  uint32_t _internal_participant_identity() const;
  void _internal_set_participant_identity(uint32_t value);
  public:

  // int64 start_timestamp_ms = 4;
  void clear_start_timestamp_ms();
  int64_t start_timestamp_ms() const;
  void set_start_timestamp_ms(int64_t value);
  private:
  int64_t _internal_start_timestamp_ms() const;
  void _internal_set_start_timestamp_ms(int64_t value);
  public:

  // optional int64 end_timestamp_ms = 5;
  bool has_end_timestamp_ms() const;
  private:
  bool _internal_has_end_timestamp_ms() const;
  public:
  void clear_end_timestamp_ms();
  int64_t end_timestamp_ms() const;
  void set_end_timestamp_ms(int64_t value);
  private:
  int64_t _internal_end_timestamp_ms() const;
  void _internal_set_end_timestamp_ms(int64_t value);
  public:

  // uint32 track_sid = 3;
  void clear_track_sid();
  uint32_t track_sid() const;
  void set_track_sid(uint32_t value);
  private:
  uint32_t _internal_track_sid() const;
  void _internal_set_track_sid(uint32_t value);
  public:

  // uint32 rid = 9;
  void clear_rid();
  uint32_t rid() const;
  void set_rid(uint32_t value);
  private:
  uint32_t _internal_rid() const;
  void _internal_set_rid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.EventMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_start_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_end_timestamp_;
    uint32_t label_;
    uint32_t participant_identity_;
    int64_t start_timestamp_ms_;
    int64_t end_timestamp_ms_;
    uint32_t track_sid_;
    uint32_t rid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricsBatch

// int64 timestamp_ms = 1;
inline void MetricsBatch::clear_timestamp_ms() {
  _impl_.timestamp_ms_ = int64_t{0};
}
inline int64_t MetricsBatch::_internal_timestamp_ms() const {
  return _impl_.timestamp_ms_;
}
inline int64_t MetricsBatch::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:livekit.MetricsBatch.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void MetricsBatch::_internal_set_timestamp_ms(int64_t value) {
  
  _impl_.timestamp_ms_ = value;
}
inline void MetricsBatch::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:livekit.MetricsBatch.timestamp_ms)
}

// .google.protobuf.Timestamp normalized_timestamp = 2;
inline bool MetricsBatch::_internal_has_normalized_timestamp() const {
  return this != internal_default_instance() && _impl_.normalized_timestamp_ != nullptr;
}
inline bool MetricsBatch::has_normalized_timestamp() const {
  return _internal_has_normalized_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MetricsBatch::_internal_normalized_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.normalized_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MetricsBatch::normalized_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.MetricsBatch.normalized_timestamp)
  return _internal_normalized_timestamp();
}
inline void MetricsBatch::unsafe_arena_set_allocated_normalized_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_timestamp_);
  }
  _impl_.normalized_timestamp_ = normalized_timestamp;
  if (normalized_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.MetricsBatch.normalized_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricsBatch::release_normalized_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_timestamp_;
  _impl_.normalized_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricsBatch::unsafe_arena_release_normalized_timestamp() {
  // @@protoc_insertion_point(field_release:livekit.MetricsBatch.normalized_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_timestamp_;
  _impl_.normalized_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricsBatch::_internal_mutable_normalized_timestamp() {
  
  if (_impl_.normalized_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.normalized_timestamp_ = p;
  }
  return _impl_.normalized_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricsBatch::mutable_normalized_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_normalized_timestamp();
  // @@protoc_insertion_point(field_mutable:livekit.MetricsBatch.normalized_timestamp)
  return _msg;
}
inline void MetricsBatch::set_allocated_normalized_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_timestamp_);
  }
  if (normalized_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalized_timestamp));
    if (message_arena != submessage_arena) {
      normalized_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalized_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normalized_timestamp_ = normalized_timestamp;
  // @@protoc_insertion_point(field_set_allocated:livekit.MetricsBatch.normalized_timestamp)
}

// repeated string str_data = 3;
inline int MetricsBatch::_internal_str_data_size() const {
  return _impl_.str_data_.size();
}
inline int MetricsBatch::str_data_size() const {
  return _internal_str_data_size();
}
inline void MetricsBatch::clear_str_data() {
  _impl_.str_data_.Clear();
}
inline std::string* MetricsBatch::add_str_data() {
  std::string* _s = _internal_add_str_data();
  // @@protoc_insertion_point(field_add_mutable:livekit.MetricsBatch.str_data)
  return _s;
}
inline const std::string& MetricsBatch::_internal_str_data(int index) const {
  return _impl_.str_data_.Get(index);
}
inline const std::string& MetricsBatch::str_data(int index) const {
  // @@protoc_insertion_point(field_get:livekit.MetricsBatch.str_data)
  return _internal_str_data(index);
}
inline std::string* MetricsBatch::mutable_str_data(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.MetricsBatch.str_data)
  return _impl_.str_data_.Mutable(index);
}
inline void MetricsBatch::set_str_data(int index, const std::string& value) {
  _impl_.str_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.MetricsBatch.str_data)
}
inline void MetricsBatch::set_str_data(int index, std::string&& value) {
  _impl_.str_data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.MetricsBatch.str_data)
}
inline void MetricsBatch::set_str_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.MetricsBatch.str_data)
}
inline void MetricsBatch::set_str_data(int index, const char* value, size_t size) {
  _impl_.str_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.MetricsBatch.str_data)
}
inline std::string* MetricsBatch::_internal_add_str_data() {
  return _impl_.str_data_.Add();
}
inline void MetricsBatch::add_str_data(const std::string& value) {
  _impl_.str_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.MetricsBatch.str_data)
}
inline void MetricsBatch::add_str_data(std::string&& value) {
  _impl_.str_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.MetricsBatch.str_data)
}
inline void MetricsBatch::add_str_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.MetricsBatch.str_data)
}
inline void MetricsBatch::add_str_data(const char* value, size_t size) {
  _impl_.str_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.MetricsBatch.str_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MetricsBatch::str_data() const {
  // @@protoc_insertion_point(field_list:livekit.MetricsBatch.str_data)
  return _impl_.str_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MetricsBatch::mutable_str_data() {
  // @@protoc_insertion_point(field_mutable_list:livekit.MetricsBatch.str_data)
  return &_impl_.str_data_;
}

// repeated .livekit.TimeSeriesMetric time_series = 4;
inline int MetricsBatch::_internal_time_series_size() const {
  return _impl_.time_series_.size();
}
inline int MetricsBatch::time_series_size() const {
  return _internal_time_series_size();
}
inline void MetricsBatch::clear_time_series() {
  _impl_.time_series_.Clear();
}
inline ::livekit::TimeSeriesMetric* MetricsBatch::mutable_time_series(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.MetricsBatch.time_series)
  return _impl_.time_series_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::TimeSeriesMetric >*
MetricsBatch::mutable_time_series() {
  // @@protoc_insertion_point(field_mutable_list:livekit.MetricsBatch.time_series)
  return &_impl_.time_series_;
}
inline const ::livekit::TimeSeriesMetric& MetricsBatch::_internal_time_series(int index) const {
  return _impl_.time_series_.Get(index);
}
inline const ::livekit::TimeSeriesMetric& MetricsBatch::time_series(int index) const {
  // @@protoc_insertion_point(field_get:livekit.MetricsBatch.time_series)
  return _internal_time_series(index);
}
inline ::livekit::TimeSeriesMetric* MetricsBatch::_internal_add_time_series() {
  return _impl_.time_series_.Add();
}
inline ::livekit::TimeSeriesMetric* MetricsBatch::add_time_series() {
  ::livekit::TimeSeriesMetric* _add = _internal_add_time_series();
  // @@protoc_insertion_point(field_add:livekit.MetricsBatch.time_series)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::TimeSeriesMetric >&
MetricsBatch::time_series() const {
  // @@protoc_insertion_point(field_list:livekit.MetricsBatch.time_series)
  return _impl_.time_series_;
}

// repeated .livekit.EventMetric events = 5;
inline int MetricsBatch::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int MetricsBatch::events_size() const {
  return _internal_events_size();
}
inline void MetricsBatch::clear_events() {
  _impl_.events_.Clear();
}
inline ::livekit::EventMetric* MetricsBatch::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.MetricsBatch.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::EventMetric >*
MetricsBatch::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:livekit.MetricsBatch.events)
  return &_impl_.events_;
}
inline const ::livekit::EventMetric& MetricsBatch::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::livekit::EventMetric& MetricsBatch::events(int index) const {
  // @@protoc_insertion_point(field_get:livekit.MetricsBatch.events)
  return _internal_events(index);
}
inline ::livekit::EventMetric* MetricsBatch::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::livekit::EventMetric* MetricsBatch::add_events() {
  ::livekit::EventMetric* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:livekit.MetricsBatch.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::EventMetric >&
MetricsBatch::events() const {
  // @@protoc_insertion_point(field_list:livekit.MetricsBatch.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// TimeSeriesMetric

// uint32 label = 1;
inline void TimeSeriesMetric::clear_label() {
  _impl_.label_ = 0u;
}
inline uint32_t TimeSeriesMetric::_internal_label() const {
  return _impl_.label_;
}
inline uint32_t TimeSeriesMetric::label() const {
  // @@protoc_insertion_point(field_get:livekit.TimeSeriesMetric.label)
  return _internal_label();
}
inline void TimeSeriesMetric::_internal_set_label(uint32_t value) {
  
  _impl_.label_ = value;
}
inline void TimeSeriesMetric::set_label(uint32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:livekit.TimeSeriesMetric.label)
}

// uint32 participant_identity = 2;
inline void TimeSeriesMetric::clear_participant_identity() {
  _impl_.participant_identity_ = 0u;
}
inline uint32_t TimeSeriesMetric::_internal_participant_identity() const {
  return _impl_.participant_identity_;
}
inline uint32_t TimeSeriesMetric::participant_identity() const {
  // @@protoc_insertion_point(field_get:livekit.TimeSeriesMetric.participant_identity)
  return _internal_participant_identity();
}
inline void TimeSeriesMetric::_internal_set_participant_identity(uint32_t value) {
  
  _impl_.participant_identity_ = value;
}
inline void TimeSeriesMetric::set_participant_identity(uint32_t value) {
  _internal_set_participant_identity(value);
  // @@protoc_insertion_point(field_set:livekit.TimeSeriesMetric.participant_identity)
}

// uint32 track_sid = 3;
inline void TimeSeriesMetric::clear_track_sid() {
  _impl_.track_sid_ = 0u;
}
inline uint32_t TimeSeriesMetric::_internal_track_sid() const {
  return _impl_.track_sid_;
}
inline uint32_t TimeSeriesMetric::track_sid() const {
  // @@protoc_insertion_point(field_get:livekit.TimeSeriesMetric.track_sid)
  return _internal_track_sid();
}
inline void TimeSeriesMetric::_internal_set_track_sid(uint32_t value) {
  
  _impl_.track_sid_ = value;
}
inline void TimeSeriesMetric::set_track_sid(uint32_t value) {
  _internal_set_track_sid(value);
  // @@protoc_insertion_point(field_set:livekit.TimeSeriesMetric.track_sid)
}

// repeated .livekit.MetricSample samples = 4;
inline int TimeSeriesMetric::_internal_samples_size() const {
  return _impl_.samples_.size();
}
inline int TimeSeriesMetric::samples_size() const {
  return _internal_samples_size();
}
inline void TimeSeriesMetric::clear_samples() {
  _impl_.samples_.Clear();
}
inline ::livekit::MetricSample* TimeSeriesMetric::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.TimeSeriesMetric.samples)
  return _impl_.samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::MetricSample >*
TimeSeriesMetric::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:livekit.TimeSeriesMetric.samples)
  return &_impl_.samples_;
}
inline const ::livekit::MetricSample& TimeSeriesMetric::_internal_samples(int index) const {
  return _impl_.samples_.Get(index);
}
inline const ::livekit::MetricSample& TimeSeriesMetric::samples(int index) const {
  // @@protoc_insertion_point(field_get:livekit.TimeSeriesMetric.samples)
  return _internal_samples(index);
}
inline ::livekit::MetricSample* TimeSeriesMetric::_internal_add_samples() {
  return _impl_.samples_.Add();
}
inline ::livekit::MetricSample* TimeSeriesMetric::add_samples() {
  ::livekit::MetricSample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:livekit.TimeSeriesMetric.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::MetricSample >&
TimeSeriesMetric::samples() const {
  // @@protoc_insertion_point(field_list:livekit.TimeSeriesMetric.samples)
  return _impl_.samples_;
}

// uint32 rid = 5;
inline void TimeSeriesMetric::clear_rid() {
  _impl_.rid_ = 0u;
}
inline uint32_t TimeSeriesMetric::_internal_rid() const {
  return _impl_.rid_;
}
inline uint32_t TimeSeriesMetric::rid() const {
  // @@protoc_insertion_point(field_get:livekit.TimeSeriesMetric.rid)
  return _internal_rid();
}
inline void TimeSeriesMetric::_internal_set_rid(uint32_t value) {
  
  _impl_.rid_ = value;
}
inline void TimeSeriesMetric::set_rid(uint32_t value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:livekit.TimeSeriesMetric.rid)
}

// -------------------------------------------------------------------

// MetricSample

// int64 timestamp_ms = 1;
inline void MetricSample::clear_timestamp_ms() {
  _impl_.timestamp_ms_ = int64_t{0};
}
inline int64_t MetricSample::_internal_timestamp_ms() const {
  return _impl_.timestamp_ms_;
}
inline int64_t MetricSample::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:livekit.MetricSample.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void MetricSample::_internal_set_timestamp_ms(int64_t value) {
  
  _impl_.timestamp_ms_ = value;
}
inline void MetricSample::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:livekit.MetricSample.timestamp_ms)
}

// .google.protobuf.Timestamp normalized_timestamp = 2;
inline bool MetricSample::_internal_has_normalized_timestamp() const {
  return this != internal_default_instance() && _impl_.normalized_timestamp_ != nullptr;
}
inline bool MetricSample::has_normalized_timestamp() const {
  return _internal_has_normalized_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MetricSample::_internal_normalized_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.normalized_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MetricSample::normalized_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.MetricSample.normalized_timestamp)
  return _internal_normalized_timestamp();
}
inline void MetricSample::unsafe_arena_set_allocated_normalized_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_timestamp_);
  }
  _impl_.normalized_timestamp_ = normalized_timestamp;
  if (normalized_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.MetricSample.normalized_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricSample::release_normalized_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_timestamp_;
  _impl_.normalized_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricSample::unsafe_arena_release_normalized_timestamp() {
  // @@protoc_insertion_point(field_release:livekit.MetricSample.normalized_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_timestamp_;
  _impl_.normalized_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricSample::_internal_mutable_normalized_timestamp() {
  
  if (_impl_.normalized_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.normalized_timestamp_ = p;
  }
  return _impl_.normalized_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MetricSample::mutable_normalized_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_normalized_timestamp();
  // @@protoc_insertion_point(field_mutable:livekit.MetricSample.normalized_timestamp)
  return _msg;
}
inline void MetricSample::set_allocated_normalized_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_timestamp_);
  }
  if (normalized_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalized_timestamp));
    if (message_arena != submessage_arena) {
      normalized_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalized_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normalized_timestamp_ = normalized_timestamp;
  // @@protoc_insertion_point(field_set_allocated:livekit.MetricSample.normalized_timestamp)
}

// float value = 3;
inline void MetricSample::clear_value() {
  _impl_.value_ = 0;
}
inline float MetricSample::_internal_value() const {
  return _impl_.value_;
}
inline float MetricSample::value() const {
  // @@protoc_insertion_point(field_get:livekit.MetricSample.value)
  return _internal_value();
}
inline void MetricSample::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void MetricSample::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:livekit.MetricSample.value)
}

// -------------------------------------------------------------------

// EventMetric

// uint32 label = 1;
inline void EventMetric::clear_label() {
  _impl_.label_ = 0u;
}
inline uint32_t EventMetric::_internal_label() const {
  return _impl_.label_;
}
inline uint32_t EventMetric::label() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.label)
  return _internal_label();
}
inline void EventMetric::_internal_set_label(uint32_t value) {
  
  _impl_.label_ = value;
}
inline void EventMetric::set_label(uint32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:livekit.EventMetric.label)
}

// uint32 participant_identity = 2;
inline void EventMetric::clear_participant_identity() {
  _impl_.participant_identity_ = 0u;
}
inline uint32_t EventMetric::_internal_participant_identity() const {
  return _impl_.participant_identity_;
}
inline uint32_t EventMetric::participant_identity() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.participant_identity)
  return _internal_participant_identity();
}
inline void EventMetric::_internal_set_participant_identity(uint32_t value) {
  
  _impl_.participant_identity_ = value;
}
inline void EventMetric::set_participant_identity(uint32_t value) {
  _internal_set_participant_identity(value);
  // @@protoc_insertion_point(field_set:livekit.EventMetric.participant_identity)
}

// uint32 track_sid = 3;
inline void EventMetric::clear_track_sid() {
  _impl_.track_sid_ = 0u;
}
inline uint32_t EventMetric::_internal_track_sid() const {
  return _impl_.track_sid_;
}
inline uint32_t EventMetric::track_sid() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.track_sid)
  return _internal_track_sid();
}
inline void EventMetric::_internal_set_track_sid(uint32_t value) {
  
  _impl_.track_sid_ = value;
}
inline void EventMetric::set_track_sid(uint32_t value) {
  _internal_set_track_sid(value);
  // @@protoc_insertion_point(field_set:livekit.EventMetric.track_sid)
}

// int64 start_timestamp_ms = 4;
inline void EventMetric::clear_start_timestamp_ms() {
  _impl_.start_timestamp_ms_ = int64_t{0};
}
inline int64_t EventMetric::_internal_start_timestamp_ms() const {
  return _impl_.start_timestamp_ms_;
}
inline int64_t EventMetric::start_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.start_timestamp_ms)
  return _internal_start_timestamp_ms();
}
inline void EventMetric::_internal_set_start_timestamp_ms(int64_t value) {
  
  _impl_.start_timestamp_ms_ = value;
}
inline void EventMetric::set_start_timestamp_ms(int64_t value) {
  _internal_set_start_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:livekit.EventMetric.start_timestamp_ms)
}

// optional int64 end_timestamp_ms = 5;
inline bool EventMetric::_internal_has_end_timestamp_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventMetric::has_end_timestamp_ms() const {
  return _internal_has_end_timestamp_ms();
}
inline void EventMetric::clear_end_timestamp_ms() {
  _impl_.end_timestamp_ms_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t EventMetric::_internal_end_timestamp_ms() const {
  return _impl_.end_timestamp_ms_;
}
inline int64_t EventMetric::end_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.end_timestamp_ms)
  return _internal_end_timestamp_ms();
}
inline void EventMetric::_internal_set_end_timestamp_ms(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_timestamp_ms_ = value;
}
inline void EventMetric::set_end_timestamp_ms(int64_t value) {
  _internal_set_end_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:livekit.EventMetric.end_timestamp_ms)
}

// .google.protobuf.Timestamp normalized_start_timestamp = 6;
inline bool EventMetric::_internal_has_normalized_start_timestamp() const {
  return this != internal_default_instance() && _impl_.normalized_start_timestamp_ != nullptr;
}
inline bool EventMetric::has_normalized_start_timestamp() const {
  return _internal_has_normalized_start_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventMetric::_internal_normalized_start_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.normalized_start_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventMetric::normalized_start_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.normalized_start_timestamp)
  return _internal_normalized_start_timestamp();
}
inline void EventMetric::unsafe_arena_set_allocated_normalized_start_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_start_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_start_timestamp_);
  }
  _impl_.normalized_start_timestamp_ = normalized_start_timestamp;
  if (normalized_start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.EventMetric.normalized_start_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::release_normalized_start_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_start_timestamp_;
  _impl_.normalized_start_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::unsafe_arena_release_normalized_start_timestamp() {
  // @@protoc_insertion_point(field_release:livekit.EventMetric.normalized_start_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_start_timestamp_;
  _impl_.normalized_start_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::_internal_mutable_normalized_start_timestamp() {
  
  if (_impl_.normalized_start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.normalized_start_timestamp_ = p;
  }
  return _impl_.normalized_start_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::mutable_normalized_start_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_normalized_start_timestamp();
  // @@protoc_insertion_point(field_mutable:livekit.EventMetric.normalized_start_timestamp)
  return _msg;
}
inline void EventMetric::set_allocated_normalized_start_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_start_timestamp_);
  }
  if (normalized_start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalized_start_timestamp));
    if (message_arena != submessage_arena) {
      normalized_start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalized_start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normalized_start_timestamp_ = normalized_start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:livekit.EventMetric.normalized_start_timestamp)
}

// optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
inline bool EventMetric::_internal_has_normalized_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.normalized_end_timestamp_ != nullptr);
  return value;
}
inline bool EventMetric::has_normalized_end_timestamp() const {
  return _internal_has_normalized_end_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventMetric::_internal_normalized_end_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.normalized_end_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventMetric::normalized_end_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.normalized_end_timestamp)
  return _internal_normalized_end_timestamp();
}
inline void EventMetric::unsafe_arena_set_allocated_normalized_end_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_end_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_end_timestamp_);
  }
  _impl_.normalized_end_timestamp_ = normalized_end_timestamp;
  if (normalized_end_timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.EventMetric.normalized_end_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::release_normalized_end_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_end_timestamp_;
  _impl_.normalized_end_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::unsafe_arena_release_normalized_end_timestamp() {
  // @@protoc_insertion_point(field_release:livekit.EventMetric.normalized_end_timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.normalized_end_timestamp_;
  _impl_.normalized_end_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::_internal_mutable_normalized_end_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.normalized_end_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.normalized_end_timestamp_ = p;
  }
  return _impl_.normalized_end_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetric::mutable_normalized_end_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_normalized_end_timestamp();
  // @@protoc_insertion_point(field_mutable:livekit.EventMetric.normalized_end_timestamp)
  return _msg;
}
inline void EventMetric::set_allocated_normalized_end_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* normalized_end_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalized_end_timestamp_);
  }
  if (normalized_end_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalized_end_timestamp));
    if (message_arena != submessage_arena) {
      normalized_end_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalized_end_timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.normalized_end_timestamp_ = normalized_end_timestamp;
  // @@protoc_insertion_point(field_set_allocated:livekit.EventMetric.normalized_end_timestamp)
}

// string metadata = 8;
inline void EventMetric::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& EventMetric::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventMetric::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.EventMetric.metadata)
}
inline std::string* EventMetric::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.EventMetric.metadata)
  return _s;
}
inline const std::string& EventMetric::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void EventMetric::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* EventMetric::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* EventMetric::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.EventMetric.metadata)
  return _impl_.metadata_.Release();
}
inline void EventMetric::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.EventMetric.metadata)
}

// uint32 rid = 9;
inline void EventMetric::clear_rid() {
  _impl_.rid_ = 0u;
}
inline uint32_t EventMetric::_internal_rid() const {
  return _impl_.rid_;
}
inline uint32_t EventMetric::rid() const {
  // @@protoc_insertion_point(field_get:livekit.EventMetric.rid)
  return _internal_rid();
}
inline void EventMetric::_internal_set_rid(uint32_t value) {
  
  _impl_.rid_ = value;
}
inline void EventMetric::set_rid(uint32_t value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:livekit.EventMetric.rid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace livekit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::livekit::MetricLabel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::MetricLabel>() {
  return ::livekit::MetricLabel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_livekit_5fmetrics_2eproto
