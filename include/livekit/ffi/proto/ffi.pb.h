// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ffi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ffi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ffi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "e2ee.pb.h"
#include "track.pb.h"
#include "track_publication.pb.h"
#include "room.pb.h"
#include "video_frame.pb.h"
#include "audio_frame.pb.h"
#include "rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ffi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ffi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ffi_2eproto;
namespace livekit {
namespace proto {
class DisposeCallback;
struct DisposeCallbackDefaultTypeInternal;
extern DisposeCallbackDefaultTypeInternal _DisposeCallback_default_instance_;
class DisposeRequest;
struct DisposeRequestDefaultTypeInternal;
extern DisposeRequestDefaultTypeInternal _DisposeRequest_default_instance_;
class DisposeResponse;
struct DisposeResponseDefaultTypeInternal;
extern DisposeResponseDefaultTypeInternal _DisposeResponse_default_instance_;
class FfiEvent;
struct FfiEventDefaultTypeInternal;
extern FfiEventDefaultTypeInternal _FfiEvent_default_instance_;
class FfiRequest;
struct FfiRequestDefaultTypeInternal;
extern FfiRequestDefaultTypeInternal _FfiRequest_default_instance_;
class FfiResponse;
struct FfiResponseDefaultTypeInternal;
extern FfiResponseDefaultTypeInternal _FfiResponse_default_instance_;
class LogBatch;
struct LogBatchDefaultTypeInternal;
extern LogBatchDefaultTypeInternal _LogBatch_default_instance_;
class LogRecord;
struct LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
class Panic;
struct PanicDefaultTypeInternal;
extern PanicDefaultTypeInternal _Panic_default_instance_;
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::proto::DisposeCallback* Arena::CreateMaybeMessage<::livekit::proto::DisposeCallback>(Arena*);
template<> ::livekit::proto::DisposeRequest* Arena::CreateMaybeMessage<::livekit::proto::DisposeRequest>(Arena*);
template<> ::livekit::proto::DisposeResponse* Arena::CreateMaybeMessage<::livekit::proto::DisposeResponse>(Arena*);
template<> ::livekit::proto::FfiEvent* Arena::CreateMaybeMessage<::livekit::proto::FfiEvent>(Arena*);
template<> ::livekit::proto::FfiRequest* Arena::CreateMaybeMessage<::livekit::proto::FfiRequest>(Arena*);
template<> ::livekit::proto::FfiResponse* Arena::CreateMaybeMessage<::livekit::proto::FfiResponse>(Arena*);
template<> ::livekit::proto::LogBatch* Arena::CreateMaybeMessage<::livekit::proto::LogBatch>(Arena*);
template<> ::livekit::proto::LogRecord* Arena::CreateMaybeMessage<::livekit::proto::LogRecord>(Arena*);
template<> ::livekit::proto::Panic* Arena::CreateMaybeMessage<::livekit::proto::Panic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {
namespace proto {

enum LogLevel : int {
  LOG_ERROR = 0,
  LOG_WARN = 1,
  LOG_INFO = 2,
  LOG_DEBUG = 3,
  LOG_TRACE = 4
};
bool LogLevel_IsValid(int value);
constexpr LogLevel LogLevel_MIN = LOG_ERROR;
constexpr LogLevel LogLevel_MAX = LOG_TRACE;
constexpr int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor();
template<typename T>
inline const std::string& LogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogLevel_descriptor(), enum_t_value);
}
inline bool LogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogLevel>(
    LogLevel_descriptor(), name, value);
}
// ===================================================================

class FfiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.FfiRequest) */ {
 public:
  inline FfiRequest() : FfiRequest(nullptr) {}
  ~FfiRequest() override;
  explicit PROTOBUF_CONSTEXPR FfiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FfiRequest(const FfiRequest& from);
  FfiRequest(FfiRequest&& from) noexcept
    : FfiRequest() {
    *this = ::std::move(from);
  }

  inline FfiRequest& operator=(const FfiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FfiRequest& operator=(FfiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FfiRequest& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kDispose = 2,
    kConnect = 3,
    kDisconnect = 4,
    kPublishTrack = 5,
    kUnpublishTrack = 6,
    kPublishData = 7,
    kSetSubscribed = 8,
    kSetLocalMetadata = 9,
    kSetLocalName = 10,
    kSetLocalAttributes = 11,
    kGetSessionStats = 12,
    kPublishTranscription = 13,
    kPublishSipDtmf = 14,
    kCreateVideoTrack = 15,
    kCreateAudioTrack = 16,
    kLocalTrackMute = 17,
    kEnableRemoteTrack = 18,
    kGetStats = 19,
    kSetTrackSubscriptionPermissions = 48,
    kNewVideoStream = 20,
    kNewVideoSource = 21,
    kCaptureVideoFrame = 22,
    kVideoConvert = 23,
    kVideoStreamFromParticipant = 24,
    kNewAudioStream = 25,
    kNewAudioSource = 26,
    kCaptureAudioFrame = 27,
    kClearAudioBuffer = 28,
    kNewAudioResampler = 29,
    kRemixAndResample = 30,
    kE2Ee = 31,
    kAudioStreamFromParticipant = 32,
    kNewSoxResampler = 33,
    kPushSoxResampler = 34,
    kFlushSoxResampler = 35,
    kSendChatMessage = 36,
    kEditChatMessage = 37,
    kPerformRpc = 38,
    kRegisterRpcMethod = 39,
    kUnregisterRpcMethod = 40,
    kRpcMethodInvocationResponse = 41,
    kEnableRemoteTrackPublication = 42,
    kUpdateRemoteTrackPublicationDimension = 43,
    kSendStreamHeader = 44,
    kSendStreamChunk = 45,
    kSendStreamTrailer = 46,
    kSetDataChannelBufferedAmountLowThreshold = 47,
    kLoadAudioFilterPlugin = 49,
    kNewApm = 50,
    kApmProcessStream = 51,
    kApmProcessReverseStream = 52,
    MESSAGE_NOT_SET = 0,
  };

  static inline const FfiRequest* internal_default_instance() {
    return reinterpret_cast<const FfiRequest*>(
               &_FfiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FfiRequest& a, FfiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FfiRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FfiRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FfiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FfiRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FfiRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FfiRequest& from) {
    FfiRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FfiRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.FfiRequest";
  }
  protected:
  explicit FfiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisposeFieldNumber = 2,
    kConnectFieldNumber = 3,
    kDisconnectFieldNumber = 4,
    kPublishTrackFieldNumber = 5,
    kUnpublishTrackFieldNumber = 6,
    kPublishDataFieldNumber = 7,
    kSetSubscribedFieldNumber = 8,
    kSetLocalMetadataFieldNumber = 9,
    kSetLocalNameFieldNumber = 10,
    kSetLocalAttributesFieldNumber = 11,
    kGetSessionStatsFieldNumber = 12,
    kPublishTranscriptionFieldNumber = 13,
    kPublishSipDtmfFieldNumber = 14,
    kCreateVideoTrackFieldNumber = 15,
    kCreateAudioTrackFieldNumber = 16,
    kLocalTrackMuteFieldNumber = 17,
    kEnableRemoteTrackFieldNumber = 18,
    kGetStatsFieldNumber = 19,
    kSetTrackSubscriptionPermissionsFieldNumber = 48,
    kNewVideoStreamFieldNumber = 20,
    kNewVideoSourceFieldNumber = 21,
    kCaptureVideoFrameFieldNumber = 22,
    kVideoConvertFieldNumber = 23,
    kVideoStreamFromParticipantFieldNumber = 24,
    kNewAudioStreamFieldNumber = 25,
    kNewAudioSourceFieldNumber = 26,
    kCaptureAudioFrameFieldNumber = 27,
    kClearAudioBufferFieldNumber = 28,
    kNewAudioResamplerFieldNumber = 29,
    kRemixAndResampleFieldNumber = 30,
    kE2EeFieldNumber = 31,
    kAudioStreamFromParticipantFieldNumber = 32,
    kNewSoxResamplerFieldNumber = 33,
    kPushSoxResamplerFieldNumber = 34,
    kFlushSoxResamplerFieldNumber = 35,
    kSendChatMessageFieldNumber = 36,
    kEditChatMessageFieldNumber = 37,
    kPerformRpcFieldNumber = 38,
    kRegisterRpcMethodFieldNumber = 39,
    kUnregisterRpcMethodFieldNumber = 40,
    kRpcMethodInvocationResponseFieldNumber = 41,
    kEnableRemoteTrackPublicationFieldNumber = 42,
    kUpdateRemoteTrackPublicationDimensionFieldNumber = 43,
    kSendStreamHeaderFieldNumber = 44,
    kSendStreamChunkFieldNumber = 45,
    kSendStreamTrailerFieldNumber = 46,
    kSetDataChannelBufferedAmountLowThresholdFieldNumber = 47,
    kLoadAudioFilterPluginFieldNumber = 49,
    kNewApmFieldNumber = 50,
    kApmProcessStreamFieldNumber = 51,
    kApmProcessReverseStreamFieldNumber = 52,
  };
  // .livekit.proto.DisposeRequest dispose = 2;
  bool has_dispose() const;
  private:
  bool _internal_has_dispose() const;
  public:
  void clear_dispose();
  const ::livekit::proto::DisposeRequest& dispose() const;
  PROTOBUF_NODISCARD ::livekit::proto::DisposeRequest* release_dispose();
  ::livekit::proto::DisposeRequest* mutable_dispose();
  void set_allocated_dispose(::livekit::proto::DisposeRequest* dispose);
  private:
  const ::livekit::proto::DisposeRequest& _internal_dispose() const;
  ::livekit::proto::DisposeRequest* _internal_mutable_dispose();
  public:
  void unsafe_arena_set_allocated_dispose(
      ::livekit::proto::DisposeRequest* dispose);
  ::livekit::proto::DisposeRequest* unsafe_arena_release_dispose();

  // .livekit.proto.ConnectRequest connect = 3;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::livekit::proto::ConnectRequest& connect() const;
  PROTOBUF_NODISCARD ::livekit::proto::ConnectRequest* release_connect();
  ::livekit::proto::ConnectRequest* mutable_connect();
  void set_allocated_connect(::livekit::proto::ConnectRequest* connect);
  private:
  const ::livekit::proto::ConnectRequest& _internal_connect() const;
  ::livekit::proto::ConnectRequest* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::livekit::proto::ConnectRequest* connect);
  ::livekit::proto::ConnectRequest* unsafe_arena_release_connect();

  // .livekit.proto.DisconnectRequest disconnect = 4;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::livekit::proto::DisconnectRequest& disconnect() const;
  PROTOBUF_NODISCARD ::livekit::proto::DisconnectRequest* release_disconnect();
  ::livekit::proto::DisconnectRequest* mutable_disconnect();
  void set_allocated_disconnect(::livekit::proto::DisconnectRequest* disconnect);
  private:
  const ::livekit::proto::DisconnectRequest& _internal_disconnect() const;
  ::livekit::proto::DisconnectRequest* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::livekit::proto::DisconnectRequest* disconnect);
  ::livekit::proto::DisconnectRequest* unsafe_arena_release_disconnect();

  // .livekit.proto.PublishTrackRequest publish_track = 5;
  bool has_publish_track() const;
  private:
  bool _internal_has_publish_track() const;
  public:
  void clear_publish_track();
  const ::livekit::proto::PublishTrackRequest& publish_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishTrackRequest* release_publish_track();
  ::livekit::proto::PublishTrackRequest* mutable_publish_track();
  void set_allocated_publish_track(::livekit::proto::PublishTrackRequest* publish_track);
  private:
  const ::livekit::proto::PublishTrackRequest& _internal_publish_track() const;
  ::livekit::proto::PublishTrackRequest* _internal_mutable_publish_track();
  public:
  void unsafe_arena_set_allocated_publish_track(
      ::livekit::proto::PublishTrackRequest* publish_track);
  ::livekit::proto::PublishTrackRequest* unsafe_arena_release_publish_track();

  // .livekit.proto.UnpublishTrackRequest unpublish_track = 6;
  bool has_unpublish_track() const;
  private:
  bool _internal_has_unpublish_track() const;
  public:
  void clear_unpublish_track();
  const ::livekit::proto::UnpublishTrackRequest& unpublish_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::UnpublishTrackRequest* release_unpublish_track();
  ::livekit::proto::UnpublishTrackRequest* mutable_unpublish_track();
  void set_allocated_unpublish_track(::livekit::proto::UnpublishTrackRequest* unpublish_track);
  private:
  const ::livekit::proto::UnpublishTrackRequest& _internal_unpublish_track() const;
  ::livekit::proto::UnpublishTrackRequest* _internal_mutable_unpublish_track();
  public:
  void unsafe_arena_set_allocated_unpublish_track(
      ::livekit::proto::UnpublishTrackRequest* unpublish_track);
  ::livekit::proto::UnpublishTrackRequest* unsafe_arena_release_unpublish_track();

  // .livekit.proto.PublishDataRequest publish_data = 7;
  bool has_publish_data() const;
  private:
  bool _internal_has_publish_data() const;
  public:
  void clear_publish_data();
  const ::livekit::proto::PublishDataRequest& publish_data() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishDataRequest* release_publish_data();
  ::livekit::proto::PublishDataRequest* mutable_publish_data();
  void set_allocated_publish_data(::livekit::proto::PublishDataRequest* publish_data);
  private:
  const ::livekit::proto::PublishDataRequest& _internal_publish_data() const;
  ::livekit::proto::PublishDataRequest* _internal_mutable_publish_data();
  public:
  void unsafe_arena_set_allocated_publish_data(
      ::livekit::proto::PublishDataRequest* publish_data);
  ::livekit::proto::PublishDataRequest* unsafe_arena_release_publish_data();

  // .livekit.proto.SetSubscribedRequest set_subscribed = 8;
  bool has_set_subscribed() const;
  private:
  bool _internal_has_set_subscribed() const;
  public:
  void clear_set_subscribed();
  const ::livekit::proto::SetSubscribedRequest& set_subscribed() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetSubscribedRequest* release_set_subscribed();
  ::livekit::proto::SetSubscribedRequest* mutable_set_subscribed();
  void set_allocated_set_subscribed(::livekit::proto::SetSubscribedRequest* set_subscribed);
  private:
  const ::livekit::proto::SetSubscribedRequest& _internal_set_subscribed() const;
  ::livekit::proto::SetSubscribedRequest* _internal_mutable_set_subscribed();
  public:
  void unsafe_arena_set_allocated_set_subscribed(
      ::livekit::proto::SetSubscribedRequest* set_subscribed);
  ::livekit::proto::SetSubscribedRequest* unsafe_arena_release_set_subscribed();

  // .livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
  bool has_set_local_metadata() const;
  private:
  bool _internal_has_set_local_metadata() const;
  public:
  void clear_set_local_metadata();
  const ::livekit::proto::SetLocalMetadataRequest& set_local_metadata() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalMetadataRequest* release_set_local_metadata();
  ::livekit::proto::SetLocalMetadataRequest* mutable_set_local_metadata();
  void set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataRequest* set_local_metadata);
  private:
  const ::livekit::proto::SetLocalMetadataRequest& _internal_set_local_metadata() const;
  ::livekit::proto::SetLocalMetadataRequest* _internal_mutable_set_local_metadata();
  public:
  void unsafe_arena_set_allocated_set_local_metadata(
      ::livekit::proto::SetLocalMetadataRequest* set_local_metadata);
  ::livekit::proto::SetLocalMetadataRequest* unsafe_arena_release_set_local_metadata();

  // .livekit.proto.SetLocalNameRequest set_local_name = 10;
  bool has_set_local_name() const;
  private:
  bool _internal_has_set_local_name() const;
  public:
  void clear_set_local_name();
  const ::livekit::proto::SetLocalNameRequest& set_local_name() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalNameRequest* release_set_local_name();
  ::livekit::proto::SetLocalNameRequest* mutable_set_local_name();
  void set_allocated_set_local_name(::livekit::proto::SetLocalNameRequest* set_local_name);
  private:
  const ::livekit::proto::SetLocalNameRequest& _internal_set_local_name() const;
  ::livekit::proto::SetLocalNameRequest* _internal_mutable_set_local_name();
  public:
  void unsafe_arena_set_allocated_set_local_name(
      ::livekit::proto::SetLocalNameRequest* set_local_name);
  ::livekit::proto::SetLocalNameRequest* unsafe_arena_release_set_local_name();

  // .livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
  bool has_set_local_attributes() const;
  private:
  bool _internal_has_set_local_attributes() const;
  public:
  void clear_set_local_attributes();
  const ::livekit::proto::SetLocalAttributesRequest& set_local_attributes() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalAttributesRequest* release_set_local_attributes();
  ::livekit::proto::SetLocalAttributesRequest* mutable_set_local_attributes();
  void set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesRequest* set_local_attributes);
  private:
  const ::livekit::proto::SetLocalAttributesRequest& _internal_set_local_attributes() const;
  ::livekit::proto::SetLocalAttributesRequest* _internal_mutable_set_local_attributes();
  public:
  void unsafe_arena_set_allocated_set_local_attributes(
      ::livekit::proto::SetLocalAttributesRequest* set_local_attributes);
  ::livekit::proto::SetLocalAttributesRequest* unsafe_arena_release_set_local_attributes();

  // .livekit.proto.GetSessionStatsRequest get_session_stats = 12;
  bool has_get_session_stats() const;
  private:
  bool _internal_has_get_session_stats() const;
  public:
  void clear_get_session_stats();
  const ::livekit::proto::GetSessionStatsRequest& get_session_stats() const;
  PROTOBUF_NODISCARD ::livekit::proto::GetSessionStatsRequest* release_get_session_stats();
  ::livekit::proto::GetSessionStatsRequest* mutable_get_session_stats();
  void set_allocated_get_session_stats(::livekit::proto::GetSessionStatsRequest* get_session_stats);
  private:
  const ::livekit::proto::GetSessionStatsRequest& _internal_get_session_stats() const;
  ::livekit::proto::GetSessionStatsRequest* _internal_mutable_get_session_stats();
  public:
  void unsafe_arena_set_allocated_get_session_stats(
      ::livekit::proto::GetSessionStatsRequest* get_session_stats);
  ::livekit::proto::GetSessionStatsRequest* unsafe_arena_release_get_session_stats();

  // .livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
  bool has_publish_transcription() const;
  private:
  bool _internal_has_publish_transcription() const;
  public:
  void clear_publish_transcription();
  const ::livekit::proto::PublishTranscriptionRequest& publish_transcription() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishTranscriptionRequest* release_publish_transcription();
  ::livekit::proto::PublishTranscriptionRequest* mutable_publish_transcription();
  void set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionRequest* publish_transcription);
  private:
  const ::livekit::proto::PublishTranscriptionRequest& _internal_publish_transcription() const;
  ::livekit::proto::PublishTranscriptionRequest* _internal_mutable_publish_transcription();
  public:
  void unsafe_arena_set_allocated_publish_transcription(
      ::livekit::proto::PublishTranscriptionRequest* publish_transcription);
  ::livekit::proto::PublishTranscriptionRequest* unsafe_arena_release_publish_transcription();

  // .livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
  bool has_publish_sip_dtmf() const;
  private:
  bool _internal_has_publish_sip_dtmf() const;
  public:
  void clear_publish_sip_dtmf();
  const ::livekit::proto::PublishSipDtmfRequest& publish_sip_dtmf() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishSipDtmfRequest* release_publish_sip_dtmf();
  ::livekit::proto::PublishSipDtmfRequest* mutable_publish_sip_dtmf();
  void set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfRequest* publish_sip_dtmf);
  private:
  const ::livekit::proto::PublishSipDtmfRequest& _internal_publish_sip_dtmf() const;
  ::livekit::proto::PublishSipDtmfRequest* _internal_mutable_publish_sip_dtmf();
  public:
  void unsafe_arena_set_allocated_publish_sip_dtmf(
      ::livekit::proto::PublishSipDtmfRequest* publish_sip_dtmf);
  ::livekit::proto::PublishSipDtmfRequest* unsafe_arena_release_publish_sip_dtmf();

  // .livekit.proto.CreateVideoTrackRequest create_video_track = 15;
  bool has_create_video_track() const;
  private:
  bool _internal_has_create_video_track() const;
  public:
  void clear_create_video_track();
  const ::livekit::proto::CreateVideoTrackRequest& create_video_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::CreateVideoTrackRequest* release_create_video_track();
  ::livekit::proto::CreateVideoTrackRequest* mutable_create_video_track();
  void set_allocated_create_video_track(::livekit::proto::CreateVideoTrackRequest* create_video_track);
  private:
  const ::livekit::proto::CreateVideoTrackRequest& _internal_create_video_track() const;
  ::livekit::proto::CreateVideoTrackRequest* _internal_mutable_create_video_track();
  public:
  void unsafe_arena_set_allocated_create_video_track(
      ::livekit::proto::CreateVideoTrackRequest* create_video_track);
  ::livekit::proto::CreateVideoTrackRequest* unsafe_arena_release_create_video_track();

  // .livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
  bool has_create_audio_track() const;
  private:
  bool _internal_has_create_audio_track() const;
  public:
  void clear_create_audio_track();
  const ::livekit::proto::CreateAudioTrackRequest& create_audio_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::CreateAudioTrackRequest* release_create_audio_track();
  ::livekit::proto::CreateAudioTrackRequest* mutable_create_audio_track();
  void set_allocated_create_audio_track(::livekit::proto::CreateAudioTrackRequest* create_audio_track);
  private:
  const ::livekit::proto::CreateAudioTrackRequest& _internal_create_audio_track() const;
  ::livekit::proto::CreateAudioTrackRequest* _internal_mutable_create_audio_track();
  public:
  void unsafe_arena_set_allocated_create_audio_track(
      ::livekit::proto::CreateAudioTrackRequest* create_audio_track);
  ::livekit::proto::CreateAudioTrackRequest* unsafe_arena_release_create_audio_track();

  // .livekit.proto.LocalTrackMuteRequest local_track_mute = 17;
  bool has_local_track_mute() const;
  private:
  bool _internal_has_local_track_mute() const;
  public:
  void clear_local_track_mute();
  const ::livekit::proto::LocalTrackMuteRequest& local_track_mute() const;
  PROTOBUF_NODISCARD ::livekit::proto::LocalTrackMuteRequest* release_local_track_mute();
  ::livekit::proto::LocalTrackMuteRequest* mutable_local_track_mute();
  void set_allocated_local_track_mute(::livekit::proto::LocalTrackMuteRequest* local_track_mute);
  private:
  const ::livekit::proto::LocalTrackMuteRequest& _internal_local_track_mute() const;
  ::livekit::proto::LocalTrackMuteRequest* _internal_mutable_local_track_mute();
  public:
  void unsafe_arena_set_allocated_local_track_mute(
      ::livekit::proto::LocalTrackMuteRequest* local_track_mute);
  ::livekit::proto::LocalTrackMuteRequest* unsafe_arena_release_local_track_mute();

  // .livekit.proto.EnableRemoteTrackRequest enable_remote_track = 18;
  bool has_enable_remote_track() const;
  private:
  bool _internal_has_enable_remote_track() const;
  public:
  void clear_enable_remote_track();
  const ::livekit::proto::EnableRemoteTrackRequest& enable_remote_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::EnableRemoteTrackRequest* release_enable_remote_track();
  ::livekit::proto::EnableRemoteTrackRequest* mutable_enable_remote_track();
  void set_allocated_enable_remote_track(::livekit::proto::EnableRemoteTrackRequest* enable_remote_track);
  private:
  const ::livekit::proto::EnableRemoteTrackRequest& _internal_enable_remote_track() const;
  ::livekit::proto::EnableRemoteTrackRequest* _internal_mutable_enable_remote_track();
  public:
  void unsafe_arena_set_allocated_enable_remote_track(
      ::livekit::proto::EnableRemoteTrackRequest* enable_remote_track);
  ::livekit::proto::EnableRemoteTrackRequest* unsafe_arena_release_enable_remote_track();

  // .livekit.proto.GetStatsRequest get_stats = 19;
  bool has_get_stats() const;
  private:
  bool _internal_has_get_stats() const;
  public:
  void clear_get_stats();
  const ::livekit::proto::GetStatsRequest& get_stats() const;
  PROTOBUF_NODISCARD ::livekit::proto::GetStatsRequest* release_get_stats();
  ::livekit::proto::GetStatsRequest* mutable_get_stats();
  void set_allocated_get_stats(::livekit::proto::GetStatsRequest* get_stats);
  private:
  const ::livekit::proto::GetStatsRequest& _internal_get_stats() const;
  ::livekit::proto::GetStatsRequest* _internal_mutable_get_stats();
  public:
  void unsafe_arena_set_allocated_get_stats(
      ::livekit::proto::GetStatsRequest* get_stats);
  ::livekit::proto::GetStatsRequest* unsafe_arena_release_get_stats();

  // .livekit.proto.SetTrackSubscriptionPermissionsRequest set_track_subscription_permissions = 48;
  bool has_set_track_subscription_permissions() const;
  private:
  bool _internal_has_set_track_subscription_permissions() const;
  public:
  void clear_set_track_subscription_permissions();
  const ::livekit::proto::SetTrackSubscriptionPermissionsRequest& set_track_subscription_permissions() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetTrackSubscriptionPermissionsRequest* release_set_track_subscription_permissions();
  ::livekit::proto::SetTrackSubscriptionPermissionsRequest* mutable_set_track_subscription_permissions();
  void set_allocated_set_track_subscription_permissions(::livekit::proto::SetTrackSubscriptionPermissionsRequest* set_track_subscription_permissions);
  private:
  const ::livekit::proto::SetTrackSubscriptionPermissionsRequest& _internal_set_track_subscription_permissions() const;
  ::livekit::proto::SetTrackSubscriptionPermissionsRequest* _internal_mutable_set_track_subscription_permissions();
  public:
  void unsafe_arena_set_allocated_set_track_subscription_permissions(
      ::livekit::proto::SetTrackSubscriptionPermissionsRequest* set_track_subscription_permissions);
  ::livekit::proto::SetTrackSubscriptionPermissionsRequest* unsafe_arena_release_set_track_subscription_permissions();

  // .livekit.proto.NewVideoStreamRequest new_video_stream = 20;
  bool has_new_video_stream() const;
  private:
  bool _internal_has_new_video_stream() const;
  public:
  void clear_new_video_stream();
  const ::livekit::proto::NewVideoStreamRequest& new_video_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewVideoStreamRequest* release_new_video_stream();
  ::livekit::proto::NewVideoStreamRequest* mutable_new_video_stream();
  void set_allocated_new_video_stream(::livekit::proto::NewVideoStreamRequest* new_video_stream);
  private:
  const ::livekit::proto::NewVideoStreamRequest& _internal_new_video_stream() const;
  ::livekit::proto::NewVideoStreamRequest* _internal_mutable_new_video_stream();
  public:
  void unsafe_arena_set_allocated_new_video_stream(
      ::livekit::proto::NewVideoStreamRequest* new_video_stream);
  ::livekit::proto::NewVideoStreamRequest* unsafe_arena_release_new_video_stream();

  // .livekit.proto.NewVideoSourceRequest new_video_source = 21;
  bool has_new_video_source() const;
  private:
  bool _internal_has_new_video_source() const;
  public:
  void clear_new_video_source();
  const ::livekit::proto::NewVideoSourceRequest& new_video_source() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewVideoSourceRequest* release_new_video_source();
  ::livekit::proto::NewVideoSourceRequest* mutable_new_video_source();
  void set_allocated_new_video_source(::livekit::proto::NewVideoSourceRequest* new_video_source);
  private:
  const ::livekit::proto::NewVideoSourceRequest& _internal_new_video_source() const;
  ::livekit::proto::NewVideoSourceRequest* _internal_mutable_new_video_source();
  public:
  void unsafe_arena_set_allocated_new_video_source(
      ::livekit::proto::NewVideoSourceRequest* new_video_source);
  ::livekit::proto::NewVideoSourceRequest* unsafe_arena_release_new_video_source();

  // .livekit.proto.CaptureVideoFrameRequest capture_video_frame = 22;
  bool has_capture_video_frame() const;
  private:
  bool _internal_has_capture_video_frame() const;
  public:
  void clear_capture_video_frame();
  const ::livekit::proto::CaptureVideoFrameRequest& capture_video_frame() const;
  PROTOBUF_NODISCARD ::livekit::proto::CaptureVideoFrameRequest* release_capture_video_frame();
  ::livekit::proto::CaptureVideoFrameRequest* mutable_capture_video_frame();
  void set_allocated_capture_video_frame(::livekit::proto::CaptureVideoFrameRequest* capture_video_frame);
  private:
  const ::livekit::proto::CaptureVideoFrameRequest& _internal_capture_video_frame() const;
  ::livekit::proto::CaptureVideoFrameRequest* _internal_mutable_capture_video_frame();
  public:
  void unsafe_arena_set_allocated_capture_video_frame(
      ::livekit::proto::CaptureVideoFrameRequest* capture_video_frame);
  ::livekit::proto::CaptureVideoFrameRequest* unsafe_arena_release_capture_video_frame();

  // .livekit.proto.VideoConvertRequest video_convert = 23;
  bool has_video_convert() const;
  private:
  bool _internal_has_video_convert() const;
  public:
  void clear_video_convert();
  const ::livekit::proto::VideoConvertRequest& video_convert() const;
  PROTOBUF_NODISCARD ::livekit::proto::VideoConvertRequest* release_video_convert();
  ::livekit::proto::VideoConvertRequest* mutable_video_convert();
  void set_allocated_video_convert(::livekit::proto::VideoConvertRequest* video_convert);
  private:
  const ::livekit::proto::VideoConvertRequest& _internal_video_convert() const;
  ::livekit::proto::VideoConvertRequest* _internal_mutable_video_convert();
  public:
  void unsafe_arena_set_allocated_video_convert(
      ::livekit::proto::VideoConvertRequest* video_convert);
  ::livekit::proto::VideoConvertRequest* unsafe_arena_release_video_convert();

  // .livekit.proto.VideoStreamFromParticipantRequest video_stream_from_participant = 24;
  bool has_video_stream_from_participant() const;
  private:
  bool _internal_has_video_stream_from_participant() const;
  public:
  void clear_video_stream_from_participant();
  const ::livekit::proto::VideoStreamFromParticipantRequest& video_stream_from_participant() const;
  PROTOBUF_NODISCARD ::livekit::proto::VideoStreamFromParticipantRequest* release_video_stream_from_participant();
  ::livekit::proto::VideoStreamFromParticipantRequest* mutable_video_stream_from_participant();
  void set_allocated_video_stream_from_participant(::livekit::proto::VideoStreamFromParticipantRequest* video_stream_from_participant);
  private:
  const ::livekit::proto::VideoStreamFromParticipantRequest& _internal_video_stream_from_participant() const;
  ::livekit::proto::VideoStreamFromParticipantRequest* _internal_mutable_video_stream_from_participant();
  public:
  void unsafe_arena_set_allocated_video_stream_from_participant(
      ::livekit::proto::VideoStreamFromParticipantRequest* video_stream_from_participant);
  ::livekit::proto::VideoStreamFromParticipantRequest* unsafe_arena_release_video_stream_from_participant();

  // .livekit.proto.NewAudioStreamRequest new_audio_stream = 25;
  bool has_new_audio_stream() const;
  private:
  bool _internal_has_new_audio_stream() const;
  public:
  void clear_new_audio_stream();
  const ::livekit::proto::NewAudioStreamRequest& new_audio_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewAudioStreamRequest* release_new_audio_stream();
  ::livekit::proto::NewAudioStreamRequest* mutable_new_audio_stream();
  void set_allocated_new_audio_stream(::livekit::proto::NewAudioStreamRequest* new_audio_stream);
  private:
  const ::livekit::proto::NewAudioStreamRequest& _internal_new_audio_stream() const;
  ::livekit::proto::NewAudioStreamRequest* _internal_mutable_new_audio_stream();
  public:
  void unsafe_arena_set_allocated_new_audio_stream(
      ::livekit::proto::NewAudioStreamRequest* new_audio_stream);
  ::livekit::proto::NewAudioStreamRequest* unsafe_arena_release_new_audio_stream();

  // .livekit.proto.NewAudioSourceRequest new_audio_source = 26;
  bool has_new_audio_source() const;
  private:
  bool _internal_has_new_audio_source() const;
  public:
  void clear_new_audio_source();
  const ::livekit::proto::NewAudioSourceRequest& new_audio_source() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewAudioSourceRequest* release_new_audio_source();
  ::livekit::proto::NewAudioSourceRequest* mutable_new_audio_source();
  void set_allocated_new_audio_source(::livekit::proto::NewAudioSourceRequest* new_audio_source);
  private:
  const ::livekit::proto::NewAudioSourceRequest& _internal_new_audio_source() const;
  ::livekit::proto::NewAudioSourceRequest* _internal_mutable_new_audio_source();
  public:
  void unsafe_arena_set_allocated_new_audio_source(
      ::livekit::proto::NewAudioSourceRequest* new_audio_source);
  ::livekit::proto::NewAudioSourceRequest* unsafe_arena_release_new_audio_source();

  // .livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 27;
  bool has_capture_audio_frame() const;
  private:
  bool _internal_has_capture_audio_frame() const;
  public:
  void clear_capture_audio_frame();
  const ::livekit::proto::CaptureAudioFrameRequest& capture_audio_frame() const;
  PROTOBUF_NODISCARD ::livekit::proto::CaptureAudioFrameRequest* release_capture_audio_frame();
  ::livekit::proto::CaptureAudioFrameRequest* mutable_capture_audio_frame();
  void set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameRequest* capture_audio_frame);
  private:
  const ::livekit::proto::CaptureAudioFrameRequest& _internal_capture_audio_frame() const;
  ::livekit::proto::CaptureAudioFrameRequest* _internal_mutable_capture_audio_frame();
  public:
  void unsafe_arena_set_allocated_capture_audio_frame(
      ::livekit::proto::CaptureAudioFrameRequest* capture_audio_frame);
  ::livekit::proto::CaptureAudioFrameRequest* unsafe_arena_release_capture_audio_frame();

  // .livekit.proto.ClearAudioBufferRequest clear_audio_buffer = 28;
  bool has_clear_audio_buffer() const;
  private:
  bool _internal_has_clear_audio_buffer() const;
  public:
  void clear_clear_audio_buffer();
  const ::livekit::proto::ClearAudioBufferRequest& clear_audio_buffer() const;
  PROTOBUF_NODISCARD ::livekit::proto::ClearAudioBufferRequest* release_clear_audio_buffer();
  ::livekit::proto::ClearAudioBufferRequest* mutable_clear_audio_buffer();
  void set_allocated_clear_audio_buffer(::livekit::proto::ClearAudioBufferRequest* clear_audio_buffer);
  private:
  const ::livekit::proto::ClearAudioBufferRequest& _internal_clear_audio_buffer() const;
  ::livekit::proto::ClearAudioBufferRequest* _internal_mutable_clear_audio_buffer();
  public:
  void unsafe_arena_set_allocated_clear_audio_buffer(
      ::livekit::proto::ClearAudioBufferRequest* clear_audio_buffer);
  ::livekit::proto::ClearAudioBufferRequest* unsafe_arena_release_clear_audio_buffer();

  // .livekit.proto.NewAudioResamplerRequest new_audio_resampler = 29;
  bool has_new_audio_resampler() const;
  private:
  bool _internal_has_new_audio_resampler() const;
  public:
  void clear_new_audio_resampler();
  const ::livekit::proto::NewAudioResamplerRequest& new_audio_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewAudioResamplerRequest* release_new_audio_resampler();
  ::livekit::proto::NewAudioResamplerRequest* mutable_new_audio_resampler();
  void set_allocated_new_audio_resampler(::livekit::proto::NewAudioResamplerRequest* new_audio_resampler);
  private:
  const ::livekit::proto::NewAudioResamplerRequest& _internal_new_audio_resampler() const;
  ::livekit::proto::NewAudioResamplerRequest* _internal_mutable_new_audio_resampler();
  public:
  void unsafe_arena_set_allocated_new_audio_resampler(
      ::livekit::proto::NewAudioResamplerRequest* new_audio_resampler);
  ::livekit::proto::NewAudioResamplerRequest* unsafe_arena_release_new_audio_resampler();

  // .livekit.proto.RemixAndResampleRequest remix_and_resample = 30;
  bool has_remix_and_resample() const;
  private:
  bool _internal_has_remix_and_resample() const;
  public:
  void clear_remix_and_resample();
  const ::livekit::proto::RemixAndResampleRequest& remix_and_resample() const;
  PROTOBUF_NODISCARD ::livekit::proto::RemixAndResampleRequest* release_remix_and_resample();
  ::livekit::proto::RemixAndResampleRequest* mutable_remix_and_resample();
  void set_allocated_remix_and_resample(::livekit::proto::RemixAndResampleRequest* remix_and_resample);
  private:
  const ::livekit::proto::RemixAndResampleRequest& _internal_remix_and_resample() const;
  ::livekit::proto::RemixAndResampleRequest* _internal_mutable_remix_and_resample();
  public:
  void unsafe_arena_set_allocated_remix_and_resample(
      ::livekit::proto::RemixAndResampleRequest* remix_and_resample);
  ::livekit::proto::RemixAndResampleRequest* unsafe_arena_release_remix_and_resample();

  // .livekit.proto.E2eeRequest e2ee = 31;
  bool has_e2ee() const;
  private:
  bool _internal_has_e2ee() const;
  public:
  void clear_e2ee();
  const ::livekit::proto::E2eeRequest& e2ee() const;
  PROTOBUF_NODISCARD ::livekit::proto::E2eeRequest* release_e2ee();
  ::livekit::proto::E2eeRequest* mutable_e2ee();
  void set_allocated_e2ee(::livekit::proto::E2eeRequest* e2ee);
  private:
  const ::livekit::proto::E2eeRequest& _internal_e2ee() const;
  ::livekit::proto::E2eeRequest* _internal_mutable_e2ee();
  public:
  void unsafe_arena_set_allocated_e2ee(
      ::livekit::proto::E2eeRequest* e2ee);
  ::livekit::proto::E2eeRequest* unsafe_arena_release_e2ee();

  // .livekit.proto.AudioStreamFromParticipantRequest audio_stream_from_participant = 32;
  bool has_audio_stream_from_participant() const;
  private:
  bool _internal_has_audio_stream_from_participant() const;
  public:
  void clear_audio_stream_from_participant();
  const ::livekit::proto::AudioStreamFromParticipantRequest& audio_stream_from_participant() const;
  PROTOBUF_NODISCARD ::livekit::proto::AudioStreamFromParticipantRequest* release_audio_stream_from_participant();
  ::livekit::proto::AudioStreamFromParticipantRequest* mutable_audio_stream_from_participant();
  void set_allocated_audio_stream_from_participant(::livekit::proto::AudioStreamFromParticipantRequest* audio_stream_from_participant);
  private:
  const ::livekit::proto::AudioStreamFromParticipantRequest& _internal_audio_stream_from_participant() const;
  ::livekit::proto::AudioStreamFromParticipantRequest* _internal_mutable_audio_stream_from_participant();
  public:
  void unsafe_arena_set_allocated_audio_stream_from_participant(
      ::livekit::proto::AudioStreamFromParticipantRequest* audio_stream_from_participant);
  ::livekit::proto::AudioStreamFromParticipantRequest* unsafe_arena_release_audio_stream_from_participant();

  // .livekit.proto.NewSoxResamplerRequest new_sox_resampler = 33;
  bool has_new_sox_resampler() const;
  private:
  bool _internal_has_new_sox_resampler() const;
  public:
  void clear_new_sox_resampler();
  const ::livekit::proto::NewSoxResamplerRequest& new_sox_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewSoxResamplerRequest* release_new_sox_resampler();
  ::livekit::proto::NewSoxResamplerRequest* mutable_new_sox_resampler();
  void set_allocated_new_sox_resampler(::livekit::proto::NewSoxResamplerRequest* new_sox_resampler);
  private:
  const ::livekit::proto::NewSoxResamplerRequest& _internal_new_sox_resampler() const;
  ::livekit::proto::NewSoxResamplerRequest* _internal_mutable_new_sox_resampler();
  public:
  void unsafe_arena_set_allocated_new_sox_resampler(
      ::livekit::proto::NewSoxResamplerRequest* new_sox_resampler);
  ::livekit::proto::NewSoxResamplerRequest* unsafe_arena_release_new_sox_resampler();

  // .livekit.proto.PushSoxResamplerRequest push_sox_resampler = 34;
  bool has_push_sox_resampler() const;
  private:
  bool _internal_has_push_sox_resampler() const;
  public:
  void clear_push_sox_resampler();
  const ::livekit::proto::PushSoxResamplerRequest& push_sox_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::PushSoxResamplerRequest* release_push_sox_resampler();
  ::livekit::proto::PushSoxResamplerRequest* mutable_push_sox_resampler();
  void set_allocated_push_sox_resampler(::livekit::proto::PushSoxResamplerRequest* push_sox_resampler);
  private:
  const ::livekit::proto::PushSoxResamplerRequest& _internal_push_sox_resampler() const;
  ::livekit::proto::PushSoxResamplerRequest* _internal_mutable_push_sox_resampler();
  public:
  void unsafe_arena_set_allocated_push_sox_resampler(
      ::livekit::proto::PushSoxResamplerRequest* push_sox_resampler);
  ::livekit::proto::PushSoxResamplerRequest* unsafe_arena_release_push_sox_resampler();

  // .livekit.proto.FlushSoxResamplerRequest flush_sox_resampler = 35;
  bool has_flush_sox_resampler() const;
  private:
  bool _internal_has_flush_sox_resampler() const;
  public:
  void clear_flush_sox_resampler();
  const ::livekit::proto::FlushSoxResamplerRequest& flush_sox_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::FlushSoxResamplerRequest* release_flush_sox_resampler();
  ::livekit::proto::FlushSoxResamplerRequest* mutable_flush_sox_resampler();
  void set_allocated_flush_sox_resampler(::livekit::proto::FlushSoxResamplerRequest* flush_sox_resampler);
  private:
  const ::livekit::proto::FlushSoxResamplerRequest& _internal_flush_sox_resampler() const;
  ::livekit::proto::FlushSoxResamplerRequest* _internal_mutable_flush_sox_resampler();
  public:
  void unsafe_arena_set_allocated_flush_sox_resampler(
      ::livekit::proto::FlushSoxResamplerRequest* flush_sox_resampler);
  ::livekit::proto::FlushSoxResamplerRequest* unsafe_arena_release_flush_sox_resampler();

  // .livekit.proto.SendChatMessageRequest send_chat_message = 36;
  bool has_send_chat_message() const;
  private:
  bool _internal_has_send_chat_message() const;
  public:
  void clear_send_chat_message();
  const ::livekit::proto::SendChatMessageRequest& send_chat_message() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendChatMessageRequest* release_send_chat_message();
  ::livekit::proto::SendChatMessageRequest* mutable_send_chat_message();
  void set_allocated_send_chat_message(::livekit::proto::SendChatMessageRequest* send_chat_message);
  private:
  const ::livekit::proto::SendChatMessageRequest& _internal_send_chat_message() const;
  ::livekit::proto::SendChatMessageRequest* _internal_mutable_send_chat_message();
  public:
  void unsafe_arena_set_allocated_send_chat_message(
      ::livekit::proto::SendChatMessageRequest* send_chat_message);
  ::livekit::proto::SendChatMessageRequest* unsafe_arena_release_send_chat_message();

  // .livekit.proto.EditChatMessageRequest edit_chat_message = 37;
  bool has_edit_chat_message() const;
  private:
  bool _internal_has_edit_chat_message() const;
  public:
  void clear_edit_chat_message();
  const ::livekit::proto::EditChatMessageRequest& edit_chat_message() const;
  PROTOBUF_NODISCARD ::livekit::proto::EditChatMessageRequest* release_edit_chat_message();
  ::livekit::proto::EditChatMessageRequest* mutable_edit_chat_message();
  void set_allocated_edit_chat_message(::livekit::proto::EditChatMessageRequest* edit_chat_message);
  private:
  const ::livekit::proto::EditChatMessageRequest& _internal_edit_chat_message() const;
  ::livekit::proto::EditChatMessageRequest* _internal_mutable_edit_chat_message();
  public:
  void unsafe_arena_set_allocated_edit_chat_message(
      ::livekit::proto::EditChatMessageRequest* edit_chat_message);
  ::livekit::proto::EditChatMessageRequest* unsafe_arena_release_edit_chat_message();

  // .livekit.proto.PerformRpcRequest perform_rpc = 38;
  bool has_perform_rpc() const;
  private:
  bool _internal_has_perform_rpc() const;
  public:
  void clear_perform_rpc();
  const ::livekit::proto::PerformRpcRequest& perform_rpc() const;
  PROTOBUF_NODISCARD ::livekit::proto::PerformRpcRequest* release_perform_rpc();
  ::livekit::proto::PerformRpcRequest* mutable_perform_rpc();
  void set_allocated_perform_rpc(::livekit::proto::PerformRpcRequest* perform_rpc);
  private:
  const ::livekit::proto::PerformRpcRequest& _internal_perform_rpc() const;
  ::livekit::proto::PerformRpcRequest* _internal_mutable_perform_rpc();
  public:
  void unsafe_arena_set_allocated_perform_rpc(
      ::livekit::proto::PerformRpcRequest* perform_rpc);
  ::livekit::proto::PerformRpcRequest* unsafe_arena_release_perform_rpc();

  // .livekit.proto.RegisterRpcMethodRequest register_rpc_method = 39;
  bool has_register_rpc_method() const;
  private:
  bool _internal_has_register_rpc_method() const;
  public:
  void clear_register_rpc_method();
  const ::livekit::proto::RegisterRpcMethodRequest& register_rpc_method() const;
  PROTOBUF_NODISCARD ::livekit::proto::RegisterRpcMethodRequest* release_register_rpc_method();
  ::livekit::proto::RegisterRpcMethodRequest* mutable_register_rpc_method();
  void set_allocated_register_rpc_method(::livekit::proto::RegisterRpcMethodRequest* register_rpc_method);
  private:
  const ::livekit::proto::RegisterRpcMethodRequest& _internal_register_rpc_method() const;
  ::livekit::proto::RegisterRpcMethodRequest* _internal_mutable_register_rpc_method();
  public:
  void unsafe_arena_set_allocated_register_rpc_method(
      ::livekit::proto::RegisterRpcMethodRequest* register_rpc_method);
  ::livekit::proto::RegisterRpcMethodRequest* unsafe_arena_release_register_rpc_method();

  // .livekit.proto.UnregisterRpcMethodRequest unregister_rpc_method = 40;
  bool has_unregister_rpc_method() const;
  private:
  bool _internal_has_unregister_rpc_method() const;
  public:
  void clear_unregister_rpc_method();
  const ::livekit::proto::UnregisterRpcMethodRequest& unregister_rpc_method() const;
  PROTOBUF_NODISCARD ::livekit::proto::UnregisterRpcMethodRequest* release_unregister_rpc_method();
  ::livekit::proto::UnregisterRpcMethodRequest* mutable_unregister_rpc_method();
  void set_allocated_unregister_rpc_method(::livekit::proto::UnregisterRpcMethodRequest* unregister_rpc_method);
  private:
  const ::livekit::proto::UnregisterRpcMethodRequest& _internal_unregister_rpc_method() const;
  ::livekit::proto::UnregisterRpcMethodRequest* _internal_mutable_unregister_rpc_method();
  public:
  void unsafe_arena_set_allocated_unregister_rpc_method(
      ::livekit::proto::UnregisterRpcMethodRequest* unregister_rpc_method);
  ::livekit::proto::UnregisterRpcMethodRequest* unsafe_arena_release_unregister_rpc_method();

  // .livekit.proto.RpcMethodInvocationResponseRequest rpc_method_invocation_response = 41;
  bool has_rpc_method_invocation_response() const;
  private:
  bool _internal_has_rpc_method_invocation_response() const;
  public:
  void clear_rpc_method_invocation_response();
  const ::livekit::proto::RpcMethodInvocationResponseRequest& rpc_method_invocation_response() const;
  PROTOBUF_NODISCARD ::livekit::proto::RpcMethodInvocationResponseRequest* release_rpc_method_invocation_response();
  ::livekit::proto::RpcMethodInvocationResponseRequest* mutable_rpc_method_invocation_response();
  void set_allocated_rpc_method_invocation_response(::livekit::proto::RpcMethodInvocationResponseRequest* rpc_method_invocation_response);
  private:
  const ::livekit::proto::RpcMethodInvocationResponseRequest& _internal_rpc_method_invocation_response() const;
  ::livekit::proto::RpcMethodInvocationResponseRequest* _internal_mutable_rpc_method_invocation_response();
  public:
  void unsafe_arena_set_allocated_rpc_method_invocation_response(
      ::livekit::proto::RpcMethodInvocationResponseRequest* rpc_method_invocation_response);
  ::livekit::proto::RpcMethodInvocationResponseRequest* unsafe_arena_release_rpc_method_invocation_response();

  // .livekit.proto.EnableRemoteTrackPublicationRequest enable_remote_track_publication = 42;
  bool has_enable_remote_track_publication() const;
  private:
  bool _internal_has_enable_remote_track_publication() const;
  public:
  void clear_enable_remote_track_publication();
  const ::livekit::proto::EnableRemoteTrackPublicationRequest& enable_remote_track_publication() const;
  PROTOBUF_NODISCARD ::livekit::proto::EnableRemoteTrackPublicationRequest* release_enable_remote_track_publication();
  ::livekit::proto::EnableRemoteTrackPublicationRequest* mutable_enable_remote_track_publication();
  void set_allocated_enable_remote_track_publication(::livekit::proto::EnableRemoteTrackPublicationRequest* enable_remote_track_publication);
  private:
  const ::livekit::proto::EnableRemoteTrackPublicationRequest& _internal_enable_remote_track_publication() const;
  ::livekit::proto::EnableRemoteTrackPublicationRequest* _internal_mutable_enable_remote_track_publication();
  public:
  void unsafe_arena_set_allocated_enable_remote_track_publication(
      ::livekit::proto::EnableRemoteTrackPublicationRequest* enable_remote_track_publication);
  ::livekit::proto::EnableRemoteTrackPublicationRequest* unsafe_arena_release_enable_remote_track_publication();

  // .livekit.proto.UpdateRemoteTrackPublicationDimensionRequest update_remote_track_publication_dimension = 43;
  bool has_update_remote_track_publication_dimension() const;
  private:
  bool _internal_has_update_remote_track_publication_dimension() const;
  public:
  void clear_update_remote_track_publication_dimension();
  const ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest& update_remote_track_publication_dimension() const;
  PROTOBUF_NODISCARD ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* release_update_remote_track_publication_dimension();
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* mutable_update_remote_track_publication_dimension();
  void set_allocated_update_remote_track_publication_dimension(::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* update_remote_track_publication_dimension);
  private:
  const ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest& _internal_update_remote_track_publication_dimension() const;
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* _internal_mutable_update_remote_track_publication_dimension();
  public:
  void unsafe_arena_set_allocated_update_remote_track_publication_dimension(
      ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* update_remote_track_publication_dimension);
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* unsafe_arena_release_update_remote_track_publication_dimension();

  // .livekit.proto.SendStreamHeaderRequest send_stream_header = 44;
  bool has_send_stream_header() const;
  private:
  bool _internal_has_send_stream_header() const;
  public:
  void clear_send_stream_header();
  const ::livekit::proto::SendStreamHeaderRequest& send_stream_header() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamHeaderRequest* release_send_stream_header();
  ::livekit::proto::SendStreamHeaderRequest* mutable_send_stream_header();
  void set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderRequest* send_stream_header);
  private:
  const ::livekit::proto::SendStreamHeaderRequest& _internal_send_stream_header() const;
  ::livekit::proto::SendStreamHeaderRequest* _internal_mutable_send_stream_header();
  public:
  void unsafe_arena_set_allocated_send_stream_header(
      ::livekit::proto::SendStreamHeaderRequest* send_stream_header);
  ::livekit::proto::SendStreamHeaderRequest* unsafe_arena_release_send_stream_header();

  // .livekit.proto.SendStreamChunkRequest send_stream_chunk = 45;
  bool has_send_stream_chunk() const;
  private:
  bool _internal_has_send_stream_chunk() const;
  public:
  void clear_send_stream_chunk();
  const ::livekit::proto::SendStreamChunkRequest& send_stream_chunk() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamChunkRequest* release_send_stream_chunk();
  ::livekit::proto::SendStreamChunkRequest* mutable_send_stream_chunk();
  void set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkRequest* send_stream_chunk);
  private:
  const ::livekit::proto::SendStreamChunkRequest& _internal_send_stream_chunk() const;
  ::livekit::proto::SendStreamChunkRequest* _internal_mutable_send_stream_chunk();
  public:
  void unsafe_arena_set_allocated_send_stream_chunk(
      ::livekit::proto::SendStreamChunkRequest* send_stream_chunk);
  ::livekit::proto::SendStreamChunkRequest* unsafe_arena_release_send_stream_chunk();

  // .livekit.proto.SendStreamTrailerRequest send_stream_trailer = 46;
  bool has_send_stream_trailer() const;
  private:
  bool _internal_has_send_stream_trailer() const;
  public:
  void clear_send_stream_trailer();
  const ::livekit::proto::SendStreamTrailerRequest& send_stream_trailer() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamTrailerRequest* release_send_stream_trailer();
  ::livekit::proto::SendStreamTrailerRequest* mutable_send_stream_trailer();
  void set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerRequest* send_stream_trailer);
  private:
  const ::livekit::proto::SendStreamTrailerRequest& _internal_send_stream_trailer() const;
  ::livekit::proto::SendStreamTrailerRequest* _internal_mutable_send_stream_trailer();
  public:
  void unsafe_arena_set_allocated_send_stream_trailer(
      ::livekit::proto::SendStreamTrailerRequest* send_stream_trailer);
  ::livekit::proto::SendStreamTrailerRequest* unsafe_arena_release_send_stream_trailer();

  // .livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest set_data_channel_buffered_amount_low_threshold = 47;
  bool has_set_data_channel_buffered_amount_low_threshold() const;
  private:
  bool _internal_has_set_data_channel_buffered_amount_low_threshold() const;
  public:
  void clear_set_data_channel_buffered_amount_low_threshold();
  const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest& set_data_channel_buffered_amount_low_threshold() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* release_set_data_channel_buffered_amount_low_threshold();
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* mutable_set_data_channel_buffered_amount_low_threshold();
  void set_allocated_set_data_channel_buffered_amount_low_threshold(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* set_data_channel_buffered_amount_low_threshold);
  private:
  const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest& _internal_set_data_channel_buffered_amount_low_threshold() const;
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* _internal_mutable_set_data_channel_buffered_amount_low_threshold();
  public:
  void unsafe_arena_set_allocated_set_data_channel_buffered_amount_low_threshold(
      ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* set_data_channel_buffered_amount_low_threshold);
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* unsafe_arena_release_set_data_channel_buffered_amount_low_threshold();

  // .livekit.proto.LoadAudioFilterPluginRequest load_audio_filter_plugin = 49;
  bool has_load_audio_filter_plugin() const;
  private:
  bool _internal_has_load_audio_filter_plugin() const;
  public:
  void clear_load_audio_filter_plugin();
  const ::livekit::proto::LoadAudioFilterPluginRequest& load_audio_filter_plugin() const;
  PROTOBUF_NODISCARD ::livekit::proto::LoadAudioFilterPluginRequest* release_load_audio_filter_plugin();
  ::livekit::proto::LoadAudioFilterPluginRequest* mutable_load_audio_filter_plugin();
  void set_allocated_load_audio_filter_plugin(::livekit::proto::LoadAudioFilterPluginRequest* load_audio_filter_plugin);
  private:
  const ::livekit::proto::LoadAudioFilterPluginRequest& _internal_load_audio_filter_plugin() const;
  ::livekit::proto::LoadAudioFilterPluginRequest* _internal_mutable_load_audio_filter_plugin();
  public:
  void unsafe_arena_set_allocated_load_audio_filter_plugin(
      ::livekit::proto::LoadAudioFilterPluginRequest* load_audio_filter_plugin);
  ::livekit::proto::LoadAudioFilterPluginRequest* unsafe_arena_release_load_audio_filter_plugin();

  // .livekit.proto.NewApmRequest new_apm = 50;
  bool has_new_apm() const;
  private:
  bool _internal_has_new_apm() const;
  public:
  void clear_new_apm();
  const ::livekit::proto::NewApmRequest& new_apm() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewApmRequest* release_new_apm();
  ::livekit::proto::NewApmRequest* mutable_new_apm();
  void set_allocated_new_apm(::livekit::proto::NewApmRequest* new_apm);
  private:
  const ::livekit::proto::NewApmRequest& _internal_new_apm() const;
  ::livekit::proto::NewApmRequest* _internal_mutable_new_apm();
  public:
  void unsafe_arena_set_allocated_new_apm(
      ::livekit::proto::NewApmRequest* new_apm);
  ::livekit::proto::NewApmRequest* unsafe_arena_release_new_apm();

  // .livekit.proto.ApmProcessStreamRequest apm_process_stream = 51;
  bool has_apm_process_stream() const;
  private:
  bool _internal_has_apm_process_stream() const;
  public:
  void clear_apm_process_stream();
  const ::livekit::proto::ApmProcessStreamRequest& apm_process_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::ApmProcessStreamRequest* release_apm_process_stream();
  ::livekit::proto::ApmProcessStreamRequest* mutable_apm_process_stream();
  void set_allocated_apm_process_stream(::livekit::proto::ApmProcessStreamRequest* apm_process_stream);
  private:
  const ::livekit::proto::ApmProcessStreamRequest& _internal_apm_process_stream() const;
  ::livekit::proto::ApmProcessStreamRequest* _internal_mutable_apm_process_stream();
  public:
  void unsafe_arena_set_allocated_apm_process_stream(
      ::livekit::proto::ApmProcessStreamRequest* apm_process_stream);
  ::livekit::proto::ApmProcessStreamRequest* unsafe_arena_release_apm_process_stream();

  // .livekit.proto.ApmProcessReverseStreamRequest apm_process_reverse_stream = 52;
  bool has_apm_process_reverse_stream() const;
  private:
  bool _internal_has_apm_process_reverse_stream() const;
  public:
  void clear_apm_process_reverse_stream();
  const ::livekit::proto::ApmProcessReverseStreamRequest& apm_process_reverse_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::ApmProcessReverseStreamRequest* release_apm_process_reverse_stream();
  ::livekit::proto::ApmProcessReverseStreamRequest* mutable_apm_process_reverse_stream();
  void set_allocated_apm_process_reverse_stream(::livekit::proto::ApmProcessReverseStreamRequest* apm_process_reverse_stream);
  private:
  const ::livekit::proto::ApmProcessReverseStreamRequest& _internal_apm_process_reverse_stream() const;
  ::livekit::proto::ApmProcessReverseStreamRequest* _internal_mutable_apm_process_reverse_stream();
  public:
  void unsafe_arena_set_allocated_apm_process_reverse_stream(
      ::livekit::proto::ApmProcessReverseStreamRequest* apm_process_reverse_stream);
  ::livekit::proto::ApmProcessReverseStreamRequest* unsafe_arena_release_apm_process_reverse_stream();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:livekit.proto.FfiRequest)
 private:
  class _Internal;
  void set_has_dispose();
  void set_has_connect();
  void set_has_disconnect();
  void set_has_publish_track();
  void set_has_unpublish_track();
  void set_has_publish_data();
  void set_has_set_subscribed();
  void set_has_set_local_metadata();
  void set_has_set_local_name();
  void set_has_set_local_attributes();
  void set_has_get_session_stats();
  void set_has_publish_transcription();
  void set_has_publish_sip_dtmf();
  void set_has_create_video_track();
  void set_has_create_audio_track();
  void set_has_local_track_mute();
  void set_has_enable_remote_track();
  void set_has_get_stats();
  void set_has_set_track_subscription_permissions();
  void set_has_new_video_stream();
  void set_has_new_video_source();
  void set_has_capture_video_frame();
  void set_has_video_convert();
  void set_has_video_stream_from_participant();
  void set_has_new_audio_stream();
  void set_has_new_audio_source();
  void set_has_capture_audio_frame();
  void set_has_clear_audio_buffer();
  void set_has_new_audio_resampler();
  void set_has_remix_and_resample();
  void set_has_e2ee();
  void set_has_audio_stream_from_participant();
  void set_has_new_sox_resampler();
  void set_has_push_sox_resampler();
  void set_has_flush_sox_resampler();
  void set_has_send_chat_message();
  void set_has_edit_chat_message();
  void set_has_perform_rpc();
  void set_has_register_rpc_method();
  void set_has_unregister_rpc_method();
  void set_has_rpc_method_invocation_response();
  void set_has_enable_remote_track_publication();
  void set_has_update_remote_track_publication_dimension();
  void set_has_send_stream_header();
  void set_has_send_stream_chunk();
  void set_has_send_stream_trailer();
  void set_has_set_data_channel_buffered_amount_low_threshold();
  void set_has_load_audio_filter_plugin();
  void set_has_new_apm();
  void set_has_apm_process_stream();
  void set_has_apm_process_reverse_stream();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::livekit::proto::DisposeRequest* dispose_;
      ::livekit::proto::ConnectRequest* connect_;
      ::livekit::proto::DisconnectRequest* disconnect_;
      ::livekit::proto::PublishTrackRequest* publish_track_;
      ::livekit::proto::UnpublishTrackRequest* unpublish_track_;
      ::livekit::proto::PublishDataRequest* publish_data_;
      ::livekit::proto::SetSubscribedRequest* set_subscribed_;
      ::livekit::proto::SetLocalMetadataRequest* set_local_metadata_;
      ::livekit::proto::SetLocalNameRequest* set_local_name_;
      ::livekit::proto::SetLocalAttributesRequest* set_local_attributes_;
      ::livekit::proto::GetSessionStatsRequest* get_session_stats_;
      ::livekit::proto::PublishTranscriptionRequest* publish_transcription_;
      ::livekit::proto::PublishSipDtmfRequest* publish_sip_dtmf_;
      ::livekit::proto::CreateVideoTrackRequest* create_video_track_;
      ::livekit::proto::CreateAudioTrackRequest* create_audio_track_;
      ::livekit::proto::LocalTrackMuteRequest* local_track_mute_;
      ::livekit::proto::EnableRemoteTrackRequest* enable_remote_track_;
      ::livekit::proto::GetStatsRequest* get_stats_;
      ::livekit::proto::SetTrackSubscriptionPermissionsRequest* set_track_subscription_permissions_;
      ::livekit::proto::NewVideoStreamRequest* new_video_stream_;
      ::livekit::proto::NewVideoSourceRequest* new_video_source_;
      ::livekit::proto::CaptureVideoFrameRequest* capture_video_frame_;
      ::livekit::proto::VideoConvertRequest* video_convert_;
      ::livekit::proto::VideoStreamFromParticipantRequest* video_stream_from_participant_;
      ::livekit::proto::NewAudioStreamRequest* new_audio_stream_;
      ::livekit::proto::NewAudioSourceRequest* new_audio_source_;
      ::livekit::proto::CaptureAudioFrameRequest* capture_audio_frame_;
      ::livekit::proto::ClearAudioBufferRequest* clear_audio_buffer_;
      ::livekit::proto::NewAudioResamplerRequest* new_audio_resampler_;
      ::livekit::proto::RemixAndResampleRequest* remix_and_resample_;
      ::livekit::proto::E2eeRequest* e2ee_;
      ::livekit::proto::AudioStreamFromParticipantRequest* audio_stream_from_participant_;
      ::livekit::proto::NewSoxResamplerRequest* new_sox_resampler_;
      ::livekit::proto::PushSoxResamplerRequest* push_sox_resampler_;
      ::livekit::proto::FlushSoxResamplerRequest* flush_sox_resampler_;
      ::livekit::proto::SendChatMessageRequest* send_chat_message_;
      ::livekit::proto::EditChatMessageRequest* edit_chat_message_;
      ::livekit::proto::PerformRpcRequest* perform_rpc_;
      ::livekit::proto::RegisterRpcMethodRequest* register_rpc_method_;
      ::livekit::proto::UnregisterRpcMethodRequest* unregister_rpc_method_;
      ::livekit::proto::RpcMethodInvocationResponseRequest* rpc_method_invocation_response_;
      ::livekit::proto::EnableRemoteTrackPublicationRequest* enable_remote_track_publication_;
      ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* update_remote_track_publication_dimension_;
      ::livekit::proto::SendStreamHeaderRequest* send_stream_header_;
      ::livekit::proto::SendStreamChunkRequest* send_stream_chunk_;
      ::livekit::proto::SendStreamTrailerRequest* send_stream_trailer_;
      ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* set_data_channel_buffered_amount_low_threshold_;
      ::livekit::proto::LoadAudioFilterPluginRequest* load_audio_filter_plugin_;
      ::livekit::proto::NewApmRequest* new_apm_;
      ::livekit::proto::ApmProcessStreamRequest* apm_process_stream_;
      ::livekit::proto::ApmProcessReverseStreamRequest* apm_process_reverse_stream_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class FfiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.FfiResponse) */ {
 public:
  inline FfiResponse() : FfiResponse(nullptr) {}
  ~FfiResponse() override;
  explicit PROTOBUF_CONSTEXPR FfiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FfiResponse(const FfiResponse& from);
  FfiResponse(FfiResponse&& from) noexcept
    : FfiResponse() {
    *this = ::std::move(from);
  }

  inline FfiResponse& operator=(const FfiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FfiResponse& operator=(FfiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FfiResponse& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kDispose = 2,
    kConnect = 3,
    kDisconnect = 4,
    kPublishTrack = 5,
    kUnpublishTrack = 6,
    kPublishData = 7,
    kSetSubscribed = 8,
    kSetLocalMetadata = 9,
    kSetLocalName = 10,
    kSetLocalAttributes = 11,
    kGetSessionStats = 12,
    kPublishTranscription = 13,
    kPublishSipDtmf = 14,
    kCreateVideoTrack = 15,
    kCreateAudioTrack = 16,
    kLocalTrackMute = 17,
    kEnableRemoteTrack = 18,
    kGetStats = 19,
    kSetTrackSubscriptionPermissions = 47,
    kNewVideoStream = 20,
    kNewVideoSource = 21,
    kCaptureVideoFrame = 22,
    kVideoConvert = 23,
    kVideoStreamFromParticipant = 24,
    kNewAudioStream = 25,
    kNewAudioSource = 26,
    kCaptureAudioFrame = 27,
    kClearAudioBuffer = 28,
    kNewAudioResampler = 29,
    kRemixAndResample = 30,
    kAudioStreamFromParticipant = 31,
    kE2Ee = 32,
    kNewSoxResampler = 33,
    kPushSoxResampler = 34,
    kFlushSoxResampler = 35,
    kSendChatMessage = 36,
    kPerformRpc = 37,
    kRegisterRpcMethod = 38,
    kUnregisterRpcMethod = 39,
    kRpcMethodInvocationResponse = 40,
    kEnableRemoteTrackPublication = 41,
    kUpdateRemoteTrackPublicationDimension = 42,
    kSendStreamHeader = 43,
    kSendStreamChunk = 44,
    kSendStreamTrailer = 45,
    kSetDataChannelBufferedAmountLowThreshold = 46,
    kLoadAudioFilterPlugin = 48,
    kNewApm = 49,
    kApmProcessStream = 50,
    kApmProcessReverseStream = 51,
    MESSAGE_NOT_SET = 0,
  };

  static inline const FfiResponse* internal_default_instance() {
    return reinterpret_cast<const FfiResponse*>(
               &_FfiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FfiResponse& a, FfiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FfiResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FfiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FfiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FfiResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FfiResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FfiResponse& from) {
    FfiResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FfiResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.FfiResponse";
  }
  protected:
  explicit FfiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisposeFieldNumber = 2,
    kConnectFieldNumber = 3,
    kDisconnectFieldNumber = 4,
    kPublishTrackFieldNumber = 5,
    kUnpublishTrackFieldNumber = 6,
    kPublishDataFieldNumber = 7,
    kSetSubscribedFieldNumber = 8,
    kSetLocalMetadataFieldNumber = 9,
    kSetLocalNameFieldNumber = 10,
    kSetLocalAttributesFieldNumber = 11,
    kGetSessionStatsFieldNumber = 12,
    kPublishTranscriptionFieldNumber = 13,
    kPublishSipDtmfFieldNumber = 14,
    kCreateVideoTrackFieldNumber = 15,
    kCreateAudioTrackFieldNumber = 16,
    kLocalTrackMuteFieldNumber = 17,
    kEnableRemoteTrackFieldNumber = 18,
    kGetStatsFieldNumber = 19,
    kSetTrackSubscriptionPermissionsFieldNumber = 47,
    kNewVideoStreamFieldNumber = 20,
    kNewVideoSourceFieldNumber = 21,
    kCaptureVideoFrameFieldNumber = 22,
    kVideoConvertFieldNumber = 23,
    kVideoStreamFromParticipantFieldNumber = 24,
    kNewAudioStreamFieldNumber = 25,
    kNewAudioSourceFieldNumber = 26,
    kCaptureAudioFrameFieldNumber = 27,
    kClearAudioBufferFieldNumber = 28,
    kNewAudioResamplerFieldNumber = 29,
    kRemixAndResampleFieldNumber = 30,
    kAudioStreamFromParticipantFieldNumber = 31,
    kE2EeFieldNumber = 32,
    kNewSoxResamplerFieldNumber = 33,
    kPushSoxResamplerFieldNumber = 34,
    kFlushSoxResamplerFieldNumber = 35,
    kSendChatMessageFieldNumber = 36,
    kPerformRpcFieldNumber = 37,
    kRegisterRpcMethodFieldNumber = 38,
    kUnregisterRpcMethodFieldNumber = 39,
    kRpcMethodInvocationResponseFieldNumber = 40,
    kEnableRemoteTrackPublicationFieldNumber = 41,
    kUpdateRemoteTrackPublicationDimensionFieldNumber = 42,
    kSendStreamHeaderFieldNumber = 43,
    kSendStreamChunkFieldNumber = 44,
    kSendStreamTrailerFieldNumber = 45,
    kSetDataChannelBufferedAmountLowThresholdFieldNumber = 46,
    kLoadAudioFilterPluginFieldNumber = 48,
    kNewApmFieldNumber = 49,
    kApmProcessStreamFieldNumber = 50,
    kApmProcessReverseStreamFieldNumber = 51,
  };
  // .livekit.proto.DisposeResponse dispose = 2;
  bool has_dispose() const;
  private:
  bool _internal_has_dispose() const;
  public:
  void clear_dispose();
  const ::livekit::proto::DisposeResponse& dispose() const;
  PROTOBUF_NODISCARD ::livekit::proto::DisposeResponse* release_dispose();
  ::livekit::proto::DisposeResponse* mutable_dispose();
  void set_allocated_dispose(::livekit::proto::DisposeResponse* dispose);
  private:
  const ::livekit::proto::DisposeResponse& _internal_dispose() const;
  ::livekit::proto::DisposeResponse* _internal_mutable_dispose();
  public:
  void unsafe_arena_set_allocated_dispose(
      ::livekit::proto::DisposeResponse* dispose);
  ::livekit::proto::DisposeResponse* unsafe_arena_release_dispose();

  // .livekit.proto.ConnectResponse connect = 3;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::livekit::proto::ConnectResponse& connect() const;
  PROTOBUF_NODISCARD ::livekit::proto::ConnectResponse* release_connect();
  ::livekit::proto::ConnectResponse* mutable_connect();
  void set_allocated_connect(::livekit::proto::ConnectResponse* connect);
  private:
  const ::livekit::proto::ConnectResponse& _internal_connect() const;
  ::livekit::proto::ConnectResponse* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::livekit::proto::ConnectResponse* connect);
  ::livekit::proto::ConnectResponse* unsafe_arena_release_connect();

  // .livekit.proto.DisconnectResponse disconnect = 4;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::livekit::proto::DisconnectResponse& disconnect() const;
  PROTOBUF_NODISCARD ::livekit::proto::DisconnectResponse* release_disconnect();
  ::livekit::proto::DisconnectResponse* mutable_disconnect();
  void set_allocated_disconnect(::livekit::proto::DisconnectResponse* disconnect);
  private:
  const ::livekit::proto::DisconnectResponse& _internal_disconnect() const;
  ::livekit::proto::DisconnectResponse* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::livekit::proto::DisconnectResponse* disconnect);
  ::livekit::proto::DisconnectResponse* unsafe_arena_release_disconnect();

  // .livekit.proto.PublishTrackResponse publish_track = 5;
  bool has_publish_track() const;
  private:
  bool _internal_has_publish_track() const;
  public:
  void clear_publish_track();
  const ::livekit::proto::PublishTrackResponse& publish_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishTrackResponse* release_publish_track();
  ::livekit::proto::PublishTrackResponse* mutable_publish_track();
  void set_allocated_publish_track(::livekit::proto::PublishTrackResponse* publish_track);
  private:
  const ::livekit::proto::PublishTrackResponse& _internal_publish_track() const;
  ::livekit::proto::PublishTrackResponse* _internal_mutable_publish_track();
  public:
  void unsafe_arena_set_allocated_publish_track(
      ::livekit::proto::PublishTrackResponse* publish_track);
  ::livekit::proto::PublishTrackResponse* unsafe_arena_release_publish_track();

  // .livekit.proto.UnpublishTrackResponse unpublish_track = 6;
  bool has_unpublish_track() const;
  private:
  bool _internal_has_unpublish_track() const;
  public:
  void clear_unpublish_track();
  const ::livekit::proto::UnpublishTrackResponse& unpublish_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::UnpublishTrackResponse* release_unpublish_track();
  ::livekit::proto::UnpublishTrackResponse* mutable_unpublish_track();
  void set_allocated_unpublish_track(::livekit::proto::UnpublishTrackResponse* unpublish_track);
  private:
  const ::livekit::proto::UnpublishTrackResponse& _internal_unpublish_track() const;
  ::livekit::proto::UnpublishTrackResponse* _internal_mutable_unpublish_track();
  public:
  void unsafe_arena_set_allocated_unpublish_track(
      ::livekit::proto::UnpublishTrackResponse* unpublish_track);
  ::livekit::proto::UnpublishTrackResponse* unsafe_arena_release_unpublish_track();

  // .livekit.proto.PublishDataResponse publish_data = 7;
  bool has_publish_data() const;
  private:
  bool _internal_has_publish_data() const;
  public:
  void clear_publish_data();
  const ::livekit::proto::PublishDataResponse& publish_data() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishDataResponse* release_publish_data();
  ::livekit::proto::PublishDataResponse* mutable_publish_data();
  void set_allocated_publish_data(::livekit::proto::PublishDataResponse* publish_data);
  private:
  const ::livekit::proto::PublishDataResponse& _internal_publish_data() const;
  ::livekit::proto::PublishDataResponse* _internal_mutable_publish_data();
  public:
  void unsafe_arena_set_allocated_publish_data(
      ::livekit::proto::PublishDataResponse* publish_data);
  ::livekit::proto::PublishDataResponse* unsafe_arena_release_publish_data();

  // .livekit.proto.SetSubscribedResponse set_subscribed = 8;
  bool has_set_subscribed() const;
  private:
  bool _internal_has_set_subscribed() const;
  public:
  void clear_set_subscribed();
  const ::livekit::proto::SetSubscribedResponse& set_subscribed() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetSubscribedResponse* release_set_subscribed();
  ::livekit::proto::SetSubscribedResponse* mutable_set_subscribed();
  void set_allocated_set_subscribed(::livekit::proto::SetSubscribedResponse* set_subscribed);
  private:
  const ::livekit::proto::SetSubscribedResponse& _internal_set_subscribed() const;
  ::livekit::proto::SetSubscribedResponse* _internal_mutable_set_subscribed();
  public:
  void unsafe_arena_set_allocated_set_subscribed(
      ::livekit::proto::SetSubscribedResponse* set_subscribed);
  ::livekit::proto::SetSubscribedResponse* unsafe_arena_release_set_subscribed();

  // .livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
  bool has_set_local_metadata() const;
  private:
  bool _internal_has_set_local_metadata() const;
  public:
  void clear_set_local_metadata();
  const ::livekit::proto::SetLocalMetadataResponse& set_local_metadata() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalMetadataResponse* release_set_local_metadata();
  ::livekit::proto::SetLocalMetadataResponse* mutable_set_local_metadata();
  void set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataResponse* set_local_metadata);
  private:
  const ::livekit::proto::SetLocalMetadataResponse& _internal_set_local_metadata() const;
  ::livekit::proto::SetLocalMetadataResponse* _internal_mutable_set_local_metadata();
  public:
  void unsafe_arena_set_allocated_set_local_metadata(
      ::livekit::proto::SetLocalMetadataResponse* set_local_metadata);
  ::livekit::proto::SetLocalMetadataResponse* unsafe_arena_release_set_local_metadata();

  // .livekit.proto.SetLocalNameResponse set_local_name = 10;
  bool has_set_local_name() const;
  private:
  bool _internal_has_set_local_name() const;
  public:
  void clear_set_local_name();
  const ::livekit::proto::SetLocalNameResponse& set_local_name() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalNameResponse* release_set_local_name();
  ::livekit::proto::SetLocalNameResponse* mutable_set_local_name();
  void set_allocated_set_local_name(::livekit::proto::SetLocalNameResponse* set_local_name);
  private:
  const ::livekit::proto::SetLocalNameResponse& _internal_set_local_name() const;
  ::livekit::proto::SetLocalNameResponse* _internal_mutable_set_local_name();
  public:
  void unsafe_arena_set_allocated_set_local_name(
      ::livekit::proto::SetLocalNameResponse* set_local_name);
  ::livekit::proto::SetLocalNameResponse* unsafe_arena_release_set_local_name();

  // .livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
  bool has_set_local_attributes() const;
  private:
  bool _internal_has_set_local_attributes() const;
  public:
  void clear_set_local_attributes();
  const ::livekit::proto::SetLocalAttributesResponse& set_local_attributes() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalAttributesResponse* release_set_local_attributes();
  ::livekit::proto::SetLocalAttributesResponse* mutable_set_local_attributes();
  void set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesResponse* set_local_attributes);
  private:
  const ::livekit::proto::SetLocalAttributesResponse& _internal_set_local_attributes() const;
  ::livekit::proto::SetLocalAttributesResponse* _internal_mutable_set_local_attributes();
  public:
  void unsafe_arena_set_allocated_set_local_attributes(
      ::livekit::proto::SetLocalAttributesResponse* set_local_attributes);
  ::livekit::proto::SetLocalAttributesResponse* unsafe_arena_release_set_local_attributes();

  // .livekit.proto.GetSessionStatsResponse get_session_stats = 12;
  bool has_get_session_stats() const;
  private:
  bool _internal_has_get_session_stats() const;
  public:
  void clear_get_session_stats();
  const ::livekit::proto::GetSessionStatsResponse& get_session_stats() const;
  PROTOBUF_NODISCARD ::livekit::proto::GetSessionStatsResponse* release_get_session_stats();
  ::livekit::proto::GetSessionStatsResponse* mutable_get_session_stats();
  void set_allocated_get_session_stats(::livekit::proto::GetSessionStatsResponse* get_session_stats);
  private:
  const ::livekit::proto::GetSessionStatsResponse& _internal_get_session_stats() const;
  ::livekit::proto::GetSessionStatsResponse* _internal_mutable_get_session_stats();
  public:
  void unsafe_arena_set_allocated_get_session_stats(
      ::livekit::proto::GetSessionStatsResponse* get_session_stats);
  ::livekit::proto::GetSessionStatsResponse* unsafe_arena_release_get_session_stats();

  // .livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
  bool has_publish_transcription() const;
  private:
  bool _internal_has_publish_transcription() const;
  public:
  void clear_publish_transcription();
  const ::livekit::proto::PublishTranscriptionResponse& publish_transcription() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishTranscriptionResponse* release_publish_transcription();
  ::livekit::proto::PublishTranscriptionResponse* mutable_publish_transcription();
  void set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionResponse* publish_transcription);
  private:
  const ::livekit::proto::PublishTranscriptionResponse& _internal_publish_transcription() const;
  ::livekit::proto::PublishTranscriptionResponse* _internal_mutable_publish_transcription();
  public:
  void unsafe_arena_set_allocated_publish_transcription(
      ::livekit::proto::PublishTranscriptionResponse* publish_transcription);
  ::livekit::proto::PublishTranscriptionResponse* unsafe_arena_release_publish_transcription();

  // .livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
  bool has_publish_sip_dtmf() const;
  private:
  bool _internal_has_publish_sip_dtmf() const;
  public:
  void clear_publish_sip_dtmf();
  const ::livekit::proto::PublishSipDtmfResponse& publish_sip_dtmf() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishSipDtmfResponse* release_publish_sip_dtmf();
  ::livekit::proto::PublishSipDtmfResponse* mutable_publish_sip_dtmf();
  void set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfResponse* publish_sip_dtmf);
  private:
  const ::livekit::proto::PublishSipDtmfResponse& _internal_publish_sip_dtmf() const;
  ::livekit::proto::PublishSipDtmfResponse* _internal_mutable_publish_sip_dtmf();
  public:
  void unsafe_arena_set_allocated_publish_sip_dtmf(
      ::livekit::proto::PublishSipDtmfResponse* publish_sip_dtmf);
  ::livekit::proto::PublishSipDtmfResponse* unsafe_arena_release_publish_sip_dtmf();

  // .livekit.proto.CreateVideoTrackResponse create_video_track = 15;
  bool has_create_video_track() const;
  private:
  bool _internal_has_create_video_track() const;
  public:
  void clear_create_video_track();
  const ::livekit::proto::CreateVideoTrackResponse& create_video_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::CreateVideoTrackResponse* release_create_video_track();
  ::livekit::proto::CreateVideoTrackResponse* mutable_create_video_track();
  void set_allocated_create_video_track(::livekit::proto::CreateVideoTrackResponse* create_video_track);
  private:
  const ::livekit::proto::CreateVideoTrackResponse& _internal_create_video_track() const;
  ::livekit::proto::CreateVideoTrackResponse* _internal_mutable_create_video_track();
  public:
  void unsafe_arena_set_allocated_create_video_track(
      ::livekit::proto::CreateVideoTrackResponse* create_video_track);
  ::livekit::proto::CreateVideoTrackResponse* unsafe_arena_release_create_video_track();

  // .livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
  bool has_create_audio_track() const;
  private:
  bool _internal_has_create_audio_track() const;
  public:
  void clear_create_audio_track();
  const ::livekit::proto::CreateAudioTrackResponse& create_audio_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::CreateAudioTrackResponse* release_create_audio_track();
  ::livekit::proto::CreateAudioTrackResponse* mutable_create_audio_track();
  void set_allocated_create_audio_track(::livekit::proto::CreateAudioTrackResponse* create_audio_track);
  private:
  const ::livekit::proto::CreateAudioTrackResponse& _internal_create_audio_track() const;
  ::livekit::proto::CreateAudioTrackResponse* _internal_mutable_create_audio_track();
  public:
  void unsafe_arena_set_allocated_create_audio_track(
      ::livekit::proto::CreateAudioTrackResponse* create_audio_track);
  ::livekit::proto::CreateAudioTrackResponse* unsafe_arena_release_create_audio_track();

  // .livekit.proto.LocalTrackMuteResponse local_track_mute = 17;
  bool has_local_track_mute() const;
  private:
  bool _internal_has_local_track_mute() const;
  public:
  void clear_local_track_mute();
  const ::livekit::proto::LocalTrackMuteResponse& local_track_mute() const;
  PROTOBUF_NODISCARD ::livekit::proto::LocalTrackMuteResponse* release_local_track_mute();
  ::livekit::proto::LocalTrackMuteResponse* mutable_local_track_mute();
  void set_allocated_local_track_mute(::livekit::proto::LocalTrackMuteResponse* local_track_mute);
  private:
  const ::livekit::proto::LocalTrackMuteResponse& _internal_local_track_mute() const;
  ::livekit::proto::LocalTrackMuteResponse* _internal_mutable_local_track_mute();
  public:
  void unsafe_arena_set_allocated_local_track_mute(
      ::livekit::proto::LocalTrackMuteResponse* local_track_mute);
  ::livekit::proto::LocalTrackMuteResponse* unsafe_arena_release_local_track_mute();

  // .livekit.proto.EnableRemoteTrackResponse enable_remote_track = 18;
  bool has_enable_remote_track() const;
  private:
  bool _internal_has_enable_remote_track() const;
  public:
  void clear_enable_remote_track();
  const ::livekit::proto::EnableRemoteTrackResponse& enable_remote_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::EnableRemoteTrackResponse* release_enable_remote_track();
  ::livekit::proto::EnableRemoteTrackResponse* mutable_enable_remote_track();
  void set_allocated_enable_remote_track(::livekit::proto::EnableRemoteTrackResponse* enable_remote_track);
  private:
  const ::livekit::proto::EnableRemoteTrackResponse& _internal_enable_remote_track() const;
  ::livekit::proto::EnableRemoteTrackResponse* _internal_mutable_enable_remote_track();
  public:
  void unsafe_arena_set_allocated_enable_remote_track(
      ::livekit::proto::EnableRemoteTrackResponse* enable_remote_track);
  ::livekit::proto::EnableRemoteTrackResponse* unsafe_arena_release_enable_remote_track();

  // .livekit.proto.GetStatsResponse get_stats = 19;
  bool has_get_stats() const;
  private:
  bool _internal_has_get_stats() const;
  public:
  void clear_get_stats();
  const ::livekit::proto::GetStatsResponse& get_stats() const;
  PROTOBUF_NODISCARD ::livekit::proto::GetStatsResponse* release_get_stats();
  ::livekit::proto::GetStatsResponse* mutable_get_stats();
  void set_allocated_get_stats(::livekit::proto::GetStatsResponse* get_stats);
  private:
  const ::livekit::proto::GetStatsResponse& _internal_get_stats() const;
  ::livekit::proto::GetStatsResponse* _internal_mutable_get_stats();
  public:
  void unsafe_arena_set_allocated_get_stats(
      ::livekit::proto::GetStatsResponse* get_stats);
  ::livekit::proto::GetStatsResponse* unsafe_arena_release_get_stats();

  // .livekit.proto.SetTrackSubscriptionPermissionsResponse set_track_subscription_permissions = 47;
  bool has_set_track_subscription_permissions() const;
  private:
  bool _internal_has_set_track_subscription_permissions() const;
  public:
  void clear_set_track_subscription_permissions();
  const ::livekit::proto::SetTrackSubscriptionPermissionsResponse& set_track_subscription_permissions() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetTrackSubscriptionPermissionsResponse* release_set_track_subscription_permissions();
  ::livekit::proto::SetTrackSubscriptionPermissionsResponse* mutable_set_track_subscription_permissions();
  void set_allocated_set_track_subscription_permissions(::livekit::proto::SetTrackSubscriptionPermissionsResponse* set_track_subscription_permissions);
  private:
  const ::livekit::proto::SetTrackSubscriptionPermissionsResponse& _internal_set_track_subscription_permissions() const;
  ::livekit::proto::SetTrackSubscriptionPermissionsResponse* _internal_mutable_set_track_subscription_permissions();
  public:
  void unsafe_arena_set_allocated_set_track_subscription_permissions(
      ::livekit::proto::SetTrackSubscriptionPermissionsResponse* set_track_subscription_permissions);
  ::livekit::proto::SetTrackSubscriptionPermissionsResponse* unsafe_arena_release_set_track_subscription_permissions();

  // .livekit.proto.NewVideoStreamResponse new_video_stream = 20;
  bool has_new_video_stream() const;
  private:
  bool _internal_has_new_video_stream() const;
  public:
  void clear_new_video_stream();
  const ::livekit::proto::NewVideoStreamResponse& new_video_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewVideoStreamResponse* release_new_video_stream();
  ::livekit::proto::NewVideoStreamResponse* mutable_new_video_stream();
  void set_allocated_new_video_stream(::livekit::proto::NewVideoStreamResponse* new_video_stream);
  private:
  const ::livekit::proto::NewVideoStreamResponse& _internal_new_video_stream() const;
  ::livekit::proto::NewVideoStreamResponse* _internal_mutable_new_video_stream();
  public:
  void unsafe_arena_set_allocated_new_video_stream(
      ::livekit::proto::NewVideoStreamResponse* new_video_stream);
  ::livekit::proto::NewVideoStreamResponse* unsafe_arena_release_new_video_stream();

  // .livekit.proto.NewVideoSourceResponse new_video_source = 21;
  bool has_new_video_source() const;
  private:
  bool _internal_has_new_video_source() const;
  public:
  void clear_new_video_source();
  const ::livekit::proto::NewVideoSourceResponse& new_video_source() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewVideoSourceResponse* release_new_video_source();
  ::livekit::proto::NewVideoSourceResponse* mutable_new_video_source();
  void set_allocated_new_video_source(::livekit::proto::NewVideoSourceResponse* new_video_source);
  private:
  const ::livekit::proto::NewVideoSourceResponse& _internal_new_video_source() const;
  ::livekit::proto::NewVideoSourceResponse* _internal_mutable_new_video_source();
  public:
  void unsafe_arena_set_allocated_new_video_source(
      ::livekit::proto::NewVideoSourceResponse* new_video_source);
  ::livekit::proto::NewVideoSourceResponse* unsafe_arena_release_new_video_source();

  // .livekit.proto.CaptureVideoFrameResponse capture_video_frame = 22;
  bool has_capture_video_frame() const;
  private:
  bool _internal_has_capture_video_frame() const;
  public:
  void clear_capture_video_frame();
  const ::livekit::proto::CaptureVideoFrameResponse& capture_video_frame() const;
  PROTOBUF_NODISCARD ::livekit::proto::CaptureVideoFrameResponse* release_capture_video_frame();
  ::livekit::proto::CaptureVideoFrameResponse* mutable_capture_video_frame();
  void set_allocated_capture_video_frame(::livekit::proto::CaptureVideoFrameResponse* capture_video_frame);
  private:
  const ::livekit::proto::CaptureVideoFrameResponse& _internal_capture_video_frame() const;
  ::livekit::proto::CaptureVideoFrameResponse* _internal_mutable_capture_video_frame();
  public:
  void unsafe_arena_set_allocated_capture_video_frame(
      ::livekit::proto::CaptureVideoFrameResponse* capture_video_frame);
  ::livekit::proto::CaptureVideoFrameResponse* unsafe_arena_release_capture_video_frame();

  // .livekit.proto.VideoConvertResponse video_convert = 23;
  bool has_video_convert() const;
  private:
  bool _internal_has_video_convert() const;
  public:
  void clear_video_convert();
  const ::livekit::proto::VideoConvertResponse& video_convert() const;
  PROTOBUF_NODISCARD ::livekit::proto::VideoConvertResponse* release_video_convert();
  ::livekit::proto::VideoConvertResponse* mutable_video_convert();
  void set_allocated_video_convert(::livekit::proto::VideoConvertResponse* video_convert);
  private:
  const ::livekit::proto::VideoConvertResponse& _internal_video_convert() const;
  ::livekit::proto::VideoConvertResponse* _internal_mutable_video_convert();
  public:
  void unsafe_arena_set_allocated_video_convert(
      ::livekit::proto::VideoConvertResponse* video_convert);
  ::livekit::proto::VideoConvertResponse* unsafe_arena_release_video_convert();

  // .livekit.proto.VideoStreamFromParticipantResponse video_stream_from_participant = 24;
  bool has_video_stream_from_participant() const;
  private:
  bool _internal_has_video_stream_from_participant() const;
  public:
  void clear_video_stream_from_participant();
  const ::livekit::proto::VideoStreamFromParticipantResponse& video_stream_from_participant() const;
  PROTOBUF_NODISCARD ::livekit::proto::VideoStreamFromParticipantResponse* release_video_stream_from_participant();
  ::livekit::proto::VideoStreamFromParticipantResponse* mutable_video_stream_from_participant();
  void set_allocated_video_stream_from_participant(::livekit::proto::VideoStreamFromParticipantResponse* video_stream_from_participant);
  private:
  const ::livekit::proto::VideoStreamFromParticipantResponse& _internal_video_stream_from_participant() const;
  ::livekit::proto::VideoStreamFromParticipantResponse* _internal_mutable_video_stream_from_participant();
  public:
  void unsafe_arena_set_allocated_video_stream_from_participant(
      ::livekit::proto::VideoStreamFromParticipantResponse* video_stream_from_participant);
  ::livekit::proto::VideoStreamFromParticipantResponse* unsafe_arena_release_video_stream_from_participant();

  // .livekit.proto.NewAudioStreamResponse new_audio_stream = 25;
  bool has_new_audio_stream() const;
  private:
  bool _internal_has_new_audio_stream() const;
  public:
  void clear_new_audio_stream();
  const ::livekit::proto::NewAudioStreamResponse& new_audio_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewAudioStreamResponse* release_new_audio_stream();
  ::livekit::proto::NewAudioStreamResponse* mutable_new_audio_stream();
  void set_allocated_new_audio_stream(::livekit::proto::NewAudioStreamResponse* new_audio_stream);
  private:
  const ::livekit::proto::NewAudioStreamResponse& _internal_new_audio_stream() const;
  ::livekit::proto::NewAudioStreamResponse* _internal_mutable_new_audio_stream();
  public:
  void unsafe_arena_set_allocated_new_audio_stream(
      ::livekit::proto::NewAudioStreamResponse* new_audio_stream);
  ::livekit::proto::NewAudioStreamResponse* unsafe_arena_release_new_audio_stream();

  // .livekit.proto.NewAudioSourceResponse new_audio_source = 26;
  bool has_new_audio_source() const;
  private:
  bool _internal_has_new_audio_source() const;
  public:
  void clear_new_audio_source();
  const ::livekit::proto::NewAudioSourceResponse& new_audio_source() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewAudioSourceResponse* release_new_audio_source();
  ::livekit::proto::NewAudioSourceResponse* mutable_new_audio_source();
  void set_allocated_new_audio_source(::livekit::proto::NewAudioSourceResponse* new_audio_source);
  private:
  const ::livekit::proto::NewAudioSourceResponse& _internal_new_audio_source() const;
  ::livekit::proto::NewAudioSourceResponse* _internal_mutable_new_audio_source();
  public:
  void unsafe_arena_set_allocated_new_audio_source(
      ::livekit::proto::NewAudioSourceResponse* new_audio_source);
  ::livekit::proto::NewAudioSourceResponse* unsafe_arena_release_new_audio_source();

  // .livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 27;
  bool has_capture_audio_frame() const;
  private:
  bool _internal_has_capture_audio_frame() const;
  public:
  void clear_capture_audio_frame();
  const ::livekit::proto::CaptureAudioFrameResponse& capture_audio_frame() const;
  PROTOBUF_NODISCARD ::livekit::proto::CaptureAudioFrameResponse* release_capture_audio_frame();
  ::livekit::proto::CaptureAudioFrameResponse* mutable_capture_audio_frame();
  void set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameResponse* capture_audio_frame);
  private:
  const ::livekit::proto::CaptureAudioFrameResponse& _internal_capture_audio_frame() const;
  ::livekit::proto::CaptureAudioFrameResponse* _internal_mutable_capture_audio_frame();
  public:
  void unsafe_arena_set_allocated_capture_audio_frame(
      ::livekit::proto::CaptureAudioFrameResponse* capture_audio_frame);
  ::livekit::proto::CaptureAudioFrameResponse* unsafe_arena_release_capture_audio_frame();

  // .livekit.proto.ClearAudioBufferResponse clear_audio_buffer = 28;
  bool has_clear_audio_buffer() const;
  private:
  bool _internal_has_clear_audio_buffer() const;
  public:
  void clear_clear_audio_buffer();
  const ::livekit::proto::ClearAudioBufferResponse& clear_audio_buffer() const;
  PROTOBUF_NODISCARD ::livekit::proto::ClearAudioBufferResponse* release_clear_audio_buffer();
  ::livekit::proto::ClearAudioBufferResponse* mutable_clear_audio_buffer();
  void set_allocated_clear_audio_buffer(::livekit::proto::ClearAudioBufferResponse* clear_audio_buffer);
  private:
  const ::livekit::proto::ClearAudioBufferResponse& _internal_clear_audio_buffer() const;
  ::livekit::proto::ClearAudioBufferResponse* _internal_mutable_clear_audio_buffer();
  public:
  void unsafe_arena_set_allocated_clear_audio_buffer(
      ::livekit::proto::ClearAudioBufferResponse* clear_audio_buffer);
  ::livekit::proto::ClearAudioBufferResponse* unsafe_arena_release_clear_audio_buffer();

  // .livekit.proto.NewAudioResamplerResponse new_audio_resampler = 29;
  bool has_new_audio_resampler() const;
  private:
  bool _internal_has_new_audio_resampler() const;
  public:
  void clear_new_audio_resampler();
  const ::livekit::proto::NewAudioResamplerResponse& new_audio_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewAudioResamplerResponse* release_new_audio_resampler();
  ::livekit::proto::NewAudioResamplerResponse* mutable_new_audio_resampler();
  void set_allocated_new_audio_resampler(::livekit::proto::NewAudioResamplerResponse* new_audio_resampler);
  private:
  const ::livekit::proto::NewAudioResamplerResponse& _internal_new_audio_resampler() const;
  ::livekit::proto::NewAudioResamplerResponse* _internal_mutable_new_audio_resampler();
  public:
  void unsafe_arena_set_allocated_new_audio_resampler(
      ::livekit::proto::NewAudioResamplerResponse* new_audio_resampler);
  ::livekit::proto::NewAudioResamplerResponse* unsafe_arena_release_new_audio_resampler();

  // .livekit.proto.RemixAndResampleResponse remix_and_resample = 30;
  bool has_remix_and_resample() const;
  private:
  bool _internal_has_remix_and_resample() const;
  public:
  void clear_remix_and_resample();
  const ::livekit::proto::RemixAndResampleResponse& remix_and_resample() const;
  PROTOBUF_NODISCARD ::livekit::proto::RemixAndResampleResponse* release_remix_and_resample();
  ::livekit::proto::RemixAndResampleResponse* mutable_remix_and_resample();
  void set_allocated_remix_and_resample(::livekit::proto::RemixAndResampleResponse* remix_and_resample);
  private:
  const ::livekit::proto::RemixAndResampleResponse& _internal_remix_and_resample() const;
  ::livekit::proto::RemixAndResampleResponse* _internal_mutable_remix_and_resample();
  public:
  void unsafe_arena_set_allocated_remix_and_resample(
      ::livekit::proto::RemixAndResampleResponse* remix_and_resample);
  ::livekit::proto::RemixAndResampleResponse* unsafe_arena_release_remix_and_resample();

  // .livekit.proto.AudioStreamFromParticipantResponse audio_stream_from_participant = 31;
  bool has_audio_stream_from_participant() const;
  private:
  bool _internal_has_audio_stream_from_participant() const;
  public:
  void clear_audio_stream_from_participant();
  const ::livekit::proto::AudioStreamFromParticipantResponse& audio_stream_from_participant() const;
  PROTOBUF_NODISCARD ::livekit::proto::AudioStreamFromParticipantResponse* release_audio_stream_from_participant();
  ::livekit::proto::AudioStreamFromParticipantResponse* mutable_audio_stream_from_participant();
  void set_allocated_audio_stream_from_participant(::livekit::proto::AudioStreamFromParticipantResponse* audio_stream_from_participant);
  private:
  const ::livekit::proto::AudioStreamFromParticipantResponse& _internal_audio_stream_from_participant() const;
  ::livekit::proto::AudioStreamFromParticipantResponse* _internal_mutable_audio_stream_from_participant();
  public:
  void unsafe_arena_set_allocated_audio_stream_from_participant(
      ::livekit::proto::AudioStreamFromParticipantResponse* audio_stream_from_participant);
  ::livekit::proto::AudioStreamFromParticipantResponse* unsafe_arena_release_audio_stream_from_participant();

  // .livekit.proto.E2eeResponse e2ee = 32;
  bool has_e2ee() const;
  private:
  bool _internal_has_e2ee() const;
  public:
  void clear_e2ee();
  const ::livekit::proto::E2eeResponse& e2ee() const;
  PROTOBUF_NODISCARD ::livekit::proto::E2eeResponse* release_e2ee();
  ::livekit::proto::E2eeResponse* mutable_e2ee();
  void set_allocated_e2ee(::livekit::proto::E2eeResponse* e2ee);
  private:
  const ::livekit::proto::E2eeResponse& _internal_e2ee() const;
  ::livekit::proto::E2eeResponse* _internal_mutable_e2ee();
  public:
  void unsafe_arena_set_allocated_e2ee(
      ::livekit::proto::E2eeResponse* e2ee);
  ::livekit::proto::E2eeResponse* unsafe_arena_release_e2ee();

  // .livekit.proto.NewSoxResamplerResponse new_sox_resampler = 33;
  bool has_new_sox_resampler() const;
  private:
  bool _internal_has_new_sox_resampler() const;
  public:
  void clear_new_sox_resampler();
  const ::livekit::proto::NewSoxResamplerResponse& new_sox_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewSoxResamplerResponse* release_new_sox_resampler();
  ::livekit::proto::NewSoxResamplerResponse* mutable_new_sox_resampler();
  void set_allocated_new_sox_resampler(::livekit::proto::NewSoxResamplerResponse* new_sox_resampler);
  private:
  const ::livekit::proto::NewSoxResamplerResponse& _internal_new_sox_resampler() const;
  ::livekit::proto::NewSoxResamplerResponse* _internal_mutable_new_sox_resampler();
  public:
  void unsafe_arena_set_allocated_new_sox_resampler(
      ::livekit::proto::NewSoxResamplerResponse* new_sox_resampler);
  ::livekit::proto::NewSoxResamplerResponse* unsafe_arena_release_new_sox_resampler();

  // .livekit.proto.PushSoxResamplerResponse push_sox_resampler = 34;
  bool has_push_sox_resampler() const;
  private:
  bool _internal_has_push_sox_resampler() const;
  public:
  void clear_push_sox_resampler();
  const ::livekit::proto::PushSoxResamplerResponse& push_sox_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::PushSoxResamplerResponse* release_push_sox_resampler();
  ::livekit::proto::PushSoxResamplerResponse* mutable_push_sox_resampler();
  void set_allocated_push_sox_resampler(::livekit::proto::PushSoxResamplerResponse* push_sox_resampler);
  private:
  const ::livekit::proto::PushSoxResamplerResponse& _internal_push_sox_resampler() const;
  ::livekit::proto::PushSoxResamplerResponse* _internal_mutable_push_sox_resampler();
  public:
  void unsafe_arena_set_allocated_push_sox_resampler(
      ::livekit::proto::PushSoxResamplerResponse* push_sox_resampler);
  ::livekit::proto::PushSoxResamplerResponse* unsafe_arena_release_push_sox_resampler();

  // .livekit.proto.FlushSoxResamplerResponse flush_sox_resampler = 35;
  bool has_flush_sox_resampler() const;
  private:
  bool _internal_has_flush_sox_resampler() const;
  public:
  void clear_flush_sox_resampler();
  const ::livekit::proto::FlushSoxResamplerResponse& flush_sox_resampler() const;
  PROTOBUF_NODISCARD ::livekit::proto::FlushSoxResamplerResponse* release_flush_sox_resampler();
  ::livekit::proto::FlushSoxResamplerResponse* mutable_flush_sox_resampler();
  void set_allocated_flush_sox_resampler(::livekit::proto::FlushSoxResamplerResponse* flush_sox_resampler);
  private:
  const ::livekit::proto::FlushSoxResamplerResponse& _internal_flush_sox_resampler() const;
  ::livekit::proto::FlushSoxResamplerResponse* _internal_mutable_flush_sox_resampler();
  public:
  void unsafe_arena_set_allocated_flush_sox_resampler(
      ::livekit::proto::FlushSoxResamplerResponse* flush_sox_resampler);
  ::livekit::proto::FlushSoxResamplerResponse* unsafe_arena_release_flush_sox_resampler();

  // .livekit.proto.SendChatMessageResponse send_chat_message = 36;
  bool has_send_chat_message() const;
  private:
  bool _internal_has_send_chat_message() const;
  public:
  void clear_send_chat_message();
  const ::livekit::proto::SendChatMessageResponse& send_chat_message() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendChatMessageResponse* release_send_chat_message();
  ::livekit::proto::SendChatMessageResponse* mutable_send_chat_message();
  void set_allocated_send_chat_message(::livekit::proto::SendChatMessageResponse* send_chat_message);
  private:
  const ::livekit::proto::SendChatMessageResponse& _internal_send_chat_message() const;
  ::livekit::proto::SendChatMessageResponse* _internal_mutable_send_chat_message();
  public:
  void unsafe_arena_set_allocated_send_chat_message(
      ::livekit::proto::SendChatMessageResponse* send_chat_message);
  ::livekit::proto::SendChatMessageResponse* unsafe_arena_release_send_chat_message();

  // .livekit.proto.PerformRpcResponse perform_rpc = 37;
  bool has_perform_rpc() const;
  private:
  bool _internal_has_perform_rpc() const;
  public:
  void clear_perform_rpc();
  const ::livekit::proto::PerformRpcResponse& perform_rpc() const;
  PROTOBUF_NODISCARD ::livekit::proto::PerformRpcResponse* release_perform_rpc();
  ::livekit::proto::PerformRpcResponse* mutable_perform_rpc();
  void set_allocated_perform_rpc(::livekit::proto::PerformRpcResponse* perform_rpc);
  private:
  const ::livekit::proto::PerformRpcResponse& _internal_perform_rpc() const;
  ::livekit::proto::PerformRpcResponse* _internal_mutable_perform_rpc();
  public:
  void unsafe_arena_set_allocated_perform_rpc(
      ::livekit::proto::PerformRpcResponse* perform_rpc);
  ::livekit::proto::PerformRpcResponse* unsafe_arena_release_perform_rpc();

  // .livekit.proto.RegisterRpcMethodResponse register_rpc_method = 38;
  bool has_register_rpc_method() const;
  private:
  bool _internal_has_register_rpc_method() const;
  public:
  void clear_register_rpc_method();
  const ::livekit::proto::RegisterRpcMethodResponse& register_rpc_method() const;
  PROTOBUF_NODISCARD ::livekit::proto::RegisterRpcMethodResponse* release_register_rpc_method();
  ::livekit::proto::RegisterRpcMethodResponse* mutable_register_rpc_method();
  void set_allocated_register_rpc_method(::livekit::proto::RegisterRpcMethodResponse* register_rpc_method);
  private:
  const ::livekit::proto::RegisterRpcMethodResponse& _internal_register_rpc_method() const;
  ::livekit::proto::RegisterRpcMethodResponse* _internal_mutable_register_rpc_method();
  public:
  void unsafe_arena_set_allocated_register_rpc_method(
      ::livekit::proto::RegisterRpcMethodResponse* register_rpc_method);
  ::livekit::proto::RegisterRpcMethodResponse* unsafe_arena_release_register_rpc_method();

  // .livekit.proto.UnregisterRpcMethodResponse unregister_rpc_method = 39;
  bool has_unregister_rpc_method() const;
  private:
  bool _internal_has_unregister_rpc_method() const;
  public:
  void clear_unregister_rpc_method();
  const ::livekit::proto::UnregisterRpcMethodResponse& unregister_rpc_method() const;
  PROTOBUF_NODISCARD ::livekit::proto::UnregisterRpcMethodResponse* release_unregister_rpc_method();
  ::livekit::proto::UnregisterRpcMethodResponse* mutable_unregister_rpc_method();
  void set_allocated_unregister_rpc_method(::livekit::proto::UnregisterRpcMethodResponse* unregister_rpc_method);
  private:
  const ::livekit::proto::UnregisterRpcMethodResponse& _internal_unregister_rpc_method() const;
  ::livekit::proto::UnregisterRpcMethodResponse* _internal_mutable_unregister_rpc_method();
  public:
  void unsafe_arena_set_allocated_unregister_rpc_method(
      ::livekit::proto::UnregisterRpcMethodResponse* unregister_rpc_method);
  ::livekit::proto::UnregisterRpcMethodResponse* unsafe_arena_release_unregister_rpc_method();

  // .livekit.proto.RpcMethodInvocationResponseResponse rpc_method_invocation_response = 40;
  bool has_rpc_method_invocation_response() const;
  private:
  bool _internal_has_rpc_method_invocation_response() const;
  public:
  void clear_rpc_method_invocation_response();
  const ::livekit::proto::RpcMethodInvocationResponseResponse& rpc_method_invocation_response() const;
  PROTOBUF_NODISCARD ::livekit::proto::RpcMethodInvocationResponseResponse* release_rpc_method_invocation_response();
  ::livekit::proto::RpcMethodInvocationResponseResponse* mutable_rpc_method_invocation_response();
  void set_allocated_rpc_method_invocation_response(::livekit::proto::RpcMethodInvocationResponseResponse* rpc_method_invocation_response);
  private:
  const ::livekit::proto::RpcMethodInvocationResponseResponse& _internal_rpc_method_invocation_response() const;
  ::livekit::proto::RpcMethodInvocationResponseResponse* _internal_mutable_rpc_method_invocation_response();
  public:
  void unsafe_arena_set_allocated_rpc_method_invocation_response(
      ::livekit::proto::RpcMethodInvocationResponseResponse* rpc_method_invocation_response);
  ::livekit::proto::RpcMethodInvocationResponseResponse* unsafe_arena_release_rpc_method_invocation_response();

  // .livekit.proto.EnableRemoteTrackPublicationResponse enable_remote_track_publication = 41;
  bool has_enable_remote_track_publication() const;
  private:
  bool _internal_has_enable_remote_track_publication() const;
  public:
  void clear_enable_remote_track_publication();
  const ::livekit::proto::EnableRemoteTrackPublicationResponse& enable_remote_track_publication() const;
  PROTOBUF_NODISCARD ::livekit::proto::EnableRemoteTrackPublicationResponse* release_enable_remote_track_publication();
  ::livekit::proto::EnableRemoteTrackPublicationResponse* mutable_enable_remote_track_publication();
  void set_allocated_enable_remote_track_publication(::livekit::proto::EnableRemoteTrackPublicationResponse* enable_remote_track_publication);
  private:
  const ::livekit::proto::EnableRemoteTrackPublicationResponse& _internal_enable_remote_track_publication() const;
  ::livekit::proto::EnableRemoteTrackPublicationResponse* _internal_mutable_enable_remote_track_publication();
  public:
  void unsafe_arena_set_allocated_enable_remote_track_publication(
      ::livekit::proto::EnableRemoteTrackPublicationResponse* enable_remote_track_publication);
  ::livekit::proto::EnableRemoteTrackPublicationResponse* unsafe_arena_release_enable_remote_track_publication();

  // .livekit.proto.UpdateRemoteTrackPublicationDimensionResponse update_remote_track_publication_dimension = 42;
  bool has_update_remote_track_publication_dimension() const;
  private:
  bool _internal_has_update_remote_track_publication_dimension() const;
  public:
  void clear_update_remote_track_publication_dimension();
  const ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse& update_remote_track_publication_dimension() const;
  PROTOBUF_NODISCARD ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* release_update_remote_track_publication_dimension();
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* mutable_update_remote_track_publication_dimension();
  void set_allocated_update_remote_track_publication_dimension(::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* update_remote_track_publication_dimension);
  private:
  const ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse& _internal_update_remote_track_publication_dimension() const;
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* _internal_mutable_update_remote_track_publication_dimension();
  public:
  void unsafe_arena_set_allocated_update_remote_track_publication_dimension(
      ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* update_remote_track_publication_dimension);
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* unsafe_arena_release_update_remote_track_publication_dimension();

  // .livekit.proto.SendStreamHeaderResponse send_stream_header = 43;
  bool has_send_stream_header() const;
  private:
  bool _internal_has_send_stream_header() const;
  public:
  void clear_send_stream_header();
  const ::livekit::proto::SendStreamHeaderResponse& send_stream_header() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamHeaderResponse* release_send_stream_header();
  ::livekit::proto::SendStreamHeaderResponse* mutable_send_stream_header();
  void set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderResponse* send_stream_header);
  private:
  const ::livekit::proto::SendStreamHeaderResponse& _internal_send_stream_header() const;
  ::livekit::proto::SendStreamHeaderResponse* _internal_mutable_send_stream_header();
  public:
  void unsafe_arena_set_allocated_send_stream_header(
      ::livekit::proto::SendStreamHeaderResponse* send_stream_header);
  ::livekit::proto::SendStreamHeaderResponse* unsafe_arena_release_send_stream_header();

  // .livekit.proto.SendStreamChunkResponse send_stream_chunk = 44;
  bool has_send_stream_chunk() const;
  private:
  bool _internal_has_send_stream_chunk() const;
  public:
  void clear_send_stream_chunk();
  const ::livekit::proto::SendStreamChunkResponse& send_stream_chunk() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamChunkResponse* release_send_stream_chunk();
  ::livekit::proto::SendStreamChunkResponse* mutable_send_stream_chunk();
  void set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkResponse* send_stream_chunk);
  private:
  const ::livekit::proto::SendStreamChunkResponse& _internal_send_stream_chunk() const;
  ::livekit::proto::SendStreamChunkResponse* _internal_mutable_send_stream_chunk();
  public:
  void unsafe_arena_set_allocated_send_stream_chunk(
      ::livekit::proto::SendStreamChunkResponse* send_stream_chunk);
  ::livekit::proto::SendStreamChunkResponse* unsafe_arena_release_send_stream_chunk();

  // .livekit.proto.SendStreamTrailerResponse send_stream_trailer = 45;
  bool has_send_stream_trailer() const;
  private:
  bool _internal_has_send_stream_trailer() const;
  public:
  void clear_send_stream_trailer();
  const ::livekit::proto::SendStreamTrailerResponse& send_stream_trailer() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamTrailerResponse* release_send_stream_trailer();
  ::livekit::proto::SendStreamTrailerResponse* mutable_send_stream_trailer();
  void set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerResponse* send_stream_trailer);
  private:
  const ::livekit::proto::SendStreamTrailerResponse& _internal_send_stream_trailer() const;
  ::livekit::proto::SendStreamTrailerResponse* _internal_mutable_send_stream_trailer();
  public:
  void unsafe_arena_set_allocated_send_stream_trailer(
      ::livekit::proto::SendStreamTrailerResponse* send_stream_trailer);
  ::livekit::proto::SendStreamTrailerResponse* unsafe_arena_release_send_stream_trailer();

  // .livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse set_data_channel_buffered_amount_low_threshold = 46;
  bool has_set_data_channel_buffered_amount_low_threshold() const;
  private:
  bool _internal_has_set_data_channel_buffered_amount_low_threshold() const;
  public:
  void clear_set_data_channel_buffered_amount_low_threshold();
  const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse& set_data_channel_buffered_amount_low_threshold() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* release_set_data_channel_buffered_amount_low_threshold();
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* mutable_set_data_channel_buffered_amount_low_threshold();
  void set_allocated_set_data_channel_buffered_amount_low_threshold(::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* set_data_channel_buffered_amount_low_threshold);
  private:
  const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse& _internal_set_data_channel_buffered_amount_low_threshold() const;
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* _internal_mutable_set_data_channel_buffered_amount_low_threshold();
  public:
  void unsafe_arena_set_allocated_set_data_channel_buffered_amount_low_threshold(
      ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* set_data_channel_buffered_amount_low_threshold);
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* unsafe_arena_release_set_data_channel_buffered_amount_low_threshold();

  // .livekit.proto.LoadAudioFilterPluginResponse load_audio_filter_plugin = 48;
  bool has_load_audio_filter_plugin() const;
  private:
  bool _internal_has_load_audio_filter_plugin() const;
  public:
  void clear_load_audio_filter_plugin();
  const ::livekit::proto::LoadAudioFilterPluginResponse& load_audio_filter_plugin() const;
  PROTOBUF_NODISCARD ::livekit::proto::LoadAudioFilterPluginResponse* release_load_audio_filter_plugin();
  ::livekit::proto::LoadAudioFilterPluginResponse* mutable_load_audio_filter_plugin();
  void set_allocated_load_audio_filter_plugin(::livekit::proto::LoadAudioFilterPluginResponse* load_audio_filter_plugin);
  private:
  const ::livekit::proto::LoadAudioFilterPluginResponse& _internal_load_audio_filter_plugin() const;
  ::livekit::proto::LoadAudioFilterPluginResponse* _internal_mutable_load_audio_filter_plugin();
  public:
  void unsafe_arena_set_allocated_load_audio_filter_plugin(
      ::livekit::proto::LoadAudioFilterPluginResponse* load_audio_filter_plugin);
  ::livekit::proto::LoadAudioFilterPluginResponse* unsafe_arena_release_load_audio_filter_plugin();

  // .livekit.proto.NewApmResponse new_apm = 49;
  bool has_new_apm() const;
  private:
  bool _internal_has_new_apm() const;
  public:
  void clear_new_apm();
  const ::livekit::proto::NewApmResponse& new_apm() const;
  PROTOBUF_NODISCARD ::livekit::proto::NewApmResponse* release_new_apm();
  ::livekit::proto::NewApmResponse* mutable_new_apm();
  void set_allocated_new_apm(::livekit::proto::NewApmResponse* new_apm);
  private:
  const ::livekit::proto::NewApmResponse& _internal_new_apm() const;
  ::livekit::proto::NewApmResponse* _internal_mutable_new_apm();
  public:
  void unsafe_arena_set_allocated_new_apm(
      ::livekit::proto::NewApmResponse* new_apm);
  ::livekit::proto::NewApmResponse* unsafe_arena_release_new_apm();

  // .livekit.proto.ApmProcessStreamResponse apm_process_stream = 50;
  bool has_apm_process_stream() const;
  private:
  bool _internal_has_apm_process_stream() const;
  public:
  void clear_apm_process_stream();
  const ::livekit::proto::ApmProcessStreamResponse& apm_process_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::ApmProcessStreamResponse* release_apm_process_stream();
  ::livekit::proto::ApmProcessStreamResponse* mutable_apm_process_stream();
  void set_allocated_apm_process_stream(::livekit::proto::ApmProcessStreamResponse* apm_process_stream);
  private:
  const ::livekit::proto::ApmProcessStreamResponse& _internal_apm_process_stream() const;
  ::livekit::proto::ApmProcessStreamResponse* _internal_mutable_apm_process_stream();
  public:
  void unsafe_arena_set_allocated_apm_process_stream(
      ::livekit::proto::ApmProcessStreamResponse* apm_process_stream);
  ::livekit::proto::ApmProcessStreamResponse* unsafe_arena_release_apm_process_stream();

  // .livekit.proto.ApmProcessReverseStreamResponse apm_process_reverse_stream = 51;
  bool has_apm_process_reverse_stream() const;
  private:
  bool _internal_has_apm_process_reverse_stream() const;
  public:
  void clear_apm_process_reverse_stream();
  const ::livekit::proto::ApmProcessReverseStreamResponse& apm_process_reverse_stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::ApmProcessReverseStreamResponse* release_apm_process_reverse_stream();
  ::livekit::proto::ApmProcessReverseStreamResponse* mutable_apm_process_reverse_stream();
  void set_allocated_apm_process_reverse_stream(::livekit::proto::ApmProcessReverseStreamResponse* apm_process_reverse_stream);
  private:
  const ::livekit::proto::ApmProcessReverseStreamResponse& _internal_apm_process_reverse_stream() const;
  ::livekit::proto::ApmProcessReverseStreamResponse* _internal_mutable_apm_process_reverse_stream();
  public:
  void unsafe_arena_set_allocated_apm_process_reverse_stream(
      ::livekit::proto::ApmProcessReverseStreamResponse* apm_process_reverse_stream);
  ::livekit::proto::ApmProcessReverseStreamResponse* unsafe_arena_release_apm_process_reverse_stream();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:livekit.proto.FfiResponse)
 private:
  class _Internal;
  void set_has_dispose();
  void set_has_connect();
  void set_has_disconnect();
  void set_has_publish_track();
  void set_has_unpublish_track();
  void set_has_publish_data();
  void set_has_set_subscribed();
  void set_has_set_local_metadata();
  void set_has_set_local_name();
  void set_has_set_local_attributes();
  void set_has_get_session_stats();
  void set_has_publish_transcription();
  void set_has_publish_sip_dtmf();
  void set_has_create_video_track();
  void set_has_create_audio_track();
  void set_has_local_track_mute();
  void set_has_enable_remote_track();
  void set_has_get_stats();
  void set_has_set_track_subscription_permissions();
  void set_has_new_video_stream();
  void set_has_new_video_source();
  void set_has_capture_video_frame();
  void set_has_video_convert();
  void set_has_video_stream_from_participant();
  void set_has_new_audio_stream();
  void set_has_new_audio_source();
  void set_has_capture_audio_frame();
  void set_has_clear_audio_buffer();
  void set_has_new_audio_resampler();
  void set_has_remix_and_resample();
  void set_has_audio_stream_from_participant();
  void set_has_e2ee();
  void set_has_new_sox_resampler();
  void set_has_push_sox_resampler();
  void set_has_flush_sox_resampler();
  void set_has_send_chat_message();
  void set_has_perform_rpc();
  void set_has_register_rpc_method();
  void set_has_unregister_rpc_method();
  void set_has_rpc_method_invocation_response();
  void set_has_enable_remote_track_publication();
  void set_has_update_remote_track_publication_dimension();
  void set_has_send_stream_header();
  void set_has_send_stream_chunk();
  void set_has_send_stream_trailer();
  void set_has_set_data_channel_buffered_amount_low_threshold();
  void set_has_load_audio_filter_plugin();
  void set_has_new_apm();
  void set_has_apm_process_stream();
  void set_has_apm_process_reverse_stream();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::livekit::proto::DisposeResponse* dispose_;
      ::livekit::proto::ConnectResponse* connect_;
      ::livekit::proto::DisconnectResponse* disconnect_;
      ::livekit::proto::PublishTrackResponse* publish_track_;
      ::livekit::proto::UnpublishTrackResponse* unpublish_track_;
      ::livekit::proto::PublishDataResponse* publish_data_;
      ::livekit::proto::SetSubscribedResponse* set_subscribed_;
      ::livekit::proto::SetLocalMetadataResponse* set_local_metadata_;
      ::livekit::proto::SetLocalNameResponse* set_local_name_;
      ::livekit::proto::SetLocalAttributesResponse* set_local_attributes_;
      ::livekit::proto::GetSessionStatsResponse* get_session_stats_;
      ::livekit::proto::PublishTranscriptionResponse* publish_transcription_;
      ::livekit::proto::PublishSipDtmfResponse* publish_sip_dtmf_;
      ::livekit::proto::CreateVideoTrackResponse* create_video_track_;
      ::livekit::proto::CreateAudioTrackResponse* create_audio_track_;
      ::livekit::proto::LocalTrackMuteResponse* local_track_mute_;
      ::livekit::proto::EnableRemoteTrackResponse* enable_remote_track_;
      ::livekit::proto::GetStatsResponse* get_stats_;
      ::livekit::proto::SetTrackSubscriptionPermissionsResponse* set_track_subscription_permissions_;
      ::livekit::proto::NewVideoStreamResponse* new_video_stream_;
      ::livekit::proto::NewVideoSourceResponse* new_video_source_;
      ::livekit::proto::CaptureVideoFrameResponse* capture_video_frame_;
      ::livekit::proto::VideoConvertResponse* video_convert_;
      ::livekit::proto::VideoStreamFromParticipantResponse* video_stream_from_participant_;
      ::livekit::proto::NewAudioStreamResponse* new_audio_stream_;
      ::livekit::proto::NewAudioSourceResponse* new_audio_source_;
      ::livekit::proto::CaptureAudioFrameResponse* capture_audio_frame_;
      ::livekit::proto::ClearAudioBufferResponse* clear_audio_buffer_;
      ::livekit::proto::NewAudioResamplerResponse* new_audio_resampler_;
      ::livekit::proto::RemixAndResampleResponse* remix_and_resample_;
      ::livekit::proto::AudioStreamFromParticipantResponse* audio_stream_from_participant_;
      ::livekit::proto::E2eeResponse* e2ee_;
      ::livekit::proto::NewSoxResamplerResponse* new_sox_resampler_;
      ::livekit::proto::PushSoxResamplerResponse* push_sox_resampler_;
      ::livekit::proto::FlushSoxResamplerResponse* flush_sox_resampler_;
      ::livekit::proto::SendChatMessageResponse* send_chat_message_;
      ::livekit::proto::PerformRpcResponse* perform_rpc_;
      ::livekit::proto::RegisterRpcMethodResponse* register_rpc_method_;
      ::livekit::proto::UnregisterRpcMethodResponse* unregister_rpc_method_;
      ::livekit::proto::RpcMethodInvocationResponseResponse* rpc_method_invocation_response_;
      ::livekit::proto::EnableRemoteTrackPublicationResponse* enable_remote_track_publication_;
      ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* update_remote_track_publication_dimension_;
      ::livekit::proto::SendStreamHeaderResponse* send_stream_header_;
      ::livekit::proto::SendStreamChunkResponse* send_stream_chunk_;
      ::livekit::proto::SendStreamTrailerResponse* send_stream_trailer_;
      ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* set_data_channel_buffered_amount_low_threshold_;
      ::livekit::proto::LoadAudioFilterPluginResponse* load_audio_filter_plugin_;
      ::livekit::proto::NewApmResponse* new_apm_;
      ::livekit::proto::ApmProcessStreamResponse* apm_process_stream_;
      ::livekit::proto::ApmProcessReverseStreamResponse* apm_process_reverse_stream_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class FfiEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.FfiEvent) */ {
 public:
  inline FfiEvent() : FfiEvent(nullptr) {}
  ~FfiEvent() override;
  explicit PROTOBUF_CONSTEXPR FfiEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FfiEvent(const FfiEvent& from);
  FfiEvent(FfiEvent&& from) noexcept
    : FfiEvent() {
    *this = ::std::move(from);
  }

  inline FfiEvent& operator=(const FfiEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FfiEvent& operator=(FfiEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FfiEvent& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kRoomEvent = 1,
    kTrackEvent = 2,
    kVideoStreamEvent = 3,
    kAudioStreamEvent = 4,
    kConnect = 5,
    kDisconnect = 7,
    kDispose = 8,
    kPublishTrack = 9,
    kUnpublishTrack = 10,
    kPublishData = 11,
    kPublishTranscription = 12,
    kCaptureAudioFrame = 13,
    kSetLocalMetadata = 14,
    kSetLocalName = 15,
    kSetLocalAttributes = 16,
    kGetStats = 17,
    kLogs = 18,
    kGetSessionStats = 19,
    kPanic = 20,
    kPublishSipDtmf = 21,
    kChatMessage = 22,
    kPerformRpc = 23,
    kRpcMethodInvocation = 24,
    kSendStreamHeader = 25,
    kSendStreamChunk = 26,
    kSendStreamTrailer = 27,
    MESSAGE_NOT_SET = 0,
  };

  static inline const FfiEvent* internal_default_instance() {
    return reinterpret_cast<const FfiEvent*>(
               &_FfiEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FfiEvent& a, FfiEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FfiEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FfiEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FfiEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FfiEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FfiEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FfiEvent& from) {
    FfiEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FfiEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.FfiEvent";
  }
  protected:
  explicit FfiEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomEventFieldNumber = 1,
    kTrackEventFieldNumber = 2,
    kVideoStreamEventFieldNumber = 3,
    kAudioStreamEventFieldNumber = 4,
    kConnectFieldNumber = 5,
    kDisconnectFieldNumber = 7,
    kDisposeFieldNumber = 8,
    kPublishTrackFieldNumber = 9,
    kUnpublishTrackFieldNumber = 10,
    kPublishDataFieldNumber = 11,
    kPublishTranscriptionFieldNumber = 12,
    kCaptureAudioFrameFieldNumber = 13,
    kSetLocalMetadataFieldNumber = 14,
    kSetLocalNameFieldNumber = 15,
    kSetLocalAttributesFieldNumber = 16,
    kGetStatsFieldNumber = 17,
    kLogsFieldNumber = 18,
    kGetSessionStatsFieldNumber = 19,
    kPanicFieldNumber = 20,
    kPublishSipDtmfFieldNumber = 21,
    kChatMessageFieldNumber = 22,
    kPerformRpcFieldNumber = 23,
    kRpcMethodInvocationFieldNumber = 24,
    kSendStreamHeaderFieldNumber = 25,
    kSendStreamChunkFieldNumber = 26,
    kSendStreamTrailerFieldNumber = 27,
  };
  // .livekit.proto.RoomEvent room_event = 1;
  bool has_room_event() const;
  private:
  bool _internal_has_room_event() const;
  public:
  void clear_room_event();
  const ::livekit::proto::RoomEvent& room_event() const;
  PROTOBUF_NODISCARD ::livekit::proto::RoomEvent* release_room_event();
  ::livekit::proto::RoomEvent* mutable_room_event();
  void set_allocated_room_event(::livekit::proto::RoomEvent* room_event);
  private:
  const ::livekit::proto::RoomEvent& _internal_room_event() const;
  ::livekit::proto::RoomEvent* _internal_mutable_room_event();
  public:
  void unsafe_arena_set_allocated_room_event(
      ::livekit::proto::RoomEvent* room_event);
  ::livekit::proto::RoomEvent* unsafe_arena_release_room_event();

  // .livekit.proto.TrackEvent track_event = 2;
  bool has_track_event() const;
  private:
  bool _internal_has_track_event() const;
  public:
  void clear_track_event();
  const ::livekit::proto::TrackEvent& track_event() const;
  PROTOBUF_NODISCARD ::livekit::proto::TrackEvent* release_track_event();
  ::livekit::proto::TrackEvent* mutable_track_event();
  void set_allocated_track_event(::livekit::proto::TrackEvent* track_event);
  private:
  const ::livekit::proto::TrackEvent& _internal_track_event() const;
  ::livekit::proto::TrackEvent* _internal_mutable_track_event();
  public:
  void unsafe_arena_set_allocated_track_event(
      ::livekit::proto::TrackEvent* track_event);
  ::livekit::proto::TrackEvent* unsafe_arena_release_track_event();

  // .livekit.proto.VideoStreamEvent video_stream_event = 3;
  bool has_video_stream_event() const;
  private:
  bool _internal_has_video_stream_event() const;
  public:
  void clear_video_stream_event();
  const ::livekit::proto::VideoStreamEvent& video_stream_event() const;
  PROTOBUF_NODISCARD ::livekit::proto::VideoStreamEvent* release_video_stream_event();
  ::livekit::proto::VideoStreamEvent* mutable_video_stream_event();
  void set_allocated_video_stream_event(::livekit::proto::VideoStreamEvent* video_stream_event);
  private:
  const ::livekit::proto::VideoStreamEvent& _internal_video_stream_event() const;
  ::livekit::proto::VideoStreamEvent* _internal_mutable_video_stream_event();
  public:
  void unsafe_arena_set_allocated_video_stream_event(
      ::livekit::proto::VideoStreamEvent* video_stream_event);
  ::livekit::proto::VideoStreamEvent* unsafe_arena_release_video_stream_event();

  // .livekit.proto.AudioStreamEvent audio_stream_event = 4;
  bool has_audio_stream_event() const;
  private:
  bool _internal_has_audio_stream_event() const;
  public:
  void clear_audio_stream_event();
  const ::livekit::proto::AudioStreamEvent& audio_stream_event() const;
  PROTOBUF_NODISCARD ::livekit::proto::AudioStreamEvent* release_audio_stream_event();
  ::livekit::proto::AudioStreamEvent* mutable_audio_stream_event();
  void set_allocated_audio_stream_event(::livekit::proto::AudioStreamEvent* audio_stream_event);
  private:
  const ::livekit::proto::AudioStreamEvent& _internal_audio_stream_event() const;
  ::livekit::proto::AudioStreamEvent* _internal_mutable_audio_stream_event();
  public:
  void unsafe_arena_set_allocated_audio_stream_event(
      ::livekit::proto::AudioStreamEvent* audio_stream_event);
  ::livekit::proto::AudioStreamEvent* unsafe_arena_release_audio_stream_event();

  // .livekit.proto.ConnectCallback connect = 5;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::livekit::proto::ConnectCallback& connect() const;
  PROTOBUF_NODISCARD ::livekit::proto::ConnectCallback* release_connect();
  ::livekit::proto::ConnectCallback* mutable_connect();
  void set_allocated_connect(::livekit::proto::ConnectCallback* connect);
  private:
  const ::livekit::proto::ConnectCallback& _internal_connect() const;
  ::livekit::proto::ConnectCallback* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::livekit::proto::ConnectCallback* connect);
  ::livekit::proto::ConnectCallback* unsafe_arena_release_connect();

  // .livekit.proto.DisconnectCallback disconnect = 7;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::livekit::proto::DisconnectCallback& disconnect() const;
  PROTOBUF_NODISCARD ::livekit::proto::DisconnectCallback* release_disconnect();
  ::livekit::proto::DisconnectCallback* mutable_disconnect();
  void set_allocated_disconnect(::livekit::proto::DisconnectCallback* disconnect);
  private:
  const ::livekit::proto::DisconnectCallback& _internal_disconnect() const;
  ::livekit::proto::DisconnectCallback* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::livekit::proto::DisconnectCallback* disconnect);
  ::livekit::proto::DisconnectCallback* unsafe_arena_release_disconnect();

  // .livekit.proto.DisposeCallback dispose = 8;
  bool has_dispose() const;
  private:
  bool _internal_has_dispose() const;
  public:
  void clear_dispose();
  const ::livekit::proto::DisposeCallback& dispose() const;
  PROTOBUF_NODISCARD ::livekit::proto::DisposeCallback* release_dispose();
  ::livekit::proto::DisposeCallback* mutable_dispose();
  void set_allocated_dispose(::livekit::proto::DisposeCallback* dispose);
  private:
  const ::livekit::proto::DisposeCallback& _internal_dispose() const;
  ::livekit::proto::DisposeCallback* _internal_mutable_dispose();
  public:
  void unsafe_arena_set_allocated_dispose(
      ::livekit::proto::DisposeCallback* dispose);
  ::livekit::proto::DisposeCallback* unsafe_arena_release_dispose();

  // .livekit.proto.PublishTrackCallback publish_track = 9;
  bool has_publish_track() const;
  private:
  bool _internal_has_publish_track() const;
  public:
  void clear_publish_track();
  const ::livekit::proto::PublishTrackCallback& publish_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishTrackCallback* release_publish_track();
  ::livekit::proto::PublishTrackCallback* mutable_publish_track();
  void set_allocated_publish_track(::livekit::proto::PublishTrackCallback* publish_track);
  private:
  const ::livekit::proto::PublishTrackCallback& _internal_publish_track() const;
  ::livekit::proto::PublishTrackCallback* _internal_mutable_publish_track();
  public:
  void unsafe_arena_set_allocated_publish_track(
      ::livekit::proto::PublishTrackCallback* publish_track);
  ::livekit::proto::PublishTrackCallback* unsafe_arena_release_publish_track();

  // .livekit.proto.UnpublishTrackCallback unpublish_track = 10;
  bool has_unpublish_track() const;
  private:
  bool _internal_has_unpublish_track() const;
  public:
  void clear_unpublish_track();
  const ::livekit::proto::UnpublishTrackCallback& unpublish_track() const;
  PROTOBUF_NODISCARD ::livekit::proto::UnpublishTrackCallback* release_unpublish_track();
  ::livekit::proto::UnpublishTrackCallback* mutable_unpublish_track();
  void set_allocated_unpublish_track(::livekit::proto::UnpublishTrackCallback* unpublish_track);
  private:
  const ::livekit::proto::UnpublishTrackCallback& _internal_unpublish_track() const;
  ::livekit::proto::UnpublishTrackCallback* _internal_mutable_unpublish_track();
  public:
  void unsafe_arena_set_allocated_unpublish_track(
      ::livekit::proto::UnpublishTrackCallback* unpublish_track);
  ::livekit::proto::UnpublishTrackCallback* unsafe_arena_release_unpublish_track();

  // .livekit.proto.PublishDataCallback publish_data = 11;
  bool has_publish_data() const;
  private:
  bool _internal_has_publish_data() const;
  public:
  void clear_publish_data();
  const ::livekit::proto::PublishDataCallback& publish_data() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishDataCallback* release_publish_data();
  ::livekit::proto::PublishDataCallback* mutable_publish_data();
  void set_allocated_publish_data(::livekit::proto::PublishDataCallback* publish_data);
  private:
  const ::livekit::proto::PublishDataCallback& _internal_publish_data() const;
  ::livekit::proto::PublishDataCallback* _internal_mutable_publish_data();
  public:
  void unsafe_arena_set_allocated_publish_data(
      ::livekit::proto::PublishDataCallback* publish_data);
  ::livekit::proto::PublishDataCallback* unsafe_arena_release_publish_data();

  // .livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
  bool has_publish_transcription() const;
  private:
  bool _internal_has_publish_transcription() const;
  public:
  void clear_publish_transcription();
  const ::livekit::proto::PublishTranscriptionCallback& publish_transcription() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishTranscriptionCallback* release_publish_transcription();
  ::livekit::proto::PublishTranscriptionCallback* mutable_publish_transcription();
  void set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionCallback* publish_transcription);
  private:
  const ::livekit::proto::PublishTranscriptionCallback& _internal_publish_transcription() const;
  ::livekit::proto::PublishTranscriptionCallback* _internal_mutable_publish_transcription();
  public:
  void unsafe_arena_set_allocated_publish_transcription(
      ::livekit::proto::PublishTranscriptionCallback* publish_transcription);
  ::livekit::proto::PublishTranscriptionCallback* unsafe_arena_release_publish_transcription();

  // .livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
  bool has_capture_audio_frame() const;
  private:
  bool _internal_has_capture_audio_frame() const;
  public:
  void clear_capture_audio_frame();
  const ::livekit::proto::CaptureAudioFrameCallback& capture_audio_frame() const;
  PROTOBUF_NODISCARD ::livekit::proto::CaptureAudioFrameCallback* release_capture_audio_frame();
  ::livekit::proto::CaptureAudioFrameCallback* mutable_capture_audio_frame();
  void set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameCallback* capture_audio_frame);
  private:
  const ::livekit::proto::CaptureAudioFrameCallback& _internal_capture_audio_frame() const;
  ::livekit::proto::CaptureAudioFrameCallback* _internal_mutable_capture_audio_frame();
  public:
  void unsafe_arena_set_allocated_capture_audio_frame(
      ::livekit::proto::CaptureAudioFrameCallback* capture_audio_frame);
  ::livekit::proto::CaptureAudioFrameCallback* unsafe_arena_release_capture_audio_frame();

  // .livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
  bool has_set_local_metadata() const;
  private:
  bool _internal_has_set_local_metadata() const;
  public:
  void clear_set_local_metadata();
  const ::livekit::proto::SetLocalMetadataCallback& set_local_metadata() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalMetadataCallback* release_set_local_metadata();
  ::livekit::proto::SetLocalMetadataCallback* mutable_set_local_metadata();
  void set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataCallback* set_local_metadata);
  private:
  const ::livekit::proto::SetLocalMetadataCallback& _internal_set_local_metadata() const;
  ::livekit::proto::SetLocalMetadataCallback* _internal_mutable_set_local_metadata();
  public:
  void unsafe_arena_set_allocated_set_local_metadata(
      ::livekit::proto::SetLocalMetadataCallback* set_local_metadata);
  ::livekit::proto::SetLocalMetadataCallback* unsafe_arena_release_set_local_metadata();

  // .livekit.proto.SetLocalNameCallback set_local_name = 15;
  bool has_set_local_name() const;
  private:
  bool _internal_has_set_local_name() const;
  public:
  void clear_set_local_name();
  const ::livekit::proto::SetLocalNameCallback& set_local_name() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalNameCallback* release_set_local_name();
  ::livekit::proto::SetLocalNameCallback* mutable_set_local_name();
  void set_allocated_set_local_name(::livekit::proto::SetLocalNameCallback* set_local_name);
  private:
  const ::livekit::proto::SetLocalNameCallback& _internal_set_local_name() const;
  ::livekit::proto::SetLocalNameCallback* _internal_mutable_set_local_name();
  public:
  void unsafe_arena_set_allocated_set_local_name(
      ::livekit::proto::SetLocalNameCallback* set_local_name);
  ::livekit::proto::SetLocalNameCallback* unsafe_arena_release_set_local_name();

  // .livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
  bool has_set_local_attributes() const;
  private:
  bool _internal_has_set_local_attributes() const;
  public:
  void clear_set_local_attributes();
  const ::livekit::proto::SetLocalAttributesCallback& set_local_attributes() const;
  PROTOBUF_NODISCARD ::livekit::proto::SetLocalAttributesCallback* release_set_local_attributes();
  ::livekit::proto::SetLocalAttributesCallback* mutable_set_local_attributes();
  void set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesCallback* set_local_attributes);
  private:
  const ::livekit::proto::SetLocalAttributesCallback& _internal_set_local_attributes() const;
  ::livekit::proto::SetLocalAttributesCallback* _internal_mutable_set_local_attributes();
  public:
  void unsafe_arena_set_allocated_set_local_attributes(
      ::livekit::proto::SetLocalAttributesCallback* set_local_attributes);
  ::livekit::proto::SetLocalAttributesCallback* unsafe_arena_release_set_local_attributes();

  // .livekit.proto.GetStatsCallback get_stats = 17;
  bool has_get_stats() const;
  private:
  bool _internal_has_get_stats() const;
  public:
  void clear_get_stats();
  const ::livekit::proto::GetStatsCallback& get_stats() const;
  PROTOBUF_NODISCARD ::livekit::proto::GetStatsCallback* release_get_stats();
  ::livekit::proto::GetStatsCallback* mutable_get_stats();
  void set_allocated_get_stats(::livekit::proto::GetStatsCallback* get_stats);
  private:
  const ::livekit::proto::GetStatsCallback& _internal_get_stats() const;
  ::livekit::proto::GetStatsCallback* _internal_mutable_get_stats();
  public:
  void unsafe_arena_set_allocated_get_stats(
      ::livekit::proto::GetStatsCallback* get_stats);
  ::livekit::proto::GetStatsCallback* unsafe_arena_release_get_stats();

  // .livekit.proto.LogBatch logs = 18;
  bool has_logs() const;
  private:
  bool _internal_has_logs() const;
  public:
  void clear_logs();
  const ::livekit::proto::LogBatch& logs() const;
  PROTOBUF_NODISCARD ::livekit::proto::LogBatch* release_logs();
  ::livekit::proto::LogBatch* mutable_logs();
  void set_allocated_logs(::livekit::proto::LogBatch* logs);
  private:
  const ::livekit::proto::LogBatch& _internal_logs() const;
  ::livekit::proto::LogBatch* _internal_mutable_logs();
  public:
  void unsafe_arena_set_allocated_logs(
      ::livekit::proto::LogBatch* logs);
  ::livekit::proto::LogBatch* unsafe_arena_release_logs();

  // .livekit.proto.GetSessionStatsCallback get_session_stats = 19;
  bool has_get_session_stats() const;
  private:
  bool _internal_has_get_session_stats() const;
  public:
  void clear_get_session_stats();
  const ::livekit::proto::GetSessionStatsCallback& get_session_stats() const;
  PROTOBUF_NODISCARD ::livekit::proto::GetSessionStatsCallback* release_get_session_stats();
  ::livekit::proto::GetSessionStatsCallback* mutable_get_session_stats();
  void set_allocated_get_session_stats(::livekit::proto::GetSessionStatsCallback* get_session_stats);
  private:
  const ::livekit::proto::GetSessionStatsCallback& _internal_get_session_stats() const;
  ::livekit::proto::GetSessionStatsCallback* _internal_mutable_get_session_stats();
  public:
  void unsafe_arena_set_allocated_get_session_stats(
      ::livekit::proto::GetSessionStatsCallback* get_session_stats);
  ::livekit::proto::GetSessionStatsCallback* unsafe_arena_release_get_session_stats();

  // .livekit.proto.Panic panic = 20;
  bool has_panic() const;
  private:
  bool _internal_has_panic() const;
  public:
  void clear_panic();
  const ::livekit::proto::Panic& panic() const;
  PROTOBUF_NODISCARD ::livekit::proto::Panic* release_panic();
  ::livekit::proto::Panic* mutable_panic();
  void set_allocated_panic(::livekit::proto::Panic* panic);
  private:
  const ::livekit::proto::Panic& _internal_panic() const;
  ::livekit::proto::Panic* _internal_mutable_panic();
  public:
  void unsafe_arena_set_allocated_panic(
      ::livekit::proto::Panic* panic);
  ::livekit::proto::Panic* unsafe_arena_release_panic();

  // .livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
  bool has_publish_sip_dtmf() const;
  private:
  bool _internal_has_publish_sip_dtmf() const;
  public:
  void clear_publish_sip_dtmf();
  const ::livekit::proto::PublishSipDtmfCallback& publish_sip_dtmf() const;
  PROTOBUF_NODISCARD ::livekit::proto::PublishSipDtmfCallback* release_publish_sip_dtmf();
  ::livekit::proto::PublishSipDtmfCallback* mutable_publish_sip_dtmf();
  void set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfCallback* publish_sip_dtmf);
  private:
  const ::livekit::proto::PublishSipDtmfCallback& _internal_publish_sip_dtmf() const;
  ::livekit::proto::PublishSipDtmfCallback* _internal_mutable_publish_sip_dtmf();
  public:
  void unsafe_arena_set_allocated_publish_sip_dtmf(
      ::livekit::proto::PublishSipDtmfCallback* publish_sip_dtmf);
  ::livekit::proto::PublishSipDtmfCallback* unsafe_arena_release_publish_sip_dtmf();

  // .livekit.proto.SendChatMessageCallback chat_message = 22;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const ::livekit::proto::SendChatMessageCallback& chat_message() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendChatMessageCallback* release_chat_message();
  ::livekit::proto::SendChatMessageCallback* mutable_chat_message();
  void set_allocated_chat_message(::livekit::proto::SendChatMessageCallback* chat_message);
  private:
  const ::livekit::proto::SendChatMessageCallback& _internal_chat_message() const;
  ::livekit::proto::SendChatMessageCallback* _internal_mutable_chat_message();
  public:
  void unsafe_arena_set_allocated_chat_message(
      ::livekit::proto::SendChatMessageCallback* chat_message);
  ::livekit::proto::SendChatMessageCallback* unsafe_arena_release_chat_message();

  // .livekit.proto.PerformRpcCallback perform_rpc = 23;
  bool has_perform_rpc() const;
  private:
  bool _internal_has_perform_rpc() const;
  public:
  void clear_perform_rpc();
  const ::livekit::proto::PerformRpcCallback& perform_rpc() const;
  PROTOBUF_NODISCARD ::livekit::proto::PerformRpcCallback* release_perform_rpc();
  ::livekit::proto::PerformRpcCallback* mutable_perform_rpc();
  void set_allocated_perform_rpc(::livekit::proto::PerformRpcCallback* perform_rpc);
  private:
  const ::livekit::proto::PerformRpcCallback& _internal_perform_rpc() const;
  ::livekit::proto::PerformRpcCallback* _internal_mutable_perform_rpc();
  public:
  void unsafe_arena_set_allocated_perform_rpc(
      ::livekit::proto::PerformRpcCallback* perform_rpc);
  ::livekit::proto::PerformRpcCallback* unsafe_arena_release_perform_rpc();

  // .livekit.proto.RpcMethodInvocationEvent rpc_method_invocation = 24;
  bool has_rpc_method_invocation() const;
  private:
  bool _internal_has_rpc_method_invocation() const;
  public:
  void clear_rpc_method_invocation();
  const ::livekit::proto::RpcMethodInvocationEvent& rpc_method_invocation() const;
  PROTOBUF_NODISCARD ::livekit::proto::RpcMethodInvocationEvent* release_rpc_method_invocation();
  ::livekit::proto::RpcMethodInvocationEvent* mutable_rpc_method_invocation();
  void set_allocated_rpc_method_invocation(::livekit::proto::RpcMethodInvocationEvent* rpc_method_invocation);
  private:
  const ::livekit::proto::RpcMethodInvocationEvent& _internal_rpc_method_invocation() const;
  ::livekit::proto::RpcMethodInvocationEvent* _internal_mutable_rpc_method_invocation();
  public:
  void unsafe_arena_set_allocated_rpc_method_invocation(
      ::livekit::proto::RpcMethodInvocationEvent* rpc_method_invocation);
  ::livekit::proto::RpcMethodInvocationEvent* unsafe_arena_release_rpc_method_invocation();

  // .livekit.proto.SendStreamHeaderCallback send_stream_header = 25;
  bool has_send_stream_header() const;
  private:
  bool _internal_has_send_stream_header() const;
  public:
  void clear_send_stream_header();
  const ::livekit::proto::SendStreamHeaderCallback& send_stream_header() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamHeaderCallback* release_send_stream_header();
  ::livekit::proto::SendStreamHeaderCallback* mutable_send_stream_header();
  void set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderCallback* send_stream_header);
  private:
  const ::livekit::proto::SendStreamHeaderCallback& _internal_send_stream_header() const;
  ::livekit::proto::SendStreamHeaderCallback* _internal_mutable_send_stream_header();
  public:
  void unsafe_arena_set_allocated_send_stream_header(
      ::livekit::proto::SendStreamHeaderCallback* send_stream_header);
  ::livekit::proto::SendStreamHeaderCallback* unsafe_arena_release_send_stream_header();

  // .livekit.proto.SendStreamChunkCallback send_stream_chunk = 26;
  bool has_send_stream_chunk() const;
  private:
  bool _internal_has_send_stream_chunk() const;
  public:
  void clear_send_stream_chunk();
  const ::livekit::proto::SendStreamChunkCallback& send_stream_chunk() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamChunkCallback* release_send_stream_chunk();
  ::livekit::proto::SendStreamChunkCallback* mutable_send_stream_chunk();
  void set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkCallback* send_stream_chunk);
  private:
  const ::livekit::proto::SendStreamChunkCallback& _internal_send_stream_chunk() const;
  ::livekit::proto::SendStreamChunkCallback* _internal_mutable_send_stream_chunk();
  public:
  void unsafe_arena_set_allocated_send_stream_chunk(
      ::livekit::proto::SendStreamChunkCallback* send_stream_chunk);
  ::livekit::proto::SendStreamChunkCallback* unsafe_arena_release_send_stream_chunk();

  // .livekit.proto.SendStreamTrailerCallback send_stream_trailer = 27;
  bool has_send_stream_trailer() const;
  private:
  bool _internal_has_send_stream_trailer() const;
  public:
  void clear_send_stream_trailer();
  const ::livekit::proto::SendStreamTrailerCallback& send_stream_trailer() const;
  PROTOBUF_NODISCARD ::livekit::proto::SendStreamTrailerCallback* release_send_stream_trailer();
  ::livekit::proto::SendStreamTrailerCallback* mutable_send_stream_trailer();
  void set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerCallback* send_stream_trailer);
  private:
  const ::livekit::proto::SendStreamTrailerCallback& _internal_send_stream_trailer() const;
  ::livekit::proto::SendStreamTrailerCallback* _internal_mutable_send_stream_trailer();
  public:
  void unsafe_arena_set_allocated_send_stream_trailer(
      ::livekit::proto::SendStreamTrailerCallback* send_stream_trailer);
  ::livekit::proto::SendStreamTrailerCallback* unsafe_arena_release_send_stream_trailer();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:livekit.proto.FfiEvent)
 private:
  class _Internal;
  void set_has_room_event();
  void set_has_track_event();
  void set_has_video_stream_event();
  void set_has_audio_stream_event();
  void set_has_connect();
  void set_has_disconnect();
  void set_has_dispose();
  void set_has_publish_track();
  void set_has_unpublish_track();
  void set_has_publish_data();
  void set_has_publish_transcription();
  void set_has_capture_audio_frame();
  void set_has_set_local_metadata();
  void set_has_set_local_name();
  void set_has_set_local_attributes();
  void set_has_get_stats();
  void set_has_logs();
  void set_has_get_session_stats();
  void set_has_panic();
  void set_has_publish_sip_dtmf();
  void set_has_chat_message();
  void set_has_perform_rpc();
  void set_has_rpc_method_invocation();
  void set_has_send_stream_header();
  void set_has_send_stream_chunk();
  void set_has_send_stream_trailer();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::livekit::proto::RoomEvent* room_event_;
      ::livekit::proto::TrackEvent* track_event_;
      ::livekit::proto::VideoStreamEvent* video_stream_event_;
      ::livekit::proto::AudioStreamEvent* audio_stream_event_;
      ::livekit::proto::ConnectCallback* connect_;
      ::livekit::proto::DisconnectCallback* disconnect_;
      ::livekit::proto::DisposeCallback* dispose_;
      ::livekit::proto::PublishTrackCallback* publish_track_;
      ::livekit::proto::UnpublishTrackCallback* unpublish_track_;
      ::livekit::proto::PublishDataCallback* publish_data_;
      ::livekit::proto::PublishTranscriptionCallback* publish_transcription_;
      ::livekit::proto::CaptureAudioFrameCallback* capture_audio_frame_;
      ::livekit::proto::SetLocalMetadataCallback* set_local_metadata_;
      ::livekit::proto::SetLocalNameCallback* set_local_name_;
      ::livekit::proto::SetLocalAttributesCallback* set_local_attributes_;
      ::livekit::proto::GetStatsCallback* get_stats_;
      ::livekit::proto::LogBatch* logs_;
      ::livekit::proto::GetSessionStatsCallback* get_session_stats_;
      ::livekit::proto::Panic* panic_;
      ::livekit::proto::PublishSipDtmfCallback* publish_sip_dtmf_;
      ::livekit::proto::SendChatMessageCallback* chat_message_;
      ::livekit::proto::PerformRpcCallback* perform_rpc_;
      ::livekit::proto::RpcMethodInvocationEvent* rpc_method_invocation_;
      ::livekit::proto::SendStreamHeaderCallback* send_stream_header_;
      ::livekit::proto::SendStreamChunkCallback* send_stream_chunk_;
      ::livekit::proto::SendStreamTrailerCallback* send_stream_trailer_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class DisposeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.DisposeRequest) */ {
 public:
  inline DisposeRequest() : DisposeRequest(nullptr) {}
  ~DisposeRequest() override;
  explicit PROTOBUF_CONSTEXPR DisposeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisposeRequest(const DisposeRequest& from);
  DisposeRequest(DisposeRequest&& from) noexcept
    : DisposeRequest() {
    *this = ::std::move(from);
  }

  inline DisposeRequest& operator=(const DisposeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisposeRequest& operator=(DisposeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisposeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisposeRequest* internal_default_instance() {
    return reinterpret_cast<const DisposeRequest*>(
               &_DisposeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DisposeRequest& a, DisposeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisposeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisposeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisposeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisposeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisposeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisposeRequest& from) {
    DisposeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisposeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.DisposeRequest";
  }
  protected:
  explicit DisposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsyncFieldNumber = 1,
  };
  // required bool async = 1;
  bool has_async() const;
  private:
  bool _internal_has_async() const;
  public:
  void clear_async();
  bool async() const;
  void set_async(bool value);
  private:
  bool _internal_async() const;
  void _internal_set_async(bool value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.DisposeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool async_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class DisposeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.DisposeResponse) */ {
 public:
  inline DisposeResponse() : DisposeResponse(nullptr) {}
  ~DisposeResponse() override;
  explicit PROTOBUF_CONSTEXPR DisposeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisposeResponse(const DisposeResponse& from);
  DisposeResponse(DisposeResponse&& from) noexcept
    : DisposeResponse() {
    *this = ::std::move(from);
  }

  inline DisposeResponse& operator=(const DisposeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisposeResponse& operator=(DisposeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisposeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisposeResponse* internal_default_instance() {
    return reinterpret_cast<const DisposeResponse*>(
               &_DisposeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DisposeResponse& a, DisposeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisposeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisposeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisposeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisposeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisposeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisposeResponse& from) {
    DisposeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisposeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.DisposeResponse";
  }
  protected:
  explicit DisposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsyncIdFieldNumber = 1,
  };
  // optional uint64 async_id = 1;
  bool has_async_id() const;
  private:
  bool _internal_has_async_id() const;
  public:
  void clear_async_id();
  uint64_t async_id() const;
  void set_async_id(uint64_t value);
  private:
  uint64_t _internal_async_id() const;
  void _internal_set_async_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.DisposeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t async_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class DisposeCallback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.DisposeCallback) */ {
 public:
  inline DisposeCallback() : DisposeCallback(nullptr) {}
  ~DisposeCallback() override;
  explicit PROTOBUF_CONSTEXPR DisposeCallback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisposeCallback(const DisposeCallback& from);
  DisposeCallback(DisposeCallback&& from) noexcept
    : DisposeCallback() {
    *this = ::std::move(from);
  }

  inline DisposeCallback& operator=(const DisposeCallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisposeCallback& operator=(DisposeCallback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisposeCallback& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisposeCallback* internal_default_instance() {
    return reinterpret_cast<const DisposeCallback*>(
               &_DisposeCallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DisposeCallback& a, DisposeCallback& b) {
    a.Swap(&b);
  }
  inline void Swap(DisposeCallback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisposeCallback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisposeCallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisposeCallback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisposeCallback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisposeCallback& from) {
    DisposeCallback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisposeCallback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.DisposeCallback";
  }
  protected:
  explicit DisposeCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsyncIdFieldNumber = 1,
  };
  // required uint64 async_id = 1;
  bool has_async_id() const;
  private:
  bool _internal_has_async_id() const;
  public:
  void clear_async_id();
  uint64_t async_id() const;
  void set_async_id(uint64_t value);
  private:
  uint64_t _internal_async_id() const;
  void _internal_set_async_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.DisposeCallback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t async_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class LogRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.LogRecord) */ {
 public:
  inline LogRecord() : LogRecord(nullptr) {}
  ~LogRecord() override;
  explicit PROTOBUF_CONSTEXPR LogRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRecord(const LogRecord& from);
  LogRecord(LogRecord&& from) noexcept
    : LogRecord() {
    *this = ::std::move(from);
  }

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
               &_LogRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogRecord& a, LogRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogRecord& from) {
    LogRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.LogRecord";
  }
  protected:
  explicit LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kModulePathFieldNumber = 3,
    kFileFieldNumber = 4,
    kMessageFieldNumber = 6,
    kLevelFieldNumber = 1,
    kLineFieldNumber = 5,
  };
  // required string target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // optional string module_path = 3;
  bool has_module_path() const;
  private:
  bool _internal_has_module_path() const;
  public:
  void clear_module_path();
  const std::string& module_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_path();
  PROTOBUF_NODISCARD std::string* release_module_path();
  void set_allocated_module_path(std::string* module_path);
  private:
  const std::string& _internal_module_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_path(const std::string& value);
  std::string* _internal_mutable_module_path();
  public:

  // optional string file = 4;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // required string message = 6;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required .livekit.proto.LogLevel level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::livekit::proto::LogLevel level() const;
  void set_level(::livekit::proto::LogLevel value);
  private:
  ::livekit::proto::LogLevel _internal_level() const;
  void _internal_set_level(::livekit::proto::LogLevel value);
  public:

  // optional uint32 line = 5;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  uint32_t line() const;
  void set_line(uint32_t value);
  private:
  uint32_t _internal_line() const;
  void _internal_set_line(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.LogRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int level_;
    uint32_t line_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class LogBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.LogBatch) */ {
 public:
  inline LogBatch() : LogBatch(nullptr) {}
  ~LogBatch() override;
  explicit PROTOBUF_CONSTEXPR LogBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogBatch(const LogBatch& from);
  LogBatch(LogBatch&& from) noexcept
    : LogBatch() {
    *this = ::std::move(from);
  }

  inline LogBatch& operator=(const LogBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogBatch& operator=(LogBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogBatch* internal_default_instance() {
    return reinterpret_cast<const LogBatch*>(
               &_LogBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogBatch& a, LogBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(LogBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogBatch& from) {
    LogBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.LogBatch";
  }
  protected:
  explicit LogBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .livekit.proto.LogRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::livekit::proto::LogRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::proto::LogRecord >*
      mutable_records();
  private:
  const ::livekit::proto::LogRecord& _internal_records(int index) const;
  ::livekit::proto::LogRecord* _internal_add_records();
  public:
  const ::livekit::proto::LogRecord& records(int index) const;
  ::livekit::proto::LogRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::proto::LogRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:livekit.proto.LogBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::proto::LogRecord > records_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// -------------------------------------------------------------------

class Panic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.Panic) */ {
 public:
  inline Panic() : Panic(nullptr) {}
  ~Panic() override;
  explicit PROTOBUF_CONSTEXPR Panic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Panic(const Panic& from);
  Panic(Panic&& from) noexcept
    : Panic() {
    *this = ::std::move(from);
  }

  inline Panic& operator=(const Panic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Panic& operator=(Panic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Panic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Panic* internal_default_instance() {
    return reinterpret_cast<const Panic*>(
               &_Panic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Panic& a, Panic& b) {
    a.Swap(&b);
  }
  inline void Swap(Panic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Panic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Panic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Panic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Panic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Panic& from) {
    Panic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Panic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.Panic";
  }
  protected:
  explicit Panic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.Panic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ffi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FfiRequest

// .livekit.proto.DisposeRequest dispose = 2;
inline bool FfiRequest::_internal_has_dispose() const {
  return message_case() == kDispose;
}
inline bool FfiRequest::has_dispose() const {
  return _internal_has_dispose();
}
inline void FfiRequest::set_has_dispose() {
  _impl_._oneof_case_[0] = kDispose;
}
inline void FfiRequest::clear_dispose() {
  if (_internal_has_dispose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dispose_;
    }
    clear_has_message();
  }
}
inline ::livekit::proto::DisposeRequest* FfiRequest::release_dispose() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.dispose)
  if (_internal_has_dispose()) {
    clear_has_message();
    ::livekit::proto::DisposeRequest* temp = _impl_.message_.dispose_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dispose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::DisposeRequest& FfiRequest::_internal_dispose() const {
  return _internal_has_dispose()
      ? *_impl_.message_.dispose_
      : reinterpret_cast< ::livekit::proto::DisposeRequest&>(::livekit::proto::_DisposeRequest_default_instance_);
}
inline const ::livekit::proto::DisposeRequest& FfiRequest::dispose() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.dispose)
  return _internal_dispose();
}
inline ::livekit::proto::DisposeRequest* FfiRequest::unsafe_arena_release_dispose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.dispose)
  if (_internal_has_dispose()) {
    clear_has_message();
    ::livekit::proto::DisposeRequest* temp = _impl_.message_.dispose_;
    _impl_.message_.dispose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_dispose(::livekit::proto::DisposeRequest* dispose) {
  clear_message();
  if (dispose) {
    set_has_dispose();
    _impl_.message_.dispose_ = dispose;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.dispose)
}
inline ::livekit::proto::DisposeRequest* FfiRequest::_internal_mutable_dispose() {
  if (!_internal_has_dispose()) {
    clear_message();
    set_has_dispose();
    _impl_.message_.dispose_ = CreateMaybeMessage< ::livekit::proto::DisposeRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.dispose_;
}
inline ::livekit::proto::DisposeRequest* FfiRequest::mutable_dispose() {
  ::livekit::proto::DisposeRequest* _msg = _internal_mutable_dispose();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.dispose)
  return _msg;
}

// .livekit.proto.ConnectRequest connect = 3;
inline bool FfiRequest::_internal_has_connect() const {
  return message_case() == kConnect;
}
inline bool FfiRequest::has_connect() const {
  return _internal_has_connect();
}
inline void FfiRequest::set_has_connect() {
  _impl_._oneof_case_[0] = kConnect;
}
inline ::livekit::proto::ConnectRequest* FfiRequest::release_connect() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.connect)
  if (_internal_has_connect()) {
    clear_has_message();
    ::livekit::proto::ConnectRequest* temp = _impl_.message_.connect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ConnectRequest& FfiRequest::_internal_connect() const {
  return _internal_has_connect()
      ? *_impl_.message_.connect_
      : reinterpret_cast< ::livekit::proto::ConnectRequest&>(::livekit::proto::_ConnectRequest_default_instance_);
}
inline const ::livekit::proto::ConnectRequest& FfiRequest::connect() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.connect)
  return _internal_connect();
}
inline ::livekit::proto::ConnectRequest* FfiRequest::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.connect)
  if (_internal_has_connect()) {
    clear_has_message();
    ::livekit::proto::ConnectRequest* temp = _impl_.message_.connect_;
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_connect(::livekit::proto::ConnectRequest* connect) {
  clear_message();
  if (connect) {
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.connect)
}
inline ::livekit::proto::ConnectRequest* FfiRequest::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_message();
    set_has_connect();
    _impl_.message_.connect_ = CreateMaybeMessage< ::livekit::proto::ConnectRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.connect_;
}
inline ::livekit::proto::ConnectRequest* FfiRequest::mutable_connect() {
  ::livekit::proto::ConnectRequest* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.connect)
  return _msg;
}

// .livekit.proto.DisconnectRequest disconnect = 4;
inline bool FfiRequest::_internal_has_disconnect() const {
  return message_case() == kDisconnect;
}
inline bool FfiRequest::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void FfiRequest::set_has_disconnect() {
  _impl_._oneof_case_[0] = kDisconnect;
}
inline ::livekit::proto::DisconnectRequest* FfiRequest::release_disconnect() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_message();
    ::livekit::proto::DisconnectRequest* temp = _impl_.message_.disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::DisconnectRequest& FfiRequest::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *_impl_.message_.disconnect_
      : reinterpret_cast< ::livekit::proto::DisconnectRequest&>(::livekit::proto::_DisconnectRequest_default_instance_);
}
inline const ::livekit::proto::DisconnectRequest& FfiRequest::disconnect() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.disconnect)
  return _internal_disconnect();
}
inline ::livekit::proto::DisconnectRequest* FfiRequest::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_message();
    ::livekit::proto::DisconnectRequest* temp = _impl_.message_.disconnect_;
    _impl_.message_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_disconnect(::livekit::proto::DisconnectRequest* disconnect) {
  clear_message();
  if (disconnect) {
    set_has_disconnect();
    _impl_.message_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.disconnect)
}
inline ::livekit::proto::DisconnectRequest* FfiRequest::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_message();
    set_has_disconnect();
    _impl_.message_.disconnect_ = CreateMaybeMessage< ::livekit::proto::DisconnectRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.disconnect_;
}
inline ::livekit::proto::DisconnectRequest* FfiRequest::mutable_disconnect() {
  ::livekit::proto::DisconnectRequest* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.disconnect)
  return _msg;
}

// .livekit.proto.PublishTrackRequest publish_track = 5;
inline bool FfiRequest::_internal_has_publish_track() const {
  return message_case() == kPublishTrack;
}
inline bool FfiRequest::has_publish_track() const {
  return _internal_has_publish_track();
}
inline void FfiRequest::set_has_publish_track() {
  _impl_._oneof_case_[0] = kPublishTrack;
}
inline ::livekit::proto::PublishTrackRequest* FfiRequest::release_publish_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.publish_track)
  if (_internal_has_publish_track()) {
    clear_has_message();
    ::livekit::proto::PublishTrackRequest* temp = _impl_.message_.publish_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishTrackRequest& FfiRequest::_internal_publish_track() const {
  return _internal_has_publish_track()
      ? *_impl_.message_.publish_track_
      : reinterpret_cast< ::livekit::proto::PublishTrackRequest&>(::livekit::proto::_PublishTrackRequest_default_instance_);
}
inline const ::livekit::proto::PublishTrackRequest& FfiRequest::publish_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.publish_track)
  return _internal_publish_track();
}
inline ::livekit::proto::PublishTrackRequest* FfiRequest::unsafe_arena_release_publish_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.publish_track)
  if (_internal_has_publish_track()) {
    clear_has_message();
    ::livekit::proto::PublishTrackRequest* temp = _impl_.message_.publish_track_;
    _impl_.message_.publish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_publish_track(::livekit::proto::PublishTrackRequest* publish_track) {
  clear_message();
  if (publish_track) {
    set_has_publish_track();
    _impl_.message_.publish_track_ = publish_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.publish_track)
}
inline ::livekit::proto::PublishTrackRequest* FfiRequest::_internal_mutable_publish_track() {
  if (!_internal_has_publish_track()) {
    clear_message();
    set_has_publish_track();
    _impl_.message_.publish_track_ = CreateMaybeMessage< ::livekit::proto::PublishTrackRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_track_;
}
inline ::livekit::proto::PublishTrackRequest* FfiRequest::mutable_publish_track() {
  ::livekit::proto::PublishTrackRequest* _msg = _internal_mutable_publish_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.publish_track)
  return _msg;
}

// .livekit.proto.UnpublishTrackRequest unpublish_track = 6;
inline bool FfiRequest::_internal_has_unpublish_track() const {
  return message_case() == kUnpublishTrack;
}
inline bool FfiRequest::has_unpublish_track() const {
  return _internal_has_unpublish_track();
}
inline void FfiRequest::set_has_unpublish_track() {
  _impl_._oneof_case_[0] = kUnpublishTrack;
}
inline ::livekit::proto::UnpublishTrackRequest* FfiRequest::release_unpublish_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.unpublish_track)
  if (_internal_has_unpublish_track()) {
    clear_has_message();
    ::livekit::proto::UnpublishTrackRequest* temp = _impl_.message_.unpublish_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.unpublish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UnpublishTrackRequest& FfiRequest::_internal_unpublish_track() const {
  return _internal_has_unpublish_track()
      ? *_impl_.message_.unpublish_track_
      : reinterpret_cast< ::livekit::proto::UnpublishTrackRequest&>(::livekit::proto::_UnpublishTrackRequest_default_instance_);
}
inline const ::livekit::proto::UnpublishTrackRequest& FfiRequest::unpublish_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.unpublish_track)
  return _internal_unpublish_track();
}
inline ::livekit::proto::UnpublishTrackRequest* FfiRequest::unsafe_arena_release_unpublish_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.unpublish_track)
  if (_internal_has_unpublish_track()) {
    clear_has_message();
    ::livekit::proto::UnpublishTrackRequest* temp = _impl_.message_.unpublish_track_;
    _impl_.message_.unpublish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_unpublish_track(::livekit::proto::UnpublishTrackRequest* unpublish_track) {
  clear_message();
  if (unpublish_track) {
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = unpublish_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.unpublish_track)
}
inline ::livekit::proto::UnpublishTrackRequest* FfiRequest::_internal_mutable_unpublish_track() {
  if (!_internal_has_unpublish_track()) {
    clear_message();
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = CreateMaybeMessage< ::livekit::proto::UnpublishTrackRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.unpublish_track_;
}
inline ::livekit::proto::UnpublishTrackRequest* FfiRequest::mutable_unpublish_track() {
  ::livekit::proto::UnpublishTrackRequest* _msg = _internal_mutable_unpublish_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.unpublish_track)
  return _msg;
}

// .livekit.proto.PublishDataRequest publish_data = 7;
inline bool FfiRequest::_internal_has_publish_data() const {
  return message_case() == kPublishData;
}
inline bool FfiRequest::has_publish_data() const {
  return _internal_has_publish_data();
}
inline void FfiRequest::set_has_publish_data() {
  _impl_._oneof_case_[0] = kPublishData;
}
inline ::livekit::proto::PublishDataRequest* FfiRequest::release_publish_data() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.publish_data)
  if (_internal_has_publish_data()) {
    clear_has_message();
    ::livekit::proto::PublishDataRequest* temp = _impl_.message_.publish_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishDataRequest& FfiRequest::_internal_publish_data() const {
  return _internal_has_publish_data()
      ? *_impl_.message_.publish_data_
      : reinterpret_cast< ::livekit::proto::PublishDataRequest&>(::livekit::proto::_PublishDataRequest_default_instance_);
}
inline const ::livekit::proto::PublishDataRequest& FfiRequest::publish_data() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.publish_data)
  return _internal_publish_data();
}
inline ::livekit::proto::PublishDataRequest* FfiRequest::unsafe_arena_release_publish_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.publish_data)
  if (_internal_has_publish_data()) {
    clear_has_message();
    ::livekit::proto::PublishDataRequest* temp = _impl_.message_.publish_data_;
    _impl_.message_.publish_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_publish_data(::livekit::proto::PublishDataRequest* publish_data) {
  clear_message();
  if (publish_data) {
    set_has_publish_data();
    _impl_.message_.publish_data_ = publish_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.publish_data)
}
inline ::livekit::proto::PublishDataRequest* FfiRequest::_internal_mutable_publish_data() {
  if (!_internal_has_publish_data()) {
    clear_message();
    set_has_publish_data();
    _impl_.message_.publish_data_ = CreateMaybeMessage< ::livekit::proto::PublishDataRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_data_;
}
inline ::livekit::proto::PublishDataRequest* FfiRequest::mutable_publish_data() {
  ::livekit::proto::PublishDataRequest* _msg = _internal_mutable_publish_data();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.publish_data)
  return _msg;
}

// .livekit.proto.SetSubscribedRequest set_subscribed = 8;
inline bool FfiRequest::_internal_has_set_subscribed() const {
  return message_case() == kSetSubscribed;
}
inline bool FfiRequest::has_set_subscribed() const {
  return _internal_has_set_subscribed();
}
inline void FfiRequest::set_has_set_subscribed() {
  _impl_._oneof_case_[0] = kSetSubscribed;
}
inline ::livekit::proto::SetSubscribedRequest* FfiRequest::release_set_subscribed() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.set_subscribed)
  if (_internal_has_set_subscribed()) {
    clear_has_message();
    ::livekit::proto::SetSubscribedRequest* temp = _impl_.message_.set_subscribed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_subscribed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetSubscribedRequest& FfiRequest::_internal_set_subscribed() const {
  return _internal_has_set_subscribed()
      ? *_impl_.message_.set_subscribed_
      : reinterpret_cast< ::livekit::proto::SetSubscribedRequest&>(::livekit::proto::_SetSubscribedRequest_default_instance_);
}
inline const ::livekit::proto::SetSubscribedRequest& FfiRequest::set_subscribed() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.set_subscribed)
  return _internal_set_subscribed();
}
inline ::livekit::proto::SetSubscribedRequest* FfiRequest::unsafe_arena_release_set_subscribed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.set_subscribed)
  if (_internal_has_set_subscribed()) {
    clear_has_message();
    ::livekit::proto::SetSubscribedRequest* temp = _impl_.message_.set_subscribed_;
    _impl_.message_.set_subscribed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_set_subscribed(::livekit::proto::SetSubscribedRequest* set_subscribed) {
  clear_message();
  if (set_subscribed) {
    set_has_set_subscribed();
    _impl_.message_.set_subscribed_ = set_subscribed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.set_subscribed)
}
inline ::livekit::proto::SetSubscribedRequest* FfiRequest::_internal_mutable_set_subscribed() {
  if (!_internal_has_set_subscribed()) {
    clear_message();
    set_has_set_subscribed();
    _impl_.message_.set_subscribed_ = CreateMaybeMessage< ::livekit::proto::SetSubscribedRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.set_subscribed_;
}
inline ::livekit::proto::SetSubscribedRequest* FfiRequest::mutable_set_subscribed() {
  ::livekit::proto::SetSubscribedRequest* _msg = _internal_mutable_set_subscribed();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.set_subscribed)
  return _msg;
}

// .livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
inline bool FfiRequest::_internal_has_set_local_metadata() const {
  return message_case() == kSetLocalMetadata;
}
inline bool FfiRequest::has_set_local_metadata() const {
  return _internal_has_set_local_metadata();
}
inline void FfiRequest::set_has_set_local_metadata() {
  _impl_._oneof_case_[0] = kSetLocalMetadata;
}
inline ::livekit::proto::SetLocalMetadataRequest* FfiRequest::release_set_local_metadata() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.set_local_metadata)
  if (_internal_has_set_local_metadata()) {
    clear_has_message();
    ::livekit::proto::SetLocalMetadataRequest* temp = _impl_.message_.set_local_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalMetadataRequest& FfiRequest::_internal_set_local_metadata() const {
  return _internal_has_set_local_metadata()
      ? *_impl_.message_.set_local_metadata_
      : reinterpret_cast< ::livekit::proto::SetLocalMetadataRequest&>(::livekit::proto::_SetLocalMetadataRequest_default_instance_);
}
inline const ::livekit::proto::SetLocalMetadataRequest& FfiRequest::set_local_metadata() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.set_local_metadata)
  return _internal_set_local_metadata();
}
inline ::livekit::proto::SetLocalMetadataRequest* FfiRequest::unsafe_arena_release_set_local_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.set_local_metadata)
  if (_internal_has_set_local_metadata()) {
    clear_has_message();
    ::livekit::proto::SetLocalMetadataRequest* temp = _impl_.message_.set_local_metadata_;
    _impl_.message_.set_local_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataRequest* set_local_metadata) {
  clear_message();
  if (set_local_metadata) {
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = set_local_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.set_local_metadata)
}
inline ::livekit::proto::SetLocalMetadataRequest* FfiRequest::_internal_mutable_set_local_metadata() {
  if (!_internal_has_set_local_metadata()) {
    clear_message();
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = CreateMaybeMessage< ::livekit::proto::SetLocalMetadataRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_metadata_;
}
inline ::livekit::proto::SetLocalMetadataRequest* FfiRequest::mutable_set_local_metadata() {
  ::livekit::proto::SetLocalMetadataRequest* _msg = _internal_mutable_set_local_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.set_local_metadata)
  return _msg;
}

// .livekit.proto.SetLocalNameRequest set_local_name = 10;
inline bool FfiRequest::_internal_has_set_local_name() const {
  return message_case() == kSetLocalName;
}
inline bool FfiRequest::has_set_local_name() const {
  return _internal_has_set_local_name();
}
inline void FfiRequest::set_has_set_local_name() {
  _impl_._oneof_case_[0] = kSetLocalName;
}
inline ::livekit::proto::SetLocalNameRequest* FfiRequest::release_set_local_name() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.set_local_name)
  if (_internal_has_set_local_name()) {
    clear_has_message();
    ::livekit::proto::SetLocalNameRequest* temp = _impl_.message_.set_local_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalNameRequest& FfiRequest::_internal_set_local_name() const {
  return _internal_has_set_local_name()
      ? *_impl_.message_.set_local_name_
      : reinterpret_cast< ::livekit::proto::SetLocalNameRequest&>(::livekit::proto::_SetLocalNameRequest_default_instance_);
}
inline const ::livekit::proto::SetLocalNameRequest& FfiRequest::set_local_name() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.set_local_name)
  return _internal_set_local_name();
}
inline ::livekit::proto::SetLocalNameRequest* FfiRequest::unsafe_arena_release_set_local_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.set_local_name)
  if (_internal_has_set_local_name()) {
    clear_has_message();
    ::livekit::proto::SetLocalNameRequest* temp = _impl_.message_.set_local_name_;
    _impl_.message_.set_local_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_set_local_name(::livekit::proto::SetLocalNameRequest* set_local_name) {
  clear_message();
  if (set_local_name) {
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = set_local_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.set_local_name)
}
inline ::livekit::proto::SetLocalNameRequest* FfiRequest::_internal_mutable_set_local_name() {
  if (!_internal_has_set_local_name()) {
    clear_message();
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = CreateMaybeMessage< ::livekit::proto::SetLocalNameRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_name_;
}
inline ::livekit::proto::SetLocalNameRequest* FfiRequest::mutable_set_local_name() {
  ::livekit::proto::SetLocalNameRequest* _msg = _internal_mutable_set_local_name();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.set_local_name)
  return _msg;
}

// .livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
inline bool FfiRequest::_internal_has_set_local_attributes() const {
  return message_case() == kSetLocalAttributes;
}
inline bool FfiRequest::has_set_local_attributes() const {
  return _internal_has_set_local_attributes();
}
inline void FfiRequest::set_has_set_local_attributes() {
  _impl_._oneof_case_[0] = kSetLocalAttributes;
}
inline ::livekit::proto::SetLocalAttributesRequest* FfiRequest::release_set_local_attributes() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.set_local_attributes)
  if (_internal_has_set_local_attributes()) {
    clear_has_message();
    ::livekit::proto::SetLocalAttributesRequest* temp = _impl_.message_.set_local_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalAttributesRequest& FfiRequest::_internal_set_local_attributes() const {
  return _internal_has_set_local_attributes()
      ? *_impl_.message_.set_local_attributes_
      : reinterpret_cast< ::livekit::proto::SetLocalAttributesRequest&>(::livekit::proto::_SetLocalAttributesRequest_default_instance_);
}
inline const ::livekit::proto::SetLocalAttributesRequest& FfiRequest::set_local_attributes() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.set_local_attributes)
  return _internal_set_local_attributes();
}
inline ::livekit::proto::SetLocalAttributesRequest* FfiRequest::unsafe_arena_release_set_local_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.set_local_attributes)
  if (_internal_has_set_local_attributes()) {
    clear_has_message();
    ::livekit::proto::SetLocalAttributesRequest* temp = _impl_.message_.set_local_attributes_;
    _impl_.message_.set_local_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesRequest* set_local_attributes) {
  clear_message();
  if (set_local_attributes) {
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = set_local_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.set_local_attributes)
}
inline ::livekit::proto::SetLocalAttributesRequest* FfiRequest::_internal_mutable_set_local_attributes() {
  if (!_internal_has_set_local_attributes()) {
    clear_message();
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = CreateMaybeMessage< ::livekit::proto::SetLocalAttributesRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_attributes_;
}
inline ::livekit::proto::SetLocalAttributesRequest* FfiRequest::mutable_set_local_attributes() {
  ::livekit::proto::SetLocalAttributesRequest* _msg = _internal_mutable_set_local_attributes();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.set_local_attributes)
  return _msg;
}

// .livekit.proto.GetSessionStatsRequest get_session_stats = 12;
inline bool FfiRequest::_internal_has_get_session_stats() const {
  return message_case() == kGetSessionStats;
}
inline bool FfiRequest::has_get_session_stats() const {
  return _internal_has_get_session_stats();
}
inline void FfiRequest::set_has_get_session_stats() {
  _impl_._oneof_case_[0] = kGetSessionStats;
}
inline ::livekit::proto::GetSessionStatsRequest* FfiRequest::release_get_session_stats() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.get_session_stats)
  if (_internal_has_get_session_stats()) {
    clear_has_message();
    ::livekit::proto::GetSessionStatsRequest* temp = _impl_.message_.get_session_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.get_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::GetSessionStatsRequest& FfiRequest::_internal_get_session_stats() const {
  return _internal_has_get_session_stats()
      ? *_impl_.message_.get_session_stats_
      : reinterpret_cast< ::livekit::proto::GetSessionStatsRequest&>(::livekit::proto::_GetSessionStatsRequest_default_instance_);
}
inline const ::livekit::proto::GetSessionStatsRequest& FfiRequest::get_session_stats() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.get_session_stats)
  return _internal_get_session_stats();
}
inline ::livekit::proto::GetSessionStatsRequest* FfiRequest::unsafe_arena_release_get_session_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.get_session_stats)
  if (_internal_has_get_session_stats()) {
    clear_has_message();
    ::livekit::proto::GetSessionStatsRequest* temp = _impl_.message_.get_session_stats_;
    _impl_.message_.get_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_get_session_stats(::livekit::proto::GetSessionStatsRequest* get_session_stats) {
  clear_message();
  if (get_session_stats) {
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = get_session_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.get_session_stats)
}
inline ::livekit::proto::GetSessionStatsRequest* FfiRequest::_internal_mutable_get_session_stats() {
  if (!_internal_has_get_session_stats()) {
    clear_message();
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = CreateMaybeMessage< ::livekit::proto::GetSessionStatsRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.get_session_stats_;
}
inline ::livekit::proto::GetSessionStatsRequest* FfiRequest::mutable_get_session_stats() {
  ::livekit::proto::GetSessionStatsRequest* _msg = _internal_mutable_get_session_stats();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.get_session_stats)
  return _msg;
}

// .livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
inline bool FfiRequest::_internal_has_publish_transcription() const {
  return message_case() == kPublishTranscription;
}
inline bool FfiRequest::has_publish_transcription() const {
  return _internal_has_publish_transcription();
}
inline void FfiRequest::set_has_publish_transcription() {
  _impl_._oneof_case_[0] = kPublishTranscription;
}
inline ::livekit::proto::PublishTranscriptionRequest* FfiRequest::release_publish_transcription() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.publish_transcription)
  if (_internal_has_publish_transcription()) {
    clear_has_message();
    ::livekit::proto::PublishTranscriptionRequest* temp = _impl_.message_.publish_transcription_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishTranscriptionRequest& FfiRequest::_internal_publish_transcription() const {
  return _internal_has_publish_transcription()
      ? *_impl_.message_.publish_transcription_
      : reinterpret_cast< ::livekit::proto::PublishTranscriptionRequest&>(::livekit::proto::_PublishTranscriptionRequest_default_instance_);
}
inline const ::livekit::proto::PublishTranscriptionRequest& FfiRequest::publish_transcription() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.publish_transcription)
  return _internal_publish_transcription();
}
inline ::livekit::proto::PublishTranscriptionRequest* FfiRequest::unsafe_arena_release_publish_transcription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.publish_transcription)
  if (_internal_has_publish_transcription()) {
    clear_has_message();
    ::livekit::proto::PublishTranscriptionRequest* temp = _impl_.message_.publish_transcription_;
    _impl_.message_.publish_transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionRequest* publish_transcription) {
  clear_message();
  if (publish_transcription) {
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = publish_transcription;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.publish_transcription)
}
inline ::livekit::proto::PublishTranscriptionRequest* FfiRequest::_internal_mutable_publish_transcription() {
  if (!_internal_has_publish_transcription()) {
    clear_message();
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = CreateMaybeMessage< ::livekit::proto::PublishTranscriptionRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_transcription_;
}
inline ::livekit::proto::PublishTranscriptionRequest* FfiRequest::mutable_publish_transcription() {
  ::livekit::proto::PublishTranscriptionRequest* _msg = _internal_mutable_publish_transcription();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.publish_transcription)
  return _msg;
}

// .livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
inline bool FfiRequest::_internal_has_publish_sip_dtmf() const {
  return message_case() == kPublishSipDtmf;
}
inline bool FfiRequest::has_publish_sip_dtmf() const {
  return _internal_has_publish_sip_dtmf();
}
inline void FfiRequest::set_has_publish_sip_dtmf() {
  _impl_._oneof_case_[0] = kPublishSipDtmf;
}
inline ::livekit::proto::PublishSipDtmfRequest* FfiRequest::release_publish_sip_dtmf() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.publish_sip_dtmf)
  if (_internal_has_publish_sip_dtmf()) {
    clear_has_message();
    ::livekit::proto::PublishSipDtmfRequest* temp = _impl_.message_.publish_sip_dtmf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishSipDtmfRequest& FfiRequest::_internal_publish_sip_dtmf() const {
  return _internal_has_publish_sip_dtmf()
      ? *_impl_.message_.publish_sip_dtmf_
      : reinterpret_cast< ::livekit::proto::PublishSipDtmfRequest&>(::livekit::proto::_PublishSipDtmfRequest_default_instance_);
}
inline const ::livekit::proto::PublishSipDtmfRequest& FfiRequest::publish_sip_dtmf() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.publish_sip_dtmf)
  return _internal_publish_sip_dtmf();
}
inline ::livekit::proto::PublishSipDtmfRequest* FfiRequest::unsafe_arena_release_publish_sip_dtmf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.publish_sip_dtmf)
  if (_internal_has_publish_sip_dtmf()) {
    clear_has_message();
    ::livekit::proto::PublishSipDtmfRequest* temp = _impl_.message_.publish_sip_dtmf_;
    _impl_.message_.publish_sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfRequest* publish_sip_dtmf) {
  clear_message();
  if (publish_sip_dtmf) {
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = publish_sip_dtmf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.publish_sip_dtmf)
}
inline ::livekit::proto::PublishSipDtmfRequest* FfiRequest::_internal_mutable_publish_sip_dtmf() {
  if (!_internal_has_publish_sip_dtmf()) {
    clear_message();
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = CreateMaybeMessage< ::livekit::proto::PublishSipDtmfRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_sip_dtmf_;
}
inline ::livekit::proto::PublishSipDtmfRequest* FfiRequest::mutable_publish_sip_dtmf() {
  ::livekit::proto::PublishSipDtmfRequest* _msg = _internal_mutable_publish_sip_dtmf();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.publish_sip_dtmf)
  return _msg;
}

// .livekit.proto.CreateVideoTrackRequest create_video_track = 15;
inline bool FfiRequest::_internal_has_create_video_track() const {
  return message_case() == kCreateVideoTrack;
}
inline bool FfiRequest::has_create_video_track() const {
  return _internal_has_create_video_track();
}
inline void FfiRequest::set_has_create_video_track() {
  _impl_._oneof_case_[0] = kCreateVideoTrack;
}
inline ::livekit::proto::CreateVideoTrackRequest* FfiRequest::release_create_video_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.create_video_track)
  if (_internal_has_create_video_track()) {
    clear_has_message();
    ::livekit::proto::CreateVideoTrackRequest* temp = _impl_.message_.create_video_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.create_video_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CreateVideoTrackRequest& FfiRequest::_internal_create_video_track() const {
  return _internal_has_create_video_track()
      ? *_impl_.message_.create_video_track_
      : reinterpret_cast< ::livekit::proto::CreateVideoTrackRequest&>(::livekit::proto::_CreateVideoTrackRequest_default_instance_);
}
inline const ::livekit::proto::CreateVideoTrackRequest& FfiRequest::create_video_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.create_video_track)
  return _internal_create_video_track();
}
inline ::livekit::proto::CreateVideoTrackRequest* FfiRequest::unsafe_arena_release_create_video_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.create_video_track)
  if (_internal_has_create_video_track()) {
    clear_has_message();
    ::livekit::proto::CreateVideoTrackRequest* temp = _impl_.message_.create_video_track_;
    _impl_.message_.create_video_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_create_video_track(::livekit::proto::CreateVideoTrackRequest* create_video_track) {
  clear_message();
  if (create_video_track) {
    set_has_create_video_track();
    _impl_.message_.create_video_track_ = create_video_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.create_video_track)
}
inline ::livekit::proto::CreateVideoTrackRequest* FfiRequest::_internal_mutable_create_video_track() {
  if (!_internal_has_create_video_track()) {
    clear_message();
    set_has_create_video_track();
    _impl_.message_.create_video_track_ = CreateMaybeMessage< ::livekit::proto::CreateVideoTrackRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.create_video_track_;
}
inline ::livekit::proto::CreateVideoTrackRequest* FfiRequest::mutable_create_video_track() {
  ::livekit::proto::CreateVideoTrackRequest* _msg = _internal_mutable_create_video_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.create_video_track)
  return _msg;
}

// .livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
inline bool FfiRequest::_internal_has_create_audio_track() const {
  return message_case() == kCreateAudioTrack;
}
inline bool FfiRequest::has_create_audio_track() const {
  return _internal_has_create_audio_track();
}
inline void FfiRequest::set_has_create_audio_track() {
  _impl_._oneof_case_[0] = kCreateAudioTrack;
}
inline ::livekit::proto::CreateAudioTrackRequest* FfiRequest::release_create_audio_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.create_audio_track)
  if (_internal_has_create_audio_track()) {
    clear_has_message();
    ::livekit::proto::CreateAudioTrackRequest* temp = _impl_.message_.create_audio_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.create_audio_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CreateAudioTrackRequest& FfiRequest::_internal_create_audio_track() const {
  return _internal_has_create_audio_track()
      ? *_impl_.message_.create_audio_track_
      : reinterpret_cast< ::livekit::proto::CreateAudioTrackRequest&>(::livekit::proto::_CreateAudioTrackRequest_default_instance_);
}
inline const ::livekit::proto::CreateAudioTrackRequest& FfiRequest::create_audio_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.create_audio_track)
  return _internal_create_audio_track();
}
inline ::livekit::proto::CreateAudioTrackRequest* FfiRequest::unsafe_arena_release_create_audio_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.create_audio_track)
  if (_internal_has_create_audio_track()) {
    clear_has_message();
    ::livekit::proto::CreateAudioTrackRequest* temp = _impl_.message_.create_audio_track_;
    _impl_.message_.create_audio_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_create_audio_track(::livekit::proto::CreateAudioTrackRequest* create_audio_track) {
  clear_message();
  if (create_audio_track) {
    set_has_create_audio_track();
    _impl_.message_.create_audio_track_ = create_audio_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.create_audio_track)
}
inline ::livekit::proto::CreateAudioTrackRequest* FfiRequest::_internal_mutable_create_audio_track() {
  if (!_internal_has_create_audio_track()) {
    clear_message();
    set_has_create_audio_track();
    _impl_.message_.create_audio_track_ = CreateMaybeMessage< ::livekit::proto::CreateAudioTrackRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.create_audio_track_;
}
inline ::livekit::proto::CreateAudioTrackRequest* FfiRequest::mutable_create_audio_track() {
  ::livekit::proto::CreateAudioTrackRequest* _msg = _internal_mutable_create_audio_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.create_audio_track)
  return _msg;
}

// .livekit.proto.LocalTrackMuteRequest local_track_mute = 17;
inline bool FfiRequest::_internal_has_local_track_mute() const {
  return message_case() == kLocalTrackMute;
}
inline bool FfiRequest::has_local_track_mute() const {
  return _internal_has_local_track_mute();
}
inline void FfiRequest::set_has_local_track_mute() {
  _impl_._oneof_case_[0] = kLocalTrackMute;
}
inline ::livekit::proto::LocalTrackMuteRequest* FfiRequest::release_local_track_mute() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.local_track_mute)
  if (_internal_has_local_track_mute()) {
    clear_has_message();
    ::livekit::proto::LocalTrackMuteRequest* temp = _impl_.message_.local_track_mute_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.local_track_mute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::LocalTrackMuteRequest& FfiRequest::_internal_local_track_mute() const {
  return _internal_has_local_track_mute()
      ? *_impl_.message_.local_track_mute_
      : reinterpret_cast< ::livekit::proto::LocalTrackMuteRequest&>(::livekit::proto::_LocalTrackMuteRequest_default_instance_);
}
inline const ::livekit::proto::LocalTrackMuteRequest& FfiRequest::local_track_mute() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.local_track_mute)
  return _internal_local_track_mute();
}
inline ::livekit::proto::LocalTrackMuteRequest* FfiRequest::unsafe_arena_release_local_track_mute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.local_track_mute)
  if (_internal_has_local_track_mute()) {
    clear_has_message();
    ::livekit::proto::LocalTrackMuteRequest* temp = _impl_.message_.local_track_mute_;
    _impl_.message_.local_track_mute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_local_track_mute(::livekit::proto::LocalTrackMuteRequest* local_track_mute) {
  clear_message();
  if (local_track_mute) {
    set_has_local_track_mute();
    _impl_.message_.local_track_mute_ = local_track_mute;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.local_track_mute)
}
inline ::livekit::proto::LocalTrackMuteRequest* FfiRequest::_internal_mutable_local_track_mute() {
  if (!_internal_has_local_track_mute()) {
    clear_message();
    set_has_local_track_mute();
    _impl_.message_.local_track_mute_ = CreateMaybeMessage< ::livekit::proto::LocalTrackMuteRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.local_track_mute_;
}
inline ::livekit::proto::LocalTrackMuteRequest* FfiRequest::mutable_local_track_mute() {
  ::livekit::proto::LocalTrackMuteRequest* _msg = _internal_mutable_local_track_mute();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.local_track_mute)
  return _msg;
}

// .livekit.proto.EnableRemoteTrackRequest enable_remote_track = 18;
inline bool FfiRequest::_internal_has_enable_remote_track() const {
  return message_case() == kEnableRemoteTrack;
}
inline bool FfiRequest::has_enable_remote_track() const {
  return _internal_has_enable_remote_track();
}
inline void FfiRequest::set_has_enable_remote_track() {
  _impl_._oneof_case_[0] = kEnableRemoteTrack;
}
inline ::livekit::proto::EnableRemoteTrackRequest* FfiRequest::release_enable_remote_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.enable_remote_track)
  if (_internal_has_enable_remote_track()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackRequest* temp = _impl_.message_.enable_remote_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.enable_remote_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::EnableRemoteTrackRequest& FfiRequest::_internal_enable_remote_track() const {
  return _internal_has_enable_remote_track()
      ? *_impl_.message_.enable_remote_track_
      : reinterpret_cast< ::livekit::proto::EnableRemoteTrackRequest&>(::livekit::proto::_EnableRemoteTrackRequest_default_instance_);
}
inline const ::livekit::proto::EnableRemoteTrackRequest& FfiRequest::enable_remote_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.enable_remote_track)
  return _internal_enable_remote_track();
}
inline ::livekit::proto::EnableRemoteTrackRequest* FfiRequest::unsafe_arena_release_enable_remote_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.enable_remote_track)
  if (_internal_has_enable_remote_track()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackRequest* temp = _impl_.message_.enable_remote_track_;
    _impl_.message_.enable_remote_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_enable_remote_track(::livekit::proto::EnableRemoteTrackRequest* enable_remote_track) {
  clear_message();
  if (enable_remote_track) {
    set_has_enable_remote_track();
    _impl_.message_.enable_remote_track_ = enable_remote_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.enable_remote_track)
}
inline ::livekit::proto::EnableRemoteTrackRequest* FfiRequest::_internal_mutable_enable_remote_track() {
  if (!_internal_has_enable_remote_track()) {
    clear_message();
    set_has_enable_remote_track();
    _impl_.message_.enable_remote_track_ = CreateMaybeMessage< ::livekit::proto::EnableRemoteTrackRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.enable_remote_track_;
}
inline ::livekit::proto::EnableRemoteTrackRequest* FfiRequest::mutable_enable_remote_track() {
  ::livekit::proto::EnableRemoteTrackRequest* _msg = _internal_mutable_enable_remote_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.enable_remote_track)
  return _msg;
}

// .livekit.proto.GetStatsRequest get_stats = 19;
inline bool FfiRequest::_internal_has_get_stats() const {
  return message_case() == kGetStats;
}
inline bool FfiRequest::has_get_stats() const {
  return _internal_has_get_stats();
}
inline void FfiRequest::set_has_get_stats() {
  _impl_._oneof_case_[0] = kGetStats;
}
inline ::livekit::proto::GetStatsRequest* FfiRequest::release_get_stats() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.get_stats)
  if (_internal_has_get_stats()) {
    clear_has_message();
    ::livekit::proto::GetStatsRequest* temp = _impl_.message_.get_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.get_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::GetStatsRequest& FfiRequest::_internal_get_stats() const {
  return _internal_has_get_stats()
      ? *_impl_.message_.get_stats_
      : reinterpret_cast< ::livekit::proto::GetStatsRequest&>(::livekit::proto::_GetStatsRequest_default_instance_);
}
inline const ::livekit::proto::GetStatsRequest& FfiRequest::get_stats() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.get_stats)
  return _internal_get_stats();
}
inline ::livekit::proto::GetStatsRequest* FfiRequest::unsafe_arena_release_get_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.get_stats)
  if (_internal_has_get_stats()) {
    clear_has_message();
    ::livekit::proto::GetStatsRequest* temp = _impl_.message_.get_stats_;
    _impl_.message_.get_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_get_stats(::livekit::proto::GetStatsRequest* get_stats) {
  clear_message();
  if (get_stats) {
    set_has_get_stats();
    _impl_.message_.get_stats_ = get_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.get_stats)
}
inline ::livekit::proto::GetStatsRequest* FfiRequest::_internal_mutable_get_stats() {
  if (!_internal_has_get_stats()) {
    clear_message();
    set_has_get_stats();
    _impl_.message_.get_stats_ = CreateMaybeMessage< ::livekit::proto::GetStatsRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.get_stats_;
}
inline ::livekit::proto::GetStatsRequest* FfiRequest::mutable_get_stats() {
  ::livekit::proto::GetStatsRequest* _msg = _internal_mutable_get_stats();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.get_stats)
  return _msg;
}

// .livekit.proto.SetTrackSubscriptionPermissionsRequest set_track_subscription_permissions = 48;
inline bool FfiRequest::_internal_has_set_track_subscription_permissions() const {
  return message_case() == kSetTrackSubscriptionPermissions;
}
inline bool FfiRequest::has_set_track_subscription_permissions() const {
  return _internal_has_set_track_subscription_permissions();
}
inline void FfiRequest::set_has_set_track_subscription_permissions() {
  _impl_._oneof_case_[0] = kSetTrackSubscriptionPermissions;
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsRequest* FfiRequest::release_set_track_subscription_permissions() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.set_track_subscription_permissions)
  if (_internal_has_set_track_subscription_permissions()) {
    clear_has_message();
    ::livekit::proto::SetTrackSubscriptionPermissionsRequest* temp = _impl_.message_.set_track_subscription_permissions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_track_subscription_permissions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetTrackSubscriptionPermissionsRequest& FfiRequest::_internal_set_track_subscription_permissions() const {
  return _internal_has_set_track_subscription_permissions()
      ? *_impl_.message_.set_track_subscription_permissions_
      : reinterpret_cast< ::livekit::proto::SetTrackSubscriptionPermissionsRequest&>(::livekit::proto::_SetTrackSubscriptionPermissionsRequest_default_instance_);
}
inline const ::livekit::proto::SetTrackSubscriptionPermissionsRequest& FfiRequest::set_track_subscription_permissions() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.set_track_subscription_permissions)
  return _internal_set_track_subscription_permissions();
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsRequest* FfiRequest::unsafe_arena_release_set_track_subscription_permissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.set_track_subscription_permissions)
  if (_internal_has_set_track_subscription_permissions()) {
    clear_has_message();
    ::livekit::proto::SetTrackSubscriptionPermissionsRequest* temp = _impl_.message_.set_track_subscription_permissions_;
    _impl_.message_.set_track_subscription_permissions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_set_track_subscription_permissions(::livekit::proto::SetTrackSubscriptionPermissionsRequest* set_track_subscription_permissions) {
  clear_message();
  if (set_track_subscription_permissions) {
    set_has_set_track_subscription_permissions();
    _impl_.message_.set_track_subscription_permissions_ = set_track_subscription_permissions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.set_track_subscription_permissions)
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsRequest* FfiRequest::_internal_mutable_set_track_subscription_permissions() {
  if (!_internal_has_set_track_subscription_permissions()) {
    clear_message();
    set_has_set_track_subscription_permissions();
    _impl_.message_.set_track_subscription_permissions_ = CreateMaybeMessage< ::livekit::proto::SetTrackSubscriptionPermissionsRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.set_track_subscription_permissions_;
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsRequest* FfiRequest::mutable_set_track_subscription_permissions() {
  ::livekit::proto::SetTrackSubscriptionPermissionsRequest* _msg = _internal_mutable_set_track_subscription_permissions();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.set_track_subscription_permissions)
  return _msg;
}

// .livekit.proto.NewVideoStreamRequest new_video_stream = 20;
inline bool FfiRequest::_internal_has_new_video_stream() const {
  return message_case() == kNewVideoStream;
}
inline bool FfiRequest::has_new_video_stream() const {
  return _internal_has_new_video_stream();
}
inline void FfiRequest::set_has_new_video_stream() {
  _impl_._oneof_case_[0] = kNewVideoStream;
}
inline ::livekit::proto::NewVideoStreamRequest* FfiRequest::release_new_video_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_video_stream)
  if (_internal_has_new_video_stream()) {
    clear_has_message();
    ::livekit::proto::NewVideoStreamRequest* temp = _impl_.message_.new_video_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_video_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewVideoStreamRequest& FfiRequest::_internal_new_video_stream() const {
  return _internal_has_new_video_stream()
      ? *_impl_.message_.new_video_stream_
      : reinterpret_cast< ::livekit::proto::NewVideoStreamRequest&>(::livekit::proto::_NewVideoStreamRequest_default_instance_);
}
inline const ::livekit::proto::NewVideoStreamRequest& FfiRequest::new_video_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_video_stream)
  return _internal_new_video_stream();
}
inline ::livekit::proto::NewVideoStreamRequest* FfiRequest::unsafe_arena_release_new_video_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_video_stream)
  if (_internal_has_new_video_stream()) {
    clear_has_message();
    ::livekit::proto::NewVideoStreamRequest* temp = _impl_.message_.new_video_stream_;
    _impl_.message_.new_video_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_video_stream(::livekit::proto::NewVideoStreamRequest* new_video_stream) {
  clear_message();
  if (new_video_stream) {
    set_has_new_video_stream();
    _impl_.message_.new_video_stream_ = new_video_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_video_stream)
}
inline ::livekit::proto::NewVideoStreamRequest* FfiRequest::_internal_mutable_new_video_stream() {
  if (!_internal_has_new_video_stream()) {
    clear_message();
    set_has_new_video_stream();
    _impl_.message_.new_video_stream_ = CreateMaybeMessage< ::livekit::proto::NewVideoStreamRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_video_stream_;
}
inline ::livekit::proto::NewVideoStreamRequest* FfiRequest::mutable_new_video_stream() {
  ::livekit::proto::NewVideoStreamRequest* _msg = _internal_mutable_new_video_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_video_stream)
  return _msg;
}

// .livekit.proto.NewVideoSourceRequest new_video_source = 21;
inline bool FfiRequest::_internal_has_new_video_source() const {
  return message_case() == kNewVideoSource;
}
inline bool FfiRequest::has_new_video_source() const {
  return _internal_has_new_video_source();
}
inline void FfiRequest::set_has_new_video_source() {
  _impl_._oneof_case_[0] = kNewVideoSource;
}
inline ::livekit::proto::NewVideoSourceRequest* FfiRequest::release_new_video_source() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_video_source)
  if (_internal_has_new_video_source()) {
    clear_has_message();
    ::livekit::proto::NewVideoSourceRequest* temp = _impl_.message_.new_video_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_video_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewVideoSourceRequest& FfiRequest::_internal_new_video_source() const {
  return _internal_has_new_video_source()
      ? *_impl_.message_.new_video_source_
      : reinterpret_cast< ::livekit::proto::NewVideoSourceRequest&>(::livekit::proto::_NewVideoSourceRequest_default_instance_);
}
inline const ::livekit::proto::NewVideoSourceRequest& FfiRequest::new_video_source() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_video_source)
  return _internal_new_video_source();
}
inline ::livekit::proto::NewVideoSourceRequest* FfiRequest::unsafe_arena_release_new_video_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_video_source)
  if (_internal_has_new_video_source()) {
    clear_has_message();
    ::livekit::proto::NewVideoSourceRequest* temp = _impl_.message_.new_video_source_;
    _impl_.message_.new_video_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_video_source(::livekit::proto::NewVideoSourceRequest* new_video_source) {
  clear_message();
  if (new_video_source) {
    set_has_new_video_source();
    _impl_.message_.new_video_source_ = new_video_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_video_source)
}
inline ::livekit::proto::NewVideoSourceRequest* FfiRequest::_internal_mutable_new_video_source() {
  if (!_internal_has_new_video_source()) {
    clear_message();
    set_has_new_video_source();
    _impl_.message_.new_video_source_ = CreateMaybeMessage< ::livekit::proto::NewVideoSourceRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_video_source_;
}
inline ::livekit::proto::NewVideoSourceRequest* FfiRequest::mutable_new_video_source() {
  ::livekit::proto::NewVideoSourceRequest* _msg = _internal_mutable_new_video_source();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_video_source)
  return _msg;
}

// .livekit.proto.CaptureVideoFrameRequest capture_video_frame = 22;
inline bool FfiRequest::_internal_has_capture_video_frame() const {
  return message_case() == kCaptureVideoFrame;
}
inline bool FfiRequest::has_capture_video_frame() const {
  return _internal_has_capture_video_frame();
}
inline void FfiRequest::set_has_capture_video_frame() {
  _impl_._oneof_case_[0] = kCaptureVideoFrame;
}
inline ::livekit::proto::CaptureVideoFrameRequest* FfiRequest::release_capture_video_frame() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.capture_video_frame)
  if (_internal_has_capture_video_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureVideoFrameRequest* temp = _impl_.message_.capture_video_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.capture_video_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CaptureVideoFrameRequest& FfiRequest::_internal_capture_video_frame() const {
  return _internal_has_capture_video_frame()
      ? *_impl_.message_.capture_video_frame_
      : reinterpret_cast< ::livekit::proto::CaptureVideoFrameRequest&>(::livekit::proto::_CaptureVideoFrameRequest_default_instance_);
}
inline const ::livekit::proto::CaptureVideoFrameRequest& FfiRequest::capture_video_frame() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.capture_video_frame)
  return _internal_capture_video_frame();
}
inline ::livekit::proto::CaptureVideoFrameRequest* FfiRequest::unsafe_arena_release_capture_video_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.capture_video_frame)
  if (_internal_has_capture_video_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureVideoFrameRequest* temp = _impl_.message_.capture_video_frame_;
    _impl_.message_.capture_video_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_capture_video_frame(::livekit::proto::CaptureVideoFrameRequest* capture_video_frame) {
  clear_message();
  if (capture_video_frame) {
    set_has_capture_video_frame();
    _impl_.message_.capture_video_frame_ = capture_video_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.capture_video_frame)
}
inline ::livekit::proto::CaptureVideoFrameRequest* FfiRequest::_internal_mutable_capture_video_frame() {
  if (!_internal_has_capture_video_frame()) {
    clear_message();
    set_has_capture_video_frame();
    _impl_.message_.capture_video_frame_ = CreateMaybeMessage< ::livekit::proto::CaptureVideoFrameRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.capture_video_frame_;
}
inline ::livekit::proto::CaptureVideoFrameRequest* FfiRequest::mutable_capture_video_frame() {
  ::livekit::proto::CaptureVideoFrameRequest* _msg = _internal_mutable_capture_video_frame();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.capture_video_frame)
  return _msg;
}

// .livekit.proto.VideoConvertRequest video_convert = 23;
inline bool FfiRequest::_internal_has_video_convert() const {
  return message_case() == kVideoConvert;
}
inline bool FfiRequest::has_video_convert() const {
  return _internal_has_video_convert();
}
inline void FfiRequest::set_has_video_convert() {
  _impl_._oneof_case_[0] = kVideoConvert;
}
inline ::livekit::proto::VideoConvertRequest* FfiRequest::release_video_convert() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.video_convert)
  if (_internal_has_video_convert()) {
    clear_has_message();
    ::livekit::proto::VideoConvertRequest* temp = _impl_.message_.video_convert_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.video_convert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::VideoConvertRequest& FfiRequest::_internal_video_convert() const {
  return _internal_has_video_convert()
      ? *_impl_.message_.video_convert_
      : reinterpret_cast< ::livekit::proto::VideoConvertRequest&>(::livekit::proto::_VideoConvertRequest_default_instance_);
}
inline const ::livekit::proto::VideoConvertRequest& FfiRequest::video_convert() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.video_convert)
  return _internal_video_convert();
}
inline ::livekit::proto::VideoConvertRequest* FfiRequest::unsafe_arena_release_video_convert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.video_convert)
  if (_internal_has_video_convert()) {
    clear_has_message();
    ::livekit::proto::VideoConvertRequest* temp = _impl_.message_.video_convert_;
    _impl_.message_.video_convert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_video_convert(::livekit::proto::VideoConvertRequest* video_convert) {
  clear_message();
  if (video_convert) {
    set_has_video_convert();
    _impl_.message_.video_convert_ = video_convert;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.video_convert)
}
inline ::livekit::proto::VideoConvertRequest* FfiRequest::_internal_mutable_video_convert() {
  if (!_internal_has_video_convert()) {
    clear_message();
    set_has_video_convert();
    _impl_.message_.video_convert_ = CreateMaybeMessage< ::livekit::proto::VideoConvertRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.video_convert_;
}
inline ::livekit::proto::VideoConvertRequest* FfiRequest::mutable_video_convert() {
  ::livekit::proto::VideoConvertRequest* _msg = _internal_mutable_video_convert();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.video_convert)
  return _msg;
}

// .livekit.proto.VideoStreamFromParticipantRequest video_stream_from_participant = 24;
inline bool FfiRequest::_internal_has_video_stream_from_participant() const {
  return message_case() == kVideoStreamFromParticipant;
}
inline bool FfiRequest::has_video_stream_from_participant() const {
  return _internal_has_video_stream_from_participant();
}
inline void FfiRequest::set_has_video_stream_from_participant() {
  _impl_._oneof_case_[0] = kVideoStreamFromParticipant;
}
inline ::livekit::proto::VideoStreamFromParticipantRequest* FfiRequest::release_video_stream_from_participant() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.video_stream_from_participant)
  if (_internal_has_video_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::VideoStreamFromParticipantRequest* temp = _impl_.message_.video_stream_from_participant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.video_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::VideoStreamFromParticipantRequest& FfiRequest::_internal_video_stream_from_participant() const {
  return _internal_has_video_stream_from_participant()
      ? *_impl_.message_.video_stream_from_participant_
      : reinterpret_cast< ::livekit::proto::VideoStreamFromParticipantRequest&>(::livekit::proto::_VideoStreamFromParticipantRequest_default_instance_);
}
inline const ::livekit::proto::VideoStreamFromParticipantRequest& FfiRequest::video_stream_from_participant() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.video_stream_from_participant)
  return _internal_video_stream_from_participant();
}
inline ::livekit::proto::VideoStreamFromParticipantRequest* FfiRequest::unsafe_arena_release_video_stream_from_participant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.video_stream_from_participant)
  if (_internal_has_video_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::VideoStreamFromParticipantRequest* temp = _impl_.message_.video_stream_from_participant_;
    _impl_.message_.video_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_video_stream_from_participant(::livekit::proto::VideoStreamFromParticipantRequest* video_stream_from_participant) {
  clear_message();
  if (video_stream_from_participant) {
    set_has_video_stream_from_participant();
    _impl_.message_.video_stream_from_participant_ = video_stream_from_participant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.video_stream_from_participant)
}
inline ::livekit::proto::VideoStreamFromParticipantRequest* FfiRequest::_internal_mutable_video_stream_from_participant() {
  if (!_internal_has_video_stream_from_participant()) {
    clear_message();
    set_has_video_stream_from_participant();
    _impl_.message_.video_stream_from_participant_ = CreateMaybeMessage< ::livekit::proto::VideoStreamFromParticipantRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.video_stream_from_participant_;
}
inline ::livekit::proto::VideoStreamFromParticipantRequest* FfiRequest::mutable_video_stream_from_participant() {
  ::livekit::proto::VideoStreamFromParticipantRequest* _msg = _internal_mutable_video_stream_from_participant();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.video_stream_from_participant)
  return _msg;
}

// .livekit.proto.NewAudioStreamRequest new_audio_stream = 25;
inline bool FfiRequest::_internal_has_new_audio_stream() const {
  return message_case() == kNewAudioStream;
}
inline bool FfiRequest::has_new_audio_stream() const {
  return _internal_has_new_audio_stream();
}
inline void FfiRequest::set_has_new_audio_stream() {
  _impl_._oneof_case_[0] = kNewAudioStream;
}
inline ::livekit::proto::NewAudioStreamRequest* FfiRequest::release_new_audio_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_audio_stream)
  if (_internal_has_new_audio_stream()) {
    clear_has_message();
    ::livekit::proto::NewAudioStreamRequest* temp = _impl_.message_.new_audio_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_audio_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewAudioStreamRequest& FfiRequest::_internal_new_audio_stream() const {
  return _internal_has_new_audio_stream()
      ? *_impl_.message_.new_audio_stream_
      : reinterpret_cast< ::livekit::proto::NewAudioStreamRequest&>(::livekit::proto::_NewAudioStreamRequest_default_instance_);
}
inline const ::livekit::proto::NewAudioStreamRequest& FfiRequest::new_audio_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_audio_stream)
  return _internal_new_audio_stream();
}
inline ::livekit::proto::NewAudioStreamRequest* FfiRequest::unsafe_arena_release_new_audio_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_audio_stream)
  if (_internal_has_new_audio_stream()) {
    clear_has_message();
    ::livekit::proto::NewAudioStreamRequest* temp = _impl_.message_.new_audio_stream_;
    _impl_.message_.new_audio_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_audio_stream(::livekit::proto::NewAudioStreamRequest* new_audio_stream) {
  clear_message();
  if (new_audio_stream) {
    set_has_new_audio_stream();
    _impl_.message_.new_audio_stream_ = new_audio_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_audio_stream)
}
inline ::livekit::proto::NewAudioStreamRequest* FfiRequest::_internal_mutable_new_audio_stream() {
  if (!_internal_has_new_audio_stream()) {
    clear_message();
    set_has_new_audio_stream();
    _impl_.message_.new_audio_stream_ = CreateMaybeMessage< ::livekit::proto::NewAudioStreamRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_audio_stream_;
}
inline ::livekit::proto::NewAudioStreamRequest* FfiRequest::mutable_new_audio_stream() {
  ::livekit::proto::NewAudioStreamRequest* _msg = _internal_mutable_new_audio_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_audio_stream)
  return _msg;
}

// .livekit.proto.NewAudioSourceRequest new_audio_source = 26;
inline bool FfiRequest::_internal_has_new_audio_source() const {
  return message_case() == kNewAudioSource;
}
inline bool FfiRequest::has_new_audio_source() const {
  return _internal_has_new_audio_source();
}
inline void FfiRequest::set_has_new_audio_source() {
  _impl_._oneof_case_[0] = kNewAudioSource;
}
inline ::livekit::proto::NewAudioSourceRequest* FfiRequest::release_new_audio_source() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_audio_source)
  if (_internal_has_new_audio_source()) {
    clear_has_message();
    ::livekit::proto::NewAudioSourceRequest* temp = _impl_.message_.new_audio_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_audio_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewAudioSourceRequest& FfiRequest::_internal_new_audio_source() const {
  return _internal_has_new_audio_source()
      ? *_impl_.message_.new_audio_source_
      : reinterpret_cast< ::livekit::proto::NewAudioSourceRequest&>(::livekit::proto::_NewAudioSourceRequest_default_instance_);
}
inline const ::livekit::proto::NewAudioSourceRequest& FfiRequest::new_audio_source() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_audio_source)
  return _internal_new_audio_source();
}
inline ::livekit::proto::NewAudioSourceRequest* FfiRequest::unsafe_arena_release_new_audio_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_audio_source)
  if (_internal_has_new_audio_source()) {
    clear_has_message();
    ::livekit::proto::NewAudioSourceRequest* temp = _impl_.message_.new_audio_source_;
    _impl_.message_.new_audio_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_audio_source(::livekit::proto::NewAudioSourceRequest* new_audio_source) {
  clear_message();
  if (new_audio_source) {
    set_has_new_audio_source();
    _impl_.message_.new_audio_source_ = new_audio_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_audio_source)
}
inline ::livekit::proto::NewAudioSourceRequest* FfiRequest::_internal_mutable_new_audio_source() {
  if (!_internal_has_new_audio_source()) {
    clear_message();
    set_has_new_audio_source();
    _impl_.message_.new_audio_source_ = CreateMaybeMessage< ::livekit::proto::NewAudioSourceRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_audio_source_;
}
inline ::livekit::proto::NewAudioSourceRequest* FfiRequest::mutable_new_audio_source() {
  ::livekit::proto::NewAudioSourceRequest* _msg = _internal_mutable_new_audio_source();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_audio_source)
  return _msg;
}

// .livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 27;
inline bool FfiRequest::_internal_has_capture_audio_frame() const {
  return message_case() == kCaptureAudioFrame;
}
inline bool FfiRequest::has_capture_audio_frame() const {
  return _internal_has_capture_audio_frame();
}
inline void FfiRequest::set_has_capture_audio_frame() {
  _impl_._oneof_case_[0] = kCaptureAudioFrame;
}
inline ::livekit::proto::CaptureAudioFrameRequest* FfiRequest::release_capture_audio_frame() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.capture_audio_frame)
  if (_internal_has_capture_audio_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureAudioFrameRequest* temp = _impl_.message_.capture_audio_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.capture_audio_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CaptureAudioFrameRequest& FfiRequest::_internal_capture_audio_frame() const {
  return _internal_has_capture_audio_frame()
      ? *_impl_.message_.capture_audio_frame_
      : reinterpret_cast< ::livekit::proto::CaptureAudioFrameRequest&>(::livekit::proto::_CaptureAudioFrameRequest_default_instance_);
}
inline const ::livekit::proto::CaptureAudioFrameRequest& FfiRequest::capture_audio_frame() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.capture_audio_frame)
  return _internal_capture_audio_frame();
}
inline ::livekit::proto::CaptureAudioFrameRequest* FfiRequest::unsafe_arena_release_capture_audio_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.capture_audio_frame)
  if (_internal_has_capture_audio_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureAudioFrameRequest* temp = _impl_.message_.capture_audio_frame_;
    _impl_.message_.capture_audio_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameRequest* capture_audio_frame) {
  clear_message();
  if (capture_audio_frame) {
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = capture_audio_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.capture_audio_frame)
}
inline ::livekit::proto::CaptureAudioFrameRequest* FfiRequest::_internal_mutable_capture_audio_frame() {
  if (!_internal_has_capture_audio_frame()) {
    clear_message();
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = CreateMaybeMessage< ::livekit::proto::CaptureAudioFrameRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.capture_audio_frame_;
}
inline ::livekit::proto::CaptureAudioFrameRequest* FfiRequest::mutable_capture_audio_frame() {
  ::livekit::proto::CaptureAudioFrameRequest* _msg = _internal_mutable_capture_audio_frame();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.capture_audio_frame)
  return _msg;
}

// .livekit.proto.ClearAudioBufferRequest clear_audio_buffer = 28;
inline bool FfiRequest::_internal_has_clear_audio_buffer() const {
  return message_case() == kClearAudioBuffer;
}
inline bool FfiRequest::has_clear_audio_buffer() const {
  return _internal_has_clear_audio_buffer();
}
inline void FfiRequest::set_has_clear_audio_buffer() {
  _impl_._oneof_case_[0] = kClearAudioBuffer;
}
inline ::livekit::proto::ClearAudioBufferRequest* FfiRequest::release_clear_audio_buffer() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.clear_audio_buffer)
  if (_internal_has_clear_audio_buffer()) {
    clear_has_message();
    ::livekit::proto::ClearAudioBufferRequest* temp = _impl_.message_.clear_audio_buffer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.clear_audio_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ClearAudioBufferRequest& FfiRequest::_internal_clear_audio_buffer() const {
  return _internal_has_clear_audio_buffer()
      ? *_impl_.message_.clear_audio_buffer_
      : reinterpret_cast< ::livekit::proto::ClearAudioBufferRequest&>(::livekit::proto::_ClearAudioBufferRequest_default_instance_);
}
inline const ::livekit::proto::ClearAudioBufferRequest& FfiRequest::clear_audio_buffer() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.clear_audio_buffer)
  return _internal_clear_audio_buffer();
}
inline ::livekit::proto::ClearAudioBufferRequest* FfiRequest::unsafe_arena_release_clear_audio_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.clear_audio_buffer)
  if (_internal_has_clear_audio_buffer()) {
    clear_has_message();
    ::livekit::proto::ClearAudioBufferRequest* temp = _impl_.message_.clear_audio_buffer_;
    _impl_.message_.clear_audio_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_clear_audio_buffer(::livekit::proto::ClearAudioBufferRequest* clear_audio_buffer) {
  clear_message();
  if (clear_audio_buffer) {
    set_has_clear_audio_buffer();
    _impl_.message_.clear_audio_buffer_ = clear_audio_buffer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.clear_audio_buffer)
}
inline ::livekit::proto::ClearAudioBufferRequest* FfiRequest::_internal_mutable_clear_audio_buffer() {
  if (!_internal_has_clear_audio_buffer()) {
    clear_message();
    set_has_clear_audio_buffer();
    _impl_.message_.clear_audio_buffer_ = CreateMaybeMessage< ::livekit::proto::ClearAudioBufferRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.clear_audio_buffer_;
}
inline ::livekit::proto::ClearAudioBufferRequest* FfiRequest::mutable_clear_audio_buffer() {
  ::livekit::proto::ClearAudioBufferRequest* _msg = _internal_mutable_clear_audio_buffer();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.clear_audio_buffer)
  return _msg;
}

// .livekit.proto.NewAudioResamplerRequest new_audio_resampler = 29;
inline bool FfiRequest::_internal_has_new_audio_resampler() const {
  return message_case() == kNewAudioResampler;
}
inline bool FfiRequest::has_new_audio_resampler() const {
  return _internal_has_new_audio_resampler();
}
inline void FfiRequest::set_has_new_audio_resampler() {
  _impl_._oneof_case_[0] = kNewAudioResampler;
}
inline ::livekit::proto::NewAudioResamplerRequest* FfiRequest::release_new_audio_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_audio_resampler)
  if (_internal_has_new_audio_resampler()) {
    clear_has_message();
    ::livekit::proto::NewAudioResamplerRequest* temp = _impl_.message_.new_audio_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_audio_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewAudioResamplerRequest& FfiRequest::_internal_new_audio_resampler() const {
  return _internal_has_new_audio_resampler()
      ? *_impl_.message_.new_audio_resampler_
      : reinterpret_cast< ::livekit::proto::NewAudioResamplerRequest&>(::livekit::proto::_NewAudioResamplerRequest_default_instance_);
}
inline const ::livekit::proto::NewAudioResamplerRequest& FfiRequest::new_audio_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_audio_resampler)
  return _internal_new_audio_resampler();
}
inline ::livekit::proto::NewAudioResamplerRequest* FfiRequest::unsafe_arena_release_new_audio_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_audio_resampler)
  if (_internal_has_new_audio_resampler()) {
    clear_has_message();
    ::livekit::proto::NewAudioResamplerRequest* temp = _impl_.message_.new_audio_resampler_;
    _impl_.message_.new_audio_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_audio_resampler(::livekit::proto::NewAudioResamplerRequest* new_audio_resampler) {
  clear_message();
  if (new_audio_resampler) {
    set_has_new_audio_resampler();
    _impl_.message_.new_audio_resampler_ = new_audio_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_audio_resampler)
}
inline ::livekit::proto::NewAudioResamplerRequest* FfiRequest::_internal_mutable_new_audio_resampler() {
  if (!_internal_has_new_audio_resampler()) {
    clear_message();
    set_has_new_audio_resampler();
    _impl_.message_.new_audio_resampler_ = CreateMaybeMessage< ::livekit::proto::NewAudioResamplerRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_audio_resampler_;
}
inline ::livekit::proto::NewAudioResamplerRequest* FfiRequest::mutable_new_audio_resampler() {
  ::livekit::proto::NewAudioResamplerRequest* _msg = _internal_mutable_new_audio_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_audio_resampler)
  return _msg;
}

// .livekit.proto.RemixAndResampleRequest remix_and_resample = 30;
inline bool FfiRequest::_internal_has_remix_and_resample() const {
  return message_case() == kRemixAndResample;
}
inline bool FfiRequest::has_remix_and_resample() const {
  return _internal_has_remix_and_resample();
}
inline void FfiRequest::set_has_remix_and_resample() {
  _impl_._oneof_case_[0] = kRemixAndResample;
}
inline ::livekit::proto::RemixAndResampleRequest* FfiRequest::release_remix_and_resample() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.remix_and_resample)
  if (_internal_has_remix_and_resample()) {
    clear_has_message();
    ::livekit::proto::RemixAndResampleRequest* temp = _impl_.message_.remix_and_resample_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.remix_and_resample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RemixAndResampleRequest& FfiRequest::_internal_remix_and_resample() const {
  return _internal_has_remix_and_resample()
      ? *_impl_.message_.remix_and_resample_
      : reinterpret_cast< ::livekit::proto::RemixAndResampleRequest&>(::livekit::proto::_RemixAndResampleRequest_default_instance_);
}
inline const ::livekit::proto::RemixAndResampleRequest& FfiRequest::remix_and_resample() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.remix_and_resample)
  return _internal_remix_and_resample();
}
inline ::livekit::proto::RemixAndResampleRequest* FfiRequest::unsafe_arena_release_remix_and_resample() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.remix_and_resample)
  if (_internal_has_remix_and_resample()) {
    clear_has_message();
    ::livekit::proto::RemixAndResampleRequest* temp = _impl_.message_.remix_and_resample_;
    _impl_.message_.remix_and_resample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_remix_and_resample(::livekit::proto::RemixAndResampleRequest* remix_and_resample) {
  clear_message();
  if (remix_and_resample) {
    set_has_remix_and_resample();
    _impl_.message_.remix_and_resample_ = remix_and_resample;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.remix_and_resample)
}
inline ::livekit::proto::RemixAndResampleRequest* FfiRequest::_internal_mutable_remix_and_resample() {
  if (!_internal_has_remix_and_resample()) {
    clear_message();
    set_has_remix_and_resample();
    _impl_.message_.remix_and_resample_ = CreateMaybeMessage< ::livekit::proto::RemixAndResampleRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.remix_and_resample_;
}
inline ::livekit::proto::RemixAndResampleRequest* FfiRequest::mutable_remix_and_resample() {
  ::livekit::proto::RemixAndResampleRequest* _msg = _internal_mutable_remix_and_resample();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.remix_and_resample)
  return _msg;
}

// .livekit.proto.E2eeRequest e2ee = 31;
inline bool FfiRequest::_internal_has_e2ee() const {
  return message_case() == kE2Ee;
}
inline bool FfiRequest::has_e2ee() const {
  return _internal_has_e2ee();
}
inline void FfiRequest::set_has_e2ee() {
  _impl_._oneof_case_[0] = kE2Ee;
}
inline ::livekit::proto::E2eeRequest* FfiRequest::release_e2ee() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.e2ee)
  if (_internal_has_e2ee()) {
    clear_has_message();
    ::livekit::proto::E2eeRequest* temp = _impl_.message_.e2ee_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.e2ee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::E2eeRequest& FfiRequest::_internal_e2ee() const {
  return _internal_has_e2ee()
      ? *_impl_.message_.e2ee_
      : reinterpret_cast< ::livekit::proto::E2eeRequest&>(::livekit::proto::_E2eeRequest_default_instance_);
}
inline const ::livekit::proto::E2eeRequest& FfiRequest::e2ee() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.e2ee)
  return _internal_e2ee();
}
inline ::livekit::proto::E2eeRequest* FfiRequest::unsafe_arena_release_e2ee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.e2ee)
  if (_internal_has_e2ee()) {
    clear_has_message();
    ::livekit::proto::E2eeRequest* temp = _impl_.message_.e2ee_;
    _impl_.message_.e2ee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_e2ee(::livekit::proto::E2eeRequest* e2ee) {
  clear_message();
  if (e2ee) {
    set_has_e2ee();
    _impl_.message_.e2ee_ = e2ee;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.e2ee)
}
inline ::livekit::proto::E2eeRequest* FfiRequest::_internal_mutable_e2ee() {
  if (!_internal_has_e2ee()) {
    clear_message();
    set_has_e2ee();
    _impl_.message_.e2ee_ = CreateMaybeMessage< ::livekit::proto::E2eeRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.e2ee_;
}
inline ::livekit::proto::E2eeRequest* FfiRequest::mutable_e2ee() {
  ::livekit::proto::E2eeRequest* _msg = _internal_mutable_e2ee();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.e2ee)
  return _msg;
}

// .livekit.proto.AudioStreamFromParticipantRequest audio_stream_from_participant = 32;
inline bool FfiRequest::_internal_has_audio_stream_from_participant() const {
  return message_case() == kAudioStreamFromParticipant;
}
inline bool FfiRequest::has_audio_stream_from_participant() const {
  return _internal_has_audio_stream_from_participant();
}
inline void FfiRequest::set_has_audio_stream_from_participant() {
  _impl_._oneof_case_[0] = kAudioStreamFromParticipant;
}
inline ::livekit::proto::AudioStreamFromParticipantRequest* FfiRequest::release_audio_stream_from_participant() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.audio_stream_from_participant)
  if (_internal_has_audio_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::AudioStreamFromParticipantRequest* temp = _impl_.message_.audio_stream_from_participant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.audio_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::AudioStreamFromParticipantRequest& FfiRequest::_internal_audio_stream_from_participant() const {
  return _internal_has_audio_stream_from_participant()
      ? *_impl_.message_.audio_stream_from_participant_
      : reinterpret_cast< ::livekit::proto::AudioStreamFromParticipantRequest&>(::livekit::proto::_AudioStreamFromParticipantRequest_default_instance_);
}
inline const ::livekit::proto::AudioStreamFromParticipantRequest& FfiRequest::audio_stream_from_participant() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.audio_stream_from_participant)
  return _internal_audio_stream_from_participant();
}
inline ::livekit::proto::AudioStreamFromParticipantRequest* FfiRequest::unsafe_arena_release_audio_stream_from_participant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.audio_stream_from_participant)
  if (_internal_has_audio_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::AudioStreamFromParticipantRequest* temp = _impl_.message_.audio_stream_from_participant_;
    _impl_.message_.audio_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_audio_stream_from_participant(::livekit::proto::AudioStreamFromParticipantRequest* audio_stream_from_participant) {
  clear_message();
  if (audio_stream_from_participant) {
    set_has_audio_stream_from_participant();
    _impl_.message_.audio_stream_from_participant_ = audio_stream_from_participant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.audio_stream_from_participant)
}
inline ::livekit::proto::AudioStreamFromParticipantRequest* FfiRequest::_internal_mutable_audio_stream_from_participant() {
  if (!_internal_has_audio_stream_from_participant()) {
    clear_message();
    set_has_audio_stream_from_participant();
    _impl_.message_.audio_stream_from_participant_ = CreateMaybeMessage< ::livekit::proto::AudioStreamFromParticipantRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.audio_stream_from_participant_;
}
inline ::livekit::proto::AudioStreamFromParticipantRequest* FfiRequest::mutable_audio_stream_from_participant() {
  ::livekit::proto::AudioStreamFromParticipantRequest* _msg = _internal_mutable_audio_stream_from_participant();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.audio_stream_from_participant)
  return _msg;
}

// .livekit.proto.NewSoxResamplerRequest new_sox_resampler = 33;
inline bool FfiRequest::_internal_has_new_sox_resampler() const {
  return message_case() == kNewSoxResampler;
}
inline bool FfiRequest::has_new_sox_resampler() const {
  return _internal_has_new_sox_resampler();
}
inline void FfiRequest::set_has_new_sox_resampler() {
  _impl_._oneof_case_[0] = kNewSoxResampler;
}
inline ::livekit::proto::NewSoxResamplerRequest* FfiRequest::release_new_sox_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_sox_resampler)
  if (_internal_has_new_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::NewSoxResamplerRequest* temp = _impl_.message_.new_sox_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewSoxResamplerRequest& FfiRequest::_internal_new_sox_resampler() const {
  return _internal_has_new_sox_resampler()
      ? *_impl_.message_.new_sox_resampler_
      : reinterpret_cast< ::livekit::proto::NewSoxResamplerRequest&>(::livekit::proto::_NewSoxResamplerRequest_default_instance_);
}
inline const ::livekit::proto::NewSoxResamplerRequest& FfiRequest::new_sox_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_sox_resampler)
  return _internal_new_sox_resampler();
}
inline ::livekit::proto::NewSoxResamplerRequest* FfiRequest::unsafe_arena_release_new_sox_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_sox_resampler)
  if (_internal_has_new_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::NewSoxResamplerRequest* temp = _impl_.message_.new_sox_resampler_;
    _impl_.message_.new_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_sox_resampler(::livekit::proto::NewSoxResamplerRequest* new_sox_resampler) {
  clear_message();
  if (new_sox_resampler) {
    set_has_new_sox_resampler();
    _impl_.message_.new_sox_resampler_ = new_sox_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_sox_resampler)
}
inline ::livekit::proto::NewSoxResamplerRequest* FfiRequest::_internal_mutable_new_sox_resampler() {
  if (!_internal_has_new_sox_resampler()) {
    clear_message();
    set_has_new_sox_resampler();
    _impl_.message_.new_sox_resampler_ = CreateMaybeMessage< ::livekit::proto::NewSoxResamplerRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_sox_resampler_;
}
inline ::livekit::proto::NewSoxResamplerRequest* FfiRequest::mutable_new_sox_resampler() {
  ::livekit::proto::NewSoxResamplerRequest* _msg = _internal_mutable_new_sox_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_sox_resampler)
  return _msg;
}

// .livekit.proto.PushSoxResamplerRequest push_sox_resampler = 34;
inline bool FfiRequest::_internal_has_push_sox_resampler() const {
  return message_case() == kPushSoxResampler;
}
inline bool FfiRequest::has_push_sox_resampler() const {
  return _internal_has_push_sox_resampler();
}
inline void FfiRequest::set_has_push_sox_resampler() {
  _impl_._oneof_case_[0] = kPushSoxResampler;
}
inline ::livekit::proto::PushSoxResamplerRequest* FfiRequest::release_push_sox_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.push_sox_resampler)
  if (_internal_has_push_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::PushSoxResamplerRequest* temp = _impl_.message_.push_sox_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.push_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PushSoxResamplerRequest& FfiRequest::_internal_push_sox_resampler() const {
  return _internal_has_push_sox_resampler()
      ? *_impl_.message_.push_sox_resampler_
      : reinterpret_cast< ::livekit::proto::PushSoxResamplerRequest&>(::livekit::proto::_PushSoxResamplerRequest_default_instance_);
}
inline const ::livekit::proto::PushSoxResamplerRequest& FfiRequest::push_sox_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.push_sox_resampler)
  return _internal_push_sox_resampler();
}
inline ::livekit::proto::PushSoxResamplerRequest* FfiRequest::unsafe_arena_release_push_sox_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.push_sox_resampler)
  if (_internal_has_push_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::PushSoxResamplerRequest* temp = _impl_.message_.push_sox_resampler_;
    _impl_.message_.push_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_push_sox_resampler(::livekit::proto::PushSoxResamplerRequest* push_sox_resampler) {
  clear_message();
  if (push_sox_resampler) {
    set_has_push_sox_resampler();
    _impl_.message_.push_sox_resampler_ = push_sox_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.push_sox_resampler)
}
inline ::livekit::proto::PushSoxResamplerRequest* FfiRequest::_internal_mutable_push_sox_resampler() {
  if (!_internal_has_push_sox_resampler()) {
    clear_message();
    set_has_push_sox_resampler();
    _impl_.message_.push_sox_resampler_ = CreateMaybeMessage< ::livekit::proto::PushSoxResamplerRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.push_sox_resampler_;
}
inline ::livekit::proto::PushSoxResamplerRequest* FfiRequest::mutable_push_sox_resampler() {
  ::livekit::proto::PushSoxResamplerRequest* _msg = _internal_mutable_push_sox_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.push_sox_resampler)
  return _msg;
}

// .livekit.proto.FlushSoxResamplerRequest flush_sox_resampler = 35;
inline bool FfiRequest::_internal_has_flush_sox_resampler() const {
  return message_case() == kFlushSoxResampler;
}
inline bool FfiRequest::has_flush_sox_resampler() const {
  return _internal_has_flush_sox_resampler();
}
inline void FfiRequest::set_has_flush_sox_resampler() {
  _impl_._oneof_case_[0] = kFlushSoxResampler;
}
inline ::livekit::proto::FlushSoxResamplerRequest* FfiRequest::release_flush_sox_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.flush_sox_resampler)
  if (_internal_has_flush_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::FlushSoxResamplerRequest* temp = _impl_.message_.flush_sox_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.flush_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::FlushSoxResamplerRequest& FfiRequest::_internal_flush_sox_resampler() const {
  return _internal_has_flush_sox_resampler()
      ? *_impl_.message_.flush_sox_resampler_
      : reinterpret_cast< ::livekit::proto::FlushSoxResamplerRequest&>(::livekit::proto::_FlushSoxResamplerRequest_default_instance_);
}
inline const ::livekit::proto::FlushSoxResamplerRequest& FfiRequest::flush_sox_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.flush_sox_resampler)
  return _internal_flush_sox_resampler();
}
inline ::livekit::proto::FlushSoxResamplerRequest* FfiRequest::unsafe_arena_release_flush_sox_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.flush_sox_resampler)
  if (_internal_has_flush_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::FlushSoxResamplerRequest* temp = _impl_.message_.flush_sox_resampler_;
    _impl_.message_.flush_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_flush_sox_resampler(::livekit::proto::FlushSoxResamplerRequest* flush_sox_resampler) {
  clear_message();
  if (flush_sox_resampler) {
    set_has_flush_sox_resampler();
    _impl_.message_.flush_sox_resampler_ = flush_sox_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.flush_sox_resampler)
}
inline ::livekit::proto::FlushSoxResamplerRequest* FfiRequest::_internal_mutable_flush_sox_resampler() {
  if (!_internal_has_flush_sox_resampler()) {
    clear_message();
    set_has_flush_sox_resampler();
    _impl_.message_.flush_sox_resampler_ = CreateMaybeMessage< ::livekit::proto::FlushSoxResamplerRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.flush_sox_resampler_;
}
inline ::livekit::proto::FlushSoxResamplerRequest* FfiRequest::mutable_flush_sox_resampler() {
  ::livekit::proto::FlushSoxResamplerRequest* _msg = _internal_mutable_flush_sox_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.flush_sox_resampler)
  return _msg;
}

// .livekit.proto.SendChatMessageRequest send_chat_message = 36;
inline bool FfiRequest::_internal_has_send_chat_message() const {
  return message_case() == kSendChatMessage;
}
inline bool FfiRequest::has_send_chat_message() const {
  return _internal_has_send_chat_message();
}
inline void FfiRequest::set_has_send_chat_message() {
  _impl_._oneof_case_[0] = kSendChatMessage;
}
inline ::livekit::proto::SendChatMessageRequest* FfiRequest::release_send_chat_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.send_chat_message)
  if (_internal_has_send_chat_message()) {
    clear_has_message();
    ::livekit::proto::SendChatMessageRequest* temp = _impl_.message_.send_chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendChatMessageRequest& FfiRequest::_internal_send_chat_message() const {
  return _internal_has_send_chat_message()
      ? *_impl_.message_.send_chat_message_
      : reinterpret_cast< ::livekit::proto::SendChatMessageRequest&>(::livekit::proto::_SendChatMessageRequest_default_instance_);
}
inline const ::livekit::proto::SendChatMessageRequest& FfiRequest::send_chat_message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.send_chat_message)
  return _internal_send_chat_message();
}
inline ::livekit::proto::SendChatMessageRequest* FfiRequest::unsafe_arena_release_send_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.send_chat_message)
  if (_internal_has_send_chat_message()) {
    clear_has_message();
    ::livekit::proto::SendChatMessageRequest* temp = _impl_.message_.send_chat_message_;
    _impl_.message_.send_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_send_chat_message(::livekit::proto::SendChatMessageRequest* send_chat_message) {
  clear_message();
  if (send_chat_message) {
    set_has_send_chat_message();
    _impl_.message_.send_chat_message_ = send_chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.send_chat_message)
}
inline ::livekit::proto::SendChatMessageRequest* FfiRequest::_internal_mutable_send_chat_message() {
  if (!_internal_has_send_chat_message()) {
    clear_message();
    set_has_send_chat_message();
    _impl_.message_.send_chat_message_ = CreateMaybeMessage< ::livekit::proto::SendChatMessageRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.send_chat_message_;
}
inline ::livekit::proto::SendChatMessageRequest* FfiRequest::mutable_send_chat_message() {
  ::livekit::proto::SendChatMessageRequest* _msg = _internal_mutable_send_chat_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.send_chat_message)
  return _msg;
}

// .livekit.proto.EditChatMessageRequest edit_chat_message = 37;
inline bool FfiRequest::_internal_has_edit_chat_message() const {
  return message_case() == kEditChatMessage;
}
inline bool FfiRequest::has_edit_chat_message() const {
  return _internal_has_edit_chat_message();
}
inline void FfiRequest::set_has_edit_chat_message() {
  _impl_._oneof_case_[0] = kEditChatMessage;
}
inline ::livekit::proto::EditChatMessageRequest* FfiRequest::release_edit_chat_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.edit_chat_message)
  if (_internal_has_edit_chat_message()) {
    clear_has_message();
    ::livekit::proto::EditChatMessageRequest* temp = _impl_.message_.edit_chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.edit_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::EditChatMessageRequest& FfiRequest::_internal_edit_chat_message() const {
  return _internal_has_edit_chat_message()
      ? *_impl_.message_.edit_chat_message_
      : reinterpret_cast< ::livekit::proto::EditChatMessageRequest&>(::livekit::proto::_EditChatMessageRequest_default_instance_);
}
inline const ::livekit::proto::EditChatMessageRequest& FfiRequest::edit_chat_message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.edit_chat_message)
  return _internal_edit_chat_message();
}
inline ::livekit::proto::EditChatMessageRequest* FfiRequest::unsafe_arena_release_edit_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.edit_chat_message)
  if (_internal_has_edit_chat_message()) {
    clear_has_message();
    ::livekit::proto::EditChatMessageRequest* temp = _impl_.message_.edit_chat_message_;
    _impl_.message_.edit_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_edit_chat_message(::livekit::proto::EditChatMessageRequest* edit_chat_message) {
  clear_message();
  if (edit_chat_message) {
    set_has_edit_chat_message();
    _impl_.message_.edit_chat_message_ = edit_chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.edit_chat_message)
}
inline ::livekit::proto::EditChatMessageRequest* FfiRequest::_internal_mutable_edit_chat_message() {
  if (!_internal_has_edit_chat_message()) {
    clear_message();
    set_has_edit_chat_message();
    _impl_.message_.edit_chat_message_ = CreateMaybeMessage< ::livekit::proto::EditChatMessageRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.edit_chat_message_;
}
inline ::livekit::proto::EditChatMessageRequest* FfiRequest::mutable_edit_chat_message() {
  ::livekit::proto::EditChatMessageRequest* _msg = _internal_mutable_edit_chat_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.edit_chat_message)
  return _msg;
}

// .livekit.proto.PerformRpcRequest perform_rpc = 38;
inline bool FfiRequest::_internal_has_perform_rpc() const {
  return message_case() == kPerformRpc;
}
inline bool FfiRequest::has_perform_rpc() const {
  return _internal_has_perform_rpc();
}
inline void FfiRequest::set_has_perform_rpc() {
  _impl_._oneof_case_[0] = kPerformRpc;
}
inline ::livekit::proto::PerformRpcRequest* FfiRequest::release_perform_rpc() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.perform_rpc)
  if (_internal_has_perform_rpc()) {
    clear_has_message();
    ::livekit::proto::PerformRpcRequest* temp = _impl_.message_.perform_rpc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.perform_rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PerformRpcRequest& FfiRequest::_internal_perform_rpc() const {
  return _internal_has_perform_rpc()
      ? *_impl_.message_.perform_rpc_
      : reinterpret_cast< ::livekit::proto::PerformRpcRequest&>(::livekit::proto::_PerformRpcRequest_default_instance_);
}
inline const ::livekit::proto::PerformRpcRequest& FfiRequest::perform_rpc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.perform_rpc)
  return _internal_perform_rpc();
}
inline ::livekit::proto::PerformRpcRequest* FfiRequest::unsafe_arena_release_perform_rpc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.perform_rpc)
  if (_internal_has_perform_rpc()) {
    clear_has_message();
    ::livekit::proto::PerformRpcRequest* temp = _impl_.message_.perform_rpc_;
    _impl_.message_.perform_rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_perform_rpc(::livekit::proto::PerformRpcRequest* perform_rpc) {
  clear_message();
  if (perform_rpc) {
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = perform_rpc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.perform_rpc)
}
inline ::livekit::proto::PerformRpcRequest* FfiRequest::_internal_mutable_perform_rpc() {
  if (!_internal_has_perform_rpc()) {
    clear_message();
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = CreateMaybeMessage< ::livekit::proto::PerformRpcRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.perform_rpc_;
}
inline ::livekit::proto::PerformRpcRequest* FfiRequest::mutable_perform_rpc() {
  ::livekit::proto::PerformRpcRequest* _msg = _internal_mutable_perform_rpc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.perform_rpc)
  return _msg;
}

// .livekit.proto.RegisterRpcMethodRequest register_rpc_method = 39;
inline bool FfiRequest::_internal_has_register_rpc_method() const {
  return message_case() == kRegisterRpcMethod;
}
inline bool FfiRequest::has_register_rpc_method() const {
  return _internal_has_register_rpc_method();
}
inline void FfiRequest::set_has_register_rpc_method() {
  _impl_._oneof_case_[0] = kRegisterRpcMethod;
}
inline ::livekit::proto::RegisterRpcMethodRequest* FfiRequest::release_register_rpc_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.register_rpc_method)
  if (_internal_has_register_rpc_method()) {
    clear_has_message();
    ::livekit::proto::RegisterRpcMethodRequest* temp = _impl_.message_.register_rpc_method_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.register_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RegisterRpcMethodRequest& FfiRequest::_internal_register_rpc_method() const {
  return _internal_has_register_rpc_method()
      ? *_impl_.message_.register_rpc_method_
      : reinterpret_cast< ::livekit::proto::RegisterRpcMethodRequest&>(::livekit::proto::_RegisterRpcMethodRequest_default_instance_);
}
inline const ::livekit::proto::RegisterRpcMethodRequest& FfiRequest::register_rpc_method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.register_rpc_method)
  return _internal_register_rpc_method();
}
inline ::livekit::proto::RegisterRpcMethodRequest* FfiRequest::unsafe_arena_release_register_rpc_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.register_rpc_method)
  if (_internal_has_register_rpc_method()) {
    clear_has_message();
    ::livekit::proto::RegisterRpcMethodRequest* temp = _impl_.message_.register_rpc_method_;
    _impl_.message_.register_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_register_rpc_method(::livekit::proto::RegisterRpcMethodRequest* register_rpc_method) {
  clear_message();
  if (register_rpc_method) {
    set_has_register_rpc_method();
    _impl_.message_.register_rpc_method_ = register_rpc_method;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.register_rpc_method)
}
inline ::livekit::proto::RegisterRpcMethodRequest* FfiRequest::_internal_mutable_register_rpc_method() {
  if (!_internal_has_register_rpc_method()) {
    clear_message();
    set_has_register_rpc_method();
    _impl_.message_.register_rpc_method_ = CreateMaybeMessage< ::livekit::proto::RegisterRpcMethodRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.register_rpc_method_;
}
inline ::livekit::proto::RegisterRpcMethodRequest* FfiRequest::mutable_register_rpc_method() {
  ::livekit::proto::RegisterRpcMethodRequest* _msg = _internal_mutable_register_rpc_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.register_rpc_method)
  return _msg;
}

// .livekit.proto.UnregisterRpcMethodRequest unregister_rpc_method = 40;
inline bool FfiRequest::_internal_has_unregister_rpc_method() const {
  return message_case() == kUnregisterRpcMethod;
}
inline bool FfiRequest::has_unregister_rpc_method() const {
  return _internal_has_unregister_rpc_method();
}
inline void FfiRequest::set_has_unregister_rpc_method() {
  _impl_._oneof_case_[0] = kUnregisterRpcMethod;
}
inline ::livekit::proto::UnregisterRpcMethodRequest* FfiRequest::release_unregister_rpc_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.unregister_rpc_method)
  if (_internal_has_unregister_rpc_method()) {
    clear_has_message();
    ::livekit::proto::UnregisterRpcMethodRequest* temp = _impl_.message_.unregister_rpc_method_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.unregister_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UnregisterRpcMethodRequest& FfiRequest::_internal_unregister_rpc_method() const {
  return _internal_has_unregister_rpc_method()
      ? *_impl_.message_.unregister_rpc_method_
      : reinterpret_cast< ::livekit::proto::UnregisterRpcMethodRequest&>(::livekit::proto::_UnregisterRpcMethodRequest_default_instance_);
}
inline const ::livekit::proto::UnregisterRpcMethodRequest& FfiRequest::unregister_rpc_method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.unregister_rpc_method)
  return _internal_unregister_rpc_method();
}
inline ::livekit::proto::UnregisterRpcMethodRequest* FfiRequest::unsafe_arena_release_unregister_rpc_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.unregister_rpc_method)
  if (_internal_has_unregister_rpc_method()) {
    clear_has_message();
    ::livekit::proto::UnregisterRpcMethodRequest* temp = _impl_.message_.unregister_rpc_method_;
    _impl_.message_.unregister_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_unregister_rpc_method(::livekit::proto::UnregisterRpcMethodRequest* unregister_rpc_method) {
  clear_message();
  if (unregister_rpc_method) {
    set_has_unregister_rpc_method();
    _impl_.message_.unregister_rpc_method_ = unregister_rpc_method;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.unregister_rpc_method)
}
inline ::livekit::proto::UnregisterRpcMethodRequest* FfiRequest::_internal_mutable_unregister_rpc_method() {
  if (!_internal_has_unregister_rpc_method()) {
    clear_message();
    set_has_unregister_rpc_method();
    _impl_.message_.unregister_rpc_method_ = CreateMaybeMessage< ::livekit::proto::UnregisterRpcMethodRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.unregister_rpc_method_;
}
inline ::livekit::proto::UnregisterRpcMethodRequest* FfiRequest::mutable_unregister_rpc_method() {
  ::livekit::proto::UnregisterRpcMethodRequest* _msg = _internal_mutable_unregister_rpc_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.unregister_rpc_method)
  return _msg;
}

// .livekit.proto.RpcMethodInvocationResponseRequest rpc_method_invocation_response = 41;
inline bool FfiRequest::_internal_has_rpc_method_invocation_response() const {
  return message_case() == kRpcMethodInvocationResponse;
}
inline bool FfiRequest::has_rpc_method_invocation_response() const {
  return _internal_has_rpc_method_invocation_response();
}
inline void FfiRequest::set_has_rpc_method_invocation_response() {
  _impl_._oneof_case_[0] = kRpcMethodInvocationResponse;
}
inline ::livekit::proto::RpcMethodInvocationResponseRequest* FfiRequest::release_rpc_method_invocation_response() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.rpc_method_invocation_response)
  if (_internal_has_rpc_method_invocation_response()) {
    clear_has_message();
    ::livekit::proto::RpcMethodInvocationResponseRequest* temp = _impl_.message_.rpc_method_invocation_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rpc_method_invocation_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RpcMethodInvocationResponseRequest& FfiRequest::_internal_rpc_method_invocation_response() const {
  return _internal_has_rpc_method_invocation_response()
      ? *_impl_.message_.rpc_method_invocation_response_
      : reinterpret_cast< ::livekit::proto::RpcMethodInvocationResponseRequest&>(::livekit::proto::_RpcMethodInvocationResponseRequest_default_instance_);
}
inline const ::livekit::proto::RpcMethodInvocationResponseRequest& FfiRequest::rpc_method_invocation_response() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.rpc_method_invocation_response)
  return _internal_rpc_method_invocation_response();
}
inline ::livekit::proto::RpcMethodInvocationResponseRequest* FfiRequest::unsafe_arena_release_rpc_method_invocation_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.rpc_method_invocation_response)
  if (_internal_has_rpc_method_invocation_response()) {
    clear_has_message();
    ::livekit::proto::RpcMethodInvocationResponseRequest* temp = _impl_.message_.rpc_method_invocation_response_;
    _impl_.message_.rpc_method_invocation_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_rpc_method_invocation_response(::livekit::proto::RpcMethodInvocationResponseRequest* rpc_method_invocation_response) {
  clear_message();
  if (rpc_method_invocation_response) {
    set_has_rpc_method_invocation_response();
    _impl_.message_.rpc_method_invocation_response_ = rpc_method_invocation_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.rpc_method_invocation_response)
}
inline ::livekit::proto::RpcMethodInvocationResponseRequest* FfiRequest::_internal_mutable_rpc_method_invocation_response() {
  if (!_internal_has_rpc_method_invocation_response()) {
    clear_message();
    set_has_rpc_method_invocation_response();
    _impl_.message_.rpc_method_invocation_response_ = CreateMaybeMessage< ::livekit::proto::RpcMethodInvocationResponseRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.rpc_method_invocation_response_;
}
inline ::livekit::proto::RpcMethodInvocationResponseRequest* FfiRequest::mutable_rpc_method_invocation_response() {
  ::livekit::proto::RpcMethodInvocationResponseRequest* _msg = _internal_mutable_rpc_method_invocation_response();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.rpc_method_invocation_response)
  return _msg;
}

// .livekit.proto.EnableRemoteTrackPublicationRequest enable_remote_track_publication = 42;
inline bool FfiRequest::_internal_has_enable_remote_track_publication() const {
  return message_case() == kEnableRemoteTrackPublication;
}
inline bool FfiRequest::has_enable_remote_track_publication() const {
  return _internal_has_enable_remote_track_publication();
}
inline void FfiRequest::set_has_enable_remote_track_publication() {
  _impl_._oneof_case_[0] = kEnableRemoteTrackPublication;
}
inline ::livekit::proto::EnableRemoteTrackPublicationRequest* FfiRequest::release_enable_remote_track_publication() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.enable_remote_track_publication)
  if (_internal_has_enable_remote_track_publication()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackPublicationRequest* temp = _impl_.message_.enable_remote_track_publication_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.enable_remote_track_publication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::EnableRemoteTrackPublicationRequest& FfiRequest::_internal_enable_remote_track_publication() const {
  return _internal_has_enable_remote_track_publication()
      ? *_impl_.message_.enable_remote_track_publication_
      : reinterpret_cast< ::livekit::proto::EnableRemoteTrackPublicationRequest&>(::livekit::proto::_EnableRemoteTrackPublicationRequest_default_instance_);
}
inline const ::livekit::proto::EnableRemoteTrackPublicationRequest& FfiRequest::enable_remote_track_publication() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.enable_remote_track_publication)
  return _internal_enable_remote_track_publication();
}
inline ::livekit::proto::EnableRemoteTrackPublicationRequest* FfiRequest::unsafe_arena_release_enable_remote_track_publication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.enable_remote_track_publication)
  if (_internal_has_enable_remote_track_publication()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackPublicationRequest* temp = _impl_.message_.enable_remote_track_publication_;
    _impl_.message_.enable_remote_track_publication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_enable_remote_track_publication(::livekit::proto::EnableRemoteTrackPublicationRequest* enable_remote_track_publication) {
  clear_message();
  if (enable_remote_track_publication) {
    set_has_enable_remote_track_publication();
    _impl_.message_.enable_remote_track_publication_ = enable_remote_track_publication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.enable_remote_track_publication)
}
inline ::livekit::proto::EnableRemoteTrackPublicationRequest* FfiRequest::_internal_mutable_enable_remote_track_publication() {
  if (!_internal_has_enable_remote_track_publication()) {
    clear_message();
    set_has_enable_remote_track_publication();
    _impl_.message_.enable_remote_track_publication_ = CreateMaybeMessage< ::livekit::proto::EnableRemoteTrackPublicationRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.enable_remote_track_publication_;
}
inline ::livekit::proto::EnableRemoteTrackPublicationRequest* FfiRequest::mutable_enable_remote_track_publication() {
  ::livekit::proto::EnableRemoteTrackPublicationRequest* _msg = _internal_mutable_enable_remote_track_publication();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.enable_remote_track_publication)
  return _msg;
}

// .livekit.proto.UpdateRemoteTrackPublicationDimensionRequest update_remote_track_publication_dimension = 43;
inline bool FfiRequest::_internal_has_update_remote_track_publication_dimension() const {
  return message_case() == kUpdateRemoteTrackPublicationDimension;
}
inline bool FfiRequest::has_update_remote_track_publication_dimension() const {
  return _internal_has_update_remote_track_publication_dimension();
}
inline void FfiRequest::set_has_update_remote_track_publication_dimension() {
  _impl_._oneof_case_[0] = kUpdateRemoteTrackPublicationDimension;
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* FfiRequest::release_update_remote_track_publication_dimension() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.update_remote_track_publication_dimension)
  if (_internal_has_update_remote_track_publication_dimension()) {
    clear_has_message();
    ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* temp = _impl_.message_.update_remote_track_publication_dimension_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.update_remote_track_publication_dimension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest& FfiRequest::_internal_update_remote_track_publication_dimension() const {
  return _internal_has_update_remote_track_publication_dimension()
      ? *_impl_.message_.update_remote_track_publication_dimension_
      : reinterpret_cast< ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest&>(::livekit::proto::_UpdateRemoteTrackPublicationDimensionRequest_default_instance_);
}
inline const ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest& FfiRequest::update_remote_track_publication_dimension() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.update_remote_track_publication_dimension)
  return _internal_update_remote_track_publication_dimension();
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* FfiRequest::unsafe_arena_release_update_remote_track_publication_dimension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.update_remote_track_publication_dimension)
  if (_internal_has_update_remote_track_publication_dimension()) {
    clear_has_message();
    ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* temp = _impl_.message_.update_remote_track_publication_dimension_;
    _impl_.message_.update_remote_track_publication_dimension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_update_remote_track_publication_dimension(::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* update_remote_track_publication_dimension) {
  clear_message();
  if (update_remote_track_publication_dimension) {
    set_has_update_remote_track_publication_dimension();
    _impl_.message_.update_remote_track_publication_dimension_ = update_remote_track_publication_dimension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.update_remote_track_publication_dimension)
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* FfiRequest::_internal_mutable_update_remote_track_publication_dimension() {
  if (!_internal_has_update_remote_track_publication_dimension()) {
    clear_message();
    set_has_update_remote_track_publication_dimension();
    _impl_.message_.update_remote_track_publication_dimension_ = CreateMaybeMessage< ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.update_remote_track_publication_dimension_;
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* FfiRequest::mutable_update_remote_track_publication_dimension() {
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* _msg = _internal_mutable_update_remote_track_publication_dimension();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.update_remote_track_publication_dimension)
  return _msg;
}

// .livekit.proto.SendStreamHeaderRequest send_stream_header = 44;
inline bool FfiRequest::_internal_has_send_stream_header() const {
  return message_case() == kSendStreamHeader;
}
inline bool FfiRequest::has_send_stream_header() const {
  return _internal_has_send_stream_header();
}
inline void FfiRequest::set_has_send_stream_header() {
  _impl_._oneof_case_[0] = kSendStreamHeader;
}
inline ::livekit::proto::SendStreamHeaderRequest* FfiRequest::release_send_stream_header() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.send_stream_header)
  if (_internal_has_send_stream_header()) {
    clear_has_message();
    ::livekit::proto::SendStreamHeaderRequest* temp = _impl_.message_.send_stream_header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamHeaderRequest& FfiRequest::_internal_send_stream_header() const {
  return _internal_has_send_stream_header()
      ? *_impl_.message_.send_stream_header_
      : reinterpret_cast< ::livekit::proto::SendStreamHeaderRequest&>(::livekit::proto::_SendStreamHeaderRequest_default_instance_);
}
inline const ::livekit::proto::SendStreamHeaderRequest& FfiRequest::send_stream_header() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.send_stream_header)
  return _internal_send_stream_header();
}
inline ::livekit::proto::SendStreamHeaderRequest* FfiRequest::unsafe_arena_release_send_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.send_stream_header)
  if (_internal_has_send_stream_header()) {
    clear_has_message();
    ::livekit::proto::SendStreamHeaderRequest* temp = _impl_.message_.send_stream_header_;
    _impl_.message_.send_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderRequest* send_stream_header) {
  clear_message();
  if (send_stream_header) {
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = send_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.send_stream_header)
}
inline ::livekit::proto::SendStreamHeaderRequest* FfiRequest::_internal_mutable_send_stream_header() {
  if (!_internal_has_send_stream_header()) {
    clear_message();
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = CreateMaybeMessage< ::livekit::proto::SendStreamHeaderRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_header_;
}
inline ::livekit::proto::SendStreamHeaderRequest* FfiRequest::mutable_send_stream_header() {
  ::livekit::proto::SendStreamHeaderRequest* _msg = _internal_mutable_send_stream_header();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.send_stream_header)
  return _msg;
}

// .livekit.proto.SendStreamChunkRequest send_stream_chunk = 45;
inline bool FfiRequest::_internal_has_send_stream_chunk() const {
  return message_case() == kSendStreamChunk;
}
inline bool FfiRequest::has_send_stream_chunk() const {
  return _internal_has_send_stream_chunk();
}
inline void FfiRequest::set_has_send_stream_chunk() {
  _impl_._oneof_case_[0] = kSendStreamChunk;
}
inline ::livekit::proto::SendStreamChunkRequest* FfiRequest::release_send_stream_chunk() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.send_stream_chunk)
  if (_internal_has_send_stream_chunk()) {
    clear_has_message();
    ::livekit::proto::SendStreamChunkRequest* temp = _impl_.message_.send_stream_chunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamChunkRequest& FfiRequest::_internal_send_stream_chunk() const {
  return _internal_has_send_stream_chunk()
      ? *_impl_.message_.send_stream_chunk_
      : reinterpret_cast< ::livekit::proto::SendStreamChunkRequest&>(::livekit::proto::_SendStreamChunkRequest_default_instance_);
}
inline const ::livekit::proto::SendStreamChunkRequest& FfiRequest::send_stream_chunk() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.send_stream_chunk)
  return _internal_send_stream_chunk();
}
inline ::livekit::proto::SendStreamChunkRequest* FfiRequest::unsafe_arena_release_send_stream_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.send_stream_chunk)
  if (_internal_has_send_stream_chunk()) {
    clear_has_message();
    ::livekit::proto::SendStreamChunkRequest* temp = _impl_.message_.send_stream_chunk_;
    _impl_.message_.send_stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkRequest* send_stream_chunk) {
  clear_message();
  if (send_stream_chunk) {
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = send_stream_chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.send_stream_chunk)
}
inline ::livekit::proto::SendStreamChunkRequest* FfiRequest::_internal_mutable_send_stream_chunk() {
  if (!_internal_has_send_stream_chunk()) {
    clear_message();
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = CreateMaybeMessage< ::livekit::proto::SendStreamChunkRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_chunk_;
}
inline ::livekit::proto::SendStreamChunkRequest* FfiRequest::mutable_send_stream_chunk() {
  ::livekit::proto::SendStreamChunkRequest* _msg = _internal_mutable_send_stream_chunk();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.send_stream_chunk)
  return _msg;
}

// .livekit.proto.SendStreamTrailerRequest send_stream_trailer = 46;
inline bool FfiRequest::_internal_has_send_stream_trailer() const {
  return message_case() == kSendStreamTrailer;
}
inline bool FfiRequest::has_send_stream_trailer() const {
  return _internal_has_send_stream_trailer();
}
inline void FfiRequest::set_has_send_stream_trailer() {
  _impl_._oneof_case_[0] = kSendStreamTrailer;
}
inline ::livekit::proto::SendStreamTrailerRequest* FfiRequest::release_send_stream_trailer() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.send_stream_trailer)
  if (_internal_has_send_stream_trailer()) {
    clear_has_message();
    ::livekit::proto::SendStreamTrailerRequest* temp = _impl_.message_.send_stream_trailer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamTrailerRequest& FfiRequest::_internal_send_stream_trailer() const {
  return _internal_has_send_stream_trailer()
      ? *_impl_.message_.send_stream_trailer_
      : reinterpret_cast< ::livekit::proto::SendStreamTrailerRequest&>(::livekit::proto::_SendStreamTrailerRequest_default_instance_);
}
inline const ::livekit::proto::SendStreamTrailerRequest& FfiRequest::send_stream_trailer() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.send_stream_trailer)
  return _internal_send_stream_trailer();
}
inline ::livekit::proto::SendStreamTrailerRequest* FfiRequest::unsafe_arena_release_send_stream_trailer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.send_stream_trailer)
  if (_internal_has_send_stream_trailer()) {
    clear_has_message();
    ::livekit::proto::SendStreamTrailerRequest* temp = _impl_.message_.send_stream_trailer_;
    _impl_.message_.send_stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerRequest* send_stream_trailer) {
  clear_message();
  if (send_stream_trailer) {
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = send_stream_trailer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.send_stream_trailer)
}
inline ::livekit::proto::SendStreamTrailerRequest* FfiRequest::_internal_mutable_send_stream_trailer() {
  if (!_internal_has_send_stream_trailer()) {
    clear_message();
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = CreateMaybeMessage< ::livekit::proto::SendStreamTrailerRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_trailer_;
}
inline ::livekit::proto::SendStreamTrailerRequest* FfiRequest::mutable_send_stream_trailer() {
  ::livekit::proto::SendStreamTrailerRequest* _msg = _internal_mutable_send_stream_trailer();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.send_stream_trailer)
  return _msg;
}

// .livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest set_data_channel_buffered_amount_low_threshold = 47;
inline bool FfiRequest::_internal_has_set_data_channel_buffered_amount_low_threshold() const {
  return message_case() == kSetDataChannelBufferedAmountLowThreshold;
}
inline bool FfiRequest::has_set_data_channel_buffered_amount_low_threshold() const {
  return _internal_has_set_data_channel_buffered_amount_low_threshold();
}
inline void FfiRequest::set_has_set_data_channel_buffered_amount_low_threshold() {
  _impl_._oneof_case_[0] = kSetDataChannelBufferedAmountLowThreshold;
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* FfiRequest::release_set_data_channel_buffered_amount_low_threshold() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.set_data_channel_buffered_amount_low_threshold)
  if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    clear_has_message();
    ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* temp = _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest& FfiRequest::_internal_set_data_channel_buffered_amount_low_threshold() const {
  return _internal_has_set_data_channel_buffered_amount_low_threshold()
      ? *_impl_.message_.set_data_channel_buffered_amount_low_threshold_
      : reinterpret_cast< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest&>(::livekit::proto::_SetDataChannelBufferedAmountLowThresholdRequest_default_instance_);
}
inline const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest& FfiRequest::set_data_channel_buffered_amount_low_threshold() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.set_data_channel_buffered_amount_low_threshold)
  return _internal_set_data_channel_buffered_amount_low_threshold();
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* FfiRequest::unsafe_arena_release_set_data_channel_buffered_amount_low_threshold() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.set_data_channel_buffered_amount_low_threshold)
  if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    clear_has_message();
    ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* temp = _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_set_data_channel_buffered_amount_low_threshold(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* set_data_channel_buffered_amount_low_threshold) {
  clear_message();
  if (set_data_channel_buffered_amount_low_threshold) {
    set_has_set_data_channel_buffered_amount_low_threshold();
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = set_data_channel_buffered_amount_low_threshold;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.set_data_channel_buffered_amount_low_threshold)
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* FfiRequest::_internal_mutable_set_data_channel_buffered_amount_low_threshold() {
  if (!_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    clear_message();
    set_has_set_data_channel_buffered_amount_low_threshold();
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = CreateMaybeMessage< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* FfiRequest::mutable_set_data_channel_buffered_amount_low_threshold() {
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* _msg = _internal_mutable_set_data_channel_buffered_amount_low_threshold();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.set_data_channel_buffered_amount_low_threshold)
  return _msg;
}

// .livekit.proto.LoadAudioFilterPluginRequest load_audio_filter_plugin = 49;
inline bool FfiRequest::_internal_has_load_audio_filter_plugin() const {
  return message_case() == kLoadAudioFilterPlugin;
}
inline bool FfiRequest::has_load_audio_filter_plugin() const {
  return _internal_has_load_audio_filter_plugin();
}
inline void FfiRequest::set_has_load_audio_filter_plugin() {
  _impl_._oneof_case_[0] = kLoadAudioFilterPlugin;
}
inline ::livekit::proto::LoadAudioFilterPluginRequest* FfiRequest::release_load_audio_filter_plugin() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.load_audio_filter_plugin)
  if (_internal_has_load_audio_filter_plugin()) {
    clear_has_message();
    ::livekit::proto::LoadAudioFilterPluginRequest* temp = _impl_.message_.load_audio_filter_plugin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.load_audio_filter_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::LoadAudioFilterPluginRequest& FfiRequest::_internal_load_audio_filter_plugin() const {
  return _internal_has_load_audio_filter_plugin()
      ? *_impl_.message_.load_audio_filter_plugin_
      : reinterpret_cast< ::livekit::proto::LoadAudioFilterPluginRequest&>(::livekit::proto::_LoadAudioFilterPluginRequest_default_instance_);
}
inline const ::livekit::proto::LoadAudioFilterPluginRequest& FfiRequest::load_audio_filter_plugin() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.load_audio_filter_plugin)
  return _internal_load_audio_filter_plugin();
}
inline ::livekit::proto::LoadAudioFilterPluginRequest* FfiRequest::unsafe_arena_release_load_audio_filter_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.load_audio_filter_plugin)
  if (_internal_has_load_audio_filter_plugin()) {
    clear_has_message();
    ::livekit::proto::LoadAudioFilterPluginRequest* temp = _impl_.message_.load_audio_filter_plugin_;
    _impl_.message_.load_audio_filter_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_load_audio_filter_plugin(::livekit::proto::LoadAudioFilterPluginRequest* load_audio_filter_plugin) {
  clear_message();
  if (load_audio_filter_plugin) {
    set_has_load_audio_filter_plugin();
    _impl_.message_.load_audio_filter_plugin_ = load_audio_filter_plugin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.load_audio_filter_plugin)
}
inline ::livekit::proto::LoadAudioFilterPluginRequest* FfiRequest::_internal_mutable_load_audio_filter_plugin() {
  if (!_internal_has_load_audio_filter_plugin()) {
    clear_message();
    set_has_load_audio_filter_plugin();
    _impl_.message_.load_audio_filter_plugin_ = CreateMaybeMessage< ::livekit::proto::LoadAudioFilterPluginRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.load_audio_filter_plugin_;
}
inline ::livekit::proto::LoadAudioFilterPluginRequest* FfiRequest::mutable_load_audio_filter_plugin() {
  ::livekit::proto::LoadAudioFilterPluginRequest* _msg = _internal_mutable_load_audio_filter_plugin();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.load_audio_filter_plugin)
  return _msg;
}

// .livekit.proto.NewApmRequest new_apm = 50;
inline bool FfiRequest::_internal_has_new_apm() const {
  return message_case() == kNewApm;
}
inline bool FfiRequest::has_new_apm() const {
  return _internal_has_new_apm();
}
inline void FfiRequest::set_has_new_apm() {
  _impl_._oneof_case_[0] = kNewApm;
}
inline ::livekit::proto::NewApmRequest* FfiRequest::release_new_apm() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.new_apm)
  if (_internal_has_new_apm()) {
    clear_has_message();
    ::livekit::proto::NewApmRequest* temp = _impl_.message_.new_apm_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_apm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewApmRequest& FfiRequest::_internal_new_apm() const {
  return _internal_has_new_apm()
      ? *_impl_.message_.new_apm_
      : reinterpret_cast< ::livekit::proto::NewApmRequest&>(::livekit::proto::_NewApmRequest_default_instance_);
}
inline const ::livekit::proto::NewApmRequest& FfiRequest::new_apm() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.new_apm)
  return _internal_new_apm();
}
inline ::livekit::proto::NewApmRequest* FfiRequest::unsafe_arena_release_new_apm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.new_apm)
  if (_internal_has_new_apm()) {
    clear_has_message();
    ::livekit::proto::NewApmRequest* temp = _impl_.message_.new_apm_;
    _impl_.message_.new_apm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_new_apm(::livekit::proto::NewApmRequest* new_apm) {
  clear_message();
  if (new_apm) {
    set_has_new_apm();
    _impl_.message_.new_apm_ = new_apm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.new_apm)
}
inline ::livekit::proto::NewApmRequest* FfiRequest::_internal_mutable_new_apm() {
  if (!_internal_has_new_apm()) {
    clear_message();
    set_has_new_apm();
    _impl_.message_.new_apm_ = CreateMaybeMessage< ::livekit::proto::NewApmRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.new_apm_;
}
inline ::livekit::proto::NewApmRequest* FfiRequest::mutable_new_apm() {
  ::livekit::proto::NewApmRequest* _msg = _internal_mutable_new_apm();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.new_apm)
  return _msg;
}

// .livekit.proto.ApmProcessStreamRequest apm_process_stream = 51;
inline bool FfiRequest::_internal_has_apm_process_stream() const {
  return message_case() == kApmProcessStream;
}
inline bool FfiRequest::has_apm_process_stream() const {
  return _internal_has_apm_process_stream();
}
inline void FfiRequest::set_has_apm_process_stream() {
  _impl_._oneof_case_[0] = kApmProcessStream;
}
inline ::livekit::proto::ApmProcessStreamRequest* FfiRequest::release_apm_process_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.apm_process_stream)
  if (_internal_has_apm_process_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessStreamRequest* temp = _impl_.message_.apm_process_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.apm_process_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ApmProcessStreamRequest& FfiRequest::_internal_apm_process_stream() const {
  return _internal_has_apm_process_stream()
      ? *_impl_.message_.apm_process_stream_
      : reinterpret_cast< ::livekit::proto::ApmProcessStreamRequest&>(::livekit::proto::_ApmProcessStreamRequest_default_instance_);
}
inline const ::livekit::proto::ApmProcessStreamRequest& FfiRequest::apm_process_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.apm_process_stream)
  return _internal_apm_process_stream();
}
inline ::livekit::proto::ApmProcessStreamRequest* FfiRequest::unsafe_arena_release_apm_process_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.apm_process_stream)
  if (_internal_has_apm_process_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessStreamRequest* temp = _impl_.message_.apm_process_stream_;
    _impl_.message_.apm_process_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_apm_process_stream(::livekit::proto::ApmProcessStreamRequest* apm_process_stream) {
  clear_message();
  if (apm_process_stream) {
    set_has_apm_process_stream();
    _impl_.message_.apm_process_stream_ = apm_process_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.apm_process_stream)
}
inline ::livekit::proto::ApmProcessStreamRequest* FfiRequest::_internal_mutable_apm_process_stream() {
  if (!_internal_has_apm_process_stream()) {
    clear_message();
    set_has_apm_process_stream();
    _impl_.message_.apm_process_stream_ = CreateMaybeMessage< ::livekit::proto::ApmProcessStreamRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.apm_process_stream_;
}
inline ::livekit::proto::ApmProcessStreamRequest* FfiRequest::mutable_apm_process_stream() {
  ::livekit::proto::ApmProcessStreamRequest* _msg = _internal_mutable_apm_process_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.apm_process_stream)
  return _msg;
}

// .livekit.proto.ApmProcessReverseStreamRequest apm_process_reverse_stream = 52;
inline bool FfiRequest::_internal_has_apm_process_reverse_stream() const {
  return message_case() == kApmProcessReverseStream;
}
inline bool FfiRequest::has_apm_process_reverse_stream() const {
  return _internal_has_apm_process_reverse_stream();
}
inline void FfiRequest::set_has_apm_process_reverse_stream() {
  _impl_._oneof_case_[0] = kApmProcessReverseStream;
}
inline ::livekit::proto::ApmProcessReverseStreamRequest* FfiRequest::release_apm_process_reverse_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiRequest.apm_process_reverse_stream)
  if (_internal_has_apm_process_reverse_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessReverseStreamRequest* temp = _impl_.message_.apm_process_reverse_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.apm_process_reverse_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ApmProcessReverseStreamRequest& FfiRequest::_internal_apm_process_reverse_stream() const {
  return _internal_has_apm_process_reverse_stream()
      ? *_impl_.message_.apm_process_reverse_stream_
      : reinterpret_cast< ::livekit::proto::ApmProcessReverseStreamRequest&>(::livekit::proto::_ApmProcessReverseStreamRequest_default_instance_);
}
inline const ::livekit::proto::ApmProcessReverseStreamRequest& FfiRequest::apm_process_reverse_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiRequest.apm_process_reverse_stream)
  return _internal_apm_process_reverse_stream();
}
inline ::livekit::proto::ApmProcessReverseStreamRequest* FfiRequest::unsafe_arena_release_apm_process_reverse_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiRequest.apm_process_reverse_stream)
  if (_internal_has_apm_process_reverse_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessReverseStreamRequest* temp = _impl_.message_.apm_process_reverse_stream_;
    _impl_.message_.apm_process_reverse_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiRequest::unsafe_arena_set_allocated_apm_process_reverse_stream(::livekit::proto::ApmProcessReverseStreamRequest* apm_process_reverse_stream) {
  clear_message();
  if (apm_process_reverse_stream) {
    set_has_apm_process_reverse_stream();
    _impl_.message_.apm_process_reverse_stream_ = apm_process_reverse_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiRequest.apm_process_reverse_stream)
}
inline ::livekit::proto::ApmProcessReverseStreamRequest* FfiRequest::_internal_mutable_apm_process_reverse_stream() {
  if (!_internal_has_apm_process_reverse_stream()) {
    clear_message();
    set_has_apm_process_reverse_stream();
    _impl_.message_.apm_process_reverse_stream_ = CreateMaybeMessage< ::livekit::proto::ApmProcessReverseStreamRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.apm_process_reverse_stream_;
}
inline ::livekit::proto::ApmProcessReverseStreamRequest* FfiRequest::mutable_apm_process_reverse_stream() {
  ::livekit::proto::ApmProcessReverseStreamRequest* _msg = _internal_mutable_apm_process_reverse_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiRequest.apm_process_reverse_stream)
  return _msg;
}

inline bool FfiRequest::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void FfiRequest::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline FfiRequest::MessageCase FfiRequest::message_case() const {
  return FfiRequest::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FfiResponse

// .livekit.proto.DisposeResponse dispose = 2;
inline bool FfiResponse::_internal_has_dispose() const {
  return message_case() == kDispose;
}
inline bool FfiResponse::has_dispose() const {
  return _internal_has_dispose();
}
inline void FfiResponse::set_has_dispose() {
  _impl_._oneof_case_[0] = kDispose;
}
inline void FfiResponse::clear_dispose() {
  if (_internal_has_dispose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dispose_;
    }
    clear_has_message();
  }
}
inline ::livekit::proto::DisposeResponse* FfiResponse::release_dispose() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.dispose)
  if (_internal_has_dispose()) {
    clear_has_message();
    ::livekit::proto::DisposeResponse* temp = _impl_.message_.dispose_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dispose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::DisposeResponse& FfiResponse::_internal_dispose() const {
  return _internal_has_dispose()
      ? *_impl_.message_.dispose_
      : reinterpret_cast< ::livekit::proto::DisposeResponse&>(::livekit::proto::_DisposeResponse_default_instance_);
}
inline const ::livekit::proto::DisposeResponse& FfiResponse::dispose() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.dispose)
  return _internal_dispose();
}
inline ::livekit::proto::DisposeResponse* FfiResponse::unsafe_arena_release_dispose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.dispose)
  if (_internal_has_dispose()) {
    clear_has_message();
    ::livekit::proto::DisposeResponse* temp = _impl_.message_.dispose_;
    _impl_.message_.dispose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_dispose(::livekit::proto::DisposeResponse* dispose) {
  clear_message();
  if (dispose) {
    set_has_dispose();
    _impl_.message_.dispose_ = dispose;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.dispose)
}
inline ::livekit::proto::DisposeResponse* FfiResponse::_internal_mutable_dispose() {
  if (!_internal_has_dispose()) {
    clear_message();
    set_has_dispose();
    _impl_.message_.dispose_ = CreateMaybeMessage< ::livekit::proto::DisposeResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dispose_;
}
inline ::livekit::proto::DisposeResponse* FfiResponse::mutable_dispose() {
  ::livekit::proto::DisposeResponse* _msg = _internal_mutable_dispose();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.dispose)
  return _msg;
}

// .livekit.proto.ConnectResponse connect = 3;
inline bool FfiResponse::_internal_has_connect() const {
  return message_case() == kConnect;
}
inline bool FfiResponse::has_connect() const {
  return _internal_has_connect();
}
inline void FfiResponse::set_has_connect() {
  _impl_._oneof_case_[0] = kConnect;
}
inline ::livekit::proto::ConnectResponse* FfiResponse::release_connect() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.connect)
  if (_internal_has_connect()) {
    clear_has_message();
    ::livekit::proto::ConnectResponse* temp = _impl_.message_.connect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ConnectResponse& FfiResponse::_internal_connect() const {
  return _internal_has_connect()
      ? *_impl_.message_.connect_
      : reinterpret_cast< ::livekit::proto::ConnectResponse&>(::livekit::proto::_ConnectResponse_default_instance_);
}
inline const ::livekit::proto::ConnectResponse& FfiResponse::connect() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.connect)
  return _internal_connect();
}
inline ::livekit::proto::ConnectResponse* FfiResponse::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.connect)
  if (_internal_has_connect()) {
    clear_has_message();
    ::livekit::proto::ConnectResponse* temp = _impl_.message_.connect_;
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_connect(::livekit::proto::ConnectResponse* connect) {
  clear_message();
  if (connect) {
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.connect)
}
inline ::livekit::proto::ConnectResponse* FfiResponse::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_message();
    set_has_connect();
    _impl_.message_.connect_ = CreateMaybeMessage< ::livekit::proto::ConnectResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.connect_;
}
inline ::livekit::proto::ConnectResponse* FfiResponse::mutable_connect() {
  ::livekit::proto::ConnectResponse* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.connect)
  return _msg;
}

// .livekit.proto.DisconnectResponse disconnect = 4;
inline bool FfiResponse::_internal_has_disconnect() const {
  return message_case() == kDisconnect;
}
inline bool FfiResponse::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void FfiResponse::set_has_disconnect() {
  _impl_._oneof_case_[0] = kDisconnect;
}
inline ::livekit::proto::DisconnectResponse* FfiResponse::release_disconnect() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_message();
    ::livekit::proto::DisconnectResponse* temp = _impl_.message_.disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::DisconnectResponse& FfiResponse::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *_impl_.message_.disconnect_
      : reinterpret_cast< ::livekit::proto::DisconnectResponse&>(::livekit::proto::_DisconnectResponse_default_instance_);
}
inline const ::livekit::proto::DisconnectResponse& FfiResponse::disconnect() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.disconnect)
  return _internal_disconnect();
}
inline ::livekit::proto::DisconnectResponse* FfiResponse::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_message();
    ::livekit::proto::DisconnectResponse* temp = _impl_.message_.disconnect_;
    _impl_.message_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_disconnect(::livekit::proto::DisconnectResponse* disconnect) {
  clear_message();
  if (disconnect) {
    set_has_disconnect();
    _impl_.message_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.disconnect)
}
inline ::livekit::proto::DisconnectResponse* FfiResponse::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_message();
    set_has_disconnect();
    _impl_.message_.disconnect_ = CreateMaybeMessage< ::livekit::proto::DisconnectResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.disconnect_;
}
inline ::livekit::proto::DisconnectResponse* FfiResponse::mutable_disconnect() {
  ::livekit::proto::DisconnectResponse* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.disconnect)
  return _msg;
}

// .livekit.proto.PublishTrackResponse publish_track = 5;
inline bool FfiResponse::_internal_has_publish_track() const {
  return message_case() == kPublishTrack;
}
inline bool FfiResponse::has_publish_track() const {
  return _internal_has_publish_track();
}
inline void FfiResponse::set_has_publish_track() {
  _impl_._oneof_case_[0] = kPublishTrack;
}
inline ::livekit::proto::PublishTrackResponse* FfiResponse::release_publish_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.publish_track)
  if (_internal_has_publish_track()) {
    clear_has_message();
    ::livekit::proto::PublishTrackResponse* temp = _impl_.message_.publish_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishTrackResponse& FfiResponse::_internal_publish_track() const {
  return _internal_has_publish_track()
      ? *_impl_.message_.publish_track_
      : reinterpret_cast< ::livekit::proto::PublishTrackResponse&>(::livekit::proto::_PublishTrackResponse_default_instance_);
}
inline const ::livekit::proto::PublishTrackResponse& FfiResponse::publish_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.publish_track)
  return _internal_publish_track();
}
inline ::livekit::proto::PublishTrackResponse* FfiResponse::unsafe_arena_release_publish_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.publish_track)
  if (_internal_has_publish_track()) {
    clear_has_message();
    ::livekit::proto::PublishTrackResponse* temp = _impl_.message_.publish_track_;
    _impl_.message_.publish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_publish_track(::livekit::proto::PublishTrackResponse* publish_track) {
  clear_message();
  if (publish_track) {
    set_has_publish_track();
    _impl_.message_.publish_track_ = publish_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.publish_track)
}
inline ::livekit::proto::PublishTrackResponse* FfiResponse::_internal_mutable_publish_track() {
  if (!_internal_has_publish_track()) {
    clear_message();
    set_has_publish_track();
    _impl_.message_.publish_track_ = CreateMaybeMessage< ::livekit::proto::PublishTrackResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_track_;
}
inline ::livekit::proto::PublishTrackResponse* FfiResponse::mutable_publish_track() {
  ::livekit::proto::PublishTrackResponse* _msg = _internal_mutable_publish_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.publish_track)
  return _msg;
}

// .livekit.proto.UnpublishTrackResponse unpublish_track = 6;
inline bool FfiResponse::_internal_has_unpublish_track() const {
  return message_case() == kUnpublishTrack;
}
inline bool FfiResponse::has_unpublish_track() const {
  return _internal_has_unpublish_track();
}
inline void FfiResponse::set_has_unpublish_track() {
  _impl_._oneof_case_[0] = kUnpublishTrack;
}
inline ::livekit::proto::UnpublishTrackResponse* FfiResponse::release_unpublish_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.unpublish_track)
  if (_internal_has_unpublish_track()) {
    clear_has_message();
    ::livekit::proto::UnpublishTrackResponse* temp = _impl_.message_.unpublish_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.unpublish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UnpublishTrackResponse& FfiResponse::_internal_unpublish_track() const {
  return _internal_has_unpublish_track()
      ? *_impl_.message_.unpublish_track_
      : reinterpret_cast< ::livekit::proto::UnpublishTrackResponse&>(::livekit::proto::_UnpublishTrackResponse_default_instance_);
}
inline const ::livekit::proto::UnpublishTrackResponse& FfiResponse::unpublish_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.unpublish_track)
  return _internal_unpublish_track();
}
inline ::livekit::proto::UnpublishTrackResponse* FfiResponse::unsafe_arena_release_unpublish_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.unpublish_track)
  if (_internal_has_unpublish_track()) {
    clear_has_message();
    ::livekit::proto::UnpublishTrackResponse* temp = _impl_.message_.unpublish_track_;
    _impl_.message_.unpublish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_unpublish_track(::livekit::proto::UnpublishTrackResponse* unpublish_track) {
  clear_message();
  if (unpublish_track) {
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = unpublish_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.unpublish_track)
}
inline ::livekit::proto::UnpublishTrackResponse* FfiResponse::_internal_mutable_unpublish_track() {
  if (!_internal_has_unpublish_track()) {
    clear_message();
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = CreateMaybeMessage< ::livekit::proto::UnpublishTrackResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.unpublish_track_;
}
inline ::livekit::proto::UnpublishTrackResponse* FfiResponse::mutable_unpublish_track() {
  ::livekit::proto::UnpublishTrackResponse* _msg = _internal_mutable_unpublish_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.unpublish_track)
  return _msg;
}

// .livekit.proto.PublishDataResponse publish_data = 7;
inline bool FfiResponse::_internal_has_publish_data() const {
  return message_case() == kPublishData;
}
inline bool FfiResponse::has_publish_data() const {
  return _internal_has_publish_data();
}
inline void FfiResponse::set_has_publish_data() {
  _impl_._oneof_case_[0] = kPublishData;
}
inline ::livekit::proto::PublishDataResponse* FfiResponse::release_publish_data() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.publish_data)
  if (_internal_has_publish_data()) {
    clear_has_message();
    ::livekit::proto::PublishDataResponse* temp = _impl_.message_.publish_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishDataResponse& FfiResponse::_internal_publish_data() const {
  return _internal_has_publish_data()
      ? *_impl_.message_.publish_data_
      : reinterpret_cast< ::livekit::proto::PublishDataResponse&>(::livekit::proto::_PublishDataResponse_default_instance_);
}
inline const ::livekit::proto::PublishDataResponse& FfiResponse::publish_data() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.publish_data)
  return _internal_publish_data();
}
inline ::livekit::proto::PublishDataResponse* FfiResponse::unsafe_arena_release_publish_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.publish_data)
  if (_internal_has_publish_data()) {
    clear_has_message();
    ::livekit::proto::PublishDataResponse* temp = _impl_.message_.publish_data_;
    _impl_.message_.publish_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_publish_data(::livekit::proto::PublishDataResponse* publish_data) {
  clear_message();
  if (publish_data) {
    set_has_publish_data();
    _impl_.message_.publish_data_ = publish_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.publish_data)
}
inline ::livekit::proto::PublishDataResponse* FfiResponse::_internal_mutable_publish_data() {
  if (!_internal_has_publish_data()) {
    clear_message();
    set_has_publish_data();
    _impl_.message_.publish_data_ = CreateMaybeMessage< ::livekit::proto::PublishDataResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_data_;
}
inline ::livekit::proto::PublishDataResponse* FfiResponse::mutable_publish_data() {
  ::livekit::proto::PublishDataResponse* _msg = _internal_mutable_publish_data();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.publish_data)
  return _msg;
}

// .livekit.proto.SetSubscribedResponse set_subscribed = 8;
inline bool FfiResponse::_internal_has_set_subscribed() const {
  return message_case() == kSetSubscribed;
}
inline bool FfiResponse::has_set_subscribed() const {
  return _internal_has_set_subscribed();
}
inline void FfiResponse::set_has_set_subscribed() {
  _impl_._oneof_case_[0] = kSetSubscribed;
}
inline ::livekit::proto::SetSubscribedResponse* FfiResponse::release_set_subscribed() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.set_subscribed)
  if (_internal_has_set_subscribed()) {
    clear_has_message();
    ::livekit::proto::SetSubscribedResponse* temp = _impl_.message_.set_subscribed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_subscribed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetSubscribedResponse& FfiResponse::_internal_set_subscribed() const {
  return _internal_has_set_subscribed()
      ? *_impl_.message_.set_subscribed_
      : reinterpret_cast< ::livekit::proto::SetSubscribedResponse&>(::livekit::proto::_SetSubscribedResponse_default_instance_);
}
inline const ::livekit::proto::SetSubscribedResponse& FfiResponse::set_subscribed() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.set_subscribed)
  return _internal_set_subscribed();
}
inline ::livekit::proto::SetSubscribedResponse* FfiResponse::unsafe_arena_release_set_subscribed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.set_subscribed)
  if (_internal_has_set_subscribed()) {
    clear_has_message();
    ::livekit::proto::SetSubscribedResponse* temp = _impl_.message_.set_subscribed_;
    _impl_.message_.set_subscribed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_set_subscribed(::livekit::proto::SetSubscribedResponse* set_subscribed) {
  clear_message();
  if (set_subscribed) {
    set_has_set_subscribed();
    _impl_.message_.set_subscribed_ = set_subscribed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.set_subscribed)
}
inline ::livekit::proto::SetSubscribedResponse* FfiResponse::_internal_mutable_set_subscribed() {
  if (!_internal_has_set_subscribed()) {
    clear_message();
    set_has_set_subscribed();
    _impl_.message_.set_subscribed_ = CreateMaybeMessage< ::livekit::proto::SetSubscribedResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.set_subscribed_;
}
inline ::livekit::proto::SetSubscribedResponse* FfiResponse::mutable_set_subscribed() {
  ::livekit::proto::SetSubscribedResponse* _msg = _internal_mutable_set_subscribed();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.set_subscribed)
  return _msg;
}

// .livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
inline bool FfiResponse::_internal_has_set_local_metadata() const {
  return message_case() == kSetLocalMetadata;
}
inline bool FfiResponse::has_set_local_metadata() const {
  return _internal_has_set_local_metadata();
}
inline void FfiResponse::set_has_set_local_metadata() {
  _impl_._oneof_case_[0] = kSetLocalMetadata;
}
inline ::livekit::proto::SetLocalMetadataResponse* FfiResponse::release_set_local_metadata() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.set_local_metadata)
  if (_internal_has_set_local_metadata()) {
    clear_has_message();
    ::livekit::proto::SetLocalMetadataResponse* temp = _impl_.message_.set_local_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalMetadataResponse& FfiResponse::_internal_set_local_metadata() const {
  return _internal_has_set_local_metadata()
      ? *_impl_.message_.set_local_metadata_
      : reinterpret_cast< ::livekit::proto::SetLocalMetadataResponse&>(::livekit::proto::_SetLocalMetadataResponse_default_instance_);
}
inline const ::livekit::proto::SetLocalMetadataResponse& FfiResponse::set_local_metadata() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.set_local_metadata)
  return _internal_set_local_metadata();
}
inline ::livekit::proto::SetLocalMetadataResponse* FfiResponse::unsafe_arena_release_set_local_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.set_local_metadata)
  if (_internal_has_set_local_metadata()) {
    clear_has_message();
    ::livekit::proto::SetLocalMetadataResponse* temp = _impl_.message_.set_local_metadata_;
    _impl_.message_.set_local_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataResponse* set_local_metadata) {
  clear_message();
  if (set_local_metadata) {
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = set_local_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.set_local_metadata)
}
inline ::livekit::proto::SetLocalMetadataResponse* FfiResponse::_internal_mutable_set_local_metadata() {
  if (!_internal_has_set_local_metadata()) {
    clear_message();
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = CreateMaybeMessage< ::livekit::proto::SetLocalMetadataResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_metadata_;
}
inline ::livekit::proto::SetLocalMetadataResponse* FfiResponse::mutable_set_local_metadata() {
  ::livekit::proto::SetLocalMetadataResponse* _msg = _internal_mutable_set_local_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.set_local_metadata)
  return _msg;
}

// .livekit.proto.SetLocalNameResponse set_local_name = 10;
inline bool FfiResponse::_internal_has_set_local_name() const {
  return message_case() == kSetLocalName;
}
inline bool FfiResponse::has_set_local_name() const {
  return _internal_has_set_local_name();
}
inline void FfiResponse::set_has_set_local_name() {
  _impl_._oneof_case_[0] = kSetLocalName;
}
inline ::livekit::proto::SetLocalNameResponse* FfiResponse::release_set_local_name() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.set_local_name)
  if (_internal_has_set_local_name()) {
    clear_has_message();
    ::livekit::proto::SetLocalNameResponse* temp = _impl_.message_.set_local_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalNameResponse& FfiResponse::_internal_set_local_name() const {
  return _internal_has_set_local_name()
      ? *_impl_.message_.set_local_name_
      : reinterpret_cast< ::livekit::proto::SetLocalNameResponse&>(::livekit::proto::_SetLocalNameResponse_default_instance_);
}
inline const ::livekit::proto::SetLocalNameResponse& FfiResponse::set_local_name() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.set_local_name)
  return _internal_set_local_name();
}
inline ::livekit::proto::SetLocalNameResponse* FfiResponse::unsafe_arena_release_set_local_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.set_local_name)
  if (_internal_has_set_local_name()) {
    clear_has_message();
    ::livekit::proto::SetLocalNameResponse* temp = _impl_.message_.set_local_name_;
    _impl_.message_.set_local_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_set_local_name(::livekit::proto::SetLocalNameResponse* set_local_name) {
  clear_message();
  if (set_local_name) {
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = set_local_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.set_local_name)
}
inline ::livekit::proto::SetLocalNameResponse* FfiResponse::_internal_mutable_set_local_name() {
  if (!_internal_has_set_local_name()) {
    clear_message();
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = CreateMaybeMessage< ::livekit::proto::SetLocalNameResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_name_;
}
inline ::livekit::proto::SetLocalNameResponse* FfiResponse::mutable_set_local_name() {
  ::livekit::proto::SetLocalNameResponse* _msg = _internal_mutable_set_local_name();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.set_local_name)
  return _msg;
}

// .livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
inline bool FfiResponse::_internal_has_set_local_attributes() const {
  return message_case() == kSetLocalAttributes;
}
inline bool FfiResponse::has_set_local_attributes() const {
  return _internal_has_set_local_attributes();
}
inline void FfiResponse::set_has_set_local_attributes() {
  _impl_._oneof_case_[0] = kSetLocalAttributes;
}
inline ::livekit::proto::SetLocalAttributesResponse* FfiResponse::release_set_local_attributes() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.set_local_attributes)
  if (_internal_has_set_local_attributes()) {
    clear_has_message();
    ::livekit::proto::SetLocalAttributesResponse* temp = _impl_.message_.set_local_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalAttributesResponse& FfiResponse::_internal_set_local_attributes() const {
  return _internal_has_set_local_attributes()
      ? *_impl_.message_.set_local_attributes_
      : reinterpret_cast< ::livekit::proto::SetLocalAttributesResponse&>(::livekit::proto::_SetLocalAttributesResponse_default_instance_);
}
inline const ::livekit::proto::SetLocalAttributesResponse& FfiResponse::set_local_attributes() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.set_local_attributes)
  return _internal_set_local_attributes();
}
inline ::livekit::proto::SetLocalAttributesResponse* FfiResponse::unsafe_arena_release_set_local_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.set_local_attributes)
  if (_internal_has_set_local_attributes()) {
    clear_has_message();
    ::livekit::proto::SetLocalAttributesResponse* temp = _impl_.message_.set_local_attributes_;
    _impl_.message_.set_local_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesResponse* set_local_attributes) {
  clear_message();
  if (set_local_attributes) {
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = set_local_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.set_local_attributes)
}
inline ::livekit::proto::SetLocalAttributesResponse* FfiResponse::_internal_mutable_set_local_attributes() {
  if (!_internal_has_set_local_attributes()) {
    clear_message();
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = CreateMaybeMessage< ::livekit::proto::SetLocalAttributesResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_attributes_;
}
inline ::livekit::proto::SetLocalAttributesResponse* FfiResponse::mutable_set_local_attributes() {
  ::livekit::proto::SetLocalAttributesResponse* _msg = _internal_mutable_set_local_attributes();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.set_local_attributes)
  return _msg;
}

// .livekit.proto.GetSessionStatsResponse get_session_stats = 12;
inline bool FfiResponse::_internal_has_get_session_stats() const {
  return message_case() == kGetSessionStats;
}
inline bool FfiResponse::has_get_session_stats() const {
  return _internal_has_get_session_stats();
}
inline void FfiResponse::set_has_get_session_stats() {
  _impl_._oneof_case_[0] = kGetSessionStats;
}
inline ::livekit::proto::GetSessionStatsResponse* FfiResponse::release_get_session_stats() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.get_session_stats)
  if (_internal_has_get_session_stats()) {
    clear_has_message();
    ::livekit::proto::GetSessionStatsResponse* temp = _impl_.message_.get_session_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.get_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::GetSessionStatsResponse& FfiResponse::_internal_get_session_stats() const {
  return _internal_has_get_session_stats()
      ? *_impl_.message_.get_session_stats_
      : reinterpret_cast< ::livekit::proto::GetSessionStatsResponse&>(::livekit::proto::_GetSessionStatsResponse_default_instance_);
}
inline const ::livekit::proto::GetSessionStatsResponse& FfiResponse::get_session_stats() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.get_session_stats)
  return _internal_get_session_stats();
}
inline ::livekit::proto::GetSessionStatsResponse* FfiResponse::unsafe_arena_release_get_session_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.get_session_stats)
  if (_internal_has_get_session_stats()) {
    clear_has_message();
    ::livekit::proto::GetSessionStatsResponse* temp = _impl_.message_.get_session_stats_;
    _impl_.message_.get_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_get_session_stats(::livekit::proto::GetSessionStatsResponse* get_session_stats) {
  clear_message();
  if (get_session_stats) {
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = get_session_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.get_session_stats)
}
inline ::livekit::proto::GetSessionStatsResponse* FfiResponse::_internal_mutable_get_session_stats() {
  if (!_internal_has_get_session_stats()) {
    clear_message();
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = CreateMaybeMessage< ::livekit::proto::GetSessionStatsResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.get_session_stats_;
}
inline ::livekit::proto::GetSessionStatsResponse* FfiResponse::mutable_get_session_stats() {
  ::livekit::proto::GetSessionStatsResponse* _msg = _internal_mutable_get_session_stats();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.get_session_stats)
  return _msg;
}

// .livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
inline bool FfiResponse::_internal_has_publish_transcription() const {
  return message_case() == kPublishTranscription;
}
inline bool FfiResponse::has_publish_transcription() const {
  return _internal_has_publish_transcription();
}
inline void FfiResponse::set_has_publish_transcription() {
  _impl_._oneof_case_[0] = kPublishTranscription;
}
inline ::livekit::proto::PublishTranscriptionResponse* FfiResponse::release_publish_transcription() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.publish_transcription)
  if (_internal_has_publish_transcription()) {
    clear_has_message();
    ::livekit::proto::PublishTranscriptionResponse* temp = _impl_.message_.publish_transcription_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishTranscriptionResponse& FfiResponse::_internal_publish_transcription() const {
  return _internal_has_publish_transcription()
      ? *_impl_.message_.publish_transcription_
      : reinterpret_cast< ::livekit::proto::PublishTranscriptionResponse&>(::livekit::proto::_PublishTranscriptionResponse_default_instance_);
}
inline const ::livekit::proto::PublishTranscriptionResponse& FfiResponse::publish_transcription() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.publish_transcription)
  return _internal_publish_transcription();
}
inline ::livekit::proto::PublishTranscriptionResponse* FfiResponse::unsafe_arena_release_publish_transcription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.publish_transcription)
  if (_internal_has_publish_transcription()) {
    clear_has_message();
    ::livekit::proto::PublishTranscriptionResponse* temp = _impl_.message_.publish_transcription_;
    _impl_.message_.publish_transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionResponse* publish_transcription) {
  clear_message();
  if (publish_transcription) {
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = publish_transcription;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.publish_transcription)
}
inline ::livekit::proto::PublishTranscriptionResponse* FfiResponse::_internal_mutable_publish_transcription() {
  if (!_internal_has_publish_transcription()) {
    clear_message();
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = CreateMaybeMessage< ::livekit::proto::PublishTranscriptionResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_transcription_;
}
inline ::livekit::proto::PublishTranscriptionResponse* FfiResponse::mutable_publish_transcription() {
  ::livekit::proto::PublishTranscriptionResponse* _msg = _internal_mutable_publish_transcription();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.publish_transcription)
  return _msg;
}

// .livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
inline bool FfiResponse::_internal_has_publish_sip_dtmf() const {
  return message_case() == kPublishSipDtmf;
}
inline bool FfiResponse::has_publish_sip_dtmf() const {
  return _internal_has_publish_sip_dtmf();
}
inline void FfiResponse::set_has_publish_sip_dtmf() {
  _impl_._oneof_case_[0] = kPublishSipDtmf;
}
inline ::livekit::proto::PublishSipDtmfResponse* FfiResponse::release_publish_sip_dtmf() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.publish_sip_dtmf)
  if (_internal_has_publish_sip_dtmf()) {
    clear_has_message();
    ::livekit::proto::PublishSipDtmfResponse* temp = _impl_.message_.publish_sip_dtmf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishSipDtmfResponse& FfiResponse::_internal_publish_sip_dtmf() const {
  return _internal_has_publish_sip_dtmf()
      ? *_impl_.message_.publish_sip_dtmf_
      : reinterpret_cast< ::livekit::proto::PublishSipDtmfResponse&>(::livekit::proto::_PublishSipDtmfResponse_default_instance_);
}
inline const ::livekit::proto::PublishSipDtmfResponse& FfiResponse::publish_sip_dtmf() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.publish_sip_dtmf)
  return _internal_publish_sip_dtmf();
}
inline ::livekit::proto::PublishSipDtmfResponse* FfiResponse::unsafe_arena_release_publish_sip_dtmf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.publish_sip_dtmf)
  if (_internal_has_publish_sip_dtmf()) {
    clear_has_message();
    ::livekit::proto::PublishSipDtmfResponse* temp = _impl_.message_.publish_sip_dtmf_;
    _impl_.message_.publish_sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfResponse* publish_sip_dtmf) {
  clear_message();
  if (publish_sip_dtmf) {
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = publish_sip_dtmf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.publish_sip_dtmf)
}
inline ::livekit::proto::PublishSipDtmfResponse* FfiResponse::_internal_mutable_publish_sip_dtmf() {
  if (!_internal_has_publish_sip_dtmf()) {
    clear_message();
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = CreateMaybeMessage< ::livekit::proto::PublishSipDtmfResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_sip_dtmf_;
}
inline ::livekit::proto::PublishSipDtmfResponse* FfiResponse::mutable_publish_sip_dtmf() {
  ::livekit::proto::PublishSipDtmfResponse* _msg = _internal_mutable_publish_sip_dtmf();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.publish_sip_dtmf)
  return _msg;
}

// .livekit.proto.CreateVideoTrackResponse create_video_track = 15;
inline bool FfiResponse::_internal_has_create_video_track() const {
  return message_case() == kCreateVideoTrack;
}
inline bool FfiResponse::has_create_video_track() const {
  return _internal_has_create_video_track();
}
inline void FfiResponse::set_has_create_video_track() {
  _impl_._oneof_case_[0] = kCreateVideoTrack;
}
inline ::livekit::proto::CreateVideoTrackResponse* FfiResponse::release_create_video_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.create_video_track)
  if (_internal_has_create_video_track()) {
    clear_has_message();
    ::livekit::proto::CreateVideoTrackResponse* temp = _impl_.message_.create_video_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.create_video_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CreateVideoTrackResponse& FfiResponse::_internal_create_video_track() const {
  return _internal_has_create_video_track()
      ? *_impl_.message_.create_video_track_
      : reinterpret_cast< ::livekit::proto::CreateVideoTrackResponse&>(::livekit::proto::_CreateVideoTrackResponse_default_instance_);
}
inline const ::livekit::proto::CreateVideoTrackResponse& FfiResponse::create_video_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.create_video_track)
  return _internal_create_video_track();
}
inline ::livekit::proto::CreateVideoTrackResponse* FfiResponse::unsafe_arena_release_create_video_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.create_video_track)
  if (_internal_has_create_video_track()) {
    clear_has_message();
    ::livekit::proto::CreateVideoTrackResponse* temp = _impl_.message_.create_video_track_;
    _impl_.message_.create_video_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_create_video_track(::livekit::proto::CreateVideoTrackResponse* create_video_track) {
  clear_message();
  if (create_video_track) {
    set_has_create_video_track();
    _impl_.message_.create_video_track_ = create_video_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.create_video_track)
}
inline ::livekit::proto::CreateVideoTrackResponse* FfiResponse::_internal_mutable_create_video_track() {
  if (!_internal_has_create_video_track()) {
    clear_message();
    set_has_create_video_track();
    _impl_.message_.create_video_track_ = CreateMaybeMessage< ::livekit::proto::CreateVideoTrackResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.create_video_track_;
}
inline ::livekit::proto::CreateVideoTrackResponse* FfiResponse::mutable_create_video_track() {
  ::livekit::proto::CreateVideoTrackResponse* _msg = _internal_mutable_create_video_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.create_video_track)
  return _msg;
}

// .livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
inline bool FfiResponse::_internal_has_create_audio_track() const {
  return message_case() == kCreateAudioTrack;
}
inline bool FfiResponse::has_create_audio_track() const {
  return _internal_has_create_audio_track();
}
inline void FfiResponse::set_has_create_audio_track() {
  _impl_._oneof_case_[0] = kCreateAudioTrack;
}
inline ::livekit::proto::CreateAudioTrackResponse* FfiResponse::release_create_audio_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.create_audio_track)
  if (_internal_has_create_audio_track()) {
    clear_has_message();
    ::livekit::proto::CreateAudioTrackResponse* temp = _impl_.message_.create_audio_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.create_audio_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CreateAudioTrackResponse& FfiResponse::_internal_create_audio_track() const {
  return _internal_has_create_audio_track()
      ? *_impl_.message_.create_audio_track_
      : reinterpret_cast< ::livekit::proto::CreateAudioTrackResponse&>(::livekit::proto::_CreateAudioTrackResponse_default_instance_);
}
inline const ::livekit::proto::CreateAudioTrackResponse& FfiResponse::create_audio_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.create_audio_track)
  return _internal_create_audio_track();
}
inline ::livekit::proto::CreateAudioTrackResponse* FfiResponse::unsafe_arena_release_create_audio_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.create_audio_track)
  if (_internal_has_create_audio_track()) {
    clear_has_message();
    ::livekit::proto::CreateAudioTrackResponse* temp = _impl_.message_.create_audio_track_;
    _impl_.message_.create_audio_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_create_audio_track(::livekit::proto::CreateAudioTrackResponse* create_audio_track) {
  clear_message();
  if (create_audio_track) {
    set_has_create_audio_track();
    _impl_.message_.create_audio_track_ = create_audio_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.create_audio_track)
}
inline ::livekit::proto::CreateAudioTrackResponse* FfiResponse::_internal_mutable_create_audio_track() {
  if (!_internal_has_create_audio_track()) {
    clear_message();
    set_has_create_audio_track();
    _impl_.message_.create_audio_track_ = CreateMaybeMessage< ::livekit::proto::CreateAudioTrackResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.create_audio_track_;
}
inline ::livekit::proto::CreateAudioTrackResponse* FfiResponse::mutable_create_audio_track() {
  ::livekit::proto::CreateAudioTrackResponse* _msg = _internal_mutable_create_audio_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.create_audio_track)
  return _msg;
}

// .livekit.proto.LocalTrackMuteResponse local_track_mute = 17;
inline bool FfiResponse::_internal_has_local_track_mute() const {
  return message_case() == kLocalTrackMute;
}
inline bool FfiResponse::has_local_track_mute() const {
  return _internal_has_local_track_mute();
}
inline void FfiResponse::set_has_local_track_mute() {
  _impl_._oneof_case_[0] = kLocalTrackMute;
}
inline ::livekit::proto::LocalTrackMuteResponse* FfiResponse::release_local_track_mute() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.local_track_mute)
  if (_internal_has_local_track_mute()) {
    clear_has_message();
    ::livekit::proto::LocalTrackMuteResponse* temp = _impl_.message_.local_track_mute_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.local_track_mute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::LocalTrackMuteResponse& FfiResponse::_internal_local_track_mute() const {
  return _internal_has_local_track_mute()
      ? *_impl_.message_.local_track_mute_
      : reinterpret_cast< ::livekit::proto::LocalTrackMuteResponse&>(::livekit::proto::_LocalTrackMuteResponse_default_instance_);
}
inline const ::livekit::proto::LocalTrackMuteResponse& FfiResponse::local_track_mute() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.local_track_mute)
  return _internal_local_track_mute();
}
inline ::livekit::proto::LocalTrackMuteResponse* FfiResponse::unsafe_arena_release_local_track_mute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.local_track_mute)
  if (_internal_has_local_track_mute()) {
    clear_has_message();
    ::livekit::proto::LocalTrackMuteResponse* temp = _impl_.message_.local_track_mute_;
    _impl_.message_.local_track_mute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_local_track_mute(::livekit::proto::LocalTrackMuteResponse* local_track_mute) {
  clear_message();
  if (local_track_mute) {
    set_has_local_track_mute();
    _impl_.message_.local_track_mute_ = local_track_mute;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.local_track_mute)
}
inline ::livekit::proto::LocalTrackMuteResponse* FfiResponse::_internal_mutable_local_track_mute() {
  if (!_internal_has_local_track_mute()) {
    clear_message();
    set_has_local_track_mute();
    _impl_.message_.local_track_mute_ = CreateMaybeMessage< ::livekit::proto::LocalTrackMuteResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.local_track_mute_;
}
inline ::livekit::proto::LocalTrackMuteResponse* FfiResponse::mutable_local_track_mute() {
  ::livekit::proto::LocalTrackMuteResponse* _msg = _internal_mutable_local_track_mute();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.local_track_mute)
  return _msg;
}

// .livekit.proto.EnableRemoteTrackResponse enable_remote_track = 18;
inline bool FfiResponse::_internal_has_enable_remote_track() const {
  return message_case() == kEnableRemoteTrack;
}
inline bool FfiResponse::has_enable_remote_track() const {
  return _internal_has_enable_remote_track();
}
inline void FfiResponse::set_has_enable_remote_track() {
  _impl_._oneof_case_[0] = kEnableRemoteTrack;
}
inline ::livekit::proto::EnableRemoteTrackResponse* FfiResponse::release_enable_remote_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.enable_remote_track)
  if (_internal_has_enable_remote_track()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackResponse* temp = _impl_.message_.enable_remote_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.enable_remote_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::EnableRemoteTrackResponse& FfiResponse::_internal_enable_remote_track() const {
  return _internal_has_enable_remote_track()
      ? *_impl_.message_.enable_remote_track_
      : reinterpret_cast< ::livekit::proto::EnableRemoteTrackResponse&>(::livekit::proto::_EnableRemoteTrackResponse_default_instance_);
}
inline const ::livekit::proto::EnableRemoteTrackResponse& FfiResponse::enable_remote_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.enable_remote_track)
  return _internal_enable_remote_track();
}
inline ::livekit::proto::EnableRemoteTrackResponse* FfiResponse::unsafe_arena_release_enable_remote_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.enable_remote_track)
  if (_internal_has_enable_remote_track()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackResponse* temp = _impl_.message_.enable_remote_track_;
    _impl_.message_.enable_remote_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_enable_remote_track(::livekit::proto::EnableRemoteTrackResponse* enable_remote_track) {
  clear_message();
  if (enable_remote_track) {
    set_has_enable_remote_track();
    _impl_.message_.enable_remote_track_ = enable_remote_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.enable_remote_track)
}
inline ::livekit::proto::EnableRemoteTrackResponse* FfiResponse::_internal_mutable_enable_remote_track() {
  if (!_internal_has_enable_remote_track()) {
    clear_message();
    set_has_enable_remote_track();
    _impl_.message_.enable_remote_track_ = CreateMaybeMessage< ::livekit::proto::EnableRemoteTrackResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.enable_remote_track_;
}
inline ::livekit::proto::EnableRemoteTrackResponse* FfiResponse::mutable_enable_remote_track() {
  ::livekit::proto::EnableRemoteTrackResponse* _msg = _internal_mutable_enable_remote_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.enable_remote_track)
  return _msg;
}

// .livekit.proto.GetStatsResponse get_stats = 19;
inline bool FfiResponse::_internal_has_get_stats() const {
  return message_case() == kGetStats;
}
inline bool FfiResponse::has_get_stats() const {
  return _internal_has_get_stats();
}
inline void FfiResponse::set_has_get_stats() {
  _impl_._oneof_case_[0] = kGetStats;
}
inline ::livekit::proto::GetStatsResponse* FfiResponse::release_get_stats() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.get_stats)
  if (_internal_has_get_stats()) {
    clear_has_message();
    ::livekit::proto::GetStatsResponse* temp = _impl_.message_.get_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.get_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::GetStatsResponse& FfiResponse::_internal_get_stats() const {
  return _internal_has_get_stats()
      ? *_impl_.message_.get_stats_
      : reinterpret_cast< ::livekit::proto::GetStatsResponse&>(::livekit::proto::_GetStatsResponse_default_instance_);
}
inline const ::livekit::proto::GetStatsResponse& FfiResponse::get_stats() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.get_stats)
  return _internal_get_stats();
}
inline ::livekit::proto::GetStatsResponse* FfiResponse::unsafe_arena_release_get_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.get_stats)
  if (_internal_has_get_stats()) {
    clear_has_message();
    ::livekit::proto::GetStatsResponse* temp = _impl_.message_.get_stats_;
    _impl_.message_.get_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_get_stats(::livekit::proto::GetStatsResponse* get_stats) {
  clear_message();
  if (get_stats) {
    set_has_get_stats();
    _impl_.message_.get_stats_ = get_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.get_stats)
}
inline ::livekit::proto::GetStatsResponse* FfiResponse::_internal_mutable_get_stats() {
  if (!_internal_has_get_stats()) {
    clear_message();
    set_has_get_stats();
    _impl_.message_.get_stats_ = CreateMaybeMessage< ::livekit::proto::GetStatsResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.get_stats_;
}
inline ::livekit::proto::GetStatsResponse* FfiResponse::mutable_get_stats() {
  ::livekit::proto::GetStatsResponse* _msg = _internal_mutable_get_stats();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.get_stats)
  return _msg;
}

// .livekit.proto.SetTrackSubscriptionPermissionsResponse set_track_subscription_permissions = 47;
inline bool FfiResponse::_internal_has_set_track_subscription_permissions() const {
  return message_case() == kSetTrackSubscriptionPermissions;
}
inline bool FfiResponse::has_set_track_subscription_permissions() const {
  return _internal_has_set_track_subscription_permissions();
}
inline void FfiResponse::set_has_set_track_subscription_permissions() {
  _impl_._oneof_case_[0] = kSetTrackSubscriptionPermissions;
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsResponse* FfiResponse::release_set_track_subscription_permissions() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.set_track_subscription_permissions)
  if (_internal_has_set_track_subscription_permissions()) {
    clear_has_message();
    ::livekit::proto::SetTrackSubscriptionPermissionsResponse* temp = _impl_.message_.set_track_subscription_permissions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_track_subscription_permissions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetTrackSubscriptionPermissionsResponse& FfiResponse::_internal_set_track_subscription_permissions() const {
  return _internal_has_set_track_subscription_permissions()
      ? *_impl_.message_.set_track_subscription_permissions_
      : reinterpret_cast< ::livekit::proto::SetTrackSubscriptionPermissionsResponse&>(::livekit::proto::_SetTrackSubscriptionPermissionsResponse_default_instance_);
}
inline const ::livekit::proto::SetTrackSubscriptionPermissionsResponse& FfiResponse::set_track_subscription_permissions() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.set_track_subscription_permissions)
  return _internal_set_track_subscription_permissions();
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsResponse* FfiResponse::unsafe_arena_release_set_track_subscription_permissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.set_track_subscription_permissions)
  if (_internal_has_set_track_subscription_permissions()) {
    clear_has_message();
    ::livekit::proto::SetTrackSubscriptionPermissionsResponse* temp = _impl_.message_.set_track_subscription_permissions_;
    _impl_.message_.set_track_subscription_permissions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_set_track_subscription_permissions(::livekit::proto::SetTrackSubscriptionPermissionsResponse* set_track_subscription_permissions) {
  clear_message();
  if (set_track_subscription_permissions) {
    set_has_set_track_subscription_permissions();
    _impl_.message_.set_track_subscription_permissions_ = set_track_subscription_permissions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.set_track_subscription_permissions)
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsResponse* FfiResponse::_internal_mutable_set_track_subscription_permissions() {
  if (!_internal_has_set_track_subscription_permissions()) {
    clear_message();
    set_has_set_track_subscription_permissions();
    _impl_.message_.set_track_subscription_permissions_ = CreateMaybeMessage< ::livekit::proto::SetTrackSubscriptionPermissionsResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.set_track_subscription_permissions_;
}
inline ::livekit::proto::SetTrackSubscriptionPermissionsResponse* FfiResponse::mutable_set_track_subscription_permissions() {
  ::livekit::proto::SetTrackSubscriptionPermissionsResponse* _msg = _internal_mutable_set_track_subscription_permissions();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.set_track_subscription_permissions)
  return _msg;
}

// .livekit.proto.NewVideoStreamResponse new_video_stream = 20;
inline bool FfiResponse::_internal_has_new_video_stream() const {
  return message_case() == kNewVideoStream;
}
inline bool FfiResponse::has_new_video_stream() const {
  return _internal_has_new_video_stream();
}
inline void FfiResponse::set_has_new_video_stream() {
  _impl_._oneof_case_[0] = kNewVideoStream;
}
inline ::livekit::proto::NewVideoStreamResponse* FfiResponse::release_new_video_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_video_stream)
  if (_internal_has_new_video_stream()) {
    clear_has_message();
    ::livekit::proto::NewVideoStreamResponse* temp = _impl_.message_.new_video_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_video_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewVideoStreamResponse& FfiResponse::_internal_new_video_stream() const {
  return _internal_has_new_video_stream()
      ? *_impl_.message_.new_video_stream_
      : reinterpret_cast< ::livekit::proto::NewVideoStreamResponse&>(::livekit::proto::_NewVideoStreamResponse_default_instance_);
}
inline const ::livekit::proto::NewVideoStreamResponse& FfiResponse::new_video_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_video_stream)
  return _internal_new_video_stream();
}
inline ::livekit::proto::NewVideoStreamResponse* FfiResponse::unsafe_arena_release_new_video_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_video_stream)
  if (_internal_has_new_video_stream()) {
    clear_has_message();
    ::livekit::proto::NewVideoStreamResponse* temp = _impl_.message_.new_video_stream_;
    _impl_.message_.new_video_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_video_stream(::livekit::proto::NewVideoStreamResponse* new_video_stream) {
  clear_message();
  if (new_video_stream) {
    set_has_new_video_stream();
    _impl_.message_.new_video_stream_ = new_video_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_video_stream)
}
inline ::livekit::proto::NewVideoStreamResponse* FfiResponse::_internal_mutable_new_video_stream() {
  if (!_internal_has_new_video_stream()) {
    clear_message();
    set_has_new_video_stream();
    _impl_.message_.new_video_stream_ = CreateMaybeMessage< ::livekit::proto::NewVideoStreamResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_video_stream_;
}
inline ::livekit::proto::NewVideoStreamResponse* FfiResponse::mutable_new_video_stream() {
  ::livekit::proto::NewVideoStreamResponse* _msg = _internal_mutable_new_video_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_video_stream)
  return _msg;
}

// .livekit.proto.NewVideoSourceResponse new_video_source = 21;
inline bool FfiResponse::_internal_has_new_video_source() const {
  return message_case() == kNewVideoSource;
}
inline bool FfiResponse::has_new_video_source() const {
  return _internal_has_new_video_source();
}
inline void FfiResponse::set_has_new_video_source() {
  _impl_._oneof_case_[0] = kNewVideoSource;
}
inline ::livekit::proto::NewVideoSourceResponse* FfiResponse::release_new_video_source() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_video_source)
  if (_internal_has_new_video_source()) {
    clear_has_message();
    ::livekit::proto::NewVideoSourceResponse* temp = _impl_.message_.new_video_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_video_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewVideoSourceResponse& FfiResponse::_internal_new_video_source() const {
  return _internal_has_new_video_source()
      ? *_impl_.message_.new_video_source_
      : reinterpret_cast< ::livekit::proto::NewVideoSourceResponse&>(::livekit::proto::_NewVideoSourceResponse_default_instance_);
}
inline const ::livekit::proto::NewVideoSourceResponse& FfiResponse::new_video_source() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_video_source)
  return _internal_new_video_source();
}
inline ::livekit::proto::NewVideoSourceResponse* FfiResponse::unsafe_arena_release_new_video_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_video_source)
  if (_internal_has_new_video_source()) {
    clear_has_message();
    ::livekit::proto::NewVideoSourceResponse* temp = _impl_.message_.new_video_source_;
    _impl_.message_.new_video_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_video_source(::livekit::proto::NewVideoSourceResponse* new_video_source) {
  clear_message();
  if (new_video_source) {
    set_has_new_video_source();
    _impl_.message_.new_video_source_ = new_video_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_video_source)
}
inline ::livekit::proto::NewVideoSourceResponse* FfiResponse::_internal_mutable_new_video_source() {
  if (!_internal_has_new_video_source()) {
    clear_message();
    set_has_new_video_source();
    _impl_.message_.new_video_source_ = CreateMaybeMessage< ::livekit::proto::NewVideoSourceResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_video_source_;
}
inline ::livekit::proto::NewVideoSourceResponse* FfiResponse::mutable_new_video_source() {
  ::livekit::proto::NewVideoSourceResponse* _msg = _internal_mutable_new_video_source();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_video_source)
  return _msg;
}

// .livekit.proto.CaptureVideoFrameResponse capture_video_frame = 22;
inline bool FfiResponse::_internal_has_capture_video_frame() const {
  return message_case() == kCaptureVideoFrame;
}
inline bool FfiResponse::has_capture_video_frame() const {
  return _internal_has_capture_video_frame();
}
inline void FfiResponse::set_has_capture_video_frame() {
  _impl_._oneof_case_[0] = kCaptureVideoFrame;
}
inline ::livekit::proto::CaptureVideoFrameResponse* FfiResponse::release_capture_video_frame() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.capture_video_frame)
  if (_internal_has_capture_video_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureVideoFrameResponse* temp = _impl_.message_.capture_video_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.capture_video_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CaptureVideoFrameResponse& FfiResponse::_internal_capture_video_frame() const {
  return _internal_has_capture_video_frame()
      ? *_impl_.message_.capture_video_frame_
      : reinterpret_cast< ::livekit::proto::CaptureVideoFrameResponse&>(::livekit::proto::_CaptureVideoFrameResponse_default_instance_);
}
inline const ::livekit::proto::CaptureVideoFrameResponse& FfiResponse::capture_video_frame() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.capture_video_frame)
  return _internal_capture_video_frame();
}
inline ::livekit::proto::CaptureVideoFrameResponse* FfiResponse::unsafe_arena_release_capture_video_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.capture_video_frame)
  if (_internal_has_capture_video_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureVideoFrameResponse* temp = _impl_.message_.capture_video_frame_;
    _impl_.message_.capture_video_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_capture_video_frame(::livekit::proto::CaptureVideoFrameResponse* capture_video_frame) {
  clear_message();
  if (capture_video_frame) {
    set_has_capture_video_frame();
    _impl_.message_.capture_video_frame_ = capture_video_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.capture_video_frame)
}
inline ::livekit::proto::CaptureVideoFrameResponse* FfiResponse::_internal_mutable_capture_video_frame() {
  if (!_internal_has_capture_video_frame()) {
    clear_message();
    set_has_capture_video_frame();
    _impl_.message_.capture_video_frame_ = CreateMaybeMessage< ::livekit::proto::CaptureVideoFrameResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.capture_video_frame_;
}
inline ::livekit::proto::CaptureVideoFrameResponse* FfiResponse::mutable_capture_video_frame() {
  ::livekit::proto::CaptureVideoFrameResponse* _msg = _internal_mutable_capture_video_frame();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.capture_video_frame)
  return _msg;
}

// .livekit.proto.VideoConvertResponse video_convert = 23;
inline bool FfiResponse::_internal_has_video_convert() const {
  return message_case() == kVideoConvert;
}
inline bool FfiResponse::has_video_convert() const {
  return _internal_has_video_convert();
}
inline void FfiResponse::set_has_video_convert() {
  _impl_._oneof_case_[0] = kVideoConvert;
}
inline ::livekit::proto::VideoConvertResponse* FfiResponse::release_video_convert() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.video_convert)
  if (_internal_has_video_convert()) {
    clear_has_message();
    ::livekit::proto::VideoConvertResponse* temp = _impl_.message_.video_convert_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.video_convert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::VideoConvertResponse& FfiResponse::_internal_video_convert() const {
  return _internal_has_video_convert()
      ? *_impl_.message_.video_convert_
      : reinterpret_cast< ::livekit::proto::VideoConvertResponse&>(::livekit::proto::_VideoConvertResponse_default_instance_);
}
inline const ::livekit::proto::VideoConvertResponse& FfiResponse::video_convert() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.video_convert)
  return _internal_video_convert();
}
inline ::livekit::proto::VideoConvertResponse* FfiResponse::unsafe_arena_release_video_convert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.video_convert)
  if (_internal_has_video_convert()) {
    clear_has_message();
    ::livekit::proto::VideoConvertResponse* temp = _impl_.message_.video_convert_;
    _impl_.message_.video_convert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_video_convert(::livekit::proto::VideoConvertResponse* video_convert) {
  clear_message();
  if (video_convert) {
    set_has_video_convert();
    _impl_.message_.video_convert_ = video_convert;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.video_convert)
}
inline ::livekit::proto::VideoConvertResponse* FfiResponse::_internal_mutable_video_convert() {
  if (!_internal_has_video_convert()) {
    clear_message();
    set_has_video_convert();
    _impl_.message_.video_convert_ = CreateMaybeMessage< ::livekit::proto::VideoConvertResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.video_convert_;
}
inline ::livekit::proto::VideoConvertResponse* FfiResponse::mutable_video_convert() {
  ::livekit::proto::VideoConvertResponse* _msg = _internal_mutable_video_convert();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.video_convert)
  return _msg;
}

// .livekit.proto.VideoStreamFromParticipantResponse video_stream_from_participant = 24;
inline bool FfiResponse::_internal_has_video_stream_from_participant() const {
  return message_case() == kVideoStreamFromParticipant;
}
inline bool FfiResponse::has_video_stream_from_participant() const {
  return _internal_has_video_stream_from_participant();
}
inline void FfiResponse::set_has_video_stream_from_participant() {
  _impl_._oneof_case_[0] = kVideoStreamFromParticipant;
}
inline ::livekit::proto::VideoStreamFromParticipantResponse* FfiResponse::release_video_stream_from_participant() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.video_stream_from_participant)
  if (_internal_has_video_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::VideoStreamFromParticipantResponse* temp = _impl_.message_.video_stream_from_participant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.video_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::VideoStreamFromParticipantResponse& FfiResponse::_internal_video_stream_from_participant() const {
  return _internal_has_video_stream_from_participant()
      ? *_impl_.message_.video_stream_from_participant_
      : reinterpret_cast< ::livekit::proto::VideoStreamFromParticipantResponse&>(::livekit::proto::_VideoStreamFromParticipantResponse_default_instance_);
}
inline const ::livekit::proto::VideoStreamFromParticipantResponse& FfiResponse::video_stream_from_participant() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.video_stream_from_participant)
  return _internal_video_stream_from_participant();
}
inline ::livekit::proto::VideoStreamFromParticipantResponse* FfiResponse::unsafe_arena_release_video_stream_from_participant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.video_stream_from_participant)
  if (_internal_has_video_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::VideoStreamFromParticipantResponse* temp = _impl_.message_.video_stream_from_participant_;
    _impl_.message_.video_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_video_stream_from_participant(::livekit::proto::VideoStreamFromParticipantResponse* video_stream_from_participant) {
  clear_message();
  if (video_stream_from_participant) {
    set_has_video_stream_from_participant();
    _impl_.message_.video_stream_from_participant_ = video_stream_from_participant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.video_stream_from_participant)
}
inline ::livekit::proto::VideoStreamFromParticipantResponse* FfiResponse::_internal_mutable_video_stream_from_participant() {
  if (!_internal_has_video_stream_from_participant()) {
    clear_message();
    set_has_video_stream_from_participant();
    _impl_.message_.video_stream_from_participant_ = CreateMaybeMessage< ::livekit::proto::VideoStreamFromParticipantResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.video_stream_from_participant_;
}
inline ::livekit::proto::VideoStreamFromParticipantResponse* FfiResponse::mutable_video_stream_from_participant() {
  ::livekit::proto::VideoStreamFromParticipantResponse* _msg = _internal_mutable_video_stream_from_participant();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.video_stream_from_participant)
  return _msg;
}

// .livekit.proto.NewAudioStreamResponse new_audio_stream = 25;
inline bool FfiResponse::_internal_has_new_audio_stream() const {
  return message_case() == kNewAudioStream;
}
inline bool FfiResponse::has_new_audio_stream() const {
  return _internal_has_new_audio_stream();
}
inline void FfiResponse::set_has_new_audio_stream() {
  _impl_._oneof_case_[0] = kNewAudioStream;
}
inline ::livekit::proto::NewAudioStreamResponse* FfiResponse::release_new_audio_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_audio_stream)
  if (_internal_has_new_audio_stream()) {
    clear_has_message();
    ::livekit::proto::NewAudioStreamResponse* temp = _impl_.message_.new_audio_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_audio_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewAudioStreamResponse& FfiResponse::_internal_new_audio_stream() const {
  return _internal_has_new_audio_stream()
      ? *_impl_.message_.new_audio_stream_
      : reinterpret_cast< ::livekit::proto::NewAudioStreamResponse&>(::livekit::proto::_NewAudioStreamResponse_default_instance_);
}
inline const ::livekit::proto::NewAudioStreamResponse& FfiResponse::new_audio_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_audio_stream)
  return _internal_new_audio_stream();
}
inline ::livekit::proto::NewAudioStreamResponse* FfiResponse::unsafe_arena_release_new_audio_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_audio_stream)
  if (_internal_has_new_audio_stream()) {
    clear_has_message();
    ::livekit::proto::NewAudioStreamResponse* temp = _impl_.message_.new_audio_stream_;
    _impl_.message_.new_audio_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_audio_stream(::livekit::proto::NewAudioStreamResponse* new_audio_stream) {
  clear_message();
  if (new_audio_stream) {
    set_has_new_audio_stream();
    _impl_.message_.new_audio_stream_ = new_audio_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_audio_stream)
}
inline ::livekit::proto::NewAudioStreamResponse* FfiResponse::_internal_mutable_new_audio_stream() {
  if (!_internal_has_new_audio_stream()) {
    clear_message();
    set_has_new_audio_stream();
    _impl_.message_.new_audio_stream_ = CreateMaybeMessage< ::livekit::proto::NewAudioStreamResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_audio_stream_;
}
inline ::livekit::proto::NewAudioStreamResponse* FfiResponse::mutable_new_audio_stream() {
  ::livekit::proto::NewAudioStreamResponse* _msg = _internal_mutable_new_audio_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_audio_stream)
  return _msg;
}

// .livekit.proto.NewAudioSourceResponse new_audio_source = 26;
inline bool FfiResponse::_internal_has_new_audio_source() const {
  return message_case() == kNewAudioSource;
}
inline bool FfiResponse::has_new_audio_source() const {
  return _internal_has_new_audio_source();
}
inline void FfiResponse::set_has_new_audio_source() {
  _impl_._oneof_case_[0] = kNewAudioSource;
}
inline ::livekit::proto::NewAudioSourceResponse* FfiResponse::release_new_audio_source() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_audio_source)
  if (_internal_has_new_audio_source()) {
    clear_has_message();
    ::livekit::proto::NewAudioSourceResponse* temp = _impl_.message_.new_audio_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_audio_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewAudioSourceResponse& FfiResponse::_internal_new_audio_source() const {
  return _internal_has_new_audio_source()
      ? *_impl_.message_.new_audio_source_
      : reinterpret_cast< ::livekit::proto::NewAudioSourceResponse&>(::livekit::proto::_NewAudioSourceResponse_default_instance_);
}
inline const ::livekit::proto::NewAudioSourceResponse& FfiResponse::new_audio_source() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_audio_source)
  return _internal_new_audio_source();
}
inline ::livekit::proto::NewAudioSourceResponse* FfiResponse::unsafe_arena_release_new_audio_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_audio_source)
  if (_internal_has_new_audio_source()) {
    clear_has_message();
    ::livekit::proto::NewAudioSourceResponse* temp = _impl_.message_.new_audio_source_;
    _impl_.message_.new_audio_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_audio_source(::livekit::proto::NewAudioSourceResponse* new_audio_source) {
  clear_message();
  if (new_audio_source) {
    set_has_new_audio_source();
    _impl_.message_.new_audio_source_ = new_audio_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_audio_source)
}
inline ::livekit::proto::NewAudioSourceResponse* FfiResponse::_internal_mutable_new_audio_source() {
  if (!_internal_has_new_audio_source()) {
    clear_message();
    set_has_new_audio_source();
    _impl_.message_.new_audio_source_ = CreateMaybeMessage< ::livekit::proto::NewAudioSourceResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_audio_source_;
}
inline ::livekit::proto::NewAudioSourceResponse* FfiResponse::mutable_new_audio_source() {
  ::livekit::proto::NewAudioSourceResponse* _msg = _internal_mutable_new_audio_source();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_audio_source)
  return _msg;
}

// .livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 27;
inline bool FfiResponse::_internal_has_capture_audio_frame() const {
  return message_case() == kCaptureAudioFrame;
}
inline bool FfiResponse::has_capture_audio_frame() const {
  return _internal_has_capture_audio_frame();
}
inline void FfiResponse::set_has_capture_audio_frame() {
  _impl_._oneof_case_[0] = kCaptureAudioFrame;
}
inline ::livekit::proto::CaptureAudioFrameResponse* FfiResponse::release_capture_audio_frame() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.capture_audio_frame)
  if (_internal_has_capture_audio_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureAudioFrameResponse* temp = _impl_.message_.capture_audio_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.capture_audio_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CaptureAudioFrameResponse& FfiResponse::_internal_capture_audio_frame() const {
  return _internal_has_capture_audio_frame()
      ? *_impl_.message_.capture_audio_frame_
      : reinterpret_cast< ::livekit::proto::CaptureAudioFrameResponse&>(::livekit::proto::_CaptureAudioFrameResponse_default_instance_);
}
inline const ::livekit::proto::CaptureAudioFrameResponse& FfiResponse::capture_audio_frame() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.capture_audio_frame)
  return _internal_capture_audio_frame();
}
inline ::livekit::proto::CaptureAudioFrameResponse* FfiResponse::unsafe_arena_release_capture_audio_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.capture_audio_frame)
  if (_internal_has_capture_audio_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureAudioFrameResponse* temp = _impl_.message_.capture_audio_frame_;
    _impl_.message_.capture_audio_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameResponse* capture_audio_frame) {
  clear_message();
  if (capture_audio_frame) {
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = capture_audio_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.capture_audio_frame)
}
inline ::livekit::proto::CaptureAudioFrameResponse* FfiResponse::_internal_mutable_capture_audio_frame() {
  if (!_internal_has_capture_audio_frame()) {
    clear_message();
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = CreateMaybeMessage< ::livekit::proto::CaptureAudioFrameResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.capture_audio_frame_;
}
inline ::livekit::proto::CaptureAudioFrameResponse* FfiResponse::mutable_capture_audio_frame() {
  ::livekit::proto::CaptureAudioFrameResponse* _msg = _internal_mutable_capture_audio_frame();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.capture_audio_frame)
  return _msg;
}

// .livekit.proto.ClearAudioBufferResponse clear_audio_buffer = 28;
inline bool FfiResponse::_internal_has_clear_audio_buffer() const {
  return message_case() == kClearAudioBuffer;
}
inline bool FfiResponse::has_clear_audio_buffer() const {
  return _internal_has_clear_audio_buffer();
}
inline void FfiResponse::set_has_clear_audio_buffer() {
  _impl_._oneof_case_[0] = kClearAudioBuffer;
}
inline ::livekit::proto::ClearAudioBufferResponse* FfiResponse::release_clear_audio_buffer() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.clear_audio_buffer)
  if (_internal_has_clear_audio_buffer()) {
    clear_has_message();
    ::livekit::proto::ClearAudioBufferResponse* temp = _impl_.message_.clear_audio_buffer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.clear_audio_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ClearAudioBufferResponse& FfiResponse::_internal_clear_audio_buffer() const {
  return _internal_has_clear_audio_buffer()
      ? *_impl_.message_.clear_audio_buffer_
      : reinterpret_cast< ::livekit::proto::ClearAudioBufferResponse&>(::livekit::proto::_ClearAudioBufferResponse_default_instance_);
}
inline const ::livekit::proto::ClearAudioBufferResponse& FfiResponse::clear_audio_buffer() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.clear_audio_buffer)
  return _internal_clear_audio_buffer();
}
inline ::livekit::proto::ClearAudioBufferResponse* FfiResponse::unsafe_arena_release_clear_audio_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.clear_audio_buffer)
  if (_internal_has_clear_audio_buffer()) {
    clear_has_message();
    ::livekit::proto::ClearAudioBufferResponse* temp = _impl_.message_.clear_audio_buffer_;
    _impl_.message_.clear_audio_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_clear_audio_buffer(::livekit::proto::ClearAudioBufferResponse* clear_audio_buffer) {
  clear_message();
  if (clear_audio_buffer) {
    set_has_clear_audio_buffer();
    _impl_.message_.clear_audio_buffer_ = clear_audio_buffer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.clear_audio_buffer)
}
inline ::livekit::proto::ClearAudioBufferResponse* FfiResponse::_internal_mutable_clear_audio_buffer() {
  if (!_internal_has_clear_audio_buffer()) {
    clear_message();
    set_has_clear_audio_buffer();
    _impl_.message_.clear_audio_buffer_ = CreateMaybeMessage< ::livekit::proto::ClearAudioBufferResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.clear_audio_buffer_;
}
inline ::livekit::proto::ClearAudioBufferResponse* FfiResponse::mutable_clear_audio_buffer() {
  ::livekit::proto::ClearAudioBufferResponse* _msg = _internal_mutable_clear_audio_buffer();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.clear_audio_buffer)
  return _msg;
}

// .livekit.proto.NewAudioResamplerResponse new_audio_resampler = 29;
inline bool FfiResponse::_internal_has_new_audio_resampler() const {
  return message_case() == kNewAudioResampler;
}
inline bool FfiResponse::has_new_audio_resampler() const {
  return _internal_has_new_audio_resampler();
}
inline void FfiResponse::set_has_new_audio_resampler() {
  _impl_._oneof_case_[0] = kNewAudioResampler;
}
inline ::livekit::proto::NewAudioResamplerResponse* FfiResponse::release_new_audio_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_audio_resampler)
  if (_internal_has_new_audio_resampler()) {
    clear_has_message();
    ::livekit::proto::NewAudioResamplerResponse* temp = _impl_.message_.new_audio_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_audio_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewAudioResamplerResponse& FfiResponse::_internal_new_audio_resampler() const {
  return _internal_has_new_audio_resampler()
      ? *_impl_.message_.new_audio_resampler_
      : reinterpret_cast< ::livekit::proto::NewAudioResamplerResponse&>(::livekit::proto::_NewAudioResamplerResponse_default_instance_);
}
inline const ::livekit::proto::NewAudioResamplerResponse& FfiResponse::new_audio_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_audio_resampler)
  return _internal_new_audio_resampler();
}
inline ::livekit::proto::NewAudioResamplerResponse* FfiResponse::unsafe_arena_release_new_audio_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_audio_resampler)
  if (_internal_has_new_audio_resampler()) {
    clear_has_message();
    ::livekit::proto::NewAudioResamplerResponse* temp = _impl_.message_.new_audio_resampler_;
    _impl_.message_.new_audio_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_audio_resampler(::livekit::proto::NewAudioResamplerResponse* new_audio_resampler) {
  clear_message();
  if (new_audio_resampler) {
    set_has_new_audio_resampler();
    _impl_.message_.new_audio_resampler_ = new_audio_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_audio_resampler)
}
inline ::livekit::proto::NewAudioResamplerResponse* FfiResponse::_internal_mutable_new_audio_resampler() {
  if (!_internal_has_new_audio_resampler()) {
    clear_message();
    set_has_new_audio_resampler();
    _impl_.message_.new_audio_resampler_ = CreateMaybeMessage< ::livekit::proto::NewAudioResamplerResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_audio_resampler_;
}
inline ::livekit::proto::NewAudioResamplerResponse* FfiResponse::mutable_new_audio_resampler() {
  ::livekit::proto::NewAudioResamplerResponse* _msg = _internal_mutable_new_audio_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_audio_resampler)
  return _msg;
}

// .livekit.proto.RemixAndResampleResponse remix_and_resample = 30;
inline bool FfiResponse::_internal_has_remix_and_resample() const {
  return message_case() == kRemixAndResample;
}
inline bool FfiResponse::has_remix_and_resample() const {
  return _internal_has_remix_and_resample();
}
inline void FfiResponse::set_has_remix_and_resample() {
  _impl_._oneof_case_[0] = kRemixAndResample;
}
inline ::livekit::proto::RemixAndResampleResponse* FfiResponse::release_remix_and_resample() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.remix_and_resample)
  if (_internal_has_remix_and_resample()) {
    clear_has_message();
    ::livekit::proto::RemixAndResampleResponse* temp = _impl_.message_.remix_and_resample_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.remix_and_resample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RemixAndResampleResponse& FfiResponse::_internal_remix_and_resample() const {
  return _internal_has_remix_and_resample()
      ? *_impl_.message_.remix_and_resample_
      : reinterpret_cast< ::livekit::proto::RemixAndResampleResponse&>(::livekit::proto::_RemixAndResampleResponse_default_instance_);
}
inline const ::livekit::proto::RemixAndResampleResponse& FfiResponse::remix_and_resample() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.remix_and_resample)
  return _internal_remix_and_resample();
}
inline ::livekit::proto::RemixAndResampleResponse* FfiResponse::unsafe_arena_release_remix_and_resample() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.remix_and_resample)
  if (_internal_has_remix_and_resample()) {
    clear_has_message();
    ::livekit::proto::RemixAndResampleResponse* temp = _impl_.message_.remix_and_resample_;
    _impl_.message_.remix_and_resample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_remix_and_resample(::livekit::proto::RemixAndResampleResponse* remix_and_resample) {
  clear_message();
  if (remix_and_resample) {
    set_has_remix_and_resample();
    _impl_.message_.remix_and_resample_ = remix_and_resample;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.remix_and_resample)
}
inline ::livekit::proto::RemixAndResampleResponse* FfiResponse::_internal_mutable_remix_and_resample() {
  if (!_internal_has_remix_and_resample()) {
    clear_message();
    set_has_remix_and_resample();
    _impl_.message_.remix_and_resample_ = CreateMaybeMessage< ::livekit::proto::RemixAndResampleResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.remix_and_resample_;
}
inline ::livekit::proto::RemixAndResampleResponse* FfiResponse::mutable_remix_and_resample() {
  ::livekit::proto::RemixAndResampleResponse* _msg = _internal_mutable_remix_and_resample();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.remix_and_resample)
  return _msg;
}

// .livekit.proto.AudioStreamFromParticipantResponse audio_stream_from_participant = 31;
inline bool FfiResponse::_internal_has_audio_stream_from_participant() const {
  return message_case() == kAudioStreamFromParticipant;
}
inline bool FfiResponse::has_audio_stream_from_participant() const {
  return _internal_has_audio_stream_from_participant();
}
inline void FfiResponse::set_has_audio_stream_from_participant() {
  _impl_._oneof_case_[0] = kAudioStreamFromParticipant;
}
inline ::livekit::proto::AudioStreamFromParticipantResponse* FfiResponse::release_audio_stream_from_participant() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.audio_stream_from_participant)
  if (_internal_has_audio_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::AudioStreamFromParticipantResponse* temp = _impl_.message_.audio_stream_from_participant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.audio_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::AudioStreamFromParticipantResponse& FfiResponse::_internal_audio_stream_from_participant() const {
  return _internal_has_audio_stream_from_participant()
      ? *_impl_.message_.audio_stream_from_participant_
      : reinterpret_cast< ::livekit::proto::AudioStreamFromParticipantResponse&>(::livekit::proto::_AudioStreamFromParticipantResponse_default_instance_);
}
inline const ::livekit::proto::AudioStreamFromParticipantResponse& FfiResponse::audio_stream_from_participant() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.audio_stream_from_participant)
  return _internal_audio_stream_from_participant();
}
inline ::livekit::proto::AudioStreamFromParticipantResponse* FfiResponse::unsafe_arena_release_audio_stream_from_participant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.audio_stream_from_participant)
  if (_internal_has_audio_stream_from_participant()) {
    clear_has_message();
    ::livekit::proto::AudioStreamFromParticipantResponse* temp = _impl_.message_.audio_stream_from_participant_;
    _impl_.message_.audio_stream_from_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_audio_stream_from_participant(::livekit::proto::AudioStreamFromParticipantResponse* audio_stream_from_participant) {
  clear_message();
  if (audio_stream_from_participant) {
    set_has_audio_stream_from_participant();
    _impl_.message_.audio_stream_from_participant_ = audio_stream_from_participant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.audio_stream_from_participant)
}
inline ::livekit::proto::AudioStreamFromParticipantResponse* FfiResponse::_internal_mutable_audio_stream_from_participant() {
  if (!_internal_has_audio_stream_from_participant()) {
    clear_message();
    set_has_audio_stream_from_participant();
    _impl_.message_.audio_stream_from_participant_ = CreateMaybeMessage< ::livekit::proto::AudioStreamFromParticipantResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.audio_stream_from_participant_;
}
inline ::livekit::proto::AudioStreamFromParticipantResponse* FfiResponse::mutable_audio_stream_from_participant() {
  ::livekit::proto::AudioStreamFromParticipantResponse* _msg = _internal_mutable_audio_stream_from_participant();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.audio_stream_from_participant)
  return _msg;
}

// .livekit.proto.E2eeResponse e2ee = 32;
inline bool FfiResponse::_internal_has_e2ee() const {
  return message_case() == kE2Ee;
}
inline bool FfiResponse::has_e2ee() const {
  return _internal_has_e2ee();
}
inline void FfiResponse::set_has_e2ee() {
  _impl_._oneof_case_[0] = kE2Ee;
}
inline ::livekit::proto::E2eeResponse* FfiResponse::release_e2ee() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.e2ee)
  if (_internal_has_e2ee()) {
    clear_has_message();
    ::livekit::proto::E2eeResponse* temp = _impl_.message_.e2ee_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.e2ee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::E2eeResponse& FfiResponse::_internal_e2ee() const {
  return _internal_has_e2ee()
      ? *_impl_.message_.e2ee_
      : reinterpret_cast< ::livekit::proto::E2eeResponse&>(::livekit::proto::_E2eeResponse_default_instance_);
}
inline const ::livekit::proto::E2eeResponse& FfiResponse::e2ee() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.e2ee)
  return _internal_e2ee();
}
inline ::livekit::proto::E2eeResponse* FfiResponse::unsafe_arena_release_e2ee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.e2ee)
  if (_internal_has_e2ee()) {
    clear_has_message();
    ::livekit::proto::E2eeResponse* temp = _impl_.message_.e2ee_;
    _impl_.message_.e2ee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_e2ee(::livekit::proto::E2eeResponse* e2ee) {
  clear_message();
  if (e2ee) {
    set_has_e2ee();
    _impl_.message_.e2ee_ = e2ee;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.e2ee)
}
inline ::livekit::proto::E2eeResponse* FfiResponse::_internal_mutable_e2ee() {
  if (!_internal_has_e2ee()) {
    clear_message();
    set_has_e2ee();
    _impl_.message_.e2ee_ = CreateMaybeMessage< ::livekit::proto::E2eeResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.e2ee_;
}
inline ::livekit::proto::E2eeResponse* FfiResponse::mutable_e2ee() {
  ::livekit::proto::E2eeResponse* _msg = _internal_mutable_e2ee();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.e2ee)
  return _msg;
}

// .livekit.proto.NewSoxResamplerResponse new_sox_resampler = 33;
inline bool FfiResponse::_internal_has_new_sox_resampler() const {
  return message_case() == kNewSoxResampler;
}
inline bool FfiResponse::has_new_sox_resampler() const {
  return _internal_has_new_sox_resampler();
}
inline void FfiResponse::set_has_new_sox_resampler() {
  _impl_._oneof_case_[0] = kNewSoxResampler;
}
inline ::livekit::proto::NewSoxResamplerResponse* FfiResponse::release_new_sox_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_sox_resampler)
  if (_internal_has_new_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::NewSoxResamplerResponse* temp = _impl_.message_.new_sox_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewSoxResamplerResponse& FfiResponse::_internal_new_sox_resampler() const {
  return _internal_has_new_sox_resampler()
      ? *_impl_.message_.new_sox_resampler_
      : reinterpret_cast< ::livekit::proto::NewSoxResamplerResponse&>(::livekit::proto::_NewSoxResamplerResponse_default_instance_);
}
inline const ::livekit::proto::NewSoxResamplerResponse& FfiResponse::new_sox_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_sox_resampler)
  return _internal_new_sox_resampler();
}
inline ::livekit::proto::NewSoxResamplerResponse* FfiResponse::unsafe_arena_release_new_sox_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_sox_resampler)
  if (_internal_has_new_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::NewSoxResamplerResponse* temp = _impl_.message_.new_sox_resampler_;
    _impl_.message_.new_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_sox_resampler(::livekit::proto::NewSoxResamplerResponse* new_sox_resampler) {
  clear_message();
  if (new_sox_resampler) {
    set_has_new_sox_resampler();
    _impl_.message_.new_sox_resampler_ = new_sox_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_sox_resampler)
}
inline ::livekit::proto::NewSoxResamplerResponse* FfiResponse::_internal_mutable_new_sox_resampler() {
  if (!_internal_has_new_sox_resampler()) {
    clear_message();
    set_has_new_sox_resampler();
    _impl_.message_.new_sox_resampler_ = CreateMaybeMessage< ::livekit::proto::NewSoxResamplerResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_sox_resampler_;
}
inline ::livekit::proto::NewSoxResamplerResponse* FfiResponse::mutable_new_sox_resampler() {
  ::livekit::proto::NewSoxResamplerResponse* _msg = _internal_mutable_new_sox_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_sox_resampler)
  return _msg;
}

// .livekit.proto.PushSoxResamplerResponse push_sox_resampler = 34;
inline bool FfiResponse::_internal_has_push_sox_resampler() const {
  return message_case() == kPushSoxResampler;
}
inline bool FfiResponse::has_push_sox_resampler() const {
  return _internal_has_push_sox_resampler();
}
inline void FfiResponse::set_has_push_sox_resampler() {
  _impl_._oneof_case_[0] = kPushSoxResampler;
}
inline ::livekit::proto::PushSoxResamplerResponse* FfiResponse::release_push_sox_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.push_sox_resampler)
  if (_internal_has_push_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::PushSoxResamplerResponse* temp = _impl_.message_.push_sox_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.push_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PushSoxResamplerResponse& FfiResponse::_internal_push_sox_resampler() const {
  return _internal_has_push_sox_resampler()
      ? *_impl_.message_.push_sox_resampler_
      : reinterpret_cast< ::livekit::proto::PushSoxResamplerResponse&>(::livekit::proto::_PushSoxResamplerResponse_default_instance_);
}
inline const ::livekit::proto::PushSoxResamplerResponse& FfiResponse::push_sox_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.push_sox_resampler)
  return _internal_push_sox_resampler();
}
inline ::livekit::proto::PushSoxResamplerResponse* FfiResponse::unsafe_arena_release_push_sox_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.push_sox_resampler)
  if (_internal_has_push_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::PushSoxResamplerResponse* temp = _impl_.message_.push_sox_resampler_;
    _impl_.message_.push_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_push_sox_resampler(::livekit::proto::PushSoxResamplerResponse* push_sox_resampler) {
  clear_message();
  if (push_sox_resampler) {
    set_has_push_sox_resampler();
    _impl_.message_.push_sox_resampler_ = push_sox_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.push_sox_resampler)
}
inline ::livekit::proto::PushSoxResamplerResponse* FfiResponse::_internal_mutable_push_sox_resampler() {
  if (!_internal_has_push_sox_resampler()) {
    clear_message();
    set_has_push_sox_resampler();
    _impl_.message_.push_sox_resampler_ = CreateMaybeMessage< ::livekit::proto::PushSoxResamplerResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.push_sox_resampler_;
}
inline ::livekit::proto::PushSoxResamplerResponse* FfiResponse::mutable_push_sox_resampler() {
  ::livekit::proto::PushSoxResamplerResponse* _msg = _internal_mutable_push_sox_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.push_sox_resampler)
  return _msg;
}

// .livekit.proto.FlushSoxResamplerResponse flush_sox_resampler = 35;
inline bool FfiResponse::_internal_has_flush_sox_resampler() const {
  return message_case() == kFlushSoxResampler;
}
inline bool FfiResponse::has_flush_sox_resampler() const {
  return _internal_has_flush_sox_resampler();
}
inline void FfiResponse::set_has_flush_sox_resampler() {
  _impl_._oneof_case_[0] = kFlushSoxResampler;
}
inline ::livekit::proto::FlushSoxResamplerResponse* FfiResponse::release_flush_sox_resampler() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.flush_sox_resampler)
  if (_internal_has_flush_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::FlushSoxResamplerResponse* temp = _impl_.message_.flush_sox_resampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.flush_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::FlushSoxResamplerResponse& FfiResponse::_internal_flush_sox_resampler() const {
  return _internal_has_flush_sox_resampler()
      ? *_impl_.message_.flush_sox_resampler_
      : reinterpret_cast< ::livekit::proto::FlushSoxResamplerResponse&>(::livekit::proto::_FlushSoxResamplerResponse_default_instance_);
}
inline const ::livekit::proto::FlushSoxResamplerResponse& FfiResponse::flush_sox_resampler() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.flush_sox_resampler)
  return _internal_flush_sox_resampler();
}
inline ::livekit::proto::FlushSoxResamplerResponse* FfiResponse::unsafe_arena_release_flush_sox_resampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.flush_sox_resampler)
  if (_internal_has_flush_sox_resampler()) {
    clear_has_message();
    ::livekit::proto::FlushSoxResamplerResponse* temp = _impl_.message_.flush_sox_resampler_;
    _impl_.message_.flush_sox_resampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_flush_sox_resampler(::livekit::proto::FlushSoxResamplerResponse* flush_sox_resampler) {
  clear_message();
  if (flush_sox_resampler) {
    set_has_flush_sox_resampler();
    _impl_.message_.flush_sox_resampler_ = flush_sox_resampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.flush_sox_resampler)
}
inline ::livekit::proto::FlushSoxResamplerResponse* FfiResponse::_internal_mutable_flush_sox_resampler() {
  if (!_internal_has_flush_sox_resampler()) {
    clear_message();
    set_has_flush_sox_resampler();
    _impl_.message_.flush_sox_resampler_ = CreateMaybeMessage< ::livekit::proto::FlushSoxResamplerResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.flush_sox_resampler_;
}
inline ::livekit::proto::FlushSoxResamplerResponse* FfiResponse::mutable_flush_sox_resampler() {
  ::livekit::proto::FlushSoxResamplerResponse* _msg = _internal_mutable_flush_sox_resampler();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.flush_sox_resampler)
  return _msg;
}

// .livekit.proto.SendChatMessageResponse send_chat_message = 36;
inline bool FfiResponse::_internal_has_send_chat_message() const {
  return message_case() == kSendChatMessage;
}
inline bool FfiResponse::has_send_chat_message() const {
  return _internal_has_send_chat_message();
}
inline void FfiResponse::set_has_send_chat_message() {
  _impl_._oneof_case_[0] = kSendChatMessage;
}
inline ::livekit::proto::SendChatMessageResponse* FfiResponse::release_send_chat_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.send_chat_message)
  if (_internal_has_send_chat_message()) {
    clear_has_message();
    ::livekit::proto::SendChatMessageResponse* temp = _impl_.message_.send_chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendChatMessageResponse& FfiResponse::_internal_send_chat_message() const {
  return _internal_has_send_chat_message()
      ? *_impl_.message_.send_chat_message_
      : reinterpret_cast< ::livekit::proto::SendChatMessageResponse&>(::livekit::proto::_SendChatMessageResponse_default_instance_);
}
inline const ::livekit::proto::SendChatMessageResponse& FfiResponse::send_chat_message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.send_chat_message)
  return _internal_send_chat_message();
}
inline ::livekit::proto::SendChatMessageResponse* FfiResponse::unsafe_arena_release_send_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.send_chat_message)
  if (_internal_has_send_chat_message()) {
    clear_has_message();
    ::livekit::proto::SendChatMessageResponse* temp = _impl_.message_.send_chat_message_;
    _impl_.message_.send_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_send_chat_message(::livekit::proto::SendChatMessageResponse* send_chat_message) {
  clear_message();
  if (send_chat_message) {
    set_has_send_chat_message();
    _impl_.message_.send_chat_message_ = send_chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.send_chat_message)
}
inline ::livekit::proto::SendChatMessageResponse* FfiResponse::_internal_mutable_send_chat_message() {
  if (!_internal_has_send_chat_message()) {
    clear_message();
    set_has_send_chat_message();
    _impl_.message_.send_chat_message_ = CreateMaybeMessage< ::livekit::proto::SendChatMessageResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.send_chat_message_;
}
inline ::livekit::proto::SendChatMessageResponse* FfiResponse::mutable_send_chat_message() {
  ::livekit::proto::SendChatMessageResponse* _msg = _internal_mutable_send_chat_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.send_chat_message)
  return _msg;
}

// .livekit.proto.PerformRpcResponse perform_rpc = 37;
inline bool FfiResponse::_internal_has_perform_rpc() const {
  return message_case() == kPerformRpc;
}
inline bool FfiResponse::has_perform_rpc() const {
  return _internal_has_perform_rpc();
}
inline void FfiResponse::set_has_perform_rpc() {
  _impl_._oneof_case_[0] = kPerformRpc;
}
inline ::livekit::proto::PerformRpcResponse* FfiResponse::release_perform_rpc() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.perform_rpc)
  if (_internal_has_perform_rpc()) {
    clear_has_message();
    ::livekit::proto::PerformRpcResponse* temp = _impl_.message_.perform_rpc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.perform_rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PerformRpcResponse& FfiResponse::_internal_perform_rpc() const {
  return _internal_has_perform_rpc()
      ? *_impl_.message_.perform_rpc_
      : reinterpret_cast< ::livekit::proto::PerformRpcResponse&>(::livekit::proto::_PerformRpcResponse_default_instance_);
}
inline const ::livekit::proto::PerformRpcResponse& FfiResponse::perform_rpc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.perform_rpc)
  return _internal_perform_rpc();
}
inline ::livekit::proto::PerformRpcResponse* FfiResponse::unsafe_arena_release_perform_rpc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.perform_rpc)
  if (_internal_has_perform_rpc()) {
    clear_has_message();
    ::livekit::proto::PerformRpcResponse* temp = _impl_.message_.perform_rpc_;
    _impl_.message_.perform_rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_perform_rpc(::livekit::proto::PerformRpcResponse* perform_rpc) {
  clear_message();
  if (perform_rpc) {
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = perform_rpc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.perform_rpc)
}
inline ::livekit::proto::PerformRpcResponse* FfiResponse::_internal_mutable_perform_rpc() {
  if (!_internal_has_perform_rpc()) {
    clear_message();
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = CreateMaybeMessage< ::livekit::proto::PerformRpcResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.perform_rpc_;
}
inline ::livekit::proto::PerformRpcResponse* FfiResponse::mutable_perform_rpc() {
  ::livekit::proto::PerformRpcResponse* _msg = _internal_mutable_perform_rpc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.perform_rpc)
  return _msg;
}

// .livekit.proto.RegisterRpcMethodResponse register_rpc_method = 38;
inline bool FfiResponse::_internal_has_register_rpc_method() const {
  return message_case() == kRegisterRpcMethod;
}
inline bool FfiResponse::has_register_rpc_method() const {
  return _internal_has_register_rpc_method();
}
inline void FfiResponse::set_has_register_rpc_method() {
  _impl_._oneof_case_[0] = kRegisterRpcMethod;
}
inline ::livekit::proto::RegisterRpcMethodResponse* FfiResponse::release_register_rpc_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.register_rpc_method)
  if (_internal_has_register_rpc_method()) {
    clear_has_message();
    ::livekit::proto::RegisterRpcMethodResponse* temp = _impl_.message_.register_rpc_method_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.register_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RegisterRpcMethodResponse& FfiResponse::_internal_register_rpc_method() const {
  return _internal_has_register_rpc_method()
      ? *_impl_.message_.register_rpc_method_
      : reinterpret_cast< ::livekit::proto::RegisterRpcMethodResponse&>(::livekit::proto::_RegisterRpcMethodResponse_default_instance_);
}
inline const ::livekit::proto::RegisterRpcMethodResponse& FfiResponse::register_rpc_method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.register_rpc_method)
  return _internal_register_rpc_method();
}
inline ::livekit::proto::RegisterRpcMethodResponse* FfiResponse::unsafe_arena_release_register_rpc_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.register_rpc_method)
  if (_internal_has_register_rpc_method()) {
    clear_has_message();
    ::livekit::proto::RegisterRpcMethodResponse* temp = _impl_.message_.register_rpc_method_;
    _impl_.message_.register_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_register_rpc_method(::livekit::proto::RegisterRpcMethodResponse* register_rpc_method) {
  clear_message();
  if (register_rpc_method) {
    set_has_register_rpc_method();
    _impl_.message_.register_rpc_method_ = register_rpc_method;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.register_rpc_method)
}
inline ::livekit::proto::RegisterRpcMethodResponse* FfiResponse::_internal_mutable_register_rpc_method() {
  if (!_internal_has_register_rpc_method()) {
    clear_message();
    set_has_register_rpc_method();
    _impl_.message_.register_rpc_method_ = CreateMaybeMessage< ::livekit::proto::RegisterRpcMethodResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.register_rpc_method_;
}
inline ::livekit::proto::RegisterRpcMethodResponse* FfiResponse::mutable_register_rpc_method() {
  ::livekit::proto::RegisterRpcMethodResponse* _msg = _internal_mutable_register_rpc_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.register_rpc_method)
  return _msg;
}

// .livekit.proto.UnregisterRpcMethodResponse unregister_rpc_method = 39;
inline bool FfiResponse::_internal_has_unregister_rpc_method() const {
  return message_case() == kUnregisterRpcMethod;
}
inline bool FfiResponse::has_unregister_rpc_method() const {
  return _internal_has_unregister_rpc_method();
}
inline void FfiResponse::set_has_unregister_rpc_method() {
  _impl_._oneof_case_[0] = kUnregisterRpcMethod;
}
inline ::livekit::proto::UnregisterRpcMethodResponse* FfiResponse::release_unregister_rpc_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.unregister_rpc_method)
  if (_internal_has_unregister_rpc_method()) {
    clear_has_message();
    ::livekit::proto::UnregisterRpcMethodResponse* temp = _impl_.message_.unregister_rpc_method_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.unregister_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UnregisterRpcMethodResponse& FfiResponse::_internal_unregister_rpc_method() const {
  return _internal_has_unregister_rpc_method()
      ? *_impl_.message_.unregister_rpc_method_
      : reinterpret_cast< ::livekit::proto::UnregisterRpcMethodResponse&>(::livekit::proto::_UnregisterRpcMethodResponse_default_instance_);
}
inline const ::livekit::proto::UnregisterRpcMethodResponse& FfiResponse::unregister_rpc_method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.unregister_rpc_method)
  return _internal_unregister_rpc_method();
}
inline ::livekit::proto::UnregisterRpcMethodResponse* FfiResponse::unsafe_arena_release_unregister_rpc_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.unregister_rpc_method)
  if (_internal_has_unregister_rpc_method()) {
    clear_has_message();
    ::livekit::proto::UnregisterRpcMethodResponse* temp = _impl_.message_.unregister_rpc_method_;
    _impl_.message_.unregister_rpc_method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_unregister_rpc_method(::livekit::proto::UnregisterRpcMethodResponse* unregister_rpc_method) {
  clear_message();
  if (unregister_rpc_method) {
    set_has_unregister_rpc_method();
    _impl_.message_.unregister_rpc_method_ = unregister_rpc_method;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.unregister_rpc_method)
}
inline ::livekit::proto::UnregisterRpcMethodResponse* FfiResponse::_internal_mutable_unregister_rpc_method() {
  if (!_internal_has_unregister_rpc_method()) {
    clear_message();
    set_has_unregister_rpc_method();
    _impl_.message_.unregister_rpc_method_ = CreateMaybeMessage< ::livekit::proto::UnregisterRpcMethodResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.unregister_rpc_method_;
}
inline ::livekit::proto::UnregisterRpcMethodResponse* FfiResponse::mutable_unregister_rpc_method() {
  ::livekit::proto::UnregisterRpcMethodResponse* _msg = _internal_mutable_unregister_rpc_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.unregister_rpc_method)
  return _msg;
}

// .livekit.proto.RpcMethodInvocationResponseResponse rpc_method_invocation_response = 40;
inline bool FfiResponse::_internal_has_rpc_method_invocation_response() const {
  return message_case() == kRpcMethodInvocationResponse;
}
inline bool FfiResponse::has_rpc_method_invocation_response() const {
  return _internal_has_rpc_method_invocation_response();
}
inline void FfiResponse::set_has_rpc_method_invocation_response() {
  _impl_._oneof_case_[0] = kRpcMethodInvocationResponse;
}
inline ::livekit::proto::RpcMethodInvocationResponseResponse* FfiResponse::release_rpc_method_invocation_response() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.rpc_method_invocation_response)
  if (_internal_has_rpc_method_invocation_response()) {
    clear_has_message();
    ::livekit::proto::RpcMethodInvocationResponseResponse* temp = _impl_.message_.rpc_method_invocation_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rpc_method_invocation_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RpcMethodInvocationResponseResponse& FfiResponse::_internal_rpc_method_invocation_response() const {
  return _internal_has_rpc_method_invocation_response()
      ? *_impl_.message_.rpc_method_invocation_response_
      : reinterpret_cast< ::livekit::proto::RpcMethodInvocationResponseResponse&>(::livekit::proto::_RpcMethodInvocationResponseResponse_default_instance_);
}
inline const ::livekit::proto::RpcMethodInvocationResponseResponse& FfiResponse::rpc_method_invocation_response() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.rpc_method_invocation_response)
  return _internal_rpc_method_invocation_response();
}
inline ::livekit::proto::RpcMethodInvocationResponseResponse* FfiResponse::unsafe_arena_release_rpc_method_invocation_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.rpc_method_invocation_response)
  if (_internal_has_rpc_method_invocation_response()) {
    clear_has_message();
    ::livekit::proto::RpcMethodInvocationResponseResponse* temp = _impl_.message_.rpc_method_invocation_response_;
    _impl_.message_.rpc_method_invocation_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_rpc_method_invocation_response(::livekit::proto::RpcMethodInvocationResponseResponse* rpc_method_invocation_response) {
  clear_message();
  if (rpc_method_invocation_response) {
    set_has_rpc_method_invocation_response();
    _impl_.message_.rpc_method_invocation_response_ = rpc_method_invocation_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.rpc_method_invocation_response)
}
inline ::livekit::proto::RpcMethodInvocationResponseResponse* FfiResponse::_internal_mutable_rpc_method_invocation_response() {
  if (!_internal_has_rpc_method_invocation_response()) {
    clear_message();
    set_has_rpc_method_invocation_response();
    _impl_.message_.rpc_method_invocation_response_ = CreateMaybeMessage< ::livekit::proto::RpcMethodInvocationResponseResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.rpc_method_invocation_response_;
}
inline ::livekit::proto::RpcMethodInvocationResponseResponse* FfiResponse::mutable_rpc_method_invocation_response() {
  ::livekit::proto::RpcMethodInvocationResponseResponse* _msg = _internal_mutable_rpc_method_invocation_response();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.rpc_method_invocation_response)
  return _msg;
}

// .livekit.proto.EnableRemoteTrackPublicationResponse enable_remote_track_publication = 41;
inline bool FfiResponse::_internal_has_enable_remote_track_publication() const {
  return message_case() == kEnableRemoteTrackPublication;
}
inline bool FfiResponse::has_enable_remote_track_publication() const {
  return _internal_has_enable_remote_track_publication();
}
inline void FfiResponse::set_has_enable_remote_track_publication() {
  _impl_._oneof_case_[0] = kEnableRemoteTrackPublication;
}
inline ::livekit::proto::EnableRemoteTrackPublicationResponse* FfiResponse::release_enable_remote_track_publication() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.enable_remote_track_publication)
  if (_internal_has_enable_remote_track_publication()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackPublicationResponse* temp = _impl_.message_.enable_remote_track_publication_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.enable_remote_track_publication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::EnableRemoteTrackPublicationResponse& FfiResponse::_internal_enable_remote_track_publication() const {
  return _internal_has_enable_remote_track_publication()
      ? *_impl_.message_.enable_remote_track_publication_
      : reinterpret_cast< ::livekit::proto::EnableRemoteTrackPublicationResponse&>(::livekit::proto::_EnableRemoteTrackPublicationResponse_default_instance_);
}
inline const ::livekit::proto::EnableRemoteTrackPublicationResponse& FfiResponse::enable_remote_track_publication() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.enable_remote_track_publication)
  return _internal_enable_remote_track_publication();
}
inline ::livekit::proto::EnableRemoteTrackPublicationResponse* FfiResponse::unsafe_arena_release_enable_remote_track_publication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.enable_remote_track_publication)
  if (_internal_has_enable_remote_track_publication()) {
    clear_has_message();
    ::livekit::proto::EnableRemoteTrackPublicationResponse* temp = _impl_.message_.enable_remote_track_publication_;
    _impl_.message_.enable_remote_track_publication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_enable_remote_track_publication(::livekit::proto::EnableRemoteTrackPublicationResponse* enable_remote_track_publication) {
  clear_message();
  if (enable_remote_track_publication) {
    set_has_enable_remote_track_publication();
    _impl_.message_.enable_remote_track_publication_ = enable_remote_track_publication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.enable_remote_track_publication)
}
inline ::livekit::proto::EnableRemoteTrackPublicationResponse* FfiResponse::_internal_mutable_enable_remote_track_publication() {
  if (!_internal_has_enable_remote_track_publication()) {
    clear_message();
    set_has_enable_remote_track_publication();
    _impl_.message_.enable_remote_track_publication_ = CreateMaybeMessage< ::livekit::proto::EnableRemoteTrackPublicationResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.enable_remote_track_publication_;
}
inline ::livekit::proto::EnableRemoteTrackPublicationResponse* FfiResponse::mutable_enable_remote_track_publication() {
  ::livekit::proto::EnableRemoteTrackPublicationResponse* _msg = _internal_mutable_enable_remote_track_publication();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.enable_remote_track_publication)
  return _msg;
}

// .livekit.proto.UpdateRemoteTrackPublicationDimensionResponse update_remote_track_publication_dimension = 42;
inline bool FfiResponse::_internal_has_update_remote_track_publication_dimension() const {
  return message_case() == kUpdateRemoteTrackPublicationDimension;
}
inline bool FfiResponse::has_update_remote_track_publication_dimension() const {
  return _internal_has_update_remote_track_publication_dimension();
}
inline void FfiResponse::set_has_update_remote_track_publication_dimension() {
  _impl_._oneof_case_[0] = kUpdateRemoteTrackPublicationDimension;
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* FfiResponse::release_update_remote_track_publication_dimension() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.update_remote_track_publication_dimension)
  if (_internal_has_update_remote_track_publication_dimension()) {
    clear_has_message();
    ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* temp = _impl_.message_.update_remote_track_publication_dimension_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.update_remote_track_publication_dimension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse& FfiResponse::_internal_update_remote_track_publication_dimension() const {
  return _internal_has_update_remote_track_publication_dimension()
      ? *_impl_.message_.update_remote_track_publication_dimension_
      : reinterpret_cast< ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse&>(::livekit::proto::_UpdateRemoteTrackPublicationDimensionResponse_default_instance_);
}
inline const ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse& FfiResponse::update_remote_track_publication_dimension() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.update_remote_track_publication_dimension)
  return _internal_update_remote_track_publication_dimension();
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* FfiResponse::unsafe_arena_release_update_remote_track_publication_dimension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.update_remote_track_publication_dimension)
  if (_internal_has_update_remote_track_publication_dimension()) {
    clear_has_message();
    ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* temp = _impl_.message_.update_remote_track_publication_dimension_;
    _impl_.message_.update_remote_track_publication_dimension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_update_remote_track_publication_dimension(::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* update_remote_track_publication_dimension) {
  clear_message();
  if (update_remote_track_publication_dimension) {
    set_has_update_remote_track_publication_dimension();
    _impl_.message_.update_remote_track_publication_dimension_ = update_remote_track_publication_dimension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.update_remote_track_publication_dimension)
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* FfiResponse::_internal_mutable_update_remote_track_publication_dimension() {
  if (!_internal_has_update_remote_track_publication_dimension()) {
    clear_message();
    set_has_update_remote_track_publication_dimension();
    _impl_.message_.update_remote_track_publication_dimension_ = CreateMaybeMessage< ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.update_remote_track_publication_dimension_;
}
inline ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* FfiResponse::mutable_update_remote_track_publication_dimension() {
  ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* _msg = _internal_mutable_update_remote_track_publication_dimension();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.update_remote_track_publication_dimension)
  return _msg;
}

// .livekit.proto.SendStreamHeaderResponse send_stream_header = 43;
inline bool FfiResponse::_internal_has_send_stream_header() const {
  return message_case() == kSendStreamHeader;
}
inline bool FfiResponse::has_send_stream_header() const {
  return _internal_has_send_stream_header();
}
inline void FfiResponse::set_has_send_stream_header() {
  _impl_._oneof_case_[0] = kSendStreamHeader;
}
inline ::livekit::proto::SendStreamHeaderResponse* FfiResponse::release_send_stream_header() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.send_stream_header)
  if (_internal_has_send_stream_header()) {
    clear_has_message();
    ::livekit::proto::SendStreamHeaderResponse* temp = _impl_.message_.send_stream_header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamHeaderResponse& FfiResponse::_internal_send_stream_header() const {
  return _internal_has_send_stream_header()
      ? *_impl_.message_.send_stream_header_
      : reinterpret_cast< ::livekit::proto::SendStreamHeaderResponse&>(::livekit::proto::_SendStreamHeaderResponse_default_instance_);
}
inline const ::livekit::proto::SendStreamHeaderResponse& FfiResponse::send_stream_header() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.send_stream_header)
  return _internal_send_stream_header();
}
inline ::livekit::proto::SendStreamHeaderResponse* FfiResponse::unsafe_arena_release_send_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.send_stream_header)
  if (_internal_has_send_stream_header()) {
    clear_has_message();
    ::livekit::proto::SendStreamHeaderResponse* temp = _impl_.message_.send_stream_header_;
    _impl_.message_.send_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderResponse* send_stream_header) {
  clear_message();
  if (send_stream_header) {
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = send_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.send_stream_header)
}
inline ::livekit::proto::SendStreamHeaderResponse* FfiResponse::_internal_mutable_send_stream_header() {
  if (!_internal_has_send_stream_header()) {
    clear_message();
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = CreateMaybeMessage< ::livekit::proto::SendStreamHeaderResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_header_;
}
inline ::livekit::proto::SendStreamHeaderResponse* FfiResponse::mutable_send_stream_header() {
  ::livekit::proto::SendStreamHeaderResponse* _msg = _internal_mutable_send_stream_header();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.send_stream_header)
  return _msg;
}

// .livekit.proto.SendStreamChunkResponse send_stream_chunk = 44;
inline bool FfiResponse::_internal_has_send_stream_chunk() const {
  return message_case() == kSendStreamChunk;
}
inline bool FfiResponse::has_send_stream_chunk() const {
  return _internal_has_send_stream_chunk();
}
inline void FfiResponse::set_has_send_stream_chunk() {
  _impl_._oneof_case_[0] = kSendStreamChunk;
}
inline ::livekit::proto::SendStreamChunkResponse* FfiResponse::release_send_stream_chunk() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.send_stream_chunk)
  if (_internal_has_send_stream_chunk()) {
    clear_has_message();
    ::livekit::proto::SendStreamChunkResponse* temp = _impl_.message_.send_stream_chunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamChunkResponse& FfiResponse::_internal_send_stream_chunk() const {
  return _internal_has_send_stream_chunk()
      ? *_impl_.message_.send_stream_chunk_
      : reinterpret_cast< ::livekit::proto::SendStreamChunkResponse&>(::livekit::proto::_SendStreamChunkResponse_default_instance_);
}
inline const ::livekit::proto::SendStreamChunkResponse& FfiResponse::send_stream_chunk() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.send_stream_chunk)
  return _internal_send_stream_chunk();
}
inline ::livekit::proto::SendStreamChunkResponse* FfiResponse::unsafe_arena_release_send_stream_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.send_stream_chunk)
  if (_internal_has_send_stream_chunk()) {
    clear_has_message();
    ::livekit::proto::SendStreamChunkResponse* temp = _impl_.message_.send_stream_chunk_;
    _impl_.message_.send_stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkResponse* send_stream_chunk) {
  clear_message();
  if (send_stream_chunk) {
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = send_stream_chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.send_stream_chunk)
}
inline ::livekit::proto::SendStreamChunkResponse* FfiResponse::_internal_mutable_send_stream_chunk() {
  if (!_internal_has_send_stream_chunk()) {
    clear_message();
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = CreateMaybeMessage< ::livekit::proto::SendStreamChunkResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_chunk_;
}
inline ::livekit::proto::SendStreamChunkResponse* FfiResponse::mutable_send_stream_chunk() {
  ::livekit::proto::SendStreamChunkResponse* _msg = _internal_mutable_send_stream_chunk();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.send_stream_chunk)
  return _msg;
}

// .livekit.proto.SendStreamTrailerResponse send_stream_trailer = 45;
inline bool FfiResponse::_internal_has_send_stream_trailer() const {
  return message_case() == kSendStreamTrailer;
}
inline bool FfiResponse::has_send_stream_trailer() const {
  return _internal_has_send_stream_trailer();
}
inline void FfiResponse::set_has_send_stream_trailer() {
  _impl_._oneof_case_[0] = kSendStreamTrailer;
}
inline ::livekit::proto::SendStreamTrailerResponse* FfiResponse::release_send_stream_trailer() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.send_stream_trailer)
  if (_internal_has_send_stream_trailer()) {
    clear_has_message();
    ::livekit::proto::SendStreamTrailerResponse* temp = _impl_.message_.send_stream_trailer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamTrailerResponse& FfiResponse::_internal_send_stream_trailer() const {
  return _internal_has_send_stream_trailer()
      ? *_impl_.message_.send_stream_trailer_
      : reinterpret_cast< ::livekit::proto::SendStreamTrailerResponse&>(::livekit::proto::_SendStreamTrailerResponse_default_instance_);
}
inline const ::livekit::proto::SendStreamTrailerResponse& FfiResponse::send_stream_trailer() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.send_stream_trailer)
  return _internal_send_stream_trailer();
}
inline ::livekit::proto::SendStreamTrailerResponse* FfiResponse::unsafe_arena_release_send_stream_trailer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.send_stream_trailer)
  if (_internal_has_send_stream_trailer()) {
    clear_has_message();
    ::livekit::proto::SendStreamTrailerResponse* temp = _impl_.message_.send_stream_trailer_;
    _impl_.message_.send_stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerResponse* send_stream_trailer) {
  clear_message();
  if (send_stream_trailer) {
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = send_stream_trailer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.send_stream_trailer)
}
inline ::livekit::proto::SendStreamTrailerResponse* FfiResponse::_internal_mutable_send_stream_trailer() {
  if (!_internal_has_send_stream_trailer()) {
    clear_message();
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = CreateMaybeMessage< ::livekit::proto::SendStreamTrailerResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_trailer_;
}
inline ::livekit::proto::SendStreamTrailerResponse* FfiResponse::mutable_send_stream_trailer() {
  ::livekit::proto::SendStreamTrailerResponse* _msg = _internal_mutable_send_stream_trailer();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.send_stream_trailer)
  return _msg;
}

// .livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse set_data_channel_buffered_amount_low_threshold = 46;
inline bool FfiResponse::_internal_has_set_data_channel_buffered_amount_low_threshold() const {
  return message_case() == kSetDataChannelBufferedAmountLowThreshold;
}
inline bool FfiResponse::has_set_data_channel_buffered_amount_low_threshold() const {
  return _internal_has_set_data_channel_buffered_amount_low_threshold();
}
inline void FfiResponse::set_has_set_data_channel_buffered_amount_low_threshold() {
  _impl_._oneof_case_[0] = kSetDataChannelBufferedAmountLowThreshold;
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* FfiResponse::release_set_data_channel_buffered_amount_low_threshold() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.set_data_channel_buffered_amount_low_threshold)
  if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    clear_has_message();
    ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* temp = _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse& FfiResponse::_internal_set_data_channel_buffered_amount_low_threshold() const {
  return _internal_has_set_data_channel_buffered_amount_low_threshold()
      ? *_impl_.message_.set_data_channel_buffered_amount_low_threshold_
      : reinterpret_cast< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse&>(::livekit::proto::_SetDataChannelBufferedAmountLowThresholdResponse_default_instance_);
}
inline const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse& FfiResponse::set_data_channel_buffered_amount_low_threshold() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.set_data_channel_buffered_amount_low_threshold)
  return _internal_set_data_channel_buffered_amount_low_threshold();
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* FfiResponse::unsafe_arena_release_set_data_channel_buffered_amount_low_threshold() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.set_data_channel_buffered_amount_low_threshold)
  if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    clear_has_message();
    ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* temp = _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_set_data_channel_buffered_amount_low_threshold(::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* set_data_channel_buffered_amount_low_threshold) {
  clear_message();
  if (set_data_channel_buffered_amount_low_threshold) {
    set_has_set_data_channel_buffered_amount_low_threshold();
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = set_data_channel_buffered_amount_low_threshold;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.set_data_channel_buffered_amount_low_threshold)
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* FfiResponse::_internal_mutable_set_data_channel_buffered_amount_low_threshold() {
  if (!_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    clear_message();
    set_has_set_data_channel_buffered_amount_low_threshold();
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = CreateMaybeMessage< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
}
inline ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* FfiResponse::mutable_set_data_channel_buffered_amount_low_threshold() {
  ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* _msg = _internal_mutable_set_data_channel_buffered_amount_low_threshold();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.set_data_channel_buffered_amount_low_threshold)
  return _msg;
}

// .livekit.proto.LoadAudioFilterPluginResponse load_audio_filter_plugin = 48;
inline bool FfiResponse::_internal_has_load_audio_filter_plugin() const {
  return message_case() == kLoadAudioFilterPlugin;
}
inline bool FfiResponse::has_load_audio_filter_plugin() const {
  return _internal_has_load_audio_filter_plugin();
}
inline void FfiResponse::set_has_load_audio_filter_plugin() {
  _impl_._oneof_case_[0] = kLoadAudioFilterPlugin;
}
inline ::livekit::proto::LoadAudioFilterPluginResponse* FfiResponse::release_load_audio_filter_plugin() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.load_audio_filter_plugin)
  if (_internal_has_load_audio_filter_plugin()) {
    clear_has_message();
    ::livekit::proto::LoadAudioFilterPluginResponse* temp = _impl_.message_.load_audio_filter_plugin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.load_audio_filter_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::LoadAudioFilterPluginResponse& FfiResponse::_internal_load_audio_filter_plugin() const {
  return _internal_has_load_audio_filter_plugin()
      ? *_impl_.message_.load_audio_filter_plugin_
      : reinterpret_cast< ::livekit::proto::LoadAudioFilterPluginResponse&>(::livekit::proto::_LoadAudioFilterPluginResponse_default_instance_);
}
inline const ::livekit::proto::LoadAudioFilterPluginResponse& FfiResponse::load_audio_filter_plugin() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.load_audio_filter_plugin)
  return _internal_load_audio_filter_plugin();
}
inline ::livekit::proto::LoadAudioFilterPluginResponse* FfiResponse::unsafe_arena_release_load_audio_filter_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.load_audio_filter_plugin)
  if (_internal_has_load_audio_filter_plugin()) {
    clear_has_message();
    ::livekit::proto::LoadAudioFilterPluginResponse* temp = _impl_.message_.load_audio_filter_plugin_;
    _impl_.message_.load_audio_filter_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_load_audio_filter_plugin(::livekit::proto::LoadAudioFilterPluginResponse* load_audio_filter_plugin) {
  clear_message();
  if (load_audio_filter_plugin) {
    set_has_load_audio_filter_plugin();
    _impl_.message_.load_audio_filter_plugin_ = load_audio_filter_plugin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.load_audio_filter_plugin)
}
inline ::livekit::proto::LoadAudioFilterPluginResponse* FfiResponse::_internal_mutable_load_audio_filter_plugin() {
  if (!_internal_has_load_audio_filter_plugin()) {
    clear_message();
    set_has_load_audio_filter_plugin();
    _impl_.message_.load_audio_filter_plugin_ = CreateMaybeMessage< ::livekit::proto::LoadAudioFilterPluginResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.load_audio_filter_plugin_;
}
inline ::livekit::proto::LoadAudioFilterPluginResponse* FfiResponse::mutable_load_audio_filter_plugin() {
  ::livekit::proto::LoadAudioFilterPluginResponse* _msg = _internal_mutable_load_audio_filter_plugin();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.load_audio_filter_plugin)
  return _msg;
}

// .livekit.proto.NewApmResponse new_apm = 49;
inline bool FfiResponse::_internal_has_new_apm() const {
  return message_case() == kNewApm;
}
inline bool FfiResponse::has_new_apm() const {
  return _internal_has_new_apm();
}
inline void FfiResponse::set_has_new_apm() {
  _impl_._oneof_case_[0] = kNewApm;
}
inline ::livekit::proto::NewApmResponse* FfiResponse::release_new_apm() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.new_apm)
  if (_internal_has_new_apm()) {
    clear_has_message();
    ::livekit::proto::NewApmResponse* temp = _impl_.message_.new_apm_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.new_apm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::NewApmResponse& FfiResponse::_internal_new_apm() const {
  return _internal_has_new_apm()
      ? *_impl_.message_.new_apm_
      : reinterpret_cast< ::livekit::proto::NewApmResponse&>(::livekit::proto::_NewApmResponse_default_instance_);
}
inline const ::livekit::proto::NewApmResponse& FfiResponse::new_apm() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.new_apm)
  return _internal_new_apm();
}
inline ::livekit::proto::NewApmResponse* FfiResponse::unsafe_arena_release_new_apm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.new_apm)
  if (_internal_has_new_apm()) {
    clear_has_message();
    ::livekit::proto::NewApmResponse* temp = _impl_.message_.new_apm_;
    _impl_.message_.new_apm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_new_apm(::livekit::proto::NewApmResponse* new_apm) {
  clear_message();
  if (new_apm) {
    set_has_new_apm();
    _impl_.message_.new_apm_ = new_apm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.new_apm)
}
inline ::livekit::proto::NewApmResponse* FfiResponse::_internal_mutable_new_apm() {
  if (!_internal_has_new_apm()) {
    clear_message();
    set_has_new_apm();
    _impl_.message_.new_apm_ = CreateMaybeMessage< ::livekit::proto::NewApmResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.new_apm_;
}
inline ::livekit::proto::NewApmResponse* FfiResponse::mutable_new_apm() {
  ::livekit::proto::NewApmResponse* _msg = _internal_mutable_new_apm();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.new_apm)
  return _msg;
}

// .livekit.proto.ApmProcessStreamResponse apm_process_stream = 50;
inline bool FfiResponse::_internal_has_apm_process_stream() const {
  return message_case() == kApmProcessStream;
}
inline bool FfiResponse::has_apm_process_stream() const {
  return _internal_has_apm_process_stream();
}
inline void FfiResponse::set_has_apm_process_stream() {
  _impl_._oneof_case_[0] = kApmProcessStream;
}
inline ::livekit::proto::ApmProcessStreamResponse* FfiResponse::release_apm_process_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.apm_process_stream)
  if (_internal_has_apm_process_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessStreamResponse* temp = _impl_.message_.apm_process_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.apm_process_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ApmProcessStreamResponse& FfiResponse::_internal_apm_process_stream() const {
  return _internal_has_apm_process_stream()
      ? *_impl_.message_.apm_process_stream_
      : reinterpret_cast< ::livekit::proto::ApmProcessStreamResponse&>(::livekit::proto::_ApmProcessStreamResponse_default_instance_);
}
inline const ::livekit::proto::ApmProcessStreamResponse& FfiResponse::apm_process_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.apm_process_stream)
  return _internal_apm_process_stream();
}
inline ::livekit::proto::ApmProcessStreamResponse* FfiResponse::unsafe_arena_release_apm_process_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.apm_process_stream)
  if (_internal_has_apm_process_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessStreamResponse* temp = _impl_.message_.apm_process_stream_;
    _impl_.message_.apm_process_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_apm_process_stream(::livekit::proto::ApmProcessStreamResponse* apm_process_stream) {
  clear_message();
  if (apm_process_stream) {
    set_has_apm_process_stream();
    _impl_.message_.apm_process_stream_ = apm_process_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.apm_process_stream)
}
inline ::livekit::proto::ApmProcessStreamResponse* FfiResponse::_internal_mutable_apm_process_stream() {
  if (!_internal_has_apm_process_stream()) {
    clear_message();
    set_has_apm_process_stream();
    _impl_.message_.apm_process_stream_ = CreateMaybeMessage< ::livekit::proto::ApmProcessStreamResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.apm_process_stream_;
}
inline ::livekit::proto::ApmProcessStreamResponse* FfiResponse::mutable_apm_process_stream() {
  ::livekit::proto::ApmProcessStreamResponse* _msg = _internal_mutable_apm_process_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.apm_process_stream)
  return _msg;
}

// .livekit.proto.ApmProcessReverseStreamResponse apm_process_reverse_stream = 51;
inline bool FfiResponse::_internal_has_apm_process_reverse_stream() const {
  return message_case() == kApmProcessReverseStream;
}
inline bool FfiResponse::has_apm_process_reverse_stream() const {
  return _internal_has_apm_process_reverse_stream();
}
inline void FfiResponse::set_has_apm_process_reverse_stream() {
  _impl_._oneof_case_[0] = kApmProcessReverseStream;
}
inline ::livekit::proto::ApmProcessReverseStreamResponse* FfiResponse::release_apm_process_reverse_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiResponse.apm_process_reverse_stream)
  if (_internal_has_apm_process_reverse_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessReverseStreamResponse* temp = _impl_.message_.apm_process_reverse_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.apm_process_reverse_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ApmProcessReverseStreamResponse& FfiResponse::_internal_apm_process_reverse_stream() const {
  return _internal_has_apm_process_reverse_stream()
      ? *_impl_.message_.apm_process_reverse_stream_
      : reinterpret_cast< ::livekit::proto::ApmProcessReverseStreamResponse&>(::livekit::proto::_ApmProcessReverseStreamResponse_default_instance_);
}
inline const ::livekit::proto::ApmProcessReverseStreamResponse& FfiResponse::apm_process_reverse_stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiResponse.apm_process_reverse_stream)
  return _internal_apm_process_reverse_stream();
}
inline ::livekit::proto::ApmProcessReverseStreamResponse* FfiResponse::unsafe_arena_release_apm_process_reverse_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiResponse.apm_process_reverse_stream)
  if (_internal_has_apm_process_reverse_stream()) {
    clear_has_message();
    ::livekit::proto::ApmProcessReverseStreamResponse* temp = _impl_.message_.apm_process_reverse_stream_;
    _impl_.message_.apm_process_reverse_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiResponse::unsafe_arena_set_allocated_apm_process_reverse_stream(::livekit::proto::ApmProcessReverseStreamResponse* apm_process_reverse_stream) {
  clear_message();
  if (apm_process_reverse_stream) {
    set_has_apm_process_reverse_stream();
    _impl_.message_.apm_process_reverse_stream_ = apm_process_reverse_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiResponse.apm_process_reverse_stream)
}
inline ::livekit::proto::ApmProcessReverseStreamResponse* FfiResponse::_internal_mutable_apm_process_reverse_stream() {
  if (!_internal_has_apm_process_reverse_stream()) {
    clear_message();
    set_has_apm_process_reverse_stream();
    _impl_.message_.apm_process_reverse_stream_ = CreateMaybeMessage< ::livekit::proto::ApmProcessReverseStreamResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.apm_process_reverse_stream_;
}
inline ::livekit::proto::ApmProcessReverseStreamResponse* FfiResponse::mutable_apm_process_reverse_stream() {
  ::livekit::proto::ApmProcessReverseStreamResponse* _msg = _internal_mutable_apm_process_reverse_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiResponse.apm_process_reverse_stream)
  return _msg;
}

inline bool FfiResponse::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void FfiResponse::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline FfiResponse::MessageCase FfiResponse::message_case() const {
  return FfiResponse::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FfiEvent

// .livekit.proto.RoomEvent room_event = 1;
inline bool FfiEvent::_internal_has_room_event() const {
  return message_case() == kRoomEvent;
}
inline bool FfiEvent::has_room_event() const {
  return _internal_has_room_event();
}
inline void FfiEvent::set_has_room_event() {
  _impl_._oneof_case_[0] = kRoomEvent;
}
inline ::livekit::proto::RoomEvent* FfiEvent::release_room_event() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.room_event)
  if (_internal_has_room_event()) {
    clear_has_message();
    ::livekit::proto::RoomEvent* temp = _impl_.message_.room_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.room_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RoomEvent& FfiEvent::_internal_room_event() const {
  return _internal_has_room_event()
      ? *_impl_.message_.room_event_
      : reinterpret_cast< ::livekit::proto::RoomEvent&>(::livekit::proto::_RoomEvent_default_instance_);
}
inline const ::livekit::proto::RoomEvent& FfiEvent::room_event() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.room_event)
  return _internal_room_event();
}
inline ::livekit::proto::RoomEvent* FfiEvent::unsafe_arena_release_room_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.room_event)
  if (_internal_has_room_event()) {
    clear_has_message();
    ::livekit::proto::RoomEvent* temp = _impl_.message_.room_event_;
    _impl_.message_.room_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_room_event(::livekit::proto::RoomEvent* room_event) {
  clear_message();
  if (room_event) {
    set_has_room_event();
    _impl_.message_.room_event_ = room_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.room_event)
}
inline ::livekit::proto::RoomEvent* FfiEvent::_internal_mutable_room_event() {
  if (!_internal_has_room_event()) {
    clear_message();
    set_has_room_event();
    _impl_.message_.room_event_ = CreateMaybeMessage< ::livekit::proto::RoomEvent >(GetArenaForAllocation());
  }
  return _impl_.message_.room_event_;
}
inline ::livekit::proto::RoomEvent* FfiEvent::mutable_room_event() {
  ::livekit::proto::RoomEvent* _msg = _internal_mutable_room_event();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.room_event)
  return _msg;
}

// .livekit.proto.TrackEvent track_event = 2;
inline bool FfiEvent::_internal_has_track_event() const {
  return message_case() == kTrackEvent;
}
inline bool FfiEvent::has_track_event() const {
  return _internal_has_track_event();
}
inline void FfiEvent::set_has_track_event() {
  _impl_._oneof_case_[0] = kTrackEvent;
}
inline ::livekit::proto::TrackEvent* FfiEvent::release_track_event() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.track_event)
  if (_internal_has_track_event()) {
    clear_has_message();
    ::livekit::proto::TrackEvent* temp = _impl_.message_.track_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::TrackEvent& FfiEvent::_internal_track_event() const {
  return _internal_has_track_event()
      ? *_impl_.message_.track_event_
      : reinterpret_cast< ::livekit::proto::TrackEvent&>(::livekit::proto::_TrackEvent_default_instance_);
}
inline const ::livekit::proto::TrackEvent& FfiEvent::track_event() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.track_event)
  return _internal_track_event();
}
inline ::livekit::proto::TrackEvent* FfiEvent::unsafe_arena_release_track_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.track_event)
  if (_internal_has_track_event()) {
    clear_has_message();
    ::livekit::proto::TrackEvent* temp = _impl_.message_.track_event_;
    _impl_.message_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_track_event(::livekit::proto::TrackEvent* track_event) {
  clear_message();
  if (track_event) {
    set_has_track_event();
    _impl_.message_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.track_event)
}
inline ::livekit::proto::TrackEvent* FfiEvent::_internal_mutable_track_event() {
  if (!_internal_has_track_event()) {
    clear_message();
    set_has_track_event();
    _impl_.message_.track_event_ = CreateMaybeMessage< ::livekit::proto::TrackEvent >(GetArenaForAllocation());
  }
  return _impl_.message_.track_event_;
}
inline ::livekit::proto::TrackEvent* FfiEvent::mutable_track_event() {
  ::livekit::proto::TrackEvent* _msg = _internal_mutable_track_event();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.track_event)
  return _msg;
}

// .livekit.proto.VideoStreamEvent video_stream_event = 3;
inline bool FfiEvent::_internal_has_video_stream_event() const {
  return message_case() == kVideoStreamEvent;
}
inline bool FfiEvent::has_video_stream_event() const {
  return _internal_has_video_stream_event();
}
inline void FfiEvent::set_has_video_stream_event() {
  _impl_._oneof_case_[0] = kVideoStreamEvent;
}
inline ::livekit::proto::VideoStreamEvent* FfiEvent::release_video_stream_event() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.video_stream_event)
  if (_internal_has_video_stream_event()) {
    clear_has_message();
    ::livekit::proto::VideoStreamEvent* temp = _impl_.message_.video_stream_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.video_stream_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::VideoStreamEvent& FfiEvent::_internal_video_stream_event() const {
  return _internal_has_video_stream_event()
      ? *_impl_.message_.video_stream_event_
      : reinterpret_cast< ::livekit::proto::VideoStreamEvent&>(::livekit::proto::_VideoStreamEvent_default_instance_);
}
inline const ::livekit::proto::VideoStreamEvent& FfiEvent::video_stream_event() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.video_stream_event)
  return _internal_video_stream_event();
}
inline ::livekit::proto::VideoStreamEvent* FfiEvent::unsafe_arena_release_video_stream_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.video_stream_event)
  if (_internal_has_video_stream_event()) {
    clear_has_message();
    ::livekit::proto::VideoStreamEvent* temp = _impl_.message_.video_stream_event_;
    _impl_.message_.video_stream_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_video_stream_event(::livekit::proto::VideoStreamEvent* video_stream_event) {
  clear_message();
  if (video_stream_event) {
    set_has_video_stream_event();
    _impl_.message_.video_stream_event_ = video_stream_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.video_stream_event)
}
inline ::livekit::proto::VideoStreamEvent* FfiEvent::_internal_mutable_video_stream_event() {
  if (!_internal_has_video_stream_event()) {
    clear_message();
    set_has_video_stream_event();
    _impl_.message_.video_stream_event_ = CreateMaybeMessage< ::livekit::proto::VideoStreamEvent >(GetArenaForAllocation());
  }
  return _impl_.message_.video_stream_event_;
}
inline ::livekit::proto::VideoStreamEvent* FfiEvent::mutable_video_stream_event() {
  ::livekit::proto::VideoStreamEvent* _msg = _internal_mutable_video_stream_event();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.video_stream_event)
  return _msg;
}

// .livekit.proto.AudioStreamEvent audio_stream_event = 4;
inline bool FfiEvent::_internal_has_audio_stream_event() const {
  return message_case() == kAudioStreamEvent;
}
inline bool FfiEvent::has_audio_stream_event() const {
  return _internal_has_audio_stream_event();
}
inline void FfiEvent::set_has_audio_stream_event() {
  _impl_._oneof_case_[0] = kAudioStreamEvent;
}
inline ::livekit::proto::AudioStreamEvent* FfiEvent::release_audio_stream_event() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.audio_stream_event)
  if (_internal_has_audio_stream_event()) {
    clear_has_message();
    ::livekit::proto::AudioStreamEvent* temp = _impl_.message_.audio_stream_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.audio_stream_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::AudioStreamEvent& FfiEvent::_internal_audio_stream_event() const {
  return _internal_has_audio_stream_event()
      ? *_impl_.message_.audio_stream_event_
      : reinterpret_cast< ::livekit::proto::AudioStreamEvent&>(::livekit::proto::_AudioStreamEvent_default_instance_);
}
inline const ::livekit::proto::AudioStreamEvent& FfiEvent::audio_stream_event() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.audio_stream_event)
  return _internal_audio_stream_event();
}
inline ::livekit::proto::AudioStreamEvent* FfiEvent::unsafe_arena_release_audio_stream_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.audio_stream_event)
  if (_internal_has_audio_stream_event()) {
    clear_has_message();
    ::livekit::proto::AudioStreamEvent* temp = _impl_.message_.audio_stream_event_;
    _impl_.message_.audio_stream_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_audio_stream_event(::livekit::proto::AudioStreamEvent* audio_stream_event) {
  clear_message();
  if (audio_stream_event) {
    set_has_audio_stream_event();
    _impl_.message_.audio_stream_event_ = audio_stream_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.audio_stream_event)
}
inline ::livekit::proto::AudioStreamEvent* FfiEvent::_internal_mutable_audio_stream_event() {
  if (!_internal_has_audio_stream_event()) {
    clear_message();
    set_has_audio_stream_event();
    _impl_.message_.audio_stream_event_ = CreateMaybeMessage< ::livekit::proto::AudioStreamEvent >(GetArenaForAllocation());
  }
  return _impl_.message_.audio_stream_event_;
}
inline ::livekit::proto::AudioStreamEvent* FfiEvent::mutable_audio_stream_event() {
  ::livekit::proto::AudioStreamEvent* _msg = _internal_mutable_audio_stream_event();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.audio_stream_event)
  return _msg;
}

// .livekit.proto.ConnectCallback connect = 5;
inline bool FfiEvent::_internal_has_connect() const {
  return message_case() == kConnect;
}
inline bool FfiEvent::has_connect() const {
  return _internal_has_connect();
}
inline void FfiEvent::set_has_connect() {
  _impl_._oneof_case_[0] = kConnect;
}
inline ::livekit::proto::ConnectCallback* FfiEvent::release_connect() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.connect)
  if (_internal_has_connect()) {
    clear_has_message();
    ::livekit::proto::ConnectCallback* temp = _impl_.message_.connect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::ConnectCallback& FfiEvent::_internal_connect() const {
  return _internal_has_connect()
      ? *_impl_.message_.connect_
      : reinterpret_cast< ::livekit::proto::ConnectCallback&>(::livekit::proto::_ConnectCallback_default_instance_);
}
inline const ::livekit::proto::ConnectCallback& FfiEvent::connect() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.connect)
  return _internal_connect();
}
inline ::livekit::proto::ConnectCallback* FfiEvent::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.connect)
  if (_internal_has_connect()) {
    clear_has_message();
    ::livekit::proto::ConnectCallback* temp = _impl_.message_.connect_;
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_connect(::livekit::proto::ConnectCallback* connect) {
  clear_message();
  if (connect) {
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.connect)
}
inline ::livekit::proto::ConnectCallback* FfiEvent::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_message();
    set_has_connect();
    _impl_.message_.connect_ = CreateMaybeMessage< ::livekit::proto::ConnectCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.connect_;
}
inline ::livekit::proto::ConnectCallback* FfiEvent::mutable_connect() {
  ::livekit::proto::ConnectCallback* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.connect)
  return _msg;
}

// .livekit.proto.DisconnectCallback disconnect = 7;
inline bool FfiEvent::_internal_has_disconnect() const {
  return message_case() == kDisconnect;
}
inline bool FfiEvent::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void FfiEvent::set_has_disconnect() {
  _impl_._oneof_case_[0] = kDisconnect;
}
inline ::livekit::proto::DisconnectCallback* FfiEvent::release_disconnect() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_message();
    ::livekit::proto::DisconnectCallback* temp = _impl_.message_.disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::DisconnectCallback& FfiEvent::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *_impl_.message_.disconnect_
      : reinterpret_cast< ::livekit::proto::DisconnectCallback&>(::livekit::proto::_DisconnectCallback_default_instance_);
}
inline const ::livekit::proto::DisconnectCallback& FfiEvent::disconnect() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.disconnect)
  return _internal_disconnect();
}
inline ::livekit::proto::DisconnectCallback* FfiEvent::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_message();
    ::livekit::proto::DisconnectCallback* temp = _impl_.message_.disconnect_;
    _impl_.message_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_disconnect(::livekit::proto::DisconnectCallback* disconnect) {
  clear_message();
  if (disconnect) {
    set_has_disconnect();
    _impl_.message_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.disconnect)
}
inline ::livekit::proto::DisconnectCallback* FfiEvent::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_message();
    set_has_disconnect();
    _impl_.message_.disconnect_ = CreateMaybeMessage< ::livekit::proto::DisconnectCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.disconnect_;
}
inline ::livekit::proto::DisconnectCallback* FfiEvent::mutable_disconnect() {
  ::livekit::proto::DisconnectCallback* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.disconnect)
  return _msg;
}

// .livekit.proto.DisposeCallback dispose = 8;
inline bool FfiEvent::_internal_has_dispose() const {
  return message_case() == kDispose;
}
inline bool FfiEvent::has_dispose() const {
  return _internal_has_dispose();
}
inline void FfiEvent::set_has_dispose() {
  _impl_._oneof_case_[0] = kDispose;
}
inline void FfiEvent::clear_dispose() {
  if (_internal_has_dispose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dispose_;
    }
    clear_has_message();
  }
}
inline ::livekit::proto::DisposeCallback* FfiEvent::release_dispose() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.dispose)
  if (_internal_has_dispose()) {
    clear_has_message();
    ::livekit::proto::DisposeCallback* temp = _impl_.message_.dispose_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dispose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::DisposeCallback& FfiEvent::_internal_dispose() const {
  return _internal_has_dispose()
      ? *_impl_.message_.dispose_
      : reinterpret_cast< ::livekit::proto::DisposeCallback&>(::livekit::proto::_DisposeCallback_default_instance_);
}
inline const ::livekit::proto::DisposeCallback& FfiEvent::dispose() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.dispose)
  return _internal_dispose();
}
inline ::livekit::proto::DisposeCallback* FfiEvent::unsafe_arena_release_dispose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.dispose)
  if (_internal_has_dispose()) {
    clear_has_message();
    ::livekit::proto::DisposeCallback* temp = _impl_.message_.dispose_;
    _impl_.message_.dispose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_dispose(::livekit::proto::DisposeCallback* dispose) {
  clear_message();
  if (dispose) {
    set_has_dispose();
    _impl_.message_.dispose_ = dispose;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.dispose)
}
inline ::livekit::proto::DisposeCallback* FfiEvent::_internal_mutable_dispose() {
  if (!_internal_has_dispose()) {
    clear_message();
    set_has_dispose();
    _impl_.message_.dispose_ = CreateMaybeMessage< ::livekit::proto::DisposeCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.dispose_;
}
inline ::livekit::proto::DisposeCallback* FfiEvent::mutable_dispose() {
  ::livekit::proto::DisposeCallback* _msg = _internal_mutable_dispose();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.dispose)
  return _msg;
}

// .livekit.proto.PublishTrackCallback publish_track = 9;
inline bool FfiEvent::_internal_has_publish_track() const {
  return message_case() == kPublishTrack;
}
inline bool FfiEvent::has_publish_track() const {
  return _internal_has_publish_track();
}
inline void FfiEvent::set_has_publish_track() {
  _impl_._oneof_case_[0] = kPublishTrack;
}
inline ::livekit::proto::PublishTrackCallback* FfiEvent::release_publish_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.publish_track)
  if (_internal_has_publish_track()) {
    clear_has_message();
    ::livekit::proto::PublishTrackCallback* temp = _impl_.message_.publish_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishTrackCallback& FfiEvent::_internal_publish_track() const {
  return _internal_has_publish_track()
      ? *_impl_.message_.publish_track_
      : reinterpret_cast< ::livekit::proto::PublishTrackCallback&>(::livekit::proto::_PublishTrackCallback_default_instance_);
}
inline const ::livekit::proto::PublishTrackCallback& FfiEvent::publish_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.publish_track)
  return _internal_publish_track();
}
inline ::livekit::proto::PublishTrackCallback* FfiEvent::unsafe_arena_release_publish_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.publish_track)
  if (_internal_has_publish_track()) {
    clear_has_message();
    ::livekit::proto::PublishTrackCallback* temp = _impl_.message_.publish_track_;
    _impl_.message_.publish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_publish_track(::livekit::proto::PublishTrackCallback* publish_track) {
  clear_message();
  if (publish_track) {
    set_has_publish_track();
    _impl_.message_.publish_track_ = publish_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.publish_track)
}
inline ::livekit::proto::PublishTrackCallback* FfiEvent::_internal_mutable_publish_track() {
  if (!_internal_has_publish_track()) {
    clear_message();
    set_has_publish_track();
    _impl_.message_.publish_track_ = CreateMaybeMessage< ::livekit::proto::PublishTrackCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_track_;
}
inline ::livekit::proto::PublishTrackCallback* FfiEvent::mutable_publish_track() {
  ::livekit::proto::PublishTrackCallback* _msg = _internal_mutable_publish_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.publish_track)
  return _msg;
}

// .livekit.proto.UnpublishTrackCallback unpublish_track = 10;
inline bool FfiEvent::_internal_has_unpublish_track() const {
  return message_case() == kUnpublishTrack;
}
inline bool FfiEvent::has_unpublish_track() const {
  return _internal_has_unpublish_track();
}
inline void FfiEvent::set_has_unpublish_track() {
  _impl_._oneof_case_[0] = kUnpublishTrack;
}
inline ::livekit::proto::UnpublishTrackCallback* FfiEvent::release_unpublish_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.unpublish_track)
  if (_internal_has_unpublish_track()) {
    clear_has_message();
    ::livekit::proto::UnpublishTrackCallback* temp = _impl_.message_.unpublish_track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.unpublish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::UnpublishTrackCallback& FfiEvent::_internal_unpublish_track() const {
  return _internal_has_unpublish_track()
      ? *_impl_.message_.unpublish_track_
      : reinterpret_cast< ::livekit::proto::UnpublishTrackCallback&>(::livekit::proto::_UnpublishTrackCallback_default_instance_);
}
inline const ::livekit::proto::UnpublishTrackCallback& FfiEvent::unpublish_track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.unpublish_track)
  return _internal_unpublish_track();
}
inline ::livekit::proto::UnpublishTrackCallback* FfiEvent::unsafe_arena_release_unpublish_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.unpublish_track)
  if (_internal_has_unpublish_track()) {
    clear_has_message();
    ::livekit::proto::UnpublishTrackCallback* temp = _impl_.message_.unpublish_track_;
    _impl_.message_.unpublish_track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_unpublish_track(::livekit::proto::UnpublishTrackCallback* unpublish_track) {
  clear_message();
  if (unpublish_track) {
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = unpublish_track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.unpublish_track)
}
inline ::livekit::proto::UnpublishTrackCallback* FfiEvent::_internal_mutable_unpublish_track() {
  if (!_internal_has_unpublish_track()) {
    clear_message();
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = CreateMaybeMessage< ::livekit::proto::UnpublishTrackCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.unpublish_track_;
}
inline ::livekit::proto::UnpublishTrackCallback* FfiEvent::mutable_unpublish_track() {
  ::livekit::proto::UnpublishTrackCallback* _msg = _internal_mutable_unpublish_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.unpublish_track)
  return _msg;
}

// .livekit.proto.PublishDataCallback publish_data = 11;
inline bool FfiEvent::_internal_has_publish_data() const {
  return message_case() == kPublishData;
}
inline bool FfiEvent::has_publish_data() const {
  return _internal_has_publish_data();
}
inline void FfiEvent::set_has_publish_data() {
  _impl_._oneof_case_[0] = kPublishData;
}
inline ::livekit::proto::PublishDataCallback* FfiEvent::release_publish_data() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.publish_data)
  if (_internal_has_publish_data()) {
    clear_has_message();
    ::livekit::proto::PublishDataCallback* temp = _impl_.message_.publish_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishDataCallback& FfiEvent::_internal_publish_data() const {
  return _internal_has_publish_data()
      ? *_impl_.message_.publish_data_
      : reinterpret_cast< ::livekit::proto::PublishDataCallback&>(::livekit::proto::_PublishDataCallback_default_instance_);
}
inline const ::livekit::proto::PublishDataCallback& FfiEvent::publish_data() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.publish_data)
  return _internal_publish_data();
}
inline ::livekit::proto::PublishDataCallback* FfiEvent::unsafe_arena_release_publish_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.publish_data)
  if (_internal_has_publish_data()) {
    clear_has_message();
    ::livekit::proto::PublishDataCallback* temp = _impl_.message_.publish_data_;
    _impl_.message_.publish_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_publish_data(::livekit::proto::PublishDataCallback* publish_data) {
  clear_message();
  if (publish_data) {
    set_has_publish_data();
    _impl_.message_.publish_data_ = publish_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.publish_data)
}
inline ::livekit::proto::PublishDataCallback* FfiEvent::_internal_mutable_publish_data() {
  if (!_internal_has_publish_data()) {
    clear_message();
    set_has_publish_data();
    _impl_.message_.publish_data_ = CreateMaybeMessage< ::livekit::proto::PublishDataCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_data_;
}
inline ::livekit::proto::PublishDataCallback* FfiEvent::mutable_publish_data() {
  ::livekit::proto::PublishDataCallback* _msg = _internal_mutable_publish_data();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.publish_data)
  return _msg;
}

// .livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
inline bool FfiEvent::_internal_has_publish_transcription() const {
  return message_case() == kPublishTranscription;
}
inline bool FfiEvent::has_publish_transcription() const {
  return _internal_has_publish_transcription();
}
inline void FfiEvent::set_has_publish_transcription() {
  _impl_._oneof_case_[0] = kPublishTranscription;
}
inline ::livekit::proto::PublishTranscriptionCallback* FfiEvent::release_publish_transcription() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.publish_transcription)
  if (_internal_has_publish_transcription()) {
    clear_has_message();
    ::livekit::proto::PublishTranscriptionCallback* temp = _impl_.message_.publish_transcription_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishTranscriptionCallback& FfiEvent::_internal_publish_transcription() const {
  return _internal_has_publish_transcription()
      ? *_impl_.message_.publish_transcription_
      : reinterpret_cast< ::livekit::proto::PublishTranscriptionCallback&>(::livekit::proto::_PublishTranscriptionCallback_default_instance_);
}
inline const ::livekit::proto::PublishTranscriptionCallback& FfiEvent::publish_transcription() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.publish_transcription)
  return _internal_publish_transcription();
}
inline ::livekit::proto::PublishTranscriptionCallback* FfiEvent::unsafe_arena_release_publish_transcription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.publish_transcription)
  if (_internal_has_publish_transcription()) {
    clear_has_message();
    ::livekit::proto::PublishTranscriptionCallback* temp = _impl_.message_.publish_transcription_;
    _impl_.message_.publish_transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionCallback* publish_transcription) {
  clear_message();
  if (publish_transcription) {
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = publish_transcription;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.publish_transcription)
}
inline ::livekit::proto::PublishTranscriptionCallback* FfiEvent::_internal_mutable_publish_transcription() {
  if (!_internal_has_publish_transcription()) {
    clear_message();
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = CreateMaybeMessage< ::livekit::proto::PublishTranscriptionCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_transcription_;
}
inline ::livekit::proto::PublishTranscriptionCallback* FfiEvent::mutable_publish_transcription() {
  ::livekit::proto::PublishTranscriptionCallback* _msg = _internal_mutable_publish_transcription();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.publish_transcription)
  return _msg;
}

// .livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
inline bool FfiEvent::_internal_has_capture_audio_frame() const {
  return message_case() == kCaptureAudioFrame;
}
inline bool FfiEvent::has_capture_audio_frame() const {
  return _internal_has_capture_audio_frame();
}
inline void FfiEvent::set_has_capture_audio_frame() {
  _impl_._oneof_case_[0] = kCaptureAudioFrame;
}
inline ::livekit::proto::CaptureAudioFrameCallback* FfiEvent::release_capture_audio_frame() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.capture_audio_frame)
  if (_internal_has_capture_audio_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureAudioFrameCallback* temp = _impl_.message_.capture_audio_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.capture_audio_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::CaptureAudioFrameCallback& FfiEvent::_internal_capture_audio_frame() const {
  return _internal_has_capture_audio_frame()
      ? *_impl_.message_.capture_audio_frame_
      : reinterpret_cast< ::livekit::proto::CaptureAudioFrameCallback&>(::livekit::proto::_CaptureAudioFrameCallback_default_instance_);
}
inline const ::livekit::proto::CaptureAudioFrameCallback& FfiEvent::capture_audio_frame() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.capture_audio_frame)
  return _internal_capture_audio_frame();
}
inline ::livekit::proto::CaptureAudioFrameCallback* FfiEvent::unsafe_arena_release_capture_audio_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.capture_audio_frame)
  if (_internal_has_capture_audio_frame()) {
    clear_has_message();
    ::livekit::proto::CaptureAudioFrameCallback* temp = _impl_.message_.capture_audio_frame_;
    _impl_.message_.capture_audio_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameCallback* capture_audio_frame) {
  clear_message();
  if (capture_audio_frame) {
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = capture_audio_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.capture_audio_frame)
}
inline ::livekit::proto::CaptureAudioFrameCallback* FfiEvent::_internal_mutable_capture_audio_frame() {
  if (!_internal_has_capture_audio_frame()) {
    clear_message();
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = CreateMaybeMessage< ::livekit::proto::CaptureAudioFrameCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.capture_audio_frame_;
}
inline ::livekit::proto::CaptureAudioFrameCallback* FfiEvent::mutable_capture_audio_frame() {
  ::livekit::proto::CaptureAudioFrameCallback* _msg = _internal_mutable_capture_audio_frame();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.capture_audio_frame)
  return _msg;
}

// .livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
inline bool FfiEvent::_internal_has_set_local_metadata() const {
  return message_case() == kSetLocalMetadata;
}
inline bool FfiEvent::has_set_local_metadata() const {
  return _internal_has_set_local_metadata();
}
inline void FfiEvent::set_has_set_local_metadata() {
  _impl_._oneof_case_[0] = kSetLocalMetadata;
}
inline ::livekit::proto::SetLocalMetadataCallback* FfiEvent::release_set_local_metadata() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.set_local_metadata)
  if (_internal_has_set_local_metadata()) {
    clear_has_message();
    ::livekit::proto::SetLocalMetadataCallback* temp = _impl_.message_.set_local_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalMetadataCallback& FfiEvent::_internal_set_local_metadata() const {
  return _internal_has_set_local_metadata()
      ? *_impl_.message_.set_local_metadata_
      : reinterpret_cast< ::livekit::proto::SetLocalMetadataCallback&>(::livekit::proto::_SetLocalMetadataCallback_default_instance_);
}
inline const ::livekit::proto::SetLocalMetadataCallback& FfiEvent::set_local_metadata() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.set_local_metadata)
  return _internal_set_local_metadata();
}
inline ::livekit::proto::SetLocalMetadataCallback* FfiEvent::unsafe_arena_release_set_local_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.set_local_metadata)
  if (_internal_has_set_local_metadata()) {
    clear_has_message();
    ::livekit::proto::SetLocalMetadataCallback* temp = _impl_.message_.set_local_metadata_;
    _impl_.message_.set_local_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataCallback* set_local_metadata) {
  clear_message();
  if (set_local_metadata) {
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = set_local_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.set_local_metadata)
}
inline ::livekit::proto::SetLocalMetadataCallback* FfiEvent::_internal_mutable_set_local_metadata() {
  if (!_internal_has_set_local_metadata()) {
    clear_message();
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = CreateMaybeMessage< ::livekit::proto::SetLocalMetadataCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_metadata_;
}
inline ::livekit::proto::SetLocalMetadataCallback* FfiEvent::mutable_set_local_metadata() {
  ::livekit::proto::SetLocalMetadataCallback* _msg = _internal_mutable_set_local_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.set_local_metadata)
  return _msg;
}

// .livekit.proto.SetLocalNameCallback set_local_name = 15;
inline bool FfiEvent::_internal_has_set_local_name() const {
  return message_case() == kSetLocalName;
}
inline bool FfiEvent::has_set_local_name() const {
  return _internal_has_set_local_name();
}
inline void FfiEvent::set_has_set_local_name() {
  _impl_._oneof_case_[0] = kSetLocalName;
}
inline ::livekit::proto::SetLocalNameCallback* FfiEvent::release_set_local_name() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.set_local_name)
  if (_internal_has_set_local_name()) {
    clear_has_message();
    ::livekit::proto::SetLocalNameCallback* temp = _impl_.message_.set_local_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalNameCallback& FfiEvent::_internal_set_local_name() const {
  return _internal_has_set_local_name()
      ? *_impl_.message_.set_local_name_
      : reinterpret_cast< ::livekit::proto::SetLocalNameCallback&>(::livekit::proto::_SetLocalNameCallback_default_instance_);
}
inline const ::livekit::proto::SetLocalNameCallback& FfiEvent::set_local_name() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.set_local_name)
  return _internal_set_local_name();
}
inline ::livekit::proto::SetLocalNameCallback* FfiEvent::unsafe_arena_release_set_local_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.set_local_name)
  if (_internal_has_set_local_name()) {
    clear_has_message();
    ::livekit::proto::SetLocalNameCallback* temp = _impl_.message_.set_local_name_;
    _impl_.message_.set_local_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_set_local_name(::livekit::proto::SetLocalNameCallback* set_local_name) {
  clear_message();
  if (set_local_name) {
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = set_local_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.set_local_name)
}
inline ::livekit::proto::SetLocalNameCallback* FfiEvent::_internal_mutable_set_local_name() {
  if (!_internal_has_set_local_name()) {
    clear_message();
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = CreateMaybeMessage< ::livekit::proto::SetLocalNameCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_name_;
}
inline ::livekit::proto::SetLocalNameCallback* FfiEvent::mutable_set_local_name() {
  ::livekit::proto::SetLocalNameCallback* _msg = _internal_mutable_set_local_name();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.set_local_name)
  return _msg;
}

// .livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
inline bool FfiEvent::_internal_has_set_local_attributes() const {
  return message_case() == kSetLocalAttributes;
}
inline bool FfiEvent::has_set_local_attributes() const {
  return _internal_has_set_local_attributes();
}
inline void FfiEvent::set_has_set_local_attributes() {
  _impl_._oneof_case_[0] = kSetLocalAttributes;
}
inline ::livekit::proto::SetLocalAttributesCallback* FfiEvent::release_set_local_attributes() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.set_local_attributes)
  if (_internal_has_set_local_attributes()) {
    clear_has_message();
    ::livekit::proto::SetLocalAttributesCallback* temp = _impl_.message_.set_local_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.set_local_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SetLocalAttributesCallback& FfiEvent::_internal_set_local_attributes() const {
  return _internal_has_set_local_attributes()
      ? *_impl_.message_.set_local_attributes_
      : reinterpret_cast< ::livekit::proto::SetLocalAttributesCallback&>(::livekit::proto::_SetLocalAttributesCallback_default_instance_);
}
inline const ::livekit::proto::SetLocalAttributesCallback& FfiEvent::set_local_attributes() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.set_local_attributes)
  return _internal_set_local_attributes();
}
inline ::livekit::proto::SetLocalAttributesCallback* FfiEvent::unsafe_arena_release_set_local_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.set_local_attributes)
  if (_internal_has_set_local_attributes()) {
    clear_has_message();
    ::livekit::proto::SetLocalAttributesCallback* temp = _impl_.message_.set_local_attributes_;
    _impl_.message_.set_local_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesCallback* set_local_attributes) {
  clear_message();
  if (set_local_attributes) {
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = set_local_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.set_local_attributes)
}
inline ::livekit::proto::SetLocalAttributesCallback* FfiEvent::_internal_mutable_set_local_attributes() {
  if (!_internal_has_set_local_attributes()) {
    clear_message();
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = CreateMaybeMessage< ::livekit::proto::SetLocalAttributesCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.set_local_attributes_;
}
inline ::livekit::proto::SetLocalAttributesCallback* FfiEvent::mutable_set_local_attributes() {
  ::livekit::proto::SetLocalAttributesCallback* _msg = _internal_mutable_set_local_attributes();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.set_local_attributes)
  return _msg;
}

// .livekit.proto.GetStatsCallback get_stats = 17;
inline bool FfiEvent::_internal_has_get_stats() const {
  return message_case() == kGetStats;
}
inline bool FfiEvent::has_get_stats() const {
  return _internal_has_get_stats();
}
inline void FfiEvent::set_has_get_stats() {
  _impl_._oneof_case_[0] = kGetStats;
}
inline ::livekit::proto::GetStatsCallback* FfiEvent::release_get_stats() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.get_stats)
  if (_internal_has_get_stats()) {
    clear_has_message();
    ::livekit::proto::GetStatsCallback* temp = _impl_.message_.get_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.get_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::GetStatsCallback& FfiEvent::_internal_get_stats() const {
  return _internal_has_get_stats()
      ? *_impl_.message_.get_stats_
      : reinterpret_cast< ::livekit::proto::GetStatsCallback&>(::livekit::proto::_GetStatsCallback_default_instance_);
}
inline const ::livekit::proto::GetStatsCallback& FfiEvent::get_stats() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.get_stats)
  return _internal_get_stats();
}
inline ::livekit::proto::GetStatsCallback* FfiEvent::unsafe_arena_release_get_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.get_stats)
  if (_internal_has_get_stats()) {
    clear_has_message();
    ::livekit::proto::GetStatsCallback* temp = _impl_.message_.get_stats_;
    _impl_.message_.get_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_get_stats(::livekit::proto::GetStatsCallback* get_stats) {
  clear_message();
  if (get_stats) {
    set_has_get_stats();
    _impl_.message_.get_stats_ = get_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.get_stats)
}
inline ::livekit::proto::GetStatsCallback* FfiEvent::_internal_mutable_get_stats() {
  if (!_internal_has_get_stats()) {
    clear_message();
    set_has_get_stats();
    _impl_.message_.get_stats_ = CreateMaybeMessage< ::livekit::proto::GetStatsCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.get_stats_;
}
inline ::livekit::proto::GetStatsCallback* FfiEvent::mutable_get_stats() {
  ::livekit::proto::GetStatsCallback* _msg = _internal_mutable_get_stats();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.get_stats)
  return _msg;
}

// .livekit.proto.LogBatch logs = 18;
inline bool FfiEvent::_internal_has_logs() const {
  return message_case() == kLogs;
}
inline bool FfiEvent::has_logs() const {
  return _internal_has_logs();
}
inline void FfiEvent::set_has_logs() {
  _impl_._oneof_case_[0] = kLogs;
}
inline void FfiEvent::clear_logs() {
  if (_internal_has_logs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.logs_;
    }
    clear_has_message();
  }
}
inline ::livekit::proto::LogBatch* FfiEvent::release_logs() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.logs)
  if (_internal_has_logs()) {
    clear_has_message();
    ::livekit::proto::LogBatch* temp = _impl_.message_.logs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.logs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::LogBatch& FfiEvent::_internal_logs() const {
  return _internal_has_logs()
      ? *_impl_.message_.logs_
      : reinterpret_cast< ::livekit::proto::LogBatch&>(::livekit::proto::_LogBatch_default_instance_);
}
inline const ::livekit::proto::LogBatch& FfiEvent::logs() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.logs)
  return _internal_logs();
}
inline ::livekit::proto::LogBatch* FfiEvent::unsafe_arena_release_logs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.logs)
  if (_internal_has_logs()) {
    clear_has_message();
    ::livekit::proto::LogBatch* temp = _impl_.message_.logs_;
    _impl_.message_.logs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_logs(::livekit::proto::LogBatch* logs) {
  clear_message();
  if (logs) {
    set_has_logs();
    _impl_.message_.logs_ = logs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.logs)
}
inline ::livekit::proto::LogBatch* FfiEvent::_internal_mutable_logs() {
  if (!_internal_has_logs()) {
    clear_message();
    set_has_logs();
    _impl_.message_.logs_ = CreateMaybeMessage< ::livekit::proto::LogBatch >(GetArenaForAllocation());
  }
  return _impl_.message_.logs_;
}
inline ::livekit::proto::LogBatch* FfiEvent::mutable_logs() {
  ::livekit::proto::LogBatch* _msg = _internal_mutable_logs();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.logs)
  return _msg;
}

// .livekit.proto.GetSessionStatsCallback get_session_stats = 19;
inline bool FfiEvent::_internal_has_get_session_stats() const {
  return message_case() == kGetSessionStats;
}
inline bool FfiEvent::has_get_session_stats() const {
  return _internal_has_get_session_stats();
}
inline void FfiEvent::set_has_get_session_stats() {
  _impl_._oneof_case_[0] = kGetSessionStats;
}
inline ::livekit::proto::GetSessionStatsCallback* FfiEvent::release_get_session_stats() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.get_session_stats)
  if (_internal_has_get_session_stats()) {
    clear_has_message();
    ::livekit::proto::GetSessionStatsCallback* temp = _impl_.message_.get_session_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.get_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::GetSessionStatsCallback& FfiEvent::_internal_get_session_stats() const {
  return _internal_has_get_session_stats()
      ? *_impl_.message_.get_session_stats_
      : reinterpret_cast< ::livekit::proto::GetSessionStatsCallback&>(::livekit::proto::_GetSessionStatsCallback_default_instance_);
}
inline const ::livekit::proto::GetSessionStatsCallback& FfiEvent::get_session_stats() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.get_session_stats)
  return _internal_get_session_stats();
}
inline ::livekit::proto::GetSessionStatsCallback* FfiEvent::unsafe_arena_release_get_session_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.get_session_stats)
  if (_internal_has_get_session_stats()) {
    clear_has_message();
    ::livekit::proto::GetSessionStatsCallback* temp = _impl_.message_.get_session_stats_;
    _impl_.message_.get_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_get_session_stats(::livekit::proto::GetSessionStatsCallback* get_session_stats) {
  clear_message();
  if (get_session_stats) {
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = get_session_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.get_session_stats)
}
inline ::livekit::proto::GetSessionStatsCallback* FfiEvent::_internal_mutable_get_session_stats() {
  if (!_internal_has_get_session_stats()) {
    clear_message();
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = CreateMaybeMessage< ::livekit::proto::GetSessionStatsCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.get_session_stats_;
}
inline ::livekit::proto::GetSessionStatsCallback* FfiEvent::mutable_get_session_stats() {
  ::livekit::proto::GetSessionStatsCallback* _msg = _internal_mutable_get_session_stats();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.get_session_stats)
  return _msg;
}

// .livekit.proto.Panic panic = 20;
inline bool FfiEvent::_internal_has_panic() const {
  return message_case() == kPanic;
}
inline bool FfiEvent::has_panic() const {
  return _internal_has_panic();
}
inline void FfiEvent::set_has_panic() {
  _impl_._oneof_case_[0] = kPanic;
}
inline void FfiEvent::clear_panic() {
  if (_internal_has_panic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.panic_;
    }
    clear_has_message();
  }
}
inline ::livekit::proto::Panic* FfiEvent::release_panic() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.panic)
  if (_internal_has_panic()) {
    clear_has_message();
    ::livekit::proto::Panic* temp = _impl_.message_.panic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.panic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::Panic& FfiEvent::_internal_panic() const {
  return _internal_has_panic()
      ? *_impl_.message_.panic_
      : reinterpret_cast< ::livekit::proto::Panic&>(::livekit::proto::_Panic_default_instance_);
}
inline const ::livekit::proto::Panic& FfiEvent::panic() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.panic)
  return _internal_panic();
}
inline ::livekit::proto::Panic* FfiEvent::unsafe_arena_release_panic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.panic)
  if (_internal_has_panic()) {
    clear_has_message();
    ::livekit::proto::Panic* temp = _impl_.message_.panic_;
    _impl_.message_.panic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_panic(::livekit::proto::Panic* panic) {
  clear_message();
  if (panic) {
    set_has_panic();
    _impl_.message_.panic_ = panic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.panic)
}
inline ::livekit::proto::Panic* FfiEvent::_internal_mutable_panic() {
  if (!_internal_has_panic()) {
    clear_message();
    set_has_panic();
    _impl_.message_.panic_ = CreateMaybeMessage< ::livekit::proto::Panic >(GetArenaForAllocation());
  }
  return _impl_.message_.panic_;
}
inline ::livekit::proto::Panic* FfiEvent::mutable_panic() {
  ::livekit::proto::Panic* _msg = _internal_mutable_panic();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.panic)
  return _msg;
}

// .livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
inline bool FfiEvent::_internal_has_publish_sip_dtmf() const {
  return message_case() == kPublishSipDtmf;
}
inline bool FfiEvent::has_publish_sip_dtmf() const {
  return _internal_has_publish_sip_dtmf();
}
inline void FfiEvent::set_has_publish_sip_dtmf() {
  _impl_._oneof_case_[0] = kPublishSipDtmf;
}
inline ::livekit::proto::PublishSipDtmfCallback* FfiEvent::release_publish_sip_dtmf() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.publish_sip_dtmf)
  if (_internal_has_publish_sip_dtmf()) {
    clear_has_message();
    ::livekit::proto::PublishSipDtmfCallback* temp = _impl_.message_.publish_sip_dtmf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.publish_sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PublishSipDtmfCallback& FfiEvent::_internal_publish_sip_dtmf() const {
  return _internal_has_publish_sip_dtmf()
      ? *_impl_.message_.publish_sip_dtmf_
      : reinterpret_cast< ::livekit::proto::PublishSipDtmfCallback&>(::livekit::proto::_PublishSipDtmfCallback_default_instance_);
}
inline const ::livekit::proto::PublishSipDtmfCallback& FfiEvent::publish_sip_dtmf() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.publish_sip_dtmf)
  return _internal_publish_sip_dtmf();
}
inline ::livekit::proto::PublishSipDtmfCallback* FfiEvent::unsafe_arena_release_publish_sip_dtmf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.publish_sip_dtmf)
  if (_internal_has_publish_sip_dtmf()) {
    clear_has_message();
    ::livekit::proto::PublishSipDtmfCallback* temp = _impl_.message_.publish_sip_dtmf_;
    _impl_.message_.publish_sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfCallback* publish_sip_dtmf) {
  clear_message();
  if (publish_sip_dtmf) {
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = publish_sip_dtmf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.publish_sip_dtmf)
}
inline ::livekit::proto::PublishSipDtmfCallback* FfiEvent::_internal_mutable_publish_sip_dtmf() {
  if (!_internal_has_publish_sip_dtmf()) {
    clear_message();
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = CreateMaybeMessage< ::livekit::proto::PublishSipDtmfCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.publish_sip_dtmf_;
}
inline ::livekit::proto::PublishSipDtmfCallback* FfiEvent::mutable_publish_sip_dtmf() {
  ::livekit::proto::PublishSipDtmfCallback* _msg = _internal_mutable_publish_sip_dtmf();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.publish_sip_dtmf)
  return _msg;
}

// .livekit.proto.SendChatMessageCallback chat_message = 22;
inline bool FfiEvent::_internal_has_chat_message() const {
  return message_case() == kChatMessage;
}
inline bool FfiEvent::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void FfiEvent::set_has_chat_message() {
  _impl_._oneof_case_[0] = kChatMessage;
}
inline ::livekit::proto::SendChatMessageCallback* FfiEvent::release_chat_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.chat_message)
  if (_internal_has_chat_message()) {
    clear_has_message();
    ::livekit::proto::SendChatMessageCallback* temp = _impl_.message_.chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendChatMessageCallback& FfiEvent::_internal_chat_message() const {
  return _internal_has_chat_message()
      ? *_impl_.message_.chat_message_
      : reinterpret_cast< ::livekit::proto::SendChatMessageCallback&>(::livekit::proto::_SendChatMessageCallback_default_instance_);
}
inline const ::livekit::proto::SendChatMessageCallback& FfiEvent::chat_message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.chat_message)
  return _internal_chat_message();
}
inline ::livekit::proto::SendChatMessageCallback* FfiEvent::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.chat_message)
  if (_internal_has_chat_message()) {
    clear_has_message();
    ::livekit::proto::SendChatMessageCallback* temp = _impl_.message_.chat_message_;
    _impl_.message_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_chat_message(::livekit::proto::SendChatMessageCallback* chat_message) {
  clear_message();
  if (chat_message) {
    set_has_chat_message();
    _impl_.message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.chat_message)
}
inline ::livekit::proto::SendChatMessageCallback* FfiEvent::_internal_mutable_chat_message() {
  if (!_internal_has_chat_message()) {
    clear_message();
    set_has_chat_message();
    _impl_.message_.chat_message_ = CreateMaybeMessage< ::livekit::proto::SendChatMessageCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.chat_message_;
}
inline ::livekit::proto::SendChatMessageCallback* FfiEvent::mutable_chat_message() {
  ::livekit::proto::SendChatMessageCallback* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.chat_message)
  return _msg;
}

// .livekit.proto.PerformRpcCallback perform_rpc = 23;
inline bool FfiEvent::_internal_has_perform_rpc() const {
  return message_case() == kPerformRpc;
}
inline bool FfiEvent::has_perform_rpc() const {
  return _internal_has_perform_rpc();
}
inline void FfiEvent::set_has_perform_rpc() {
  _impl_._oneof_case_[0] = kPerformRpc;
}
inline ::livekit::proto::PerformRpcCallback* FfiEvent::release_perform_rpc() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.perform_rpc)
  if (_internal_has_perform_rpc()) {
    clear_has_message();
    ::livekit::proto::PerformRpcCallback* temp = _impl_.message_.perform_rpc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.perform_rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::PerformRpcCallback& FfiEvent::_internal_perform_rpc() const {
  return _internal_has_perform_rpc()
      ? *_impl_.message_.perform_rpc_
      : reinterpret_cast< ::livekit::proto::PerformRpcCallback&>(::livekit::proto::_PerformRpcCallback_default_instance_);
}
inline const ::livekit::proto::PerformRpcCallback& FfiEvent::perform_rpc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.perform_rpc)
  return _internal_perform_rpc();
}
inline ::livekit::proto::PerformRpcCallback* FfiEvent::unsafe_arena_release_perform_rpc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.perform_rpc)
  if (_internal_has_perform_rpc()) {
    clear_has_message();
    ::livekit::proto::PerformRpcCallback* temp = _impl_.message_.perform_rpc_;
    _impl_.message_.perform_rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_perform_rpc(::livekit::proto::PerformRpcCallback* perform_rpc) {
  clear_message();
  if (perform_rpc) {
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = perform_rpc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.perform_rpc)
}
inline ::livekit::proto::PerformRpcCallback* FfiEvent::_internal_mutable_perform_rpc() {
  if (!_internal_has_perform_rpc()) {
    clear_message();
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = CreateMaybeMessage< ::livekit::proto::PerformRpcCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.perform_rpc_;
}
inline ::livekit::proto::PerformRpcCallback* FfiEvent::mutable_perform_rpc() {
  ::livekit::proto::PerformRpcCallback* _msg = _internal_mutable_perform_rpc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.perform_rpc)
  return _msg;
}

// .livekit.proto.RpcMethodInvocationEvent rpc_method_invocation = 24;
inline bool FfiEvent::_internal_has_rpc_method_invocation() const {
  return message_case() == kRpcMethodInvocation;
}
inline bool FfiEvent::has_rpc_method_invocation() const {
  return _internal_has_rpc_method_invocation();
}
inline void FfiEvent::set_has_rpc_method_invocation() {
  _impl_._oneof_case_[0] = kRpcMethodInvocation;
}
inline ::livekit::proto::RpcMethodInvocationEvent* FfiEvent::release_rpc_method_invocation() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.rpc_method_invocation)
  if (_internal_has_rpc_method_invocation()) {
    clear_has_message();
    ::livekit::proto::RpcMethodInvocationEvent* temp = _impl_.message_.rpc_method_invocation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rpc_method_invocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RpcMethodInvocationEvent& FfiEvent::_internal_rpc_method_invocation() const {
  return _internal_has_rpc_method_invocation()
      ? *_impl_.message_.rpc_method_invocation_
      : reinterpret_cast< ::livekit::proto::RpcMethodInvocationEvent&>(::livekit::proto::_RpcMethodInvocationEvent_default_instance_);
}
inline const ::livekit::proto::RpcMethodInvocationEvent& FfiEvent::rpc_method_invocation() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.rpc_method_invocation)
  return _internal_rpc_method_invocation();
}
inline ::livekit::proto::RpcMethodInvocationEvent* FfiEvent::unsafe_arena_release_rpc_method_invocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.rpc_method_invocation)
  if (_internal_has_rpc_method_invocation()) {
    clear_has_message();
    ::livekit::proto::RpcMethodInvocationEvent* temp = _impl_.message_.rpc_method_invocation_;
    _impl_.message_.rpc_method_invocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_rpc_method_invocation(::livekit::proto::RpcMethodInvocationEvent* rpc_method_invocation) {
  clear_message();
  if (rpc_method_invocation) {
    set_has_rpc_method_invocation();
    _impl_.message_.rpc_method_invocation_ = rpc_method_invocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.rpc_method_invocation)
}
inline ::livekit::proto::RpcMethodInvocationEvent* FfiEvent::_internal_mutable_rpc_method_invocation() {
  if (!_internal_has_rpc_method_invocation()) {
    clear_message();
    set_has_rpc_method_invocation();
    _impl_.message_.rpc_method_invocation_ = CreateMaybeMessage< ::livekit::proto::RpcMethodInvocationEvent >(GetArenaForAllocation());
  }
  return _impl_.message_.rpc_method_invocation_;
}
inline ::livekit::proto::RpcMethodInvocationEvent* FfiEvent::mutable_rpc_method_invocation() {
  ::livekit::proto::RpcMethodInvocationEvent* _msg = _internal_mutable_rpc_method_invocation();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.rpc_method_invocation)
  return _msg;
}

// .livekit.proto.SendStreamHeaderCallback send_stream_header = 25;
inline bool FfiEvent::_internal_has_send_stream_header() const {
  return message_case() == kSendStreamHeader;
}
inline bool FfiEvent::has_send_stream_header() const {
  return _internal_has_send_stream_header();
}
inline void FfiEvent::set_has_send_stream_header() {
  _impl_._oneof_case_[0] = kSendStreamHeader;
}
inline ::livekit::proto::SendStreamHeaderCallback* FfiEvent::release_send_stream_header() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.send_stream_header)
  if (_internal_has_send_stream_header()) {
    clear_has_message();
    ::livekit::proto::SendStreamHeaderCallback* temp = _impl_.message_.send_stream_header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamHeaderCallback& FfiEvent::_internal_send_stream_header() const {
  return _internal_has_send_stream_header()
      ? *_impl_.message_.send_stream_header_
      : reinterpret_cast< ::livekit::proto::SendStreamHeaderCallback&>(::livekit::proto::_SendStreamHeaderCallback_default_instance_);
}
inline const ::livekit::proto::SendStreamHeaderCallback& FfiEvent::send_stream_header() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.send_stream_header)
  return _internal_send_stream_header();
}
inline ::livekit::proto::SendStreamHeaderCallback* FfiEvent::unsafe_arena_release_send_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.send_stream_header)
  if (_internal_has_send_stream_header()) {
    clear_has_message();
    ::livekit::proto::SendStreamHeaderCallback* temp = _impl_.message_.send_stream_header_;
    _impl_.message_.send_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderCallback* send_stream_header) {
  clear_message();
  if (send_stream_header) {
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = send_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.send_stream_header)
}
inline ::livekit::proto::SendStreamHeaderCallback* FfiEvent::_internal_mutable_send_stream_header() {
  if (!_internal_has_send_stream_header()) {
    clear_message();
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = CreateMaybeMessage< ::livekit::proto::SendStreamHeaderCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_header_;
}
inline ::livekit::proto::SendStreamHeaderCallback* FfiEvent::mutable_send_stream_header() {
  ::livekit::proto::SendStreamHeaderCallback* _msg = _internal_mutable_send_stream_header();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.send_stream_header)
  return _msg;
}

// .livekit.proto.SendStreamChunkCallback send_stream_chunk = 26;
inline bool FfiEvent::_internal_has_send_stream_chunk() const {
  return message_case() == kSendStreamChunk;
}
inline bool FfiEvent::has_send_stream_chunk() const {
  return _internal_has_send_stream_chunk();
}
inline void FfiEvent::set_has_send_stream_chunk() {
  _impl_._oneof_case_[0] = kSendStreamChunk;
}
inline ::livekit::proto::SendStreamChunkCallback* FfiEvent::release_send_stream_chunk() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.send_stream_chunk)
  if (_internal_has_send_stream_chunk()) {
    clear_has_message();
    ::livekit::proto::SendStreamChunkCallback* temp = _impl_.message_.send_stream_chunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamChunkCallback& FfiEvent::_internal_send_stream_chunk() const {
  return _internal_has_send_stream_chunk()
      ? *_impl_.message_.send_stream_chunk_
      : reinterpret_cast< ::livekit::proto::SendStreamChunkCallback&>(::livekit::proto::_SendStreamChunkCallback_default_instance_);
}
inline const ::livekit::proto::SendStreamChunkCallback& FfiEvent::send_stream_chunk() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.send_stream_chunk)
  return _internal_send_stream_chunk();
}
inline ::livekit::proto::SendStreamChunkCallback* FfiEvent::unsafe_arena_release_send_stream_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.send_stream_chunk)
  if (_internal_has_send_stream_chunk()) {
    clear_has_message();
    ::livekit::proto::SendStreamChunkCallback* temp = _impl_.message_.send_stream_chunk_;
    _impl_.message_.send_stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkCallback* send_stream_chunk) {
  clear_message();
  if (send_stream_chunk) {
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = send_stream_chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.send_stream_chunk)
}
inline ::livekit::proto::SendStreamChunkCallback* FfiEvent::_internal_mutable_send_stream_chunk() {
  if (!_internal_has_send_stream_chunk()) {
    clear_message();
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = CreateMaybeMessage< ::livekit::proto::SendStreamChunkCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_chunk_;
}
inline ::livekit::proto::SendStreamChunkCallback* FfiEvent::mutable_send_stream_chunk() {
  ::livekit::proto::SendStreamChunkCallback* _msg = _internal_mutable_send_stream_chunk();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.send_stream_chunk)
  return _msg;
}

// .livekit.proto.SendStreamTrailerCallback send_stream_trailer = 27;
inline bool FfiEvent::_internal_has_send_stream_trailer() const {
  return message_case() == kSendStreamTrailer;
}
inline bool FfiEvent::has_send_stream_trailer() const {
  return _internal_has_send_stream_trailer();
}
inline void FfiEvent::set_has_send_stream_trailer() {
  _impl_._oneof_case_[0] = kSendStreamTrailer;
}
inline ::livekit::proto::SendStreamTrailerCallback* FfiEvent::release_send_stream_trailer() {
  // @@protoc_insertion_point(field_release:livekit.proto.FfiEvent.send_stream_trailer)
  if (_internal_has_send_stream_trailer()) {
    clear_has_message();
    ::livekit::proto::SendStreamTrailerCallback* temp = _impl_.message_.send_stream_trailer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::SendStreamTrailerCallback& FfiEvent::_internal_send_stream_trailer() const {
  return _internal_has_send_stream_trailer()
      ? *_impl_.message_.send_stream_trailer_
      : reinterpret_cast< ::livekit::proto::SendStreamTrailerCallback&>(::livekit::proto::_SendStreamTrailerCallback_default_instance_);
}
inline const ::livekit::proto::SendStreamTrailerCallback& FfiEvent::send_stream_trailer() const {
  // @@protoc_insertion_point(field_get:livekit.proto.FfiEvent.send_stream_trailer)
  return _internal_send_stream_trailer();
}
inline ::livekit::proto::SendStreamTrailerCallback* FfiEvent::unsafe_arena_release_send_stream_trailer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.FfiEvent.send_stream_trailer)
  if (_internal_has_send_stream_trailer()) {
    clear_has_message();
    ::livekit::proto::SendStreamTrailerCallback* temp = _impl_.message_.send_stream_trailer_;
    _impl_.message_.send_stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FfiEvent::unsafe_arena_set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerCallback* send_stream_trailer) {
  clear_message();
  if (send_stream_trailer) {
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = send_stream_trailer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.FfiEvent.send_stream_trailer)
}
inline ::livekit::proto::SendStreamTrailerCallback* FfiEvent::_internal_mutable_send_stream_trailer() {
  if (!_internal_has_send_stream_trailer()) {
    clear_message();
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = CreateMaybeMessage< ::livekit::proto::SendStreamTrailerCallback >(GetArenaForAllocation());
  }
  return _impl_.message_.send_stream_trailer_;
}
inline ::livekit::proto::SendStreamTrailerCallback* FfiEvent::mutable_send_stream_trailer() {
  ::livekit::proto::SendStreamTrailerCallback* _msg = _internal_mutable_send_stream_trailer();
  // @@protoc_insertion_point(field_mutable:livekit.proto.FfiEvent.send_stream_trailer)
  return _msg;
}

inline bool FfiEvent::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void FfiEvent::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline FfiEvent::MessageCase FfiEvent::message_case() const {
  return FfiEvent::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DisposeRequest

// required bool async = 1;
inline bool DisposeRequest::_internal_has_async() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisposeRequest::has_async() const {
  return _internal_has_async();
}
inline void DisposeRequest::clear_async() {
  _impl_.async_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisposeRequest::_internal_async() const {
  return _impl_.async_;
}
inline bool DisposeRequest::async() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DisposeRequest.async)
  return _internal_async();
}
inline void DisposeRequest::_internal_set_async(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.async_ = value;
}
inline void DisposeRequest::set_async(bool value) {
  _internal_set_async(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DisposeRequest.async)
}

// -------------------------------------------------------------------

// DisposeResponse

// optional uint64 async_id = 1;
inline bool DisposeResponse::_internal_has_async_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisposeResponse::has_async_id() const {
  return _internal_has_async_id();
}
inline void DisposeResponse::clear_async_id() {
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DisposeResponse::_internal_async_id() const {
  return _impl_.async_id_;
}
inline uint64_t DisposeResponse::async_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DisposeResponse.async_id)
  return _internal_async_id();
}
inline void DisposeResponse::_internal_set_async_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.async_id_ = value;
}
inline void DisposeResponse::set_async_id(uint64_t value) {
  _internal_set_async_id(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DisposeResponse.async_id)
}

// -------------------------------------------------------------------

// DisposeCallback

// required uint64 async_id = 1;
inline bool DisposeCallback::_internal_has_async_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisposeCallback::has_async_id() const {
  return _internal_has_async_id();
}
inline void DisposeCallback::clear_async_id() {
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DisposeCallback::_internal_async_id() const {
  return _impl_.async_id_;
}
inline uint64_t DisposeCallback::async_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DisposeCallback.async_id)
  return _internal_async_id();
}
inline void DisposeCallback::_internal_set_async_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.async_id_ = value;
}
inline void DisposeCallback::set_async_id(uint64_t value) {
  _internal_set_async_id(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DisposeCallback.async_id)
}

// -------------------------------------------------------------------

// LogRecord

// required .livekit.proto.LogLevel level = 1;
inline bool LogRecord::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogRecord::has_level() const {
  return _internal_has_level();
}
inline void LogRecord::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::livekit::proto::LogLevel LogRecord::_internal_level() const {
  return static_cast< ::livekit::proto::LogLevel >(_impl_.level_);
}
inline ::livekit::proto::LogLevel LogRecord::level() const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogRecord.level)
  return _internal_level();
}
inline void LogRecord::_internal_set_level(::livekit::proto::LogLevel value) {
  assert(::livekit::proto::LogLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}
inline void LogRecord::set_level(::livekit::proto::LogLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:livekit.proto.LogRecord.level)
}

// required string target = 2;
inline bool LogRecord::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRecord::has_target() const {
  return _internal_has_target();
}
inline void LogRecord::clear_target() {
  _impl_.target_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogRecord::target() const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogRecord.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_target(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.target_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.LogRecord.target)
}
inline std::string* LogRecord::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:livekit.proto.LogRecord.target)
  return _s;
}
inline const std::string& LogRecord::_internal_target() const {
  return _impl_.target_.Get();
}
inline void LogRecord::_internal_set_target(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.target_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_target() {
  // @@protoc_insertion_point(field_release:livekit.proto.LogRecord.target)
  if (!_internal_has_target()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.target_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_.SetAllocated(target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.LogRecord.target)
}

// optional string module_path = 3;
inline bool LogRecord::_internal_has_module_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogRecord::has_module_path() const {
  return _internal_has_module_path();
}
inline void LogRecord::clear_module_path() {
  _impl_.module_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogRecord::module_path() const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogRecord.module_path)
  return _internal_module_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_module_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.module_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.LogRecord.module_path)
}
inline std::string* LogRecord::mutable_module_path() {
  std::string* _s = _internal_mutable_module_path();
  // @@protoc_insertion_point(field_mutable:livekit.proto.LogRecord.module_path)
  return _s;
}
inline const std::string& LogRecord::_internal_module_path() const {
  return _impl_.module_path_.Get();
}
inline void LogRecord::_internal_set_module_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.module_path_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_module_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.module_path_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_module_path() {
  // @@protoc_insertion_point(field_release:livekit.proto.LogRecord.module_path)
  if (!_internal_has_module_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.module_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_path_.IsDefault()) {
    _impl_.module_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord::set_allocated_module_path(std::string* module_path) {
  if (module_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.module_path_.SetAllocated(module_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_path_.IsDefault()) {
    _impl_.module_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.LogRecord.module_path)
}

// optional string file = 4;
inline bool LogRecord::_internal_has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogRecord::has_file() const {
  return _internal_has_file();
}
inline void LogRecord::clear_file() {
  _impl_.file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogRecord::file() const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogRecord.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.LogRecord.file)
}
inline std::string* LogRecord::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:livekit.proto.LogRecord.file)
  return _s;
}
inline const std::string& LogRecord::_internal_file() const {
  return _impl_.file_.Get();
}
inline void LogRecord::_internal_set_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_file() {
  // @@protoc_insertion_point(field_release:livekit.proto.LogRecord.file)
  if (!_internal_has_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.LogRecord.file)
}

// optional uint32 line = 5;
inline bool LogRecord::_internal_has_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LogRecord::has_line() const {
  return _internal_has_line();
}
inline void LogRecord::clear_line() {
  _impl_.line_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t LogRecord::_internal_line() const {
  return _impl_.line_;
}
inline uint32_t LogRecord::line() const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogRecord.line)
  return _internal_line();
}
inline void LogRecord::_internal_set_line(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.line_ = value;
}
inline void LogRecord::set_line(uint32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:livekit.proto.LogRecord.line)
}

// required string message = 6;
inline bool LogRecord::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogRecord::has_message() const {
  return _internal_has_message();
}
inline void LogRecord::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LogRecord::message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogRecord.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.LogRecord.message)
}
inline std::string* LogRecord::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.LogRecord.message)
  return _s;
}
inline const std::string& LogRecord::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LogRecord::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.LogRecord.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.LogRecord.message)
}

// -------------------------------------------------------------------

// LogBatch

// repeated .livekit.proto.LogRecord records = 1;
inline int LogBatch::_internal_records_size() const {
  return _impl_.records_.size();
}
inline int LogBatch::records_size() const {
  return _internal_records_size();
}
inline void LogBatch::clear_records() {
  _impl_.records_.Clear();
}
inline ::livekit::proto::LogRecord* LogBatch::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.proto.LogBatch.records)
  return _impl_.records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::proto::LogRecord >*
LogBatch::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:livekit.proto.LogBatch.records)
  return &_impl_.records_;
}
inline const ::livekit::proto::LogRecord& LogBatch::_internal_records(int index) const {
  return _impl_.records_.Get(index);
}
inline const ::livekit::proto::LogRecord& LogBatch::records(int index) const {
  // @@protoc_insertion_point(field_get:livekit.proto.LogBatch.records)
  return _internal_records(index);
}
inline ::livekit::proto::LogRecord* LogBatch::_internal_add_records() {
  return _impl_.records_.Add();
}
inline ::livekit::proto::LogRecord* LogBatch::add_records() {
  ::livekit::proto::LogRecord* _add = _internal_add_records();
  // @@protoc_insertion_point(field_add:livekit.proto.LogBatch.records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::proto::LogRecord >&
LogBatch::records() const {
  // @@protoc_insertion_point(field_list:livekit.proto.LogBatch.records)
  return _impl_.records_;
}

// -------------------------------------------------------------------

// Panic

// required string message = 1;
inline bool Panic::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Panic::has_message() const {
  return _internal_has_message();
}
inline void Panic::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Panic::message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.Panic.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Panic::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.Panic.message)
}
inline std::string* Panic::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.Panic.message)
  return _s;
}
inline const std::string& Panic::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Panic::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Panic::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Panic::release_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.Panic.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Panic::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.Panic.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace livekit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::livekit::proto::LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::LogLevel>() {
  return ::livekit::proto::LogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ffi_2eproto
