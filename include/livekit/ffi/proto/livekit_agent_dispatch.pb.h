// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_agent_dispatch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_livekit_5fagent_5fdispatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_livekit_5fagent_5fdispatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "livekit_agent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_livekit_5fagent_5fdispatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_livekit_5fagent_5fdispatch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_livekit_5fagent_5fdispatch_2eproto;
namespace livekit {
class AgentDispatch;
struct AgentDispatchDefaultTypeInternal;
extern AgentDispatchDefaultTypeInternal _AgentDispatch_default_instance_;
class AgentDispatchState;
struct AgentDispatchStateDefaultTypeInternal;
extern AgentDispatchStateDefaultTypeInternal _AgentDispatchState_default_instance_;
class CreateAgentDispatchRequest;
struct CreateAgentDispatchRequestDefaultTypeInternal;
extern CreateAgentDispatchRequestDefaultTypeInternal _CreateAgentDispatchRequest_default_instance_;
class DeleteAgentDispatchRequest;
struct DeleteAgentDispatchRequestDefaultTypeInternal;
extern DeleteAgentDispatchRequestDefaultTypeInternal _DeleteAgentDispatchRequest_default_instance_;
class ListAgentDispatchRequest;
struct ListAgentDispatchRequestDefaultTypeInternal;
extern ListAgentDispatchRequestDefaultTypeInternal _ListAgentDispatchRequest_default_instance_;
class ListAgentDispatchResponse;
struct ListAgentDispatchResponseDefaultTypeInternal;
extern ListAgentDispatchResponseDefaultTypeInternal _ListAgentDispatchResponse_default_instance_;
class RoomAgentDispatch;
struct RoomAgentDispatchDefaultTypeInternal;
extern RoomAgentDispatchDefaultTypeInternal _RoomAgentDispatch_default_instance_;
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::AgentDispatch* Arena::CreateMaybeMessage<::livekit::AgentDispatch>(Arena*);
template<> ::livekit::AgentDispatchState* Arena::CreateMaybeMessage<::livekit::AgentDispatchState>(Arena*);
template<> ::livekit::CreateAgentDispatchRequest* Arena::CreateMaybeMessage<::livekit::CreateAgentDispatchRequest>(Arena*);
template<> ::livekit::DeleteAgentDispatchRequest* Arena::CreateMaybeMessage<::livekit::DeleteAgentDispatchRequest>(Arena*);
template<> ::livekit::ListAgentDispatchRequest* Arena::CreateMaybeMessage<::livekit::ListAgentDispatchRequest>(Arena*);
template<> ::livekit::ListAgentDispatchResponse* Arena::CreateMaybeMessage<::livekit::ListAgentDispatchResponse>(Arena*);
template<> ::livekit::RoomAgentDispatch* Arena::CreateMaybeMessage<::livekit::RoomAgentDispatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {

// ===================================================================

class CreateAgentDispatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.CreateAgentDispatchRequest) */ {
 public:
  inline CreateAgentDispatchRequest() : CreateAgentDispatchRequest(nullptr) {}
  ~CreateAgentDispatchRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateAgentDispatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAgentDispatchRequest(const CreateAgentDispatchRequest& from);
  CreateAgentDispatchRequest(CreateAgentDispatchRequest&& from) noexcept
    : CreateAgentDispatchRequest() {
    *this = ::std::move(from);
  }

  inline CreateAgentDispatchRequest& operator=(const CreateAgentDispatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAgentDispatchRequest& operator=(CreateAgentDispatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAgentDispatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAgentDispatchRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAgentDispatchRequest*>(
               &_CreateAgentDispatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAgentDispatchRequest& a, CreateAgentDispatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAgentDispatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAgentDispatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAgentDispatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAgentDispatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAgentDispatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAgentDispatchRequest& from) {
    CreateAgentDispatchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAgentDispatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.CreateAgentDispatchRequest";
  }
  protected:
  explicit CreateAgentDispatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentNameFieldNumber = 1,
    kRoomFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string agent_name = 1;
  void clear_agent_name();
  const std::string& agent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_name();
  PROTOBUF_NODISCARD std::string* release_agent_name();
  void set_allocated_agent_name(std::string* agent_name);
  private:
  const std::string& _internal_agent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_name(const std::string& value);
  std::string* _internal_mutable_agent_name();
  public:

  // string room = 2;
  void clear_room();
  const std::string& room() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room();
  PROTOBUF_NODISCARD std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:livekit.CreateAgentDispatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// -------------------------------------------------------------------

class RoomAgentDispatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.RoomAgentDispatch) */ {
 public:
  inline RoomAgentDispatch() : RoomAgentDispatch(nullptr) {}
  ~RoomAgentDispatch() override;
  explicit PROTOBUF_CONSTEXPR RoomAgentDispatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomAgentDispatch(const RoomAgentDispatch& from);
  RoomAgentDispatch(RoomAgentDispatch&& from) noexcept
    : RoomAgentDispatch() {
    *this = ::std::move(from);
  }

  inline RoomAgentDispatch& operator=(const RoomAgentDispatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomAgentDispatch& operator=(RoomAgentDispatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomAgentDispatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomAgentDispatch* internal_default_instance() {
    return reinterpret_cast<const RoomAgentDispatch*>(
               &_RoomAgentDispatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomAgentDispatch& a, RoomAgentDispatch& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomAgentDispatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomAgentDispatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomAgentDispatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomAgentDispatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomAgentDispatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomAgentDispatch& from) {
    RoomAgentDispatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomAgentDispatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.RoomAgentDispatch";
  }
  protected:
  explicit RoomAgentDispatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentNameFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // string agent_name = 1;
  void clear_agent_name();
  const std::string& agent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_name();
  PROTOBUF_NODISCARD std::string* release_agent_name();
  void set_allocated_agent_name(std::string* agent_name);
  private:
  const std::string& _internal_agent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_name(const std::string& value);
  std::string* _internal_mutable_agent_name();
  public:

  // string metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:livekit.RoomAgentDispatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// -------------------------------------------------------------------

class DeleteAgentDispatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.DeleteAgentDispatchRequest) */ {
 public:
  inline DeleteAgentDispatchRequest() : DeleteAgentDispatchRequest(nullptr) {}
  ~DeleteAgentDispatchRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteAgentDispatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAgentDispatchRequest(const DeleteAgentDispatchRequest& from);
  DeleteAgentDispatchRequest(DeleteAgentDispatchRequest&& from) noexcept
    : DeleteAgentDispatchRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAgentDispatchRequest& operator=(const DeleteAgentDispatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAgentDispatchRequest& operator=(DeleteAgentDispatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAgentDispatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAgentDispatchRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentDispatchRequest*>(
               &_DeleteAgentDispatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteAgentDispatchRequest& a, DeleteAgentDispatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAgentDispatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAgentDispatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAgentDispatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAgentDispatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAgentDispatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteAgentDispatchRequest& from) {
    DeleteAgentDispatchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentDispatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.DeleteAgentDispatchRequest";
  }
  protected:
  explicit DeleteAgentDispatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDispatchIdFieldNumber = 1,
    kRoomFieldNumber = 2,
  };
  // string dispatch_id = 1;
  void clear_dispatch_id();
  const std::string& dispatch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dispatch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dispatch_id();
  PROTOBUF_NODISCARD std::string* release_dispatch_id();
  void set_allocated_dispatch_id(std::string* dispatch_id);
  private:
  const std::string& _internal_dispatch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dispatch_id(const std::string& value);
  std::string* _internal_mutable_dispatch_id();
  public:

  // string room = 2;
  void clear_room();
  const std::string& room() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room();
  PROTOBUF_NODISCARD std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // @@protoc_insertion_point(class_scope:livekit.DeleteAgentDispatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dispatch_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// -------------------------------------------------------------------

class ListAgentDispatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListAgentDispatchRequest) */ {
 public:
  inline ListAgentDispatchRequest() : ListAgentDispatchRequest(nullptr) {}
  ~ListAgentDispatchRequest() override;
  explicit PROTOBUF_CONSTEXPR ListAgentDispatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAgentDispatchRequest(const ListAgentDispatchRequest& from);
  ListAgentDispatchRequest(ListAgentDispatchRequest&& from) noexcept
    : ListAgentDispatchRequest() {
    *this = ::std::move(from);
  }

  inline ListAgentDispatchRequest& operator=(const ListAgentDispatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAgentDispatchRequest& operator=(ListAgentDispatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAgentDispatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAgentDispatchRequest* internal_default_instance() {
    return reinterpret_cast<const ListAgentDispatchRequest*>(
               &_ListAgentDispatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListAgentDispatchRequest& a, ListAgentDispatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAgentDispatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAgentDispatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAgentDispatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAgentDispatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAgentDispatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAgentDispatchRequest& from) {
    ListAgentDispatchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAgentDispatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListAgentDispatchRequest";
  }
  protected:
  explicit ListAgentDispatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDispatchIdFieldNumber = 1,
    kRoomFieldNumber = 2,
  };
  // string dispatch_id = 1;
  void clear_dispatch_id();
  const std::string& dispatch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dispatch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dispatch_id();
  PROTOBUF_NODISCARD std::string* release_dispatch_id();
  void set_allocated_dispatch_id(std::string* dispatch_id);
  private:
  const std::string& _internal_dispatch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dispatch_id(const std::string& value);
  std::string* _internal_mutable_dispatch_id();
  public:

  // string room = 2;
  void clear_room();
  const std::string& room() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room();
  PROTOBUF_NODISCARD std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // @@protoc_insertion_point(class_scope:livekit.ListAgentDispatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dispatch_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// -------------------------------------------------------------------

class ListAgentDispatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListAgentDispatchResponse) */ {
 public:
  inline ListAgentDispatchResponse() : ListAgentDispatchResponse(nullptr) {}
  ~ListAgentDispatchResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAgentDispatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAgentDispatchResponse(const ListAgentDispatchResponse& from);
  ListAgentDispatchResponse(ListAgentDispatchResponse&& from) noexcept
    : ListAgentDispatchResponse() {
    *this = ::std::move(from);
  }

  inline ListAgentDispatchResponse& operator=(const ListAgentDispatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAgentDispatchResponse& operator=(ListAgentDispatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAgentDispatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAgentDispatchResponse* internal_default_instance() {
    return reinterpret_cast<const ListAgentDispatchResponse*>(
               &_ListAgentDispatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListAgentDispatchResponse& a, ListAgentDispatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAgentDispatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAgentDispatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAgentDispatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAgentDispatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAgentDispatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAgentDispatchResponse& from) {
    ListAgentDispatchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAgentDispatchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListAgentDispatchResponse";
  }
  protected:
  explicit ListAgentDispatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentDispatchesFieldNumber = 1,
  };
  // repeated .livekit.AgentDispatch agent_dispatches = 1;
  int agent_dispatches_size() const;
  private:
  int _internal_agent_dispatches_size() const;
  public:
  void clear_agent_dispatches();
  ::livekit::AgentDispatch* mutable_agent_dispatches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::AgentDispatch >*
      mutable_agent_dispatches();
  private:
  const ::livekit::AgentDispatch& _internal_agent_dispatches(int index) const;
  ::livekit::AgentDispatch* _internal_add_agent_dispatches();
  public:
  const ::livekit::AgentDispatch& agent_dispatches(int index) const;
  ::livekit::AgentDispatch* add_agent_dispatches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::AgentDispatch >&
      agent_dispatches() const;

  // @@protoc_insertion_point(class_scope:livekit.ListAgentDispatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::AgentDispatch > agent_dispatches_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// -------------------------------------------------------------------

class AgentDispatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.AgentDispatch) */ {
 public:
  inline AgentDispatch() : AgentDispatch(nullptr) {}
  ~AgentDispatch() override;
  explicit PROTOBUF_CONSTEXPR AgentDispatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentDispatch(const AgentDispatch& from);
  AgentDispatch(AgentDispatch&& from) noexcept
    : AgentDispatch() {
    *this = ::std::move(from);
  }

  inline AgentDispatch& operator=(const AgentDispatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentDispatch& operator=(AgentDispatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentDispatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentDispatch* internal_default_instance() {
    return reinterpret_cast<const AgentDispatch*>(
               &_AgentDispatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AgentDispatch& a, AgentDispatch& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentDispatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentDispatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentDispatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentDispatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentDispatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentDispatch& from) {
    AgentDispatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentDispatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.AgentDispatch";
  }
  protected:
  explicit AgentDispatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAgentNameFieldNumber = 2,
    kRoomFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string agent_name = 2;
  void clear_agent_name();
  const std::string& agent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_name();
  PROTOBUF_NODISCARD std::string* release_agent_name();
  void set_allocated_agent_name(std::string* agent_name);
  private:
  const std::string& _internal_agent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_name(const std::string& value);
  std::string* _internal_mutable_agent_name();
  public:

  // string room = 3;
  void clear_room();
  const std::string& room() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room();
  PROTOBUF_NODISCARD std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // string metadata = 4;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .livekit.AgentDispatchState state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::livekit::AgentDispatchState& state() const;
  PROTOBUF_NODISCARD ::livekit::AgentDispatchState* release_state();
  ::livekit::AgentDispatchState* mutable_state();
  void set_allocated_state(::livekit::AgentDispatchState* state);
  private:
  const ::livekit::AgentDispatchState& _internal_state() const;
  ::livekit::AgentDispatchState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::livekit::AgentDispatchState* state);
  ::livekit::AgentDispatchState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:livekit.AgentDispatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::livekit::AgentDispatchState* state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// -------------------------------------------------------------------

class AgentDispatchState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.AgentDispatchState) */ {
 public:
  inline AgentDispatchState() : AgentDispatchState(nullptr) {}
  ~AgentDispatchState() override;
  explicit PROTOBUF_CONSTEXPR AgentDispatchState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentDispatchState(const AgentDispatchState& from);
  AgentDispatchState(AgentDispatchState&& from) noexcept
    : AgentDispatchState() {
    *this = ::std::move(from);
  }

  inline AgentDispatchState& operator=(const AgentDispatchState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentDispatchState& operator=(AgentDispatchState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentDispatchState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentDispatchState* internal_default_instance() {
    return reinterpret_cast<const AgentDispatchState*>(
               &_AgentDispatchState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AgentDispatchState& a, AgentDispatchState& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentDispatchState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentDispatchState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentDispatchState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentDispatchState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentDispatchState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentDispatchState& from) {
    AgentDispatchState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentDispatchState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.AgentDispatchState";
  }
  protected:
  explicit AgentDispatchState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobsFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
    kDeletedAtFieldNumber = 3,
  };
  // repeated .livekit.Job jobs = 1;
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::livekit::Job* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::Job >*
      mutable_jobs();
  private:
  const ::livekit::Job& _internal_jobs(int index) const;
  ::livekit::Job* _internal_add_jobs();
  public:
  const ::livekit::Job& jobs(int index) const;
  ::livekit::Job* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::Job >&
      jobs() const;

  // int64 created_at = 2;
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // int64 deleted_at = 3;
  void clear_deleted_at();
  int64_t deleted_at() const;
  void set_deleted_at(int64_t value);
  private:
  int64_t _internal_deleted_at() const;
  void _internal_set_deleted_at(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.AgentDispatchState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::Job > jobs_;
    int64_t created_at_;
    int64_t deleted_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fagent_5fdispatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAgentDispatchRequest

// string agent_name = 1;
inline void CreateAgentDispatchRequest::clear_agent_name() {
  _impl_.agent_name_.ClearToEmpty();
}
inline const std::string& CreateAgentDispatchRequest::agent_name() const {
  // @@protoc_insertion_point(field_get:livekit.CreateAgentDispatchRequest.agent_name)
  return _internal_agent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAgentDispatchRequest::set_agent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateAgentDispatchRequest.agent_name)
}
inline std::string* CreateAgentDispatchRequest::mutable_agent_name() {
  std::string* _s = _internal_mutable_agent_name();
  // @@protoc_insertion_point(field_mutable:livekit.CreateAgentDispatchRequest.agent_name)
  return _s;
}
inline const std::string& CreateAgentDispatchRequest::_internal_agent_name() const {
  return _impl_.agent_name_.Get();
}
inline void CreateAgentDispatchRequest::_internal_set_agent_name(const std::string& value) {
  
  _impl_.agent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAgentDispatchRequest::_internal_mutable_agent_name() {
  
  return _impl_.agent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAgentDispatchRequest::release_agent_name() {
  // @@protoc_insertion_point(field_release:livekit.CreateAgentDispatchRequest.agent_name)
  return _impl_.agent_name_.Release();
}
inline void CreateAgentDispatchRequest::set_allocated_agent_name(std::string* agent_name) {
  if (agent_name != nullptr) {
    
  } else {
    
  }
  _impl_.agent_name_.SetAllocated(agent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_name_.IsDefault()) {
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateAgentDispatchRequest.agent_name)
}

// string room = 2;
inline void CreateAgentDispatchRequest::clear_room() {
  _impl_.room_.ClearToEmpty();
}
inline const std::string& CreateAgentDispatchRequest::room() const {
  // @@protoc_insertion_point(field_get:livekit.CreateAgentDispatchRequest.room)
  return _internal_room();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAgentDispatchRequest::set_room(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateAgentDispatchRequest.room)
}
inline std::string* CreateAgentDispatchRequest::mutable_room() {
  std::string* _s = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:livekit.CreateAgentDispatchRequest.room)
  return _s;
}
inline const std::string& CreateAgentDispatchRequest::_internal_room() const {
  return _impl_.room_.Get();
}
inline void CreateAgentDispatchRequest::_internal_set_room(const std::string& value) {
  
  _impl_.room_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAgentDispatchRequest::_internal_mutable_room() {
  
  return _impl_.room_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAgentDispatchRequest::release_room() {
  // @@protoc_insertion_point(field_release:livekit.CreateAgentDispatchRequest.room)
  return _impl_.room_.Release();
}
inline void CreateAgentDispatchRequest::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  _impl_.room_.SetAllocated(room, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_.IsDefault()) {
    _impl_.room_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateAgentDispatchRequest.room)
}

// string metadata = 3;
inline void CreateAgentDispatchRequest::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& CreateAgentDispatchRequest::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.CreateAgentDispatchRequest.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAgentDispatchRequest::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateAgentDispatchRequest.metadata)
}
inline std::string* CreateAgentDispatchRequest::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.CreateAgentDispatchRequest.metadata)
  return _s;
}
inline const std::string& CreateAgentDispatchRequest::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void CreateAgentDispatchRequest::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAgentDispatchRequest::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAgentDispatchRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.CreateAgentDispatchRequest.metadata)
  return _impl_.metadata_.Release();
}
inline void CreateAgentDispatchRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateAgentDispatchRequest.metadata)
}

// -------------------------------------------------------------------

// RoomAgentDispatch

// string agent_name = 1;
inline void RoomAgentDispatch::clear_agent_name() {
  _impl_.agent_name_.ClearToEmpty();
}
inline const std::string& RoomAgentDispatch::agent_name() const {
  // @@protoc_insertion_point(field_get:livekit.RoomAgentDispatch.agent_name)
  return _internal_agent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomAgentDispatch::set_agent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.RoomAgentDispatch.agent_name)
}
inline std::string* RoomAgentDispatch::mutable_agent_name() {
  std::string* _s = _internal_mutable_agent_name();
  // @@protoc_insertion_point(field_mutable:livekit.RoomAgentDispatch.agent_name)
  return _s;
}
inline const std::string& RoomAgentDispatch::_internal_agent_name() const {
  return _impl_.agent_name_.Get();
}
inline void RoomAgentDispatch::_internal_set_agent_name(const std::string& value) {
  
  _impl_.agent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomAgentDispatch::_internal_mutable_agent_name() {
  
  return _impl_.agent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomAgentDispatch::release_agent_name() {
  // @@protoc_insertion_point(field_release:livekit.RoomAgentDispatch.agent_name)
  return _impl_.agent_name_.Release();
}
inline void RoomAgentDispatch::set_allocated_agent_name(std::string* agent_name) {
  if (agent_name != nullptr) {
    
  } else {
    
  }
  _impl_.agent_name_.SetAllocated(agent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_name_.IsDefault()) {
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomAgentDispatch.agent_name)
}

// string metadata = 2;
inline void RoomAgentDispatch::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& RoomAgentDispatch::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.RoomAgentDispatch.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomAgentDispatch::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.RoomAgentDispatch.metadata)
}
inline std::string* RoomAgentDispatch::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.RoomAgentDispatch.metadata)
  return _s;
}
inline const std::string& RoomAgentDispatch::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void RoomAgentDispatch::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomAgentDispatch::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomAgentDispatch::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.RoomAgentDispatch.metadata)
  return _impl_.metadata_.Release();
}
inline void RoomAgentDispatch::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomAgentDispatch.metadata)
}

// -------------------------------------------------------------------

// DeleteAgentDispatchRequest

// string dispatch_id = 1;
inline void DeleteAgentDispatchRequest::clear_dispatch_id() {
  _impl_.dispatch_id_.ClearToEmpty();
}
inline const std::string& DeleteAgentDispatchRequest::dispatch_id() const {
  // @@protoc_insertion_point(field_get:livekit.DeleteAgentDispatchRequest.dispatch_id)
  return _internal_dispatch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAgentDispatchRequest::set_dispatch_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dispatch_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.DeleteAgentDispatchRequest.dispatch_id)
}
inline std::string* DeleteAgentDispatchRequest::mutable_dispatch_id() {
  std::string* _s = _internal_mutable_dispatch_id();
  // @@protoc_insertion_point(field_mutable:livekit.DeleteAgentDispatchRequest.dispatch_id)
  return _s;
}
inline const std::string& DeleteAgentDispatchRequest::_internal_dispatch_id() const {
  return _impl_.dispatch_id_.Get();
}
inline void DeleteAgentDispatchRequest::_internal_set_dispatch_id(const std::string& value) {
  
  _impl_.dispatch_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteAgentDispatchRequest::_internal_mutable_dispatch_id() {
  
  return _impl_.dispatch_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteAgentDispatchRequest::release_dispatch_id() {
  // @@protoc_insertion_point(field_release:livekit.DeleteAgentDispatchRequest.dispatch_id)
  return _impl_.dispatch_id_.Release();
}
inline void DeleteAgentDispatchRequest::set_allocated_dispatch_id(std::string* dispatch_id) {
  if (dispatch_id != nullptr) {
    
  } else {
    
  }
  _impl_.dispatch_id_.SetAllocated(dispatch_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dispatch_id_.IsDefault()) {
    _impl_.dispatch_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.DeleteAgentDispatchRequest.dispatch_id)
}

// string room = 2;
inline void DeleteAgentDispatchRequest::clear_room() {
  _impl_.room_.ClearToEmpty();
}
inline const std::string& DeleteAgentDispatchRequest::room() const {
  // @@protoc_insertion_point(field_get:livekit.DeleteAgentDispatchRequest.room)
  return _internal_room();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAgentDispatchRequest::set_room(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.DeleteAgentDispatchRequest.room)
}
inline std::string* DeleteAgentDispatchRequest::mutable_room() {
  std::string* _s = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:livekit.DeleteAgentDispatchRequest.room)
  return _s;
}
inline const std::string& DeleteAgentDispatchRequest::_internal_room() const {
  return _impl_.room_.Get();
}
inline void DeleteAgentDispatchRequest::_internal_set_room(const std::string& value) {
  
  _impl_.room_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteAgentDispatchRequest::_internal_mutable_room() {
  
  return _impl_.room_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteAgentDispatchRequest::release_room() {
  // @@protoc_insertion_point(field_release:livekit.DeleteAgentDispatchRequest.room)
  return _impl_.room_.Release();
}
inline void DeleteAgentDispatchRequest::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  _impl_.room_.SetAllocated(room, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_.IsDefault()) {
    _impl_.room_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.DeleteAgentDispatchRequest.room)
}

// -------------------------------------------------------------------

// ListAgentDispatchRequest

// string dispatch_id = 1;
inline void ListAgentDispatchRequest::clear_dispatch_id() {
  _impl_.dispatch_id_.ClearToEmpty();
}
inline const std::string& ListAgentDispatchRequest::dispatch_id() const {
  // @@protoc_insertion_point(field_get:livekit.ListAgentDispatchRequest.dispatch_id)
  return _internal_dispatch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAgentDispatchRequest::set_dispatch_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dispatch_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.ListAgentDispatchRequest.dispatch_id)
}
inline std::string* ListAgentDispatchRequest::mutable_dispatch_id() {
  std::string* _s = _internal_mutable_dispatch_id();
  // @@protoc_insertion_point(field_mutable:livekit.ListAgentDispatchRequest.dispatch_id)
  return _s;
}
inline const std::string& ListAgentDispatchRequest::_internal_dispatch_id() const {
  return _impl_.dispatch_id_.Get();
}
inline void ListAgentDispatchRequest::_internal_set_dispatch_id(const std::string& value) {
  
  _impl_.dispatch_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAgentDispatchRequest::_internal_mutable_dispatch_id() {
  
  return _impl_.dispatch_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAgentDispatchRequest::release_dispatch_id() {
  // @@protoc_insertion_point(field_release:livekit.ListAgentDispatchRequest.dispatch_id)
  return _impl_.dispatch_id_.Release();
}
inline void ListAgentDispatchRequest::set_allocated_dispatch_id(std::string* dispatch_id) {
  if (dispatch_id != nullptr) {
    
  } else {
    
  }
  _impl_.dispatch_id_.SetAllocated(dispatch_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dispatch_id_.IsDefault()) {
    _impl_.dispatch_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.ListAgentDispatchRequest.dispatch_id)
}

// string room = 2;
inline void ListAgentDispatchRequest::clear_room() {
  _impl_.room_.ClearToEmpty();
}
inline const std::string& ListAgentDispatchRequest::room() const {
  // @@protoc_insertion_point(field_get:livekit.ListAgentDispatchRequest.room)
  return _internal_room();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAgentDispatchRequest::set_room(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.ListAgentDispatchRequest.room)
}
inline std::string* ListAgentDispatchRequest::mutable_room() {
  std::string* _s = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:livekit.ListAgentDispatchRequest.room)
  return _s;
}
inline const std::string& ListAgentDispatchRequest::_internal_room() const {
  return _impl_.room_.Get();
}
inline void ListAgentDispatchRequest::_internal_set_room(const std::string& value) {
  
  _impl_.room_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAgentDispatchRequest::_internal_mutable_room() {
  
  return _impl_.room_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAgentDispatchRequest::release_room() {
  // @@protoc_insertion_point(field_release:livekit.ListAgentDispatchRequest.room)
  return _impl_.room_.Release();
}
inline void ListAgentDispatchRequest::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  _impl_.room_.SetAllocated(room, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_.IsDefault()) {
    _impl_.room_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.ListAgentDispatchRequest.room)
}

// -------------------------------------------------------------------

// ListAgentDispatchResponse

// repeated .livekit.AgentDispatch agent_dispatches = 1;
inline int ListAgentDispatchResponse::_internal_agent_dispatches_size() const {
  return _impl_.agent_dispatches_.size();
}
inline int ListAgentDispatchResponse::agent_dispatches_size() const {
  return _internal_agent_dispatches_size();
}
inline void ListAgentDispatchResponse::clear_agent_dispatches() {
  _impl_.agent_dispatches_.Clear();
}
inline ::livekit::AgentDispatch* ListAgentDispatchResponse::mutable_agent_dispatches(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListAgentDispatchResponse.agent_dispatches)
  return _impl_.agent_dispatches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::AgentDispatch >*
ListAgentDispatchResponse::mutable_agent_dispatches() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListAgentDispatchResponse.agent_dispatches)
  return &_impl_.agent_dispatches_;
}
inline const ::livekit::AgentDispatch& ListAgentDispatchResponse::_internal_agent_dispatches(int index) const {
  return _impl_.agent_dispatches_.Get(index);
}
inline const ::livekit::AgentDispatch& ListAgentDispatchResponse::agent_dispatches(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListAgentDispatchResponse.agent_dispatches)
  return _internal_agent_dispatches(index);
}
inline ::livekit::AgentDispatch* ListAgentDispatchResponse::_internal_add_agent_dispatches() {
  return _impl_.agent_dispatches_.Add();
}
inline ::livekit::AgentDispatch* ListAgentDispatchResponse::add_agent_dispatches() {
  ::livekit::AgentDispatch* _add = _internal_add_agent_dispatches();
  // @@protoc_insertion_point(field_add:livekit.ListAgentDispatchResponse.agent_dispatches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::AgentDispatch >&
ListAgentDispatchResponse::agent_dispatches() const {
  // @@protoc_insertion_point(field_list:livekit.ListAgentDispatchResponse.agent_dispatches)
  return _impl_.agent_dispatches_;
}

// -------------------------------------------------------------------

// AgentDispatch

// string id = 1;
inline void AgentDispatch::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AgentDispatch::id() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatch.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentDispatch::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.AgentDispatch.id)
}
inline std::string* AgentDispatch::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.AgentDispatch.id)
  return _s;
}
inline const std::string& AgentDispatch::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AgentDispatch::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentDispatch::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentDispatch::release_id() {
  // @@protoc_insertion_point(field_release:livekit.AgentDispatch.id)
  return _impl_.id_.Release();
}
inline void AgentDispatch::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.AgentDispatch.id)
}

// string agent_name = 2;
inline void AgentDispatch::clear_agent_name() {
  _impl_.agent_name_.ClearToEmpty();
}
inline const std::string& AgentDispatch::agent_name() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatch.agent_name)
  return _internal_agent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentDispatch::set_agent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.AgentDispatch.agent_name)
}
inline std::string* AgentDispatch::mutable_agent_name() {
  std::string* _s = _internal_mutable_agent_name();
  // @@protoc_insertion_point(field_mutable:livekit.AgentDispatch.agent_name)
  return _s;
}
inline const std::string& AgentDispatch::_internal_agent_name() const {
  return _impl_.agent_name_.Get();
}
inline void AgentDispatch::_internal_set_agent_name(const std::string& value) {
  
  _impl_.agent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentDispatch::_internal_mutable_agent_name() {
  
  return _impl_.agent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentDispatch::release_agent_name() {
  // @@protoc_insertion_point(field_release:livekit.AgentDispatch.agent_name)
  return _impl_.agent_name_.Release();
}
inline void AgentDispatch::set_allocated_agent_name(std::string* agent_name) {
  if (agent_name != nullptr) {
    
  } else {
    
  }
  _impl_.agent_name_.SetAllocated(agent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_name_.IsDefault()) {
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.AgentDispatch.agent_name)
}

// string room = 3;
inline void AgentDispatch::clear_room() {
  _impl_.room_.ClearToEmpty();
}
inline const std::string& AgentDispatch::room() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatch.room)
  return _internal_room();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentDispatch::set_room(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.AgentDispatch.room)
}
inline std::string* AgentDispatch::mutable_room() {
  std::string* _s = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:livekit.AgentDispatch.room)
  return _s;
}
inline const std::string& AgentDispatch::_internal_room() const {
  return _impl_.room_.Get();
}
inline void AgentDispatch::_internal_set_room(const std::string& value) {
  
  _impl_.room_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentDispatch::_internal_mutable_room() {
  
  return _impl_.room_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentDispatch::release_room() {
  // @@protoc_insertion_point(field_release:livekit.AgentDispatch.room)
  return _impl_.room_.Release();
}
inline void AgentDispatch::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  _impl_.room_.SetAllocated(room, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_.IsDefault()) {
    _impl_.room_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.AgentDispatch.room)
}

// string metadata = 4;
inline void AgentDispatch::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& AgentDispatch::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatch.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentDispatch::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.AgentDispatch.metadata)
}
inline std::string* AgentDispatch::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.AgentDispatch.metadata)
  return _s;
}
inline const std::string& AgentDispatch::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void AgentDispatch::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentDispatch::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentDispatch::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.AgentDispatch.metadata)
  return _impl_.metadata_.Release();
}
inline void AgentDispatch::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.AgentDispatch.metadata)
}

// .livekit.AgentDispatchState state = 5;
inline bool AgentDispatch::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool AgentDispatch::has_state() const {
  return _internal_has_state();
}
inline void AgentDispatch::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::livekit::AgentDispatchState& AgentDispatch::_internal_state() const {
  const ::livekit::AgentDispatchState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::AgentDispatchState&>(
      ::livekit::_AgentDispatchState_default_instance_);
}
inline const ::livekit::AgentDispatchState& AgentDispatch::state() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatch.state)
  return _internal_state();
}
inline void AgentDispatch::unsafe_arena_set_allocated_state(
    ::livekit::AgentDispatchState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.AgentDispatch.state)
}
inline ::livekit::AgentDispatchState* AgentDispatch::release_state() {
  
  ::livekit::AgentDispatchState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::AgentDispatchState* AgentDispatch::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:livekit.AgentDispatch.state)
  
  ::livekit::AgentDispatchState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::livekit::AgentDispatchState* AgentDispatch::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::AgentDispatchState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::livekit::AgentDispatchState* AgentDispatch::mutable_state() {
  ::livekit::AgentDispatchState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:livekit.AgentDispatch.state)
  return _msg;
}
inline void AgentDispatch::set_allocated_state(::livekit::AgentDispatchState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:livekit.AgentDispatch.state)
}

// -------------------------------------------------------------------

// AgentDispatchState

// repeated .livekit.Job jobs = 1;
inline int AgentDispatchState::_internal_jobs_size() const {
  return _impl_.jobs_.size();
}
inline int AgentDispatchState::jobs_size() const {
  return _internal_jobs_size();
}
inline ::livekit::Job* AgentDispatchState::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.AgentDispatchState.jobs)
  return _impl_.jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::Job >*
AgentDispatchState::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:livekit.AgentDispatchState.jobs)
  return &_impl_.jobs_;
}
inline const ::livekit::Job& AgentDispatchState::_internal_jobs(int index) const {
  return _impl_.jobs_.Get(index);
}
inline const ::livekit::Job& AgentDispatchState::jobs(int index) const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatchState.jobs)
  return _internal_jobs(index);
}
inline ::livekit::Job* AgentDispatchState::_internal_add_jobs() {
  return _impl_.jobs_.Add();
}
inline ::livekit::Job* AgentDispatchState::add_jobs() {
  ::livekit::Job* _add = _internal_add_jobs();
  // @@protoc_insertion_point(field_add:livekit.AgentDispatchState.jobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::Job >&
AgentDispatchState::jobs() const {
  // @@protoc_insertion_point(field_list:livekit.AgentDispatchState.jobs)
  return _impl_.jobs_;
}

// int64 created_at = 2;
inline void AgentDispatchState::clear_created_at() {
  _impl_.created_at_ = int64_t{0};
}
inline int64_t AgentDispatchState::_internal_created_at() const {
  return _impl_.created_at_;
}
inline int64_t AgentDispatchState::created_at() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatchState.created_at)
  return _internal_created_at();
}
inline void AgentDispatchState::_internal_set_created_at(int64_t value) {
  
  _impl_.created_at_ = value;
}
inline void AgentDispatchState::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:livekit.AgentDispatchState.created_at)
}

// int64 deleted_at = 3;
inline void AgentDispatchState::clear_deleted_at() {
  _impl_.deleted_at_ = int64_t{0};
}
inline int64_t AgentDispatchState::_internal_deleted_at() const {
  return _impl_.deleted_at_;
}
inline int64_t AgentDispatchState::deleted_at() const {
  // @@protoc_insertion_point(field_get:livekit.AgentDispatchState.deleted_at)
  return _internal_deleted_at();
}
inline void AgentDispatchState::_internal_set_deleted_at(int64_t value) {
  
  _impl_.deleted_at_ = value;
}
inline void AgentDispatchState::set_deleted_at(int64_t value) {
  _internal_set_deleted_at(value);
  // @@protoc_insertion_point(field_set:livekit.AgentDispatchState.deleted_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace livekit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_livekit_5fagent_5fdispatch_2eproto
