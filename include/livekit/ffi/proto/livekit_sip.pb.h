// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_sip.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_livekit_5fsip_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_livekit_5fsip_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include "livekit_models.pb.h"
#include "livekit_room.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_livekit_5fsip_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_livekit_5fsip_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_livekit_5fsip_2eproto;
namespace livekit {
class CreateSIPDispatchRuleRequest;
struct CreateSIPDispatchRuleRequestDefaultTypeInternal;
extern CreateSIPDispatchRuleRequestDefaultTypeInternal _CreateSIPDispatchRuleRequest_default_instance_;
class CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse;
struct CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUseDefaultTypeInternal;
extern CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUseDefaultTypeInternal _CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse_default_instance_;
class CreateSIPInboundTrunkRequest;
struct CreateSIPInboundTrunkRequestDefaultTypeInternal;
extern CreateSIPInboundTrunkRequestDefaultTypeInternal _CreateSIPInboundTrunkRequest_default_instance_;
class CreateSIPOutboundTrunkRequest;
struct CreateSIPOutboundTrunkRequestDefaultTypeInternal;
extern CreateSIPOutboundTrunkRequestDefaultTypeInternal _CreateSIPOutboundTrunkRequest_default_instance_;
class CreateSIPParticipantRequest;
struct CreateSIPParticipantRequestDefaultTypeInternal;
extern CreateSIPParticipantRequestDefaultTypeInternal _CreateSIPParticipantRequest_default_instance_;
class CreateSIPParticipantRequest_HeadersEntry_DoNotUse;
struct CreateSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern CreateSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal _CreateSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_;
class CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse;
struct CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal;
extern CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal _CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse_default_instance_;
class CreateSIPTrunkRequest;
struct CreateSIPTrunkRequestDefaultTypeInternal;
extern CreateSIPTrunkRequestDefaultTypeInternal _CreateSIPTrunkRequest_default_instance_;
class DeleteSIPDispatchRuleRequest;
struct DeleteSIPDispatchRuleRequestDefaultTypeInternal;
extern DeleteSIPDispatchRuleRequestDefaultTypeInternal _DeleteSIPDispatchRuleRequest_default_instance_;
class DeleteSIPTrunkRequest;
struct DeleteSIPTrunkRequestDefaultTypeInternal;
extern DeleteSIPTrunkRequestDefaultTypeInternal _DeleteSIPTrunkRequest_default_instance_;
class GetSIPInboundTrunkRequest;
struct GetSIPInboundTrunkRequestDefaultTypeInternal;
extern GetSIPInboundTrunkRequestDefaultTypeInternal _GetSIPInboundTrunkRequest_default_instance_;
class GetSIPInboundTrunkResponse;
struct GetSIPInboundTrunkResponseDefaultTypeInternal;
extern GetSIPInboundTrunkResponseDefaultTypeInternal _GetSIPInboundTrunkResponse_default_instance_;
class GetSIPOutboundTrunkRequest;
struct GetSIPOutboundTrunkRequestDefaultTypeInternal;
extern GetSIPOutboundTrunkRequestDefaultTypeInternal _GetSIPOutboundTrunkRequest_default_instance_;
class GetSIPOutboundTrunkResponse;
struct GetSIPOutboundTrunkResponseDefaultTypeInternal;
extern GetSIPOutboundTrunkResponseDefaultTypeInternal _GetSIPOutboundTrunkResponse_default_instance_;
class ListSIPDispatchRuleRequest;
struct ListSIPDispatchRuleRequestDefaultTypeInternal;
extern ListSIPDispatchRuleRequestDefaultTypeInternal _ListSIPDispatchRuleRequest_default_instance_;
class ListSIPDispatchRuleResponse;
struct ListSIPDispatchRuleResponseDefaultTypeInternal;
extern ListSIPDispatchRuleResponseDefaultTypeInternal _ListSIPDispatchRuleResponse_default_instance_;
class ListSIPInboundTrunkRequest;
struct ListSIPInboundTrunkRequestDefaultTypeInternal;
extern ListSIPInboundTrunkRequestDefaultTypeInternal _ListSIPInboundTrunkRequest_default_instance_;
class ListSIPInboundTrunkResponse;
struct ListSIPInboundTrunkResponseDefaultTypeInternal;
extern ListSIPInboundTrunkResponseDefaultTypeInternal _ListSIPInboundTrunkResponse_default_instance_;
class ListSIPOutboundTrunkRequest;
struct ListSIPOutboundTrunkRequestDefaultTypeInternal;
extern ListSIPOutboundTrunkRequestDefaultTypeInternal _ListSIPOutboundTrunkRequest_default_instance_;
class ListSIPOutboundTrunkResponse;
struct ListSIPOutboundTrunkResponseDefaultTypeInternal;
extern ListSIPOutboundTrunkResponseDefaultTypeInternal _ListSIPOutboundTrunkResponse_default_instance_;
class ListSIPTrunkRequest;
struct ListSIPTrunkRequestDefaultTypeInternal;
extern ListSIPTrunkRequestDefaultTypeInternal _ListSIPTrunkRequest_default_instance_;
class ListSIPTrunkResponse;
struct ListSIPTrunkResponseDefaultTypeInternal;
extern ListSIPTrunkResponseDefaultTypeInternal _ListSIPTrunkResponse_default_instance_;
class SIPCallInfo;
struct SIPCallInfoDefaultTypeInternal;
extern SIPCallInfoDefaultTypeInternal _SIPCallInfo_default_instance_;
class SIPCallInfo_ParticipantAttributesEntry_DoNotUse;
struct SIPCallInfo_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal;
extern SIPCallInfo_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal _SIPCallInfo_ParticipantAttributesEntry_DoNotUse_default_instance_;
class SIPDispatchRule;
struct SIPDispatchRuleDefaultTypeInternal;
extern SIPDispatchRuleDefaultTypeInternal _SIPDispatchRule_default_instance_;
class SIPDispatchRuleCallee;
struct SIPDispatchRuleCalleeDefaultTypeInternal;
extern SIPDispatchRuleCalleeDefaultTypeInternal _SIPDispatchRuleCallee_default_instance_;
class SIPDispatchRuleDirect;
struct SIPDispatchRuleDirectDefaultTypeInternal;
extern SIPDispatchRuleDirectDefaultTypeInternal _SIPDispatchRuleDirect_default_instance_;
class SIPDispatchRuleIndividual;
struct SIPDispatchRuleIndividualDefaultTypeInternal;
extern SIPDispatchRuleIndividualDefaultTypeInternal _SIPDispatchRuleIndividual_default_instance_;
class SIPDispatchRuleInfo;
struct SIPDispatchRuleInfoDefaultTypeInternal;
extern SIPDispatchRuleInfoDefaultTypeInternal _SIPDispatchRuleInfo_default_instance_;
class SIPDispatchRuleInfo_AttributesEntry_DoNotUse;
struct SIPDispatchRuleInfo_AttributesEntry_DoNotUseDefaultTypeInternal;
extern SIPDispatchRuleInfo_AttributesEntry_DoNotUseDefaultTypeInternal _SIPDispatchRuleInfo_AttributesEntry_DoNotUse_default_instance_;
class SIPInboundTrunkInfo;
struct SIPInboundTrunkInfoDefaultTypeInternal;
extern SIPInboundTrunkInfoDefaultTypeInternal _SIPInboundTrunkInfo_default_instance_;
class SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse;
struct SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal;
extern SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal _SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_;
class SIPInboundTrunkInfo_HeadersEntry_DoNotUse;
struct SIPInboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal;
extern SIPInboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal _SIPInboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_;
class SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse;
struct SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal;
extern SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal _SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_;
class SIPOutboundConfig;
struct SIPOutboundConfigDefaultTypeInternal;
extern SIPOutboundConfigDefaultTypeInternal _SIPOutboundConfig_default_instance_;
class SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse;
struct SIPOutboundConfig_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal;
extern SIPOutboundConfig_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal _SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse_default_instance_;
class SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse;
struct SIPOutboundConfig_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal;
extern SIPOutboundConfig_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal _SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse_default_instance_;
class SIPOutboundTrunkInfo;
struct SIPOutboundTrunkInfoDefaultTypeInternal;
extern SIPOutboundTrunkInfoDefaultTypeInternal _SIPOutboundTrunkInfo_default_instance_;
class SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse;
struct SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal;
extern SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal _SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_;
class SIPOutboundTrunkInfo_HeadersEntry_DoNotUse;
struct SIPOutboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal;
extern SIPOutboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal _SIPOutboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_;
class SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse;
struct SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal;
extern SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal _SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_;
class SIPParticipantInfo;
struct SIPParticipantInfoDefaultTypeInternal;
extern SIPParticipantInfoDefaultTypeInternal _SIPParticipantInfo_default_instance_;
class SIPStatus;
struct SIPStatusDefaultTypeInternal;
extern SIPStatusDefaultTypeInternal _SIPStatus_default_instance_;
class SIPTrunkInfo;
struct SIPTrunkInfoDefaultTypeInternal;
extern SIPTrunkInfoDefaultTypeInternal _SIPTrunkInfo_default_instance_;
class SIPUri;
struct SIPUriDefaultTypeInternal;
extern SIPUriDefaultTypeInternal _SIPUri_default_instance_;
class TransferSIPParticipantRequest;
struct TransferSIPParticipantRequestDefaultTypeInternal;
extern TransferSIPParticipantRequestDefaultTypeInternal _TransferSIPParticipantRequest_default_instance_;
class TransferSIPParticipantRequest_HeadersEntry_DoNotUse;
struct TransferSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern TransferSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal _TransferSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_;
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::CreateSIPDispatchRuleRequest* Arena::CreateMaybeMessage<::livekit::CreateSIPDispatchRuleRequest>(Arena*);
template<> ::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::CreateSIPInboundTrunkRequest* Arena::CreateMaybeMessage<::livekit::CreateSIPInboundTrunkRequest>(Arena*);
template<> ::livekit::CreateSIPOutboundTrunkRequest* Arena::CreateMaybeMessage<::livekit::CreateSIPOutboundTrunkRequest>(Arena*);
template<> ::livekit::CreateSIPParticipantRequest* Arena::CreateMaybeMessage<::livekit::CreateSIPParticipantRequest>(Arena*);
template<> ::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::CreateSIPTrunkRequest* Arena::CreateMaybeMessage<::livekit::CreateSIPTrunkRequest>(Arena*);
template<> ::livekit::DeleteSIPDispatchRuleRequest* Arena::CreateMaybeMessage<::livekit::DeleteSIPDispatchRuleRequest>(Arena*);
template<> ::livekit::DeleteSIPTrunkRequest* Arena::CreateMaybeMessage<::livekit::DeleteSIPTrunkRequest>(Arena*);
template<> ::livekit::GetSIPInboundTrunkRequest* Arena::CreateMaybeMessage<::livekit::GetSIPInboundTrunkRequest>(Arena*);
template<> ::livekit::GetSIPInboundTrunkResponse* Arena::CreateMaybeMessage<::livekit::GetSIPInboundTrunkResponse>(Arena*);
template<> ::livekit::GetSIPOutboundTrunkRequest* Arena::CreateMaybeMessage<::livekit::GetSIPOutboundTrunkRequest>(Arena*);
template<> ::livekit::GetSIPOutboundTrunkResponse* Arena::CreateMaybeMessage<::livekit::GetSIPOutboundTrunkResponse>(Arena*);
template<> ::livekit::ListSIPDispatchRuleRequest* Arena::CreateMaybeMessage<::livekit::ListSIPDispatchRuleRequest>(Arena*);
template<> ::livekit::ListSIPDispatchRuleResponse* Arena::CreateMaybeMessage<::livekit::ListSIPDispatchRuleResponse>(Arena*);
template<> ::livekit::ListSIPInboundTrunkRequest* Arena::CreateMaybeMessage<::livekit::ListSIPInboundTrunkRequest>(Arena*);
template<> ::livekit::ListSIPInboundTrunkResponse* Arena::CreateMaybeMessage<::livekit::ListSIPInboundTrunkResponse>(Arena*);
template<> ::livekit::ListSIPOutboundTrunkRequest* Arena::CreateMaybeMessage<::livekit::ListSIPOutboundTrunkRequest>(Arena*);
template<> ::livekit::ListSIPOutboundTrunkResponse* Arena::CreateMaybeMessage<::livekit::ListSIPOutboundTrunkResponse>(Arena*);
template<> ::livekit::ListSIPTrunkRequest* Arena::CreateMaybeMessage<::livekit::ListSIPTrunkRequest>(Arena*);
template<> ::livekit::ListSIPTrunkResponse* Arena::CreateMaybeMessage<::livekit::ListSIPTrunkResponse>(Arena*);
template<> ::livekit::SIPCallInfo* Arena::CreateMaybeMessage<::livekit::SIPCallInfo>(Arena*);
template<> ::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPDispatchRule* Arena::CreateMaybeMessage<::livekit::SIPDispatchRule>(Arena*);
template<> ::livekit::SIPDispatchRuleCallee* Arena::CreateMaybeMessage<::livekit::SIPDispatchRuleCallee>(Arena*);
template<> ::livekit::SIPDispatchRuleDirect* Arena::CreateMaybeMessage<::livekit::SIPDispatchRuleDirect>(Arena*);
template<> ::livekit::SIPDispatchRuleIndividual* Arena::CreateMaybeMessage<::livekit::SIPDispatchRuleIndividual>(Arena*);
template<> ::livekit::SIPDispatchRuleInfo* Arena::CreateMaybeMessage<::livekit::SIPDispatchRuleInfo>(Arena*);
template<> ::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPInboundTrunkInfo* Arena::CreateMaybeMessage<::livekit::SIPInboundTrunkInfo>(Arena*);
template<> ::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPOutboundConfig* Arena::CreateMaybeMessage<::livekit::SIPOutboundConfig>(Arena*);
template<> ::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPOutboundTrunkInfo* Arena::CreateMaybeMessage<::livekit::SIPOutboundTrunkInfo>(Arena*);
template<> ::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse>(Arena*);
template<> ::livekit::SIPParticipantInfo* Arena::CreateMaybeMessage<::livekit::SIPParticipantInfo>(Arena*);
template<> ::livekit::SIPStatus* Arena::CreateMaybeMessage<::livekit::SIPStatus>(Arena*);
template<> ::livekit::SIPTrunkInfo* Arena::CreateMaybeMessage<::livekit::SIPTrunkInfo>(Arena*);
template<> ::livekit::SIPUri* Arena::CreateMaybeMessage<::livekit::SIPUri>(Arena*);
template<> ::livekit::TransferSIPParticipantRequest* Arena::CreateMaybeMessage<::livekit::TransferSIPParticipantRequest>(Arena*);
template<> ::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {

enum SIPTrunkInfo_TrunkKind : int {
  SIPTrunkInfo_TrunkKind_TRUNK_LEGACY = 0,
  SIPTrunkInfo_TrunkKind_TRUNK_INBOUND = 1,
  SIPTrunkInfo_TrunkKind_TRUNK_OUTBOUND = 2,
  SIPTrunkInfo_TrunkKind_SIPTrunkInfo_TrunkKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPTrunkInfo_TrunkKind_SIPTrunkInfo_TrunkKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPTrunkInfo_TrunkKind_IsValid(int value);
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo_TrunkKind_TrunkKind_MIN = SIPTrunkInfo_TrunkKind_TRUNK_LEGACY;
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo_TrunkKind_TrunkKind_MAX = SIPTrunkInfo_TrunkKind_TRUNK_OUTBOUND;
constexpr int SIPTrunkInfo_TrunkKind_TrunkKind_ARRAYSIZE = SIPTrunkInfo_TrunkKind_TrunkKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPTrunkInfo_TrunkKind_descriptor();
template<typename T>
inline const std::string& SIPTrunkInfo_TrunkKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPTrunkInfo_TrunkKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPTrunkInfo_TrunkKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPTrunkInfo_TrunkKind_descriptor(), enum_t_value);
}
inline bool SIPTrunkInfo_TrunkKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPTrunkInfo_TrunkKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPTrunkInfo_TrunkKind>(
    SIPTrunkInfo_TrunkKind_descriptor(), name, value);
}
enum SIPStatusCode : int {
  SIP_STATUS_UNKNOWN = 0,
  SIP_STATUS_TRYING = 100,
  SIP_STATUS_RINGING = 180,
  SIP_STATUS_CALL_IS_FORWARDED = 181,
  SIP_STATUS_QUEUED = 182,
  SIP_STATUS_SESSION_PROGRESS = 183,
  SIP_STATUS_OK = 200,
  SIP_STATUS_ACCEPTED = 202,
  SIP_STATUS_MOVED_PERMANENTLY = 301,
  SIP_STATUS_MOVED_TEMPORARILY = 302,
  SIP_STATUS_USE_PROXY = 305,
  SIP_STATUS_BAD_REQUEST = 400,
  SIP_STATUS_UNAUTHORIZED = 401,
  SIP_STATUS_PAYMENT_REQUIRED = 402,
  SIP_STATUS_FORBIDDEN = 403,
  SIP_STATUS_NOTFOUND = 404,
  SIP_STATUS_METHOD_NOT_ALLOWED = 405,
  SIP_STATUS_NOT_ACCEPTABLE = 406,
  SIP_STATUS_PROXY_AUTH_REQUIRED = 407,
  SIP_STATUS_REQUEST_TIMEOUT = 408,
  SIP_STATUS_CONFLICT = 409,
  SIP_STATUS_GONE = 410,
  SIP_STATUS_REQUEST_ENTITY_TOO_LARGE = 413,
  SIP_STATUS_REQUEST_URI_TOO_LONG = 414,
  SIP_STATUS_UNSUPPORTED_MEDIA_TYPE = 415,
  SIP_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = 416,
  SIP_STATUS_BAD_EXTENSION = 420,
  SIP_STATUS_EXTENSION_REQUIRED = 421,
  SIP_STATUS_INTERVAL_TOO_BRIEF = 423,
  SIP_STATUS_TEMPORARILY_UNAVAILABLE = 480,
  SIP_STATUS_CALL_TRANSACTION_DOES_NOT_EXISTS = 481,
  SIP_STATUS_LOOP_DETECTED = 482,
  SIP_STATUS_TOO_MANY_HOPS = 483,
  SIP_STATUS_ADDRESS_INCOMPLETE = 484,
  SIP_STATUS_AMBIGUOUS = 485,
  SIP_STATUS_BUSY_HERE = 486,
  SIP_STATUS_REQUEST_TERMINATED = 487,
  SIP_STATUS_NOT_ACCEPTABLE_HERE = 488,
  SIP_STATUS_INTERNAL_SERVER_ERROR = 500,
  SIP_STATUS_NOT_IMPLEMENTED = 501,
  SIP_STATUS_BAD_GATEWAY = 502,
  SIP_STATUS_SERVICE_UNAVAILABLE = 503,
  SIP_STATUS_GATEWAY_TIMEOUT = 504,
  SIP_STATUS_VERSION_NOT_SUPPORTED = 505,
  SIP_STATUS_MESSAGE_TOO_LARGE = 513,
  SIP_STATUS_GLOBAL_BUSY_EVERYWHERE = 600,
  SIP_STATUS_GLOBAL_DECLINE = 603,
  SIP_STATUS_GLOBAL_DOES_NOT_EXIST_ANYWHERE = 604,
  SIP_STATUS_GLOBAL_NOT_ACCEPTABLE = 606,
  SIPStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPStatusCode_IsValid(int value);
constexpr SIPStatusCode SIPStatusCode_MIN = SIP_STATUS_UNKNOWN;
constexpr SIPStatusCode SIPStatusCode_MAX = SIP_STATUS_GLOBAL_NOT_ACCEPTABLE;
constexpr int SIPStatusCode_ARRAYSIZE = SIPStatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPStatusCode_descriptor();
template<typename T>
inline const std::string& SIPStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPStatusCode_descriptor(), enum_t_value);
}
inline bool SIPStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPStatusCode>(
    SIPStatusCode_descriptor(), name, value);
}
enum SIPTransport : int {
  SIP_TRANSPORT_AUTO = 0,
  SIP_TRANSPORT_UDP = 1,
  SIP_TRANSPORT_TCP = 2,
  SIP_TRANSPORT_TLS = 3,
  SIPTransport_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPTransport_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPTransport_IsValid(int value);
constexpr SIPTransport SIPTransport_MIN = SIP_TRANSPORT_AUTO;
constexpr SIPTransport SIPTransport_MAX = SIP_TRANSPORT_TLS;
constexpr int SIPTransport_ARRAYSIZE = SIPTransport_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPTransport_descriptor();
template<typename T>
inline const std::string& SIPTransport_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPTransport>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPTransport_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPTransport_descriptor(), enum_t_value);
}
inline bool SIPTransport_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPTransport* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPTransport>(
    SIPTransport_descriptor(), name, value);
}
enum SIPHeaderOptions : int {
  SIP_NO_HEADERS = 0,
  SIP_X_HEADERS = 1,
  SIP_ALL_HEADERS = 2,
  SIPHeaderOptions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPHeaderOptions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPHeaderOptions_IsValid(int value);
constexpr SIPHeaderOptions SIPHeaderOptions_MIN = SIP_NO_HEADERS;
constexpr SIPHeaderOptions SIPHeaderOptions_MAX = SIP_ALL_HEADERS;
constexpr int SIPHeaderOptions_ARRAYSIZE = SIPHeaderOptions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPHeaderOptions_descriptor();
template<typename T>
inline const std::string& SIPHeaderOptions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPHeaderOptions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPHeaderOptions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPHeaderOptions_descriptor(), enum_t_value);
}
inline bool SIPHeaderOptions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPHeaderOptions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPHeaderOptions>(
    SIPHeaderOptions_descriptor(), name, value);
}
enum SIPMediaEncryption : int {
  SIP_MEDIA_ENCRYPT_DISABLE = 0,
  SIP_MEDIA_ENCRYPT_ALLOW = 1,
  SIP_MEDIA_ENCRYPT_REQUIRE = 2,
  SIPMediaEncryption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPMediaEncryption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPMediaEncryption_IsValid(int value);
constexpr SIPMediaEncryption SIPMediaEncryption_MIN = SIP_MEDIA_ENCRYPT_DISABLE;
constexpr SIPMediaEncryption SIPMediaEncryption_MAX = SIP_MEDIA_ENCRYPT_REQUIRE;
constexpr int SIPMediaEncryption_ARRAYSIZE = SIPMediaEncryption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPMediaEncryption_descriptor();
template<typename T>
inline const std::string& SIPMediaEncryption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPMediaEncryption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPMediaEncryption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPMediaEncryption_descriptor(), enum_t_value);
}
inline bool SIPMediaEncryption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPMediaEncryption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPMediaEncryption>(
    SIPMediaEncryption_descriptor(), name, value);
}
enum SIPCallStatus : int {
  SCS_CALL_INCOMING = 0,
  SCS_PARTICIPANT_JOINED = 1,
  SCS_ACTIVE = 2,
  SCS_DISCONNECTED = 3,
  SCS_ERROR = 4,
  SIPCallStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPCallStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPCallStatus_IsValid(int value);
constexpr SIPCallStatus SIPCallStatus_MIN = SCS_CALL_INCOMING;
constexpr SIPCallStatus SIPCallStatus_MAX = SCS_ERROR;
constexpr int SIPCallStatus_ARRAYSIZE = SIPCallStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPCallStatus_descriptor();
template<typename T>
inline const std::string& SIPCallStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPCallStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPCallStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPCallStatus_descriptor(), enum_t_value);
}
inline bool SIPCallStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPCallStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPCallStatus>(
    SIPCallStatus_descriptor(), name, value);
}
enum SIPFeature : int {
  NONE = 0,
  KRISP_ENABLED = 1,
  SIPFeature_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPFeature_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPFeature_IsValid(int value);
constexpr SIPFeature SIPFeature_MIN = NONE;
constexpr SIPFeature SIPFeature_MAX = KRISP_ENABLED;
constexpr int SIPFeature_ARRAYSIZE = SIPFeature_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPFeature_descriptor();
template<typename T>
inline const std::string& SIPFeature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPFeature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPFeature_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPFeature_descriptor(), enum_t_value);
}
inline bool SIPFeature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPFeature* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPFeature>(
    SIPFeature_descriptor(), name, value);
}
enum SIPCallDirection : int {
  SCD_UNKNOWN = 0,
  SCD_INBOUND = 1,
  SCD_OUTBOUND = 2,
  SIPCallDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPCallDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPCallDirection_IsValid(int value);
constexpr SIPCallDirection SIPCallDirection_MIN = SCD_UNKNOWN;
constexpr SIPCallDirection SIPCallDirection_MAX = SCD_OUTBOUND;
constexpr int SIPCallDirection_ARRAYSIZE = SIPCallDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPCallDirection_descriptor();
template<typename T>
inline const std::string& SIPCallDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPCallDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPCallDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPCallDirection_descriptor(), enum_t_value);
}
inline bool SIPCallDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPCallDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPCallDirection>(
    SIPCallDirection_descriptor(), name, value);
}
// ===================================================================

class SIPStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPStatus) */ {
 public:
  inline SIPStatus() : SIPStatus(nullptr) {}
  ~SIPStatus() override;
  explicit PROTOBUF_CONSTEXPR SIPStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPStatus(const SIPStatus& from);
  SIPStatus(SIPStatus&& from) noexcept
    : SIPStatus() {
    *this = ::std::move(from);
  }

  inline SIPStatus& operator=(const SIPStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPStatus& operator=(SIPStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPStatus* internal_default_instance() {
    return reinterpret_cast<const SIPStatus*>(
               &_SIPStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SIPStatus& a, SIPStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPStatus& from) {
    SIPStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPStatus";
  }
  protected:
  explicit SIPStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .livekit.SIPStatusCode code = 1;
  void clear_code();
  ::livekit::SIPStatusCode code() const;
  void set_code(::livekit::SIPStatusCode value);
  private:
  ::livekit::SIPStatusCode _internal_code() const;
  void _internal_set_code(::livekit::SIPStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class CreateSIPTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.CreateSIPTrunkRequest) */ {
 public:
  inline CreateSIPTrunkRequest() : CreateSIPTrunkRequest(nullptr) {}
  ~CreateSIPTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSIPTrunkRequest(const CreateSIPTrunkRequest& from);
  CreateSIPTrunkRequest(CreateSIPTrunkRequest&& from) noexcept
    : CreateSIPTrunkRequest() {
    *this = ::std::move(from);
  }

  inline CreateSIPTrunkRequest& operator=(const CreateSIPTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSIPTrunkRequest& operator=(CreateSIPTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSIPTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSIPTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSIPTrunkRequest*>(
               &_CreateSIPTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateSIPTrunkRequest& a, CreateSIPTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSIPTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSIPTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSIPTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSIPTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSIPTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSIPTrunkRequest& from) {
    CreateSIPTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSIPTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.CreateSIPTrunkRequest";
  }
  protected:
  explicit CreateSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInboundAddressesFieldNumber = 1,
    kInboundNumbersRegexFieldNumber = 4,
    kInboundNumbersFieldNumber = 9,
    kOutboundAddressFieldNumber = 2,
    kOutboundNumberFieldNumber = 3,
    kInboundUsernameFieldNumber = 5,
    kInboundPasswordFieldNumber = 6,
    kOutboundUsernameFieldNumber = 7,
    kOutboundPasswordFieldNumber = 8,
    kNameFieldNumber = 10,
    kMetadataFieldNumber = 11,
  };
  // repeated string inbound_addresses = 1;
  int inbound_addresses_size() const;
  private:
  int _internal_inbound_addresses_size() const;
  public:
  void clear_inbound_addresses();
  const std::string& inbound_addresses(int index) const;
  std::string* mutable_inbound_addresses(int index);
  void set_inbound_addresses(int index, const std::string& value);
  void set_inbound_addresses(int index, std::string&& value);
  void set_inbound_addresses(int index, const char* value);
  void set_inbound_addresses(int index, const char* value, size_t size);
  std::string* add_inbound_addresses();
  void add_inbound_addresses(const std::string& value);
  void add_inbound_addresses(std::string&& value);
  void add_inbound_addresses(const char* value);
  void add_inbound_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_addresses();
  private:
  const std::string& _internal_inbound_addresses(int index) const;
  std::string* _internal_add_inbound_addresses();
  public:

  // repeated string inbound_numbers_regex = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int inbound_numbers_regex_size() const;
  private:
  int _internal_inbound_numbers_regex_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_inbound_numbers_regex();
  PROTOBUF_DEPRECATED const std::string& inbound_numbers_regex(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_inbound_numbers_regex(int index);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, const char* value);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_inbound_numbers_regex();
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(const std::string& value);
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(std::string&& value);
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(const char* value);
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_numbers_regex() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_numbers_regex();
  private:
  const std::string& _internal_inbound_numbers_regex(int index) const;
  std::string* _internal_add_inbound_numbers_regex();
  public:

  // repeated string inbound_numbers = 9;
  int inbound_numbers_size() const;
  private:
  int _internal_inbound_numbers_size() const;
  public:
  void clear_inbound_numbers();
  const std::string& inbound_numbers(int index) const;
  std::string* mutable_inbound_numbers(int index);
  void set_inbound_numbers(int index, const std::string& value);
  void set_inbound_numbers(int index, std::string&& value);
  void set_inbound_numbers(int index, const char* value);
  void set_inbound_numbers(int index, const char* value, size_t size);
  std::string* add_inbound_numbers();
  void add_inbound_numbers(const std::string& value);
  void add_inbound_numbers(std::string&& value);
  void add_inbound_numbers(const char* value);
  void add_inbound_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_numbers();
  private:
  const std::string& _internal_inbound_numbers(int index) const;
  std::string* _internal_add_inbound_numbers();
  public:

  // string outbound_address = 2;
  void clear_outbound_address();
  const std::string& outbound_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_address();
  PROTOBUF_NODISCARD std::string* release_outbound_address();
  void set_allocated_outbound_address(std::string* outbound_address);
  private:
  const std::string& _internal_outbound_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_address(const std::string& value);
  std::string* _internal_mutable_outbound_address();
  public:

  // string outbound_number = 3;
  void clear_outbound_number();
  const std::string& outbound_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_number();
  PROTOBUF_NODISCARD std::string* release_outbound_number();
  void set_allocated_outbound_number(std::string* outbound_number);
  private:
  const std::string& _internal_outbound_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_number(const std::string& value);
  std::string* _internal_mutable_outbound_number();
  public:

  // string inbound_username = 5;
  void clear_inbound_username();
  const std::string& inbound_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inbound_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inbound_username();
  PROTOBUF_NODISCARD std::string* release_inbound_username();
  void set_allocated_inbound_username(std::string* inbound_username);
  private:
  const std::string& _internal_inbound_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inbound_username(const std::string& value);
  std::string* _internal_mutable_inbound_username();
  public:

  // string inbound_password = 6;
  void clear_inbound_password();
  const std::string& inbound_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inbound_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inbound_password();
  PROTOBUF_NODISCARD std::string* release_inbound_password();
  void set_allocated_inbound_password(std::string* inbound_password);
  private:
  const std::string& _internal_inbound_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inbound_password(const std::string& value);
  std::string* _internal_mutable_inbound_password();
  public:

  // string outbound_username = 7;
  void clear_outbound_username();
  const std::string& outbound_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_username();
  PROTOBUF_NODISCARD std::string* release_outbound_username();
  void set_allocated_outbound_username(std::string* outbound_username);
  private:
  const std::string& _internal_outbound_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_username(const std::string& value);
  std::string* _internal_mutable_outbound_username();
  public:

  // string outbound_password = 8;
  void clear_outbound_password();
  const std::string& outbound_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_password();
  PROTOBUF_NODISCARD std::string* release_outbound_password();
  void set_allocated_outbound_password(std::string* outbound_password);
  private:
  const std::string& _internal_outbound_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_password(const std::string& value);
  std::string* _internal_mutable_outbound_password();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metadata = 11;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:livekit.CreateSIPTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_addresses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_numbers_regex_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inbound_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inbound_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPTrunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPTrunkInfo) */ {
 public:
  inline SIPTrunkInfo() : SIPTrunkInfo(nullptr) {}
  ~SIPTrunkInfo() override;
  explicit PROTOBUF_CONSTEXPR SIPTrunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPTrunkInfo(const SIPTrunkInfo& from);
  SIPTrunkInfo(SIPTrunkInfo&& from) noexcept
    : SIPTrunkInfo() {
    *this = ::std::move(from);
  }

  inline SIPTrunkInfo& operator=(const SIPTrunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPTrunkInfo& operator=(SIPTrunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPTrunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPTrunkInfo* internal_default_instance() {
    return reinterpret_cast<const SIPTrunkInfo*>(
               &_SIPTrunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SIPTrunkInfo& a, SIPTrunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPTrunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPTrunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPTrunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPTrunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPTrunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPTrunkInfo& from) {
    SIPTrunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPTrunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPTrunkInfo";
  }
  protected:
  explicit SIPTrunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SIPTrunkInfo_TrunkKind TrunkKind;
  static constexpr TrunkKind TRUNK_LEGACY =
    SIPTrunkInfo_TrunkKind_TRUNK_LEGACY;
  static constexpr TrunkKind TRUNK_INBOUND =
    SIPTrunkInfo_TrunkKind_TRUNK_INBOUND;
  static constexpr TrunkKind TRUNK_OUTBOUND =
    SIPTrunkInfo_TrunkKind_TRUNK_OUTBOUND;
  static inline bool TrunkKind_IsValid(int value) {
    return SIPTrunkInfo_TrunkKind_IsValid(value);
  }
  static constexpr TrunkKind TrunkKind_MIN =
    SIPTrunkInfo_TrunkKind_TrunkKind_MIN;
  static constexpr TrunkKind TrunkKind_MAX =
    SIPTrunkInfo_TrunkKind_TrunkKind_MAX;
  static constexpr int TrunkKind_ARRAYSIZE =
    SIPTrunkInfo_TrunkKind_TrunkKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrunkKind_descriptor() {
    return SIPTrunkInfo_TrunkKind_descriptor();
  }
  template<typename T>
  static inline const std::string& TrunkKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrunkKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrunkKind_Name.");
    return SIPTrunkInfo_TrunkKind_Name(enum_t_value);
  }
  static inline bool TrunkKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrunkKind* value) {
    return SIPTrunkInfo_TrunkKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInboundAddressesFieldNumber = 2,
    kInboundNumbersRegexFieldNumber = 5,
    kInboundNumbersFieldNumber = 10,
    kSipTrunkIdFieldNumber = 1,
    kOutboundAddressFieldNumber = 3,
    kOutboundNumberFieldNumber = 4,
    kInboundUsernameFieldNumber = 6,
    kInboundPasswordFieldNumber = 7,
    kOutboundUsernameFieldNumber = 8,
    kOutboundPasswordFieldNumber = 9,
    kNameFieldNumber = 11,
    kMetadataFieldNumber = 12,
    kTransportFieldNumber = 13,
    kKindFieldNumber = 14,
  };
  // repeated string inbound_addresses = 2;
  int inbound_addresses_size() const;
  private:
  int _internal_inbound_addresses_size() const;
  public:
  void clear_inbound_addresses();
  const std::string& inbound_addresses(int index) const;
  std::string* mutable_inbound_addresses(int index);
  void set_inbound_addresses(int index, const std::string& value);
  void set_inbound_addresses(int index, std::string&& value);
  void set_inbound_addresses(int index, const char* value);
  void set_inbound_addresses(int index, const char* value, size_t size);
  std::string* add_inbound_addresses();
  void add_inbound_addresses(const std::string& value);
  void add_inbound_addresses(std::string&& value);
  void add_inbound_addresses(const char* value);
  void add_inbound_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_addresses();
  private:
  const std::string& _internal_inbound_addresses(int index) const;
  std::string* _internal_add_inbound_addresses();
  public:

  // repeated string inbound_numbers_regex = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int inbound_numbers_regex_size() const;
  private:
  int _internal_inbound_numbers_regex_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_inbound_numbers_regex();
  PROTOBUF_DEPRECATED const std::string& inbound_numbers_regex(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_inbound_numbers_regex(int index);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, const char* value);
  PROTOBUF_DEPRECATED void set_inbound_numbers_regex(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_inbound_numbers_regex();
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(const std::string& value);
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(std::string&& value);
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(const char* value);
  PROTOBUF_DEPRECATED void add_inbound_numbers_regex(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_numbers_regex() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_numbers_regex();
  private:
  const std::string& _internal_inbound_numbers_regex(int index) const;
  std::string* _internal_add_inbound_numbers_regex();
  public:

  // repeated string inbound_numbers = 10;
  int inbound_numbers_size() const;
  private:
  int _internal_inbound_numbers_size() const;
  public:
  void clear_inbound_numbers();
  const std::string& inbound_numbers(int index) const;
  std::string* mutable_inbound_numbers(int index);
  void set_inbound_numbers(int index, const std::string& value);
  void set_inbound_numbers(int index, std::string&& value);
  void set_inbound_numbers(int index, const char* value);
  void set_inbound_numbers(int index, const char* value, size_t size);
  std::string* add_inbound_numbers();
  void add_inbound_numbers(const std::string& value);
  void add_inbound_numbers(std::string&& value);
  void add_inbound_numbers(const char* value);
  void add_inbound_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_numbers();
  private:
  const std::string& _internal_inbound_numbers(int index) const;
  std::string* _internal_add_inbound_numbers();
  public:

  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // string outbound_address = 3;
  void clear_outbound_address();
  const std::string& outbound_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_address();
  PROTOBUF_NODISCARD std::string* release_outbound_address();
  void set_allocated_outbound_address(std::string* outbound_address);
  private:
  const std::string& _internal_outbound_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_address(const std::string& value);
  std::string* _internal_mutable_outbound_address();
  public:

  // string outbound_number = 4;
  void clear_outbound_number();
  const std::string& outbound_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_number();
  PROTOBUF_NODISCARD std::string* release_outbound_number();
  void set_allocated_outbound_number(std::string* outbound_number);
  private:
  const std::string& _internal_outbound_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_number(const std::string& value);
  std::string* _internal_mutable_outbound_number();
  public:

  // string inbound_username = 6;
  void clear_inbound_username();
  const std::string& inbound_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inbound_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inbound_username();
  PROTOBUF_NODISCARD std::string* release_inbound_username();
  void set_allocated_inbound_username(std::string* inbound_username);
  private:
  const std::string& _internal_inbound_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inbound_username(const std::string& value);
  std::string* _internal_mutable_inbound_username();
  public:

  // string inbound_password = 7;
  void clear_inbound_password();
  const std::string& inbound_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inbound_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inbound_password();
  PROTOBUF_NODISCARD std::string* release_inbound_password();
  void set_allocated_inbound_password(std::string* inbound_password);
  private:
  const std::string& _internal_inbound_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inbound_password(const std::string& value);
  std::string* _internal_mutable_inbound_password();
  public:

  // string outbound_username = 8;
  void clear_outbound_username();
  const std::string& outbound_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_username();
  PROTOBUF_NODISCARD std::string* release_outbound_username();
  void set_allocated_outbound_username(std::string* outbound_username);
  private:
  const std::string& _internal_outbound_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_username(const std::string& value);
  std::string* _internal_mutable_outbound_username();
  public:

  // string outbound_password = 9;
  void clear_outbound_password();
  const std::string& outbound_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outbound_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outbound_password();
  PROTOBUF_NODISCARD std::string* release_outbound_password();
  void set_allocated_outbound_password(std::string* outbound_password);
  private:
  const std::string& _internal_outbound_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_password(const std::string& value);
  std::string* _internal_mutable_outbound_password();
  public:

  // string name = 11;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metadata = 12;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .livekit.SIPTransport transport = 13;
  void clear_transport();
  ::livekit::SIPTransport transport() const;
  void set_transport(::livekit::SIPTransport value);
  private:
  ::livekit::SIPTransport _internal_transport() const;
  void _internal_set_transport(::livekit::SIPTransport value);
  public:

  // .livekit.SIPTrunkInfo.TrunkKind kind = 14;
  void clear_kind();
  ::livekit::SIPTrunkInfo_TrunkKind kind() const;
  void set_kind(::livekit::SIPTrunkInfo_TrunkKind value);
  private:
  ::livekit::SIPTrunkInfo_TrunkKind _internal_kind() const;
  void _internal_set_kind(::livekit::SIPTrunkInfo_TrunkKind value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPTrunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_addresses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_numbers_regex_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inbound_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inbound_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outbound_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    int transport_;
    int kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class CreateSIPInboundTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.CreateSIPInboundTrunkRequest) */ {
 public:
  inline CreateSIPInboundTrunkRequest() : CreateSIPInboundTrunkRequest(nullptr) {}
  ~CreateSIPInboundTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSIPInboundTrunkRequest(const CreateSIPInboundTrunkRequest& from);
  CreateSIPInboundTrunkRequest(CreateSIPInboundTrunkRequest&& from) noexcept
    : CreateSIPInboundTrunkRequest() {
    *this = ::std::move(from);
  }

  inline CreateSIPInboundTrunkRequest& operator=(const CreateSIPInboundTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSIPInboundTrunkRequest& operator=(CreateSIPInboundTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSIPInboundTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSIPInboundTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSIPInboundTrunkRequest*>(
               &_CreateSIPInboundTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateSIPInboundTrunkRequest& a, CreateSIPInboundTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSIPInboundTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSIPInboundTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSIPInboundTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSIPInboundTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSIPInboundTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSIPInboundTrunkRequest& from) {
    CreateSIPInboundTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSIPInboundTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.CreateSIPInboundTrunkRequest";
  }
  protected:
  explicit CreateSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrunkFieldNumber = 1,
  };
  // .livekit.SIPInboundTrunkInfo trunk = 1;
  bool has_trunk() const;
  private:
  bool _internal_has_trunk() const;
  public:
  void clear_trunk();
  const ::livekit::SIPInboundTrunkInfo& trunk() const;
  PROTOBUF_NODISCARD ::livekit::SIPInboundTrunkInfo* release_trunk();
  ::livekit::SIPInboundTrunkInfo* mutable_trunk();
  void set_allocated_trunk(::livekit::SIPInboundTrunkInfo* trunk);
  private:
  const ::livekit::SIPInboundTrunkInfo& _internal_trunk() const;
  ::livekit::SIPInboundTrunkInfo* _internal_mutable_trunk();
  public:
  void unsafe_arena_set_allocated_trunk(
      ::livekit::SIPInboundTrunkInfo* trunk);
  ::livekit::SIPInboundTrunkInfo* unsafe_arena_release_trunk();

  // @@protoc_insertion_point(class_scope:livekit.CreateSIPInboundTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::livekit::SIPInboundTrunkInfo* trunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPInboundTrunkInfo_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPInboundTrunkInfo_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPInboundTrunkInfo_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPInboundTrunkInfo_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPInboundTrunkInfo_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPInboundTrunkInfo_HeadersEntry_DoNotUse& other);
  static const SIPInboundTrunkInfo_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPInboundTrunkInfo_HeadersEntry_DoNotUse*>(&_SIPInboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPInboundTrunkInfo.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPInboundTrunkInfo.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse& other);
  static const SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse*>(&_SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPInboundTrunkInfo.HeadersToAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPInboundTrunkInfo.HeadersToAttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse& other);
  static const SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse*>(&_SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPInboundTrunkInfo.AttributesToHeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPInboundTrunkInfo.AttributesToHeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPInboundTrunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPInboundTrunkInfo) */ {
 public:
  inline SIPInboundTrunkInfo() : SIPInboundTrunkInfo(nullptr) {}
  ~SIPInboundTrunkInfo() override;
  explicit PROTOBUF_CONSTEXPR SIPInboundTrunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPInboundTrunkInfo(const SIPInboundTrunkInfo& from);
  SIPInboundTrunkInfo(SIPInboundTrunkInfo&& from) noexcept
    : SIPInboundTrunkInfo() {
    *this = ::std::move(from);
  }

  inline SIPInboundTrunkInfo& operator=(const SIPInboundTrunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPInboundTrunkInfo& operator=(SIPInboundTrunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPInboundTrunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPInboundTrunkInfo* internal_default_instance() {
    return reinterpret_cast<const SIPInboundTrunkInfo*>(
               &_SIPInboundTrunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SIPInboundTrunkInfo& a, SIPInboundTrunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPInboundTrunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPInboundTrunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPInboundTrunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPInboundTrunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPInboundTrunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPInboundTrunkInfo& from) {
    SIPInboundTrunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPInboundTrunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPInboundTrunkInfo";
  }
  protected:
  explicit SIPInboundTrunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 4,
    kAllowedAddressesFieldNumber = 5,
    kAllowedNumbersFieldNumber = 6,
    kHeadersFieldNumber = 9,
    kHeadersToAttributesFieldNumber = 10,
    kAttributesToHeadersFieldNumber = 14,
    kSipTrunkIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kAuthUsernameFieldNumber = 7,
    kAuthPasswordFieldNumber = 8,
    kRingingTimeoutFieldNumber = 11,
    kMaxCallDurationFieldNumber = 12,
    kKrispEnabledFieldNumber = 13,
    kIncludeHeadersFieldNumber = 15,
    kMediaEncryptionFieldNumber = 16,
  };
  // repeated string numbers = 4;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  const std::string& numbers(int index) const;
  std::string* mutable_numbers(int index);
  void set_numbers(int index, const std::string& value);
  void set_numbers(int index, std::string&& value);
  void set_numbers(int index, const char* value);
  void set_numbers(int index, const char* value, size_t size);
  std::string* add_numbers();
  void add_numbers(const std::string& value);
  void add_numbers(std::string&& value);
  void add_numbers(const char* value);
  void add_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_numbers();
  private:
  const std::string& _internal_numbers(int index) const;
  std::string* _internal_add_numbers();
  public:

  // repeated string allowed_addresses = 5;
  int allowed_addresses_size() const;
  private:
  int _internal_allowed_addresses_size() const;
  public:
  void clear_allowed_addresses();
  const std::string& allowed_addresses(int index) const;
  std::string* mutable_allowed_addresses(int index);
  void set_allowed_addresses(int index, const std::string& value);
  void set_allowed_addresses(int index, std::string&& value);
  void set_allowed_addresses(int index, const char* value);
  void set_allowed_addresses(int index, const char* value, size_t size);
  std::string* add_allowed_addresses();
  void add_allowed_addresses(const std::string& value);
  void add_allowed_addresses(std::string&& value);
  void add_allowed_addresses(const char* value);
  void add_allowed_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_addresses();
  private:
  const std::string& _internal_allowed_addresses(int index) const;
  std::string* _internal_add_allowed_addresses();
  public:

  // repeated string allowed_numbers = 6;
  int allowed_numbers_size() const;
  private:
  int _internal_allowed_numbers_size() const;
  public:
  void clear_allowed_numbers();
  const std::string& allowed_numbers(int index) const;
  std::string* mutable_allowed_numbers(int index);
  void set_allowed_numbers(int index, const std::string& value);
  void set_allowed_numbers(int index, std::string&& value);
  void set_allowed_numbers(int index, const char* value);
  void set_allowed_numbers(int index, const char* value, size_t size);
  std::string* add_allowed_numbers();
  void add_allowed_numbers(const std::string& value);
  void add_allowed_numbers(std::string&& value);
  void add_allowed_numbers(const char* value);
  void add_allowed_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_numbers();
  private:
  const std::string& _internal_allowed_numbers(int index) const;
  std::string* _internal_add_allowed_numbers();
  public:

  // map<string, string> headers = 9;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> headers_to_attributes = 10;
  int headers_to_attributes_size() const;
  private:
  int _internal_headers_to_attributes_size() const;
  public:
  void clear_headers_to_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers_to_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers_to_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers_to_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers_to_attributes();

  // map<string, string> attributes_to_headers = 14;
  int attributes_to_headers_size() const;
  private:
  int _internal_attributes_to_headers_size() const;
  public:
  void clear_attributes_to_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes_to_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes_to_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes_to_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes_to_headers();

  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string auth_username = 7;
  void clear_auth_username();
  const std::string& auth_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_username();
  PROTOBUF_NODISCARD std::string* release_auth_username();
  void set_allocated_auth_username(std::string* auth_username);
  private:
  const std::string& _internal_auth_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_username(const std::string& value);
  std::string* _internal_mutable_auth_username();
  public:

  // string auth_password = 8;
  void clear_auth_password();
  const std::string& auth_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_password();
  PROTOBUF_NODISCARD std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // .google.protobuf.Duration ringing_timeout = 11;
  bool has_ringing_timeout() const;
  private:
  bool _internal_has_ringing_timeout() const;
  public:
  void clear_ringing_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ringing_timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ringing_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ringing_timeout();
  void set_allocated_ringing_timeout(::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ringing_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ringing_timeout();
  public:
  void unsafe_arena_set_allocated_ringing_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ringing_timeout();

  // .google.protobuf.Duration max_call_duration = 12;
  bool has_max_call_duration() const;
  private:
  bool _internal_has_max_call_duration() const;
  public:
  void clear_max_call_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_call_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_call_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_call_duration();
  void set_allocated_max_call_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_call_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_call_duration();
  public:
  void unsafe_arena_set_allocated_max_call_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_call_duration();

  // bool krisp_enabled = 13;
  void clear_krisp_enabled();
  bool krisp_enabled() const;
  void set_krisp_enabled(bool value);
  private:
  bool _internal_krisp_enabled() const;
  void _internal_set_krisp_enabled(bool value);
  public:

  // .livekit.SIPHeaderOptions include_headers = 15;
  void clear_include_headers();
  ::livekit::SIPHeaderOptions include_headers() const;
  void set_include_headers(::livekit::SIPHeaderOptions value);
  private:
  ::livekit::SIPHeaderOptions _internal_include_headers() const;
  void _internal_set_include_headers(::livekit::SIPHeaderOptions value);
  public:

  // .livekit.SIPMediaEncryption media_encryption = 16;
  void clear_media_encryption();
  ::livekit::SIPMediaEncryption media_encryption() const;
  void set_media_encryption(::livekit::SIPMediaEncryption value);
  private:
  ::livekit::SIPMediaEncryption _internal_media_encryption() const;
  void _internal_set_media_encryption(::livekit::SIPMediaEncryption value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPInboundTrunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> numbers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_addresses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPInboundTrunkInfo_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_to_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_to_headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration_;
    bool krisp_enabled_;
    int include_headers_;
    int media_encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class CreateSIPOutboundTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.CreateSIPOutboundTrunkRequest) */ {
 public:
  inline CreateSIPOutboundTrunkRequest() : CreateSIPOutboundTrunkRequest(nullptr) {}
  ~CreateSIPOutboundTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSIPOutboundTrunkRequest(const CreateSIPOutboundTrunkRequest& from);
  CreateSIPOutboundTrunkRequest(CreateSIPOutboundTrunkRequest&& from) noexcept
    : CreateSIPOutboundTrunkRequest() {
    *this = ::std::move(from);
  }

  inline CreateSIPOutboundTrunkRequest& operator=(const CreateSIPOutboundTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSIPOutboundTrunkRequest& operator=(CreateSIPOutboundTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSIPOutboundTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSIPOutboundTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSIPOutboundTrunkRequest*>(
               &_CreateSIPOutboundTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateSIPOutboundTrunkRequest& a, CreateSIPOutboundTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSIPOutboundTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSIPOutboundTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSIPOutboundTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSIPOutboundTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSIPOutboundTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSIPOutboundTrunkRequest& from) {
    CreateSIPOutboundTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSIPOutboundTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.CreateSIPOutboundTrunkRequest";
  }
  protected:
  explicit CreateSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrunkFieldNumber = 1,
  };
  // .livekit.SIPOutboundTrunkInfo trunk = 1;
  bool has_trunk() const;
  private:
  bool _internal_has_trunk() const;
  public:
  void clear_trunk();
  const ::livekit::SIPOutboundTrunkInfo& trunk() const;
  PROTOBUF_NODISCARD ::livekit::SIPOutboundTrunkInfo* release_trunk();
  ::livekit::SIPOutboundTrunkInfo* mutable_trunk();
  void set_allocated_trunk(::livekit::SIPOutboundTrunkInfo* trunk);
  private:
  const ::livekit::SIPOutboundTrunkInfo& _internal_trunk() const;
  ::livekit::SIPOutboundTrunkInfo* _internal_mutable_trunk();
  public:
  void unsafe_arena_set_allocated_trunk(
      ::livekit::SIPOutboundTrunkInfo* trunk);
  ::livekit::SIPOutboundTrunkInfo* unsafe_arena_release_trunk();

  // @@protoc_insertion_point(class_scope:livekit.CreateSIPOutboundTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::livekit::SIPOutboundTrunkInfo* trunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPOutboundTrunkInfo_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundTrunkInfo_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundTrunkInfo_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPOutboundTrunkInfo_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPOutboundTrunkInfo_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPOutboundTrunkInfo_HeadersEntry_DoNotUse& other);
  static const SIPOutboundTrunkInfo_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPOutboundTrunkInfo_HeadersEntry_DoNotUse*>(&_SIPOutboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundTrunkInfo.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundTrunkInfo.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse& other);
  static const SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse*>(&_SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundTrunkInfo.HeadersToAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundTrunkInfo.HeadersToAttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse& other);
  static const SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse*>(&_SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundTrunkInfo.AttributesToHeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundTrunkInfo.AttributesToHeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPOutboundTrunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPOutboundTrunkInfo) */ {
 public:
  inline SIPOutboundTrunkInfo() : SIPOutboundTrunkInfo(nullptr) {}
  ~SIPOutboundTrunkInfo() override;
  explicit PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPOutboundTrunkInfo(const SIPOutboundTrunkInfo& from);
  SIPOutboundTrunkInfo(SIPOutboundTrunkInfo&& from) noexcept
    : SIPOutboundTrunkInfo() {
    *this = ::std::move(from);
  }

  inline SIPOutboundTrunkInfo& operator=(const SIPOutboundTrunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPOutboundTrunkInfo& operator=(SIPOutboundTrunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPOutboundTrunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPOutboundTrunkInfo* internal_default_instance() {
    return reinterpret_cast<const SIPOutboundTrunkInfo*>(
               &_SIPOutboundTrunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SIPOutboundTrunkInfo& a, SIPOutboundTrunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPOutboundTrunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPOutboundTrunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPOutboundTrunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPOutboundTrunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPOutboundTrunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPOutboundTrunkInfo& from) {
    SIPOutboundTrunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPOutboundTrunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPOutboundTrunkInfo";
  }
  protected:
  explicit SIPOutboundTrunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 6,
    kHeadersFieldNumber = 9,
    kHeadersToAttributesFieldNumber = 10,
    kAttributesToHeadersFieldNumber = 11,
    kSipTrunkIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kAddressFieldNumber = 4,
    kAuthUsernameFieldNumber = 7,
    kAuthPasswordFieldNumber = 8,
    kTransportFieldNumber = 5,
    kIncludeHeadersFieldNumber = 12,
    kMediaEncryptionFieldNumber = 13,
  };
  // repeated string numbers = 6;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  const std::string& numbers(int index) const;
  std::string* mutable_numbers(int index);
  void set_numbers(int index, const std::string& value);
  void set_numbers(int index, std::string&& value);
  void set_numbers(int index, const char* value);
  void set_numbers(int index, const char* value, size_t size);
  std::string* add_numbers();
  void add_numbers(const std::string& value);
  void add_numbers(std::string&& value);
  void add_numbers(const char* value);
  void add_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_numbers();
  private:
  const std::string& _internal_numbers(int index) const;
  std::string* _internal_add_numbers();
  public:

  // map<string, string> headers = 9;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> headers_to_attributes = 10;
  int headers_to_attributes_size() const;
  private:
  int _internal_headers_to_attributes_size() const;
  public:
  void clear_headers_to_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers_to_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers_to_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers_to_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers_to_attributes();

  // map<string, string> attributes_to_headers = 11;
  int attributes_to_headers_size() const;
  private:
  int _internal_attributes_to_headers_size() const;
  public:
  void clear_attributes_to_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes_to_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes_to_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes_to_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes_to_headers();

  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string auth_username = 7;
  void clear_auth_username();
  const std::string& auth_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_username();
  PROTOBUF_NODISCARD std::string* release_auth_username();
  void set_allocated_auth_username(std::string* auth_username);
  private:
  const std::string& _internal_auth_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_username(const std::string& value);
  std::string* _internal_mutable_auth_username();
  public:

  // string auth_password = 8;
  void clear_auth_password();
  const std::string& auth_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_password();
  PROTOBUF_NODISCARD std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // .livekit.SIPTransport transport = 5;
  void clear_transport();
  ::livekit::SIPTransport transport() const;
  void set_transport(::livekit::SIPTransport value);
  private:
  ::livekit::SIPTransport _internal_transport() const;
  void _internal_set_transport(::livekit::SIPTransport value);
  public:

  // .livekit.SIPHeaderOptions include_headers = 12;
  void clear_include_headers();
  ::livekit::SIPHeaderOptions include_headers() const;
  void set_include_headers(::livekit::SIPHeaderOptions value);
  private:
  ::livekit::SIPHeaderOptions _internal_include_headers() const;
  void _internal_set_include_headers(::livekit::SIPHeaderOptions value);
  public:

  // .livekit.SIPMediaEncryption media_encryption = 13;
  void clear_media_encryption();
  ::livekit::SIPMediaEncryption media_encryption() const;
  void set_media_encryption(::livekit::SIPMediaEncryption value);
  private:
  ::livekit::SIPMediaEncryption _internal_media_encryption() const;
  void _internal_set_media_encryption(::livekit::SIPMediaEncryption value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPOutboundTrunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPOutboundTrunkInfo_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_to_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_to_headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
    int transport_;
    int include_headers_;
    int media_encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class GetSIPInboundTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.GetSIPInboundTrunkRequest) */ {
 public:
  inline GetSIPInboundTrunkRequest() : GetSIPInboundTrunkRequest(nullptr) {}
  ~GetSIPInboundTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSIPInboundTrunkRequest(const GetSIPInboundTrunkRequest& from);
  GetSIPInboundTrunkRequest(GetSIPInboundTrunkRequest&& from) noexcept
    : GetSIPInboundTrunkRequest() {
    *this = ::std::move(from);
  }

  inline GetSIPInboundTrunkRequest& operator=(const GetSIPInboundTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSIPInboundTrunkRequest& operator=(GetSIPInboundTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSIPInboundTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSIPInboundTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const GetSIPInboundTrunkRequest*>(
               &_GetSIPInboundTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetSIPInboundTrunkRequest& a, GetSIPInboundTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSIPInboundTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSIPInboundTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSIPInboundTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSIPInboundTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSIPInboundTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSIPInboundTrunkRequest& from) {
    GetSIPInboundTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSIPInboundTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.GetSIPInboundTrunkRequest";
  }
  protected:
  explicit GetSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSipTrunkIdFieldNumber = 1,
  };
  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // @@protoc_insertion_point(class_scope:livekit.GetSIPInboundTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class GetSIPInboundTrunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.GetSIPInboundTrunkResponse) */ {
 public:
  inline GetSIPInboundTrunkResponse() : GetSIPInboundTrunkResponse(nullptr) {}
  ~GetSIPInboundTrunkResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSIPInboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSIPInboundTrunkResponse(const GetSIPInboundTrunkResponse& from);
  GetSIPInboundTrunkResponse(GetSIPInboundTrunkResponse&& from) noexcept
    : GetSIPInboundTrunkResponse() {
    *this = ::std::move(from);
  }

  inline GetSIPInboundTrunkResponse& operator=(const GetSIPInboundTrunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSIPInboundTrunkResponse& operator=(GetSIPInboundTrunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSIPInboundTrunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSIPInboundTrunkResponse* internal_default_instance() {
    return reinterpret_cast<const GetSIPInboundTrunkResponse*>(
               &_GetSIPInboundTrunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetSIPInboundTrunkResponse& a, GetSIPInboundTrunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSIPInboundTrunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSIPInboundTrunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSIPInboundTrunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSIPInboundTrunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSIPInboundTrunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSIPInboundTrunkResponse& from) {
    GetSIPInboundTrunkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSIPInboundTrunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.GetSIPInboundTrunkResponse";
  }
  protected:
  explicit GetSIPInboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrunkFieldNumber = 1,
  };
  // .livekit.SIPInboundTrunkInfo trunk = 1;
  bool has_trunk() const;
  private:
  bool _internal_has_trunk() const;
  public:
  void clear_trunk();
  const ::livekit::SIPInboundTrunkInfo& trunk() const;
  PROTOBUF_NODISCARD ::livekit::SIPInboundTrunkInfo* release_trunk();
  ::livekit::SIPInboundTrunkInfo* mutable_trunk();
  void set_allocated_trunk(::livekit::SIPInboundTrunkInfo* trunk);
  private:
  const ::livekit::SIPInboundTrunkInfo& _internal_trunk() const;
  ::livekit::SIPInboundTrunkInfo* _internal_mutable_trunk();
  public:
  void unsafe_arena_set_allocated_trunk(
      ::livekit::SIPInboundTrunkInfo* trunk);
  ::livekit::SIPInboundTrunkInfo* unsafe_arena_release_trunk();

  // @@protoc_insertion_point(class_scope:livekit.GetSIPInboundTrunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::livekit::SIPInboundTrunkInfo* trunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class GetSIPOutboundTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.GetSIPOutboundTrunkRequest) */ {
 public:
  inline GetSIPOutboundTrunkRequest() : GetSIPOutboundTrunkRequest(nullptr) {}
  ~GetSIPOutboundTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSIPOutboundTrunkRequest(const GetSIPOutboundTrunkRequest& from);
  GetSIPOutboundTrunkRequest(GetSIPOutboundTrunkRequest&& from) noexcept
    : GetSIPOutboundTrunkRequest() {
    *this = ::std::move(from);
  }

  inline GetSIPOutboundTrunkRequest& operator=(const GetSIPOutboundTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSIPOutboundTrunkRequest& operator=(GetSIPOutboundTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSIPOutboundTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSIPOutboundTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const GetSIPOutboundTrunkRequest*>(
               &_GetSIPOutboundTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetSIPOutboundTrunkRequest& a, GetSIPOutboundTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSIPOutboundTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSIPOutboundTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSIPOutboundTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSIPOutboundTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSIPOutboundTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSIPOutboundTrunkRequest& from) {
    GetSIPOutboundTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSIPOutboundTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.GetSIPOutboundTrunkRequest";
  }
  protected:
  explicit GetSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSipTrunkIdFieldNumber = 1,
  };
  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // @@protoc_insertion_point(class_scope:livekit.GetSIPOutboundTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class GetSIPOutboundTrunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.GetSIPOutboundTrunkResponse) */ {
 public:
  inline GetSIPOutboundTrunkResponse() : GetSIPOutboundTrunkResponse(nullptr) {}
  ~GetSIPOutboundTrunkResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSIPOutboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSIPOutboundTrunkResponse(const GetSIPOutboundTrunkResponse& from);
  GetSIPOutboundTrunkResponse(GetSIPOutboundTrunkResponse&& from) noexcept
    : GetSIPOutboundTrunkResponse() {
    *this = ::std::move(from);
  }

  inline GetSIPOutboundTrunkResponse& operator=(const GetSIPOutboundTrunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSIPOutboundTrunkResponse& operator=(GetSIPOutboundTrunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSIPOutboundTrunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSIPOutboundTrunkResponse* internal_default_instance() {
    return reinterpret_cast<const GetSIPOutboundTrunkResponse*>(
               &_GetSIPOutboundTrunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetSIPOutboundTrunkResponse& a, GetSIPOutboundTrunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSIPOutboundTrunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSIPOutboundTrunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSIPOutboundTrunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSIPOutboundTrunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSIPOutboundTrunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSIPOutboundTrunkResponse& from) {
    GetSIPOutboundTrunkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSIPOutboundTrunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.GetSIPOutboundTrunkResponse";
  }
  protected:
  explicit GetSIPOutboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrunkFieldNumber = 1,
  };
  // .livekit.SIPOutboundTrunkInfo trunk = 1;
  bool has_trunk() const;
  private:
  bool _internal_has_trunk() const;
  public:
  void clear_trunk();
  const ::livekit::SIPOutboundTrunkInfo& trunk() const;
  PROTOBUF_NODISCARD ::livekit::SIPOutboundTrunkInfo* release_trunk();
  ::livekit::SIPOutboundTrunkInfo* mutable_trunk();
  void set_allocated_trunk(::livekit::SIPOutboundTrunkInfo* trunk);
  private:
  const ::livekit::SIPOutboundTrunkInfo& _internal_trunk() const;
  ::livekit::SIPOutboundTrunkInfo* _internal_mutable_trunk();
  public:
  void unsafe_arena_set_allocated_trunk(
      ::livekit::SIPOutboundTrunkInfo* trunk);
  ::livekit::SIPOutboundTrunkInfo* unsafe_arena_release_trunk();

  // @@protoc_insertion_point(class_scope:livekit.GetSIPOutboundTrunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::livekit::SIPOutboundTrunkInfo* trunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPTrunkRequest) */ {
 public:
  inline ListSIPTrunkRequest() : ListSIPTrunkRequest(nullptr) {}
  ~ListSIPTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPTrunkRequest(const ListSIPTrunkRequest& from);
  ListSIPTrunkRequest(ListSIPTrunkRequest&& from) noexcept
    : ListSIPTrunkRequest() {
    *this = ::std::move(from);
  }

  inline ListSIPTrunkRequest& operator=(const ListSIPTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPTrunkRequest& operator=(ListSIPTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const ListSIPTrunkRequest*>(
               &_ListSIPTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListSIPTrunkRequest& a, ListSIPTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPTrunkRequest& from) {
    ListSIPTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPTrunkRequest";
  }
  protected:
  explicit ListSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
  };
  // .livekit.Pagination page = 1;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const ::livekit::Pagination& page() const;
  PROTOBUF_NODISCARD ::livekit::Pagination* release_page();
  ::livekit::Pagination* mutable_page();
  void set_allocated_page(::livekit::Pagination* page);
  private:
  const ::livekit::Pagination& _internal_page() const;
  ::livekit::Pagination* _internal_mutable_page();
  public:
  void unsafe_arena_set_allocated_page(
      ::livekit::Pagination* page);
  ::livekit::Pagination* unsafe_arena_release_page();

  // @@protoc_insertion_point(class_scope:livekit.ListSIPTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::livekit::Pagination* page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPTrunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPTrunkResponse) */ {
 public:
  inline ListSIPTrunkResponse() : ListSIPTrunkResponse(nullptr) {}
  ~ListSIPTrunkResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSIPTrunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPTrunkResponse(const ListSIPTrunkResponse& from);
  ListSIPTrunkResponse(ListSIPTrunkResponse&& from) noexcept
    : ListSIPTrunkResponse() {
    *this = ::std::move(from);
  }

  inline ListSIPTrunkResponse& operator=(const ListSIPTrunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPTrunkResponse& operator=(ListSIPTrunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPTrunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPTrunkResponse* internal_default_instance() {
    return reinterpret_cast<const ListSIPTrunkResponse*>(
               &_ListSIPTrunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListSIPTrunkResponse& a, ListSIPTrunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPTrunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPTrunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPTrunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPTrunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPTrunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPTrunkResponse& from) {
    ListSIPTrunkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPTrunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPTrunkResponse";
  }
  protected:
  explicit ListSIPTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .livekit.SIPTrunkInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::livekit::SIPTrunkInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPTrunkInfo >*
      mutable_items();
  private:
  const ::livekit::SIPTrunkInfo& _internal_items(int index) const;
  ::livekit::SIPTrunkInfo* _internal_add_items();
  public:
  const ::livekit::SIPTrunkInfo& items(int index) const;
  ::livekit::SIPTrunkInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPTrunkInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:livekit.ListSIPTrunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPTrunkInfo > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPInboundTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPInboundTrunkRequest) */ {
 public:
  inline ListSIPInboundTrunkRequest() : ListSIPInboundTrunkRequest(nullptr) {}
  ~ListSIPInboundTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPInboundTrunkRequest(const ListSIPInboundTrunkRequest& from);
  ListSIPInboundTrunkRequest(ListSIPInboundTrunkRequest&& from) noexcept
    : ListSIPInboundTrunkRequest() {
    *this = ::std::move(from);
  }

  inline ListSIPInboundTrunkRequest& operator=(const ListSIPInboundTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPInboundTrunkRequest& operator=(ListSIPInboundTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPInboundTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPInboundTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const ListSIPInboundTrunkRequest*>(
               &_ListSIPInboundTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListSIPInboundTrunkRequest& a, ListSIPInboundTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPInboundTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPInboundTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPInboundTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPInboundTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPInboundTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPInboundTrunkRequest& from) {
    ListSIPInboundTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPInboundTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPInboundTrunkRequest";
  }
  protected:
  explicit ListSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrunkIdsFieldNumber = 1,
    kNumbersFieldNumber = 2,
    kPageFieldNumber = 3,
  };
  // repeated string trunk_ids = 1;
  int trunk_ids_size() const;
  private:
  int _internal_trunk_ids_size() const;
  public:
  void clear_trunk_ids();
  const std::string& trunk_ids(int index) const;
  std::string* mutable_trunk_ids(int index);
  void set_trunk_ids(int index, const std::string& value);
  void set_trunk_ids(int index, std::string&& value);
  void set_trunk_ids(int index, const char* value);
  void set_trunk_ids(int index, const char* value, size_t size);
  std::string* add_trunk_ids();
  void add_trunk_ids(const std::string& value);
  void add_trunk_ids(std::string&& value);
  void add_trunk_ids(const char* value);
  void add_trunk_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& trunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_trunk_ids();
  private:
  const std::string& _internal_trunk_ids(int index) const;
  std::string* _internal_add_trunk_ids();
  public:

  // repeated string numbers = 2;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  const std::string& numbers(int index) const;
  std::string* mutable_numbers(int index);
  void set_numbers(int index, const std::string& value);
  void set_numbers(int index, std::string&& value);
  void set_numbers(int index, const char* value);
  void set_numbers(int index, const char* value, size_t size);
  std::string* add_numbers();
  void add_numbers(const std::string& value);
  void add_numbers(std::string&& value);
  void add_numbers(const char* value);
  void add_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_numbers();
  private:
  const std::string& _internal_numbers(int index) const;
  std::string* _internal_add_numbers();
  public:

  // .livekit.Pagination page = 3;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const ::livekit::Pagination& page() const;
  PROTOBUF_NODISCARD ::livekit::Pagination* release_page();
  ::livekit::Pagination* mutable_page();
  void set_allocated_page(::livekit::Pagination* page);
  private:
  const ::livekit::Pagination& _internal_page() const;
  ::livekit::Pagination* _internal_mutable_page();
  public:
  void unsafe_arena_set_allocated_page(
      ::livekit::Pagination* page);
  ::livekit::Pagination* unsafe_arena_release_page();

  // @@protoc_insertion_point(class_scope:livekit.ListSIPInboundTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trunk_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> numbers_;
    ::livekit::Pagination* page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPInboundTrunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPInboundTrunkResponse) */ {
 public:
  inline ListSIPInboundTrunkResponse() : ListSIPInboundTrunkResponse(nullptr) {}
  ~ListSIPInboundTrunkResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSIPInboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPInboundTrunkResponse(const ListSIPInboundTrunkResponse& from);
  ListSIPInboundTrunkResponse(ListSIPInboundTrunkResponse&& from) noexcept
    : ListSIPInboundTrunkResponse() {
    *this = ::std::move(from);
  }

  inline ListSIPInboundTrunkResponse& operator=(const ListSIPInboundTrunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPInboundTrunkResponse& operator=(ListSIPInboundTrunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPInboundTrunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPInboundTrunkResponse* internal_default_instance() {
    return reinterpret_cast<const ListSIPInboundTrunkResponse*>(
               &_ListSIPInboundTrunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListSIPInboundTrunkResponse& a, ListSIPInboundTrunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPInboundTrunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPInboundTrunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPInboundTrunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPInboundTrunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPInboundTrunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPInboundTrunkResponse& from) {
    ListSIPInboundTrunkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPInboundTrunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPInboundTrunkResponse";
  }
  protected:
  explicit ListSIPInboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .livekit.SIPInboundTrunkInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::livekit::SIPInboundTrunkInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPInboundTrunkInfo >*
      mutable_items();
  private:
  const ::livekit::SIPInboundTrunkInfo& _internal_items(int index) const;
  ::livekit::SIPInboundTrunkInfo* _internal_add_items();
  public:
  const ::livekit::SIPInboundTrunkInfo& items(int index) const;
  ::livekit::SIPInboundTrunkInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPInboundTrunkInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:livekit.ListSIPInboundTrunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPInboundTrunkInfo > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPOutboundTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPOutboundTrunkRequest) */ {
 public:
  inline ListSIPOutboundTrunkRequest() : ListSIPOutboundTrunkRequest(nullptr) {}
  ~ListSIPOutboundTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPOutboundTrunkRequest(const ListSIPOutboundTrunkRequest& from);
  ListSIPOutboundTrunkRequest(ListSIPOutboundTrunkRequest&& from) noexcept
    : ListSIPOutboundTrunkRequest() {
    *this = ::std::move(from);
  }

  inline ListSIPOutboundTrunkRequest& operator=(const ListSIPOutboundTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPOutboundTrunkRequest& operator=(ListSIPOutboundTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPOutboundTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPOutboundTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const ListSIPOutboundTrunkRequest*>(
               &_ListSIPOutboundTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListSIPOutboundTrunkRequest& a, ListSIPOutboundTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPOutboundTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPOutboundTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPOutboundTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPOutboundTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPOutboundTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPOutboundTrunkRequest& from) {
    ListSIPOutboundTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPOutboundTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPOutboundTrunkRequest";
  }
  protected:
  explicit ListSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrunkIdsFieldNumber = 1,
    kNumbersFieldNumber = 2,
    kPageFieldNumber = 3,
  };
  // repeated string trunk_ids = 1;
  int trunk_ids_size() const;
  private:
  int _internal_trunk_ids_size() const;
  public:
  void clear_trunk_ids();
  const std::string& trunk_ids(int index) const;
  std::string* mutable_trunk_ids(int index);
  void set_trunk_ids(int index, const std::string& value);
  void set_trunk_ids(int index, std::string&& value);
  void set_trunk_ids(int index, const char* value);
  void set_trunk_ids(int index, const char* value, size_t size);
  std::string* add_trunk_ids();
  void add_trunk_ids(const std::string& value);
  void add_trunk_ids(std::string&& value);
  void add_trunk_ids(const char* value);
  void add_trunk_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& trunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_trunk_ids();
  private:
  const std::string& _internal_trunk_ids(int index) const;
  std::string* _internal_add_trunk_ids();
  public:

  // repeated string numbers = 2;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  const std::string& numbers(int index) const;
  std::string* mutable_numbers(int index);
  void set_numbers(int index, const std::string& value);
  void set_numbers(int index, std::string&& value);
  void set_numbers(int index, const char* value);
  void set_numbers(int index, const char* value, size_t size);
  std::string* add_numbers();
  void add_numbers(const std::string& value);
  void add_numbers(std::string&& value);
  void add_numbers(const char* value);
  void add_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_numbers();
  private:
  const std::string& _internal_numbers(int index) const;
  std::string* _internal_add_numbers();
  public:

  // .livekit.Pagination page = 3;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const ::livekit::Pagination& page() const;
  PROTOBUF_NODISCARD ::livekit::Pagination* release_page();
  ::livekit::Pagination* mutable_page();
  void set_allocated_page(::livekit::Pagination* page);
  private:
  const ::livekit::Pagination& _internal_page() const;
  ::livekit::Pagination* _internal_mutable_page();
  public:
  void unsafe_arena_set_allocated_page(
      ::livekit::Pagination* page);
  ::livekit::Pagination* unsafe_arena_release_page();

  // @@protoc_insertion_point(class_scope:livekit.ListSIPOutboundTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trunk_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> numbers_;
    ::livekit::Pagination* page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPOutboundTrunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPOutboundTrunkResponse) */ {
 public:
  inline ListSIPOutboundTrunkResponse() : ListSIPOutboundTrunkResponse(nullptr) {}
  ~ListSIPOutboundTrunkResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSIPOutboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPOutboundTrunkResponse(const ListSIPOutboundTrunkResponse& from);
  ListSIPOutboundTrunkResponse(ListSIPOutboundTrunkResponse&& from) noexcept
    : ListSIPOutboundTrunkResponse() {
    *this = ::std::move(from);
  }

  inline ListSIPOutboundTrunkResponse& operator=(const ListSIPOutboundTrunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPOutboundTrunkResponse& operator=(ListSIPOutboundTrunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPOutboundTrunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPOutboundTrunkResponse* internal_default_instance() {
    return reinterpret_cast<const ListSIPOutboundTrunkResponse*>(
               &_ListSIPOutboundTrunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListSIPOutboundTrunkResponse& a, ListSIPOutboundTrunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPOutboundTrunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPOutboundTrunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPOutboundTrunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPOutboundTrunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPOutboundTrunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPOutboundTrunkResponse& from) {
    ListSIPOutboundTrunkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPOutboundTrunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPOutboundTrunkResponse";
  }
  protected:
  explicit ListSIPOutboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .livekit.SIPOutboundTrunkInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::livekit::SIPOutboundTrunkInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPOutboundTrunkInfo >*
      mutable_items();
  private:
  const ::livekit::SIPOutboundTrunkInfo& _internal_items(int index) const;
  ::livekit::SIPOutboundTrunkInfo* _internal_add_items();
  public:
  const ::livekit::SIPOutboundTrunkInfo& items(int index) const;
  ::livekit::SIPOutboundTrunkInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPOutboundTrunkInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:livekit.ListSIPOutboundTrunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPOutboundTrunkInfo > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class DeleteSIPTrunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.DeleteSIPTrunkRequest) */ {
 public:
  inline DeleteSIPTrunkRequest() : DeleteSIPTrunkRequest(nullptr) {}
  ~DeleteSIPTrunkRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSIPTrunkRequest(const DeleteSIPTrunkRequest& from);
  DeleteSIPTrunkRequest(DeleteSIPTrunkRequest&& from) noexcept
    : DeleteSIPTrunkRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSIPTrunkRequest& operator=(const DeleteSIPTrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSIPTrunkRequest& operator=(DeleteSIPTrunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSIPTrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSIPTrunkRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSIPTrunkRequest*>(
               &_DeleteSIPTrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeleteSIPTrunkRequest& a, DeleteSIPTrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSIPTrunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSIPTrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSIPTrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSIPTrunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSIPTrunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSIPTrunkRequest& from) {
    DeleteSIPTrunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSIPTrunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.DeleteSIPTrunkRequest";
  }
  protected:
  explicit DeleteSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSipTrunkIdFieldNumber = 1,
  };
  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // @@protoc_insertion_point(class_scope:livekit.DeleteSIPTrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPDispatchRuleDirect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPDispatchRuleDirect) */ {
 public:
  inline SIPDispatchRuleDirect() : SIPDispatchRuleDirect(nullptr) {}
  ~SIPDispatchRuleDirect() override;
  explicit PROTOBUF_CONSTEXPR SIPDispatchRuleDirect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPDispatchRuleDirect(const SIPDispatchRuleDirect& from);
  SIPDispatchRuleDirect(SIPDispatchRuleDirect&& from) noexcept
    : SIPDispatchRuleDirect() {
    *this = ::std::move(from);
  }

  inline SIPDispatchRuleDirect& operator=(const SIPDispatchRuleDirect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPDispatchRuleDirect& operator=(SIPDispatchRuleDirect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPDispatchRuleDirect& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPDispatchRuleDirect* internal_default_instance() {
    return reinterpret_cast<const SIPDispatchRuleDirect*>(
               &_SIPDispatchRuleDirect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SIPDispatchRuleDirect& a, SIPDispatchRuleDirect& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPDispatchRuleDirect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPDispatchRuleDirect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPDispatchRuleDirect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPDispatchRuleDirect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPDispatchRuleDirect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPDispatchRuleDirect& from) {
    SIPDispatchRuleDirect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPDispatchRuleDirect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPDispatchRuleDirect";
  }
  protected:
  explicit SIPDispatchRuleDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kPinFieldNumber = 2,
  };
  // string room_name = 1;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string pin = 2;
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPDispatchRuleDirect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPDispatchRuleIndividual final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPDispatchRuleIndividual) */ {
 public:
  inline SIPDispatchRuleIndividual() : SIPDispatchRuleIndividual(nullptr) {}
  ~SIPDispatchRuleIndividual() override;
  explicit PROTOBUF_CONSTEXPR SIPDispatchRuleIndividual(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPDispatchRuleIndividual(const SIPDispatchRuleIndividual& from);
  SIPDispatchRuleIndividual(SIPDispatchRuleIndividual&& from) noexcept
    : SIPDispatchRuleIndividual() {
    *this = ::std::move(from);
  }

  inline SIPDispatchRuleIndividual& operator=(const SIPDispatchRuleIndividual& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPDispatchRuleIndividual& operator=(SIPDispatchRuleIndividual&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPDispatchRuleIndividual& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPDispatchRuleIndividual* internal_default_instance() {
    return reinterpret_cast<const SIPDispatchRuleIndividual*>(
               &_SIPDispatchRuleIndividual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SIPDispatchRuleIndividual& a, SIPDispatchRuleIndividual& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPDispatchRuleIndividual* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPDispatchRuleIndividual* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPDispatchRuleIndividual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPDispatchRuleIndividual>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPDispatchRuleIndividual& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPDispatchRuleIndividual& from) {
    SIPDispatchRuleIndividual::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPDispatchRuleIndividual* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPDispatchRuleIndividual";
  }
  protected:
  explicit SIPDispatchRuleIndividual(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomPrefixFieldNumber = 1,
    kPinFieldNumber = 2,
  };
  // string room_prefix = 1;
  void clear_room_prefix();
  const std::string& room_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_prefix();
  PROTOBUF_NODISCARD std::string* release_room_prefix();
  void set_allocated_room_prefix(std::string* room_prefix);
  private:
  const std::string& _internal_room_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_prefix(const std::string& value);
  std::string* _internal_mutable_room_prefix();
  public:

  // string pin = 2;
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPDispatchRuleIndividual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPDispatchRuleCallee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPDispatchRuleCallee) */ {
 public:
  inline SIPDispatchRuleCallee() : SIPDispatchRuleCallee(nullptr) {}
  ~SIPDispatchRuleCallee() override;
  explicit PROTOBUF_CONSTEXPR SIPDispatchRuleCallee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPDispatchRuleCallee(const SIPDispatchRuleCallee& from);
  SIPDispatchRuleCallee(SIPDispatchRuleCallee&& from) noexcept
    : SIPDispatchRuleCallee() {
    *this = ::std::move(from);
  }

  inline SIPDispatchRuleCallee& operator=(const SIPDispatchRuleCallee& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPDispatchRuleCallee& operator=(SIPDispatchRuleCallee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPDispatchRuleCallee& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPDispatchRuleCallee* internal_default_instance() {
    return reinterpret_cast<const SIPDispatchRuleCallee*>(
               &_SIPDispatchRuleCallee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SIPDispatchRuleCallee& a, SIPDispatchRuleCallee& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPDispatchRuleCallee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPDispatchRuleCallee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPDispatchRuleCallee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPDispatchRuleCallee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPDispatchRuleCallee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPDispatchRuleCallee& from) {
    SIPDispatchRuleCallee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPDispatchRuleCallee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPDispatchRuleCallee";
  }
  protected:
  explicit SIPDispatchRuleCallee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomPrefixFieldNumber = 1,
    kPinFieldNumber = 2,
    kRandomizeFieldNumber = 3,
  };
  // string room_prefix = 1;
  void clear_room_prefix();
  const std::string& room_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_prefix();
  PROTOBUF_NODISCARD std::string* release_room_prefix();
  void set_allocated_room_prefix(std::string* room_prefix);
  private:
  const std::string& _internal_room_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_prefix(const std::string& value);
  std::string* _internal_mutable_room_prefix();
  public:

  // string pin = 2;
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // bool randomize = 3;
  void clear_randomize();
  bool randomize() const;
  void set_randomize(bool value);
  private:
  bool _internal_randomize() const;
  void _internal_set_randomize(bool value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPDispatchRuleCallee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
    bool randomize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPDispatchRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPDispatchRule) */ {
 public:
  inline SIPDispatchRule() : SIPDispatchRule(nullptr) {}
  ~SIPDispatchRule() override;
  explicit PROTOBUF_CONSTEXPR SIPDispatchRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPDispatchRule(const SIPDispatchRule& from);
  SIPDispatchRule(SIPDispatchRule&& from) noexcept
    : SIPDispatchRule() {
    *this = ::std::move(from);
  }

  inline SIPDispatchRule& operator=(const SIPDispatchRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPDispatchRule& operator=(SIPDispatchRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPDispatchRule& default_instance() {
    return *internal_default_instance();
  }
  enum RuleCase {
    kDispatchRuleDirect = 1,
    kDispatchRuleIndividual = 2,
    kDispatchRuleCallee = 3,
    RULE_NOT_SET = 0,
  };

  static inline const SIPDispatchRule* internal_default_instance() {
    return reinterpret_cast<const SIPDispatchRule*>(
               &_SIPDispatchRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SIPDispatchRule& a, SIPDispatchRule& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPDispatchRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPDispatchRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPDispatchRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPDispatchRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPDispatchRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPDispatchRule& from) {
    SIPDispatchRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPDispatchRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPDispatchRule";
  }
  protected:
  explicit SIPDispatchRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDispatchRuleDirectFieldNumber = 1,
    kDispatchRuleIndividualFieldNumber = 2,
    kDispatchRuleCalleeFieldNumber = 3,
  };
  // .livekit.SIPDispatchRuleDirect dispatch_rule_direct = 1;
  bool has_dispatch_rule_direct() const;
  private:
  bool _internal_has_dispatch_rule_direct() const;
  public:
  void clear_dispatch_rule_direct();
  const ::livekit::SIPDispatchRuleDirect& dispatch_rule_direct() const;
  PROTOBUF_NODISCARD ::livekit::SIPDispatchRuleDirect* release_dispatch_rule_direct();
  ::livekit::SIPDispatchRuleDirect* mutable_dispatch_rule_direct();
  void set_allocated_dispatch_rule_direct(::livekit::SIPDispatchRuleDirect* dispatch_rule_direct);
  private:
  const ::livekit::SIPDispatchRuleDirect& _internal_dispatch_rule_direct() const;
  ::livekit::SIPDispatchRuleDirect* _internal_mutable_dispatch_rule_direct();
  public:
  void unsafe_arena_set_allocated_dispatch_rule_direct(
      ::livekit::SIPDispatchRuleDirect* dispatch_rule_direct);
  ::livekit::SIPDispatchRuleDirect* unsafe_arena_release_dispatch_rule_direct();

  // .livekit.SIPDispatchRuleIndividual dispatch_rule_individual = 2;
  bool has_dispatch_rule_individual() const;
  private:
  bool _internal_has_dispatch_rule_individual() const;
  public:
  void clear_dispatch_rule_individual();
  const ::livekit::SIPDispatchRuleIndividual& dispatch_rule_individual() const;
  PROTOBUF_NODISCARD ::livekit::SIPDispatchRuleIndividual* release_dispatch_rule_individual();
  ::livekit::SIPDispatchRuleIndividual* mutable_dispatch_rule_individual();
  void set_allocated_dispatch_rule_individual(::livekit::SIPDispatchRuleIndividual* dispatch_rule_individual);
  private:
  const ::livekit::SIPDispatchRuleIndividual& _internal_dispatch_rule_individual() const;
  ::livekit::SIPDispatchRuleIndividual* _internal_mutable_dispatch_rule_individual();
  public:
  void unsafe_arena_set_allocated_dispatch_rule_individual(
      ::livekit::SIPDispatchRuleIndividual* dispatch_rule_individual);
  ::livekit::SIPDispatchRuleIndividual* unsafe_arena_release_dispatch_rule_individual();

  // .livekit.SIPDispatchRuleCallee dispatch_rule_callee = 3;
  bool has_dispatch_rule_callee() const;
  private:
  bool _internal_has_dispatch_rule_callee() const;
  public:
  void clear_dispatch_rule_callee();
  const ::livekit::SIPDispatchRuleCallee& dispatch_rule_callee() const;
  PROTOBUF_NODISCARD ::livekit::SIPDispatchRuleCallee* release_dispatch_rule_callee();
  ::livekit::SIPDispatchRuleCallee* mutable_dispatch_rule_callee();
  void set_allocated_dispatch_rule_callee(::livekit::SIPDispatchRuleCallee* dispatch_rule_callee);
  private:
  const ::livekit::SIPDispatchRuleCallee& _internal_dispatch_rule_callee() const;
  ::livekit::SIPDispatchRuleCallee* _internal_mutable_dispatch_rule_callee();
  public:
  void unsafe_arena_set_allocated_dispatch_rule_callee(
      ::livekit::SIPDispatchRuleCallee* dispatch_rule_callee);
  ::livekit::SIPDispatchRuleCallee* unsafe_arena_release_dispatch_rule_callee();

  void clear_rule();
  RuleCase rule_case() const;
  // @@protoc_insertion_point(class_scope:livekit.SIPDispatchRule)
 private:
  class _Internal;
  void set_has_dispatch_rule_direct();
  void set_has_dispatch_rule_individual();
  void set_has_dispatch_rule_callee();

  inline bool has_rule() const;
  inline void clear_has_rule();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RuleUnion {
      constexpr RuleUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::livekit::SIPDispatchRuleDirect* dispatch_rule_direct_;
      ::livekit::SIPDispatchRuleIndividual* dispatch_rule_individual_;
      ::livekit::SIPDispatchRuleCallee* dispatch_rule_callee_;
    } rule_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse& other);
  static const CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse*>(&_CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.CreateSIPDispatchRuleRequest.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.CreateSIPDispatchRuleRequest.AttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class CreateSIPDispatchRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.CreateSIPDispatchRuleRequest) */ {
 public:
  inline CreateSIPDispatchRuleRequest() : CreateSIPDispatchRuleRequest(nullptr) {}
  ~CreateSIPDispatchRuleRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSIPDispatchRuleRequest(const CreateSIPDispatchRuleRequest& from);
  CreateSIPDispatchRuleRequest(CreateSIPDispatchRuleRequest&& from) noexcept
    : CreateSIPDispatchRuleRequest() {
    *this = ::std::move(from);
  }

  inline CreateSIPDispatchRuleRequest& operator=(const CreateSIPDispatchRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSIPDispatchRuleRequest& operator=(CreateSIPDispatchRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSIPDispatchRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSIPDispatchRuleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSIPDispatchRuleRequest*>(
               &_CreateSIPDispatchRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CreateSIPDispatchRuleRequest& a, CreateSIPDispatchRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSIPDispatchRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSIPDispatchRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSIPDispatchRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSIPDispatchRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSIPDispatchRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSIPDispatchRuleRequest& from) {
    CreateSIPDispatchRuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSIPDispatchRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.CreateSIPDispatchRuleRequest";
  }
  protected:
  explicit CreateSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTrunkIdsFieldNumber = 2,
    kInboundNumbersFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kNameFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kRoomPresetFieldNumber = 8,
    kRuleFieldNumber = 1,
    kRoomConfigFieldNumber = 9,
    kHidePhoneNumberFieldNumber = 3,
  };
  // repeated string trunk_ids = 2;
  int trunk_ids_size() const;
  private:
  int _internal_trunk_ids_size() const;
  public:
  void clear_trunk_ids();
  const std::string& trunk_ids(int index) const;
  std::string* mutable_trunk_ids(int index);
  void set_trunk_ids(int index, const std::string& value);
  void set_trunk_ids(int index, std::string&& value);
  void set_trunk_ids(int index, const char* value);
  void set_trunk_ids(int index, const char* value, size_t size);
  std::string* add_trunk_ids();
  void add_trunk_ids(const std::string& value);
  void add_trunk_ids(std::string&& value);
  void add_trunk_ids(const char* value);
  void add_trunk_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& trunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_trunk_ids();
  private:
  const std::string& _internal_trunk_ids(int index) const;
  std::string* _internal_add_trunk_ids();
  public:

  // repeated string inbound_numbers = 6;
  int inbound_numbers_size() const;
  private:
  int _internal_inbound_numbers_size() const;
  public:
  void clear_inbound_numbers();
  const std::string& inbound_numbers(int index) const;
  std::string* mutable_inbound_numbers(int index);
  void set_inbound_numbers(int index, const std::string& value);
  void set_inbound_numbers(int index, std::string&& value);
  void set_inbound_numbers(int index, const char* value);
  void set_inbound_numbers(int index, const char* value, size_t size);
  std::string* add_inbound_numbers();
  void add_inbound_numbers(const std::string& value);
  void add_inbound_numbers(std::string&& value);
  void add_inbound_numbers(const char* value);
  void add_inbound_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_numbers();
  private:
  const std::string& _internal_inbound_numbers(int index) const;
  std::string* _internal_add_inbound_numbers();
  public:

  // map<string, string> attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metadata = 5;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string room_preset = 8;
  void clear_room_preset();
  const std::string& room_preset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_preset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_preset();
  PROTOBUF_NODISCARD std::string* release_room_preset();
  void set_allocated_room_preset(std::string* room_preset);
  private:
  const std::string& _internal_room_preset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_preset(const std::string& value);
  std::string* _internal_mutable_room_preset();
  public:

  // .livekit.SIPDispatchRule rule = 1;
  bool has_rule() const;
  private:
  bool _internal_has_rule() const;
  public:
  void clear_rule();
  const ::livekit::SIPDispatchRule& rule() const;
  PROTOBUF_NODISCARD ::livekit::SIPDispatchRule* release_rule();
  ::livekit::SIPDispatchRule* mutable_rule();
  void set_allocated_rule(::livekit::SIPDispatchRule* rule);
  private:
  const ::livekit::SIPDispatchRule& _internal_rule() const;
  ::livekit::SIPDispatchRule* _internal_mutable_rule();
  public:
  void unsafe_arena_set_allocated_rule(
      ::livekit::SIPDispatchRule* rule);
  ::livekit::SIPDispatchRule* unsafe_arena_release_rule();

  // .livekit.RoomConfiguration room_config = 9;
  bool has_room_config() const;
  private:
  bool _internal_has_room_config() const;
  public:
  void clear_room_config();
  const ::livekit::RoomConfiguration& room_config() const;
  PROTOBUF_NODISCARD ::livekit::RoomConfiguration* release_room_config();
  ::livekit::RoomConfiguration* mutable_room_config();
  void set_allocated_room_config(::livekit::RoomConfiguration* room_config);
  private:
  const ::livekit::RoomConfiguration& _internal_room_config() const;
  ::livekit::RoomConfiguration* _internal_mutable_room_config();
  public:
  void unsafe_arena_set_allocated_room_config(
      ::livekit::RoomConfiguration* room_config);
  ::livekit::RoomConfiguration* unsafe_arena_release_room_config();

  // bool hide_phone_number = 3;
  void clear_hide_phone_number();
  bool hide_phone_number() const;
  void set_hide_phone_number(bool value);
  private:
  bool _internal_hide_phone_number() const;
  void _internal_set_hide_phone_number(bool value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.CreateSIPDispatchRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trunk_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_preset_;
    ::livekit::SIPDispatchRule* rule_;
    ::livekit::RoomConfiguration* room_config_;
    bool hide_phone_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPDispatchRuleInfo_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPDispatchRuleInfo_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPDispatchRuleInfo_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPDispatchRuleInfo_AttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPDispatchRuleInfo_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPDispatchRuleInfo_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPDispatchRuleInfo_AttributesEntry_DoNotUse& other);
  static const SIPDispatchRuleInfo_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPDispatchRuleInfo_AttributesEntry_DoNotUse*>(&_SIPDispatchRuleInfo_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPDispatchRuleInfo.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPDispatchRuleInfo.AttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPDispatchRuleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPDispatchRuleInfo) */ {
 public:
  inline SIPDispatchRuleInfo() : SIPDispatchRuleInfo(nullptr) {}
  ~SIPDispatchRuleInfo() override;
  explicit PROTOBUF_CONSTEXPR SIPDispatchRuleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPDispatchRuleInfo(const SIPDispatchRuleInfo& from);
  SIPDispatchRuleInfo(SIPDispatchRuleInfo&& from) noexcept
    : SIPDispatchRuleInfo() {
    *this = ::std::move(from);
  }

  inline SIPDispatchRuleInfo& operator=(const SIPDispatchRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPDispatchRuleInfo& operator=(SIPDispatchRuleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPDispatchRuleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPDispatchRuleInfo* internal_default_instance() {
    return reinterpret_cast<const SIPDispatchRuleInfo*>(
               &_SIPDispatchRuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SIPDispatchRuleInfo& a, SIPDispatchRuleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPDispatchRuleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPDispatchRuleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPDispatchRuleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPDispatchRuleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPDispatchRuleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPDispatchRuleInfo& from) {
    SIPDispatchRuleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPDispatchRuleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPDispatchRuleInfo";
  }
  protected:
  explicit SIPDispatchRuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTrunkIdsFieldNumber = 3,
    kInboundNumbersFieldNumber = 7,
    kAttributesFieldNumber = 8,
    kSipDispatchRuleIdFieldNumber = 1,
    kNameFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kRoomPresetFieldNumber = 9,
    kRuleFieldNumber = 2,
    kRoomConfigFieldNumber = 10,
    kHidePhoneNumberFieldNumber = 4,
    kKrispEnabledFieldNumber = 11,
    kMediaEncryptionFieldNumber = 12,
  };
  // repeated string trunk_ids = 3;
  int trunk_ids_size() const;
  private:
  int _internal_trunk_ids_size() const;
  public:
  void clear_trunk_ids();
  const std::string& trunk_ids(int index) const;
  std::string* mutable_trunk_ids(int index);
  void set_trunk_ids(int index, const std::string& value);
  void set_trunk_ids(int index, std::string&& value);
  void set_trunk_ids(int index, const char* value);
  void set_trunk_ids(int index, const char* value, size_t size);
  std::string* add_trunk_ids();
  void add_trunk_ids(const std::string& value);
  void add_trunk_ids(std::string&& value);
  void add_trunk_ids(const char* value);
  void add_trunk_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& trunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_trunk_ids();
  private:
  const std::string& _internal_trunk_ids(int index) const;
  std::string* _internal_add_trunk_ids();
  public:

  // repeated string inbound_numbers = 7;
  int inbound_numbers_size() const;
  private:
  int _internal_inbound_numbers_size() const;
  public:
  void clear_inbound_numbers();
  const std::string& inbound_numbers(int index) const;
  std::string* mutable_inbound_numbers(int index);
  void set_inbound_numbers(int index, const std::string& value);
  void set_inbound_numbers(int index, std::string&& value);
  void set_inbound_numbers(int index, const char* value);
  void set_inbound_numbers(int index, const char* value, size_t size);
  std::string* add_inbound_numbers();
  void add_inbound_numbers(const std::string& value);
  void add_inbound_numbers(std::string&& value);
  void add_inbound_numbers(const char* value);
  void add_inbound_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inbound_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inbound_numbers();
  private:
  const std::string& _internal_inbound_numbers(int index) const;
  std::string* _internal_add_inbound_numbers();
  public:

  // map<string, string> attributes = 8;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // string sip_dispatch_rule_id = 1;
  void clear_sip_dispatch_rule_id();
  const std::string& sip_dispatch_rule_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_dispatch_rule_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_dispatch_rule_id();
  PROTOBUF_NODISCARD std::string* release_sip_dispatch_rule_id();
  void set_allocated_sip_dispatch_rule_id(std::string* sip_dispatch_rule_id);
  private:
  const std::string& _internal_sip_dispatch_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_dispatch_rule_id(const std::string& value);
  std::string* _internal_mutable_sip_dispatch_rule_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metadata = 6;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string room_preset = 9;
  void clear_room_preset();
  const std::string& room_preset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_preset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_preset();
  PROTOBUF_NODISCARD std::string* release_room_preset();
  void set_allocated_room_preset(std::string* room_preset);
  private:
  const std::string& _internal_room_preset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_preset(const std::string& value);
  std::string* _internal_mutable_room_preset();
  public:

  // .livekit.SIPDispatchRule rule = 2;
  bool has_rule() const;
  private:
  bool _internal_has_rule() const;
  public:
  void clear_rule();
  const ::livekit::SIPDispatchRule& rule() const;
  PROTOBUF_NODISCARD ::livekit::SIPDispatchRule* release_rule();
  ::livekit::SIPDispatchRule* mutable_rule();
  void set_allocated_rule(::livekit::SIPDispatchRule* rule);
  private:
  const ::livekit::SIPDispatchRule& _internal_rule() const;
  ::livekit::SIPDispatchRule* _internal_mutable_rule();
  public:
  void unsafe_arena_set_allocated_rule(
      ::livekit::SIPDispatchRule* rule);
  ::livekit::SIPDispatchRule* unsafe_arena_release_rule();

  // .livekit.RoomConfiguration room_config = 10;
  bool has_room_config() const;
  private:
  bool _internal_has_room_config() const;
  public:
  void clear_room_config();
  const ::livekit::RoomConfiguration& room_config() const;
  PROTOBUF_NODISCARD ::livekit::RoomConfiguration* release_room_config();
  ::livekit::RoomConfiguration* mutable_room_config();
  void set_allocated_room_config(::livekit::RoomConfiguration* room_config);
  private:
  const ::livekit::RoomConfiguration& _internal_room_config() const;
  ::livekit::RoomConfiguration* _internal_mutable_room_config();
  public:
  void unsafe_arena_set_allocated_room_config(
      ::livekit::RoomConfiguration* room_config);
  ::livekit::RoomConfiguration* unsafe_arena_release_room_config();

  // bool hide_phone_number = 4;
  void clear_hide_phone_number();
  bool hide_phone_number() const;
  void set_hide_phone_number(bool value);
  private:
  bool _internal_hide_phone_number() const;
  void _internal_set_hide_phone_number(bool value);
  public:

  // bool krisp_enabled = 11;
  void clear_krisp_enabled();
  bool krisp_enabled() const;
  void set_krisp_enabled(bool value);
  private:
  bool _internal_krisp_enabled() const;
  void _internal_set_krisp_enabled(bool value);
  public:

  // .livekit.SIPMediaEncryption media_encryption = 12;
  void clear_media_encryption();
  ::livekit::SIPMediaEncryption media_encryption() const;
  void set_media_encryption(::livekit::SIPMediaEncryption value);
  private:
  ::livekit::SIPMediaEncryption _internal_media_encryption() const;
  void _internal_set_media_encryption(::livekit::SIPMediaEncryption value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPDispatchRuleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trunk_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inbound_numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPDispatchRuleInfo_AttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_dispatch_rule_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_preset_;
    ::livekit::SIPDispatchRule* rule_;
    ::livekit::RoomConfiguration* room_config_;
    bool hide_phone_number_;
    bool krisp_enabled_;
    int media_encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPDispatchRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPDispatchRuleRequest) */ {
 public:
  inline ListSIPDispatchRuleRequest() : ListSIPDispatchRuleRequest(nullptr) {}
  ~ListSIPDispatchRuleRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPDispatchRuleRequest(const ListSIPDispatchRuleRequest& from);
  ListSIPDispatchRuleRequest(ListSIPDispatchRuleRequest&& from) noexcept
    : ListSIPDispatchRuleRequest() {
    *this = ::std::move(from);
  }

  inline ListSIPDispatchRuleRequest& operator=(const ListSIPDispatchRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPDispatchRuleRequest& operator=(ListSIPDispatchRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPDispatchRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPDispatchRuleRequest* internal_default_instance() {
    return reinterpret_cast<const ListSIPDispatchRuleRequest*>(
               &_ListSIPDispatchRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ListSIPDispatchRuleRequest& a, ListSIPDispatchRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPDispatchRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPDispatchRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPDispatchRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPDispatchRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPDispatchRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPDispatchRuleRequest& from) {
    ListSIPDispatchRuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPDispatchRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPDispatchRuleRequest";
  }
  protected:
  explicit ListSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDispatchRuleIdsFieldNumber = 1,
    kTrunkIdsFieldNumber = 2,
    kPageFieldNumber = 3,
  };
  // repeated string dispatch_rule_ids = 1;
  int dispatch_rule_ids_size() const;
  private:
  int _internal_dispatch_rule_ids_size() const;
  public:
  void clear_dispatch_rule_ids();
  const std::string& dispatch_rule_ids(int index) const;
  std::string* mutable_dispatch_rule_ids(int index);
  void set_dispatch_rule_ids(int index, const std::string& value);
  void set_dispatch_rule_ids(int index, std::string&& value);
  void set_dispatch_rule_ids(int index, const char* value);
  void set_dispatch_rule_ids(int index, const char* value, size_t size);
  std::string* add_dispatch_rule_ids();
  void add_dispatch_rule_ids(const std::string& value);
  void add_dispatch_rule_ids(std::string&& value);
  void add_dispatch_rule_ids(const char* value);
  void add_dispatch_rule_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dispatch_rule_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dispatch_rule_ids();
  private:
  const std::string& _internal_dispatch_rule_ids(int index) const;
  std::string* _internal_add_dispatch_rule_ids();
  public:

  // repeated string trunk_ids = 2;
  int trunk_ids_size() const;
  private:
  int _internal_trunk_ids_size() const;
  public:
  void clear_trunk_ids();
  const std::string& trunk_ids(int index) const;
  std::string* mutable_trunk_ids(int index);
  void set_trunk_ids(int index, const std::string& value);
  void set_trunk_ids(int index, std::string&& value);
  void set_trunk_ids(int index, const char* value);
  void set_trunk_ids(int index, const char* value, size_t size);
  std::string* add_trunk_ids();
  void add_trunk_ids(const std::string& value);
  void add_trunk_ids(std::string&& value);
  void add_trunk_ids(const char* value);
  void add_trunk_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& trunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_trunk_ids();
  private:
  const std::string& _internal_trunk_ids(int index) const;
  std::string* _internal_add_trunk_ids();
  public:

  // .livekit.Pagination page = 3;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const ::livekit::Pagination& page() const;
  PROTOBUF_NODISCARD ::livekit::Pagination* release_page();
  ::livekit::Pagination* mutable_page();
  void set_allocated_page(::livekit::Pagination* page);
  private:
  const ::livekit::Pagination& _internal_page() const;
  ::livekit::Pagination* _internal_mutable_page();
  public:
  void unsafe_arena_set_allocated_page(
      ::livekit::Pagination* page);
  ::livekit::Pagination* unsafe_arena_release_page();

  // @@protoc_insertion_point(class_scope:livekit.ListSIPDispatchRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dispatch_rule_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trunk_ids_;
    ::livekit::Pagination* page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class ListSIPDispatchRuleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.ListSIPDispatchRuleResponse) */ {
 public:
  inline ListSIPDispatchRuleResponse() : ListSIPDispatchRuleResponse(nullptr) {}
  ~ListSIPDispatchRuleResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSIPDispatchRuleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSIPDispatchRuleResponse(const ListSIPDispatchRuleResponse& from);
  ListSIPDispatchRuleResponse(ListSIPDispatchRuleResponse&& from) noexcept
    : ListSIPDispatchRuleResponse() {
    *this = ::std::move(from);
  }

  inline ListSIPDispatchRuleResponse& operator=(const ListSIPDispatchRuleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSIPDispatchRuleResponse& operator=(ListSIPDispatchRuleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSIPDispatchRuleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSIPDispatchRuleResponse* internal_default_instance() {
    return reinterpret_cast<const ListSIPDispatchRuleResponse*>(
               &_ListSIPDispatchRuleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ListSIPDispatchRuleResponse& a, ListSIPDispatchRuleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSIPDispatchRuleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSIPDispatchRuleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSIPDispatchRuleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSIPDispatchRuleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSIPDispatchRuleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSIPDispatchRuleResponse& from) {
    ListSIPDispatchRuleResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSIPDispatchRuleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.ListSIPDispatchRuleResponse";
  }
  protected:
  explicit ListSIPDispatchRuleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .livekit.SIPDispatchRuleInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::livekit::SIPDispatchRuleInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPDispatchRuleInfo >*
      mutable_items();
  private:
  const ::livekit::SIPDispatchRuleInfo& _internal_items(int index) const;
  ::livekit::SIPDispatchRuleInfo* _internal_add_items();
  public:
  const ::livekit::SIPDispatchRuleInfo& items(int index) const;
  ::livekit::SIPDispatchRuleInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPDispatchRuleInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:livekit.ListSIPDispatchRuleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPDispatchRuleInfo > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class DeleteSIPDispatchRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.DeleteSIPDispatchRuleRequest) */ {
 public:
  inline DeleteSIPDispatchRuleRequest() : DeleteSIPDispatchRuleRequest(nullptr) {}
  ~DeleteSIPDispatchRuleRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSIPDispatchRuleRequest(const DeleteSIPDispatchRuleRequest& from);
  DeleteSIPDispatchRuleRequest(DeleteSIPDispatchRuleRequest&& from) noexcept
    : DeleteSIPDispatchRuleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSIPDispatchRuleRequest& operator=(const DeleteSIPDispatchRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSIPDispatchRuleRequest& operator=(DeleteSIPDispatchRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSIPDispatchRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSIPDispatchRuleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSIPDispatchRuleRequest*>(
               &_DeleteSIPDispatchRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DeleteSIPDispatchRuleRequest& a, DeleteSIPDispatchRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSIPDispatchRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSIPDispatchRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSIPDispatchRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSIPDispatchRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSIPDispatchRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSIPDispatchRuleRequest& from) {
    DeleteSIPDispatchRuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSIPDispatchRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.DeleteSIPDispatchRuleRequest";
  }
  protected:
  explicit DeleteSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSipDispatchRuleIdFieldNumber = 1,
  };
  // string sip_dispatch_rule_id = 1;
  void clear_sip_dispatch_rule_id();
  const std::string& sip_dispatch_rule_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_dispatch_rule_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_dispatch_rule_id();
  PROTOBUF_NODISCARD std::string* release_sip_dispatch_rule_id();
  void set_allocated_sip_dispatch_rule_id(std::string* sip_dispatch_rule_id);
  private:
  const std::string& _internal_sip_dispatch_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_dispatch_rule_id(const std::string& value);
  std::string* _internal_mutable_sip_dispatch_rule_id();
  public:

  // @@protoc_insertion_point(class_scope:livekit.DeleteSIPDispatchRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_dispatch_rule_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse& other);
  static const SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse*>(&_SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundConfig.HeadersToAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundConfig.HeadersToAttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse& other);
  static const SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse*>(&_SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundConfig.AttributesToHeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPOutboundConfig.AttributesToHeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPOutboundConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPOutboundConfig) */ {
 public:
  inline SIPOutboundConfig() : SIPOutboundConfig(nullptr) {}
  ~SIPOutboundConfig() override;
  explicit PROTOBUF_CONSTEXPR SIPOutboundConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPOutboundConfig(const SIPOutboundConfig& from);
  SIPOutboundConfig(SIPOutboundConfig&& from) noexcept
    : SIPOutboundConfig() {
    *this = ::std::move(from);
  }

  inline SIPOutboundConfig& operator=(const SIPOutboundConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPOutboundConfig& operator=(SIPOutboundConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPOutboundConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPOutboundConfig* internal_default_instance() {
    return reinterpret_cast<const SIPOutboundConfig*>(
               &_SIPOutboundConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SIPOutboundConfig& a, SIPOutboundConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPOutboundConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPOutboundConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPOutboundConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPOutboundConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPOutboundConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPOutboundConfig& from) {
    SIPOutboundConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPOutboundConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPOutboundConfig";
  }
  protected:
  explicit SIPOutboundConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersToAttributesFieldNumber = 5,
    kAttributesToHeadersFieldNumber = 6,
    kHostnameFieldNumber = 1,
    kAuthUsernameFieldNumber = 3,
    kAuthPasswordFieldNumber = 4,
    kTransportFieldNumber = 2,
  };
  // map<string, string> headers_to_attributes = 5;
  int headers_to_attributes_size() const;
  private:
  int _internal_headers_to_attributes_size() const;
  public:
  void clear_headers_to_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers_to_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers_to_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers_to_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers_to_attributes();

  // map<string, string> attributes_to_headers = 6;
  int attributes_to_headers_size() const;
  private:
  int _internal_attributes_to_headers_size() const;
  public:
  void clear_attributes_to_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes_to_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes_to_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes_to_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes_to_headers();

  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string auth_username = 3;
  void clear_auth_username();
  const std::string& auth_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_username();
  PROTOBUF_NODISCARD std::string* release_auth_username();
  void set_allocated_auth_username(std::string* auth_username);
  private:
  const std::string& _internal_auth_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_username(const std::string& value);
  std::string* _internal_mutable_auth_username();
  public:

  // string auth_password = 4;
  void clear_auth_password();
  const std::string& auth_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_password();
  PROTOBUF_NODISCARD std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // .livekit.SIPTransport transport = 2;
  void clear_transport();
  ::livekit::SIPTransport transport() const;
  void set_transport(::livekit::SIPTransport value);
  private:
  ::livekit::SIPTransport _internal_transport() const;
  void _internal_set_transport(::livekit::SIPTransport value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPOutboundConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_to_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_to_headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
    int transport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse& other);
  static const CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse*>(&_CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.CreateSIPParticipantRequest.ParticipantAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.CreateSIPParticipantRequest.ParticipantAttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class CreateSIPParticipantRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSIPParticipantRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSIPParticipantRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateSIPParticipantRequest_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CreateSIPParticipantRequest_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateSIPParticipantRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateSIPParticipantRequest_HeadersEntry_DoNotUse& other);
  static const CreateSIPParticipantRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSIPParticipantRequest_HeadersEntry_DoNotUse*>(&_CreateSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.CreateSIPParticipantRequest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.CreateSIPParticipantRequest.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class CreateSIPParticipantRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.CreateSIPParticipantRequest) */ {
 public:
  inline CreateSIPParticipantRequest() : CreateSIPParticipantRequest(nullptr) {}
  ~CreateSIPParticipantRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSIPParticipantRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSIPParticipantRequest(const CreateSIPParticipantRequest& from);
  CreateSIPParticipantRequest(CreateSIPParticipantRequest&& from) noexcept
    : CreateSIPParticipantRequest() {
    *this = ::std::move(from);
  }

  inline CreateSIPParticipantRequest& operator=(const CreateSIPParticipantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSIPParticipantRequest& operator=(CreateSIPParticipantRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSIPParticipantRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSIPParticipantRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSIPParticipantRequest*>(
               &_CreateSIPParticipantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CreateSIPParticipantRequest& a, CreateSIPParticipantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSIPParticipantRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSIPParticipantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSIPParticipantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSIPParticipantRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSIPParticipantRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSIPParticipantRequest& from) {
    CreateSIPParticipantRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSIPParticipantRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.CreateSIPParticipantRequest";
  }
  protected:
  explicit CreateSIPParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParticipantAttributesFieldNumber = 9,
    kHeadersFieldNumber = 16,
    kSipTrunkIdFieldNumber = 1,
    kSipCallToFieldNumber = 2,
    kRoomNameFieldNumber = 3,
    kParticipantIdentityFieldNumber = 4,
    kDtmfFieldNumber = 5,
    kParticipantNameFieldNumber = 7,
    kParticipantMetadataFieldNumber = 8,
    kSipNumberFieldNumber = 15,
    kRingingTimeoutFieldNumber = 11,
    kMaxCallDurationFieldNumber = 12,
    kTrunkFieldNumber = 20,
    kPlayRingtoneFieldNumber = 6,
    kPlayDialtoneFieldNumber = 13,
    kHidePhoneNumberFieldNumber = 10,
    kKrispEnabledFieldNumber = 14,
    kIncludeHeadersFieldNumber = 17,
    kMediaEncryptionFieldNumber = 18,
    kWaitUntilAnsweredFieldNumber = 19,
  };
  // map<string, string> participant_attributes = 9;
  int participant_attributes_size() const;
  private:
  int _internal_participant_attributes_size() const;
  public:
  void clear_participant_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_participant_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_participant_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      participant_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_participant_attributes();

  // map<string, string> headers = 16;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string sip_trunk_id = 1;
  void clear_sip_trunk_id();
  const std::string& sip_trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_trunk_id();
  PROTOBUF_NODISCARD std::string* release_sip_trunk_id();
  void set_allocated_sip_trunk_id(std::string* sip_trunk_id);
  private:
  const std::string& _internal_sip_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_trunk_id(const std::string& value);
  std::string* _internal_mutable_sip_trunk_id();
  public:

  // string sip_call_to = 2;
  void clear_sip_call_to();
  const std::string& sip_call_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_call_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_call_to();
  PROTOBUF_NODISCARD std::string* release_sip_call_to();
  void set_allocated_sip_call_to(std::string* sip_call_to);
  private:
  const std::string& _internal_sip_call_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_call_to(const std::string& value);
  std::string* _internal_mutable_sip_call_to();
  public:

  // string room_name = 3;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string participant_identity = 4;
  void clear_participant_identity();
  const std::string& participant_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_identity();
  PROTOBUF_NODISCARD std::string* release_participant_identity();
  void set_allocated_participant_identity(std::string* participant_identity);
  private:
  const std::string& _internal_participant_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_identity(const std::string& value);
  std::string* _internal_mutable_participant_identity();
  public:

  // string dtmf = 5;
  void clear_dtmf();
  const std::string& dtmf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dtmf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dtmf();
  PROTOBUF_NODISCARD std::string* release_dtmf();
  void set_allocated_dtmf(std::string* dtmf);
  private:
  const std::string& _internal_dtmf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dtmf(const std::string& value);
  std::string* _internal_mutable_dtmf();
  public:

  // string participant_name = 7;
  void clear_participant_name();
  const std::string& participant_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_name();
  PROTOBUF_NODISCARD std::string* release_participant_name();
  void set_allocated_participant_name(std::string* participant_name);
  private:
  const std::string& _internal_participant_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_name(const std::string& value);
  std::string* _internal_mutable_participant_name();
  public:

  // string participant_metadata = 8;
  void clear_participant_metadata();
  const std::string& participant_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_metadata();
  PROTOBUF_NODISCARD std::string* release_participant_metadata();
  void set_allocated_participant_metadata(std::string* participant_metadata);
  private:
  const std::string& _internal_participant_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_metadata(const std::string& value);
  std::string* _internal_mutable_participant_metadata();
  public:

  // string sip_number = 15;
  void clear_sip_number();
  const std::string& sip_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_number();
  PROTOBUF_NODISCARD std::string* release_sip_number();
  void set_allocated_sip_number(std::string* sip_number);
  private:
  const std::string& _internal_sip_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_number(const std::string& value);
  std::string* _internal_mutable_sip_number();
  public:

  // .google.protobuf.Duration ringing_timeout = 11;
  bool has_ringing_timeout() const;
  private:
  bool _internal_has_ringing_timeout() const;
  public:
  void clear_ringing_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ringing_timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ringing_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ringing_timeout();
  void set_allocated_ringing_timeout(::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ringing_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ringing_timeout();
  public:
  void unsafe_arena_set_allocated_ringing_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ringing_timeout();

  // .google.protobuf.Duration max_call_duration = 12;
  bool has_max_call_duration() const;
  private:
  bool _internal_has_max_call_duration() const;
  public:
  void clear_max_call_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_call_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_call_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_call_duration();
  void set_allocated_max_call_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_call_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_call_duration();
  public:
  void unsafe_arena_set_allocated_max_call_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_call_duration();

  // .livekit.SIPOutboundConfig trunk = 20;
  bool has_trunk() const;
  private:
  bool _internal_has_trunk() const;
  public:
  void clear_trunk();
  const ::livekit::SIPOutboundConfig& trunk() const;
  PROTOBUF_NODISCARD ::livekit::SIPOutboundConfig* release_trunk();
  ::livekit::SIPOutboundConfig* mutable_trunk();
  void set_allocated_trunk(::livekit::SIPOutboundConfig* trunk);
  private:
  const ::livekit::SIPOutboundConfig& _internal_trunk() const;
  ::livekit::SIPOutboundConfig* _internal_mutable_trunk();
  public:
  void unsafe_arena_set_allocated_trunk(
      ::livekit::SIPOutboundConfig* trunk);
  ::livekit::SIPOutboundConfig* unsafe_arena_release_trunk();

  // bool play_ringtone = 6 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_play_ringtone();
  PROTOBUF_DEPRECATED bool play_ringtone() const;
  PROTOBUF_DEPRECATED void set_play_ringtone(bool value);
  private:
  bool _internal_play_ringtone() const;
  void _internal_set_play_ringtone(bool value);
  public:

  // bool play_dialtone = 13;
  void clear_play_dialtone();
  bool play_dialtone() const;
  void set_play_dialtone(bool value);
  private:
  bool _internal_play_dialtone() const;
  void _internal_set_play_dialtone(bool value);
  public:

  // bool hide_phone_number = 10;
  void clear_hide_phone_number();
  bool hide_phone_number() const;
  void set_hide_phone_number(bool value);
  private:
  bool _internal_hide_phone_number() const;
  void _internal_set_hide_phone_number(bool value);
  public:

  // bool krisp_enabled = 14;
  void clear_krisp_enabled();
  bool krisp_enabled() const;
  void set_krisp_enabled(bool value);
  private:
  bool _internal_krisp_enabled() const;
  void _internal_set_krisp_enabled(bool value);
  public:

  // .livekit.SIPHeaderOptions include_headers = 17;
  void clear_include_headers();
  ::livekit::SIPHeaderOptions include_headers() const;
  void set_include_headers(::livekit::SIPHeaderOptions value);
  private:
  ::livekit::SIPHeaderOptions _internal_include_headers() const;
  void _internal_set_include_headers(::livekit::SIPHeaderOptions value);
  public:

  // .livekit.SIPMediaEncryption media_encryption = 18;
  void clear_media_encryption();
  ::livekit::SIPMediaEncryption media_encryption() const;
  void set_media_encryption(::livekit::SIPMediaEncryption value);
  private:
  ::livekit::SIPMediaEncryption _internal_media_encryption() const;
  void _internal_set_media_encryption(::livekit::SIPMediaEncryption value);
  public:

  // bool wait_until_answered = 19;
  void clear_wait_until_answered();
  bool wait_until_answered() const;
  void set_wait_until_answered(bool value);
  private:
  bool _internal_wait_until_answered() const;
  void _internal_set_wait_until_answered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.CreateSIPParticipantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> participant_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CreateSIPParticipantRequest_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_trunk_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_call_to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtmf_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_number_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration_;
    ::livekit::SIPOutboundConfig* trunk_;
    bool play_ringtone_;
    bool play_dialtone_;
    bool hide_phone_number_;
    bool krisp_enabled_;
    int include_headers_;
    int media_encryption_;
    bool wait_until_answered_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPParticipantInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPParticipantInfo) */ {
 public:
  inline SIPParticipantInfo() : SIPParticipantInfo(nullptr) {}
  ~SIPParticipantInfo() override;
  explicit PROTOBUF_CONSTEXPR SIPParticipantInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPParticipantInfo(const SIPParticipantInfo& from);
  SIPParticipantInfo(SIPParticipantInfo&& from) noexcept
    : SIPParticipantInfo() {
    *this = ::std::move(from);
  }

  inline SIPParticipantInfo& operator=(const SIPParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPParticipantInfo& operator=(SIPParticipantInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPParticipantInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPParticipantInfo* internal_default_instance() {
    return reinterpret_cast<const SIPParticipantInfo*>(
               &_SIPParticipantInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SIPParticipantInfo& a, SIPParticipantInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPParticipantInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPParticipantInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPParticipantInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPParticipantInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPParticipantInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPParticipantInfo& from) {
    SIPParticipantInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPParticipantInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPParticipantInfo";
  }
  protected:
  explicit SIPParticipantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantIdFieldNumber = 1,
    kParticipantIdentityFieldNumber = 2,
    kRoomNameFieldNumber = 3,
    kSipCallIdFieldNumber = 4,
  };
  // string participant_id = 1;
  void clear_participant_id();
  const std::string& participant_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_id();
  PROTOBUF_NODISCARD std::string* release_participant_id();
  void set_allocated_participant_id(std::string* participant_id);
  private:
  const std::string& _internal_participant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_id(const std::string& value);
  std::string* _internal_mutable_participant_id();
  public:

  // string participant_identity = 2;
  void clear_participant_identity();
  const std::string& participant_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_identity();
  PROTOBUF_NODISCARD std::string* release_participant_identity();
  void set_allocated_participant_identity(std::string* participant_identity);
  private:
  const std::string& _internal_participant_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_identity(const std::string& value);
  std::string* _internal_mutable_participant_identity();
  public:

  // string room_name = 3;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string sip_call_id = 4;
  void clear_sip_call_id();
  const std::string& sip_call_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_call_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_call_id();
  PROTOBUF_NODISCARD std::string* release_sip_call_id();
  void set_allocated_sip_call_id(std::string* sip_call_id);
  private:
  const std::string& _internal_sip_call_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_call_id(const std::string& value);
  std::string* _internal_mutable_sip_call_id();
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPParticipantInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_call_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class TransferSIPParticipantRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransferSIPParticipantRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransferSIPParticipantRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TransferSIPParticipantRequest_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TransferSIPParticipantRequest_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TransferSIPParticipantRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TransferSIPParticipantRequest_HeadersEntry_DoNotUse& other);
  static const TransferSIPParticipantRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TransferSIPParticipantRequest_HeadersEntry_DoNotUse*>(&_TransferSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.TransferSIPParticipantRequest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.TransferSIPParticipantRequest.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class TransferSIPParticipantRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.TransferSIPParticipantRequest) */ {
 public:
  inline TransferSIPParticipantRequest() : TransferSIPParticipantRequest(nullptr) {}
  ~TransferSIPParticipantRequest() override;
  explicit PROTOBUF_CONSTEXPR TransferSIPParticipantRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferSIPParticipantRequest(const TransferSIPParticipantRequest& from);
  TransferSIPParticipantRequest(TransferSIPParticipantRequest&& from) noexcept
    : TransferSIPParticipantRequest() {
    *this = ::std::move(from);
  }

  inline TransferSIPParticipantRequest& operator=(const TransferSIPParticipantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferSIPParticipantRequest& operator=(TransferSIPParticipantRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferSIPParticipantRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferSIPParticipantRequest* internal_default_instance() {
    return reinterpret_cast<const TransferSIPParticipantRequest*>(
               &_TransferSIPParticipantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TransferSIPParticipantRequest& a, TransferSIPParticipantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferSIPParticipantRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferSIPParticipantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferSIPParticipantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferSIPParticipantRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferSIPParticipantRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferSIPParticipantRequest& from) {
    TransferSIPParticipantRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferSIPParticipantRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.TransferSIPParticipantRequest";
  }
  protected:
  explicit TransferSIPParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 5,
    kParticipantIdentityFieldNumber = 1,
    kRoomNameFieldNumber = 2,
    kTransferToFieldNumber = 3,
    kPlayDialtoneFieldNumber = 4,
  };
  // map<string, string> headers = 5;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string participant_identity = 1;
  void clear_participant_identity();
  const std::string& participant_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_identity();
  PROTOBUF_NODISCARD std::string* release_participant_identity();
  void set_allocated_participant_identity(std::string* participant_identity);
  private:
  const std::string& _internal_participant_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_identity(const std::string& value);
  std::string* _internal_mutable_participant_identity();
  public:

  // string room_name = 2;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string transfer_to = 3;
  void clear_transfer_to();
  const std::string& transfer_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transfer_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transfer_to();
  PROTOBUF_NODISCARD std::string* release_transfer_to();
  void set_allocated_transfer_to(std::string* transfer_to);
  private:
  const std::string& _internal_transfer_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_to(const std::string& value);
  std::string* _internal_mutable_transfer_to();
  public:

  // bool play_dialtone = 4;
  void clear_play_dialtone();
  bool play_dialtone() const;
  void set_play_dialtone(bool value);
  private:
  bool _internal_play_dialtone() const;
  void _internal_set_play_dialtone(bool value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.TransferSIPParticipantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TransferSIPParticipantRequest_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfer_to_;
    bool play_dialtone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPCallInfo_ParticipantAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPCallInfo_ParticipantAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SIPCallInfo_ParticipantAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SIPCallInfo_ParticipantAttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SIPCallInfo_ParticipantAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SIPCallInfo_ParticipantAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SIPCallInfo_ParticipantAttributesEntry_DoNotUse& other);
  static const SIPCallInfo_ParticipantAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SIPCallInfo_ParticipantAttributesEntry_DoNotUse*>(&_SIPCallInfo_ParticipantAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPCallInfo.ParticipantAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.SIPCallInfo.ParticipantAttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};

// -------------------------------------------------------------------

class SIPCallInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPCallInfo) */ {
 public:
  inline SIPCallInfo() : SIPCallInfo(nullptr) {}
  ~SIPCallInfo() override;
  explicit PROTOBUF_CONSTEXPR SIPCallInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPCallInfo(const SIPCallInfo& from);
  SIPCallInfo(SIPCallInfo&& from) noexcept
    : SIPCallInfo() {
    *this = ::std::move(from);
  }

  inline SIPCallInfo& operator=(const SIPCallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPCallInfo& operator=(SIPCallInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPCallInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPCallInfo* internal_default_instance() {
    return reinterpret_cast<const SIPCallInfo*>(
               &_SIPCallInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SIPCallInfo& a, SIPCallInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPCallInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPCallInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPCallInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPCallInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPCallInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPCallInfo& from) {
    SIPCallInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPCallInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPCallInfo";
  }
  protected:
  explicit SIPCallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFeaturesFieldNumber = 14,
    kParticipantAttributesFieldNumber = 18,
    kCallIdFieldNumber = 1,
    kTrunkIdFieldNumber = 2,
    kRoomNameFieldNumber = 3,
    kRoomIdFieldNumber = 4,
    kParticipantIdentityFieldNumber = 5,
    kErrorFieldNumber = 13,
    kDispatchRuleIdFieldNumber = 16,
    kRegionFieldNumber = 17,
    kAudioCodecFieldNumber = 20,
    kMediaEncryptionFieldNumber = 21,
    kFromUriFieldNumber = 6,
    kToUriFieldNumber = 7,
    kCallStatusCodeFieldNumber = 19,
    kCreatedAtFieldNumber = 9,
    kStartedAtFieldNumber = 10,
    kCallStatusFieldNumber = 8,
    kDisconnectReasonFieldNumber = 12,
    kEndedAtFieldNumber = 11,
    kCreatedAtNsFieldNumber = 22,
    kStartedAtNsFieldNumber = 23,
    kEndedAtNsFieldNumber = 24,
    kCallDirectionFieldNumber = 15,
  };
  // repeated .livekit.SIPFeature enabled_features = 14;
  int enabled_features_size() const;
  private:
  int _internal_enabled_features_size() const;
  public:
  void clear_enabled_features();
  private:
  ::livekit::SIPFeature _internal_enabled_features(int index) const;
  void _internal_add_enabled_features(::livekit::SIPFeature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enabled_features();
  public:
  ::livekit::SIPFeature enabled_features(int index) const;
  void set_enabled_features(int index, ::livekit::SIPFeature value);
  void add_enabled_features(::livekit::SIPFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_features();

  // map<string, string> participant_attributes = 18;
  int participant_attributes_size() const;
  private:
  int _internal_participant_attributes_size() const;
  public:
  void clear_participant_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_participant_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_participant_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      participant_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_participant_attributes();

  // string call_id = 1;
  void clear_call_id();
  const std::string& call_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_call_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_call_id();
  PROTOBUF_NODISCARD std::string* release_call_id();
  void set_allocated_call_id(std::string* call_id);
  private:
  const std::string& _internal_call_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_id(const std::string& value);
  std::string* _internal_mutable_call_id();
  public:

  // string trunk_id = 2;
  void clear_trunk_id();
  const std::string& trunk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trunk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trunk_id();
  PROTOBUF_NODISCARD std::string* release_trunk_id();
  void set_allocated_trunk_id(std::string* trunk_id);
  private:
  const std::string& _internal_trunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trunk_id(const std::string& value);
  std::string* _internal_mutable_trunk_id();
  public:

  // string room_name = 3;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string room_id = 4;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string participant_identity = 5;
  void clear_participant_identity();
  const std::string& participant_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_identity();
  PROTOBUF_NODISCARD std::string* release_participant_identity();
  void set_allocated_participant_identity(std::string* participant_identity);
  private:
  const std::string& _internal_participant_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_identity(const std::string& value);
  std::string* _internal_mutable_participant_identity();
  public:

  // string error = 13;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string dispatch_rule_id = 16;
  void clear_dispatch_rule_id();
  const std::string& dispatch_rule_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dispatch_rule_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dispatch_rule_id();
  PROTOBUF_NODISCARD std::string* release_dispatch_rule_id();
  void set_allocated_dispatch_rule_id(std::string* dispatch_rule_id);
  private:
  const std::string& _internal_dispatch_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dispatch_rule_id(const std::string& value);
  std::string* _internal_mutable_dispatch_rule_id();
  public:

  // string region = 17;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string audio_codec = 20;
  void clear_audio_codec();
  const std::string& audio_codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_codec();
  PROTOBUF_NODISCARD std::string* release_audio_codec();
  void set_allocated_audio_codec(std::string* audio_codec);
  private:
  const std::string& _internal_audio_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_codec(const std::string& value);
  std::string* _internal_mutable_audio_codec();
  public:

  // string media_encryption = 21;
  void clear_media_encryption();
  const std::string& media_encryption() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_encryption(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_encryption();
  PROTOBUF_NODISCARD std::string* release_media_encryption();
  void set_allocated_media_encryption(std::string* media_encryption);
  private:
  const std::string& _internal_media_encryption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_encryption(const std::string& value);
  std::string* _internal_mutable_media_encryption();
  public:

  // .livekit.SIPUri from_uri = 6;
  bool has_from_uri() const;
  private:
  bool _internal_has_from_uri() const;
  public:
  void clear_from_uri();
  const ::livekit::SIPUri& from_uri() const;
  PROTOBUF_NODISCARD ::livekit::SIPUri* release_from_uri();
  ::livekit::SIPUri* mutable_from_uri();
  void set_allocated_from_uri(::livekit::SIPUri* from_uri);
  private:
  const ::livekit::SIPUri& _internal_from_uri() const;
  ::livekit::SIPUri* _internal_mutable_from_uri();
  public:
  void unsafe_arena_set_allocated_from_uri(
      ::livekit::SIPUri* from_uri);
  ::livekit::SIPUri* unsafe_arena_release_from_uri();

  // .livekit.SIPUri to_uri = 7;
  bool has_to_uri() const;
  private:
  bool _internal_has_to_uri() const;
  public:
  void clear_to_uri();
  const ::livekit::SIPUri& to_uri() const;
  PROTOBUF_NODISCARD ::livekit::SIPUri* release_to_uri();
  ::livekit::SIPUri* mutable_to_uri();
  void set_allocated_to_uri(::livekit::SIPUri* to_uri);
  private:
  const ::livekit::SIPUri& _internal_to_uri() const;
  ::livekit::SIPUri* _internal_mutable_to_uri();
  public:
  void unsafe_arena_set_allocated_to_uri(
      ::livekit::SIPUri* to_uri);
  ::livekit::SIPUri* unsafe_arena_release_to_uri();

  // .livekit.SIPStatus call_status_code = 19;
  bool has_call_status_code() const;
  private:
  bool _internal_has_call_status_code() const;
  public:
  void clear_call_status_code();
  const ::livekit::SIPStatus& call_status_code() const;
  PROTOBUF_NODISCARD ::livekit::SIPStatus* release_call_status_code();
  ::livekit::SIPStatus* mutable_call_status_code();
  void set_allocated_call_status_code(::livekit::SIPStatus* call_status_code);
  private:
  const ::livekit::SIPStatus& _internal_call_status_code() const;
  ::livekit::SIPStatus* _internal_mutable_call_status_code();
  public:
  void unsafe_arena_set_allocated_call_status_code(
      ::livekit::SIPStatus* call_status_code);
  ::livekit::SIPStatus* unsafe_arena_release_call_status_code();

  // int64 created_at = 9 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_created_at();
  PROTOBUF_DEPRECATED int64_t created_at() const;
  PROTOBUF_DEPRECATED void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // int64 started_at = 10 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_started_at();
  PROTOBUF_DEPRECATED int64_t started_at() const;
  PROTOBUF_DEPRECATED void set_started_at(int64_t value);
  private:
  int64_t _internal_started_at() const;
  void _internal_set_started_at(int64_t value);
  public:

  // .livekit.SIPCallStatus call_status = 8;
  void clear_call_status();
  ::livekit::SIPCallStatus call_status() const;
  void set_call_status(::livekit::SIPCallStatus value);
  private:
  ::livekit::SIPCallStatus _internal_call_status() const;
  void _internal_set_call_status(::livekit::SIPCallStatus value);
  public:

  // .livekit.DisconnectReason disconnect_reason = 12;
  void clear_disconnect_reason();
  ::livekit::DisconnectReason disconnect_reason() const;
  void set_disconnect_reason(::livekit::DisconnectReason value);
  private:
  ::livekit::DisconnectReason _internal_disconnect_reason() const;
  void _internal_set_disconnect_reason(::livekit::DisconnectReason value);
  public:

  // int64 ended_at = 11 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_ended_at();
  PROTOBUF_DEPRECATED int64_t ended_at() const;
  PROTOBUF_DEPRECATED void set_ended_at(int64_t value);
  private:
  int64_t _internal_ended_at() const;
  void _internal_set_ended_at(int64_t value);
  public:

  // int64 created_at_ns = 22;
  void clear_created_at_ns();
  int64_t created_at_ns() const;
  void set_created_at_ns(int64_t value);
  private:
  int64_t _internal_created_at_ns() const;
  void _internal_set_created_at_ns(int64_t value);
  public:

  // int64 started_at_ns = 23;
  void clear_started_at_ns();
  int64_t started_at_ns() const;
  void set_started_at_ns(int64_t value);
  private:
  int64_t _internal_started_at_ns() const;
  void _internal_set_started_at_ns(int64_t value);
  public:

  // int64 ended_at_ns = 24;
  void clear_ended_at_ns();
  int64_t ended_at_ns() const;
  void set_ended_at_ns(int64_t value);
  private:
  int64_t _internal_ended_at_ns() const;
  void _internal_set_ended_at_ns(int64_t value);
  public:

  // .livekit.SIPCallDirection call_direction = 15;
  void clear_call_direction();
  ::livekit::SIPCallDirection call_direction() const;
  void set_call_direction(::livekit::SIPCallDirection value);
  private:
  ::livekit::SIPCallDirection _internal_call_direction() const;
  void _internal_set_call_direction(::livekit::SIPCallDirection value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPCallInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_features_;
    mutable std::atomic<int> _enabled_features_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SIPCallInfo_ParticipantAttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> participant_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr call_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trunk_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dispatch_rule_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_codec_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_encryption_;
    ::livekit::SIPUri* from_uri_;
    ::livekit::SIPUri* to_uri_;
    ::livekit::SIPStatus* call_status_code_;
    int64_t created_at_;
    int64_t started_at_;
    int call_status_;
    int disconnect_reason_;
    int64_t ended_at_;
    int64_t created_at_ns_;
    int64_t started_at_ns_;
    int64_t ended_at_ns_;
    int call_direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// -------------------------------------------------------------------

class SIPUri final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.SIPUri) */ {
 public:
  inline SIPUri() : SIPUri(nullptr) {}
  ~SIPUri() override;
  explicit PROTOBUF_CONSTEXPR SIPUri(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SIPUri(const SIPUri& from);
  SIPUri(SIPUri&& from) noexcept
    : SIPUri() {
    *this = ::std::move(from);
  }

  inline SIPUri& operator=(const SIPUri& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIPUri& operator=(SIPUri&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIPUri& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIPUri* internal_default_instance() {
    return reinterpret_cast<const SIPUri*>(
               &_SIPUri_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SIPUri& a, SIPUri& b) {
    a.Swap(&b);
  }
  inline void Swap(SIPUri* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIPUri* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIPUri* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIPUri>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SIPUri& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SIPUri& from) {
    SIPUri::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SIPUri* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.SIPUri";
  }
  protected:
  explicit SIPUri(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kHostFieldNumber = 2,
    kIpFieldNumber = 3,
    kPortFieldNumber = 4,
    kTransportFieldNumber = 5,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 4;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // .livekit.SIPTransport transport = 5;
  void clear_transport();
  ::livekit::SIPTransport transport() const;
  void set_transport(::livekit::SIPTransport value);
  private:
  ::livekit::SIPTransport _internal_transport() const;
  void _internal_set_transport(::livekit::SIPTransport value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.SIPUri)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
    int transport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fsip_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SIPStatus

// .livekit.SIPStatusCode code = 1;
inline void SIPStatus::clear_code() {
  _impl_.code_ = 0;
}
inline ::livekit::SIPStatusCode SIPStatus::_internal_code() const {
  return static_cast< ::livekit::SIPStatusCode >(_impl_.code_);
}
inline ::livekit::SIPStatusCode SIPStatus::code() const {
  // @@protoc_insertion_point(field_get:livekit.SIPStatus.code)
  return _internal_code();
}
inline void SIPStatus::_internal_set_code(::livekit::SIPStatusCode value) {
  
  _impl_.code_ = value;
}
inline void SIPStatus::set_code(::livekit::SIPStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:livekit.SIPStatus.code)
}

// string status = 2;
inline void SIPStatus::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& SIPStatus::status() const {
  // @@protoc_insertion_point(field_get:livekit.SIPStatus.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPStatus::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPStatus.status)
}
inline std::string* SIPStatus::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:livekit.SIPStatus.status)
  return _s;
}
inline const std::string& SIPStatus::_internal_status() const {
  return _impl_.status_.Get();
}
inline void SIPStatus::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPStatus::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPStatus::release_status() {
  // @@protoc_insertion_point(field_release:livekit.SIPStatus.status)
  return _impl_.status_.Release();
}
inline void SIPStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPStatus.status)
}

// -------------------------------------------------------------------

// CreateSIPTrunkRequest

// repeated string inbound_addresses = 1;
inline int CreateSIPTrunkRequest::_internal_inbound_addresses_size() const {
  return _impl_.inbound_addresses_.size();
}
inline int CreateSIPTrunkRequest::inbound_addresses_size() const {
  return _internal_inbound_addresses_size();
}
inline void CreateSIPTrunkRequest::clear_inbound_addresses() {
  _impl_.inbound_addresses_.Clear();
}
inline std::string* CreateSIPTrunkRequest::add_inbound_addresses() {
  std::string* _s = _internal_add_inbound_addresses();
  // @@protoc_insertion_point(field_add_mutable:livekit.CreateSIPTrunkRequest.inbound_addresses)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_inbound_addresses(int index) const {
  return _impl_.inbound_addresses_.Get(index);
}
inline const std::string& CreateSIPTrunkRequest::inbound_addresses(int index) const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.inbound_addresses)
  return _internal_inbound_addresses(index);
}
inline std::string* CreateSIPTrunkRequest::mutable_inbound_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.inbound_addresses)
  return _impl_.inbound_addresses_.Mutable(index);
}
inline void CreateSIPTrunkRequest::set_inbound_addresses(int index, const std::string& value) {
  _impl_.inbound_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline void CreateSIPTrunkRequest::set_inbound_addresses(int index, std::string&& value) {
  _impl_.inbound_addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline void CreateSIPTrunkRequest::set_inbound_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline void CreateSIPTrunkRequest::set_inbound_addresses(int index, const char* value, size_t size) {
  _impl_.inbound_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline std::string* CreateSIPTrunkRequest::_internal_add_inbound_addresses() {
  return _impl_.inbound_addresses_.Add();
}
inline void CreateSIPTrunkRequest::add_inbound_addresses(const std::string& value) {
  _impl_.inbound_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline void CreateSIPTrunkRequest::add_inbound_addresses(std::string&& value) {
  _impl_.inbound_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline void CreateSIPTrunkRequest::add_inbound_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline void CreateSIPTrunkRequest::add_inbound_addresses(const char* value, size_t size) {
  _impl_.inbound_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.CreateSIPTrunkRequest.inbound_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSIPTrunkRequest::inbound_addresses() const {
  // @@protoc_insertion_point(field_list:livekit.CreateSIPTrunkRequest.inbound_addresses)
  return _impl_.inbound_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSIPTrunkRequest::mutable_inbound_addresses() {
  // @@protoc_insertion_point(field_mutable_list:livekit.CreateSIPTrunkRequest.inbound_addresses)
  return &_impl_.inbound_addresses_;
}

// string outbound_address = 2;
inline void CreateSIPTrunkRequest::clear_outbound_address() {
  _impl_.outbound_address_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::outbound_address() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.outbound_address)
  return _internal_outbound_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_outbound_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.outbound_address)
}
inline std::string* CreateSIPTrunkRequest::mutable_outbound_address() {
  std::string* _s = _internal_mutable_outbound_address();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.outbound_address)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_outbound_address() const {
  return _impl_.outbound_address_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_outbound_address(const std::string& value) {
  
  _impl_.outbound_address_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_outbound_address() {
  
  return _impl_.outbound_address_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_outbound_address() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.outbound_address)
  return _impl_.outbound_address_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_outbound_address(std::string* outbound_address) {
  if (outbound_address != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_address_.SetAllocated(outbound_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_address_.IsDefault()) {
    _impl_.outbound_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.outbound_address)
}

// string outbound_number = 3;
inline void CreateSIPTrunkRequest::clear_outbound_number() {
  _impl_.outbound_number_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::outbound_number() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.outbound_number)
  return _internal_outbound_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_outbound_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.outbound_number)
}
inline std::string* CreateSIPTrunkRequest::mutable_outbound_number() {
  std::string* _s = _internal_mutable_outbound_number();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.outbound_number)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_outbound_number() const {
  return _impl_.outbound_number_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_outbound_number(const std::string& value) {
  
  _impl_.outbound_number_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_outbound_number() {
  
  return _impl_.outbound_number_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_outbound_number() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.outbound_number)
  return _impl_.outbound_number_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_outbound_number(std::string* outbound_number) {
  if (outbound_number != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_number_.SetAllocated(outbound_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_number_.IsDefault()) {
    _impl_.outbound_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.outbound_number)
}

// repeated string inbound_numbers_regex = 4 [deprecated = true];
inline int CreateSIPTrunkRequest::_internal_inbound_numbers_regex_size() const {
  return _impl_.inbound_numbers_regex_.size();
}
inline int CreateSIPTrunkRequest::inbound_numbers_regex_size() const {
  return _internal_inbound_numbers_regex_size();
}
inline void CreateSIPTrunkRequest::clear_inbound_numbers_regex() {
  _impl_.inbound_numbers_regex_.Clear();
}
inline std::string* CreateSIPTrunkRequest::add_inbound_numbers_regex() {
  std::string* _s = _internal_add_inbound_numbers_regex();
  // @@protoc_insertion_point(field_add_mutable:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_inbound_numbers_regex(int index) const {
  return _impl_.inbound_numbers_regex_.Get(index);
}
inline const std::string& CreateSIPTrunkRequest::inbound_numbers_regex(int index) const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
  return _internal_inbound_numbers_regex(index);
}
inline std::string* CreateSIPTrunkRequest::mutable_inbound_numbers_regex(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
  return _impl_.inbound_numbers_regex_.Mutable(index);
}
inline void CreateSIPTrunkRequest::set_inbound_numbers_regex(int index, const std::string& value) {
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline void CreateSIPTrunkRequest::set_inbound_numbers_regex(int index, std::string&& value) {
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline void CreateSIPTrunkRequest::set_inbound_numbers_regex(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline void CreateSIPTrunkRequest::set_inbound_numbers_regex(int index, const char* value, size_t size) {
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline std::string* CreateSIPTrunkRequest::_internal_add_inbound_numbers_regex() {
  return _impl_.inbound_numbers_regex_.Add();
}
inline void CreateSIPTrunkRequest::add_inbound_numbers_regex(const std::string& value) {
  _impl_.inbound_numbers_regex_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline void CreateSIPTrunkRequest::add_inbound_numbers_regex(std::string&& value) {
  _impl_.inbound_numbers_regex_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline void CreateSIPTrunkRequest::add_inbound_numbers_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_regex_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline void CreateSIPTrunkRequest::add_inbound_numbers_regex(const char* value, size_t size) {
  _impl_.inbound_numbers_regex_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSIPTrunkRequest::inbound_numbers_regex() const {
  // @@protoc_insertion_point(field_list:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
  return _impl_.inbound_numbers_regex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSIPTrunkRequest::mutable_inbound_numbers_regex() {
  // @@protoc_insertion_point(field_mutable_list:livekit.CreateSIPTrunkRequest.inbound_numbers_regex)
  return &_impl_.inbound_numbers_regex_;
}

// repeated string inbound_numbers = 9;
inline int CreateSIPTrunkRequest::_internal_inbound_numbers_size() const {
  return _impl_.inbound_numbers_.size();
}
inline int CreateSIPTrunkRequest::inbound_numbers_size() const {
  return _internal_inbound_numbers_size();
}
inline void CreateSIPTrunkRequest::clear_inbound_numbers() {
  _impl_.inbound_numbers_.Clear();
}
inline std::string* CreateSIPTrunkRequest::add_inbound_numbers() {
  std::string* _s = _internal_add_inbound_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.CreateSIPTrunkRequest.inbound_numbers)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_inbound_numbers(int index) const {
  return _impl_.inbound_numbers_.Get(index);
}
inline const std::string& CreateSIPTrunkRequest::inbound_numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.inbound_numbers)
  return _internal_inbound_numbers(index);
}
inline std::string* CreateSIPTrunkRequest::mutable_inbound_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.inbound_numbers)
  return _impl_.inbound_numbers_.Mutable(index);
}
inline void CreateSIPTrunkRequest::set_inbound_numbers(int index, const std::string& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline void CreateSIPTrunkRequest::set_inbound_numbers(int index, std::string&& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline void CreateSIPTrunkRequest::set_inbound_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline void CreateSIPTrunkRequest::set_inbound_numbers(int index, const char* value, size_t size) {
  _impl_.inbound_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline std::string* CreateSIPTrunkRequest::_internal_add_inbound_numbers() {
  return _impl_.inbound_numbers_.Add();
}
inline void CreateSIPTrunkRequest::add_inbound_numbers(const std::string& value) {
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline void CreateSIPTrunkRequest::add_inbound_numbers(std::string&& value) {
  _impl_.inbound_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline void CreateSIPTrunkRequest::add_inbound_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline void CreateSIPTrunkRequest::add_inbound_numbers(const char* value, size_t size) {
  _impl_.inbound_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.CreateSIPTrunkRequest.inbound_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSIPTrunkRequest::inbound_numbers() const {
  // @@protoc_insertion_point(field_list:livekit.CreateSIPTrunkRequest.inbound_numbers)
  return _impl_.inbound_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSIPTrunkRequest::mutable_inbound_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.CreateSIPTrunkRequest.inbound_numbers)
  return &_impl_.inbound_numbers_;
}

// string inbound_username = 5;
inline void CreateSIPTrunkRequest::clear_inbound_username() {
  _impl_.inbound_username_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::inbound_username() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.inbound_username)
  return _internal_inbound_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_inbound_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inbound_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_username)
}
inline std::string* CreateSIPTrunkRequest::mutable_inbound_username() {
  std::string* _s = _internal_mutable_inbound_username();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.inbound_username)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_inbound_username() const {
  return _impl_.inbound_username_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_inbound_username(const std::string& value) {
  
  _impl_.inbound_username_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_inbound_username() {
  
  return _impl_.inbound_username_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_inbound_username() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.inbound_username)
  return _impl_.inbound_username_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_inbound_username(std::string* inbound_username) {
  if (inbound_username != nullptr) {
    
  } else {
    
  }
  _impl_.inbound_username_.SetAllocated(inbound_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inbound_username_.IsDefault()) {
    _impl_.inbound_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.inbound_username)
}

// string inbound_password = 6;
inline void CreateSIPTrunkRequest::clear_inbound_password() {
  _impl_.inbound_password_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::inbound_password() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.inbound_password)
  return _internal_inbound_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_inbound_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inbound_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.inbound_password)
}
inline std::string* CreateSIPTrunkRequest::mutable_inbound_password() {
  std::string* _s = _internal_mutable_inbound_password();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.inbound_password)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_inbound_password() const {
  return _impl_.inbound_password_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_inbound_password(const std::string& value) {
  
  _impl_.inbound_password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_inbound_password() {
  
  return _impl_.inbound_password_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_inbound_password() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.inbound_password)
  return _impl_.inbound_password_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_inbound_password(std::string* inbound_password) {
  if (inbound_password != nullptr) {
    
  } else {
    
  }
  _impl_.inbound_password_.SetAllocated(inbound_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inbound_password_.IsDefault()) {
    _impl_.inbound_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.inbound_password)
}

// string outbound_username = 7;
inline void CreateSIPTrunkRequest::clear_outbound_username() {
  _impl_.outbound_username_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::outbound_username() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.outbound_username)
  return _internal_outbound_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_outbound_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.outbound_username)
}
inline std::string* CreateSIPTrunkRequest::mutable_outbound_username() {
  std::string* _s = _internal_mutable_outbound_username();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.outbound_username)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_outbound_username() const {
  return _impl_.outbound_username_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_outbound_username(const std::string& value) {
  
  _impl_.outbound_username_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_outbound_username() {
  
  return _impl_.outbound_username_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_outbound_username() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.outbound_username)
  return _impl_.outbound_username_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_outbound_username(std::string* outbound_username) {
  if (outbound_username != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_username_.SetAllocated(outbound_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_username_.IsDefault()) {
    _impl_.outbound_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.outbound_username)
}

// string outbound_password = 8;
inline void CreateSIPTrunkRequest::clear_outbound_password() {
  _impl_.outbound_password_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::outbound_password() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.outbound_password)
  return _internal_outbound_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_outbound_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.outbound_password)
}
inline std::string* CreateSIPTrunkRequest::mutable_outbound_password() {
  std::string* _s = _internal_mutable_outbound_password();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.outbound_password)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_outbound_password() const {
  return _impl_.outbound_password_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_outbound_password(const std::string& value) {
  
  _impl_.outbound_password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_outbound_password() {
  
  return _impl_.outbound_password_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_outbound_password() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.outbound_password)
  return _impl_.outbound_password_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_outbound_password(std::string* outbound_password) {
  if (outbound_password != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_password_.SetAllocated(outbound_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_password_.IsDefault()) {
    _impl_.outbound_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.outbound_password)
}

// string name = 10;
inline void CreateSIPTrunkRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::name() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.name)
}
inline std::string* CreateSIPTrunkRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.name)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_name() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.name)
  return _impl_.name_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.name)
}

// string metadata = 11;
inline void CreateSIPTrunkRequest::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& CreateSIPTrunkRequest::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPTrunkRequest.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPTrunkRequest::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPTrunkRequest.metadata)
}
inline std::string* CreateSIPTrunkRequest::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPTrunkRequest.metadata)
  return _s;
}
inline const std::string& CreateSIPTrunkRequest::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void CreateSIPTrunkRequest::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPTrunkRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPTrunkRequest.metadata)
  return _impl_.metadata_.Release();
}
inline void CreateSIPTrunkRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPTrunkRequest.metadata)
}

// -------------------------------------------------------------------

// SIPTrunkInfo

// string sip_trunk_id = 1;
inline void SIPTrunkInfo::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.sip_trunk_id)
}
inline std::string* SIPTrunkInfo::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.sip_trunk_id)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void SIPTrunkInfo::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void SIPTrunkInfo::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.sip_trunk_id)
}

// .livekit.SIPTrunkInfo.TrunkKind kind = 14;
inline void SIPTrunkInfo::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::livekit::SIPTrunkInfo_TrunkKind SIPTrunkInfo::_internal_kind() const {
  return static_cast< ::livekit::SIPTrunkInfo_TrunkKind >(_impl_.kind_);
}
inline ::livekit::SIPTrunkInfo_TrunkKind SIPTrunkInfo::kind() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.kind)
  return _internal_kind();
}
inline void SIPTrunkInfo::_internal_set_kind(::livekit::SIPTrunkInfo_TrunkKind value) {
  
  _impl_.kind_ = value;
}
inline void SIPTrunkInfo::set_kind(::livekit::SIPTrunkInfo_TrunkKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.kind)
}

// repeated string inbound_addresses = 2;
inline int SIPTrunkInfo::_internal_inbound_addresses_size() const {
  return _impl_.inbound_addresses_.size();
}
inline int SIPTrunkInfo::inbound_addresses_size() const {
  return _internal_inbound_addresses_size();
}
inline void SIPTrunkInfo::clear_inbound_addresses() {
  _impl_.inbound_addresses_.Clear();
}
inline std::string* SIPTrunkInfo::add_inbound_addresses() {
  std::string* _s = _internal_add_inbound_addresses();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPTrunkInfo.inbound_addresses)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_inbound_addresses(int index) const {
  return _impl_.inbound_addresses_.Get(index);
}
inline const std::string& SIPTrunkInfo::inbound_addresses(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.inbound_addresses)
  return _internal_inbound_addresses(index);
}
inline std::string* SIPTrunkInfo::mutable_inbound_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.inbound_addresses)
  return _impl_.inbound_addresses_.Mutable(index);
}
inline void SIPTrunkInfo::set_inbound_addresses(int index, const std::string& value) {
  _impl_.inbound_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_addresses)
}
inline void SIPTrunkInfo::set_inbound_addresses(int index, std::string&& value) {
  _impl_.inbound_addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_addresses)
}
inline void SIPTrunkInfo::set_inbound_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPTrunkInfo.inbound_addresses)
}
inline void SIPTrunkInfo::set_inbound_addresses(int index, const char* value, size_t size) {
  _impl_.inbound_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPTrunkInfo.inbound_addresses)
}
inline std::string* SIPTrunkInfo::_internal_add_inbound_addresses() {
  return _impl_.inbound_addresses_.Add();
}
inline void SIPTrunkInfo::add_inbound_addresses(const std::string& value) {
  _impl_.inbound_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPTrunkInfo.inbound_addresses)
}
inline void SIPTrunkInfo::add_inbound_addresses(std::string&& value) {
  _impl_.inbound_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPTrunkInfo.inbound_addresses)
}
inline void SIPTrunkInfo::add_inbound_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPTrunkInfo.inbound_addresses)
}
inline void SIPTrunkInfo::add_inbound_addresses(const char* value, size_t size) {
  _impl_.inbound_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPTrunkInfo.inbound_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPTrunkInfo::inbound_addresses() const {
  // @@protoc_insertion_point(field_list:livekit.SIPTrunkInfo.inbound_addresses)
  return _impl_.inbound_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPTrunkInfo::mutable_inbound_addresses() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPTrunkInfo.inbound_addresses)
  return &_impl_.inbound_addresses_;
}

// string outbound_address = 3;
inline void SIPTrunkInfo::clear_outbound_address() {
  _impl_.outbound_address_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::outbound_address() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.outbound_address)
  return _internal_outbound_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_outbound_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.outbound_address)
}
inline std::string* SIPTrunkInfo::mutable_outbound_address() {
  std::string* _s = _internal_mutable_outbound_address();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.outbound_address)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_outbound_address() const {
  return _impl_.outbound_address_.Get();
}
inline void SIPTrunkInfo::_internal_set_outbound_address(const std::string& value) {
  
  _impl_.outbound_address_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_outbound_address() {
  
  return _impl_.outbound_address_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_outbound_address() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.outbound_address)
  return _impl_.outbound_address_.Release();
}
inline void SIPTrunkInfo::set_allocated_outbound_address(std::string* outbound_address) {
  if (outbound_address != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_address_.SetAllocated(outbound_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_address_.IsDefault()) {
    _impl_.outbound_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.outbound_address)
}

// string outbound_number = 4;
inline void SIPTrunkInfo::clear_outbound_number() {
  _impl_.outbound_number_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::outbound_number() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.outbound_number)
  return _internal_outbound_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_outbound_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.outbound_number)
}
inline std::string* SIPTrunkInfo::mutable_outbound_number() {
  std::string* _s = _internal_mutable_outbound_number();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.outbound_number)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_outbound_number() const {
  return _impl_.outbound_number_.Get();
}
inline void SIPTrunkInfo::_internal_set_outbound_number(const std::string& value) {
  
  _impl_.outbound_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_outbound_number() {
  
  return _impl_.outbound_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_outbound_number() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.outbound_number)
  return _impl_.outbound_number_.Release();
}
inline void SIPTrunkInfo::set_allocated_outbound_number(std::string* outbound_number) {
  if (outbound_number != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_number_.SetAllocated(outbound_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_number_.IsDefault()) {
    _impl_.outbound_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.outbound_number)
}

// .livekit.SIPTransport transport = 13;
inline void SIPTrunkInfo::clear_transport() {
  _impl_.transport_ = 0;
}
inline ::livekit::SIPTransport SIPTrunkInfo::_internal_transport() const {
  return static_cast< ::livekit::SIPTransport >(_impl_.transport_);
}
inline ::livekit::SIPTransport SIPTrunkInfo::transport() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.transport)
  return _internal_transport();
}
inline void SIPTrunkInfo::_internal_set_transport(::livekit::SIPTransport value) {
  
  _impl_.transport_ = value;
}
inline void SIPTrunkInfo::set_transport(::livekit::SIPTransport value) {
  _internal_set_transport(value);
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.transport)
}

// repeated string inbound_numbers_regex = 5 [deprecated = true];
inline int SIPTrunkInfo::_internal_inbound_numbers_regex_size() const {
  return _impl_.inbound_numbers_regex_.size();
}
inline int SIPTrunkInfo::inbound_numbers_regex_size() const {
  return _internal_inbound_numbers_regex_size();
}
inline void SIPTrunkInfo::clear_inbound_numbers_regex() {
  _impl_.inbound_numbers_regex_.Clear();
}
inline std::string* SIPTrunkInfo::add_inbound_numbers_regex() {
  std::string* _s = _internal_add_inbound_numbers_regex();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPTrunkInfo.inbound_numbers_regex)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_inbound_numbers_regex(int index) const {
  return _impl_.inbound_numbers_regex_.Get(index);
}
inline const std::string& SIPTrunkInfo::inbound_numbers_regex(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.inbound_numbers_regex)
  return _internal_inbound_numbers_regex(index);
}
inline std::string* SIPTrunkInfo::mutable_inbound_numbers_regex(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.inbound_numbers_regex)
  return _impl_.inbound_numbers_regex_.Mutable(index);
}
inline void SIPTrunkInfo::set_inbound_numbers_regex(int index, const std::string& value) {
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline void SIPTrunkInfo::set_inbound_numbers_regex(int index, std::string&& value) {
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline void SIPTrunkInfo::set_inbound_numbers_regex(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline void SIPTrunkInfo::set_inbound_numbers_regex(int index, const char* value, size_t size) {
  _impl_.inbound_numbers_regex_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline std::string* SIPTrunkInfo::_internal_add_inbound_numbers_regex() {
  return _impl_.inbound_numbers_regex_.Add();
}
inline void SIPTrunkInfo::add_inbound_numbers_regex(const std::string& value) {
  _impl_.inbound_numbers_regex_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline void SIPTrunkInfo::add_inbound_numbers_regex(std::string&& value) {
  _impl_.inbound_numbers_regex_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline void SIPTrunkInfo::add_inbound_numbers_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_regex_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline void SIPTrunkInfo::add_inbound_numbers_regex(const char* value, size_t size) {
  _impl_.inbound_numbers_regex_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPTrunkInfo.inbound_numbers_regex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPTrunkInfo::inbound_numbers_regex() const {
  // @@protoc_insertion_point(field_list:livekit.SIPTrunkInfo.inbound_numbers_regex)
  return _impl_.inbound_numbers_regex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPTrunkInfo::mutable_inbound_numbers_regex() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPTrunkInfo.inbound_numbers_regex)
  return &_impl_.inbound_numbers_regex_;
}

// repeated string inbound_numbers = 10;
inline int SIPTrunkInfo::_internal_inbound_numbers_size() const {
  return _impl_.inbound_numbers_.size();
}
inline int SIPTrunkInfo::inbound_numbers_size() const {
  return _internal_inbound_numbers_size();
}
inline void SIPTrunkInfo::clear_inbound_numbers() {
  _impl_.inbound_numbers_.Clear();
}
inline std::string* SIPTrunkInfo::add_inbound_numbers() {
  std::string* _s = _internal_add_inbound_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPTrunkInfo.inbound_numbers)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_inbound_numbers(int index) const {
  return _impl_.inbound_numbers_.Get(index);
}
inline const std::string& SIPTrunkInfo::inbound_numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.inbound_numbers)
  return _internal_inbound_numbers(index);
}
inline std::string* SIPTrunkInfo::mutable_inbound_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.inbound_numbers)
  return _impl_.inbound_numbers_.Mutable(index);
}
inline void SIPTrunkInfo::set_inbound_numbers(int index, const std::string& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_numbers)
}
inline void SIPTrunkInfo::set_inbound_numbers(int index, std::string&& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_numbers)
}
inline void SIPTrunkInfo::set_inbound_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPTrunkInfo.inbound_numbers)
}
inline void SIPTrunkInfo::set_inbound_numbers(int index, const char* value, size_t size) {
  _impl_.inbound_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPTrunkInfo.inbound_numbers)
}
inline std::string* SIPTrunkInfo::_internal_add_inbound_numbers() {
  return _impl_.inbound_numbers_.Add();
}
inline void SIPTrunkInfo::add_inbound_numbers(const std::string& value) {
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPTrunkInfo.inbound_numbers)
}
inline void SIPTrunkInfo::add_inbound_numbers(std::string&& value) {
  _impl_.inbound_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPTrunkInfo.inbound_numbers)
}
inline void SIPTrunkInfo::add_inbound_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPTrunkInfo.inbound_numbers)
}
inline void SIPTrunkInfo::add_inbound_numbers(const char* value, size_t size) {
  _impl_.inbound_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPTrunkInfo.inbound_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPTrunkInfo::inbound_numbers() const {
  // @@protoc_insertion_point(field_list:livekit.SIPTrunkInfo.inbound_numbers)
  return _impl_.inbound_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPTrunkInfo::mutable_inbound_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPTrunkInfo.inbound_numbers)
  return &_impl_.inbound_numbers_;
}

// string inbound_username = 6;
inline void SIPTrunkInfo::clear_inbound_username() {
  _impl_.inbound_username_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::inbound_username() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.inbound_username)
  return _internal_inbound_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_inbound_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inbound_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_username)
}
inline std::string* SIPTrunkInfo::mutable_inbound_username() {
  std::string* _s = _internal_mutable_inbound_username();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.inbound_username)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_inbound_username() const {
  return _impl_.inbound_username_.Get();
}
inline void SIPTrunkInfo::_internal_set_inbound_username(const std::string& value) {
  
  _impl_.inbound_username_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_inbound_username() {
  
  return _impl_.inbound_username_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_inbound_username() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.inbound_username)
  return _impl_.inbound_username_.Release();
}
inline void SIPTrunkInfo::set_allocated_inbound_username(std::string* inbound_username) {
  if (inbound_username != nullptr) {
    
  } else {
    
  }
  _impl_.inbound_username_.SetAllocated(inbound_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inbound_username_.IsDefault()) {
    _impl_.inbound_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.inbound_username)
}

// string inbound_password = 7;
inline void SIPTrunkInfo::clear_inbound_password() {
  _impl_.inbound_password_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::inbound_password() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.inbound_password)
  return _internal_inbound_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_inbound_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inbound_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.inbound_password)
}
inline std::string* SIPTrunkInfo::mutable_inbound_password() {
  std::string* _s = _internal_mutable_inbound_password();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.inbound_password)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_inbound_password() const {
  return _impl_.inbound_password_.Get();
}
inline void SIPTrunkInfo::_internal_set_inbound_password(const std::string& value) {
  
  _impl_.inbound_password_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_inbound_password() {
  
  return _impl_.inbound_password_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_inbound_password() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.inbound_password)
  return _impl_.inbound_password_.Release();
}
inline void SIPTrunkInfo::set_allocated_inbound_password(std::string* inbound_password) {
  if (inbound_password != nullptr) {
    
  } else {
    
  }
  _impl_.inbound_password_.SetAllocated(inbound_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inbound_password_.IsDefault()) {
    _impl_.inbound_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.inbound_password)
}

// string outbound_username = 8;
inline void SIPTrunkInfo::clear_outbound_username() {
  _impl_.outbound_username_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::outbound_username() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.outbound_username)
  return _internal_outbound_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_outbound_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.outbound_username)
}
inline std::string* SIPTrunkInfo::mutable_outbound_username() {
  std::string* _s = _internal_mutable_outbound_username();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.outbound_username)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_outbound_username() const {
  return _impl_.outbound_username_.Get();
}
inline void SIPTrunkInfo::_internal_set_outbound_username(const std::string& value) {
  
  _impl_.outbound_username_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_outbound_username() {
  
  return _impl_.outbound_username_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_outbound_username() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.outbound_username)
  return _impl_.outbound_username_.Release();
}
inline void SIPTrunkInfo::set_allocated_outbound_username(std::string* outbound_username) {
  if (outbound_username != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_username_.SetAllocated(outbound_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_username_.IsDefault()) {
    _impl_.outbound_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.outbound_username)
}

// string outbound_password = 9;
inline void SIPTrunkInfo::clear_outbound_password() {
  _impl_.outbound_password_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::outbound_password() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.outbound_password)
  return _internal_outbound_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_outbound_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outbound_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.outbound_password)
}
inline std::string* SIPTrunkInfo::mutable_outbound_password() {
  std::string* _s = _internal_mutable_outbound_password();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.outbound_password)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_outbound_password() const {
  return _impl_.outbound_password_.Get();
}
inline void SIPTrunkInfo::_internal_set_outbound_password(const std::string& value) {
  
  _impl_.outbound_password_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_outbound_password() {
  
  return _impl_.outbound_password_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_outbound_password() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.outbound_password)
  return _impl_.outbound_password_.Release();
}
inline void SIPTrunkInfo::set_allocated_outbound_password(std::string* outbound_password) {
  if (outbound_password != nullptr) {
    
  } else {
    
  }
  _impl_.outbound_password_.SetAllocated(outbound_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outbound_password_.IsDefault()) {
    _impl_.outbound_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.outbound_password)
}

// string name = 11;
inline void SIPTrunkInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.name)
}
inline std::string* SIPTrunkInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.name)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SIPTrunkInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.name)
  return _impl_.name_.Release();
}
inline void SIPTrunkInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.name)
}

// string metadata = 12;
inline void SIPTrunkInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& SIPTrunkInfo::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.SIPTrunkInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPTrunkInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPTrunkInfo.metadata)
}
inline std::string* SIPTrunkInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.SIPTrunkInfo.metadata)
  return _s;
}
inline const std::string& SIPTrunkInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void SIPTrunkInfo::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPTrunkInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.SIPTrunkInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void SIPTrunkInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPTrunkInfo.metadata)
}

// -------------------------------------------------------------------

// CreateSIPInboundTrunkRequest

// .livekit.SIPInboundTrunkInfo trunk = 1;
inline bool CreateSIPInboundTrunkRequest::_internal_has_trunk() const {
  return this != internal_default_instance() && _impl_.trunk_ != nullptr;
}
inline bool CreateSIPInboundTrunkRequest::has_trunk() const {
  return _internal_has_trunk();
}
inline void CreateSIPInboundTrunkRequest::clear_trunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
}
inline const ::livekit::SIPInboundTrunkInfo& CreateSIPInboundTrunkRequest::_internal_trunk() const {
  const ::livekit::SIPInboundTrunkInfo* p = _impl_.trunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPInboundTrunkInfo&>(
      ::livekit::_SIPInboundTrunkInfo_default_instance_);
}
inline const ::livekit::SIPInboundTrunkInfo& CreateSIPInboundTrunkRequest::trunk() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPInboundTrunkRequest.trunk)
  return _internal_trunk();
}
inline void CreateSIPInboundTrunkRequest::unsafe_arena_set_allocated_trunk(
    ::livekit::SIPInboundTrunkInfo* trunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trunk_);
  }
  _impl_.trunk_ = trunk;
  if (trunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPInboundTrunkRequest.trunk)
}
inline ::livekit::SIPInboundTrunkInfo* CreateSIPInboundTrunkRequest::release_trunk() {
  
  ::livekit::SIPInboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPInboundTrunkInfo* CreateSIPInboundTrunkRequest::unsafe_arena_release_trunk() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPInboundTrunkRequest.trunk)
  
  ::livekit::SIPInboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
  return temp;
}
inline ::livekit::SIPInboundTrunkInfo* CreateSIPInboundTrunkRequest::_internal_mutable_trunk() {
  
  if (_impl_.trunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPInboundTrunkInfo>(GetArenaForAllocation());
    _impl_.trunk_ = p;
  }
  return _impl_.trunk_;
}
inline ::livekit::SIPInboundTrunkInfo* CreateSIPInboundTrunkRequest::mutable_trunk() {
  ::livekit::SIPInboundTrunkInfo* _msg = _internal_mutable_trunk();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPInboundTrunkRequest.trunk)
  return _msg;
}
inline void CreateSIPInboundTrunkRequest::set_allocated_trunk(::livekit::SIPInboundTrunkInfo* trunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trunk_;
  }
  if (trunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trunk);
    if (message_arena != submessage_arena) {
      trunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trunk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trunk_ = trunk;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPInboundTrunkRequest.trunk)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SIPInboundTrunkInfo

// string sip_trunk_id = 1;
inline void SIPInboundTrunkInfo::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& SIPInboundTrunkInfo::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPInboundTrunkInfo::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.sip_trunk_id)
}
inline std::string* SIPInboundTrunkInfo::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.sip_trunk_id)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void SIPInboundTrunkInfo::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void SIPInboundTrunkInfo::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.sip_trunk_id)
}

// string name = 2;
inline void SIPInboundTrunkInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SIPInboundTrunkInfo::name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPInboundTrunkInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.name)
}
inline std::string* SIPInboundTrunkInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.name)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SIPInboundTrunkInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::release_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.name)
  return _impl_.name_.Release();
}
inline void SIPInboundTrunkInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.name)
}

// string metadata = 3;
inline void SIPInboundTrunkInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& SIPInboundTrunkInfo::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPInboundTrunkInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.metadata)
}
inline std::string* SIPInboundTrunkInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.metadata)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void SIPInboundTrunkInfo::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void SIPInboundTrunkInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.metadata)
}

// repeated string numbers = 4;
inline int SIPInboundTrunkInfo::_internal_numbers_size() const {
  return _impl_.numbers_.size();
}
inline int SIPInboundTrunkInfo::numbers_size() const {
  return _internal_numbers_size();
}
inline void SIPInboundTrunkInfo::clear_numbers() {
  _impl_.numbers_.Clear();
}
inline std::string* SIPInboundTrunkInfo::add_numbers() {
  std::string* _s = _internal_add_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPInboundTrunkInfo.numbers)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_numbers(int index) const {
  return _impl_.numbers_.Get(index);
}
inline const std::string& SIPInboundTrunkInfo::numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.numbers)
  return _internal_numbers(index);
}
inline std::string* SIPInboundTrunkInfo::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.numbers)
  return _impl_.numbers_.Mutable(index);
}
inline void SIPInboundTrunkInfo::set_numbers(int index, const std::string& value) {
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.numbers)
}
inline void SIPInboundTrunkInfo::set_numbers(int index, std::string&& value) {
  _impl_.numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.numbers)
}
inline void SIPInboundTrunkInfo::set_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPInboundTrunkInfo.numbers)
}
inline void SIPInboundTrunkInfo::set_numbers(int index, const char* value, size_t size) {
  _impl_.numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPInboundTrunkInfo.numbers)
}
inline std::string* SIPInboundTrunkInfo::_internal_add_numbers() {
  return _impl_.numbers_.Add();
}
inline void SIPInboundTrunkInfo::add_numbers(const std::string& value) {
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPInboundTrunkInfo.numbers)
}
inline void SIPInboundTrunkInfo::add_numbers(std::string&& value) {
  _impl_.numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPInboundTrunkInfo.numbers)
}
inline void SIPInboundTrunkInfo::add_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPInboundTrunkInfo.numbers)
}
inline void SIPInboundTrunkInfo::add_numbers(const char* value, size_t size) {
  _impl_.numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPInboundTrunkInfo.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPInboundTrunkInfo::numbers() const {
  // @@protoc_insertion_point(field_list:livekit.SIPInboundTrunkInfo.numbers)
  return _impl_.numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPInboundTrunkInfo::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPInboundTrunkInfo.numbers)
  return &_impl_.numbers_;
}

// repeated string allowed_addresses = 5;
inline int SIPInboundTrunkInfo::_internal_allowed_addresses_size() const {
  return _impl_.allowed_addresses_.size();
}
inline int SIPInboundTrunkInfo::allowed_addresses_size() const {
  return _internal_allowed_addresses_size();
}
inline void SIPInboundTrunkInfo::clear_allowed_addresses() {
  _impl_.allowed_addresses_.Clear();
}
inline std::string* SIPInboundTrunkInfo::add_allowed_addresses() {
  std::string* _s = _internal_add_allowed_addresses();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPInboundTrunkInfo.allowed_addresses)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_allowed_addresses(int index) const {
  return _impl_.allowed_addresses_.Get(index);
}
inline const std::string& SIPInboundTrunkInfo::allowed_addresses(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.allowed_addresses)
  return _internal_allowed_addresses(index);
}
inline std::string* SIPInboundTrunkInfo::mutable_allowed_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.allowed_addresses)
  return _impl_.allowed_addresses_.Mutable(index);
}
inline void SIPInboundTrunkInfo::set_allowed_addresses(int index, const std::string& value) {
  _impl_.allowed_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline void SIPInboundTrunkInfo::set_allowed_addresses(int index, std::string&& value) {
  _impl_.allowed_addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline void SIPInboundTrunkInfo::set_allowed_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline void SIPInboundTrunkInfo::set_allowed_addresses(int index, const char* value, size_t size) {
  _impl_.allowed_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline std::string* SIPInboundTrunkInfo::_internal_add_allowed_addresses() {
  return _impl_.allowed_addresses_.Add();
}
inline void SIPInboundTrunkInfo::add_allowed_addresses(const std::string& value) {
  _impl_.allowed_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline void SIPInboundTrunkInfo::add_allowed_addresses(std::string&& value) {
  _impl_.allowed_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline void SIPInboundTrunkInfo::add_allowed_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline void SIPInboundTrunkInfo::add_allowed_addresses(const char* value, size_t size) {
  _impl_.allowed_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPInboundTrunkInfo.allowed_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPInboundTrunkInfo::allowed_addresses() const {
  // @@protoc_insertion_point(field_list:livekit.SIPInboundTrunkInfo.allowed_addresses)
  return _impl_.allowed_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPInboundTrunkInfo::mutable_allowed_addresses() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPInboundTrunkInfo.allowed_addresses)
  return &_impl_.allowed_addresses_;
}

// repeated string allowed_numbers = 6;
inline int SIPInboundTrunkInfo::_internal_allowed_numbers_size() const {
  return _impl_.allowed_numbers_.size();
}
inline int SIPInboundTrunkInfo::allowed_numbers_size() const {
  return _internal_allowed_numbers_size();
}
inline void SIPInboundTrunkInfo::clear_allowed_numbers() {
  _impl_.allowed_numbers_.Clear();
}
inline std::string* SIPInboundTrunkInfo::add_allowed_numbers() {
  std::string* _s = _internal_add_allowed_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPInboundTrunkInfo.allowed_numbers)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_allowed_numbers(int index) const {
  return _impl_.allowed_numbers_.Get(index);
}
inline const std::string& SIPInboundTrunkInfo::allowed_numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.allowed_numbers)
  return _internal_allowed_numbers(index);
}
inline std::string* SIPInboundTrunkInfo::mutable_allowed_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.allowed_numbers)
  return _impl_.allowed_numbers_.Mutable(index);
}
inline void SIPInboundTrunkInfo::set_allowed_numbers(int index, const std::string& value) {
  _impl_.allowed_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline void SIPInboundTrunkInfo::set_allowed_numbers(int index, std::string&& value) {
  _impl_.allowed_numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline void SIPInboundTrunkInfo::set_allowed_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline void SIPInboundTrunkInfo::set_allowed_numbers(int index, const char* value, size_t size) {
  _impl_.allowed_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline std::string* SIPInboundTrunkInfo::_internal_add_allowed_numbers() {
  return _impl_.allowed_numbers_.Add();
}
inline void SIPInboundTrunkInfo::add_allowed_numbers(const std::string& value) {
  _impl_.allowed_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline void SIPInboundTrunkInfo::add_allowed_numbers(std::string&& value) {
  _impl_.allowed_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline void SIPInboundTrunkInfo::add_allowed_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline void SIPInboundTrunkInfo::add_allowed_numbers(const char* value, size_t size) {
  _impl_.allowed_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPInboundTrunkInfo.allowed_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPInboundTrunkInfo::allowed_numbers() const {
  // @@protoc_insertion_point(field_list:livekit.SIPInboundTrunkInfo.allowed_numbers)
  return _impl_.allowed_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPInboundTrunkInfo::mutable_allowed_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPInboundTrunkInfo.allowed_numbers)
  return &_impl_.allowed_numbers_;
}

// string auth_username = 7;
inline void SIPInboundTrunkInfo::clear_auth_username() {
  _impl_.auth_username_.ClearToEmpty();
}
inline const std::string& SIPInboundTrunkInfo::auth_username() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.auth_username)
  return _internal_auth_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPInboundTrunkInfo::set_auth_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.auth_username)
}
inline std::string* SIPInboundTrunkInfo::mutable_auth_username() {
  std::string* _s = _internal_mutable_auth_username();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.auth_username)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_auth_username() const {
  return _impl_.auth_username_.Get();
}
inline void SIPInboundTrunkInfo::_internal_set_auth_username(const std::string& value) {
  
  _impl_.auth_username_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::_internal_mutable_auth_username() {
  
  return _impl_.auth_username_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::release_auth_username() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.auth_username)
  return _impl_.auth_username_.Release();
}
inline void SIPInboundTrunkInfo::set_allocated_auth_username(std::string* auth_username) {
  if (auth_username != nullptr) {
    
  } else {
    
  }
  _impl_.auth_username_.SetAllocated(auth_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_username_.IsDefault()) {
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.auth_username)
}

// string auth_password = 8;
inline void SIPInboundTrunkInfo::clear_auth_password() {
  _impl_.auth_password_.ClearToEmpty();
}
inline const std::string& SIPInboundTrunkInfo::auth_password() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.auth_password)
  return _internal_auth_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPInboundTrunkInfo::set_auth_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.auth_password)
}
inline std::string* SIPInboundTrunkInfo::mutable_auth_password() {
  std::string* _s = _internal_mutable_auth_password();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.auth_password)
  return _s;
}
inline const std::string& SIPInboundTrunkInfo::_internal_auth_password() const {
  return _impl_.auth_password_.Get();
}
inline void SIPInboundTrunkInfo::_internal_set_auth_password(const std::string& value) {
  
  _impl_.auth_password_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::_internal_mutable_auth_password() {
  
  return _impl_.auth_password_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPInboundTrunkInfo::release_auth_password() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.auth_password)
  return _impl_.auth_password_.Release();
}
inline void SIPInboundTrunkInfo::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  _impl_.auth_password_.SetAllocated(auth_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_password_.IsDefault()) {
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.auth_password)
}

// map<string, string> headers = 9;
inline int SIPInboundTrunkInfo::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int SIPInboundTrunkInfo::headers_size() const {
  return _internal_headers_size();
}
inline void SIPInboundTrunkInfo::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPInboundTrunkInfo::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPInboundTrunkInfo::headers() const {
  // @@protoc_insertion_point(field_map:livekit.SIPInboundTrunkInfo.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPInboundTrunkInfo::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPInboundTrunkInfo::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPInboundTrunkInfo.headers)
  return _internal_mutable_headers();
}

// map<string, string> headers_to_attributes = 10;
inline int SIPInboundTrunkInfo::_internal_headers_to_attributes_size() const {
  return _impl_.headers_to_attributes_.size();
}
inline int SIPInboundTrunkInfo::headers_to_attributes_size() const {
  return _internal_headers_to_attributes_size();
}
inline void SIPInboundTrunkInfo::clear_headers_to_attributes() {
  _impl_.headers_to_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPInboundTrunkInfo::_internal_headers_to_attributes() const {
  return _impl_.headers_to_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPInboundTrunkInfo::headers_to_attributes() const {
  // @@protoc_insertion_point(field_map:livekit.SIPInboundTrunkInfo.headers_to_attributes)
  return _internal_headers_to_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPInboundTrunkInfo::_internal_mutable_headers_to_attributes() {
  return _impl_.headers_to_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPInboundTrunkInfo::mutable_headers_to_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPInboundTrunkInfo.headers_to_attributes)
  return _internal_mutable_headers_to_attributes();
}

// map<string, string> attributes_to_headers = 14;
inline int SIPInboundTrunkInfo::_internal_attributes_to_headers_size() const {
  return _impl_.attributes_to_headers_.size();
}
inline int SIPInboundTrunkInfo::attributes_to_headers_size() const {
  return _internal_attributes_to_headers_size();
}
inline void SIPInboundTrunkInfo::clear_attributes_to_headers() {
  _impl_.attributes_to_headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPInboundTrunkInfo::_internal_attributes_to_headers() const {
  return _impl_.attributes_to_headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPInboundTrunkInfo::attributes_to_headers() const {
  // @@protoc_insertion_point(field_map:livekit.SIPInboundTrunkInfo.attributes_to_headers)
  return _internal_attributes_to_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPInboundTrunkInfo::_internal_mutable_attributes_to_headers() {
  return _impl_.attributes_to_headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPInboundTrunkInfo::mutable_attributes_to_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPInboundTrunkInfo.attributes_to_headers)
  return _internal_mutable_attributes_to_headers();
}

// .livekit.SIPHeaderOptions include_headers = 15;
inline void SIPInboundTrunkInfo::clear_include_headers() {
  _impl_.include_headers_ = 0;
}
inline ::livekit::SIPHeaderOptions SIPInboundTrunkInfo::_internal_include_headers() const {
  return static_cast< ::livekit::SIPHeaderOptions >(_impl_.include_headers_);
}
inline ::livekit::SIPHeaderOptions SIPInboundTrunkInfo::include_headers() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.include_headers)
  return _internal_include_headers();
}
inline void SIPInboundTrunkInfo::_internal_set_include_headers(::livekit::SIPHeaderOptions value) {
  
  _impl_.include_headers_ = value;
}
inline void SIPInboundTrunkInfo::set_include_headers(::livekit::SIPHeaderOptions value) {
  _internal_set_include_headers(value);
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.include_headers)
}

// .google.protobuf.Duration ringing_timeout = 11;
inline bool SIPInboundTrunkInfo::_internal_has_ringing_timeout() const {
  return this != internal_default_instance() && _impl_.ringing_timeout_ != nullptr;
}
inline bool SIPInboundTrunkInfo::has_ringing_timeout() const {
  return _internal_has_ringing_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SIPInboundTrunkInfo::_internal_ringing_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ringing_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SIPInboundTrunkInfo::ringing_timeout() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.ringing_timeout)
  return _internal_ringing_timeout();
}
inline void SIPInboundTrunkInfo::unsafe_arena_set_allocated_ringing_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ringing_timeout_);
  }
  _impl_.ringing_timeout_ = ringing_timeout;
  if (ringing_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPInboundTrunkInfo.ringing_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::release_ringing_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ringing_timeout_;
  _impl_.ringing_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::unsafe_arena_release_ringing_timeout() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.ringing_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ringing_timeout_;
  _impl_.ringing_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::_internal_mutable_ringing_timeout() {
  
  if (_impl_.ringing_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ringing_timeout_ = p;
  }
  return _impl_.ringing_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::mutable_ringing_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ringing_timeout();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.ringing_timeout)
  return _msg;
}
inline void SIPInboundTrunkInfo::set_allocated_ringing_timeout(::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ringing_timeout_);
  }
  if (ringing_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ringing_timeout));
    if (message_arena != submessage_arena) {
      ringing_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ringing_timeout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ringing_timeout_ = ringing_timeout;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.ringing_timeout)
}

// .google.protobuf.Duration max_call_duration = 12;
inline bool SIPInboundTrunkInfo::_internal_has_max_call_duration() const {
  return this != internal_default_instance() && _impl_.max_call_duration_ != nullptr;
}
inline bool SIPInboundTrunkInfo::has_max_call_duration() const {
  return _internal_has_max_call_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SIPInboundTrunkInfo::_internal_max_call_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_call_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SIPInboundTrunkInfo::max_call_duration() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.max_call_duration)
  return _internal_max_call_duration();
}
inline void SIPInboundTrunkInfo::unsafe_arena_set_allocated_max_call_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_call_duration_);
  }
  _impl_.max_call_duration_ = max_call_duration;
  if (max_call_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPInboundTrunkInfo.max_call_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::release_max_call_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_call_duration_;
  _impl_.max_call_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::unsafe_arena_release_max_call_duration() {
  // @@protoc_insertion_point(field_release:livekit.SIPInboundTrunkInfo.max_call_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_call_duration_;
  _impl_.max_call_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::_internal_mutable_max_call_duration() {
  
  if (_impl_.max_call_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_call_duration_ = p;
  }
  return _impl_.max_call_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SIPInboundTrunkInfo::mutable_max_call_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_call_duration();
  // @@protoc_insertion_point(field_mutable:livekit.SIPInboundTrunkInfo.max_call_duration)
  return _msg;
}
inline void SIPInboundTrunkInfo::set_allocated_max_call_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_call_duration_);
  }
  if (max_call_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_call_duration));
    if (message_arena != submessage_arena) {
      max_call_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_call_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_call_duration_ = max_call_duration;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPInboundTrunkInfo.max_call_duration)
}

// bool krisp_enabled = 13;
inline void SIPInboundTrunkInfo::clear_krisp_enabled() {
  _impl_.krisp_enabled_ = false;
}
inline bool SIPInboundTrunkInfo::_internal_krisp_enabled() const {
  return _impl_.krisp_enabled_;
}
inline bool SIPInboundTrunkInfo::krisp_enabled() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.krisp_enabled)
  return _internal_krisp_enabled();
}
inline void SIPInboundTrunkInfo::_internal_set_krisp_enabled(bool value) {
  
  _impl_.krisp_enabled_ = value;
}
inline void SIPInboundTrunkInfo::set_krisp_enabled(bool value) {
  _internal_set_krisp_enabled(value);
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.krisp_enabled)
}

// .livekit.SIPMediaEncryption media_encryption = 16;
inline void SIPInboundTrunkInfo::clear_media_encryption() {
  _impl_.media_encryption_ = 0;
}
inline ::livekit::SIPMediaEncryption SIPInboundTrunkInfo::_internal_media_encryption() const {
  return static_cast< ::livekit::SIPMediaEncryption >(_impl_.media_encryption_);
}
inline ::livekit::SIPMediaEncryption SIPInboundTrunkInfo::media_encryption() const {
  // @@protoc_insertion_point(field_get:livekit.SIPInboundTrunkInfo.media_encryption)
  return _internal_media_encryption();
}
inline void SIPInboundTrunkInfo::_internal_set_media_encryption(::livekit::SIPMediaEncryption value) {
  
  _impl_.media_encryption_ = value;
}
inline void SIPInboundTrunkInfo::set_media_encryption(::livekit::SIPMediaEncryption value) {
  _internal_set_media_encryption(value);
  // @@protoc_insertion_point(field_set:livekit.SIPInboundTrunkInfo.media_encryption)
}

// -------------------------------------------------------------------

// CreateSIPOutboundTrunkRequest

// .livekit.SIPOutboundTrunkInfo trunk = 1;
inline bool CreateSIPOutboundTrunkRequest::_internal_has_trunk() const {
  return this != internal_default_instance() && _impl_.trunk_ != nullptr;
}
inline bool CreateSIPOutboundTrunkRequest::has_trunk() const {
  return _internal_has_trunk();
}
inline void CreateSIPOutboundTrunkRequest::clear_trunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
}
inline const ::livekit::SIPOutboundTrunkInfo& CreateSIPOutboundTrunkRequest::_internal_trunk() const {
  const ::livekit::SIPOutboundTrunkInfo* p = _impl_.trunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPOutboundTrunkInfo&>(
      ::livekit::_SIPOutboundTrunkInfo_default_instance_);
}
inline const ::livekit::SIPOutboundTrunkInfo& CreateSIPOutboundTrunkRequest::trunk() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPOutboundTrunkRequest.trunk)
  return _internal_trunk();
}
inline void CreateSIPOutboundTrunkRequest::unsafe_arena_set_allocated_trunk(
    ::livekit::SIPOutboundTrunkInfo* trunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trunk_);
  }
  _impl_.trunk_ = trunk;
  if (trunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPOutboundTrunkRequest.trunk)
}
inline ::livekit::SIPOutboundTrunkInfo* CreateSIPOutboundTrunkRequest::release_trunk() {
  
  ::livekit::SIPOutboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPOutboundTrunkInfo* CreateSIPOutboundTrunkRequest::unsafe_arena_release_trunk() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPOutboundTrunkRequest.trunk)
  
  ::livekit::SIPOutboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
  return temp;
}
inline ::livekit::SIPOutboundTrunkInfo* CreateSIPOutboundTrunkRequest::_internal_mutable_trunk() {
  
  if (_impl_.trunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPOutboundTrunkInfo>(GetArenaForAllocation());
    _impl_.trunk_ = p;
  }
  return _impl_.trunk_;
}
inline ::livekit::SIPOutboundTrunkInfo* CreateSIPOutboundTrunkRequest::mutable_trunk() {
  ::livekit::SIPOutboundTrunkInfo* _msg = _internal_mutable_trunk();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPOutboundTrunkRequest.trunk)
  return _msg;
}
inline void CreateSIPOutboundTrunkRequest::set_allocated_trunk(::livekit::SIPOutboundTrunkInfo* trunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trunk_;
  }
  if (trunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trunk);
    if (message_arena != submessage_arena) {
      trunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trunk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trunk_ = trunk;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPOutboundTrunkRequest.trunk)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SIPOutboundTrunkInfo

// string sip_trunk_id = 1;
inline void SIPOutboundTrunkInfo::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& SIPOutboundTrunkInfo::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundTrunkInfo::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.sip_trunk_id)
}
inline std::string* SIPOutboundTrunkInfo::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.sip_trunk_id)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void SIPOutboundTrunkInfo::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundTrunkInfo.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void SIPOutboundTrunkInfo::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundTrunkInfo.sip_trunk_id)
}

// string name = 2;
inline void SIPOutboundTrunkInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SIPOutboundTrunkInfo::name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundTrunkInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.name)
}
inline std::string* SIPOutboundTrunkInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.name)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SIPOutboundTrunkInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::release_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundTrunkInfo.name)
  return _impl_.name_.Release();
}
inline void SIPOutboundTrunkInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundTrunkInfo.name)
}

// string metadata = 3;
inline void SIPOutboundTrunkInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& SIPOutboundTrunkInfo::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundTrunkInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.metadata)
}
inline std::string* SIPOutboundTrunkInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.metadata)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void SIPOutboundTrunkInfo::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundTrunkInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void SIPOutboundTrunkInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundTrunkInfo.metadata)
}

// string address = 4;
inline void SIPOutboundTrunkInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SIPOutboundTrunkInfo::address() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundTrunkInfo::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.address)
}
inline std::string* SIPOutboundTrunkInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.address)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SIPOutboundTrunkInfo::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::release_address() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundTrunkInfo.address)
  return _impl_.address_.Release();
}
inline void SIPOutboundTrunkInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundTrunkInfo.address)
}

// .livekit.SIPTransport transport = 5;
inline void SIPOutboundTrunkInfo::clear_transport() {
  _impl_.transport_ = 0;
}
inline ::livekit::SIPTransport SIPOutboundTrunkInfo::_internal_transport() const {
  return static_cast< ::livekit::SIPTransport >(_impl_.transport_);
}
inline ::livekit::SIPTransport SIPOutboundTrunkInfo::transport() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.transport)
  return _internal_transport();
}
inline void SIPOutboundTrunkInfo::_internal_set_transport(::livekit::SIPTransport value) {
  
  _impl_.transport_ = value;
}
inline void SIPOutboundTrunkInfo::set_transport(::livekit::SIPTransport value) {
  _internal_set_transport(value);
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.transport)
}

// repeated string numbers = 6;
inline int SIPOutboundTrunkInfo::_internal_numbers_size() const {
  return _impl_.numbers_.size();
}
inline int SIPOutboundTrunkInfo::numbers_size() const {
  return _internal_numbers_size();
}
inline void SIPOutboundTrunkInfo::clear_numbers() {
  _impl_.numbers_.Clear();
}
inline std::string* SIPOutboundTrunkInfo::add_numbers() {
  std::string* _s = _internal_add_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPOutboundTrunkInfo.numbers)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_numbers(int index) const {
  return _impl_.numbers_.Get(index);
}
inline const std::string& SIPOutboundTrunkInfo::numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.numbers)
  return _internal_numbers(index);
}
inline std::string* SIPOutboundTrunkInfo::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.numbers)
  return _impl_.numbers_.Mutable(index);
}
inline void SIPOutboundTrunkInfo::set_numbers(int index, const std::string& value) {
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.numbers)
}
inline void SIPOutboundTrunkInfo::set_numbers(int index, std::string&& value) {
  _impl_.numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.numbers)
}
inline void SIPOutboundTrunkInfo::set_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPOutboundTrunkInfo.numbers)
}
inline void SIPOutboundTrunkInfo::set_numbers(int index, const char* value, size_t size) {
  _impl_.numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPOutboundTrunkInfo.numbers)
}
inline std::string* SIPOutboundTrunkInfo::_internal_add_numbers() {
  return _impl_.numbers_.Add();
}
inline void SIPOutboundTrunkInfo::add_numbers(const std::string& value) {
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPOutboundTrunkInfo.numbers)
}
inline void SIPOutboundTrunkInfo::add_numbers(std::string&& value) {
  _impl_.numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPOutboundTrunkInfo.numbers)
}
inline void SIPOutboundTrunkInfo::add_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPOutboundTrunkInfo.numbers)
}
inline void SIPOutboundTrunkInfo::add_numbers(const char* value, size_t size) {
  _impl_.numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPOutboundTrunkInfo.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPOutboundTrunkInfo::numbers() const {
  // @@protoc_insertion_point(field_list:livekit.SIPOutboundTrunkInfo.numbers)
  return _impl_.numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPOutboundTrunkInfo::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPOutboundTrunkInfo.numbers)
  return &_impl_.numbers_;
}

// string auth_username = 7;
inline void SIPOutboundTrunkInfo::clear_auth_username() {
  _impl_.auth_username_.ClearToEmpty();
}
inline const std::string& SIPOutboundTrunkInfo::auth_username() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.auth_username)
  return _internal_auth_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundTrunkInfo::set_auth_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.auth_username)
}
inline std::string* SIPOutboundTrunkInfo::mutable_auth_username() {
  std::string* _s = _internal_mutable_auth_username();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.auth_username)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_auth_username() const {
  return _impl_.auth_username_.Get();
}
inline void SIPOutboundTrunkInfo::_internal_set_auth_username(const std::string& value) {
  
  _impl_.auth_username_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::_internal_mutable_auth_username() {
  
  return _impl_.auth_username_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::release_auth_username() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundTrunkInfo.auth_username)
  return _impl_.auth_username_.Release();
}
inline void SIPOutboundTrunkInfo::set_allocated_auth_username(std::string* auth_username) {
  if (auth_username != nullptr) {
    
  } else {
    
  }
  _impl_.auth_username_.SetAllocated(auth_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_username_.IsDefault()) {
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundTrunkInfo.auth_username)
}

// string auth_password = 8;
inline void SIPOutboundTrunkInfo::clear_auth_password() {
  _impl_.auth_password_.ClearToEmpty();
}
inline const std::string& SIPOutboundTrunkInfo::auth_password() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.auth_password)
  return _internal_auth_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundTrunkInfo::set_auth_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.auth_password)
}
inline std::string* SIPOutboundTrunkInfo::mutable_auth_password() {
  std::string* _s = _internal_mutable_auth_password();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundTrunkInfo.auth_password)
  return _s;
}
inline const std::string& SIPOutboundTrunkInfo::_internal_auth_password() const {
  return _impl_.auth_password_.Get();
}
inline void SIPOutboundTrunkInfo::_internal_set_auth_password(const std::string& value) {
  
  _impl_.auth_password_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::_internal_mutable_auth_password() {
  
  return _impl_.auth_password_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundTrunkInfo::release_auth_password() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundTrunkInfo.auth_password)
  return _impl_.auth_password_.Release();
}
inline void SIPOutboundTrunkInfo::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  _impl_.auth_password_.SetAllocated(auth_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_password_.IsDefault()) {
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundTrunkInfo.auth_password)
}

// map<string, string> headers = 9;
inline int SIPOutboundTrunkInfo::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int SIPOutboundTrunkInfo::headers_size() const {
  return _internal_headers_size();
}
inline void SIPOutboundTrunkInfo::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundTrunkInfo::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundTrunkInfo::headers() const {
  // @@protoc_insertion_point(field_map:livekit.SIPOutboundTrunkInfo.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundTrunkInfo::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundTrunkInfo::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPOutboundTrunkInfo.headers)
  return _internal_mutable_headers();
}

// map<string, string> headers_to_attributes = 10;
inline int SIPOutboundTrunkInfo::_internal_headers_to_attributes_size() const {
  return _impl_.headers_to_attributes_.size();
}
inline int SIPOutboundTrunkInfo::headers_to_attributes_size() const {
  return _internal_headers_to_attributes_size();
}
inline void SIPOutboundTrunkInfo::clear_headers_to_attributes() {
  _impl_.headers_to_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundTrunkInfo::_internal_headers_to_attributes() const {
  return _impl_.headers_to_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundTrunkInfo::headers_to_attributes() const {
  // @@protoc_insertion_point(field_map:livekit.SIPOutboundTrunkInfo.headers_to_attributes)
  return _internal_headers_to_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundTrunkInfo::_internal_mutable_headers_to_attributes() {
  return _impl_.headers_to_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundTrunkInfo::mutable_headers_to_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPOutboundTrunkInfo.headers_to_attributes)
  return _internal_mutable_headers_to_attributes();
}

// map<string, string> attributes_to_headers = 11;
inline int SIPOutboundTrunkInfo::_internal_attributes_to_headers_size() const {
  return _impl_.attributes_to_headers_.size();
}
inline int SIPOutboundTrunkInfo::attributes_to_headers_size() const {
  return _internal_attributes_to_headers_size();
}
inline void SIPOutboundTrunkInfo::clear_attributes_to_headers() {
  _impl_.attributes_to_headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundTrunkInfo::_internal_attributes_to_headers() const {
  return _impl_.attributes_to_headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundTrunkInfo::attributes_to_headers() const {
  // @@protoc_insertion_point(field_map:livekit.SIPOutboundTrunkInfo.attributes_to_headers)
  return _internal_attributes_to_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundTrunkInfo::_internal_mutable_attributes_to_headers() {
  return _impl_.attributes_to_headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundTrunkInfo::mutable_attributes_to_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPOutboundTrunkInfo.attributes_to_headers)
  return _internal_mutable_attributes_to_headers();
}

// .livekit.SIPHeaderOptions include_headers = 12;
inline void SIPOutboundTrunkInfo::clear_include_headers() {
  _impl_.include_headers_ = 0;
}
inline ::livekit::SIPHeaderOptions SIPOutboundTrunkInfo::_internal_include_headers() const {
  return static_cast< ::livekit::SIPHeaderOptions >(_impl_.include_headers_);
}
inline ::livekit::SIPHeaderOptions SIPOutboundTrunkInfo::include_headers() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.include_headers)
  return _internal_include_headers();
}
inline void SIPOutboundTrunkInfo::_internal_set_include_headers(::livekit::SIPHeaderOptions value) {
  
  _impl_.include_headers_ = value;
}
inline void SIPOutboundTrunkInfo::set_include_headers(::livekit::SIPHeaderOptions value) {
  _internal_set_include_headers(value);
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.include_headers)
}

// .livekit.SIPMediaEncryption media_encryption = 13;
inline void SIPOutboundTrunkInfo::clear_media_encryption() {
  _impl_.media_encryption_ = 0;
}
inline ::livekit::SIPMediaEncryption SIPOutboundTrunkInfo::_internal_media_encryption() const {
  return static_cast< ::livekit::SIPMediaEncryption >(_impl_.media_encryption_);
}
inline ::livekit::SIPMediaEncryption SIPOutboundTrunkInfo::media_encryption() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundTrunkInfo.media_encryption)
  return _internal_media_encryption();
}
inline void SIPOutboundTrunkInfo::_internal_set_media_encryption(::livekit::SIPMediaEncryption value) {
  
  _impl_.media_encryption_ = value;
}
inline void SIPOutboundTrunkInfo::set_media_encryption(::livekit::SIPMediaEncryption value) {
  _internal_set_media_encryption(value);
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundTrunkInfo.media_encryption)
}

// -------------------------------------------------------------------

// GetSIPInboundTrunkRequest

// string sip_trunk_id = 1;
inline void GetSIPInboundTrunkRequest::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& GetSIPInboundTrunkRequest::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.GetSIPInboundTrunkRequest.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSIPInboundTrunkRequest::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.GetSIPInboundTrunkRequest.sip_trunk_id)
}
inline std::string* GetSIPInboundTrunkRequest::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.GetSIPInboundTrunkRequest.sip_trunk_id)
  return _s;
}
inline const std::string& GetSIPInboundTrunkRequest::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void GetSIPInboundTrunkRequest::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSIPInboundTrunkRequest::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSIPInboundTrunkRequest::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.GetSIPInboundTrunkRequest.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void GetSIPInboundTrunkRequest::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.GetSIPInboundTrunkRequest.sip_trunk_id)
}

// -------------------------------------------------------------------

// GetSIPInboundTrunkResponse

// .livekit.SIPInboundTrunkInfo trunk = 1;
inline bool GetSIPInboundTrunkResponse::_internal_has_trunk() const {
  return this != internal_default_instance() && _impl_.trunk_ != nullptr;
}
inline bool GetSIPInboundTrunkResponse::has_trunk() const {
  return _internal_has_trunk();
}
inline void GetSIPInboundTrunkResponse::clear_trunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
}
inline const ::livekit::SIPInboundTrunkInfo& GetSIPInboundTrunkResponse::_internal_trunk() const {
  const ::livekit::SIPInboundTrunkInfo* p = _impl_.trunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPInboundTrunkInfo&>(
      ::livekit::_SIPInboundTrunkInfo_default_instance_);
}
inline const ::livekit::SIPInboundTrunkInfo& GetSIPInboundTrunkResponse::trunk() const {
  // @@protoc_insertion_point(field_get:livekit.GetSIPInboundTrunkResponse.trunk)
  return _internal_trunk();
}
inline void GetSIPInboundTrunkResponse::unsafe_arena_set_allocated_trunk(
    ::livekit::SIPInboundTrunkInfo* trunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trunk_);
  }
  _impl_.trunk_ = trunk;
  if (trunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.GetSIPInboundTrunkResponse.trunk)
}
inline ::livekit::SIPInboundTrunkInfo* GetSIPInboundTrunkResponse::release_trunk() {
  
  ::livekit::SIPInboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPInboundTrunkInfo* GetSIPInboundTrunkResponse::unsafe_arena_release_trunk() {
  // @@protoc_insertion_point(field_release:livekit.GetSIPInboundTrunkResponse.trunk)
  
  ::livekit::SIPInboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
  return temp;
}
inline ::livekit::SIPInboundTrunkInfo* GetSIPInboundTrunkResponse::_internal_mutable_trunk() {
  
  if (_impl_.trunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPInboundTrunkInfo>(GetArenaForAllocation());
    _impl_.trunk_ = p;
  }
  return _impl_.trunk_;
}
inline ::livekit::SIPInboundTrunkInfo* GetSIPInboundTrunkResponse::mutable_trunk() {
  ::livekit::SIPInboundTrunkInfo* _msg = _internal_mutable_trunk();
  // @@protoc_insertion_point(field_mutable:livekit.GetSIPInboundTrunkResponse.trunk)
  return _msg;
}
inline void GetSIPInboundTrunkResponse::set_allocated_trunk(::livekit::SIPInboundTrunkInfo* trunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trunk_;
  }
  if (trunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trunk);
    if (message_arena != submessage_arena) {
      trunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trunk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trunk_ = trunk;
  // @@protoc_insertion_point(field_set_allocated:livekit.GetSIPInboundTrunkResponse.trunk)
}

// -------------------------------------------------------------------

// GetSIPOutboundTrunkRequest

// string sip_trunk_id = 1;
inline void GetSIPOutboundTrunkRequest::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& GetSIPOutboundTrunkRequest::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.GetSIPOutboundTrunkRequest.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSIPOutboundTrunkRequest::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.GetSIPOutboundTrunkRequest.sip_trunk_id)
}
inline std::string* GetSIPOutboundTrunkRequest::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.GetSIPOutboundTrunkRequest.sip_trunk_id)
  return _s;
}
inline const std::string& GetSIPOutboundTrunkRequest::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void GetSIPOutboundTrunkRequest::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSIPOutboundTrunkRequest::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSIPOutboundTrunkRequest::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.GetSIPOutboundTrunkRequest.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void GetSIPOutboundTrunkRequest::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.GetSIPOutboundTrunkRequest.sip_trunk_id)
}

// -------------------------------------------------------------------

// GetSIPOutboundTrunkResponse

// .livekit.SIPOutboundTrunkInfo trunk = 1;
inline bool GetSIPOutboundTrunkResponse::_internal_has_trunk() const {
  return this != internal_default_instance() && _impl_.trunk_ != nullptr;
}
inline bool GetSIPOutboundTrunkResponse::has_trunk() const {
  return _internal_has_trunk();
}
inline void GetSIPOutboundTrunkResponse::clear_trunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
}
inline const ::livekit::SIPOutboundTrunkInfo& GetSIPOutboundTrunkResponse::_internal_trunk() const {
  const ::livekit::SIPOutboundTrunkInfo* p = _impl_.trunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPOutboundTrunkInfo&>(
      ::livekit::_SIPOutboundTrunkInfo_default_instance_);
}
inline const ::livekit::SIPOutboundTrunkInfo& GetSIPOutboundTrunkResponse::trunk() const {
  // @@protoc_insertion_point(field_get:livekit.GetSIPOutboundTrunkResponse.trunk)
  return _internal_trunk();
}
inline void GetSIPOutboundTrunkResponse::unsafe_arena_set_allocated_trunk(
    ::livekit::SIPOutboundTrunkInfo* trunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trunk_);
  }
  _impl_.trunk_ = trunk;
  if (trunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.GetSIPOutboundTrunkResponse.trunk)
}
inline ::livekit::SIPOutboundTrunkInfo* GetSIPOutboundTrunkResponse::release_trunk() {
  
  ::livekit::SIPOutboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPOutboundTrunkInfo* GetSIPOutboundTrunkResponse::unsafe_arena_release_trunk() {
  // @@protoc_insertion_point(field_release:livekit.GetSIPOutboundTrunkResponse.trunk)
  
  ::livekit::SIPOutboundTrunkInfo* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
  return temp;
}
inline ::livekit::SIPOutboundTrunkInfo* GetSIPOutboundTrunkResponse::_internal_mutable_trunk() {
  
  if (_impl_.trunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPOutboundTrunkInfo>(GetArenaForAllocation());
    _impl_.trunk_ = p;
  }
  return _impl_.trunk_;
}
inline ::livekit::SIPOutboundTrunkInfo* GetSIPOutboundTrunkResponse::mutable_trunk() {
  ::livekit::SIPOutboundTrunkInfo* _msg = _internal_mutable_trunk();
  // @@protoc_insertion_point(field_mutable:livekit.GetSIPOutboundTrunkResponse.trunk)
  return _msg;
}
inline void GetSIPOutboundTrunkResponse::set_allocated_trunk(::livekit::SIPOutboundTrunkInfo* trunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trunk_;
  }
  if (trunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trunk);
    if (message_arena != submessage_arena) {
      trunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trunk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trunk_ = trunk;
  // @@protoc_insertion_point(field_set_allocated:livekit.GetSIPOutboundTrunkResponse.trunk)
}

// -------------------------------------------------------------------

// ListSIPTrunkRequest

// .livekit.Pagination page = 1;
inline bool ListSIPTrunkRequest::_internal_has_page() const {
  return this != internal_default_instance() && _impl_.page_ != nullptr;
}
inline bool ListSIPTrunkRequest::has_page() const {
  return _internal_has_page();
}
inline const ::livekit::Pagination& ListSIPTrunkRequest::_internal_page() const {
  const ::livekit::Pagination* p = _impl_.page_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::Pagination&>(
      ::livekit::_Pagination_default_instance_);
}
inline const ::livekit::Pagination& ListSIPTrunkRequest::page() const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPTrunkRequest.page)
  return _internal_page();
}
inline void ListSIPTrunkRequest::unsafe_arena_set_allocated_page(
    ::livekit::Pagination* page) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  _impl_.page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ListSIPTrunkRequest.page)
}
inline ::livekit::Pagination* ListSIPTrunkRequest::release_page() {
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::Pagination* ListSIPTrunkRequest::unsafe_arena_release_page() {
  // @@protoc_insertion_point(field_release:livekit.ListSIPTrunkRequest.page)
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
  return temp;
}
inline ::livekit::Pagination* ListSIPTrunkRequest::_internal_mutable_page() {
  
  if (_impl_.page_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::Pagination>(GetArenaForAllocation());
    _impl_.page_ = p;
  }
  return _impl_.page_;
}
inline ::livekit::Pagination* ListSIPTrunkRequest::mutable_page() {
  ::livekit::Pagination* _msg = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPTrunkRequest.page)
  return _msg;
}
inline void ListSIPTrunkRequest::set_allocated_page(::livekit::Pagination* page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  if (page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page));
    if (message_arena != submessage_arena) {
      page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.page_ = page;
  // @@protoc_insertion_point(field_set_allocated:livekit.ListSIPTrunkRequest.page)
}

// -------------------------------------------------------------------

// ListSIPTrunkResponse

// repeated .livekit.SIPTrunkInfo items = 1;
inline int ListSIPTrunkResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ListSIPTrunkResponse::items_size() const {
  return _internal_items_size();
}
inline void ListSIPTrunkResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::livekit::SIPTrunkInfo* ListSIPTrunkResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPTrunkResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPTrunkInfo >*
ListSIPTrunkResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPTrunkResponse.items)
  return &_impl_.items_;
}
inline const ::livekit::SIPTrunkInfo& ListSIPTrunkResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::livekit::SIPTrunkInfo& ListSIPTrunkResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPTrunkResponse.items)
  return _internal_items(index);
}
inline ::livekit::SIPTrunkInfo* ListSIPTrunkResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::livekit::SIPTrunkInfo* ListSIPTrunkResponse::add_items() {
  ::livekit::SIPTrunkInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:livekit.ListSIPTrunkResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPTrunkInfo >&
ListSIPTrunkResponse::items() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPTrunkResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// ListSIPInboundTrunkRequest

// .livekit.Pagination page = 3;
inline bool ListSIPInboundTrunkRequest::_internal_has_page() const {
  return this != internal_default_instance() && _impl_.page_ != nullptr;
}
inline bool ListSIPInboundTrunkRequest::has_page() const {
  return _internal_has_page();
}
inline const ::livekit::Pagination& ListSIPInboundTrunkRequest::_internal_page() const {
  const ::livekit::Pagination* p = _impl_.page_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::Pagination&>(
      ::livekit::_Pagination_default_instance_);
}
inline const ::livekit::Pagination& ListSIPInboundTrunkRequest::page() const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPInboundTrunkRequest.page)
  return _internal_page();
}
inline void ListSIPInboundTrunkRequest::unsafe_arena_set_allocated_page(
    ::livekit::Pagination* page) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  _impl_.page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ListSIPInboundTrunkRequest.page)
}
inline ::livekit::Pagination* ListSIPInboundTrunkRequest::release_page() {
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::Pagination* ListSIPInboundTrunkRequest::unsafe_arena_release_page() {
  // @@protoc_insertion_point(field_release:livekit.ListSIPInboundTrunkRequest.page)
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
  return temp;
}
inline ::livekit::Pagination* ListSIPInboundTrunkRequest::_internal_mutable_page() {
  
  if (_impl_.page_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::Pagination>(GetArenaForAllocation());
    _impl_.page_ = p;
  }
  return _impl_.page_;
}
inline ::livekit::Pagination* ListSIPInboundTrunkRequest::mutable_page() {
  ::livekit::Pagination* _msg = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPInboundTrunkRequest.page)
  return _msg;
}
inline void ListSIPInboundTrunkRequest::set_allocated_page(::livekit::Pagination* page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  if (page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page));
    if (message_arena != submessage_arena) {
      page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.page_ = page;
  // @@protoc_insertion_point(field_set_allocated:livekit.ListSIPInboundTrunkRequest.page)
}

// repeated string trunk_ids = 1;
inline int ListSIPInboundTrunkRequest::_internal_trunk_ids_size() const {
  return _impl_.trunk_ids_.size();
}
inline int ListSIPInboundTrunkRequest::trunk_ids_size() const {
  return _internal_trunk_ids_size();
}
inline void ListSIPInboundTrunkRequest::clear_trunk_ids() {
  _impl_.trunk_ids_.Clear();
}
inline std::string* ListSIPInboundTrunkRequest::add_trunk_ids() {
  std::string* _s = _internal_add_trunk_ids();
  // @@protoc_insertion_point(field_add_mutable:livekit.ListSIPInboundTrunkRequest.trunk_ids)
  return _s;
}
inline const std::string& ListSIPInboundTrunkRequest::_internal_trunk_ids(int index) const {
  return _impl_.trunk_ids_.Get(index);
}
inline const std::string& ListSIPInboundTrunkRequest::trunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPInboundTrunkRequest.trunk_ids)
  return _internal_trunk_ids(index);
}
inline std::string* ListSIPInboundTrunkRequest::mutable_trunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPInboundTrunkRequest.trunk_ids)
  return _impl_.trunk_ids_.Mutable(index);
}
inline void ListSIPInboundTrunkRequest::set_trunk_ids(int index, const std::string& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline void ListSIPInboundTrunkRequest::set_trunk_ids(int index, std::string&& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline void ListSIPInboundTrunkRequest::set_trunk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline void ListSIPInboundTrunkRequest::set_trunk_ids(int index, const char* value, size_t size) {
  _impl_.trunk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline std::string* ListSIPInboundTrunkRequest::_internal_add_trunk_ids() {
  return _impl_.trunk_ids_.Add();
}
inline void ListSIPInboundTrunkRequest::add_trunk_ids(const std::string& value) {
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline void ListSIPInboundTrunkRequest::add_trunk_ids(std::string&& value) {
  _impl_.trunk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline void ListSIPInboundTrunkRequest::add_trunk_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline void ListSIPInboundTrunkRequest::add_trunk_ids(const char* value, size_t size) {
  _impl_.trunk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.ListSIPInboundTrunkRequest.trunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSIPInboundTrunkRequest::trunk_ids() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPInboundTrunkRequest.trunk_ids)
  return _impl_.trunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSIPInboundTrunkRequest::mutable_trunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPInboundTrunkRequest.trunk_ids)
  return &_impl_.trunk_ids_;
}

// repeated string numbers = 2;
inline int ListSIPInboundTrunkRequest::_internal_numbers_size() const {
  return _impl_.numbers_.size();
}
inline int ListSIPInboundTrunkRequest::numbers_size() const {
  return _internal_numbers_size();
}
inline void ListSIPInboundTrunkRequest::clear_numbers() {
  _impl_.numbers_.Clear();
}
inline std::string* ListSIPInboundTrunkRequest::add_numbers() {
  std::string* _s = _internal_add_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.ListSIPInboundTrunkRequest.numbers)
  return _s;
}
inline const std::string& ListSIPInboundTrunkRequest::_internal_numbers(int index) const {
  return _impl_.numbers_.Get(index);
}
inline const std::string& ListSIPInboundTrunkRequest::numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPInboundTrunkRequest.numbers)
  return _internal_numbers(index);
}
inline std::string* ListSIPInboundTrunkRequest::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPInboundTrunkRequest.numbers)
  return _impl_.numbers_.Mutable(index);
}
inline void ListSIPInboundTrunkRequest::set_numbers(int index, const std::string& value) {
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline void ListSIPInboundTrunkRequest::set_numbers(int index, std::string&& value) {
  _impl_.numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline void ListSIPInboundTrunkRequest::set_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline void ListSIPInboundTrunkRequest::set_numbers(int index, const char* value, size_t size) {
  _impl_.numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline std::string* ListSIPInboundTrunkRequest::_internal_add_numbers() {
  return _impl_.numbers_.Add();
}
inline void ListSIPInboundTrunkRequest::add_numbers(const std::string& value) {
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline void ListSIPInboundTrunkRequest::add_numbers(std::string&& value) {
  _impl_.numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline void ListSIPInboundTrunkRequest::add_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline void ListSIPInboundTrunkRequest::add_numbers(const char* value, size_t size) {
  _impl_.numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.ListSIPInboundTrunkRequest.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSIPInboundTrunkRequest::numbers() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPInboundTrunkRequest.numbers)
  return _impl_.numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSIPInboundTrunkRequest::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPInboundTrunkRequest.numbers)
  return &_impl_.numbers_;
}

// -------------------------------------------------------------------

// ListSIPInboundTrunkResponse

// repeated .livekit.SIPInboundTrunkInfo items = 1;
inline int ListSIPInboundTrunkResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ListSIPInboundTrunkResponse::items_size() const {
  return _internal_items_size();
}
inline void ListSIPInboundTrunkResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::livekit::SIPInboundTrunkInfo* ListSIPInboundTrunkResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPInboundTrunkResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPInboundTrunkInfo >*
ListSIPInboundTrunkResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPInboundTrunkResponse.items)
  return &_impl_.items_;
}
inline const ::livekit::SIPInboundTrunkInfo& ListSIPInboundTrunkResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::livekit::SIPInboundTrunkInfo& ListSIPInboundTrunkResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPInboundTrunkResponse.items)
  return _internal_items(index);
}
inline ::livekit::SIPInboundTrunkInfo* ListSIPInboundTrunkResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::livekit::SIPInboundTrunkInfo* ListSIPInboundTrunkResponse::add_items() {
  ::livekit::SIPInboundTrunkInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:livekit.ListSIPInboundTrunkResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPInboundTrunkInfo >&
ListSIPInboundTrunkResponse::items() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPInboundTrunkResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// ListSIPOutboundTrunkRequest

// .livekit.Pagination page = 3;
inline bool ListSIPOutboundTrunkRequest::_internal_has_page() const {
  return this != internal_default_instance() && _impl_.page_ != nullptr;
}
inline bool ListSIPOutboundTrunkRequest::has_page() const {
  return _internal_has_page();
}
inline const ::livekit::Pagination& ListSIPOutboundTrunkRequest::_internal_page() const {
  const ::livekit::Pagination* p = _impl_.page_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::Pagination&>(
      ::livekit::_Pagination_default_instance_);
}
inline const ::livekit::Pagination& ListSIPOutboundTrunkRequest::page() const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPOutboundTrunkRequest.page)
  return _internal_page();
}
inline void ListSIPOutboundTrunkRequest::unsafe_arena_set_allocated_page(
    ::livekit::Pagination* page) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  _impl_.page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ListSIPOutboundTrunkRequest.page)
}
inline ::livekit::Pagination* ListSIPOutboundTrunkRequest::release_page() {
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::Pagination* ListSIPOutboundTrunkRequest::unsafe_arena_release_page() {
  // @@protoc_insertion_point(field_release:livekit.ListSIPOutboundTrunkRequest.page)
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
  return temp;
}
inline ::livekit::Pagination* ListSIPOutboundTrunkRequest::_internal_mutable_page() {
  
  if (_impl_.page_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::Pagination>(GetArenaForAllocation());
    _impl_.page_ = p;
  }
  return _impl_.page_;
}
inline ::livekit::Pagination* ListSIPOutboundTrunkRequest::mutable_page() {
  ::livekit::Pagination* _msg = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPOutboundTrunkRequest.page)
  return _msg;
}
inline void ListSIPOutboundTrunkRequest::set_allocated_page(::livekit::Pagination* page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  if (page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page));
    if (message_arena != submessage_arena) {
      page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.page_ = page;
  // @@protoc_insertion_point(field_set_allocated:livekit.ListSIPOutboundTrunkRequest.page)
}

// repeated string trunk_ids = 1;
inline int ListSIPOutboundTrunkRequest::_internal_trunk_ids_size() const {
  return _impl_.trunk_ids_.size();
}
inline int ListSIPOutboundTrunkRequest::trunk_ids_size() const {
  return _internal_trunk_ids_size();
}
inline void ListSIPOutboundTrunkRequest::clear_trunk_ids() {
  _impl_.trunk_ids_.Clear();
}
inline std::string* ListSIPOutboundTrunkRequest::add_trunk_ids() {
  std::string* _s = _internal_add_trunk_ids();
  // @@protoc_insertion_point(field_add_mutable:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
  return _s;
}
inline const std::string& ListSIPOutboundTrunkRequest::_internal_trunk_ids(int index) const {
  return _impl_.trunk_ids_.Get(index);
}
inline const std::string& ListSIPOutboundTrunkRequest::trunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
  return _internal_trunk_ids(index);
}
inline std::string* ListSIPOutboundTrunkRequest::mutable_trunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
  return _impl_.trunk_ids_.Mutable(index);
}
inline void ListSIPOutboundTrunkRequest::set_trunk_ids(int index, const std::string& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline void ListSIPOutboundTrunkRequest::set_trunk_ids(int index, std::string&& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline void ListSIPOutboundTrunkRequest::set_trunk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline void ListSIPOutboundTrunkRequest::set_trunk_ids(int index, const char* value, size_t size) {
  _impl_.trunk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline std::string* ListSIPOutboundTrunkRequest::_internal_add_trunk_ids() {
  return _impl_.trunk_ids_.Add();
}
inline void ListSIPOutboundTrunkRequest::add_trunk_ids(const std::string& value) {
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline void ListSIPOutboundTrunkRequest::add_trunk_ids(std::string&& value) {
  _impl_.trunk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline void ListSIPOutboundTrunkRequest::add_trunk_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline void ListSIPOutboundTrunkRequest::add_trunk_ids(const char* value, size_t size) {
  _impl_.trunk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSIPOutboundTrunkRequest::trunk_ids() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
  return _impl_.trunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSIPOutboundTrunkRequest::mutable_trunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPOutboundTrunkRequest.trunk_ids)
  return &_impl_.trunk_ids_;
}

// repeated string numbers = 2;
inline int ListSIPOutboundTrunkRequest::_internal_numbers_size() const {
  return _impl_.numbers_.size();
}
inline int ListSIPOutboundTrunkRequest::numbers_size() const {
  return _internal_numbers_size();
}
inline void ListSIPOutboundTrunkRequest::clear_numbers() {
  _impl_.numbers_.Clear();
}
inline std::string* ListSIPOutboundTrunkRequest::add_numbers() {
  std::string* _s = _internal_add_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.ListSIPOutboundTrunkRequest.numbers)
  return _s;
}
inline const std::string& ListSIPOutboundTrunkRequest::_internal_numbers(int index) const {
  return _impl_.numbers_.Get(index);
}
inline const std::string& ListSIPOutboundTrunkRequest::numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPOutboundTrunkRequest.numbers)
  return _internal_numbers(index);
}
inline std::string* ListSIPOutboundTrunkRequest::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPOutboundTrunkRequest.numbers)
  return _impl_.numbers_.Mutable(index);
}
inline void ListSIPOutboundTrunkRequest::set_numbers(int index, const std::string& value) {
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline void ListSIPOutboundTrunkRequest::set_numbers(int index, std::string&& value) {
  _impl_.numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline void ListSIPOutboundTrunkRequest::set_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline void ListSIPOutboundTrunkRequest::set_numbers(int index, const char* value, size_t size) {
  _impl_.numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline std::string* ListSIPOutboundTrunkRequest::_internal_add_numbers() {
  return _impl_.numbers_.Add();
}
inline void ListSIPOutboundTrunkRequest::add_numbers(const std::string& value) {
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline void ListSIPOutboundTrunkRequest::add_numbers(std::string&& value) {
  _impl_.numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline void ListSIPOutboundTrunkRequest::add_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline void ListSIPOutboundTrunkRequest::add_numbers(const char* value, size_t size) {
  _impl_.numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.ListSIPOutboundTrunkRequest.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSIPOutboundTrunkRequest::numbers() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPOutboundTrunkRequest.numbers)
  return _impl_.numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSIPOutboundTrunkRequest::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPOutboundTrunkRequest.numbers)
  return &_impl_.numbers_;
}

// -------------------------------------------------------------------

// ListSIPOutboundTrunkResponse

// repeated .livekit.SIPOutboundTrunkInfo items = 1;
inline int ListSIPOutboundTrunkResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ListSIPOutboundTrunkResponse::items_size() const {
  return _internal_items_size();
}
inline void ListSIPOutboundTrunkResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::livekit::SIPOutboundTrunkInfo* ListSIPOutboundTrunkResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPOutboundTrunkResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPOutboundTrunkInfo >*
ListSIPOutboundTrunkResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPOutboundTrunkResponse.items)
  return &_impl_.items_;
}
inline const ::livekit::SIPOutboundTrunkInfo& ListSIPOutboundTrunkResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::livekit::SIPOutboundTrunkInfo& ListSIPOutboundTrunkResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPOutboundTrunkResponse.items)
  return _internal_items(index);
}
inline ::livekit::SIPOutboundTrunkInfo* ListSIPOutboundTrunkResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::livekit::SIPOutboundTrunkInfo* ListSIPOutboundTrunkResponse::add_items() {
  ::livekit::SIPOutboundTrunkInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:livekit.ListSIPOutboundTrunkResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPOutboundTrunkInfo >&
ListSIPOutboundTrunkResponse::items() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPOutboundTrunkResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// DeleteSIPTrunkRequest

// string sip_trunk_id = 1;
inline void DeleteSIPTrunkRequest::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& DeleteSIPTrunkRequest::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.DeleteSIPTrunkRequest.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSIPTrunkRequest::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.DeleteSIPTrunkRequest.sip_trunk_id)
}
inline std::string* DeleteSIPTrunkRequest::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.DeleteSIPTrunkRequest.sip_trunk_id)
  return _s;
}
inline const std::string& DeleteSIPTrunkRequest::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void DeleteSIPTrunkRequest::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSIPTrunkRequest::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSIPTrunkRequest::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.DeleteSIPTrunkRequest.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void DeleteSIPTrunkRequest::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.DeleteSIPTrunkRequest.sip_trunk_id)
}

// -------------------------------------------------------------------

// SIPDispatchRuleDirect

// string room_name = 1;
inline void SIPDispatchRuleDirect::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleDirect::room_name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleDirect.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleDirect::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleDirect.room_name)
}
inline std::string* SIPDispatchRuleDirect::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleDirect.room_name)
  return _s;
}
inline const std::string& SIPDispatchRuleDirect::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void SIPDispatchRuleDirect::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleDirect::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleDirect::release_room_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleDirect.room_name)
  return _impl_.room_name_.Release();
}
inline void SIPDispatchRuleDirect::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleDirect.room_name)
}

// string pin = 2;
inline void SIPDispatchRuleDirect::clear_pin() {
  _impl_.pin_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleDirect::pin() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleDirect.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleDirect::set_pin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleDirect.pin)
}
inline std::string* SIPDispatchRuleDirect::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleDirect.pin)
  return _s;
}
inline const std::string& SIPDispatchRuleDirect::_internal_pin() const {
  return _impl_.pin_.Get();
}
inline void SIPDispatchRuleDirect::_internal_set_pin(const std::string& value) {
  
  _impl_.pin_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleDirect::_internal_mutable_pin() {
  
  return _impl_.pin_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleDirect::release_pin() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleDirect.pin)
  return _impl_.pin_.Release();
}
inline void SIPDispatchRuleDirect::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  _impl_.pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pin_.IsDefault()) {
    _impl_.pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleDirect.pin)
}

// -------------------------------------------------------------------

// SIPDispatchRuleIndividual

// string room_prefix = 1;
inline void SIPDispatchRuleIndividual::clear_room_prefix() {
  _impl_.room_prefix_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleIndividual::room_prefix() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleIndividual.room_prefix)
  return _internal_room_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleIndividual::set_room_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleIndividual.room_prefix)
}
inline std::string* SIPDispatchRuleIndividual::mutable_room_prefix() {
  std::string* _s = _internal_mutable_room_prefix();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleIndividual.room_prefix)
  return _s;
}
inline const std::string& SIPDispatchRuleIndividual::_internal_room_prefix() const {
  return _impl_.room_prefix_.Get();
}
inline void SIPDispatchRuleIndividual::_internal_set_room_prefix(const std::string& value) {
  
  _impl_.room_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleIndividual::_internal_mutable_room_prefix() {
  
  return _impl_.room_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleIndividual::release_room_prefix() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleIndividual.room_prefix)
  return _impl_.room_prefix_.Release();
}
inline void SIPDispatchRuleIndividual::set_allocated_room_prefix(std::string* room_prefix) {
  if (room_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.room_prefix_.SetAllocated(room_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_prefix_.IsDefault()) {
    _impl_.room_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleIndividual.room_prefix)
}

// string pin = 2;
inline void SIPDispatchRuleIndividual::clear_pin() {
  _impl_.pin_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleIndividual::pin() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleIndividual.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleIndividual::set_pin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleIndividual.pin)
}
inline std::string* SIPDispatchRuleIndividual::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleIndividual.pin)
  return _s;
}
inline const std::string& SIPDispatchRuleIndividual::_internal_pin() const {
  return _impl_.pin_.Get();
}
inline void SIPDispatchRuleIndividual::_internal_set_pin(const std::string& value) {
  
  _impl_.pin_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleIndividual::_internal_mutable_pin() {
  
  return _impl_.pin_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleIndividual::release_pin() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleIndividual.pin)
  return _impl_.pin_.Release();
}
inline void SIPDispatchRuleIndividual::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  _impl_.pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pin_.IsDefault()) {
    _impl_.pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleIndividual.pin)
}

// -------------------------------------------------------------------

// SIPDispatchRuleCallee

// string room_prefix = 1;
inline void SIPDispatchRuleCallee::clear_room_prefix() {
  _impl_.room_prefix_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleCallee::room_prefix() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleCallee.room_prefix)
  return _internal_room_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleCallee::set_room_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleCallee.room_prefix)
}
inline std::string* SIPDispatchRuleCallee::mutable_room_prefix() {
  std::string* _s = _internal_mutable_room_prefix();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleCallee.room_prefix)
  return _s;
}
inline const std::string& SIPDispatchRuleCallee::_internal_room_prefix() const {
  return _impl_.room_prefix_.Get();
}
inline void SIPDispatchRuleCallee::_internal_set_room_prefix(const std::string& value) {
  
  _impl_.room_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleCallee::_internal_mutable_room_prefix() {
  
  return _impl_.room_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleCallee::release_room_prefix() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleCallee.room_prefix)
  return _impl_.room_prefix_.Release();
}
inline void SIPDispatchRuleCallee::set_allocated_room_prefix(std::string* room_prefix) {
  if (room_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.room_prefix_.SetAllocated(room_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_prefix_.IsDefault()) {
    _impl_.room_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleCallee.room_prefix)
}

// string pin = 2;
inline void SIPDispatchRuleCallee::clear_pin() {
  _impl_.pin_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleCallee::pin() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleCallee.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleCallee::set_pin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleCallee.pin)
}
inline std::string* SIPDispatchRuleCallee::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleCallee.pin)
  return _s;
}
inline const std::string& SIPDispatchRuleCallee::_internal_pin() const {
  return _impl_.pin_.Get();
}
inline void SIPDispatchRuleCallee::_internal_set_pin(const std::string& value) {
  
  _impl_.pin_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleCallee::_internal_mutable_pin() {
  
  return _impl_.pin_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleCallee::release_pin() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleCallee.pin)
  return _impl_.pin_.Release();
}
inline void SIPDispatchRuleCallee::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  _impl_.pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pin_.IsDefault()) {
    _impl_.pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleCallee.pin)
}

// bool randomize = 3;
inline void SIPDispatchRuleCallee::clear_randomize() {
  _impl_.randomize_ = false;
}
inline bool SIPDispatchRuleCallee::_internal_randomize() const {
  return _impl_.randomize_;
}
inline bool SIPDispatchRuleCallee::randomize() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleCallee.randomize)
  return _internal_randomize();
}
inline void SIPDispatchRuleCallee::_internal_set_randomize(bool value) {
  
  _impl_.randomize_ = value;
}
inline void SIPDispatchRuleCallee::set_randomize(bool value) {
  _internal_set_randomize(value);
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleCallee.randomize)
}

// -------------------------------------------------------------------

// SIPDispatchRule

// .livekit.SIPDispatchRuleDirect dispatch_rule_direct = 1;
inline bool SIPDispatchRule::_internal_has_dispatch_rule_direct() const {
  return rule_case() == kDispatchRuleDirect;
}
inline bool SIPDispatchRule::has_dispatch_rule_direct() const {
  return _internal_has_dispatch_rule_direct();
}
inline void SIPDispatchRule::set_has_dispatch_rule_direct() {
  _impl_._oneof_case_[0] = kDispatchRuleDirect;
}
inline void SIPDispatchRule::clear_dispatch_rule_direct() {
  if (_internal_has_dispatch_rule_direct()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rule_.dispatch_rule_direct_;
    }
    clear_has_rule();
  }
}
inline ::livekit::SIPDispatchRuleDirect* SIPDispatchRule::release_dispatch_rule_direct() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRule.dispatch_rule_direct)
  if (_internal_has_dispatch_rule_direct()) {
    clear_has_rule();
    ::livekit::SIPDispatchRuleDirect* temp = _impl_.rule_.dispatch_rule_direct_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rule_.dispatch_rule_direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::SIPDispatchRuleDirect& SIPDispatchRule::_internal_dispatch_rule_direct() const {
  return _internal_has_dispatch_rule_direct()
      ? *_impl_.rule_.dispatch_rule_direct_
      : reinterpret_cast< ::livekit::SIPDispatchRuleDirect&>(::livekit::_SIPDispatchRuleDirect_default_instance_);
}
inline const ::livekit::SIPDispatchRuleDirect& SIPDispatchRule::dispatch_rule_direct() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRule.dispatch_rule_direct)
  return _internal_dispatch_rule_direct();
}
inline ::livekit::SIPDispatchRuleDirect* SIPDispatchRule::unsafe_arena_release_dispatch_rule_direct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.SIPDispatchRule.dispatch_rule_direct)
  if (_internal_has_dispatch_rule_direct()) {
    clear_has_rule();
    ::livekit::SIPDispatchRuleDirect* temp = _impl_.rule_.dispatch_rule_direct_;
    _impl_.rule_.dispatch_rule_direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SIPDispatchRule::unsafe_arena_set_allocated_dispatch_rule_direct(::livekit::SIPDispatchRuleDirect* dispatch_rule_direct) {
  clear_rule();
  if (dispatch_rule_direct) {
    set_has_dispatch_rule_direct();
    _impl_.rule_.dispatch_rule_direct_ = dispatch_rule_direct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPDispatchRule.dispatch_rule_direct)
}
inline ::livekit::SIPDispatchRuleDirect* SIPDispatchRule::_internal_mutable_dispatch_rule_direct() {
  if (!_internal_has_dispatch_rule_direct()) {
    clear_rule();
    set_has_dispatch_rule_direct();
    _impl_.rule_.dispatch_rule_direct_ = CreateMaybeMessage< ::livekit::SIPDispatchRuleDirect >(GetArenaForAllocation());
  }
  return _impl_.rule_.dispatch_rule_direct_;
}
inline ::livekit::SIPDispatchRuleDirect* SIPDispatchRule::mutable_dispatch_rule_direct() {
  ::livekit::SIPDispatchRuleDirect* _msg = _internal_mutable_dispatch_rule_direct();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRule.dispatch_rule_direct)
  return _msg;
}

// .livekit.SIPDispatchRuleIndividual dispatch_rule_individual = 2;
inline bool SIPDispatchRule::_internal_has_dispatch_rule_individual() const {
  return rule_case() == kDispatchRuleIndividual;
}
inline bool SIPDispatchRule::has_dispatch_rule_individual() const {
  return _internal_has_dispatch_rule_individual();
}
inline void SIPDispatchRule::set_has_dispatch_rule_individual() {
  _impl_._oneof_case_[0] = kDispatchRuleIndividual;
}
inline void SIPDispatchRule::clear_dispatch_rule_individual() {
  if (_internal_has_dispatch_rule_individual()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rule_.dispatch_rule_individual_;
    }
    clear_has_rule();
  }
}
inline ::livekit::SIPDispatchRuleIndividual* SIPDispatchRule::release_dispatch_rule_individual() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRule.dispatch_rule_individual)
  if (_internal_has_dispatch_rule_individual()) {
    clear_has_rule();
    ::livekit::SIPDispatchRuleIndividual* temp = _impl_.rule_.dispatch_rule_individual_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rule_.dispatch_rule_individual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::SIPDispatchRuleIndividual& SIPDispatchRule::_internal_dispatch_rule_individual() const {
  return _internal_has_dispatch_rule_individual()
      ? *_impl_.rule_.dispatch_rule_individual_
      : reinterpret_cast< ::livekit::SIPDispatchRuleIndividual&>(::livekit::_SIPDispatchRuleIndividual_default_instance_);
}
inline const ::livekit::SIPDispatchRuleIndividual& SIPDispatchRule::dispatch_rule_individual() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRule.dispatch_rule_individual)
  return _internal_dispatch_rule_individual();
}
inline ::livekit::SIPDispatchRuleIndividual* SIPDispatchRule::unsafe_arena_release_dispatch_rule_individual() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.SIPDispatchRule.dispatch_rule_individual)
  if (_internal_has_dispatch_rule_individual()) {
    clear_has_rule();
    ::livekit::SIPDispatchRuleIndividual* temp = _impl_.rule_.dispatch_rule_individual_;
    _impl_.rule_.dispatch_rule_individual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SIPDispatchRule::unsafe_arena_set_allocated_dispatch_rule_individual(::livekit::SIPDispatchRuleIndividual* dispatch_rule_individual) {
  clear_rule();
  if (dispatch_rule_individual) {
    set_has_dispatch_rule_individual();
    _impl_.rule_.dispatch_rule_individual_ = dispatch_rule_individual;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPDispatchRule.dispatch_rule_individual)
}
inline ::livekit::SIPDispatchRuleIndividual* SIPDispatchRule::_internal_mutable_dispatch_rule_individual() {
  if (!_internal_has_dispatch_rule_individual()) {
    clear_rule();
    set_has_dispatch_rule_individual();
    _impl_.rule_.dispatch_rule_individual_ = CreateMaybeMessage< ::livekit::SIPDispatchRuleIndividual >(GetArenaForAllocation());
  }
  return _impl_.rule_.dispatch_rule_individual_;
}
inline ::livekit::SIPDispatchRuleIndividual* SIPDispatchRule::mutable_dispatch_rule_individual() {
  ::livekit::SIPDispatchRuleIndividual* _msg = _internal_mutable_dispatch_rule_individual();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRule.dispatch_rule_individual)
  return _msg;
}

// .livekit.SIPDispatchRuleCallee dispatch_rule_callee = 3;
inline bool SIPDispatchRule::_internal_has_dispatch_rule_callee() const {
  return rule_case() == kDispatchRuleCallee;
}
inline bool SIPDispatchRule::has_dispatch_rule_callee() const {
  return _internal_has_dispatch_rule_callee();
}
inline void SIPDispatchRule::set_has_dispatch_rule_callee() {
  _impl_._oneof_case_[0] = kDispatchRuleCallee;
}
inline void SIPDispatchRule::clear_dispatch_rule_callee() {
  if (_internal_has_dispatch_rule_callee()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rule_.dispatch_rule_callee_;
    }
    clear_has_rule();
  }
}
inline ::livekit::SIPDispatchRuleCallee* SIPDispatchRule::release_dispatch_rule_callee() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRule.dispatch_rule_callee)
  if (_internal_has_dispatch_rule_callee()) {
    clear_has_rule();
    ::livekit::SIPDispatchRuleCallee* temp = _impl_.rule_.dispatch_rule_callee_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rule_.dispatch_rule_callee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::SIPDispatchRuleCallee& SIPDispatchRule::_internal_dispatch_rule_callee() const {
  return _internal_has_dispatch_rule_callee()
      ? *_impl_.rule_.dispatch_rule_callee_
      : reinterpret_cast< ::livekit::SIPDispatchRuleCallee&>(::livekit::_SIPDispatchRuleCallee_default_instance_);
}
inline const ::livekit::SIPDispatchRuleCallee& SIPDispatchRule::dispatch_rule_callee() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRule.dispatch_rule_callee)
  return _internal_dispatch_rule_callee();
}
inline ::livekit::SIPDispatchRuleCallee* SIPDispatchRule::unsafe_arena_release_dispatch_rule_callee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.SIPDispatchRule.dispatch_rule_callee)
  if (_internal_has_dispatch_rule_callee()) {
    clear_has_rule();
    ::livekit::SIPDispatchRuleCallee* temp = _impl_.rule_.dispatch_rule_callee_;
    _impl_.rule_.dispatch_rule_callee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SIPDispatchRule::unsafe_arena_set_allocated_dispatch_rule_callee(::livekit::SIPDispatchRuleCallee* dispatch_rule_callee) {
  clear_rule();
  if (dispatch_rule_callee) {
    set_has_dispatch_rule_callee();
    _impl_.rule_.dispatch_rule_callee_ = dispatch_rule_callee;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPDispatchRule.dispatch_rule_callee)
}
inline ::livekit::SIPDispatchRuleCallee* SIPDispatchRule::_internal_mutable_dispatch_rule_callee() {
  if (!_internal_has_dispatch_rule_callee()) {
    clear_rule();
    set_has_dispatch_rule_callee();
    _impl_.rule_.dispatch_rule_callee_ = CreateMaybeMessage< ::livekit::SIPDispatchRuleCallee >(GetArenaForAllocation());
  }
  return _impl_.rule_.dispatch_rule_callee_;
}
inline ::livekit::SIPDispatchRuleCallee* SIPDispatchRule::mutable_dispatch_rule_callee() {
  ::livekit::SIPDispatchRuleCallee* _msg = _internal_mutable_dispatch_rule_callee();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRule.dispatch_rule_callee)
  return _msg;
}

inline bool SIPDispatchRule::has_rule() const {
  return rule_case() != RULE_NOT_SET;
}
inline void SIPDispatchRule::clear_has_rule() {
  _impl_._oneof_case_[0] = RULE_NOT_SET;
}
inline SIPDispatchRule::RuleCase SIPDispatchRule::rule_case() const {
  return SIPDispatchRule::RuleCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateSIPDispatchRuleRequest

// .livekit.SIPDispatchRule rule = 1;
inline bool CreateSIPDispatchRuleRequest::_internal_has_rule() const {
  return this != internal_default_instance() && _impl_.rule_ != nullptr;
}
inline bool CreateSIPDispatchRuleRequest::has_rule() const {
  return _internal_has_rule();
}
inline void CreateSIPDispatchRuleRequest::clear_rule() {
  if (GetArenaForAllocation() == nullptr && _impl_.rule_ != nullptr) {
    delete _impl_.rule_;
  }
  _impl_.rule_ = nullptr;
}
inline const ::livekit::SIPDispatchRule& CreateSIPDispatchRuleRequest::_internal_rule() const {
  const ::livekit::SIPDispatchRule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPDispatchRule&>(
      ::livekit::_SIPDispatchRule_default_instance_);
}
inline const ::livekit::SIPDispatchRule& CreateSIPDispatchRuleRequest::rule() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.rule)
  return _internal_rule();
}
inline void CreateSIPDispatchRuleRequest::unsafe_arena_set_allocated_rule(
    ::livekit::SIPDispatchRule* rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = rule;
  if (rule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPDispatchRuleRequest.rule)
}
inline ::livekit::SIPDispatchRule* CreateSIPDispatchRuleRequest::release_rule() {
  
  ::livekit::SIPDispatchRule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPDispatchRule* CreateSIPDispatchRuleRequest::unsafe_arena_release_rule() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPDispatchRuleRequest.rule)
  
  ::livekit::SIPDispatchRule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::livekit::SIPDispatchRule* CreateSIPDispatchRuleRequest::_internal_mutable_rule() {
  
  if (_impl_.rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPDispatchRule>(GetArenaForAllocation());
    _impl_.rule_ = p;
  }
  return _impl_.rule_;
}
inline ::livekit::SIPDispatchRule* CreateSIPDispatchRuleRequest::mutable_rule() {
  ::livekit::SIPDispatchRule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.rule)
  return _msg;
}
inline void CreateSIPDispatchRuleRequest::set_allocated_rule(::livekit::SIPDispatchRule* rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rule_;
  }
  if (rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rule);
    if (message_arena != submessage_arena) {
      rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rule_ = rule;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPDispatchRuleRequest.rule)
}

// repeated string trunk_ids = 2;
inline int CreateSIPDispatchRuleRequest::_internal_trunk_ids_size() const {
  return _impl_.trunk_ids_.size();
}
inline int CreateSIPDispatchRuleRequest::trunk_ids_size() const {
  return _internal_trunk_ids_size();
}
inline void CreateSIPDispatchRuleRequest::clear_trunk_ids() {
  _impl_.trunk_ids_.Clear();
}
inline std::string* CreateSIPDispatchRuleRequest::add_trunk_ids() {
  std::string* _s = _internal_add_trunk_ids();
  // @@protoc_insertion_point(field_add_mutable:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
  return _s;
}
inline const std::string& CreateSIPDispatchRuleRequest::_internal_trunk_ids(int index) const {
  return _impl_.trunk_ids_.Get(index);
}
inline const std::string& CreateSIPDispatchRuleRequest::trunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
  return _internal_trunk_ids(index);
}
inline std::string* CreateSIPDispatchRuleRequest::mutable_trunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
  return _impl_.trunk_ids_.Mutable(index);
}
inline void CreateSIPDispatchRuleRequest::set_trunk_ids(int index, const std::string& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline void CreateSIPDispatchRuleRequest::set_trunk_ids(int index, std::string&& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline void CreateSIPDispatchRuleRequest::set_trunk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline void CreateSIPDispatchRuleRequest::set_trunk_ids(int index, const char* value, size_t size) {
  _impl_.trunk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline std::string* CreateSIPDispatchRuleRequest::_internal_add_trunk_ids() {
  return _impl_.trunk_ids_.Add();
}
inline void CreateSIPDispatchRuleRequest::add_trunk_ids(const std::string& value) {
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline void CreateSIPDispatchRuleRequest::add_trunk_ids(std::string&& value) {
  _impl_.trunk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline void CreateSIPDispatchRuleRequest::add_trunk_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline void CreateSIPDispatchRuleRequest::add_trunk_ids(const char* value, size_t size) {
  _impl_.trunk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSIPDispatchRuleRequest::trunk_ids() const {
  // @@protoc_insertion_point(field_list:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
  return _impl_.trunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSIPDispatchRuleRequest::mutable_trunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:livekit.CreateSIPDispatchRuleRequest.trunk_ids)
  return &_impl_.trunk_ids_;
}

// bool hide_phone_number = 3;
inline void CreateSIPDispatchRuleRequest::clear_hide_phone_number() {
  _impl_.hide_phone_number_ = false;
}
inline bool CreateSIPDispatchRuleRequest::_internal_hide_phone_number() const {
  return _impl_.hide_phone_number_;
}
inline bool CreateSIPDispatchRuleRequest::hide_phone_number() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.hide_phone_number)
  return _internal_hide_phone_number();
}
inline void CreateSIPDispatchRuleRequest::_internal_set_hide_phone_number(bool value) {
  
  _impl_.hide_phone_number_ = value;
}
inline void CreateSIPDispatchRuleRequest::set_hide_phone_number(bool value) {
  _internal_set_hide_phone_number(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.hide_phone_number)
}

// repeated string inbound_numbers = 6;
inline int CreateSIPDispatchRuleRequest::_internal_inbound_numbers_size() const {
  return _impl_.inbound_numbers_.size();
}
inline int CreateSIPDispatchRuleRequest::inbound_numbers_size() const {
  return _internal_inbound_numbers_size();
}
inline void CreateSIPDispatchRuleRequest::clear_inbound_numbers() {
  _impl_.inbound_numbers_.Clear();
}
inline std::string* CreateSIPDispatchRuleRequest::add_inbound_numbers() {
  std::string* _s = _internal_add_inbound_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
  return _s;
}
inline const std::string& CreateSIPDispatchRuleRequest::_internal_inbound_numbers(int index) const {
  return _impl_.inbound_numbers_.Get(index);
}
inline const std::string& CreateSIPDispatchRuleRequest::inbound_numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
  return _internal_inbound_numbers(index);
}
inline std::string* CreateSIPDispatchRuleRequest::mutable_inbound_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
  return _impl_.inbound_numbers_.Mutable(index);
}
inline void CreateSIPDispatchRuleRequest::set_inbound_numbers(int index, const std::string& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline void CreateSIPDispatchRuleRequest::set_inbound_numbers(int index, std::string&& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline void CreateSIPDispatchRuleRequest::set_inbound_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline void CreateSIPDispatchRuleRequest::set_inbound_numbers(int index, const char* value, size_t size) {
  _impl_.inbound_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline std::string* CreateSIPDispatchRuleRequest::_internal_add_inbound_numbers() {
  return _impl_.inbound_numbers_.Add();
}
inline void CreateSIPDispatchRuleRequest::add_inbound_numbers(const std::string& value) {
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline void CreateSIPDispatchRuleRequest::add_inbound_numbers(std::string&& value) {
  _impl_.inbound_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline void CreateSIPDispatchRuleRequest::add_inbound_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline void CreateSIPDispatchRuleRequest::add_inbound_numbers(const char* value, size_t size) {
  _impl_.inbound_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSIPDispatchRuleRequest::inbound_numbers() const {
  // @@protoc_insertion_point(field_list:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
  return _impl_.inbound_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSIPDispatchRuleRequest::mutable_inbound_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.CreateSIPDispatchRuleRequest.inbound_numbers)
  return &_impl_.inbound_numbers_;
}

// string name = 4;
inline void CreateSIPDispatchRuleRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateSIPDispatchRuleRequest::name() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPDispatchRuleRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.name)
}
inline std::string* CreateSIPDispatchRuleRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.name)
  return _s;
}
inline const std::string& CreateSIPDispatchRuleRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateSIPDispatchRuleRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPDispatchRuleRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPDispatchRuleRequest::release_name() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPDispatchRuleRequest.name)
  return _impl_.name_.Release();
}
inline void CreateSIPDispatchRuleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPDispatchRuleRequest.name)
}

// string metadata = 5;
inline void CreateSIPDispatchRuleRequest::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& CreateSIPDispatchRuleRequest::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPDispatchRuleRequest::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.metadata)
}
inline std::string* CreateSIPDispatchRuleRequest::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.metadata)
  return _s;
}
inline const std::string& CreateSIPDispatchRuleRequest::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void CreateSIPDispatchRuleRequest::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPDispatchRuleRequest::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPDispatchRuleRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPDispatchRuleRequest.metadata)
  return _impl_.metadata_.Release();
}
inline void CreateSIPDispatchRuleRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPDispatchRuleRequest.metadata)
}

// map<string, string> attributes = 7;
inline int CreateSIPDispatchRuleRequest::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int CreateSIPDispatchRuleRequest::attributes_size() const {
  return _internal_attributes_size();
}
inline void CreateSIPDispatchRuleRequest::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSIPDispatchRuleRequest::_internal_attributes() const {
  return _impl_.attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSIPDispatchRuleRequest::attributes() const {
  // @@protoc_insertion_point(field_map:livekit.CreateSIPDispatchRuleRequest.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSIPDispatchRuleRequest::_internal_mutable_attributes() {
  return _impl_.attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSIPDispatchRuleRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.CreateSIPDispatchRuleRequest.attributes)
  return _internal_mutable_attributes();
}

// string room_preset = 8;
inline void CreateSIPDispatchRuleRequest::clear_room_preset() {
  _impl_.room_preset_.ClearToEmpty();
}
inline const std::string& CreateSIPDispatchRuleRequest::room_preset() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.room_preset)
  return _internal_room_preset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPDispatchRuleRequest::set_room_preset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_preset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPDispatchRuleRequest.room_preset)
}
inline std::string* CreateSIPDispatchRuleRequest::mutable_room_preset() {
  std::string* _s = _internal_mutable_room_preset();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.room_preset)
  return _s;
}
inline const std::string& CreateSIPDispatchRuleRequest::_internal_room_preset() const {
  return _impl_.room_preset_.Get();
}
inline void CreateSIPDispatchRuleRequest::_internal_set_room_preset(const std::string& value) {
  
  _impl_.room_preset_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPDispatchRuleRequest::_internal_mutable_room_preset() {
  
  return _impl_.room_preset_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPDispatchRuleRequest::release_room_preset() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPDispatchRuleRequest.room_preset)
  return _impl_.room_preset_.Release();
}
inline void CreateSIPDispatchRuleRequest::set_allocated_room_preset(std::string* room_preset) {
  if (room_preset != nullptr) {
    
  } else {
    
  }
  _impl_.room_preset_.SetAllocated(room_preset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_preset_.IsDefault()) {
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPDispatchRuleRequest.room_preset)
}

// .livekit.RoomConfiguration room_config = 9;
inline bool CreateSIPDispatchRuleRequest::_internal_has_room_config() const {
  return this != internal_default_instance() && _impl_.room_config_ != nullptr;
}
inline bool CreateSIPDispatchRuleRequest::has_room_config() const {
  return _internal_has_room_config();
}
inline const ::livekit::RoomConfiguration& CreateSIPDispatchRuleRequest::_internal_room_config() const {
  const ::livekit::RoomConfiguration* p = _impl_.room_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RoomConfiguration&>(
      ::livekit::_RoomConfiguration_default_instance_);
}
inline const ::livekit::RoomConfiguration& CreateSIPDispatchRuleRequest::room_config() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPDispatchRuleRequest.room_config)
  return _internal_room_config();
}
inline void CreateSIPDispatchRuleRequest::unsafe_arena_set_allocated_room_config(
    ::livekit::RoomConfiguration* room_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_config_);
  }
  _impl_.room_config_ = room_config;
  if (room_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPDispatchRuleRequest.room_config)
}
inline ::livekit::RoomConfiguration* CreateSIPDispatchRuleRequest::release_room_config() {
  
  ::livekit::RoomConfiguration* temp = _impl_.room_config_;
  _impl_.room_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::RoomConfiguration* CreateSIPDispatchRuleRequest::unsafe_arena_release_room_config() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPDispatchRuleRequest.room_config)
  
  ::livekit::RoomConfiguration* temp = _impl_.room_config_;
  _impl_.room_config_ = nullptr;
  return temp;
}
inline ::livekit::RoomConfiguration* CreateSIPDispatchRuleRequest::_internal_mutable_room_config() {
  
  if (_impl_.room_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::RoomConfiguration>(GetArenaForAllocation());
    _impl_.room_config_ = p;
  }
  return _impl_.room_config_;
}
inline ::livekit::RoomConfiguration* CreateSIPDispatchRuleRequest::mutable_room_config() {
  ::livekit::RoomConfiguration* _msg = _internal_mutable_room_config();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPDispatchRuleRequest.room_config)
  return _msg;
}
inline void CreateSIPDispatchRuleRequest::set_allocated_room_config(::livekit::RoomConfiguration* room_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_config_);
  }
  if (room_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_config));
    if (message_arena != submessage_arena) {
      room_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_config_ = room_config;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPDispatchRuleRequest.room_config)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SIPDispatchRuleInfo

// string sip_dispatch_rule_id = 1;
inline void SIPDispatchRuleInfo::clear_sip_dispatch_rule_id() {
  _impl_.sip_dispatch_rule_id_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleInfo::sip_dispatch_rule_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id)
  return _internal_sip_dispatch_rule_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleInfo::set_sip_dispatch_rule_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_dispatch_rule_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id)
}
inline std::string* SIPDispatchRuleInfo::mutable_sip_dispatch_rule_id() {
  std::string* _s = _internal_mutable_sip_dispatch_rule_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id)
  return _s;
}
inline const std::string& SIPDispatchRuleInfo::_internal_sip_dispatch_rule_id() const {
  return _impl_.sip_dispatch_rule_id_.Get();
}
inline void SIPDispatchRuleInfo::_internal_set_sip_dispatch_rule_id(const std::string& value) {
  
  _impl_.sip_dispatch_rule_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::_internal_mutable_sip_dispatch_rule_id() {
  
  return _impl_.sip_dispatch_rule_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::release_sip_dispatch_rule_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id)
  return _impl_.sip_dispatch_rule_id_.Release();
}
inline void SIPDispatchRuleInfo::set_allocated_sip_dispatch_rule_id(std::string* sip_dispatch_rule_id) {
  if (sip_dispatch_rule_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_dispatch_rule_id_.SetAllocated(sip_dispatch_rule_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_dispatch_rule_id_.IsDefault()) {
    _impl_.sip_dispatch_rule_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id)
}

// .livekit.SIPDispatchRule rule = 2;
inline bool SIPDispatchRuleInfo::_internal_has_rule() const {
  return this != internal_default_instance() && _impl_.rule_ != nullptr;
}
inline bool SIPDispatchRuleInfo::has_rule() const {
  return _internal_has_rule();
}
inline void SIPDispatchRuleInfo::clear_rule() {
  if (GetArenaForAllocation() == nullptr && _impl_.rule_ != nullptr) {
    delete _impl_.rule_;
  }
  _impl_.rule_ = nullptr;
}
inline const ::livekit::SIPDispatchRule& SIPDispatchRuleInfo::_internal_rule() const {
  const ::livekit::SIPDispatchRule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPDispatchRule&>(
      ::livekit::_SIPDispatchRule_default_instance_);
}
inline const ::livekit::SIPDispatchRule& SIPDispatchRuleInfo::rule() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.rule)
  return _internal_rule();
}
inline void SIPDispatchRuleInfo::unsafe_arena_set_allocated_rule(
    ::livekit::SIPDispatchRule* rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = rule;
  if (rule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPDispatchRuleInfo.rule)
}
inline ::livekit::SIPDispatchRule* SIPDispatchRuleInfo::release_rule() {
  
  ::livekit::SIPDispatchRule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPDispatchRule* SIPDispatchRuleInfo::unsafe_arena_release_rule() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleInfo.rule)
  
  ::livekit::SIPDispatchRule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::livekit::SIPDispatchRule* SIPDispatchRuleInfo::_internal_mutable_rule() {
  
  if (_impl_.rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPDispatchRule>(GetArenaForAllocation());
    _impl_.rule_ = p;
  }
  return _impl_.rule_;
}
inline ::livekit::SIPDispatchRule* SIPDispatchRuleInfo::mutable_rule() {
  ::livekit::SIPDispatchRule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.rule)
  return _msg;
}
inline void SIPDispatchRuleInfo::set_allocated_rule(::livekit::SIPDispatchRule* rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rule_;
  }
  if (rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rule);
    if (message_arena != submessage_arena) {
      rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rule_ = rule;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleInfo.rule)
}

// repeated string trunk_ids = 3;
inline int SIPDispatchRuleInfo::_internal_trunk_ids_size() const {
  return _impl_.trunk_ids_.size();
}
inline int SIPDispatchRuleInfo::trunk_ids_size() const {
  return _internal_trunk_ids_size();
}
inline void SIPDispatchRuleInfo::clear_trunk_ids() {
  _impl_.trunk_ids_.Clear();
}
inline std::string* SIPDispatchRuleInfo::add_trunk_ids() {
  std::string* _s = _internal_add_trunk_ids();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPDispatchRuleInfo.trunk_ids)
  return _s;
}
inline const std::string& SIPDispatchRuleInfo::_internal_trunk_ids(int index) const {
  return _impl_.trunk_ids_.Get(index);
}
inline const std::string& SIPDispatchRuleInfo::trunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.trunk_ids)
  return _internal_trunk_ids(index);
}
inline std::string* SIPDispatchRuleInfo::mutable_trunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.trunk_ids)
  return _impl_.trunk_ids_.Mutable(index);
}
inline void SIPDispatchRuleInfo::set_trunk_ids(int index, const std::string& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline void SIPDispatchRuleInfo::set_trunk_ids(int index, std::string&& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline void SIPDispatchRuleInfo::set_trunk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline void SIPDispatchRuleInfo::set_trunk_ids(int index, const char* value, size_t size) {
  _impl_.trunk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline std::string* SIPDispatchRuleInfo::_internal_add_trunk_ids() {
  return _impl_.trunk_ids_.Add();
}
inline void SIPDispatchRuleInfo::add_trunk_ids(const std::string& value) {
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline void SIPDispatchRuleInfo::add_trunk_ids(std::string&& value) {
  _impl_.trunk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline void SIPDispatchRuleInfo::add_trunk_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline void SIPDispatchRuleInfo::add_trunk_ids(const char* value, size_t size) {
  _impl_.trunk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPDispatchRuleInfo.trunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPDispatchRuleInfo::trunk_ids() const {
  // @@protoc_insertion_point(field_list:livekit.SIPDispatchRuleInfo.trunk_ids)
  return _impl_.trunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPDispatchRuleInfo::mutable_trunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPDispatchRuleInfo.trunk_ids)
  return &_impl_.trunk_ids_;
}

// bool hide_phone_number = 4;
inline void SIPDispatchRuleInfo::clear_hide_phone_number() {
  _impl_.hide_phone_number_ = false;
}
inline bool SIPDispatchRuleInfo::_internal_hide_phone_number() const {
  return _impl_.hide_phone_number_;
}
inline bool SIPDispatchRuleInfo::hide_phone_number() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.hide_phone_number)
  return _internal_hide_phone_number();
}
inline void SIPDispatchRuleInfo::_internal_set_hide_phone_number(bool value) {
  
  _impl_.hide_phone_number_ = value;
}
inline void SIPDispatchRuleInfo::set_hide_phone_number(bool value) {
  _internal_set_hide_phone_number(value);
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.hide_phone_number)
}

// repeated string inbound_numbers = 7;
inline int SIPDispatchRuleInfo::_internal_inbound_numbers_size() const {
  return _impl_.inbound_numbers_.size();
}
inline int SIPDispatchRuleInfo::inbound_numbers_size() const {
  return _internal_inbound_numbers_size();
}
inline void SIPDispatchRuleInfo::clear_inbound_numbers() {
  _impl_.inbound_numbers_.Clear();
}
inline std::string* SIPDispatchRuleInfo::add_inbound_numbers() {
  std::string* _s = _internal_add_inbound_numbers();
  // @@protoc_insertion_point(field_add_mutable:livekit.SIPDispatchRuleInfo.inbound_numbers)
  return _s;
}
inline const std::string& SIPDispatchRuleInfo::_internal_inbound_numbers(int index) const {
  return _impl_.inbound_numbers_.Get(index);
}
inline const std::string& SIPDispatchRuleInfo::inbound_numbers(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.inbound_numbers)
  return _internal_inbound_numbers(index);
}
inline std::string* SIPDispatchRuleInfo::mutable_inbound_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.inbound_numbers)
  return _impl_.inbound_numbers_.Mutable(index);
}
inline void SIPDispatchRuleInfo::set_inbound_numbers(int index, const std::string& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline void SIPDispatchRuleInfo::set_inbound_numbers(int index, std::string&& value) {
  _impl_.inbound_numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline void SIPDispatchRuleInfo::set_inbound_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline void SIPDispatchRuleInfo::set_inbound_numbers(int index, const char* value, size_t size) {
  _impl_.inbound_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline std::string* SIPDispatchRuleInfo::_internal_add_inbound_numbers() {
  return _impl_.inbound_numbers_.Add();
}
inline void SIPDispatchRuleInfo::add_inbound_numbers(const std::string& value) {
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline void SIPDispatchRuleInfo::add_inbound_numbers(std::string&& value) {
  _impl_.inbound_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline void SIPDispatchRuleInfo::add_inbound_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inbound_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline void SIPDispatchRuleInfo::add_inbound_numbers(const char* value, size_t size) {
  _impl_.inbound_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.SIPDispatchRuleInfo.inbound_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SIPDispatchRuleInfo::inbound_numbers() const {
  // @@protoc_insertion_point(field_list:livekit.SIPDispatchRuleInfo.inbound_numbers)
  return _impl_.inbound_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SIPDispatchRuleInfo::mutable_inbound_numbers() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPDispatchRuleInfo.inbound_numbers)
  return &_impl_.inbound_numbers_;
}

// string name = 5;
inline void SIPDispatchRuleInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleInfo::name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.name)
}
inline std::string* SIPDispatchRuleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.name)
  return _s;
}
inline const std::string& SIPDispatchRuleInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SIPDispatchRuleInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::release_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleInfo.name)
  return _impl_.name_.Release();
}
inline void SIPDispatchRuleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleInfo.name)
}

// string metadata = 6;
inline void SIPDispatchRuleInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleInfo::metadata() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.metadata)
}
inline std::string* SIPDispatchRuleInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.metadata)
  return _s;
}
inline const std::string& SIPDispatchRuleInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void SIPDispatchRuleInfo::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void SIPDispatchRuleInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleInfo.metadata)
}

// map<string, string> attributes = 8;
inline int SIPDispatchRuleInfo::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int SIPDispatchRuleInfo::attributes_size() const {
  return _internal_attributes_size();
}
inline void SIPDispatchRuleInfo::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPDispatchRuleInfo::_internal_attributes() const {
  return _impl_.attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPDispatchRuleInfo::attributes() const {
  // @@protoc_insertion_point(field_map:livekit.SIPDispatchRuleInfo.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPDispatchRuleInfo::_internal_mutable_attributes() {
  return _impl_.attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPDispatchRuleInfo::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPDispatchRuleInfo.attributes)
  return _internal_mutable_attributes();
}

// string room_preset = 9;
inline void SIPDispatchRuleInfo::clear_room_preset() {
  _impl_.room_preset_.ClearToEmpty();
}
inline const std::string& SIPDispatchRuleInfo::room_preset() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.room_preset)
  return _internal_room_preset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPDispatchRuleInfo::set_room_preset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_preset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.room_preset)
}
inline std::string* SIPDispatchRuleInfo::mutable_room_preset() {
  std::string* _s = _internal_mutable_room_preset();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.room_preset)
  return _s;
}
inline const std::string& SIPDispatchRuleInfo::_internal_room_preset() const {
  return _impl_.room_preset_.Get();
}
inline void SIPDispatchRuleInfo::_internal_set_room_preset(const std::string& value) {
  
  _impl_.room_preset_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::_internal_mutable_room_preset() {
  
  return _impl_.room_preset_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPDispatchRuleInfo::release_room_preset() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleInfo.room_preset)
  return _impl_.room_preset_.Release();
}
inline void SIPDispatchRuleInfo::set_allocated_room_preset(std::string* room_preset) {
  if (room_preset != nullptr) {
    
  } else {
    
  }
  _impl_.room_preset_.SetAllocated(room_preset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_preset_.IsDefault()) {
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleInfo.room_preset)
}

// .livekit.RoomConfiguration room_config = 10;
inline bool SIPDispatchRuleInfo::_internal_has_room_config() const {
  return this != internal_default_instance() && _impl_.room_config_ != nullptr;
}
inline bool SIPDispatchRuleInfo::has_room_config() const {
  return _internal_has_room_config();
}
inline const ::livekit::RoomConfiguration& SIPDispatchRuleInfo::_internal_room_config() const {
  const ::livekit::RoomConfiguration* p = _impl_.room_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RoomConfiguration&>(
      ::livekit::_RoomConfiguration_default_instance_);
}
inline const ::livekit::RoomConfiguration& SIPDispatchRuleInfo::room_config() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.room_config)
  return _internal_room_config();
}
inline void SIPDispatchRuleInfo::unsafe_arena_set_allocated_room_config(
    ::livekit::RoomConfiguration* room_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_config_);
  }
  _impl_.room_config_ = room_config;
  if (room_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPDispatchRuleInfo.room_config)
}
inline ::livekit::RoomConfiguration* SIPDispatchRuleInfo::release_room_config() {
  
  ::livekit::RoomConfiguration* temp = _impl_.room_config_;
  _impl_.room_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::RoomConfiguration* SIPDispatchRuleInfo::unsafe_arena_release_room_config() {
  // @@protoc_insertion_point(field_release:livekit.SIPDispatchRuleInfo.room_config)
  
  ::livekit::RoomConfiguration* temp = _impl_.room_config_;
  _impl_.room_config_ = nullptr;
  return temp;
}
inline ::livekit::RoomConfiguration* SIPDispatchRuleInfo::_internal_mutable_room_config() {
  
  if (_impl_.room_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::RoomConfiguration>(GetArenaForAllocation());
    _impl_.room_config_ = p;
  }
  return _impl_.room_config_;
}
inline ::livekit::RoomConfiguration* SIPDispatchRuleInfo::mutable_room_config() {
  ::livekit::RoomConfiguration* _msg = _internal_mutable_room_config();
  // @@protoc_insertion_point(field_mutable:livekit.SIPDispatchRuleInfo.room_config)
  return _msg;
}
inline void SIPDispatchRuleInfo::set_allocated_room_config(::livekit::RoomConfiguration* room_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_config_);
  }
  if (room_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_config));
    if (message_arena != submessage_arena) {
      room_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_config_ = room_config;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRuleInfo.room_config)
}

// bool krisp_enabled = 11;
inline void SIPDispatchRuleInfo::clear_krisp_enabled() {
  _impl_.krisp_enabled_ = false;
}
inline bool SIPDispatchRuleInfo::_internal_krisp_enabled() const {
  return _impl_.krisp_enabled_;
}
inline bool SIPDispatchRuleInfo::krisp_enabled() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.krisp_enabled)
  return _internal_krisp_enabled();
}
inline void SIPDispatchRuleInfo::_internal_set_krisp_enabled(bool value) {
  
  _impl_.krisp_enabled_ = value;
}
inline void SIPDispatchRuleInfo::set_krisp_enabled(bool value) {
  _internal_set_krisp_enabled(value);
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.krisp_enabled)
}

// .livekit.SIPMediaEncryption media_encryption = 12;
inline void SIPDispatchRuleInfo::clear_media_encryption() {
  _impl_.media_encryption_ = 0;
}
inline ::livekit::SIPMediaEncryption SIPDispatchRuleInfo::_internal_media_encryption() const {
  return static_cast< ::livekit::SIPMediaEncryption >(_impl_.media_encryption_);
}
inline ::livekit::SIPMediaEncryption SIPDispatchRuleInfo::media_encryption() const {
  // @@protoc_insertion_point(field_get:livekit.SIPDispatchRuleInfo.media_encryption)
  return _internal_media_encryption();
}
inline void SIPDispatchRuleInfo::_internal_set_media_encryption(::livekit::SIPMediaEncryption value) {
  
  _impl_.media_encryption_ = value;
}
inline void SIPDispatchRuleInfo::set_media_encryption(::livekit::SIPMediaEncryption value) {
  _internal_set_media_encryption(value);
  // @@protoc_insertion_point(field_set:livekit.SIPDispatchRuleInfo.media_encryption)
}

// -------------------------------------------------------------------

// ListSIPDispatchRuleRequest

// .livekit.Pagination page = 3;
inline bool ListSIPDispatchRuleRequest::_internal_has_page() const {
  return this != internal_default_instance() && _impl_.page_ != nullptr;
}
inline bool ListSIPDispatchRuleRequest::has_page() const {
  return _internal_has_page();
}
inline const ::livekit::Pagination& ListSIPDispatchRuleRequest::_internal_page() const {
  const ::livekit::Pagination* p = _impl_.page_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::Pagination&>(
      ::livekit::_Pagination_default_instance_);
}
inline const ::livekit::Pagination& ListSIPDispatchRuleRequest::page() const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPDispatchRuleRequest.page)
  return _internal_page();
}
inline void ListSIPDispatchRuleRequest::unsafe_arena_set_allocated_page(
    ::livekit::Pagination* page) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  _impl_.page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ListSIPDispatchRuleRequest.page)
}
inline ::livekit::Pagination* ListSIPDispatchRuleRequest::release_page() {
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::Pagination* ListSIPDispatchRuleRequest::unsafe_arena_release_page() {
  // @@protoc_insertion_point(field_release:livekit.ListSIPDispatchRuleRequest.page)
  
  ::livekit::Pagination* temp = _impl_.page_;
  _impl_.page_ = nullptr;
  return temp;
}
inline ::livekit::Pagination* ListSIPDispatchRuleRequest::_internal_mutable_page() {
  
  if (_impl_.page_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::Pagination>(GetArenaForAllocation());
    _impl_.page_ = p;
  }
  return _impl_.page_;
}
inline ::livekit::Pagination* ListSIPDispatchRuleRequest::mutable_page() {
  ::livekit::Pagination* _msg = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPDispatchRuleRequest.page)
  return _msg;
}
inline void ListSIPDispatchRuleRequest::set_allocated_page(::livekit::Pagination* page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_);
  }
  if (page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page));
    if (message_arena != submessage_arena) {
      page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.page_ = page;
  // @@protoc_insertion_point(field_set_allocated:livekit.ListSIPDispatchRuleRequest.page)
}

// repeated string dispatch_rule_ids = 1;
inline int ListSIPDispatchRuleRequest::_internal_dispatch_rule_ids_size() const {
  return _impl_.dispatch_rule_ids_.size();
}
inline int ListSIPDispatchRuleRequest::dispatch_rule_ids_size() const {
  return _internal_dispatch_rule_ids_size();
}
inline void ListSIPDispatchRuleRequest::clear_dispatch_rule_ids() {
  _impl_.dispatch_rule_ids_.Clear();
}
inline std::string* ListSIPDispatchRuleRequest::add_dispatch_rule_ids() {
  std::string* _s = _internal_add_dispatch_rule_ids();
  // @@protoc_insertion_point(field_add_mutable:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
  return _s;
}
inline const std::string& ListSIPDispatchRuleRequest::_internal_dispatch_rule_ids(int index) const {
  return _impl_.dispatch_rule_ids_.Get(index);
}
inline const std::string& ListSIPDispatchRuleRequest::dispatch_rule_ids(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
  return _internal_dispatch_rule_ids(index);
}
inline std::string* ListSIPDispatchRuleRequest::mutable_dispatch_rule_ids(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
  return _impl_.dispatch_rule_ids_.Mutable(index);
}
inline void ListSIPDispatchRuleRequest::set_dispatch_rule_ids(int index, const std::string& value) {
  _impl_.dispatch_rule_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline void ListSIPDispatchRuleRequest::set_dispatch_rule_ids(int index, std::string&& value) {
  _impl_.dispatch_rule_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline void ListSIPDispatchRuleRequest::set_dispatch_rule_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dispatch_rule_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline void ListSIPDispatchRuleRequest::set_dispatch_rule_ids(int index, const char* value, size_t size) {
  _impl_.dispatch_rule_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline std::string* ListSIPDispatchRuleRequest::_internal_add_dispatch_rule_ids() {
  return _impl_.dispatch_rule_ids_.Add();
}
inline void ListSIPDispatchRuleRequest::add_dispatch_rule_ids(const std::string& value) {
  _impl_.dispatch_rule_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline void ListSIPDispatchRuleRequest::add_dispatch_rule_ids(std::string&& value) {
  _impl_.dispatch_rule_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline void ListSIPDispatchRuleRequest::add_dispatch_rule_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dispatch_rule_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline void ListSIPDispatchRuleRequest::add_dispatch_rule_ids(const char* value, size_t size) {
  _impl_.dispatch_rule_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSIPDispatchRuleRequest::dispatch_rule_ids() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
  return _impl_.dispatch_rule_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSIPDispatchRuleRequest::mutable_dispatch_rule_ids() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids)
  return &_impl_.dispatch_rule_ids_;
}

// repeated string trunk_ids = 2;
inline int ListSIPDispatchRuleRequest::_internal_trunk_ids_size() const {
  return _impl_.trunk_ids_.size();
}
inline int ListSIPDispatchRuleRequest::trunk_ids_size() const {
  return _internal_trunk_ids_size();
}
inline void ListSIPDispatchRuleRequest::clear_trunk_ids() {
  _impl_.trunk_ids_.Clear();
}
inline std::string* ListSIPDispatchRuleRequest::add_trunk_ids() {
  std::string* _s = _internal_add_trunk_ids();
  // @@protoc_insertion_point(field_add_mutable:livekit.ListSIPDispatchRuleRequest.trunk_ids)
  return _s;
}
inline const std::string& ListSIPDispatchRuleRequest::_internal_trunk_ids(int index) const {
  return _impl_.trunk_ids_.Get(index);
}
inline const std::string& ListSIPDispatchRuleRequest::trunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPDispatchRuleRequest.trunk_ids)
  return _internal_trunk_ids(index);
}
inline std::string* ListSIPDispatchRuleRequest::mutable_trunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPDispatchRuleRequest.trunk_ids)
  return _impl_.trunk_ids_.Mutable(index);
}
inline void ListSIPDispatchRuleRequest::set_trunk_ids(int index, const std::string& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline void ListSIPDispatchRuleRequest::set_trunk_ids(int index, std::string&& value) {
  _impl_.trunk_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline void ListSIPDispatchRuleRequest::set_trunk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline void ListSIPDispatchRuleRequest::set_trunk_ids(int index, const char* value, size_t size) {
  _impl_.trunk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline std::string* ListSIPDispatchRuleRequest::_internal_add_trunk_ids() {
  return _impl_.trunk_ids_.Add();
}
inline void ListSIPDispatchRuleRequest::add_trunk_ids(const std::string& value) {
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline void ListSIPDispatchRuleRequest::add_trunk_ids(std::string&& value) {
  _impl_.trunk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline void ListSIPDispatchRuleRequest::add_trunk_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.trunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline void ListSIPDispatchRuleRequest::add_trunk_ids(const char* value, size_t size) {
  _impl_.trunk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:livekit.ListSIPDispatchRuleRequest.trunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSIPDispatchRuleRequest::trunk_ids() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPDispatchRuleRequest.trunk_ids)
  return _impl_.trunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSIPDispatchRuleRequest::mutable_trunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPDispatchRuleRequest.trunk_ids)
  return &_impl_.trunk_ids_;
}

// -------------------------------------------------------------------

// ListSIPDispatchRuleResponse

// repeated .livekit.SIPDispatchRuleInfo items = 1;
inline int ListSIPDispatchRuleResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ListSIPDispatchRuleResponse::items_size() const {
  return _internal_items_size();
}
inline void ListSIPDispatchRuleResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::livekit::SIPDispatchRuleInfo* ListSIPDispatchRuleResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:livekit.ListSIPDispatchRuleResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPDispatchRuleInfo >*
ListSIPDispatchRuleResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:livekit.ListSIPDispatchRuleResponse.items)
  return &_impl_.items_;
}
inline const ::livekit::SIPDispatchRuleInfo& ListSIPDispatchRuleResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::livekit::SIPDispatchRuleInfo& ListSIPDispatchRuleResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ListSIPDispatchRuleResponse.items)
  return _internal_items(index);
}
inline ::livekit::SIPDispatchRuleInfo* ListSIPDispatchRuleResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::livekit::SIPDispatchRuleInfo* ListSIPDispatchRuleResponse::add_items() {
  ::livekit::SIPDispatchRuleInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:livekit.ListSIPDispatchRuleResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::livekit::SIPDispatchRuleInfo >&
ListSIPDispatchRuleResponse::items() const {
  // @@protoc_insertion_point(field_list:livekit.ListSIPDispatchRuleResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// DeleteSIPDispatchRuleRequest

// string sip_dispatch_rule_id = 1;
inline void DeleteSIPDispatchRuleRequest::clear_sip_dispatch_rule_id() {
  _impl_.sip_dispatch_rule_id_.ClearToEmpty();
}
inline const std::string& DeleteSIPDispatchRuleRequest::sip_dispatch_rule_id() const {
  // @@protoc_insertion_point(field_get:livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id)
  return _internal_sip_dispatch_rule_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSIPDispatchRuleRequest::set_sip_dispatch_rule_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_dispatch_rule_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id)
}
inline std::string* DeleteSIPDispatchRuleRequest::mutable_sip_dispatch_rule_id() {
  std::string* _s = _internal_mutable_sip_dispatch_rule_id();
  // @@protoc_insertion_point(field_mutable:livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id)
  return _s;
}
inline const std::string& DeleteSIPDispatchRuleRequest::_internal_sip_dispatch_rule_id() const {
  return _impl_.sip_dispatch_rule_id_.Get();
}
inline void DeleteSIPDispatchRuleRequest::_internal_set_sip_dispatch_rule_id(const std::string& value) {
  
  _impl_.sip_dispatch_rule_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSIPDispatchRuleRequest::_internal_mutable_sip_dispatch_rule_id() {
  
  return _impl_.sip_dispatch_rule_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSIPDispatchRuleRequest::release_sip_dispatch_rule_id() {
  // @@protoc_insertion_point(field_release:livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id)
  return _impl_.sip_dispatch_rule_id_.Release();
}
inline void DeleteSIPDispatchRuleRequest::set_allocated_sip_dispatch_rule_id(std::string* sip_dispatch_rule_id) {
  if (sip_dispatch_rule_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_dispatch_rule_id_.SetAllocated(sip_dispatch_rule_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_dispatch_rule_id_.IsDefault()) {
    _impl_.sip_dispatch_rule_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SIPOutboundConfig

// string hostname = 1;
inline void SIPOutboundConfig::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& SIPOutboundConfig::hostname() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundConfig.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundConfig::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundConfig.hostname)
}
inline std::string* SIPOutboundConfig::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundConfig.hostname)
  return _s;
}
inline const std::string& SIPOutboundConfig::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void SIPOutboundConfig::_internal_set_hostname(const std::string& value) {
  
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundConfig::_internal_mutable_hostname() {
  
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundConfig::release_hostname() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundConfig.hostname)
  return _impl_.hostname_.Release();
}
inline void SIPOutboundConfig::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundConfig.hostname)
}

// .livekit.SIPTransport transport = 2;
inline void SIPOutboundConfig::clear_transport() {
  _impl_.transport_ = 0;
}
inline ::livekit::SIPTransport SIPOutboundConfig::_internal_transport() const {
  return static_cast< ::livekit::SIPTransport >(_impl_.transport_);
}
inline ::livekit::SIPTransport SIPOutboundConfig::transport() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundConfig.transport)
  return _internal_transport();
}
inline void SIPOutboundConfig::_internal_set_transport(::livekit::SIPTransport value) {
  
  _impl_.transport_ = value;
}
inline void SIPOutboundConfig::set_transport(::livekit::SIPTransport value) {
  _internal_set_transport(value);
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundConfig.transport)
}

// string auth_username = 3;
inline void SIPOutboundConfig::clear_auth_username() {
  _impl_.auth_username_.ClearToEmpty();
}
inline const std::string& SIPOutboundConfig::auth_username() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundConfig.auth_username)
  return _internal_auth_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundConfig::set_auth_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundConfig.auth_username)
}
inline std::string* SIPOutboundConfig::mutable_auth_username() {
  std::string* _s = _internal_mutable_auth_username();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundConfig.auth_username)
  return _s;
}
inline const std::string& SIPOutboundConfig::_internal_auth_username() const {
  return _impl_.auth_username_.Get();
}
inline void SIPOutboundConfig::_internal_set_auth_username(const std::string& value) {
  
  _impl_.auth_username_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundConfig::_internal_mutable_auth_username() {
  
  return _impl_.auth_username_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundConfig::release_auth_username() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundConfig.auth_username)
  return _impl_.auth_username_.Release();
}
inline void SIPOutboundConfig::set_allocated_auth_username(std::string* auth_username) {
  if (auth_username != nullptr) {
    
  } else {
    
  }
  _impl_.auth_username_.SetAllocated(auth_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_username_.IsDefault()) {
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundConfig.auth_username)
}

// string auth_password = 4;
inline void SIPOutboundConfig::clear_auth_password() {
  _impl_.auth_password_.ClearToEmpty();
}
inline const std::string& SIPOutboundConfig::auth_password() const {
  // @@protoc_insertion_point(field_get:livekit.SIPOutboundConfig.auth_password)
  return _internal_auth_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPOutboundConfig::set_auth_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPOutboundConfig.auth_password)
}
inline std::string* SIPOutboundConfig::mutable_auth_password() {
  std::string* _s = _internal_mutable_auth_password();
  // @@protoc_insertion_point(field_mutable:livekit.SIPOutboundConfig.auth_password)
  return _s;
}
inline const std::string& SIPOutboundConfig::_internal_auth_password() const {
  return _impl_.auth_password_.Get();
}
inline void SIPOutboundConfig::_internal_set_auth_password(const std::string& value) {
  
  _impl_.auth_password_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPOutboundConfig::_internal_mutable_auth_password() {
  
  return _impl_.auth_password_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPOutboundConfig::release_auth_password() {
  // @@protoc_insertion_point(field_release:livekit.SIPOutboundConfig.auth_password)
  return _impl_.auth_password_.Release();
}
inline void SIPOutboundConfig::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  _impl_.auth_password_.SetAllocated(auth_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_password_.IsDefault()) {
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPOutboundConfig.auth_password)
}

// map<string, string> headers_to_attributes = 5;
inline int SIPOutboundConfig::_internal_headers_to_attributes_size() const {
  return _impl_.headers_to_attributes_.size();
}
inline int SIPOutboundConfig::headers_to_attributes_size() const {
  return _internal_headers_to_attributes_size();
}
inline void SIPOutboundConfig::clear_headers_to_attributes() {
  _impl_.headers_to_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundConfig::_internal_headers_to_attributes() const {
  return _impl_.headers_to_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundConfig::headers_to_attributes() const {
  // @@protoc_insertion_point(field_map:livekit.SIPOutboundConfig.headers_to_attributes)
  return _internal_headers_to_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundConfig::_internal_mutable_headers_to_attributes() {
  return _impl_.headers_to_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundConfig::mutable_headers_to_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPOutboundConfig.headers_to_attributes)
  return _internal_mutable_headers_to_attributes();
}

// map<string, string> attributes_to_headers = 6;
inline int SIPOutboundConfig::_internal_attributes_to_headers_size() const {
  return _impl_.attributes_to_headers_.size();
}
inline int SIPOutboundConfig::attributes_to_headers_size() const {
  return _internal_attributes_to_headers_size();
}
inline void SIPOutboundConfig::clear_attributes_to_headers() {
  _impl_.attributes_to_headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundConfig::_internal_attributes_to_headers() const {
  return _impl_.attributes_to_headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPOutboundConfig::attributes_to_headers() const {
  // @@protoc_insertion_point(field_map:livekit.SIPOutboundConfig.attributes_to_headers)
  return _internal_attributes_to_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundConfig::_internal_mutable_attributes_to_headers() {
  return _impl_.attributes_to_headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPOutboundConfig::mutable_attributes_to_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPOutboundConfig.attributes_to_headers)
  return _internal_mutable_attributes_to_headers();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateSIPParticipantRequest

// string sip_trunk_id = 1;
inline void CreateSIPParticipantRequest::clear_sip_trunk_id() {
  _impl_.sip_trunk_id_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::sip_trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.sip_trunk_id)
  return _internal_sip_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_sip_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.sip_trunk_id)
}
inline std::string* CreateSIPParticipantRequest::mutable_sip_trunk_id() {
  std::string* _s = _internal_mutable_sip_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.sip_trunk_id)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_sip_trunk_id() const {
  return _impl_.sip_trunk_id_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_sip_trunk_id(const std::string& value) {
  
  _impl_.sip_trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_sip_trunk_id() {
  
  return _impl_.sip_trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_sip_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.sip_trunk_id)
  return _impl_.sip_trunk_id_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_sip_trunk_id(std::string* sip_trunk_id) {
  if (sip_trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_trunk_id_.SetAllocated(sip_trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_trunk_id_.IsDefault()) {
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.sip_trunk_id)
}

// .livekit.SIPOutboundConfig trunk = 20;
inline bool CreateSIPParticipantRequest::_internal_has_trunk() const {
  return this != internal_default_instance() && _impl_.trunk_ != nullptr;
}
inline bool CreateSIPParticipantRequest::has_trunk() const {
  return _internal_has_trunk();
}
inline void CreateSIPParticipantRequest::clear_trunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
}
inline const ::livekit::SIPOutboundConfig& CreateSIPParticipantRequest::_internal_trunk() const {
  const ::livekit::SIPOutboundConfig* p = _impl_.trunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPOutboundConfig&>(
      ::livekit::_SIPOutboundConfig_default_instance_);
}
inline const ::livekit::SIPOutboundConfig& CreateSIPParticipantRequest::trunk() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.trunk)
  return _internal_trunk();
}
inline void CreateSIPParticipantRequest::unsafe_arena_set_allocated_trunk(
    ::livekit::SIPOutboundConfig* trunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trunk_);
  }
  _impl_.trunk_ = trunk;
  if (trunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPParticipantRequest.trunk)
}
inline ::livekit::SIPOutboundConfig* CreateSIPParticipantRequest::release_trunk() {
  
  ::livekit::SIPOutboundConfig* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPOutboundConfig* CreateSIPParticipantRequest::unsafe_arena_release_trunk() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.trunk)
  
  ::livekit::SIPOutboundConfig* temp = _impl_.trunk_;
  _impl_.trunk_ = nullptr;
  return temp;
}
inline ::livekit::SIPOutboundConfig* CreateSIPParticipantRequest::_internal_mutable_trunk() {
  
  if (_impl_.trunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPOutboundConfig>(GetArenaForAllocation());
    _impl_.trunk_ = p;
  }
  return _impl_.trunk_;
}
inline ::livekit::SIPOutboundConfig* CreateSIPParticipantRequest::mutable_trunk() {
  ::livekit::SIPOutboundConfig* _msg = _internal_mutable_trunk();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.trunk)
  return _msg;
}
inline void CreateSIPParticipantRequest::set_allocated_trunk(::livekit::SIPOutboundConfig* trunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trunk_;
  }
  if (trunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trunk);
    if (message_arena != submessage_arena) {
      trunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trunk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trunk_ = trunk;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.trunk)
}

// string sip_call_to = 2;
inline void CreateSIPParticipantRequest::clear_sip_call_to() {
  _impl_.sip_call_to_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::sip_call_to() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.sip_call_to)
  return _internal_sip_call_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_sip_call_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_call_to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.sip_call_to)
}
inline std::string* CreateSIPParticipantRequest::mutable_sip_call_to() {
  std::string* _s = _internal_mutable_sip_call_to();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.sip_call_to)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_sip_call_to() const {
  return _impl_.sip_call_to_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_sip_call_to(const std::string& value) {
  
  _impl_.sip_call_to_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_sip_call_to() {
  
  return _impl_.sip_call_to_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_sip_call_to() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.sip_call_to)
  return _impl_.sip_call_to_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_sip_call_to(std::string* sip_call_to) {
  if (sip_call_to != nullptr) {
    
  } else {
    
  }
  _impl_.sip_call_to_.SetAllocated(sip_call_to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_call_to_.IsDefault()) {
    _impl_.sip_call_to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.sip_call_to)
}

// string sip_number = 15;
inline void CreateSIPParticipantRequest::clear_sip_number() {
  _impl_.sip_number_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::sip_number() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.sip_number)
  return _internal_sip_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_sip_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.sip_number)
}
inline std::string* CreateSIPParticipantRequest::mutable_sip_number() {
  std::string* _s = _internal_mutable_sip_number();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.sip_number)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_sip_number() const {
  return _impl_.sip_number_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_sip_number(const std::string& value) {
  
  _impl_.sip_number_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_sip_number() {
  
  return _impl_.sip_number_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_sip_number() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.sip_number)
  return _impl_.sip_number_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_sip_number(std::string* sip_number) {
  if (sip_number != nullptr) {
    
  } else {
    
  }
  _impl_.sip_number_.SetAllocated(sip_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_number_.IsDefault()) {
    _impl_.sip_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.sip_number)
}

// string room_name = 3;
inline void CreateSIPParticipantRequest::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::room_name() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.room_name)
}
inline std::string* CreateSIPParticipantRequest::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.room_name)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.room_name)
  return _impl_.room_name_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.room_name)
}

// string participant_identity = 4;
inline void CreateSIPParticipantRequest::clear_participant_identity() {
  _impl_.participant_identity_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::participant_identity() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.participant_identity)
  return _internal_participant_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_participant_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.participant_identity)
}
inline std::string* CreateSIPParticipantRequest::mutable_participant_identity() {
  std::string* _s = _internal_mutable_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.participant_identity)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_participant_identity() const {
  return _impl_.participant_identity_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_participant_identity(const std::string& value) {
  
  _impl_.participant_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_participant_identity() {
  
  return _impl_.participant_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_participant_identity() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.participant_identity)
  return _impl_.participant_identity_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_participant_identity(std::string* participant_identity) {
  if (participant_identity != nullptr) {
    
  } else {
    
  }
  _impl_.participant_identity_.SetAllocated(participant_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_identity_.IsDefault()) {
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.participant_identity)
}

// string participant_name = 7;
inline void CreateSIPParticipantRequest::clear_participant_name() {
  _impl_.participant_name_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::participant_name() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.participant_name)
  return _internal_participant_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_participant_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.participant_name)
}
inline std::string* CreateSIPParticipantRequest::mutable_participant_name() {
  std::string* _s = _internal_mutable_participant_name();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.participant_name)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_participant_name() const {
  return _impl_.participant_name_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_participant_name(const std::string& value) {
  
  _impl_.participant_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_participant_name() {
  
  return _impl_.participant_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_participant_name() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.participant_name)
  return _impl_.participant_name_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_participant_name(std::string* participant_name) {
  if (participant_name != nullptr) {
    
  } else {
    
  }
  _impl_.participant_name_.SetAllocated(participant_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_name_.IsDefault()) {
    _impl_.participant_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.participant_name)
}

// string participant_metadata = 8;
inline void CreateSIPParticipantRequest::clear_participant_metadata() {
  _impl_.participant_metadata_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::participant_metadata() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.participant_metadata)
  return _internal_participant_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_participant_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.participant_metadata)
}
inline std::string* CreateSIPParticipantRequest::mutable_participant_metadata() {
  std::string* _s = _internal_mutable_participant_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.participant_metadata)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_participant_metadata() const {
  return _impl_.participant_metadata_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_participant_metadata(const std::string& value) {
  
  _impl_.participant_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_participant_metadata() {
  
  return _impl_.participant_metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_participant_metadata() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.participant_metadata)
  return _impl_.participant_metadata_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_participant_metadata(std::string* participant_metadata) {
  if (participant_metadata != nullptr) {
    
  } else {
    
  }
  _impl_.participant_metadata_.SetAllocated(participant_metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_metadata_.IsDefault()) {
    _impl_.participant_metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.participant_metadata)
}

// map<string, string> participant_attributes = 9;
inline int CreateSIPParticipantRequest::_internal_participant_attributes_size() const {
  return _impl_.participant_attributes_.size();
}
inline int CreateSIPParticipantRequest::participant_attributes_size() const {
  return _internal_participant_attributes_size();
}
inline void CreateSIPParticipantRequest::clear_participant_attributes() {
  _impl_.participant_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSIPParticipantRequest::_internal_participant_attributes() const {
  return _impl_.participant_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSIPParticipantRequest::participant_attributes() const {
  // @@protoc_insertion_point(field_map:livekit.CreateSIPParticipantRequest.participant_attributes)
  return _internal_participant_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSIPParticipantRequest::_internal_mutable_participant_attributes() {
  return _impl_.participant_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSIPParticipantRequest::mutable_participant_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.CreateSIPParticipantRequest.participant_attributes)
  return _internal_mutable_participant_attributes();
}

// string dtmf = 5;
inline void CreateSIPParticipantRequest::clear_dtmf() {
  _impl_.dtmf_.ClearToEmpty();
}
inline const std::string& CreateSIPParticipantRequest::dtmf() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.dtmf)
  return _internal_dtmf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSIPParticipantRequest::set_dtmf(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dtmf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.dtmf)
}
inline std::string* CreateSIPParticipantRequest::mutable_dtmf() {
  std::string* _s = _internal_mutable_dtmf();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.dtmf)
  return _s;
}
inline const std::string& CreateSIPParticipantRequest::_internal_dtmf() const {
  return _impl_.dtmf_.Get();
}
inline void CreateSIPParticipantRequest::_internal_set_dtmf(const std::string& value) {
  
  _impl_.dtmf_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::_internal_mutable_dtmf() {
  
  return _impl_.dtmf_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSIPParticipantRequest::release_dtmf() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.dtmf)
  return _impl_.dtmf_.Release();
}
inline void CreateSIPParticipantRequest::set_allocated_dtmf(std::string* dtmf) {
  if (dtmf != nullptr) {
    
  } else {
    
  }
  _impl_.dtmf_.SetAllocated(dtmf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dtmf_.IsDefault()) {
    _impl_.dtmf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.dtmf)
}

// bool play_ringtone = 6 [deprecated = true];
inline void CreateSIPParticipantRequest::clear_play_ringtone() {
  _impl_.play_ringtone_ = false;
}
inline bool CreateSIPParticipantRequest::_internal_play_ringtone() const {
  return _impl_.play_ringtone_;
}
inline bool CreateSIPParticipantRequest::play_ringtone() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.play_ringtone)
  return _internal_play_ringtone();
}
inline void CreateSIPParticipantRequest::_internal_set_play_ringtone(bool value) {
  
  _impl_.play_ringtone_ = value;
}
inline void CreateSIPParticipantRequest::set_play_ringtone(bool value) {
  _internal_set_play_ringtone(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.play_ringtone)
}

// bool play_dialtone = 13;
inline void CreateSIPParticipantRequest::clear_play_dialtone() {
  _impl_.play_dialtone_ = false;
}
inline bool CreateSIPParticipantRequest::_internal_play_dialtone() const {
  return _impl_.play_dialtone_;
}
inline bool CreateSIPParticipantRequest::play_dialtone() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.play_dialtone)
  return _internal_play_dialtone();
}
inline void CreateSIPParticipantRequest::_internal_set_play_dialtone(bool value) {
  
  _impl_.play_dialtone_ = value;
}
inline void CreateSIPParticipantRequest::set_play_dialtone(bool value) {
  _internal_set_play_dialtone(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.play_dialtone)
}

// bool hide_phone_number = 10;
inline void CreateSIPParticipantRequest::clear_hide_phone_number() {
  _impl_.hide_phone_number_ = false;
}
inline bool CreateSIPParticipantRequest::_internal_hide_phone_number() const {
  return _impl_.hide_phone_number_;
}
inline bool CreateSIPParticipantRequest::hide_phone_number() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.hide_phone_number)
  return _internal_hide_phone_number();
}
inline void CreateSIPParticipantRequest::_internal_set_hide_phone_number(bool value) {
  
  _impl_.hide_phone_number_ = value;
}
inline void CreateSIPParticipantRequest::set_hide_phone_number(bool value) {
  _internal_set_hide_phone_number(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.hide_phone_number)
}

// map<string, string> headers = 16;
inline int CreateSIPParticipantRequest::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int CreateSIPParticipantRequest::headers_size() const {
  return _internal_headers_size();
}
inline void CreateSIPParticipantRequest::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSIPParticipantRequest::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSIPParticipantRequest::headers() const {
  // @@protoc_insertion_point(field_map:livekit.CreateSIPParticipantRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSIPParticipantRequest::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSIPParticipantRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.CreateSIPParticipantRequest.headers)
  return _internal_mutable_headers();
}

// .livekit.SIPHeaderOptions include_headers = 17;
inline void CreateSIPParticipantRequest::clear_include_headers() {
  _impl_.include_headers_ = 0;
}
inline ::livekit::SIPHeaderOptions CreateSIPParticipantRequest::_internal_include_headers() const {
  return static_cast< ::livekit::SIPHeaderOptions >(_impl_.include_headers_);
}
inline ::livekit::SIPHeaderOptions CreateSIPParticipantRequest::include_headers() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.include_headers)
  return _internal_include_headers();
}
inline void CreateSIPParticipantRequest::_internal_set_include_headers(::livekit::SIPHeaderOptions value) {
  
  _impl_.include_headers_ = value;
}
inline void CreateSIPParticipantRequest::set_include_headers(::livekit::SIPHeaderOptions value) {
  _internal_set_include_headers(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.include_headers)
}

// .google.protobuf.Duration ringing_timeout = 11;
inline bool CreateSIPParticipantRequest::_internal_has_ringing_timeout() const {
  return this != internal_default_instance() && _impl_.ringing_timeout_ != nullptr;
}
inline bool CreateSIPParticipantRequest::has_ringing_timeout() const {
  return _internal_has_ringing_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CreateSIPParticipantRequest::_internal_ringing_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ringing_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CreateSIPParticipantRequest::ringing_timeout() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.ringing_timeout)
  return _internal_ringing_timeout();
}
inline void CreateSIPParticipantRequest::unsafe_arena_set_allocated_ringing_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ringing_timeout_);
  }
  _impl_.ringing_timeout_ = ringing_timeout;
  if (ringing_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPParticipantRequest.ringing_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::release_ringing_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ringing_timeout_;
  _impl_.ringing_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::unsafe_arena_release_ringing_timeout() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.ringing_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ringing_timeout_;
  _impl_.ringing_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::_internal_mutable_ringing_timeout() {
  
  if (_impl_.ringing_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ringing_timeout_ = p;
  }
  return _impl_.ringing_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::mutable_ringing_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ringing_timeout();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.ringing_timeout)
  return _msg;
}
inline void CreateSIPParticipantRequest::set_allocated_ringing_timeout(::PROTOBUF_NAMESPACE_ID::Duration* ringing_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ringing_timeout_);
  }
  if (ringing_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ringing_timeout));
    if (message_arena != submessage_arena) {
      ringing_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ringing_timeout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ringing_timeout_ = ringing_timeout;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.ringing_timeout)
}

// .google.protobuf.Duration max_call_duration = 12;
inline bool CreateSIPParticipantRequest::_internal_has_max_call_duration() const {
  return this != internal_default_instance() && _impl_.max_call_duration_ != nullptr;
}
inline bool CreateSIPParticipantRequest::has_max_call_duration() const {
  return _internal_has_max_call_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CreateSIPParticipantRequest::_internal_max_call_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_call_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CreateSIPParticipantRequest::max_call_duration() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.max_call_duration)
  return _internal_max_call_duration();
}
inline void CreateSIPParticipantRequest::unsafe_arena_set_allocated_max_call_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_call_duration_);
  }
  _impl_.max_call_duration_ = max_call_duration;
  if (max_call_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.CreateSIPParticipantRequest.max_call_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::release_max_call_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_call_duration_;
  _impl_.max_call_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::unsafe_arena_release_max_call_duration() {
  // @@protoc_insertion_point(field_release:livekit.CreateSIPParticipantRequest.max_call_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_call_duration_;
  _impl_.max_call_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::_internal_mutable_max_call_duration() {
  
  if (_impl_.max_call_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_call_duration_ = p;
  }
  return _impl_.max_call_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateSIPParticipantRequest::mutable_max_call_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_call_duration();
  // @@protoc_insertion_point(field_mutable:livekit.CreateSIPParticipantRequest.max_call_duration)
  return _msg;
}
inline void CreateSIPParticipantRequest::set_allocated_max_call_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_call_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_call_duration_);
  }
  if (max_call_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_call_duration));
    if (message_arena != submessage_arena) {
      max_call_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_call_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_call_duration_ = max_call_duration;
  // @@protoc_insertion_point(field_set_allocated:livekit.CreateSIPParticipantRequest.max_call_duration)
}

// bool krisp_enabled = 14;
inline void CreateSIPParticipantRequest::clear_krisp_enabled() {
  _impl_.krisp_enabled_ = false;
}
inline bool CreateSIPParticipantRequest::_internal_krisp_enabled() const {
  return _impl_.krisp_enabled_;
}
inline bool CreateSIPParticipantRequest::krisp_enabled() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.krisp_enabled)
  return _internal_krisp_enabled();
}
inline void CreateSIPParticipantRequest::_internal_set_krisp_enabled(bool value) {
  
  _impl_.krisp_enabled_ = value;
}
inline void CreateSIPParticipantRequest::set_krisp_enabled(bool value) {
  _internal_set_krisp_enabled(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.krisp_enabled)
}

// .livekit.SIPMediaEncryption media_encryption = 18;
inline void CreateSIPParticipantRequest::clear_media_encryption() {
  _impl_.media_encryption_ = 0;
}
inline ::livekit::SIPMediaEncryption CreateSIPParticipantRequest::_internal_media_encryption() const {
  return static_cast< ::livekit::SIPMediaEncryption >(_impl_.media_encryption_);
}
inline ::livekit::SIPMediaEncryption CreateSIPParticipantRequest::media_encryption() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.media_encryption)
  return _internal_media_encryption();
}
inline void CreateSIPParticipantRequest::_internal_set_media_encryption(::livekit::SIPMediaEncryption value) {
  
  _impl_.media_encryption_ = value;
}
inline void CreateSIPParticipantRequest::set_media_encryption(::livekit::SIPMediaEncryption value) {
  _internal_set_media_encryption(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.media_encryption)
}

// bool wait_until_answered = 19;
inline void CreateSIPParticipantRequest::clear_wait_until_answered() {
  _impl_.wait_until_answered_ = false;
}
inline bool CreateSIPParticipantRequest::_internal_wait_until_answered() const {
  return _impl_.wait_until_answered_;
}
inline bool CreateSIPParticipantRequest::wait_until_answered() const {
  // @@protoc_insertion_point(field_get:livekit.CreateSIPParticipantRequest.wait_until_answered)
  return _internal_wait_until_answered();
}
inline void CreateSIPParticipantRequest::_internal_set_wait_until_answered(bool value) {
  
  _impl_.wait_until_answered_ = value;
}
inline void CreateSIPParticipantRequest::set_wait_until_answered(bool value) {
  _internal_set_wait_until_answered(value);
  // @@protoc_insertion_point(field_set:livekit.CreateSIPParticipantRequest.wait_until_answered)
}

// -------------------------------------------------------------------

// SIPParticipantInfo

// string participant_id = 1;
inline void SIPParticipantInfo::clear_participant_id() {
  _impl_.participant_id_.ClearToEmpty();
}
inline const std::string& SIPParticipantInfo::participant_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPParticipantInfo.participant_id)
  return _internal_participant_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPParticipantInfo::set_participant_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPParticipantInfo.participant_id)
}
inline std::string* SIPParticipantInfo::mutable_participant_id() {
  std::string* _s = _internal_mutable_participant_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPParticipantInfo.participant_id)
  return _s;
}
inline const std::string& SIPParticipantInfo::_internal_participant_id() const {
  return _impl_.participant_id_.Get();
}
inline void SIPParticipantInfo::_internal_set_participant_id(const std::string& value) {
  
  _impl_.participant_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::_internal_mutable_participant_id() {
  
  return _impl_.participant_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::release_participant_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPParticipantInfo.participant_id)
  return _impl_.participant_id_.Release();
}
inline void SIPParticipantInfo::set_allocated_participant_id(std::string* participant_id) {
  if (participant_id != nullptr) {
    
  } else {
    
  }
  _impl_.participant_id_.SetAllocated(participant_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_id_.IsDefault()) {
    _impl_.participant_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPParticipantInfo.participant_id)
}

// string participant_identity = 2;
inline void SIPParticipantInfo::clear_participant_identity() {
  _impl_.participant_identity_.ClearToEmpty();
}
inline const std::string& SIPParticipantInfo::participant_identity() const {
  // @@protoc_insertion_point(field_get:livekit.SIPParticipantInfo.participant_identity)
  return _internal_participant_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPParticipantInfo::set_participant_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPParticipantInfo.participant_identity)
}
inline std::string* SIPParticipantInfo::mutable_participant_identity() {
  std::string* _s = _internal_mutable_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.SIPParticipantInfo.participant_identity)
  return _s;
}
inline const std::string& SIPParticipantInfo::_internal_participant_identity() const {
  return _impl_.participant_identity_.Get();
}
inline void SIPParticipantInfo::_internal_set_participant_identity(const std::string& value) {
  
  _impl_.participant_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::_internal_mutable_participant_identity() {
  
  return _impl_.participant_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::release_participant_identity() {
  // @@protoc_insertion_point(field_release:livekit.SIPParticipantInfo.participant_identity)
  return _impl_.participant_identity_.Release();
}
inline void SIPParticipantInfo::set_allocated_participant_identity(std::string* participant_identity) {
  if (participant_identity != nullptr) {
    
  } else {
    
  }
  _impl_.participant_identity_.SetAllocated(participant_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_identity_.IsDefault()) {
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPParticipantInfo.participant_identity)
}

// string room_name = 3;
inline void SIPParticipantInfo::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& SIPParticipantInfo::room_name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPParticipantInfo.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPParticipantInfo::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPParticipantInfo.room_name)
}
inline std::string* SIPParticipantInfo::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPParticipantInfo.room_name)
  return _s;
}
inline const std::string& SIPParticipantInfo::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void SIPParticipantInfo::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::release_room_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPParticipantInfo.room_name)
  return _impl_.room_name_.Release();
}
inline void SIPParticipantInfo::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPParticipantInfo.room_name)
}

// string sip_call_id = 4;
inline void SIPParticipantInfo::clear_sip_call_id() {
  _impl_.sip_call_id_.ClearToEmpty();
}
inline const std::string& SIPParticipantInfo::sip_call_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPParticipantInfo.sip_call_id)
  return _internal_sip_call_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPParticipantInfo::set_sip_call_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_call_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPParticipantInfo.sip_call_id)
}
inline std::string* SIPParticipantInfo::mutable_sip_call_id() {
  std::string* _s = _internal_mutable_sip_call_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPParticipantInfo.sip_call_id)
  return _s;
}
inline const std::string& SIPParticipantInfo::_internal_sip_call_id() const {
  return _impl_.sip_call_id_.Get();
}
inline void SIPParticipantInfo::_internal_set_sip_call_id(const std::string& value) {
  
  _impl_.sip_call_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::_internal_mutable_sip_call_id() {
  
  return _impl_.sip_call_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPParticipantInfo::release_sip_call_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPParticipantInfo.sip_call_id)
  return _impl_.sip_call_id_.Release();
}
inline void SIPParticipantInfo::set_allocated_sip_call_id(std::string* sip_call_id) {
  if (sip_call_id != nullptr) {
    
  } else {
    
  }
  _impl_.sip_call_id_.SetAllocated(sip_call_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_call_id_.IsDefault()) {
    _impl_.sip_call_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPParticipantInfo.sip_call_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TransferSIPParticipantRequest

// string participant_identity = 1;
inline void TransferSIPParticipantRequest::clear_participant_identity() {
  _impl_.participant_identity_.ClearToEmpty();
}
inline const std::string& TransferSIPParticipantRequest::participant_identity() const {
  // @@protoc_insertion_point(field_get:livekit.TransferSIPParticipantRequest.participant_identity)
  return _internal_participant_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferSIPParticipantRequest::set_participant_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.TransferSIPParticipantRequest.participant_identity)
}
inline std::string* TransferSIPParticipantRequest::mutable_participant_identity() {
  std::string* _s = _internal_mutable_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.TransferSIPParticipantRequest.participant_identity)
  return _s;
}
inline const std::string& TransferSIPParticipantRequest::_internal_participant_identity() const {
  return _impl_.participant_identity_.Get();
}
inline void TransferSIPParticipantRequest::_internal_set_participant_identity(const std::string& value) {
  
  _impl_.participant_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferSIPParticipantRequest::_internal_mutable_participant_identity() {
  
  return _impl_.participant_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferSIPParticipantRequest::release_participant_identity() {
  // @@protoc_insertion_point(field_release:livekit.TransferSIPParticipantRequest.participant_identity)
  return _impl_.participant_identity_.Release();
}
inline void TransferSIPParticipantRequest::set_allocated_participant_identity(std::string* participant_identity) {
  if (participant_identity != nullptr) {
    
  } else {
    
  }
  _impl_.participant_identity_.SetAllocated(participant_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_identity_.IsDefault()) {
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.TransferSIPParticipantRequest.participant_identity)
}

// string room_name = 2;
inline void TransferSIPParticipantRequest::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& TransferSIPParticipantRequest::room_name() const {
  // @@protoc_insertion_point(field_get:livekit.TransferSIPParticipantRequest.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferSIPParticipantRequest::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.TransferSIPParticipantRequest.room_name)
}
inline std::string* TransferSIPParticipantRequest::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:livekit.TransferSIPParticipantRequest.room_name)
  return _s;
}
inline const std::string& TransferSIPParticipantRequest::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void TransferSIPParticipantRequest::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferSIPParticipantRequest::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferSIPParticipantRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:livekit.TransferSIPParticipantRequest.room_name)
  return _impl_.room_name_.Release();
}
inline void TransferSIPParticipantRequest::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.TransferSIPParticipantRequest.room_name)
}

// string transfer_to = 3;
inline void TransferSIPParticipantRequest::clear_transfer_to() {
  _impl_.transfer_to_.ClearToEmpty();
}
inline const std::string& TransferSIPParticipantRequest::transfer_to() const {
  // @@protoc_insertion_point(field_get:livekit.TransferSIPParticipantRequest.transfer_to)
  return _internal_transfer_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferSIPParticipantRequest::set_transfer_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transfer_to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.TransferSIPParticipantRequest.transfer_to)
}
inline std::string* TransferSIPParticipantRequest::mutable_transfer_to() {
  std::string* _s = _internal_mutable_transfer_to();
  // @@protoc_insertion_point(field_mutable:livekit.TransferSIPParticipantRequest.transfer_to)
  return _s;
}
inline const std::string& TransferSIPParticipantRequest::_internal_transfer_to() const {
  return _impl_.transfer_to_.Get();
}
inline void TransferSIPParticipantRequest::_internal_set_transfer_to(const std::string& value) {
  
  _impl_.transfer_to_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferSIPParticipantRequest::_internal_mutable_transfer_to() {
  
  return _impl_.transfer_to_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferSIPParticipantRequest::release_transfer_to() {
  // @@protoc_insertion_point(field_release:livekit.TransferSIPParticipantRequest.transfer_to)
  return _impl_.transfer_to_.Release();
}
inline void TransferSIPParticipantRequest::set_allocated_transfer_to(std::string* transfer_to) {
  if (transfer_to != nullptr) {
    
  } else {
    
  }
  _impl_.transfer_to_.SetAllocated(transfer_to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transfer_to_.IsDefault()) {
    _impl_.transfer_to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.TransferSIPParticipantRequest.transfer_to)
}

// bool play_dialtone = 4;
inline void TransferSIPParticipantRequest::clear_play_dialtone() {
  _impl_.play_dialtone_ = false;
}
inline bool TransferSIPParticipantRequest::_internal_play_dialtone() const {
  return _impl_.play_dialtone_;
}
inline bool TransferSIPParticipantRequest::play_dialtone() const {
  // @@protoc_insertion_point(field_get:livekit.TransferSIPParticipantRequest.play_dialtone)
  return _internal_play_dialtone();
}
inline void TransferSIPParticipantRequest::_internal_set_play_dialtone(bool value) {
  
  _impl_.play_dialtone_ = value;
}
inline void TransferSIPParticipantRequest::set_play_dialtone(bool value) {
  _internal_set_play_dialtone(value);
  // @@protoc_insertion_point(field_set:livekit.TransferSIPParticipantRequest.play_dialtone)
}

// map<string, string> headers = 5;
inline int TransferSIPParticipantRequest::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int TransferSIPParticipantRequest::headers_size() const {
  return _internal_headers_size();
}
inline void TransferSIPParticipantRequest::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransferSIPParticipantRequest::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransferSIPParticipantRequest::headers() const {
  // @@protoc_insertion_point(field_map:livekit.TransferSIPParticipantRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransferSIPParticipantRequest::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransferSIPParticipantRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:livekit.TransferSIPParticipantRequest.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SIPCallInfo

// string call_id = 1;
inline void SIPCallInfo::clear_call_id() {
  _impl_.call_id_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::call_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.call_id)
  return _internal_call_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_call_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.call_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.call_id)
}
inline std::string* SIPCallInfo::mutable_call_id() {
  std::string* _s = _internal_mutable_call_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.call_id)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_call_id() const {
  return _impl_.call_id_.Get();
}
inline void SIPCallInfo::_internal_set_call_id(const std::string& value) {
  
  _impl_.call_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_call_id() {
  
  return _impl_.call_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_call_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.call_id)
  return _impl_.call_id_.Release();
}
inline void SIPCallInfo::set_allocated_call_id(std::string* call_id) {
  if (call_id != nullptr) {
    
  } else {
    
  }
  _impl_.call_id_.SetAllocated(call_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.call_id_.IsDefault()) {
    _impl_.call_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.call_id)
}

// string trunk_id = 2;
inline void SIPCallInfo::clear_trunk_id() {
  _impl_.trunk_id_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::trunk_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.trunk_id)
  return _internal_trunk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_trunk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trunk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.trunk_id)
}
inline std::string* SIPCallInfo::mutable_trunk_id() {
  std::string* _s = _internal_mutable_trunk_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.trunk_id)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_trunk_id() const {
  return _impl_.trunk_id_.Get();
}
inline void SIPCallInfo::_internal_set_trunk_id(const std::string& value) {
  
  _impl_.trunk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_trunk_id() {
  
  return _impl_.trunk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_trunk_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.trunk_id)
  return _impl_.trunk_id_.Release();
}
inline void SIPCallInfo::set_allocated_trunk_id(std::string* trunk_id) {
  if (trunk_id != nullptr) {
    
  } else {
    
  }
  _impl_.trunk_id_.SetAllocated(trunk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trunk_id_.IsDefault()) {
    _impl_.trunk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.trunk_id)
}

// string dispatch_rule_id = 16;
inline void SIPCallInfo::clear_dispatch_rule_id() {
  _impl_.dispatch_rule_id_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::dispatch_rule_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.dispatch_rule_id)
  return _internal_dispatch_rule_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_dispatch_rule_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dispatch_rule_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.dispatch_rule_id)
}
inline std::string* SIPCallInfo::mutable_dispatch_rule_id() {
  std::string* _s = _internal_mutable_dispatch_rule_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.dispatch_rule_id)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_dispatch_rule_id() const {
  return _impl_.dispatch_rule_id_.Get();
}
inline void SIPCallInfo::_internal_set_dispatch_rule_id(const std::string& value) {
  
  _impl_.dispatch_rule_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_dispatch_rule_id() {
  
  return _impl_.dispatch_rule_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_dispatch_rule_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.dispatch_rule_id)
  return _impl_.dispatch_rule_id_.Release();
}
inline void SIPCallInfo::set_allocated_dispatch_rule_id(std::string* dispatch_rule_id) {
  if (dispatch_rule_id != nullptr) {
    
  } else {
    
  }
  _impl_.dispatch_rule_id_.SetAllocated(dispatch_rule_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dispatch_rule_id_.IsDefault()) {
    _impl_.dispatch_rule_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.dispatch_rule_id)
}

// string region = 17;
inline void SIPCallInfo::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::region() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.region)
}
inline std::string* SIPCallInfo::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.region)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_region() const {
  return _impl_.region_.Get();
}
inline void SIPCallInfo::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_region() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.region)
  return _impl_.region_.Release();
}
inline void SIPCallInfo::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.region)
}

// string room_name = 3;
inline void SIPCallInfo::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::room_name() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.room_name)
}
inline std::string* SIPCallInfo::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.room_name)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void SIPCallInfo::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_room_name() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.room_name)
  return _impl_.room_name_.Release();
}
inline void SIPCallInfo::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.room_name)
}

// string room_id = 4;
inline void SIPCallInfo::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::room_id() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.room_id)
}
inline std::string* SIPCallInfo::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.room_id)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void SIPCallInfo::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.room_id)
  return _impl_.room_id_.Release();
}
inline void SIPCallInfo::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.room_id)
}

// string participant_identity = 5;
inline void SIPCallInfo::clear_participant_identity() {
  _impl_.participant_identity_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::participant_identity() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.participant_identity)
  return _internal_participant_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_participant_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.participant_identity)
}
inline std::string* SIPCallInfo::mutable_participant_identity() {
  std::string* _s = _internal_mutable_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.participant_identity)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_participant_identity() const {
  return _impl_.participant_identity_.Get();
}
inline void SIPCallInfo::_internal_set_participant_identity(const std::string& value) {
  
  _impl_.participant_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_participant_identity() {
  
  return _impl_.participant_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_participant_identity() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.participant_identity)
  return _impl_.participant_identity_.Release();
}
inline void SIPCallInfo::set_allocated_participant_identity(std::string* participant_identity) {
  if (participant_identity != nullptr) {
    
  } else {
    
  }
  _impl_.participant_identity_.SetAllocated(participant_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_identity_.IsDefault()) {
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.participant_identity)
}

// map<string, string> participant_attributes = 18;
inline int SIPCallInfo::_internal_participant_attributes_size() const {
  return _impl_.participant_attributes_.size();
}
inline int SIPCallInfo::participant_attributes_size() const {
  return _internal_participant_attributes_size();
}
inline void SIPCallInfo::clear_participant_attributes() {
  _impl_.participant_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPCallInfo::_internal_participant_attributes() const {
  return _impl_.participant_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SIPCallInfo::participant_attributes() const {
  // @@protoc_insertion_point(field_map:livekit.SIPCallInfo.participant_attributes)
  return _internal_participant_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPCallInfo::_internal_mutable_participant_attributes() {
  return _impl_.participant_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SIPCallInfo::mutable_participant_attributes() {
  // @@protoc_insertion_point(field_mutable_map:livekit.SIPCallInfo.participant_attributes)
  return _internal_mutable_participant_attributes();
}

// .livekit.SIPUri from_uri = 6;
inline bool SIPCallInfo::_internal_has_from_uri() const {
  return this != internal_default_instance() && _impl_.from_uri_ != nullptr;
}
inline bool SIPCallInfo::has_from_uri() const {
  return _internal_has_from_uri();
}
inline void SIPCallInfo::clear_from_uri() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_uri_ != nullptr) {
    delete _impl_.from_uri_;
  }
  _impl_.from_uri_ = nullptr;
}
inline const ::livekit::SIPUri& SIPCallInfo::_internal_from_uri() const {
  const ::livekit::SIPUri* p = _impl_.from_uri_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPUri&>(
      ::livekit::_SIPUri_default_instance_);
}
inline const ::livekit::SIPUri& SIPCallInfo::from_uri() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.from_uri)
  return _internal_from_uri();
}
inline void SIPCallInfo::unsafe_arena_set_allocated_from_uri(
    ::livekit::SIPUri* from_uri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_uri_);
  }
  _impl_.from_uri_ = from_uri;
  if (from_uri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPCallInfo.from_uri)
}
inline ::livekit::SIPUri* SIPCallInfo::release_from_uri() {
  
  ::livekit::SIPUri* temp = _impl_.from_uri_;
  _impl_.from_uri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPUri* SIPCallInfo::unsafe_arena_release_from_uri() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.from_uri)
  
  ::livekit::SIPUri* temp = _impl_.from_uri_;
  _impl_.from_uri_ = nullptr;
  return temp;
}
inline ::livekit::SIPUri* SIPCallInfo::_internal_mutable_from_uri() {
  
  if (_impl_.from_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPUri>(GetArenaForAllocation());
    _impl_.from_uri_ = p;
  }
  return _impl_.from_uri_;
}
inline ::livekit::SIPUri* SIPCallInfo::mutable_from_uri() {
  ::livekit::SIPUri* _msg = _internal_mutable_from_uri();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.from_uri)
  return _msg;
}
inline void SIPCallInfo::set_allocated_from_uri(::livekit::SIPUri* from_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_uri_;
  }
  if (from_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from_uri);
    if (message_arena != submessage_arena) {
      from_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_uri, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_uri_ = from_uri;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.from_uri)
}

// .livekit.SIPUri to_uri = 7;
inline bool SIPCallInfo::_internal_has_to_uri() const {
  return this != internal_default_instance() && _impl_.to_uri_ != nullptr;
}
inline bool SIPCallInfo::has_to_uri() const {
  return _internal_has_to_uri();
}
inline void SIPCallInfo::clear_to_uri() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_uri_ != nullptr) {
    delete _impl_.to_uri_;
  }
  _impl_.to_uri_ = nullptr;
}
inline const ::livekit::SIPUri& SIPCallInfo::_internal_to_uri() const {
  const ::livekit::SIPUri* p = _impl_.to_uri_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPUri&>(
      ::livekit::_SIPUri_default_instance_);
}
inline const ::livekit::SIPUri& SIPCallInfo::to_uri() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.to_uri)
  return _internal_to_uri();
}
inline void SIPCallInfo::unsafe_arena_set_allocated_to_uri(
    ::livekit::SIPUri* to_uri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_uri_);
  }
  _impl_.to_uri_ = to_uri;
  if (to_uri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPCallInfo.to_uri)
}
inline ::livekit::SIPUri* SIPCallInfo::release_to_uri() {
  
  ::livekit::SIPUri* temp = _impl_.to_uri_;
  _impl_.to_uri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPUri* SIPCallInfo::unsafe_arena_release_to_uri() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.to_uri)
  
  ::livekit::SIPUri* temp = _impl_.to_uri_;
  _impl_.to_uri_ = nullptr;
  return temp;
}
inline ::livekit::SIPUri* SIPCallInfo::_internal_mutable_to_uri() {
  
  if (_impl_.to_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPUri>(GetArenaForAllocation());
    _impl_.to_uri_ = p;
  }
  return _impl_.to_uri_;
}
inline ::livekit::SIPUri* SIPCallInfo::mutable_to_uri() {
  ::livekit::SIPUri* _msg = _internal_mutable_to_uri();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.to_uri)
  return _msg;
}
inline void SIPCallInfo::set_allocated_to_uri(::livekit::SIPUri* to_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_uri_;
  }
  if (to_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to_uri);
    if (message_arena != submessage_arena) {
      to_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_uri, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_uri_ = to_uri;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.to_uri)
}

// int64 created_at = 9 [deprecated = true];
inline void SIPCallInfo::clear_created_at() {
  _impl_.created_at_ = int64_t{0};
}
inline int64_t SIPCallInfo::_internal_created_at() const {
  return _impl_.created_at_;
}
inline int64_t SIPCallInfo::created_at() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.created_at)
  return _internal_created_at();
}
inline void SIPCallInfo::_internal_set_created_at(int64_t value) {
  
  _impl_.created_at_ = value;
}
inline void SIPCallInfo::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.created_at)
}

// int64 started_at = 10 [deprecated = true];
inline void SIPCallInfo::clear_started_at() {
  _impl_.started_at_ = int64_t{0};
}
inline int64_t SIPCallInfo::_internal_started_at() const {
  return _impl_.started_at_;
}
inline int64_t SIPCallInfo::started_at() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.started_at)
  return _internal_started_at();
}
inline void SIPCallInfo::_internal_set_started_at(int64_t value) {
  
  _impl_.started_at_ = value;
}
inline void SIPCallInfo::set_started_at(int64_t value) {
  _internal_set_started_at(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.started_at)
}

// int64 ended_at = 11 [deprecated = true];
inline void SIPCallInfo::clear_ended_at() {
  _impl_.ended_at_ = int64_t{0};
}
inline int64_t SIPCallInfo::_internal_ended_at() const {
  return _impl_.ended_at_;
}
inline int64_t SIPCallInfo::ended_at() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.ended_at)
  return _internal_ended_at();
}
inline void SIPCallInfo::_internal_set_ended_at(int64_t value) {
  
  _impl_.ended_at_ = value;
}
inline void SIPCallInfo::set_ended_at(int64_t value) {
  _internal_set_ended_at(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.ended_at)
}

// repeated .livekit.SIPFeature enabled_features = 14;
inline int SIPCallInfo::_internal_enabled_features_size() const {
  return _impl_.enabled_features_.size();
}
inline int SIPCallInfo::enabled_features_size() const {
  return _internal_enabled_features_size();
}
inline void SIPCallInfo::clear_enabled_features() {
  _impl_.enabled_features_.Clear();
}
inline ::livekit::SIPFeature SIPCallInfo::_internal_enabled_features(int index) const {
  return static_cast< ::livekit::SIPFeature >(_impl_.enabled_features_.Get(index));
}
inline ::livekit::SIPFeature SIPCallInfo::enabled_features(int index) const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.enabled_features)
  return _internal_enabled_features(index);
}
inline void SIPCallInfo::set_enabled_features(int index, ::livekit::SIPFeature value) {
  _impl_.enabled_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.enabled_features)
}
inline void SIPCallInfo::_internal_add_enabled_features(::livekit::SIPFeature value) {
  _impl_.enabled_features_.Add(value);
}
inline void SIPCallInfo::add_enabled_features(::livekit::SIPFeature value) {
  _internal_add_enabled_features(value);
  // @@protoc_insertion_point(field_add:livekit.SIPCallInfo.enabled_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SIPCallInfo::enabled_features() const {
  // @@protoc_insertion_point(field_list:livekit.SIPCallInfo.enabled_features)
  return _impl_.enabled_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SIPCallInfo::_internal_mutable_enabled_features() {
  return &_impl_.enabled_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SIPCallInfo::mutable_enabled_features() {
  // @@protoc_insertion_point(field_mutable_list:livekit.SIPCallInfo.enabled_features)
  return _internal_mutable_enabled_features();
}

// .livekit.SIPCallDirection call_direction = 15;
inline void SIPCallInfo::clear_call_direction() {
  _impl_.call_direction_ = 0;
}
inline ::livekit::SIPCallDirection SIPCallInfo::_internal_call_direction() const {
  return static_cast< ::livekit::SIPCallDirection >(_impl_.call_direction_);
}
inline ::livekit::SIPCallDirection SIPCallInfo::call_direction() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.call_direction)
  return _internal_call_direction();
}
inline void SIPCallInfo::_internal_set_call_direction(::livekit::SIPCallDirection value) {
  
  _impl_.call_direction_ = value;
}
inline void SIPCallInfo::set_call_direction(::livekit::SIPCallDirection value) {
  _internal_set_call_direction(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.call_direction)
}

// .livekit.SIPCallStatus call_status = 8;
inline void SIPCallInfo::clear_call_status() {
  _impl_.call_status_ = 0;
}
inline ::livekit::SIPCallStatus SIPCallInfo::_internal_call_status() const {
  return static_cast< ::livekit::SIPCallStatus >(_impl_.call_status_);
}
inline ::livekit::SIPCallStatus SIPCallInfo::call_status() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.call_status)
  return _internal_call_status();
}
inline void SIPCallInfo::_internal_set_call_status(::livekit::SIPCallStatus value) {
  
  _impl_.call_status_ = value;
}
inline void SIPCallInfo::set_call_status(::livekit::SIPCallStatus value) {
  _internal_set_call_status(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.call_status)
}

// int64 created_at_ns = 22;
inline void SIPCallInfo::clear_created_at_ns() {
  _impl_.created_at_ns_ = int64_t{0};
}
inline int64_t SIPCallInfo::_internal_created_at_ns() const {
  return _impl_.created_at_ns_;
}
inline int64_t SIPCallInfo::created_at_ns() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.created_at_ns)
  return _internal_created_at_ns();
}
inline void SIPCallInfo::_internal_set_created_at_ns(int64_t value) {
  
  _impl_.created_at_ns_ = value;
}
inline void SIPCallInfo::set_created_at_ns(int64_t value) {
  _internal_set_created_at_ns(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.created_at_ns)
}

// int64 started_at_ns = 23;
inline void SIPCallInfo::clear_started_at_ns() {
  _impl_.started_at_ns_ = int64_t{0};
}
inline int64_t SIPCallInfo::_internal_started_at_ns() const {
  return _impl_.started_at_ns_;
}
inline int64_t SIPCallInfo::started_at_ns() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.started_at_ns)
  return _internal_started_at_ns();
}
inline void SIPCallInfo::_internal_set_started_at_ns(int64_t value) {
  
  _impl_.started_at_ns_ = value;
}
inline void SIPCallInfo::set_started_at_ns(int64_t value) {
  _internal_set_started_at_ns(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.started_at_ns)
}

// int64 ended_at_ns = 24;
inline void SIPCallInfo::clear_ended_at_ns() {
  _impl_.ended_at_ns_ = int64_t{0};
}
inline int64_t SIPCallInfo::_internal_ended_at_ns() const {
  return _impl_.ended_at_ns_;
}
inline int64_t SIPCallInfo::ended_at_ns() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.ended_at_ns)
  return _internal_ended_at_ns();
}
inline void SIPCallInfo::_internal_set_ended_at_ns(int64_t value) {
  
  _impl_.ended_at_ns_ = value;
}
inline void SIPCallInfo::set_ended_at_ns(int64_t value) {
  _internal_set_ended_at_ns(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.ended_at_ns)
}

// .livekit.DisconnectReason disconnect_reason = 12;
inline void SIPCallInfo::clear_disconnect_reason() {
  _impl_.disconnect_reason_ = 0;
}
inline ::livekit::DisconnectReason SIPCallInfo::_internal_disconnect_reason() const {
  return static_cast< ::livekit::DisconnectReason >(_impl_.disconnect_reason_);
}
inline ::livekit::DisconnectReason SIPCallInfo::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.disconnect_reason)
  return _internal_disconnect_reason();
}
inline void SIPCallInfo::_internal_set_disconnect_reason(::livekit::DisconnectReason value) {
  
  _impl_.disconnect_reason_ = value;
}
inline void SIPCallInfo::set_disconnect_reason(::livekit::DisconnectReason value) {
  _internal_set_disconnect_reason(value);
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.disconnect_reason)
}

// string error = 13;
inline void SIPCallInfo::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::error() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.error)
}
inline std::string* SIPCallInfo::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.error)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SIPCallInfo::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_error() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.error)
  return _impl_.error_.Release();
}
inline void SIPCallInfo::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.error)
}

// .livekit.SIPStatus call_status_code = 19;
inline bool SIPCallInfo::_internal_has_call_status_code() const {
  return this != internal_default_instance() && _impl_.call_status_code_ != nullptr;
}
inline bool SIPCallInfo::has_call_status_code() const {
  return _internal_has_call_status_code();
}
inline void SIPCallInfo::clear_call_status_code() {
  if (GetArenaForAllocation() == nullptr && _impl_.call_status_code_ != nullptr) {
    delete _impl_.call_status_code_;
  }
  _impl_.call_status_code_ = nullptr;
}
inline const ::livekit::SIPStatus& SIPCallInfo::_internal_call_status_code() const {
  const ::livekit::SIPStatus* p = _impl_.call_status_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::SIPStatus&>(
      ::livekit::_SIPStatus_default_instance_);
}
inline const ::livekit::SIPStatus& SIPCallInfo::call_status_code() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.call_status_code)
  return _internal_call_status_code();
}
inline void SIPCallInfo::unsafe_arena_set_allocated_call_status_code(
    ::livekit::SIPStatus* call_status_code) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.call_status_code_);
  }
  _impl_.call_status_code_ = call_status_code;
  if (call_status_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.SIPCallInfo.call_status_code)
}
inline ::livekit::SIPStatus* SIPCallInfo::release_call_status_code() {
  
  ::livekit::SIPStatus* temp = _impl_.call_status_code_;
  _impl_.call_status_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::SIPStatus* SIPCallInfo::unsafe_arena_release_call_status_code() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.call_status_code)
  
  ::livekit::SIPStatus* temp = _impl_.call_status_code_;
  _impl_.call_status_code_ = nullptr;
  return temp;
}
inline ::livekit::SIPStatus* SIPCallInfo::_internal_mutable_call_status_code() {
  
  if (_impl_.call_status_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::SIPStatus>(GetArenaForAllocation());
    _impl_.call_status_code_ = p;
  }
  return _impl_.call_status_code_;
}
inline ::livekit::SIPStatus* SIPCallInfo::mutable_call_status_code() {
  ::livekit::SIPStatus* _msg = _internal_mutable_call_status_code();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.call_status_code)
  return _msg;
}
inline void SIPCallInfo::set_allocated_call_status_code(::livekit::SIPStatus* call_status_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.call_status_code_;
  }
  if (call_status_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(call_status_code);
    if (message_arena != submessage_arena) {
      call_status_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_status_code, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.call_status_code_ = call_status_code;
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.call_status_code)
}

// string audio_codec = 20;
inline void SIPCallInfo::clear_audio_codec() {
  _impl_.audio_codec_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::audio_codec() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.audio_codec)
  return _internal_audio_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_audio_codec(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audio_codec_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.audio_codec)
}
inline std::string* SIPCallInfo::mutable_audio_codec() {
  std::string* _s = _internal_mutable_audio_codec();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.audio_codec)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_audio_codec() const {
  return _impl_.audio_codec_.Get();
}
inline void SIPCallInfo::_internal_set_audio_codec(const std::string& value) {
  
  _impl_.audio_codec_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_audio_codec() {
  
  return _impl_.audio_codec_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_audio_codec() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.audio_codec)
  return _impl_.audio_codec_.Release();
}
inline void SIPCallInfo::set_allocated_audio_codec(std::string* audio_codec) {
  if (audio_codec != nullptr) {
    
  } else {
    
  }
  _impl_.audio_codec_.SetAllocated(audio_codec, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_codec_.IsDefault()) {
    _impl_.audio_codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.audio_codec)
}

// string media_encryption = 21;
inline void SIPCallInfo::clear_media_encryption() {
  _impl_.media_encryption_.ClearToEmpty();
}
inline const std::string& SIPCallInfo::media_encryption() const {
  // @@protoc_insertion_point(field_get:livekit.SIPCallInfo.media_encryption)
  return _internal_media_encryption();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPCallInfo::set_media_encryption(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_encryption_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPCallInfo.media_encryption)
}
inline std::string* SIPCallInfo::mutable_media_encryption() {
  std::string* _s = _internal_mutable_media_encryption();
  // @@protoc_insertion_point(field_mutable:livekit.SIPCallInfo.media_encryption)
  return _s;
}
inline const std::string& SIPCallInfo::_internal_media_encryption() const {
  return _impl_.media_encryption_.Get();
}
inline void SIPCallInfo::_internal_set_media_encryption(const std::string& value) {
  
  _impl_.media_encryption_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPCallInfo::_internal_mutable_media_encryption() {
  
  return _impl_.media_encryption_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPCallInfo::release_media_encryption() {
  // @@protoc_insertion_point(field_release:livekit.SIPCallInfo.media_encryption)
  return _impl_.media_encryption_.Release();
}
inline void SIPCallInfo::set_allocated_media_encryption(std::string* media_encryption) {
  if (media_encryption != nullptr) {
    
  } else {
    
  }
  _impl_.media_encryption_.SetAllocated(media_encryption, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_encryption_.IsDefault()) {
    _impl_.media_encryption_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPCallInfo.media_encryption)
}

// -------------------------------------------------------------------

// SIPUri

// string user = 1;
inline void SIPUri::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& SIPUri::user() const {
  // @@protoc_insertion_point(field_get:livekit.SIPUri.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPUri::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPUri.user)
}
inline std::string* SIPUri::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:livekit.SIPUri.user)
  return _s;
}
inline const std::string& SIPUri::_internal_user() const {
  return _impl_.user_.Get();
}
inline void SIPUri::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPUri::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPUri::release_user() {
  // @@protoc_insertion_point(field_release:livekit.SIPUri.user)
  return _impl_.user_.Release();
}
inline void SIPUri::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPUri.user)
}

// string host = 2;
inline void SIPUri::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& SIPUri::host() const {
  // @@protoc_insertion_point(field_get:livekit.SIPUri.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPUri::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPUri.host)
}
inline std::string* SIPUri::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:livekit.SIPUri.host)
  return _s;
}
inline const std::string& SIPUri::_internal_host() const {
  return _impl_.host_.Get();
}
inline void SIPUri::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPUri::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPUri::release_host() {
  // @@protoc_insertion_point(field_release:livekit.SIPUri.host)
  return _impl_.host_.Release();
}
inline void SIPUri::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPUri.host)
}

// string ip = 3;
inline void SIPUri::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& SIPUri::ip() const {
  // @@protoc_insertion_point(field_get:livekit.SIPUri.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SIPUri::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.SIPUri.ip)
}
inline std::string* SIPUri::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:livekit.SIPUri.ip)
  return _s;
}
inline const std::string& SIPUri::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void SIPUri::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* SIPUri::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* SIPUri::release_ip() {
  // @@protoc_insertion_point(field_release:livekit.SIPUri.ip)
  return _impl_.ip_.Release();
}
inline void SIPUri::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPUri.ip)
}

// uint32 port = 4;
inline void SIPUri::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t SIPUri::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t SIPUri::port() const {
  // @@protoc_insertion_point(field_get:livekit.SIPUri.port)
  return _internal_port();
}
inline void SIPUri::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void SIPUri::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:livekit.SIPUri.port)
}

// .livekit.SIPTransport transport = 5;
inline void SIPUri::clear_transport() {
  _impl_.transport_ = 0;
}
inline ::livekit::SIPTransport SIPUri::_internal_transport() const {
  return static_cast< ::livekit::SIPTransport >(_impl_.transport_);
}
inline ::livekit::SIPTransport SIPUri::transport() const {
  // @@protoc_insertion_point(field_get:livekit.SIPUri.transport)
  return _internal_transport();
}
inline void SIPUri::_internal_set_transport(::livekit::SIPTransport value) {
  
  _impl_.transport_ = value;
}
inline void SIPUri::set_transport(::livekit::SIPTransport value) {
  _internal_set_transport(value);
  // @@protoc_insertion_point(field_set:livekit.SIPUri.transport)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace livekit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::livekit::SIPTrunkInfo_TrunkKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPTrunkInfo_TrunkKind>() {
  return ::livekit::SIPTrunkInfo_TrunkKind_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPStatusCode>() {
  return ::livekit::SIPStatusCode_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPTransport> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPTransport>() {
  return ::livekit::SIPTransport_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPHeaderOptions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPHeaderOptions>() {
  return ::livekit::SIPHeaderOptions_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPMediaEncryption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPMediaEncryption>() {
  return ::livekit::SIPMediaEncryption_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPCallStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPCallStatus>() {
  return ::livekit::SIPCallStatus_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPFeature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPFeature>() {
  return ::livekit::SIPFeature_descriptor();
}
template <> struct is_proto_enum< ::livekit::SIPCallDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::SIPCallDirection>() {
  return ::livekit::SIPCallDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_livekit_5fsip_2eproto
