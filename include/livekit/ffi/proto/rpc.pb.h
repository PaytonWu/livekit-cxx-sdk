// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace livekit {
namespace proto {
class PerformRpcCallback;
struct PerformRpcCallbackDefaultTypeInternal;
extern PerformRpcCallbackDefaultTypeInternal _PerformRpcCallback_default_instance_;
class PerformRpcRequest;
struct PerformRpcRequestDefaultTypeInternal;
extern PerformRpcRequestDefaultTypeInternal _PerformRpcRequest_default_instance_;
class PerformRpcResponse;
struct PerformRpcResponseDefaultTypeInternal;
extern PerformRpcResponseDefaultTypeInternal _PerformRpcResponse_default_instance_;
class RegisterRpcMethodRequest;
struct RegisterRpcMethodRequestDefaultTypeInternal;
extern RegisterRpcMethodRequestDefaultTypeInternal _RegisterRpcMethodRequest_default_instance_;
class RegisterRpcMethodResponse;
struct RegisterRpcMethodResponseDefaultTypeInternal;
extern RegisterRpcMethodResponseDefaultTypeInternal _RegisterRpcMethodResponse_default_instance_;
class RpcError;
struct RpcErrorDefaultTypeInternal;
extern RpcErrorDefaultTypeInternal _RpcError_default_instance_;
class RpcMethodInvocationEvent;
struct RpcMethodInvocationEventDefaultTypeInternal;
extern RpcMethodInvocationEventDefaultTypeInternal _RpcMethodInvocationEvent_default_instance_;
class RpcMethodInvocationResponseRequest;
struct RpcMethodInvocationResponseRequestDefaultTypeInternal;
extern RpcMethodInvocationResponseRequestDefaultTypeInternal _RpcMethodInvocationResponseRequest_default_instance_;
class RpcMethodInvocationResponseResponse;
struct RpcMethodInvocationResponseResponseDefaultTypeInternal;
extern RpcMethodInvocationResponseResponseDefaultTypeInternal _RpcMethodInvocationResponseResponse_default_instance_;
class UnregisterRpcMethodRequest;
struct UnregisterRpcMethodRequestDefaultTypeInternal;
extern UnregisterRpcMethodRequestDefaultTypeInternal _UnregisterRpcMethodRequest_default_instance_;
class UnregisterRpcMethodResponse;
struct UnregisterRpcMethodResponseDefaultTypeInternal;
extern UnregisterRpcMethodResponseDefaultTypeInternal _UnregisterRpcMethodResponse_default_instance_;
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::proto::PerformRpcCallback* Arena::CreateMaybeMessage<::livekit::proto::PerformRpcCallback>(Arena*);
template<> ::livekit::proto::PerformRpcRequest* Arena::CreateMaybeMessage<::livekit::proto::PerformRpcRequest>(Arena*);
template<> ::livekit::proto::PerformRpcResponse* Arena::CreateMaybeMessage<::livekit::proto::PerformRpcResponse>(Arena*);
template<> ::livekit::proto::RegisterRpcMethodRequest* Arena::CreateMaybeMessage<::livekit::proto::RegisterRpcMethodRequest>(Arena*);
template<> ::livekit::proto::RegisterRpcMethodResponse* Arena::CreateMaybeMessage<::livekit::proto::RegisterRpcMethodResponse>(Arena*);
template<> ::livekit::proto::RpcError* Arena::CreateMaybeMessage<::livekit::proto::RpcError>(Arena*);
template<> ::livekit::proto::RpcMethodInvocationEvent* Arena::CreateMaybeMessage<::livekit::proto::RpcMethodInvocationEvent>(Arena*);
template<> ::livekit::proto::RpcMethodInvocationResponseRequest* Arena::CreateMaybeMessage<::livekit::proto::RpcMethodInvocationResponseRequest>(Arena*);
template<> ::livekit::proto::RpcMethodInvocationResponseResponse* Arena::CreateMaybeMessage<::livekit::proto::RpcMethodInvocationResponseResponse>(Arena*);
template<> ::livekit::proto::UnregisterRpcMethodRequest* Arena::CreateMaybeMessage<::livekit::proto::UnregisterRpcMethodRequest>(Arena*);
template<> ::livekit::proto::UnregisterRpcMethodResponse* Arena::CreateMaybeMessage<::livekit::proto::UnregisterRpcMethodResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {
namespace proto {

// ===================================================================

class RpcError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RpcError) */ {
 public:
  inline RpcError() : RpcError(nullptr) {}
  ~RpcError() override;
  explicit PROTOBUF_CONSTEXPR RpcError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcError(const RpcError& from);
  RpcError(RpcError&& from) noexcept
    : RpcError() {
    *this = ::std::move(from);
  }

  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcError& operator=(RpcError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcError& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcError* internal_default_instance() {
    return reinterpret_cast<const RpcError*>(
               &_RpcError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcError& a, RpcError& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcError& from) {
    RpcError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RpcError";
  }
  protected:
  explicit RpcError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // required string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required uint32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RpcError)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PerformRpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.PerformRpcRequest) */ {
 public:
  inline PerformRpcRequest() : PerformRpcRequest(nullptr) {}
  ~PerformRpcRequest() override;
  explicit PROTOBUF_CONSTEXPR PerformRpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformRpcRequest(const PerformRpcRequest& from);
  PerformRpcRequest(PerformRpcRequest&& from) noexcept
    : PerformRpcRequest() {
    *this = ::std::move(from);
  }

  inline PerformRpcRequest& operator=(const PerformRpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformRpcRequest& operator=(PerformRpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerformRpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformRpcRequest* internal_default_instance() {
    return reinterpret_cast<const PerformRpcRequest*>(
               &_PerformRpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerformRpcRequest& a, PerformRpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformRpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformRpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformRpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformRpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerformRpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerformRpcRequest& from) {
    PerformRpcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformRpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.PerformRpcRequest";
  }
  protected:
  explicit PerformRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationIdentityFieldNumber = 2,
    kMethodFieldNumber = 3,
    kPayloadFieldNumber = 4,
    kLocalParticipantHandleFieldNumber = 1,
    kResponseTimeoutMsFieldNumber = 5,
  };
  // required string destination_identity = 2;
  bool has_destination_identity() const;
  private:
  bool _internal_has_destination_identity() const;
  public:
  void clear_destination_identity();
  const std::string& destination_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_identity();
  PROTOBUF_NODISCARD std::string* release_destination_identity();
  void set_allocated_destination_identity(std::string* destination_identity);
  private:
  const std::string& _internal_destination_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_identity(const std::string& value);
  std::string* _internal_mutable_destination_identity();
  public:

  // required string method = 3;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // required string payload = 4;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // required uint64 local_participant_handle = 1;
  bool has_local_participant_handle() const;
  private:
  bool _internal_has_local_participant_handle() const;
  public:
  void clear_local_participant_handle();
  uint64_t local_participant_handle() const;
  void set_local_participant_handle(uint64_t value);
  private:
  uint64_t _internal_local_participant_handle() const;
  void _internal_set_local_participant_handle(uint64_t value);
  public:

  // optional uint32 response_timeout_ms = 5;
  bool has_response_timeout_ms() const;
  private:
  bool _internal_has_response_timeout_ms() const;
  public:
  void clear_response_timeout_ms();
  uint32_t response_timeout_ms() const;
  void set_response_timeout_ms(uint32_t value);
  private:
  uint32_t _internal_response_timeout_ms() const;
  void _internal_set_response_timeout_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.PerformRpcRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    uint64_t local_participant_handle_;
    uint32_t response_timeout_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RegisterRpcMethodRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RegisterRpcMethodRequest) */ {
 public:
  inline RegisterRpcMethodRequest() : RegisterRpcMethodRequest(nullptr) {}
  ~RegisterRpcMethodRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterRpcMethodRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRpcMethodRequest(const RegisterRpcMethodRequest& from);
  RegisterRpcMethodRequest(RegisterRpcMethodRequest&& from) noexcept
    : RegisterRpcMethodRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRpcMethodRequest& operator=(const RegisterRpcMethodRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRpcMethodRequest& operator=(RegisterRpcMethodRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRpcMethodRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRpcMethodRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRpcMethodRequest*>(
               &_RegisterRpcMethodRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterRpcMethodRequest& a, RegisterRpcMethodRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRpcMethodRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRpcMethodRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRpcMethodRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRpcMethodRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRpcMethodRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterRpcMethodRequest& from) {
    RegisterRpcMethodRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRpcMethodRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RegisterRpcMethodRequest";
  }
  protected:
  explicit RegisterRpcMethodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 2,
    kLocalParticipantHandleFieldNumber = 1,
  };
  // required string method = 2;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // required uint64 local_participant_handle = 1;
  bool has_local_participant_handle() const;
  private:
  bool _internal_has_local_participant_handle() const;
  public:
  void clear_local_participant_handle();
  uint64_t local_participant_handle() const;
  void set_local_participant_handle(uint64_t value);
  private:
  uint64_t _internal_local_participant_handle() const;
  void _internal_set_local_participant_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RegisterRpcMethodRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    uint64_t local_participant_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class UnregisterRpcMethodRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.UnregisterRpcMethodRequest) */ {
 public:
  inline UnregisterRpcMethodRequest() : UnregisterRpcMethodRequest(nullptr) {}
  ~UnregisterRpcMethodRequest() override;
  explicit PROTOBUF_CONSTEXPR UnregisterRpcMethodRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnregisterRpcMethodRequest(const UnregisterRpcMethodRequest& from);
  UnregisterRpcMethodRequest(UnregisterRpcMethodRequest&& from) noexcept
    : UnregisterRpcMethodRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterRpcMethodRequest& operator=(const UnregisterRpcMethodRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterRpcMethodRequest& operator=(UnregisterRpcMethodRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterRpcMethodRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterRpcMethodRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterRpcMethodRequest*>(
               &_UnregisterRpcMethodRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnregisterRpcMethodRequest& a, UnregisterRpcMethodRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterRpcMethodRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterRpcMethodRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnregisterRpcMethodRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnregisterRpcMethodRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnregisterRpcMethodRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnregisterRpcMethodRequest& from) {
    UnregisterRpcMethodRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterRpcMethodRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.UnregisterRpcMethodRequest";
  }
  protected:
  explicit UnregisterRpcMethodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 2,
    kLocalParticipantHandleFieldNumber = 1,
  };
  // required string method = 2;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // required uint64 local_participant_handle = 1;
  bool has_local_participant_handle() const;
  private:
  bool _internal_has_local_participant_handle() const;
  public:
  void clear_local_participant_handle();
  uint64_t local_participant_handle() const;
  void set_local_participant_handle(uint64_t value);
  private:
  uint64_t _internal_local_participant_handle() const;
  void _internal_set_local_participant_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.UnregisterRpcMethodRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    uint64_t local_participant_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcMethodInvocationResponseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RpcMethodInvocationResponseRequest) */ {
 public:
  inline RpcMethodInvocationResponseRequest() : RpcMethodInvocationResponseRequest(nullptr) {}
  ~RpcMethodInvocationResponseRequest() override;
  explicit PROTOBUF_CONSTEXPR RpcMethodInvocationResponseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMethodInvocationResponseRequest(const RpcMethodInvocationResponseRequest& from);
  RpcMethodInvocationResponseRequest(RpcMethodInvocationResponseRequest&& from) noexcept
    : RpcMethodInvocationResponseRequest() {
    *this = ::std::move(from);
  }

  inline RpcMethodInvocationResponseRequest& operator=(const RpcMethodInvocationResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMethodInvocationResponseRequest& operator=(RpcMethodInvocationResponseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMethodInvocationResponseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMethodInvocationResponseRequest* internal_default_instance() {
    return reinterpret_cast<const RpcMethodInvocationResponseRequest*>(
               &_RpcMethodInvocationResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RpcMethodInvocationResponseRequest& a, RpcMethodInvocationResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMethodInvocationResponseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMethodInvocationResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMethodInvocationResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMethodInvocationResponseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMethodInvocationResponseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcMethodInvocationResponseRequest& from) {
    RpcMethodInvocationResponseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMethodInvocationResponseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RpcMethodInvocationResponseRequest";
  }
  protected:
  explicit RpcMethodInvocationResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kErrorFieldNumber = 4,
    kLocalParticipantHandleFieldNumber = 1,
    kInvocationIdFieldNumber = 2,
  };
  // optional string payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional .livekit.proto.RpcError error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::livekit::proto::RpcError& error() const;
  PROTOBUF_NODISCARD ::livekit::proto::RpcError* release_error();
  ::livekit::proto::RpcError* mutable_error();
  void set_allocated_error(::livekit::proto::RpcError* error);
  private:
  const ::livekit::proto::RpcError& _internal_error() const;
  ::livekit::proto::RpcError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::livekit::proto::RpcError* error);
  ::livekit::proto::RpcError* unsafe_arena_release_error();

  // required uint64 local_participant_handle = 1;
  bool has_local_participant_handle() const;
  private:
  bool _internal_has_local_participant_handle() const;
  public:
  void clear_local_participant_handle();
  uint64_t local_participant_handle() const;
  void set_local_participant_handle(uint64_t value);
  private:
  uint64_t _internal_local_participant_handle() const;
  void _internal_set_local_participant_handle(uint64_t value);
  public:

  // required uint64 invocation_id = 2;
  bool has_invocation_id() const;
  private:
  bool _internal_has_invocation_id() const;
  public:
  void clear_invocation_id();
  uint64_t invocation_id() const;
  void set_invocation_id(uint64_t value);
  private:
  uint64_t _internal_invocation_id() const;
  void _internal_set_invocation_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RpcMethodInvocationResponseRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::livekit::proto::RpcError* error_;
    uint64_t local_participant_handle_;
    uint64_t invocation_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PerformRpcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.PerformRpcResponse) */ {
 public:
  inline PerformRpcResponse() : PerformRpcResponse(nullptr) {}
  ~PerformRpcResponse() override;
  explicit PROTOBUF_CONSTEXPR PerformRpcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformRpcResponse(const PerformRpcResponse& from);
  PerformRpcResponse(PerformRpcResponse&& from) noexcept
    : PerformRpcResponse() {
    *this = ::std::move(from);
  }

  inline PerformRpcResponse& operator=(const PerformRpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformRpcResponse& operator=(PerformRpcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerformRpcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformRpcResponse* internal_default_instance() {
    return reinterpret_cast<const PerformRpcResponse*>(
               &_PerformRpcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PerformRpcResponse& a, PerformRpcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformRpcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformRpcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformRpcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformRpcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerformRpcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerformRpcResponse& from) {
    PerformRpcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformRpcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.PerformRpcResponse";
  }
  protected:
  explicit PerformRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsyncIdFieldNumber = 1,
  };
  // required uint64 async_id = 1;
  bool has_async_id() const;
  private:
  bool _internal_has_async_id() const;
  public:
  void clear_async_id();
  uint64_t async_id() const;
  void set_async_id(uint64_t value);
  private:
  uint64_t _internal_async_id() const;
  void _internal_set_async_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.PerformRpcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t async_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RegisterRpcMethodResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:livekit.proto.RegisterRpcMethodResponse) */ {
 public:
  inline RegisterRpcMethodResponse() : RegisterRpcMethodResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RegisterRpcMethodResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRpcMethodResponse(const RegisterRpcMethodResponse& from);
  RegisterRpcMethodResponse(RegisterRpcMethodResponse&& from) noexcept
    : RegisterRpcMethodResponse() {
    *this = ::std::move(from);
  }

  inline RegisterRpcMethodResponse& operator=(const RegisterRpcMethodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRpcMethodResponse& operator=(RegisterRpcMethodResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRpcMethodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRpcMethodResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterRpcMethodResponse*>(
               &_RegisterRpcMethodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisterRpcMethodResponse& a, RegisterRpcMethodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRpcMethodResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRpcMethodResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRpcMethodResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRpcMethodResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RegisterRpcMethodResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RegisterRpcMethodResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RegisterRpcMethodResponse";
  }
  protected:
  explicit RegisterRpcMethodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:livekit.proto.RegisterRpcMethodResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class UnregisterRpcMethodResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:livekit.proto.UnregisterRpcMethodResponse) */ {
 public:
  inline UnregisterRpcMethodResponse() : UnregisterRpcMethodResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UnregisterRpcMethodResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnregisterRpcMethodResponse(const UnregisterRpcMethodResponse& from);
  UnregisterRpcMethodResponse(UnregisterRpcMethodResponse&& from) noexcept
    : UnregisterRpcMethodResponse() {
    *this = ::std::move(from);
  }

  inline UnregisterRpcMethodResponse& operator=(const UnregisterRpcMethodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterRpcMethodResponse& operator=(UnregisterRpcMethodResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterRpcMethodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterRpcMethodResponse* internal_default_instance() {
    return reinterpret_cast<const UnregisterRpcMethodResponse*>(
               &_UnregisterRpcMethodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnregisterRpcMethodResponse& a, UnregisterRpcMethodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterRpcMethodResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterRpcMethodResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnregisterRpcMethodResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnregisterRpcMethodResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnregisterRpcMethodResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnregisterRpcMethodResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.UnregisterRpcMethodResponse";
  }
  protected:
  explicit UnregisterRpcMethodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:livekit.proto.UnregisterRpcMethodResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcMethodInvocationResponseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RpcMethodInvocationResponseResponse) */ {
 public:
  inline RpcMethodInvocationResponseResponse() : RpcMethodInvocationResponseResponse(nullptr) {}
  ~RpcMethodInvocationResponseResponse() override;
  explicit PROTOBUF_CONSTEXPR RpcMethodInvocationResponseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMethodInvocationResponseResponse(const RpcMethodInvocationResponseResponse& from);
  RpcMethodInvocationResponseResponse(RpcMethodInvocationResponseResponse&& from) noexcept
    : RpcMethodInvocationResponseResponse() {
    *this = ::std::move(from);
  }

  inline RpcMethodInvocationResponseResponse& operator=(const RpcMethodInvocationResponseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMethodInvocationResponseResponse& operator=(RpcMethodInvocationResponseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMethodInvocationResponseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMethodInvocationResponseResponse* internal_default_instance() {
    return reinterpret_cast<const RpcMethodInvocationResponseResponse*>(
               &_RpcMethodInvocationResponseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RpcMethodInvocationResponseResponse& a, RpcMethodInvocationResponseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMethodInvocationResponseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMethodInvocationResponseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMethodInvocationResponseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMethodInvocationResponseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMethodInvocationResponseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcMethodInvocationResponseResponse& from) {
    RpcMethodInvocationResponseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMethodInvocationResponseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RpcMethodInvocationResponseResponse";
  }
  protected:
  explicit RpcMethodInvocationResponseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional string error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RpcMethodInvocationResponseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PerformRpcCallback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.PerformRpcCallback) */ {
 public:
  inline PerformRpcCallback() : PerformRpcCallback(nullptr) {}
  ~PerformRpcCallback() override;
  explicit PROTOBUF_CONSTEXPR PerformRpcCallback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformRpcCallback(const PerformRpcCallback& from);
  PerformRpcCallback(PerformRpcCallback&& from) noexcept
    : PerformRpcCallback() {
    *this = ::std::move(from);
  }

  inline PerformRpcCallback& operator=(const PerformRpcCallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformRpcCallback& operator=(PerformRpcCallback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerformRpcCallback& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformRpcCallback* internal_default_instance() {
    return reinterpret_cast<const PerformRpcCallback*>(
               &_PerformRpcCallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PerformRpcCallback& a, PerformRpcCallback& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformRpcCallback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformRpcCallback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformRpcCallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformRpcCallback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerformRpcCallback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerformRpcCallback& from) {
    PerformRpcCallback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformRpcCallback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.PerformRpcCallback";
  }
  protected:
  explicit PerformRpcCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kErrorFieldNumber = 3,
    kAsyncIdFieldNumber = 1,
  };
  // optional string payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional .livekit.proto.RpcError error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::livekit::proto::RpcError& error() const;
  PROTOBUF_NODISCARD ::livekit::proto::RpcError* release_error();
  ::livekit::proto::RpcError* mutable_error();
  void set_allocated_error(::livekit::proto::RpcError* error);
  private:
  const ::livekit::proto::RpcError& _internal_error() const;
  ::livekit::proto::RpcError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::livekit::proto::RpcError* error);
  ::livekit::proto::RpcError* unsafe_arena_release_error();

  // required uint64 async_id = 1;
  bool has_async_id() const;
  private:
  bool _internal_has_async_id() const;
  public:
  void clear_async_id();
  uint64_t async_id() const;
  void set_async_id(uint64_t value);
  private:
  uint64_t _internal_async_id() const;
  void _internal_set_async_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.PerformRpcCallback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::livekit::proto::RpcError* error_;
    uint64_t async_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcMethodInvocationEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RpcMethodInvocationEvent) */ {
 public:
  inline RpcMethodInvocationEvent() : RpcMethodInvocationEvent(nullptr) {}
  ~RpcMethodInvocationEvent() override;
  explicit PROTOBUF_CONSTEXPR RpcMethodInvocationEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMethodInvocationEvent(const RpcMethodInvocationEvent& from);
  RpcMethodInvocationEvent(RpcMethodInvocationEvent&& from) noexcept
    : RpcMethodInvocationEvent() {
    *this = ::std::move(from);
  }

  inline RpcMethodInvocationEvent& operator=(const RpcMethodInvocationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMethodInvocationEvent& operator=(RpcMethodInvocationEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMethodInvocationEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMethodInvocationEvent* internal_default_instance() {
    return reinterpret_cast<const RpcMethodInvocationEvent*>(
               &_RpcMethodInvocationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RpcMethodInvocationEvent& a, RpcMethodInvocationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMethodInvocationEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMethodInvocationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMethodInvocationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMethodInvocationEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMethodInvocationEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcMethodInvocationEvent& from) {
    RpcMethodInvocationEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMethodInvocationEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RpcMethodInvocationEvent";
  }
  protected:
  explicit RpcMethodInvocationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 3,
    kRequestIdFieldNumber = 4,
    kCallerIdentityFieldNumber = 5,
    kPayloadFieldNumber = 6,
    kLocalParticipantHandleFieldNumber = 1,
    kInvocationIdFieldNumber = 2,
    kResponseTimeoutMsFieldNumber = 7,
  };
  // required string method = 3;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // required string request_id = 4;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // required string caller_identity = 5;
  bool has_caller_identity() const;
  private:
  bool _internal_has_caller_identity() const;
  public:
  void clear_caller_identity();
  const std::string& caller_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_caller_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_caller_identity();
  PROTOBUF_NODISCARD std::string* release_caller_identity();
  void set_allocated_caller_identity(std::string* caller_identity);
  private:
  const std::string& _internal_caller_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_caller_identity(const std::string& value);
  std::string* _internal_mutable_caller_identity();
  public:

  // required string payload = 6;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // required uint64 local_participant_handle = 1;
  bool has_local_participant_handle() const;
  private:
  bool _internal_has_local_participant_handle() const;
  public:
  void clear_local_participant_handle();
  uint64_t local_participant_handle() const;
  void set_local_participant_handle(uint64_t value);
  private:
  uint64_t _internal_local_participant_handle() const;
  void _internal_set_local_participant_handle(uint64_t value);
  public:

  // required uint64 invocation_id = 2;
  bool has_invocation_id() const;
  private:
  bool _internal_has_invocation_id() const;
  public:
  void clear_invocation_id();
  uint64_t invocation_id() const;
  void set_invocation_id(uint64_t value);
  private:
  uint64_t _internal_invocation_id() const;
  void _internal_set_invocation_id(uint64_t value);
  public:

  // required uint32 response_timeout_ms = 7;
  bool has_response_timeout_ms() const;
  private:
  bool _internal_has_response_timeout_ms() const;
  public:
  void clear_response_timeout_ms();
  uint32_t response_timeout_ms() const;
  void set_response_timeout_ms(uint32_t value);
  private:
  uint32_t _internal_response_timeout_ms() const;
  void _internal_set_response_timeout_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RpcMethodInvocationEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caller_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    uint64_t local_participant_handle_;
    uint64_t invocation_id_;
    uint32_t response_timeout_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcError

// required uint32 code = 1;
inline bool RpcError::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcError::has_code() const {
  return _internal_has_code();
}
inline void RpcError::clear_code() {
  _impl_.code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RpcError::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t RpcError::code() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcError.code)
  return _internal_code();
}
inline void RpcError::_internal_set_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.code_ = value;
}
inline void RpcError::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RpcError.code)
}

// required string message = 2;
inline bool RpcError::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcError::has_message() const {
  return _internal_has_message();
}
inline void RpcError::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcError::message() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcError::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcError.message)
}
inline std::string* RpcError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcError.message)
  return _s;
}
inline const std::string& RpcError::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RpcError::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcError::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcError::release_message() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcError.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcError.message)
}

// optional string data = 3;
inline bool RpcError::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcError::has_data() const {
  return _internal_has_data();
}
inline void RpcError::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcError::data() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcError.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcError::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcError.data)
}
inline std::string* RpcError::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcError.data)
  return _s;
}
inline const std::string& RpcError::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RpcError::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcError::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcError::release_data() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcError.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcError::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcError.data)
}

// -------------------------------------------------------------------

// PerformRpcRequest

// required uint64 local_participant_handle = 1;
inline bool PerformRpcRequest::_internal_has_local_participant_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerformRpcRequest::has_local_participant_handle() const {
  return _internal_has_local_participant_handle();
}
inline void PerformRpcRequest::clear_local_participant_handle() {
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerformRpcRequest::_internal_local_participant_handle() const {
  return _impl_.local_participant_handle_;
}
inline uint64_t PerformRpcRequest::local_participant_handle() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcRequest.local_participant_handle)
  return _internal_local_participant_handle();
}
inline void PerformRpcRequest::_internal_set_local_participant_handle(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.local_participant_handle_ = value;
}
inline void PerformRpcRequest::set_local_participant_handle(uint64_t value) {
  _internal_set_local_participant_handle(value);
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcRequest.local_participant_handle)
}

// required string destination_identity = 2;
inline bool PerformRpcRequest::_internal_has_destination_identity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerformRpcRequest::has_destination_identity() const {
  return _internal_has_destination_identity();
}
inline void PerformRpcRequest::clear_destination_identity() {
  _impl_.destination_identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerformRpcRequest::destination_identity() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcRequest.destination_identity)
  return _internal_destination_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformRpcRequest::set_destination_identity(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.destination_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcRequest.destination_identity)
}
inline std::string* PerformRpcRequest::mutable_destination_identity() {
  std::string* _s = _internal_mutable_destination_identity();
  // @@protoc_insertion_point(field_mutable:livekit.proto.PerformRpcRequest.destination_identity)
  return _s;
}
inline const std::string& PerformRpcRequest::_internal_destination_identity() const {
  return _impl_.destination_identity_.Get();
}
inline void PerformRpcRequest::_internal_set_destination_identity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.destination_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformRpcRequest::_internal_mutable_destination_identity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.destination_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformRpcRequest::release_destination_identity() {
  // @@protoc_insertion_point(field_release:livekit.proto.PerformRpcRequest.destination_identity)
  if (!_internal_has_destination_identity()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.destination_identity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_identity_.IsDefault()) {
    _impl_.destination_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerformRpcRequest::set_allocated_destination_identity(std::string* destination_identity) {
  if (destination_identity != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.destination_identity_.SetAllocated(destination_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_identity_.IsDefault()) {
    _impl_.destination_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.PerformRpcRequest.destination_identity)
}

// required string method = 3;
inline bool PerformRpcRequest::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerformRpcRequest::has_method() const {
  return _internal_has_method();
}
inline void PerformRpcRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PerformRpcRequest::method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformRpcRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcRequest.method)
}
inline std::string* PerformRpcRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.PerformRpcRequest.method)
  return _s;
}
inline const std::string& PerformRpcRequest::_internal_method() const {
  return _impl_.method_.Get();
}
inline void PerformRpcRequest::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformRpcRequest::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformRpcRequest::release_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.PerformRpcRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerformRpcRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.PerformRpcRequest.method)
}

// required string payload = 4;
inline bool PerformRpcRequest::_internal_has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerformRpcRequest::has_payload() const {
  return _internal_has_payload();
}
inline void PerformRpcRequest::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PerformRpcRequest::payload() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformRpcRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcRequest.payload)
}
inline std::string* PerformRpcRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.proto.PerformRpcRequest.payload)
  return _s;
}
inline const std::string& PerformRpcRequest::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void PerformRpcRequest::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformRpcRequest::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformRpcRequest::release_payload() {
  // @@protoc_insertion_point(field_release:livekit.proto.PerformRpcRequest.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerformRpcRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.PerformRpcRequest.payload)
}

// optional uint32 response_timeout_ms = 5;
inline bool PerformRpcRequest::_internal_has_response_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerformRpcRequest::has_response_timeout_ms() const {
  return _internal_has_response_timeout_ms();
}
inline void PerformRpcRequest::clear_response_timeout_ms() {
  _impl_.response_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PerformRpcRequest::_internal_response_timeout_ms() const {
  return _impl_.response_timeout_ms_;
}
inline uint32_t PerformRpcRequest::response_timeout_ms() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcRequest.response_timeout_ms)
  return _internal_response_timeout_ms();
}
inline void PerformRpcRequest::_internal_set_response_timeout_ms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.response_timeout_ms_ = value;
}
inline void PerformRpcRequest::set_response_timeout_ms(uint32_t value) {
  _internal_set_response_timeout_ms(value);
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcRequest.response_timeout_ms)
}

// -------------------------------------------------------------------

// RegisterRpcMethodRequest

// required uint64 local_participant_handle = 1;
inline bool RegisterRpcMethodRequest::_internal_has_local_participant_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterRpcMethodRequest::has_local_participant_handle() const {
  return _internal_has_local_participant_handle();
}
inline void RegisterRpcMethodRequest::clear_local_participant_handle() {
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t RegisterRpcMethodRequest::_internal_local_participant_handle() const {
  return _impl_.local_participant_handle_;
}
inline uint64_t RegisterRpcMethodRequest::local_participant_handle() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RegisterRpcMethodRequest.local_participant_handle)
  return _internal_local_participant_handle();
}
inline void RegisterRpcMethodRequest::_internal_set_local_participant_handle(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.local_participant_handle_ = value;
}
inline void RegisterRpcMethodRequest::set_local_participant_handle(uint64_t value) {
  _internal_set_local_participant_handle(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RegisterRpcMethodRequest.local_participant_handle)
}

// required string method = 2;
inline bool RegisterRpcMethodRequest::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterRpcMethodRequest::has_method() const {
  return _internal_has_method();
}
inline void RegisterRpcMethodRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterRpcMethodRequest::method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RegisterRpcMethodRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRpcMethodRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RegisterRpcMethodRequest.method)
}
inline std::string* RegisterRpcMethodRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RegisterRpcMethodRequest.method)
  return _s;
}
inline const std::string& RegisterRpcMethodRequest::_internal_method() const {
  return _impl_.method_.Get();
}
inline void RegisterRpcMethodRequest::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRpcMethodRequest::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRpcMethodRequest::release_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.RegisterRpcMethodRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegisterRpcMethodRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RegisterRpcMethodRequest.method)
}

// -------------------------------------------------------------------

// UnregisterRpcMethodRequest

// required uint64 local_participant_handle = 1;
inline bool UnregisterRpcMethodRequest::_internal_has_local_participant_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnregisterRpcMethodRequest::has_local_participant_handle() const {
  return _internal_has_local_participant_handle();
}
inline void UnregisterRpcMethodRequest::clear_local_participant_handle() {
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t UnregisterRpcMethodRequest::_internal_local_participant_handle() const {
  return _impl_.local_participant_handle_;
}
inline uint64_t UnregisterRpcMethodRequest::local_participant_handle() const {
  // @@protoc_insertion_point(field_get:livekit.proto.UnregisterRpcMethodRequest.local_participant_handle)
  return _internal_local_participant_handle();
}
inline void UnregisterRpcMethodRequest::_internal_set_local_participant_handle(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.local_participant_handle_ = value;
}
inline void UnregisterRpcMethodRequest::set_local_participant_handle(uint64_t value) {
  _internal_set_local_participant_handle(value);
  // @@protoc_insertion_point(field_set:livekit.proto.UnregisterRpcMethodRequest.local_participant_handle)
}

// required string method = 2;
inline bool UnregisterRpcMethodRequest::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnregisterRpcMethodRequest::has_method() const {
  return _internal_has_method();
}
inline void UnregisterRpcMethodRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnregisterRpcMethodRequest::method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.UnregisterRpcMethodRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnregisterRpcMethodRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.UnregisterRpcMethodRequest.method)
}
inline std::string* UnregisterRpcMethodRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.UnregisterRpcMethodRequest.method)
  return _s;
}
inline const std::string& UnregisterRpcMethodRequest::_internal_method() const {
  return _impl_.method_.Get();
}
inline void UnregisterRpcMethodRequest::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* UnregisterRpcMethodRequest::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* UnregisterRpcMethodRequest::release_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.UnregisterRpcMethodRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnregisterRpcMethodRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.UnregisterRpcMethodRequest.method)
}

// -------------------------------------------------------------------

// RpcMethodInvocationResponseRequest

// required uint64 local_participant_handle = 1;
inline bool RpcMethodInvocationResponseRequest::_internal_has_local_participant_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcMethodInvocationResponseRequest::has_local_participant_handle() const {
  return _internal_has_local_participant_handle();
}
inline void RpcMethodInvocationResponseRequest::clear_local_participant_handle() {
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t RpcMethodInvocationResponseRequest::_internal_local_participant_handle() const {
  return _impl_.local_participant_handle_;
}
inline uint64_t RpcMethodInvocationResponseRequest::local_participant_handle() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationResponseRequest.local_participant_handle)
  return _internal_local_participant_handle();
}
inline void RpcMethodInvocationResponseRequest::_internal_set_local_participant_handle(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.local_participant_handle_ = value;
}
inline void RpcMethodInvocationResponseRequest::set_local_participant_handle(uint64_t value) {
  _internal_set_local_participant_handle(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationResponseRequest.local_participant_handle)
}

// required uint64 invocation_id = 2;
inline bool RpcMethodInvocationResponseRequest::_internal_has_invocation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcMethodInvocationResponseRequest::has_invocation_id() const {
  return _internal_has_invocation_id();
}
inline void RpcMethodInvocationResponseRequest::clear_invocation_id() {
  _impl_.invocation_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t RpcMethodInvocationResponseRequest::_internal_invocation_id() const {
  return _impl_.invocation_id_;
}
inline uint64_t RpcMethodInvocationResponseRequest::invocation_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationResponseRequest.invocation_id)
  return _internal_invocation_id();
}
inline void RpcMethodInvocationResponseRequest::_internal_set_invocation_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.invocation_id_ = value;
}
inline void RpcMethodInvocationResponseRequest::set_invocation_id(uint64_t value) {
  _internal_set_invocation_id(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationResponseRequest.invocation_id)
}

// optional string payload = 3;
inline bool RpcMethodInvocationResponseRequest::_internal_has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcMethodInvocationResponseRequest::has_payload() const {
  return _internal_has_payload();
}
inline void RpcMethodInvocationResponseRequest::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMethodInvocationResponseRequest::payload() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationResponseRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMethodInvocationResponseRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationResponseRequest.payload)
}
inline std::string* RpcMethodInvocationResponseRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationResponseRequest.payload)
  return _s;
}
inline const std::string& RpcMethodInvocationResponseRequest::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void RpcMethodInvocationResponseRequest::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationResponseRequest::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationResponseRequest::release_payload() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationResponseRequest.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMethodInvocationResponseRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationResponseRequest.payload)
}

// optional .livekit.proto.RpcError error = 4;
inline bool RpcMethodInvocationResponseRequest::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline bool RpcMethodInvocationResponseRequest::has_error() const {
  return _internal_has_error();
}
inline void RpcMethodInvocationResponseRequest::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::RpcError& RpcMethodInvocationResponseRequest::_internal_error() const {
  const ::livekit::proto::RpcError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RpcError&>(
      ::livekit::proto::_RpcError_default_instance_);
}
inline const ::livekit::proto::RpcError& RpcMethodInvocationResponseRequest::error() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationResponseRequest.error)
  return _internal_error();
}
inline void RpcMethodInvocationResponseRequest::unsafe_arena_set_allocated_error(
    ::livekit::proto::RpcError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RpcMethodInvocationResponseRequest.error)
}
inline ::livekit::proto::RpcError* RpcMethodInvocationResponseRequest::release_error() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RpcError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RpcError* RpcMethodInvocationResponseRequest::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationResponseRequest.error)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RpcError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::livekit::proto::RpcError* RpcMethodInvocationResponseRequest::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RpcError>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::livekit::proto::RpcError* RpcMethodInvocationResponseRequest::mutable_error() {
  ::livekit::proto::RpcError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationResponseRequest.error)
  return _msg;
}
inline void RpcMethodInvocationResponseRequest::set_allocated_error(::livekit::proto::RpcError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationResponseRequest.error)
}

// -------------------------------------------------------------------

// PerformRpcResponse

// required uint64 async_id = 1;
inline bool PerformRpcResponse::_internal_has_async_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerformRpcResponse::has_async_id() const {
  return _internal_has_async_id();
}
inline void PerformRpcResponse::clear_async_id() {
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PerformRpcResponse::_internal_async_id() const {
  return _impl_.async_id_;
}
inline uint64_t PerformRpcResponse::async_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcResponse.async_id)
  return _internal_async_id();
}
inline void PerformRpcResponse::_internal_set_async_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.async_id_ = value;
}
inline void PerformRpcResponse::set_async_id(uint64_t value) {
  _internal_set_async_id(value);
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcResponse.async_id)
}

// -------------------------------------------------------------------

// RegisterRpcMethodResponse

// -------------------------------------------------------------------

// UnregisterRpcMethodResponse

// -------------------------------------------------------------------

// RpcMethodInvocationResponseResponse

// optional string error = 1;
inline bool RpcMethodInvocationResponseResponse::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcMethodInvocationResponseResponse::has_error() const {
  return _internal_has_error();
}
inline void RpcMethodInvocationResponseResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMethodInvocationResponseResponse::error() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationResponseResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMethodInvocationResponseResponse::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationResponseResponse.error)
}
inline std::string* RpcMethodInvocationResponseResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationResponseResponse.error)
  return _s;
}
inline const std::string& RpcMethodInvocationResponseResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RpcMethodInvocationResponseResponse::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationResponseResponse::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationResponseResponse::release_error() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationResponseResponse.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMethodInvocationResponseResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationResponseResponse.error)
}

// -------------------------------------------------------------------

// PerformRpcCallback

// required uint64 async_id = 1;
inline bool PerformRpcCallback::_internal_has_async_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerformRpcCallback::has_async_id() const {
  return _internal_has_async_id();
}
inline void PerformRpcCallback::clear_async_id() {
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerformRpcCallback::_internal_async_id() const {
  return _impl_.async_id_;
}
inline uint64_t PerformRpcCallback::async_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcCallback.async_id)
  return _internal_async_id();
}
inline void PerformRpcCallback::_internal_set_async_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.async_id_ = value;
}
inline void PerformRpcCallback::set_async_id(uint64_t value) {
  _internal_set_async_id(value);
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcCallback.async_id)
}

// optional string payload = 2;
inline bool PerformRpcCallback::_internal_has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerformRpcCallback::has_payload() const {
  return _internal_has_payload();
}
inline void PerformRpcCallback::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerformRpcCallback::payload() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcCallback.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformRpcCallback::set_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.PerformRpcCallback.payload)
}
inline std::string* PerformRpcCallback::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.proto.PerformRpcCallback.payload)
  return _s;
}
inline const std::string& PerformRpcCallback::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void PerformRpcCallback::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformRpcCallback::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformRpcCallback::release_payload() {
  // @@protoc_insertion_point(field_release:livekit.proto.PerformRpcCallback.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerformRpcCallback::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.PerformRpcCallback.payload)
}

// optional .livekit.proto.RpcError error = 3;
inline bool PerformRpcCallback::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline bool PerformRpcCallback::has_error() const {
  return _internal_has_error();
}
inline void PerformRpcCallback::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::RpcError& PerformRpcCallback::_internal_error() const {
  const ::livekit::proto::RpcError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RpcError&>(
      ::livekit::proto::_RpcError_default_instance_);
}
inline const ::livekit::proto::RpcError& PerformRpcCallback::error() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PerformRpcCallback.error)
  return _internal_error();
}
inline void PerformRpcCallback::unsafe_arena_set_allocated_error(
    ::livekit::proto::RpcError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.PerformRpcCallback.error)
}
inline ::livekit::proto::RpcError* PerformRpcCallback::release_error() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RpcError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RpcError* PerformRpcCallback::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:livekit.proto.PerformRpcCallback.error)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RpcError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::livekit::proto::RpcError* PerformRpcCallback::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RpcError>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::livekit::proto::RpcError* PerformRpcCallback::mutable_error() {
  ::livekit::proto::RpcError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:livekit.proto.PerformRpcCallback.error)
  return _msg;
}
inline void PerformRpcCallback::set_allocated_error(::livekit::proto::RpcError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.PerformRpcCallback.error)
}

// -------------------------------------------------------------------

// RpcMethodInvocationEvent

// required uint64 local_participant_handle = 1;
inline bool RpcMethodInvocationEvent::_internal_has_local_participant_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_local_participant_handle() const {
  return _internal_has_local_participant_handle();
}
inline void RpcMethodInvocationEvent::clear_local_participant_handle() {
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t RpcMethodInvocationEvent::_internal_local_participant_handle() const {
  return _impl_.local_participant_handle_;
}
inline uint64_t RpcMethodInvocationEvent::local_participant_handle() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.local_participant_handle)
  return _internal_local_participant_handle();
}
inline void RpcMethodInvocationEvent::_internal_set_local_participant_handle(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.local_participant_handle_ = value;
}
inline void RpcMethodInvocationEvent::set_local_participant_handle(uint64_t value) {
  _internal_set_local_participant_handle(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.local_participant_handle)
}

// required uint64 invocation_id = 2;
inline bool RpcMethodInvocationEvent::_internal_has_invocation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_invocation_id() const {
  return _internal_has_invocation_id();
}
inline void RpcMethodInvocationEvent::clear_invocation_id() {
  _impl_.invocation_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t RpcMethodInvocationEvent::_internal_invocation_id() const {
  return _impl_.invocation_id_;
}
inline uint64_t RpcMethodInvocationEvent::invocation_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.invocation_id)
  return _internal_invocation_id();
}
inline void RpcMethodInvocationEvent::_internal_set_invocation_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.invocation_id_ = value;
}
inline void RpcMethodInvocationEvent::set_invocation_id(uint64_t value) {
  _internal_set_invocation_id(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.invocation_id)
}

// required string method = 3;
inline bool RpcMethodInvocationEvent::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_method() const {
  return _internal_has_method();
}
inline void RpcMethodInvocationEvent::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMethodInvocationEvent::method() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMethodInvocationEvent::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.method)
}
inline std::string* RpcMethodInvocationEvent::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationEvent.method)
  return _s;
}
inline const std::string& RpcMethodInvocationEvent::_internal_method() const {
  return _impl_.method_.Get();
}
inline void RpcMethodInvocationEvent::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::release_method() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationEvent.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMethodInvocationEvent::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationEvent.method)
}

// required string request_id = 4;
inline bool RpcMethodInvocationEvent::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_request_id() const {
  return _internal_has_request_id();
}
inline void RpcMethodInvocationEvent::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcMethodInvocationEvent::request_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMethodInvocationEvent::set_request_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.request_id)
}
inline std::string* RpcMethodInvocationEvent::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationEvent.request_id)
  return _s;
}
inline const std::string& RpcMethodInvocationEvent::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void RpcMethodInvocationEvent::_internal_set_request_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::_internal_mutable_request_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::release_request_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationEvent.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.request_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMethodInvocationEvent::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationEvent.request_id)
}

// required string caller_identity = 5;
inline bool RpcMethodInvocationEvent::_internal_has_caller_identity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_caller_identity() const {
  return _internal_has_caller_identity();
}
inline void RpcMethodInvocationEvent::clear_caller_identity() {
  _impl_.caller_identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcMethodInvocationEvent::caller_identity() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.caller_identity)
  return _internal_caller_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMethodInvocationEvent::set_caller_identity(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.caller_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.caller_identity)
}
inline std::string* RpcMethodInvocationEvent::mutable_caller_identity() {
  std::string* _s = _internal_mutable_caller_identity();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationEvent.caller_identity)
  return _s;
}
inline const std::string& RpcMethodInvocationEvent::_internal_caller_identity() const {
  return _impl_.caller_identity_.Get();
}
inline void RpcMethodInvocationEvent::_internal_set_caller_identity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.caller_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::_internal_mutable_caller_identity() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.caller_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::release_caller_identity() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationEvent.caller_identity)
  if (!_internal_has_caller_identity()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.caller_identity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.caller_identity_.IsDefault()) {
    _impl_.caller_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMethodInvocationEvent::set_allocated_caller_identity(std::string* caller_identity) {
  if (caller_identity != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.caller_identity_.SetAllocated(caller_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.caller_identity_.IsDefault()) {
    _impl_.caller_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationEvent.caller_identity)
}

// required string payload = 6;
inline bool RpcMethodInvocationEvent::_internal_has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_payload() const {
  return _internal_has_payload();
}
inline void RpcMethodInvocationEvent::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RpcMethodInvocationEvent::payload() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMethodInvocationEvent::set_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.payload)
}
inline std::string* RpcMethodInvocationEvent::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RpcMethodInvocationEvent.payload)
  return _s;
}
inline const std::string& RpcMethodInvocationEvent::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void RpcMethodInvocationEvent::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMethodInvocationEvent::release_payload() {
  // @@protoc_insertion_point(field_release:livekit.proto.RpcMethodInvocationEvent.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMethodInvocationEvent::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RpcMethodInvocationEvent.payload)
}

// required uint32 response_timeout_ms = 7;
inline bool RpcMethodInvocationEvent::_internal_has_response_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RpcMethodInvocationEvent::has_response_timeout_ms() const {
  return _internal_has_response_timeout_ms();
}
inline void RpcMethodInvocationEvent::clear_response_timeout_ms() {
  _impl_.response_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t RpcMethodInvocationEvent::_internal_response_timeout_ms() const {
  return _impl_.response_timeout_ms_;
}
inline uint32_t RpcMethodInvocationEvent::response_timeout_ms() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RpcMethodInvocationEvent.response_timeout_ms)
  return _internal_response_timeout_ms();
}
inline void RpcMethodInvocationEvent::_internal_set_response_timeout_ms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.response_timeout_ms_ = value;
}
inline void RpcMethodInvocationEvent::set_response_timeout_ms(uint32_t value) {
  _internal_set_response_timeout_ms(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RpcMethodInvocationEvent.response_timeout_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace livekit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
