// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stats_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stats_2eproto;
namespace livekit {
namespace proto {
class AudioPlayoutStats;
struct AudioPlayoutStatsDefaultTypeInternal;
extern AudioPlayoutStatsDefaultTypeInternal _AudioPlayoutStats_default_instance_;
class AudioSourceStats;
struct AudioSourceStatsDefaultTypeInternal;
extern AudioSourceStatsDefaultTypeInternal _AudioSourceStats_default_instance_;
class CandidatePairStats;
struct CandidatePairStatsDefaultTypeInternal;
extern CandidatePairStatsDefaultTypeInternal _CandidatePairStats_default_instance_;
class CertificateStats;
struct CertificateStatsDefaultTypeInternal;
extern CertificateStatsDefaultTypeInternal _CertificateStats_default_instance_;
class CodecStats;
struct CodecStatsDefaultTypeInternal;
extern CodecStatsDefaultTypeInternal _CodecStats_default_instance_;
class DataChannelStats;
struct DataChannelStatsDefaultTypeInternal;
extern DataChannelStatsDefaultTypeInternal _DataChannelStats_default_instance_;
class IceCandidateStats;
struct IceCandidateStatsDefaultTypeInternal;
extern IceCandidateStatsDefaultTypeInternal _IceCandidateStats_default_instance_;
class InboundRtpStreamStats;
struct InboundRtpStreamStatsDefaultTypeInternal;
extern InboundRtpStreamStatsDefaultTypeInternal _InboundRtpStreamStats_default_instance_;
class MediaSourceStats;
struct MediaSourceStatsDefaultTypeInternal;
extern MediaSourceStatsDefaultTypeInternal _MediaSourceStats_default_instance_;
class OutboundRtpStreamStats;
struct OutboundRtpStreamStatsDefaultTypeInternal;
extern OutboundRtpStreamStatsDefaultTypeInternal _OutboundRtpStreamStats_default_instance_;
class OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse;
struct OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUseDefaultTypeInternal;
extern OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUseDefaultTypeInternal _OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse_default_instance_;
class PeerConnectionStats;
struct PeerConnectionStatsDefaultTypeInternal;
extern PeerConnectionStatsDefaultTypeInternal _PeerConnectionStats_default_instance_;
class ReceivedRtpStreamStats;
struct ReceivedRtpStreamStatsDefaultTypeInternal;
extern ReceivedRtpStreamStatsDefaultTypeInternal _ReceivedRtpStreamStats_default_instance_;
class RemoteInboundRtpStreamStats;
struct RemoteInboundRtpStreamStatsDefaultTypeInternal;
extern RemoteInboundRtpStreamStatsDefaultTypeInternal _RemoteInboundRtpStreamStats_default_instance_;
class RemoteOutboundRtpStreamStats;
struct RemoteOutboundRtpStreamStatsDefaultTypeInternal;
extern RemoteOutboundRtpStreamStatsDefaultTypeInternal _RemoteOutboundRtpStreamStats_default_instance_;
class RtcStats;
struct RtcStatsDefaultTypeInternal;
extern RtcStatsDefaultTypeInternal _RtcStats_default_instance_;
class RtcStatsData;
struct RtcStatsDataDefaultTypeInternal;
extern RtcStatsDataDefaultTypeInternal _RtcStatsData_default_instance_;
class RtcStats_CandidatePair;
struct RtcStats_CandidatePairDefaultTypeInternal;
extern RtcStats_CandidatePairDefaultTypeInternal _RtcStats_CandidatePair_default_instance_;
class RtcStats_Certificate;
struct RtcStats_CertificateDefaultTypeInternal;
extern RtcStats_CertificateDefaultTypeInternal _RtcStats_Certificate_default_instance_;
class RtcStats_Codec;
struct RtcStats_CodecDefaultTypeInternal;
extern RtcStats_CodecDefaultTypeInternal _RtcStats_Codec_default_instance_;
class RtcStats_DataChannel;
struct RtcStats_DataChannelDefaultTypeInternal;
extern RtcStats_DataChannelDefaultTypeInternal _RtcStats_DataChannel_default_instance_;
class RtcStats_InboundRtp;
struct RtcStats_InboundRtpDefaultTypeInternal;
extern RtcStats_InboundRtpDefaultTypeInternal _RtcStats_InboundRtp_default_instance_;
class RtcStats_LocalCandidate;
struct RtcStats_LocalCandidateDefaultTypeInternal;
extern RtcStats_LocalCandidateDefaultTypeInternal _RtcStats_LocalCandidate_default_instance_;
class RtcStats_MediaPlayout;
struct RtcStats_MediaPlayoutDefaultTypeInternal;
extern RtcStats_MediaPlayoutDefaultTypeInternal _RtcStats_MediaPlayout_default_instance_;
class RtcStats_MediaSource;
struct RtcStats_MediaSourceDefaultTypeInternal;
extern RtcStats_MediaSourceDefaultTypeInternal _RtcStats_MediaSource_default_instance_;
class RtcStats_OutboundRtp;
struct RtcStats_OutboundRtpDefaultTypeInternal;
extern RtcStats_OutboundRtpDefaultTypeInternal _RtcStats_OutboundRtp_default_instance_;
class RtcStats_PeerConnection;
struct RtcStats_PeerConnectionDefaultTypeInternal;
extern RtcStats_PeerConnectionDefaultTypeInternal _RtcStats_PeerConnection_default_instance_;
class RtcStats_RemoteCandidate;
struct RtcStats_RemoteCandidateDefaultTypeInternal;
extern RtcStats_RemoteCandidateDefaultTypeInternal _RtcStats_RemoteCandidate_default_instance_;
class RtcStats_RemoteInboundRtp;
struct RtcStats_RemoteInboundRtpDefaultTypeInternal;
extern RtcStats_RemoteInboundRtpDefaultTypeInternal _RtcStats_RemoteInboundRtp_default_instance_;
class RtcStats_RemoteOutboundRtp;
struct RtcStats_RemoteOutboundRtpDefaultTypeInternal;
extern RtcStats_RemoteOutboundRtpDefaultTypeInternal _RtcStats_RemoteOutboundRtp_default_instance_;
class RtcStats_Stream;
struct RtcStats_StreamDefaultTypeInternal;
extern RtcStats_StreamDefaultTypeInternal _RtcStats_Stream_default_instance_;
class RtcStats_Track;
struct RtcStats_TrackDefaultTypeInternal;
extern RtcStats_TrackDefaultTypeInternal _RtcStats_Track_default_instance_;
class RtcStats_Transport;
struct RtcStats_TransportDefaultTypeInternal;
extern RtcStats_TransportDefaultTypeInternal _RtcStats_Transport_default_instance_;
class RtpStreamStats;
struct RtpStreamStatsDefaultTypeInternal;
extern RtpStreamStatsDefaultTypeInternal _RtpStreamStats_default_instance_;
class SentRtpStreamStats;
struct SentRtpStreamStatsDefaultTypeInternal;
extern SentRtpStreamStatsDefaultTypeInternal _SentRtpStreamStats_default_instance_;
class StreamStats;
struct StreamStatsDefaultTypeInternal;
extern StreamStatsDefaultTypeInternal _StreamStats_default_instance_;
class TransportStats;
struct TransportStatsDefaultTypeInternal;
extern TransportStatsDefaultTypeInternal _TransportStats_default_instance_;
class VideoSourceStats;
struct VideoSourceStatsDefaultTypeInternal;
extern VideoSourceStatsDefaultTypeInternal _VideoSourceStats_default_instance_;
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::proto::AudioPlayoutStats* Arena::CreateMaybeMessage<::livekit::proto::AudioPlayoutStats>(Arena*);
template<> ::livekit::proto::AudioSourceStats* Arena::CreateMaybeMessage<::livekit::proto::AudioSourceStats>(Arena*);
template<> ::livekit::proto::CandidatePairStats* Arena::CreateMaybeMessage<::livekit::proto::CandidatePairStats>(Arena*);
template<> ::livekit::proto::CertificateStats* Arena::CreateMaybeMessage<::livekit::proto::CertificateStats>(Arena*);
template<> ::livekit::proto::CodecStats* Arena::CreateMaybeMessage<::livekit::proto::CodecStats>(Arena*);
template<> ::livekit::proto::DataChannelStats* Arena::CreateMaybeMessage<::livekit::proto::DataChannelStats>(Arena*);
template<> ::livekit::proto::IceCandidateStats* Arena::CreateMaybeMessage<::livekit::proto::IceCandidateStats>(Arena*);
template<> ::livekit::proto::InboundRtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::InboundRtpStreamStats>(Arena*);
template<> ::livekit::proto::MediaSourceStats* Arena::CreateMaybeMessage<::livekit::proto::MediaSourceStats>(Arena*);
template<> ::livekit::proto::OutboundRtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::OutboundRtpStreamStats>(Arena*);
template<> ::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse* Arena::CreateMaybeMessage<::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse>(Arena*);
template<> ::livekit::proto::PeerConnectionStats* Arena::CreateMaybeMessage<::livekit::proto::PeerConnectionStats>(Arena*);
template<> ::livekit::proto::ReceivedRtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::ReceivedRtpStreamStats>(Arena*);
template<> ::livekit::proto::RemoteInboundRtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::RemoteInboundRtpStreamStats>(Arena*);
template<> ::livekit::proto::RemoteOutboundRtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::RemoteOutboundRtpStreamStats>(Arena*);
template<> ::livekit::proto::RtcStats* Arena::CreateMaybeMessage<::livekit::proto::RtcStats>(Arena*);
template<> ::livekit::proto::RtcStatsData* Arena::CreateMaybeMessage<::livekit::proto::RtcStatsData>(Arena*);
template<> ::livekit::proto::RtcStats_CandidatePair* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_CandidatePair>(Arena*);
template<> ::livekit::proto::RtcStats_Certificate* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_Certificate>(Arena*);
template<> ::livekit::proto::RtcStats_Codec* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_Codec>(Arena*);
template<> ::livekit::proto::RtcStats_DataChannel* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_DataChannel>(Arena*);
template<> ::livekit::proto::RtcStats_InboundRtp* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_InboundRtp>(Arena*);
template<> ::livekit::proto::RtcStats_LocalCandidate* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_LocalCandidate>(Arena*);
template<> ::livekit::proto::RtcStats_MediaPlayout* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_MediaPlayout>(Arena*);
template<> ::livekit::proto::RtcStats_MediaSource* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_MediaSource>(Arena*);
template<> ::livekit::proto::RtcStats_OutboundRtp* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_OutboundRtp>(Arena*);
template<> ::livekit::proto::RtcStats_PeerConnection* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_PeerConnection>(Arena*);
template<> ::livekit::proto::RtcStats_RemoteCandidate* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_RemoteCandidate>(Arena*);
template<> ::livekit::proto::RtcStats_RemoteInboundRtp* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_RemoteInboundRtp>(Arena*);
template<> ::livekit::proto::RtcStats_RemoteOutboundRtp* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_RemoteOutboundRtp>(Arena*);
template<> ::livekit::proto::RtcStats_Stream* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_Stream>(Arena*);
template<> ::livekit::proto::RtcStats_Track* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_Track>(Arena*);
template<> ::livekit::proto::RtcStats_Transport* Arena::CreateMaybeMessage<::livekit::proto::RtcStats_Transport>(Arena*);
template<> ::livekit::proto::RtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::RtpStreamStats>(Arena*);
template<> ::livekit::proto::SentRtpStreamStats* Arena::CreateMaybeMessage<::livekit::proto::SentRtpStreamStats>(Arena*);
template<> ::livekit::proto::StreamStats* Arena::CreateMaybeMessage<::livekit::proto::StreamStats>(Arena*);
template<> ::livekit::proto::TransportStats* Arena::CreateMaybeMessage<::livekit::proto::TransportStats>(Arena*);
template<> ::livekit::proto::VideoSourceStats* Arena::CreateMaybeMessage<::livekit::proto::VideoSourceStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {
namespace proto {

enum DataChannelState : int {
  DC_CONNECTING = 0,
  DC_OPEN = 1,
  DC_CLOSING = 2,
  DC_CLOSED = 3
};
bool DataChannelState_IsValid(int value);
constexpr DataChannelState DataChannelState_MIN = DC_CONNECTING;
constexpr DataChannelState DataChannelState_MAX = DC_CLOSED;
constexpr int DataChannelState_ARRAYSIZE = DataChannelState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChannelState_descriptor();
template<typename T>
inline const std::string& DataChannelState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataChannelState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataChannelState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataChannelState_descriptor(), enum_t_value);
}
inline bool DataChannelState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataChannelState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataChannelState>(
    DataChannelState_descriptor(), name, value);
}
enum QualityLimitationReason : int {
  LIMITATION_NONE = 0,
  LIMITATION_CPU = 1,
  LIMITATION_BANDWIDTH = 2,
  LIMITATION_OTHER = 3
};
bool QualityLimitationReason_IsValid(int value);
constexpr QualityLimitationReason QualityLimitationReason_MIN = LIMITATION_NONE;
constexpr QualityLimitationReason QualityLimitationReason_MAX = LIMITATION_OTHER;
constexpr int QualityLimitationReason_ARRAYSIZE = QualityLimitationReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QualityLimitationReason_descriptor();
template<typename T>
inline const std::string& QualityLimitationReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QualityLimitationReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QualityLimitationReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QualityLimitationReason_descriptor(), enum_t_value);
}
inline bool QualityLimitationReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QualityLimitationReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QualityLimitationReason>(
    QualityLimitationReason_descriptor(), name, value);
}
enum IceRole : int {
  ICE_UNKNOWN = 0,
  ICE_CONTROLLING = 1,
  ICE_CONTROLLED = 2
};
bool IceRole_IsValid(int value);
constexpr IceRole IceRole_MIN = ICE_UNKNOWN;
constexpr IceRole IceRole_MAX = ICE_CONTROLLED;
constexpr int IceRole_ARRAYSIZE = IceRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceRole_descriptor();
template<typename T>
inline const std::string& IceRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IceRole_descriptor(), enum_t_value);
}
inline bool IceRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IceRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IceRole>(
    IceRole_descriptor(), name, value);
}
enum DtlsTransportState : int {
  DTLS_TRANSPORT_NEW = 0,
  DTLS_TRANSPORT_CONNECTING = 1,
  DTLS_TRANSPORT_CONNECTED = 2,
  DTLS_TRANSPORT_CLOSED = 3,
  DTLS_TRANSPORT_FAILED = 4
};
bool DtlsTransportState_IsValid(int value);
constexpr DtlsTransportState DtlsTransportState_MIN = DTLS_TRANSPORT_NEW;
constexpr DtlsTransportState DtlsTransportState_MAX = DTLS_TRANSPORT_FAILED;
constexpr int DtlsTransportState_ARRAYSIZE = DtlsTransportState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DtlsTransportState_descriptor();
template<typename T>
inline const std::string& DtlsTransportState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DtlsTransportState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DtlsTransportState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DtlsTransportState_descriptor(), enum_t_value);
}
inline bool DtlsTransportState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DtlsTransportState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DtlsTransportState>(
    DtlsTransportState_descriptor(), name, value);
}
enum IceTransportState : int {
  ICE_TRANSPORT_NEW = 0,
  ICE_TRANSPORT_CHECKING = 1,
  ICE_TRANSPORT_CONNECTED = 2,
  ICE_TRANSPORT_COMPLETED = 3,
  ICE_TRANSPORT_DISCONNECTED = 4,
  ICE_TRANSPORT_FAILED = 5,
  ICE_TRANSPORT_CLOSED = 6
};
bool IceTransportState_IsValid(int value);
constexpr IceTransportState IceTransportState_MIN = ICE_TRANSPORT_NEW;
constexpr IceTransportState IceTransportState_MAX = ICE_TRANSPORT_CLOSED;
constexpr int IceTransportState_ARRAYSIZE = IceTransportState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceTransportState_descriptor();
template<typename T>
inline const std::string& IceTransportState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceTransportState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceTransportState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IceTransportState_descriptor(), enum_t_value);
}
inline bool IceTransportState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IceTransportState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IceTransportState>(
    IceTransportState_descriptor(), name, value);
}
enum DtlsRole : int {
  DTLS_CLIENT = 0,
  DTLS_SERVER = 1,
  DTLS_UNKNOWN = 2
};
bool DtlsRole_IsValid(int value);
constexpr DtlsRole DtlsRole_MIN = DTLS_CLIENT;
constexpr DtlsRole DtlsRole_MAX = DTLS_UNKNOWN;
constexpr int DtlsRole_ARRAYSIZE = DtlsRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DtlsRole_descriptor();
template<typename T>
inline const std::string& DtlsRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DtlsRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DtlsRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DtlsRole_descriptor(), enum_t_value);
}
inline bool DtlsRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DtlsRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DtlsRole>(
    DtlsRole_descriptor(), name, value);
}
enum IceCandidatePairState : int {
  PAIR_FROZEN = 0,
  PAIR_WAITING = 1,
  PAIR_IN_PROGRESS = 2,
  PAIR_FAILED = 3,
  PAIR_SUCCEEDED = 4
};
bool IceCandidatePairState_IsValid(int value);
constexpr IceCandidatePairState IceCandidatePairState_MIN = PAIR_FROZEN;
constexpr IceCandidatePairState IceCandidatePairState_MAX = PAIR_SUCCEEDED;
constexpr int IceCandidatePairState_ARRAYSIZE = IceCandidatePairState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceCandidatePairState_descriptor();
template<typename T>
inline const std::string& IceCandidatePairState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IceCandidatePairState_descriptor(), enum_t_value);
}
inline bool IceCandidatePairState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IceCandidatePairState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IceCandidatePairState>(
    IceCandidatePairState_descriptor(), name, value);
}
enum IceCandidateType : int {
  HOST = 0,
  SRFLX = 1,
  PRFLX = 2,
  RELAY = 3
};
bool IceCandidateType_IsValid(int value);
constexpr IceCandidateType IceCandidateType_MIN = HOST;
constexpr IceCandidateType IceCandidateType_MAX = RELAY;
constexpr int IceCandidateType_ARRAYSIZE = IceCandidateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceCandidateType_descriptor();
template<typename T>
inline const std::string& IceCandidateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IceCandidateType_descriptor(), enum_t_value);
}
inline bool IceCandidateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IceCandidateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IceCandidateType>(
    IceCandidateType_descriptor(), name, value);
}
enum IceServerTransportProtocol : int {
  TRANSPORT_UDP = 0,
  TRANSPORT_TCP = 1,
  TRANSPORT_TLS = 2
};
bool IceServerTransportProtocol_IsValid(int value);
constexpr IceServerTransportProtocol IceServerTransportProtocol_MIN = TRANSPORT_UDP;
constexpr IceServerTransportProtocol IceServerTransportProtocol_MAX = TRANSPORT_TLS;
constexpr int IceServerTransportProtocol_ARRAYSIZE = IceServerTransportProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceServerTransportProtocol_descriptor();
template<typename T>
inline const std::string& IceServerTransportProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceServerTransportProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceServerTransportProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IceServerTransportProtocol_descriptor(), enum_t_value);
}
inline bool IceServerTransportProtocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IceServerTransportProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IceServerTransportProtocol>(
    IceServerTransportProtocol_descriptor(), name, value);
}
enum IceTcpCandidateType : int {
  CANDIDATE_ACTIVE = 0,
  CANDIDATE_PASSIVE = 1,
  CANDIDATE_SO = 2
};
bool IceTcpCandidateType_IsValid(int value);
constexpr IceTcpCandidateType IceTcpCandidateType_MIN = CANDIDATE_ACTIVE;
constexpr IceTcpCandidateType IceTcpCandidateType_MAX = CANDIDATE_SO;
constexpr int IceTcpCandidateType_ARRAYSIZE = IceTcpCandidateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceTcpCandidateType_descriptor();
template<typename T>
inline const std::string& IceTcpCandidateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceTcpCandidateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceTcpCandidateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IceTcpCandidateType_descriptor(), enum_t_value);
}
inline bool IceTcpCandidateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IceTcpCandidateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IceTcpCandidateType>(
    IceTcpCandidateType_descriptor(), name, value);
}
// ===================================================================

class RtcStats_Codec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.Codec) */ {
 public:
  inline RtcStats_Codec() : RtcStats_Codec(nullptr) {}
  ~RtcStats_Codec() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_Codec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_Codec(const RtcStats_Codec& from);
  RtcStats_Codec(RtcStats_Codec&& from) noexcept
    : RtcStats_Codec() {
    *this = ::std::move(from);
  }

  inline RtcStats_Codec& operator=(const RtcStats_Codec& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_Codec& operator=(RtcStats_Codec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_Codec& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_Codec* internal_default_instance() {
    return reinterpret_cast<const RtcStats_Codec*>(
               &_RtcStats_Codec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RtcStats_Codec& a, RtcStats_Codec& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_Codec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_Codec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_Codec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_Codec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_Codec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_Codec& from) {
    RtcStats_Codec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_Codec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.Codec";
  }
  protected:
  explicit RtcStats_Codec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kCodecFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.CodecStats codec = 2;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const ::livekit::proto::CodecStats& codec() const;
  PROTOBUF_NODISCARD ::livekit::proto::CodecStats* release_codec();
  ::livekit::proto::CodecStats* mutable_codec();
  void set_allocated_codec(::livekit::proto::CodecStats* codec);
  private:
  const ::livekit::proto::CodecStats& _internal_codec() const;
  ::livekit::proto::CodecStats* _internal_mutable_codec();
  public:
  void unsafe_arena_set_allocated_codec(
      ::livekit::proto::CodecStats* codec);
  ::livekit::proto::CodecStats* unsafe_arena_release_codec();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.Codec)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::CodecStats* codec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_InboundRtp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.InboundRtp) */ {
 public:
  inline RtcStats_InboundRtp() : RtcStats_InboundRtp(nullptr) {}
  ~RtcStats_InboundRtp() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_InboundRtp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_InboundRtp(const RtcStats_InboundRtp& from);
  RtcStats_InboundRtp(RtcStats_InboundRtp&& from) noexcept
    : RtcStats_InboundRtp() {
    *this = ::std::move(from);
  }

  inline RtcStats_InboundRtp& operator=(const RtcStats_InboundRtp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_InboundRtp& operator=(RtcStats_InboundRtp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_InboundRtp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_InboundRtp* internal_default_instance() {
    return reinterpret_cast<const RtcStats_InboundRtp*>(
               &_RtcStats_InboundRtp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RtcStats_InboundRtp& a, RtcStats_InboundRtp& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_InboundRtp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_InboundRtp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_InboundRtp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_InboundRtp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_InboundRtp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_InboundRtp& from) {
    RtcStats_InboundRtp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_InboundRtp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.InboundRtp";
  }
  protected:
  explicit RtcStats_InboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kStreamFieldNumber = 2,
    kReceivedFieldNumber = 3,
    kInboundFieldNumber = 4,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.RtpStreamStats stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::livekit::proto::RtpStreamStats& stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtpStreamStats* release_stream();
  ::livekit::proto::RtpStreamStats* mutable_stream();
  void set_allocated_stream(::livekit::proto::RtpStreamStats* stream);
  private:
  const ::livekit::proto::RtpStreamStats& _internal_stream() const;
  ::livekit::proto::RtpStreamStats* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::livekit::proto::RtpStreamStats* stream);
  ::livekit::proto::RtpStreamStats* unsafe_arena_release_stream();

  // required .livekit.proto.ReceivedRtpStreamStats received = 3;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  const ::livekit::proto::ReceivedRtpStreamStats& received() const;
  PROTOBUF_NODISCARD ::livekit::proto::ReceivedRtpStreamStats* release_received();
  ::livekit::proto::ReceivedRtpStreamStats* mutable_received();
  void set_allocated_received(::livekit::proto::ReceivedRtpStreamStats* received);
  private:
  const ::livekit::proto::ReceivedRtpStreamStats& _internal_received() const;
  ::livekit::proto::ReceivedRtpStreamStats* _internal_mutable_received();
  public:
  void unsafe_arena_set_allocated_received(
      ::livekit::proto::ReceivedRtpStreamStats* received);
  ::livekit::proto::ReceivedRtpStreamStats* unsafe_arena_release_received();

  // required .livekit.proto.InboundRtpStreamStats inbound = 4;
  bool has_inbound() const;
  private:
  bool _internal_has_inbound() const;
  public:
  void clear_inbound();
  const ::livekit::proto::InboundRtpStreamStats& inbound() const;
  PROTOBUF_NODISCARD ::livekit::proto::InboundRtpStreamStats* release_inbound();
  ::livekit::proto::InboundRtpStreamStats* mutable_inbound();
  void set_allocated_inbound(::livekit::proto::InboundRtpStreamStats* inbound);
  private:
  const ::livekit::proto::InboundRtpStreamStats& _internal_inbound() const;
  ::livekit::proto::InboundRtpStreamStats* _internal_mutable_inbound();
  public:
  void unsafe_arena_set_allocated_inbound(
      ::livekit::proto::InboundRtpStreamStats* inbound);
  ::livekit::proto::InboundRtpStreamStats* unsafe_arena_release_inbound();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.InboundRtp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::RtpStreamStats* stream_;
    ::livekit::proto::ReceivedRtpStreamStats* received_;
    ::livekit::proto::InboundRtpStreamStats* inbound_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_OutboundRtp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.OutboundRtp) */ {
 public:
  inline RtcStats_OutboundRtp() : RtcStats_OutboundRtp(nullptr) {}
  ~RtcStats_OutboundRtp() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_OutboundRtp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_OutboundRtp(const RtcStats_OutboundRtp& from);
  RtcStats_OutboundRtp(RtcStats_OutboundRtp&& from) noexcept
    : RtcStats_OutboundRtp() {
    *this = ::std::move(from);
  }

  inline RtcStats_OutboundRtp& operator=(const RtcStats_OutboundRtp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_OutboundRtp& operator=(RtcStats_OutboundRtp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_OutboundRtp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_OutboundRtp* internal_default_instance() {
    return reinterpret_cast<const RtcStats_OutboundRtp*>(
               &_RtcStats_OutboundRtp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RtcStats_OutboundRtp& a, RtcStats_OutboundRtp& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_OutboundRtp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_OutboundRtp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_OutboundRtp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_OutboundRtp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_OutboundRtp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_OutboundRtp& from) {
    RtcStats_OutboundRtp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_OutboundRtp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.OutboundRtp";
  }
  protected:
  explicit RtcStats_OutboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kStreamFieldNumber = 2,
    kSentFieldNumber = 3,
    kOutboundFieldNumber = 4,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.RtpStreamStats stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::livekit::proto::RtpStreamStats& stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtpStreamStats* release_stream();
  ::livekit::proto::RtpStreamStats* mutable_stream();
  void set_allocated_stream(::livekit::proto::RtpStreamStats* stream);
  private:
  const ::livekit::proto::RtpStreamStats& _internal_stream() const;
  ::livekit::proto::RtpStreamStats* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::livekit::proto::RtpStreamStats* stream);
  ::livekit::proto::RtpStreamStats* unsafe_arena_release_stream();

  // required .livekit.proto.SentRtpStreamStats sent = 3;
  bool has_sent() const;
  private:
  bool _internal_has_sent() const;
  public:
  void clear_sent();
  const ::livekit::proto::SentRtpStreamStats& sent() const;
  PROTOBUF_NODISCARD ::livekit::proto::SentRtpStreamStats* release_sent();
  ::livekit::proto::SentRtpStreamStats* mutable_sent();
  void set_allocated_sent(::livekit::proto::SentRtpStreamStats* sent);
  private:
  const ::livekit::proto::SentRtpStreamStats& _internal_sent() const;
  ::livekit::proto::SentRtpStreamStats* _internal_mutable_sent();
  public:
  void unsafe_arena_set_allocated_sent(
      ::livekit::proto::SentRtpStreamStats* sent);
  ::livekit::proto::SentRtpStreamStats* unsafe_arena_release_sent();

  // required .livekit.proto.OutboundRtpStreamStats outbound = 4;
  bool has_outbound() const;
  private:
  bool _internal_has_outbound() const;
  public:
  void clear_outbound();
  const ::livekit::proto::OutboundRtpStreamStats& outbound() const;
  PROTOBUF_NODISCARD ::livekit::proto::OutboundRtpStreamStats* release_outbound();
  ::livekit::proto::OutboundRtpStreamStats* mutable_outbound();
  void set_allocated_outbound(::livekit::proto::OutboundRtpStreamStats* outbound);
  private:
  const ::livekit::proto::OutboundRtpStreamStats& _internal_outbound() const;
  ::livekit::proto::OutboundRtpStreamStats* _internal_mutable_outbound();
  public:
  void unsafe_arena_set_allocated_outbound(
      ::livekit::proto::OutboundRtpStreamStats* outbound);
  ::livekit::proto::OutboundRtpStreamStats* unsafe_arena_release_outbound();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.OutboundRtp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::RtpStreamStats* stream_;
    ::livekit::proto::SentRtpStreamStats* sent_;
    ::livekit::proto::OutboundRtpStreamStats* outbound_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_RemoteInboundRtp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.RemoteInboundRtp) */ {
 public:
  inline RtcStats_RemoteInboundRtp() : RtcStats_RemoteInboundRtp(nullptr) {}
  ~RtcStats_RemoteInboundRtp() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_RemoteInboundRtp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_RemoteInboundRtp(const RtcStats_RemoteInboundRtp& from);
  RtcStats_RemoteInboundRtp(RtcStats_RemoteInboundRtp&& from) noexcept
    : RtcStats_RemoteInboundRtp() {
    *this = ::std::move(from);
  }

  inline RtcStats_RemoteInboundRtp& operator=(const RtcStats_RemoteInboundRtp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_RemoteInboundRtp& operator=(RtcStats_RemoteInboundRtp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_RemoteInboundRtp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_RemoteInboundRtp* internal_default_instance() {
    return reinterpret_cast<const RtcStats_RemoteInboundRtp*>(
               &_RtcStats_RemoteInboundRtp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RtcStats_RemoteInboundRtp& a, RtcStats_RemoteInboundRtp& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_RemoteInboundRtp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_RemoteInboundRtp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_RemoteInboundRtp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_RemoteInboundRtp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_RemoteInboundRtp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_RemoteInboundRtp& from) {
    RtcStats_RemoteInboundRtp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_RemoteInboundRtp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.RemoteInboundRtp";
  }
  protected:
  explicit RtcStats_RemoteInboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kStreamFieldNumber = 2,
    kReceivedFieldNumber = 3,
    kRemoteInboundFieldNumber = 4,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.RtpStreamStats stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::livekit::proto::RtpStreamStats& stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtpStreamStats* release_stream();
  ::livekit::proto::RtpStreamStats* mutable_stream();
  void set_allocated_stream(::livekit::proto::RtpStreamStats* stream);
  private:
  const ::livekit::proto::RtpStreamStats& _internal_stream() const;
  ::livekit::proto::RtpStreamStats* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::livekit::proto::RtpStreamStats* stream);
  ::livekit::proto::RtpStreamStats* unsafe_arena_release_stream();

  // required .livekit.proto.ReceivedRtpStreamStats received = 3;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  const ::livekit::proto::ReceivedRtpStreamStats& received() const;
  PROTOBUF_NODISCARD ::livekit::proto::ReceivedRtpStreamStats* release_received();
  ::livekit::proto::ReceivedRtpStreamStats* mutable_received();
  void set_allocated_received(::livekit::proto::ReceivedRtpStreamStats* received);
  private:
  const ::livekit::proto::ReceivedRtpStreamStats& _internal_received() const;
  ::livekit::proto::ReceivedRtpStreamStats* _internal_mutable_received();
  public:
  void unsafe_arena_set_allocated_received(
      ::livekit::proto::ReceivedRtpStreamStats* received);
  ::livekit::proto::ReceivedRtpStreamStats* unsafe_arena_release_received();

  // required .livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
  bool has_remote_inbound() const;
  private:
  bool _internal_has_remote_inbound() const;
  public:
  void clear_remote_inbound();
  const ::livekit::proto::RemoteInboundRtpStreamStats& remote_inbound() const;
  PROTOBUF_NODISCARD ::livekit::proto::RemoteInboundRtpStreamStats* release_remote_inbound();
  ::livekit::proto::RemoteInboundRtpStreamStats* mutable_remote_inbound();
  void set_allocated_remote_inbound(::livekit::proto::RemoteInboundRtpStreamStats* remote_inbound);
  private:
  const ::livekit::proto::RemoteInboundRtpStreamStats& _internal_remote_inbound() const;
  ::livekit::proto::RemoteInboundRtpStreamStats* _internal_mutable_remote_inbound();
  public:
  void unsafe_arena_set_allocated_remote_inbound(
      ::livekit::proto::RemoteInboundRtpStreamStats* remote_inbound);
  ::livekit::proto::RemoteInboundRtpStreamStats* unsafe_arena_release_remote_inbound();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.RemoteInboundRtp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::RtpStreamStats* stream_;
    ::livekit::proto::ReceivedRtpStreamStats* received_;
    ::livekit::proto::RemoteInboundRtpStreamStats* remote_inbound_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_RemoteOutboundRtp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.RemoteOutboundRtp) */ {
 public:
  inline RtcStats_RemoteOutboundRtp() : RtcStats_RemoteOutboundRtp(nullptr) {}
  ~RtcStats_RemoteOutboundRtp() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_RemoteOutboundRtp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_RemoteOutboundRtp(const RtcStats_RemoteOutboundRtp& from);
  RtcStats_RemoteOutboundRtp(RtcStats_RemoteOutboundRtp&& from) noexcept
    : RtcStats_RemoteOutboundRtp() {
    *this = ::std::move(from);
  }

  inline RtcStats_RemoteOutboundRtp& operator=(const RtcStats_RemoteOutboundRtp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_RemoteOutboundRtp& operator=(RtcStats_RemoteOutboundRtp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_RemoteOutboundRtp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_RemoteOutboundRtp* internal_default_instance() {
    return reinterpret_cast<const RtcStats_RemoteOutboundRtp*>(
               &_RtcStats_RemoteOutboundRtp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RtcStats_RemoteOutboundRtp& a, RtcStats_RemoteOutboundRtp& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_RemoteOutboundRtp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_RemoteOutboundRtp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_RemoteOutboundRtp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_RemoteOutboundRtp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_RemoteOutboundRtp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_RemoteOutboundRtp& from) {
    RtcStats_RemoteOutboundRtp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_RemoteOutboundRtp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.RemoteOutboundRtp";
  }
  protected:
  explicit RtcStats_RemoteOutboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kStreamFieldNumber = 2,
    kSentFieldNumber = 3,
    kRemoteOutboundFieldNumber = 4,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.RtpStreamStats stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::livekit::proto::RtpStreamStats& stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtpStreamStats* release_stream();
  ::livekit::proto::RtpStreamStats* mutable_stream();
  void set_allocated_stream(::livekit::proto::RtpStreamStats* stream);
  private:
  const ::livekit::proto::RtpStreamStats& _internal_stream() const;
  ::livekit::proto::RtpStreamStats* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::livekit::proto::RtpStreamStats* stream);
  ::livekit::proto::RtpStreamStats* unsafe_arena_release_stream();

  // required .livekit.proto.SentRtpStreamStats sent = 3;
  bool has_sent() const;
  private:
  bool _internal_has_sent() const;
  public:
  void clear_sent();
  const ::livekit::proto::SentRtpStreamStats& sent() const;
  PROTOBUF_NODISCARD ::livekit::proto::SentRtpStreamStats* release_sent();
  ::livekit::proto::SentRtpStreamStats* mutable_sent();
  void set_allocated_sent(::livekit::proto::SentRtpStreamStats* sent);
  private:
  const ::livekit::proto::SentRtpStreamStats& _internal_sent() const;
  ::livekit::proto::SentRtpStreamStats* _internal_mutable_sent();
  public:
  void unsafe_arena_set_allocated_sent(
      ::livekit::proto::SentRtpStreamStats* sent);
  ::livekit::proto::SentRtpStreamStats* unsafe_arena_release_sent();

  // required .livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
  bool has_remote_outbound() const;
  private:
  bool _internal_has_remote_outbound() const;
  public:
  void clear_remote_outbound();
  const ::livekit::proto::RemoteOutboundRtpStreamStats& remote_outbound() const;
  PROTOBUF_NODISCARD ::livekit::proto::RemoteOutboundRtpStreamStats* release_remote_outbound();
  ::livekit::proto::RemoteOutboundRtpStreamStats* mutable_remote_outbound();
  void set_allocated_remote_outbound(::livekit::proto::RemoteOutboundRtpStreamStats* remote_outbound);
  private:
  const ::livekit::proto::RemoteOutboundRtpStreamStats& _internal_remote_outbound() const;
  ::livekit::proto::RemoteOutboundRtpStreamStats* _internal_mutable_remote_outbound();
  public:
  void unsafe_arena_set_allocated_remote_outbound(
      ::livekit::proto::RemoteOutboundRtpStreamStats* remote_outbound);
  ::livekit::proto::RemoteOutboundRtpStreamStats* unsafe_arena_release_remote_outbound();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.RemoteOutboundRtp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::RtpStreamStats* stream_;
    ::livekit::proto::SentRtpStreamStats* sent_;
    ::livekit::proto::RemoteOutboundRtpStreamStats* remote_outbound_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_MediaSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.MediaSource) */ {
 public:
  inline RtcStats_MediaSource() : RtcStats_MediaSource(nullptr) {}
  ~RtcStats_MediaSource() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_MediaSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_MediaSource(const RtcStats_MediaSource& from);
  RtcStats_MediaSource(RtcStats_MediaSource&& from) noexcept
    : RtcStats_MediaSource() {
    *this = ::std::move(from);
  }

  inline RtcStats_MediaSource& operator=(const RtcStats_MediaSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_MediaSource& operator=(RtcStats_MediaSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_MediaSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_MediaSource* internal_default_instance() {
    return reinterpret_cast<const RtcStats_MediaSource*>(
               &_RtcStats_MediaSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RtcStats_MediaSource& a, RtcStats_MediaSource& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_MediaSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_MediaSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_MediaSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_MediaSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_MediaSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_MediaSource& from) {
    RtcStats_MediaSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_MediaSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.MediaSource";
  }
  protected:
  explicit RtcStats_MediaSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kSourceFieldNumber = 2,
    kAudioFieldNumber = 3,
    kVideoFieldNumber = 4,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.MediaSourceStats source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::livekit::proto::MediaSourceStats& source() const;
  PROTOBUF_NODISCARD ::livekit::proto::MediaSourceStats* release_source();
  ::livekit::proto::MediaSourceStats* mutable_source();
  void set_allocated_source(::livekit::proto::MediaSourceStats* source);
  private:
  const ::livekit::proto::MediaSourceStats& _internal_source() const;
  ::livekit::proto::MediaSourceStats* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::livekit::proto::MediaSourceStats* source);
  ::livekit::proto::MediaSourceStats* unsafe_arena_release_source();

  // required .livekit.proto.AudioSourceStats audio = 3;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::livekit::proto::AudioSourceStats& audio() const;
  PROTOBUF_NODISCARD ::livekit::proto::AudioSourceStats* release_audio();
  ::livekit::proto::AudioSourceStats* mutable_audio();
  void set_allocated_audio(::livekit::proto::AudioSourceStats* audio);
  private:
  const ::livekit::proto::AudioSourceStats& _internal_audio() const;
  ::livekit::proto::AudioSourceStats* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::livekit::proto::AudioSourceStats* audio);
  ::livekit::proto::AudioSourceStats* unsafe_arena_release_audio();

  // required .livekit.proto.VideoSourceStats video = 4;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::livekit::proto::VideoSourceStats& video() const;
  PROTOBUF_NODISCARD ::livekit::proto::VideoSourceStats* release_video();
  ::livekit::proto::VideoSourceStats* mutable_video();
  void set_allocated_video(::livekit::proto::VideoSourceStats* video);
  private:
  const ::livekit::proto::VideoSourceStats& _internal_video() const;
  ::livekit::proto::VideoSourceStats* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::livekit::proto::VideoSourceStats* video);
  ::livekit::proto::VideoSourceStats* unsafe_arena_release_video();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.MediaSource)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::MediaSourceStats* source_;
    ::livekit::proto::AudioSourceStats* audio_;
    ::livekit::proto::VideoSourceStats* video_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_MediaPlayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.MediaPlayout) */ {
 public:
  inline RtcStats_MediaPlayout() : RtcStats_MediaPlayout(nullptr) {}
  ~RtcStats_MediaPlayout() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_MediaPlayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_MediaPlayout(const RtcStats_MediaPlayout& from);
  RtcStats_MediaPlayout(RtcStats_MediaPlayout&& from) noexcept
    : RtcStats_MediaPlayout() {
    *this = ::std::move(from);
  }

  inline RtcStats_MediaPlayout& operator=(const RtcStats_MediaPlayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_MediaPlayout& operator=(RtcStats_MediaPlayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_MediaPlayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_MediaPlayout* internal_default_instance() {
    return reinterpret_cast<const RtcStats_MediaPlayout*>(
               &_RtcStats_MediaPlayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RtcStats_MediaPlayout& a, RtcStats_MediaPlayout& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_MediaPlayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_MediaPlayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_MediaPlayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_MediaPlayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_MediaPlayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_MediaPlayout& from) {
    RtcStats_MediaPlayout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_MediaPlayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.MediaPlayout";
  }
  protected:
  explicit RtcStats_MediaPlayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kAudioPlayoutFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.AudioPlayoutStats audio_playout = 2;
  bool has_audio_playout() const;
  private:
  bool _internal_has_audio_playout() const;
  public:
  void clear_audio_playout();
  const ::livekit::proto::AudioPlayoutStats& audio_playout() const;
  PROTOBUF_NODISCARD ::livekit::proto::AudioPlayoutStats* release_audio_playout();
  ::livekit::proto::AudioPlayoutStats* mutable_audio_playout();
  void set_allocated_audio_playout(::livekit::proto::AudioPlayoutStats* audio_playout);
  private:
  const ::livekit::proto::AudioPlayoutStats& _internal_audio_playout() const;
  ::livekit::proto::AudioPlayoutStats* _internal_mutable_audio_playout();
  public:
  void unsafe_arena_set_allocated_audio_playout(
      ::livekit::proto::AudioPlayoutStats* audio_playout);
  ::livekit::proto::AudioPlayoutStats* unsafe_arena_release_audio_playout();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.MediaPlayout)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::AudioPlayoutStats* audio_playout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_PeerConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.PeerConnection) */ {
 public:
  inline RtcStats_PeerConnection() : RtcStats_PeerConnection(nullptr) {}
  ~RtcStats_PeerConnection() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_PeerConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_PeerConnection(const RtcStats_PeerConnection& from);
  RtcStats_PeerConnection(RtcStats_PeerConnection&& from) noexcept
    : RtcStats_PeerConnection() {
    *this = ::std::move(from);
  }

  inline RtcStats_PeerConnection& operator=(const RtcStats_PeerConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_PeerConnection& operator=(RtcStats_PeerConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_PeerConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_PeerConnection* internal_default_instance() {
    return reinterpret_cast<const RtcStats_PeerConnection*>(
               &_RtcStats_PeerConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RtcStats_PeerConnection& a, RtcStats_PeerConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_PeerConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_PeerConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_PeerConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_PeerConnection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_PeerConnection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_PeerConnection& from) {
    RtcStats_PeerConnection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_PeerConnection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.PeerConnection";
  }
  protected:
  explicit RtcStats_PeerConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kPcFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.PeerConnectionStats pc = 2;
  bool has_pc() const;
  private:
  bool _internal_has_pc() const;
  public:
  void clear_pc();
  const ::livekit::proto::PeerConnectionStats& pc() const;
  PROTOBUF_NODISCARD ::livekit::proto::PeerConnectionStats* release_pc();
  ::livekit::proto::PeerConnectionStats* mutable_pc();
  void set_allocated_pc(::livekit::proto::PeerConnectionStats* pc);
  private:
  const ::livekit::proto::PeerConnectionStats& _internal_pc() const;
  ::livekit::proto::PeerConnectionStats* _internal_mutable_pc();
  public:
  void unsafe_arena_set_allocated_pc(
      ::livekit::proto::PeerConnectionStats* pc);
  ::livekit::proto::PeerConnectionStats* unsafe_arena_release_pc();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.PeerConnection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::PeerConnectionStats* pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_DataChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.DataChannel) */ {
 public:
  inline RtcStats_DataChannel() : RtcStats_DataChannel(nullptr) {}
  ~RtcStats_DataChannel() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_DataChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_DataChannel(const RtcStats_DataChannel& from);
  RtcStats_DataChannel(RtcStats_DataChannel&& from) noexcept
    : RtcStats_DataChannel() {
    *this = ::std::move(from);
  }

  inline RtcStats_DataChannel& operator=(const RtcStats_DataChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_DataChannel& operator=(RtcStats_DataChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_DataChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_DataChannel* internal_default_instance() {
    return reinterpret_cast<const RtcStats_DataChannel*>(
               &_RtcStats_DataChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RtcStats_DataChannel& a, RtcStats_DataChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_DataChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_DataChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_DataChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_DataChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_DataChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_DataChannel& from) {
    RtcStats_DataChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_DataChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.DataChannel";
  }
  protected:
  explicit RtcStats_DataChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kDcFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.DataChannelStats dc = 2;
  bool has_dc() const;
  private:
  bool _internal_has_dc() const;
  public:
  void clear_dc();
  const ::livekit::proto::DataChannelStats& dc() const;
  PROTOBUF_NODISCARD ::livekit::proto::DataChannelStats* release_dc();
  ::livekit::proto::DataChannelStats* mutable_dc();
  void set_allocated_dc(::livekit::proto::DataChannelStats* dc);
  private:
  const ::livekit::proto::DataChannelStats& _internal_dc() const;
  ::livekit::proto::DataChannelStats* _internal_mutable_dc();
  public:
  void unsafe_arena_set_allocated_dc(
      ::livekit::proto::DataChannelStats* dc);
  ::livekit::proto::DataChannelStats* unsafe_arena_release_dc();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.DataChannel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::DataChannelStats* dc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_Transport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.Transport) */ {
 public:
  inline RtcStats_Transport() : RtcStats_Transport(nullptr) {}
  ~RtcStats_Transport() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_Transport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_Transport(const RtcStats_Transport& from);
  RtcStats_Transport(RtcStats_Transport&& from) noexcept
    : RtcStats_Transport() {
    *this = ::std::move(from);
  }

  inline RtcStats_Transport& operator=(const RtcStats_Transport& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_Transport& operator=(RtcStats_Transport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_Transport& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_Transport* internal_default_instance() {
    return reinterpret_cast<const RtcStats_Transport*>(
               &_RtcStats_Transport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RtcStats_Transport& a, RtcStats_Transport& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_Transport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_Transport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_Transport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_Transport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_Transport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_Transport& from) {
    RtcStats_Transport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_Transport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.Transport";
  }
  protected:
  explicit RtcStats_Transport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kTransportFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.TransportStats transport = 2;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::livekit::proto::TransportStats& transport() const;
  PROTOBUF_NODISCARD ::livekit::proto::TransportStats* release_transport();
  ::livekit::proto::TransportStats* mutable_transport();
  void set_allocated_transport(::livekit::proto::TransportStats* transport);
  private:
  const ::livekit::proto::TransportStats& _internal_transport() const;
  ::livekit::proto::TransportStats* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::livekit::proto::TransportStats* transport);
  ::livekit::proto::TransportStats* unsafe_arena_release_transport();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.Transport)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::TransportStats* transport_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_CandidatePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.CandidatePair) */ {
 public:
  inline RtcStats_CandidatePair() : RtcStats_CandidatePair(nullptr) {}
  ~RtcStats_CandidatePair() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_CandidatePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_CandidatePair(const RtcStats_CandidatePair& from);
  RtcStats_CandidatePair(RtcStats_CandidatePair&& from) noexcept
    : RtcStats_CandidatePair() {
    *this = ::std::move(from);
  }

  inline RtcStats_CandidatePair& operator=(const RtcStats_CandidatePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_CandidatePair& operator=(RtcStats_CandidatePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_CandidatePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_CandidatePair* internal_default_instance() {
    return reinterpret_cast<const RtcStats_CandidatePair*>(
               &_RtcStats_CandidatePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RtcStats_CandidatePair& a, RtcStats_CandidatePair& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_CandidatePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_CandidatePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_CandidatePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_CandidatePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_CandidatePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_CandidatePair& from) {
    RtcStats_CandidatePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_CandidatePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.CandidatePair";
  }
  protected:
  explicit RtcStats_CandidatePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kCandidatePairFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.CandidatePairStats candidate_pair = 2;
  bool has_candidate_pair() const;
  private:
  bool _internal_has_candidate_pair() const;
  public:
  void clear_candidate_pair();
  const ::livekit::proto::CandidatePairStats& candidate_pair() const;
  PROTOBUF_NODISCARD ::livekit::proto::CandidatePairStats* release_candidate_pair();
  ::livekit::proto::CandidatePairStats* mutable_candidate_pair();
  void set_allocated_candidate_pair(::livekit::proto::CandidatePairStats* candidate_pair);
  private:
  const ::livekit::proto::CandidatePairStats& _internal_candidate_pair() const;
  ::livekit::proto::CandidatePairStats* _internal_mutable_candidate_pair();
  public:
  void unsafe_arena_set_allocated_candidate_pair(
      ::livekit::proto::CandidatePairStats* candidate_pair);
  ::livekit::proto::CandidatePairStats* unsafe_arena_release_candidate_pair();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.CandidatePair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::CandidatePairStats* candidate_pair_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_LocalCandidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.LocalCandidate) */ {
 public:
  inline RtcStats_LocalCandidate() : RtcStats_LocalCandidate(nullptr) {}
  ~RtcStats_LocalCandidate() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_LocalCandidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_LocalCandidate(const RtcStats_LocalCandidate& from);
  RtcStats_LocalCandidate(RtcStats_LocalCandidate&& from) noexcept
    : RtcStats_LocalCandidate() {
    *this = ::std::move(from);
  }

  inline RtcStats_LocalCandidate& operator=(const RtcStats_LocalCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_LocalCandidate& operator=(RtcStats_LocalCandidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_LocalCandidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_LocalCandidate* internal_default_instance() {
    return reinterpret_cast<const RtcStats_LocalCandidate*>(
               &_RtcStats_LocalCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RtcStats_LocalCandidate& a, RtcStats_LocalCandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_LocalCandidate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_LocalCandidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_LocalCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_LocalCandidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_LocalCandidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_LocalCandidate& from) {
    RtcStats_LocalCandidate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_LocalCandidate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.LocalCandidate";
  }
  protected:
  explicit RtcStats_LocalCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kCandidateFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.IceCandidateStats candidate = 2;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::livekit::proto::IceCandidateStats& candidate() const;
  PROTOBUF_NODISCARD ::livekit::proto::IceCandidateStats* release_candidate();
  ::livekit::proto::IceCandidateStats* mutable_candidate();
  void set_allocated_candidate(::livekit::proto::IceCandidateStats* candidate);
  private:
  const ::livekit::proto::IceCandidateStats& _internal_candidate() const;
  ::livekit::proto::IceCandidateStats* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::livekit::proto::IceCandidateStats* candidate);
  ::livekit::proto::IceCandidateStats* unsafe_arena_release_candidate();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.LocalCandidate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::IceCandidateStats* candidate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_RemoteCandidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.RemoteCandidate) */ {
 public:
  inline RtcStats_RemoteCandidate() : RtcStats_RemoteCandidate(nullptr) {}
  ~RtcStats_RemoteCandidate() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_RemoteCandidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_RemoteCandidate(const RtcStats_RemoteCandidate& from);
  RtcStats_RemoteCandidate(RtcStats_RemoteCandidate&& from) noexcept
    : RtcStats_RemoteCandidate() {
    *this = ::std::move(from);
  }

  inline RtcStats_RemoteCandidate& operator=(const RtcStats_RemoteCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_RemoteCandidate& operator=(RtcStats_RemoteCandidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_RemoteCandidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_RemoteCandidate* internal_default_instance() {
    return reinterpret_cast<const RtcStats_RemoteCandidate*>(
               &_RtcStats_RemoteCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RtcStats_RemoteCandidate& a, RtcStats_RemoteCandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_RemoteCandidate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_RemoteCandidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_RemoteCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_RemoteCandidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_RemoteCandidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_RemoteCandidate& from) {
    RtcStats_RemoteCandidate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_RemoteCandidate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.RemoteCandidate";
  }
  protected:
  explicit RtcStats_RemoteCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kCandidateFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.IceCandidateStats candidate = 2;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::livekit::proto::IceCandidateStats& candidate() const;
  PROTOBUF_NODISCARD ::livekit::proto::IceCandidateStats* release_candidate();
  ::livekit::proto::IceCandidateStats* mutable_candidate();
  void set_allocated_candidate(::livekit::proto::IceCandidateStats* candidate);
  private:
  const ::livekit::proto::IceCandidateStats& _internal_candidate() const;
  ::livekit::proto::IceCandidateStats* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::livekit::proto::IceCandidateStats* candidate);
  ::livekit::proto::IceCandidateStats* unsafe_arena_release_candidate();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.RemoteCandidate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::IceCandidateStats* candidate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_Certificate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.Certificate) */ {
 public:
  inline RtcStats_Certificate() : RtcStats_Certificate(nullptr) {}
  ~RtcStats_Certificate() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_Certificate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_Certificate(const RtcStats_Certificate& from);
  RtcStats_Certificate(RtcStats_Certificate&& from) noexcept
    : RtcStats_Certificate() {
    *this = ::std::move(from);
  }

  inline RtcStats_Certificate& operator=(const RtcStats_Certificate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_Certificate& operator=(RtcStats_Certificate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_Certificate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_Certificate* internal_default_instance() {
    return reinterpret_cast<const RtcStats_Certificate*>(
               &_RtcStats_Certificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RtcStats_Certificate& a, RtcStats_Certificate& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_Certificate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_Certificate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_Certificate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_Certificate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_Certificate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_Certificate& from) {
    RtcStats_Certificate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_Certificate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.Certificate";
  }
  protected:
  explicit RtcStats_Certificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kCertificateFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.CertificateStats certificate = 2;
  bool has_certificate() const;
  private:
  bool _internal_has_certificate() const;
  public:
  void clear_certificate();
  const ::livekit::proto::CertificateStats& certificate() const;
  PROTOBUF_NODISCARD ::livekit::proto::CertificateStats* release_certificate();
  ::livekit::proto::CertificateStats* mutable_certificate();
  void set_allocated_certificate(::livekit::proto::CertificateStats* certificate);
  private:
  const ::livekit::proto::CertificateStats& _internal_certificate() const;
  ::livekit::proto::CertificateStats* _internal_mutable_certificate();
  public:
  void unsafe_arena_set_allocated_certificate(
      ::livekit::proto::CertificateStats* certificate);
  ::livekit::proto::CertificateStats* unsafe_arena_release_certificate();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.Certificate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::CertificateStats* certificate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_Stream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.Stream) */ {
 public:
  inline RtcStats_Stream() : RtcStats_Stream(nullptr) {}
  ~RtcStats_Stream() override;
  explicit PROTOBUF_CONSTEXPR RtcStats_Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_Stream(const RtcStats_Stream& from);
  RtcStats_Stream(RtcStats_Stream&& from) noexcept
    : RtcStats_Stream() {
    *this = ::std::move(from);
  }

  inline RtcStats_Stream& operator=(const RtcStats_Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_Stream& operator=(RtcStats_Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_Stream* internal_default_instance() {
    return reinterpret_cast<const RtcStats_Stream*>(
               &_RtcStats_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RtcStats_Stream& a, RtcStats_Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_Stream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats_Stream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats_Stream& from) {
    RtcStats_Stream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats_Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.Stream";
  }
  protected:
  explicit RtcStats_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcFieldNumber = 1,
    kStreamFieldNumber = 2,
  };
  // required .livekit.proto.RtcStatsData rtc = 1;
  bool has_rtc() const;
  private:
  bool _internal_has_rtc() const;
  public:
  void clear_rtc();
  const ::livekit::proto::RtcStatsData& rtc() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStatsData* release_rtc();
  ::livekit::proto::RtcStatsData* mutable_rtc();
  void set_allocated_rtc(::livekit::proto::RtcStatsData* rtc);
  private:
  const ::livekit::proto::RtcStatsData& _internal_rtc() const;
  ::livekit::proto::RtcStatsData* _internal_mutable_rtc();
  public:
  void unsafe_arena_set_allocated_rtc(
      ::livekit::proto::RtcStatsData* rtc);
  ::livekit::proto::RtcStatsData* unsafe_arena_release_rtc();

  // required .livekit.proto.StreamStats stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::livekit::proto::StreamStats& stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::StreamStats* release_stream();
  ::livekit::proto::StreamStats* mutable_stream();
  void set_allocated_stream(::livekit::proto::StreamStats* stream);
  private:
  const ::livekit::proto::StreamStats& _internal_stream() const;
  ::livekit::proto::StreamStats* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::livekit::proto::StreamStats* stream);
  ::livekit::proto::StreamStats* unsafe_arena_release_stream();

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.Stream)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::livekit::proto::RtcStatsData* rtc_;
    ::livekit::proto::StreamStats* stream_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats_Track final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats.Track) */ {
 public:
  inline RtcStats_Track() : RtcStats_Track(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RtcStats_Track(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats_Track(const RtcStats_Track& from);
  RtcStats_Track(RtcStats_Track&& from) noexcept
    : RtcStats_Track() {
    *this = ::std::move(from);
  }

  inline RtcStats_Track& operator=(const RtcStats_Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats_Track& operator=(RtcStats_Track&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats_Track& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStats_Track* internal_default_instance() {
    return reinterpret_cast<const RtcStats_Track*>(
               &_RtcStats_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RtcStats_Track& a, RtcStats_Track& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats_Track* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats_Track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats_Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats_Track>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RtcStats_Track& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RtcStats_Track& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats.Track";
  }
  protected:
  explicit RtcStats_Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats.Track)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStats) */ {
 public:
  inline RtcStats() : RtcStats(nullptr) {}
  ~RtcStats() override;
  explicit PROTOBUF_CONSTEXPR RtcStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStats(const RtcStats& from);
  RtcStats(RtcStats&& from) noexcept
    : RtcStats() {
    *this = ::std::move(from);
  }

  inline RtcStats& operator=(const RtcStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStats& operator=(RtcStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStats& default_instance() {
    return *internal_default_instance();
  }
  enum StatsCase {
    kCodec = 3,
    kInboundRtp = 4,
    kOutboundRtp = 5,
    kRemoteInboundRtp = 6,
    kRemoteOutboundRtp = 7,
    kMediaSource = 8,
    kMediaPlayout = 9,
    kPeerConnection = 10,
    kDataChannel = 11,
    kTransport = 12,
    kCandidatePair = 13,
    kLocalCandidate = 14,
    kRemoteCandidate = 15,
    kCertificate = 16,
    kStream = 17,
    kTrack = 18,
    STATS_NOT_SET = 0,
  };

  static inline const RtcStats* internal_default_instance() {
    return reinterpret_cast<const RtcStats*>(
               &_RtcStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RtcStats& a, RtcStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStats& from) {
    RtcStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStats";
  }
  protected:
  explicit RtcStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RtcStats_Codec Codec;
  typedef RtcStats_InboundRtp InboundRtp;
  typedef RtcStats_OutboundRtp OutboundRtp;
  typedef RtcStats_RemoteInboundRtp RemoteInboundRtp;
  typedef RtcStats_RemoteOutboundRtp RemoteOutboundRtp;
  typedef RtcStats_MediaSource MediaSource;
  typedef RtcStats_MediaPlayout MediaPlayout;
  typedef RtcStats_PeerConnection PeerConnection;
  typedef RtcStats_DataChannel DataChannel;
  typedef RtcStats_Transport Transport;
  typedef RtcStats_CandidatePair CandidatePair;
  typedef RtcStats_LocalCandidate LocalCandidate;
  typedef RtcStats_RemoteCandidate RemoteCandidate;
  typedef RtcStats_Certificate Certificate;
  typedef RtcStats_Stream Stream;
  typedef RtcStats_Track Track;

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 3,
    kInboundRtpFieldNumber = 4,
    kOutboundRtpFieldNumber = 5,
    kRemoteInboundRtpFieldNumber = 6,
    kRemoteOutboundRtpFieldNumber = 7,
    kMediaSourceFieldNumber = 8,
    kMediaPlayoutFieldNumber = 9,
    kPeerConnectionFieldNumber = 10,
    kDataChannelFieldNumber = 11,
    kTransportFieldNumber = 12,
    kCandidatePairFieldNumber = 13,
    kLocalCandidateFieldNumber = 14,
    kRemoteCandidateFieldNumber = 15,
    kCertificateFieldNumber = 16,
    kStreamFieldNumber = 17,
    kTrackFieldNumber = 18,
  };
  // .livekit.proto.RtcStats.Codec codec = 3;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const ::livekit::proto::RtcStats_Codec& codec() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_Codec* release_codec();
  ::livekit::proto::RtcStats_Codec* mutable_codec();
  void set_allocated_codec(::livekit::proto::RtcStats_Codec* codec);
  private:
  const ::livekit::proto::RtcStats_Codec& _internal_codec() const;
  ::livekit::proto::RtcStats_Codec* _internal_mutable_codec();
  public:
  void unsafe_arena_set_allocated_codec(
      ::livekit::proto::RtcStats_Codec* codec);
  ::livekit::proto::RtcStats_Codec* unsafe_arena_release_codec();

  // .livekit.proto.RtcStats.InboundRtp inbound_rtp = 4;
  bool has_inbound_rtp() const;
  private:
  bool _internal_has_inbound_rtp() const;
  public:
  void clear_inbound_rtp();
  const ::livekit::proto::RtcStats_InboundRtp& inbound_rtp() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_InboundRtp* release_inbound_rtp();
  ::livekit::proto::RtcStats_InboundRtp* mutable_inbound_rtp();
  void set_allocated_inbound_rtp(::livekit::proto::RtcStats_InboundRtp* inbound_rtp);
  private:
  const ::livekit::proto::RtcStats_InboundRtp& _internal_inbound_rtp() const;
  ::livekit::proto::RtcStats_InboundRtp* _internal_mutable_inbound_rtp();
  public:
  void unsafe_arena_set_allocated_inbound_rtp(
      ::livekit::proto::RtcStats_InboundRtp* inbound_rtp);
  ::livekit::proto::RtcStats_InboundRtp* unsafe_arena_release_inbound_rtp();

  // .livekit.proto.RtcStats.OutboundRtp outbound_rtp = 5;
  bool has_outbound_rtp() const;
  private:
  bool _internal_has_outbound_rtp() const;
  public:
  void clear_outbound_rtp();
  const ::livekit::proto::RtcStats_OutboundRtp& outbound_rtp() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_OutboundRtp* release_outbound_rtp();
  ::livekit::proto::RtcStats_OutboundRtp* mutable_outbound_rtp();
  void set_allocated_outbound_rtp(::livekit::proto::RtcStats_OutboundRtp* outbound_rtp);
  private:
  const ::livekit::proto::RtcStats_OutboundRtp& _internal_outbound_rtp() const;
  ::livekit::proto::RtcStats_OutboundRtp* _internal_mutable_outbound_rtp();
  public:
  void unsafe_arena_set_allocated_outbound_rtp(
      ::livekit::proto::RtcStats_OutboundRtp* outbound_rtp);
  ::livekit::proto::RtcStats_OutboundRtp* unsafe_arena_release_outbound_rtp();

  // .livekit.proto.RtcStats.RemoteInboundRtp remote_inbound_rtp = 6;
  bool has_remote_inbound_rtp() const;
  private:
  bool _internal_has_remote_inbound_rtp() const;
  public:
  void clear_remote_inbound_rtp();
  const ::livekit::proto::RtcStats_RemoteInboundRtp& remote_inbound_rtp() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_RemoteInboundRtp* release_remote_inbound_rtp();
  ::livekit::proto::RtcStats_RemoteInboundRtp* mutable_remote_inbound_rtp();
  void set_allocated_remote_inbound_rtp(::livekit::proto::RtcStats_RemoteInboundRtp* remote_inbound_rtp);
  private:
  const ::livekit::proto::RtcStats_RemoteInboundRtp& _internal_remote_inbound_rtp() const;
  ::livekit::proto::RtcStats_RemoteInboundRtp* _internal_mutable_remote_inbound_rtp();
  public:
  void unsafe_arena_set_allocated_remote_inbound_rtp(
      ::livekit::proto::RtcStats_RemoteInboundRtp* remote_inbound_rtp);
  ::livekit::proto::RtcStats_RemoteInboundRtp* unsafe_arena_release_remote_inbound_rtp();

  // .livekit.proto.RtcStats.RemoteOutboundRtp remote_outbound_rtp = 7;
  bool has_remote_outbound_rtp() const;
  private:
  bool _internal_has_remote_outbound_rtp() const;
  public:
  void clear_remote_outbound_rtp();
  const ::livekit::proto::RtcStats_RemoteOutboundRtp& remote_outbound_rtp() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_RemoteOutboundRtp* release_remote_outbound_rtp();
  ::livekit::proto::RtcStats_RemoteOutboundRtp* mutable_remote_outbound_rtp();
  void set_allocated_remote_outbound_rtp(::livekit::proto::RtcStats_RemoteOutboundRtp* remote_outbound_rtp);
  private:
  const ::livekit::proto::RtcStats_RemoteOutboundRtp& _internal_remote_outbound_rtp() const;
  ::livekit::proto::RtcStats_RemoteOutboundRtp* _internal_mutable_remote_outbound_rtp();
  public:
  void unsafe_arena_set_allocated_remote_outbound_rtp(
      ::livekit::proto::RtcStats_RemoteOutboundRtp* remote_outbound_rtp);
  ::livekit::proto::RtcStats_RemoteOutboundRtp* unsafe_arena_release_remote_outbound_rtp();

  // .livekit.proto.RtcStats.MediaSource media_source = 8;
  bool has_media_source() const;
  private:
  bool _internal_has_media_source() const;
  public:
  void clear_media_source();
  const ::livekit::proto::RtcStats_MediaSource& media_source() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_MediaSource* release_media_source();
  ::livekit::proto::RtcStats_MediaSource* mutable_media_source();
  void set_allocated_media_source(::livekit::proto::RtcStats_MediaSource* media_source);
  private:
  const ::livekit::proto::RtcStats_MediaSource& _internal_media_source() const;
  ::livekit::proto::RtcStats_MediaSource* _internal_mutable_media_source();
  public:
  void unsafe_arena_set_allocated_media_source(
      ::livekit::proto::RtcStats_MediaSource* media_source);
  ::livekit::proto::RtcStats_MediaSource* unsafe_arena_release_media_source();

  // .livekit.proto.RtcStats.MediaPlayout media_playout = 9;
  bool has_media_playout() const;
  private:
  bool _internal_has_media_playout() const;
  public:
  void clear_media_playout();
  const ::livekit::proto::RtcStats_MediaPlayout& media_playout() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_MediaPlayout* release_media_playout();
  ::livekit::proto::RtcStats_MediaPlayout* mutable_media_playout();
  void set_allocated_media_playout(::livekit::proto::RtcStats_MediaPlayout* media_playout);
  private:
  const ::livekit::proto::RtcStats_MediaPlayout& _internal_media_playout() const;
  ::livekit::proto::RtcStats_MediaPlayout* _internal_mutable_media_playout();
  public:
  void unsafe_arena_set_allocated_media_playout(
      ::livekit::proto::RtcStats_MediaPlayout* media_playout);
  ::livekit::proto::RtcStats_MediaPlayout* unsafe_arena_release_media_playout();

  // .livekit.proto.RtcStats.PeerConnection peer_connection = 10;
  bool has_peer_connection() const;
  private:
  bool _internal_has_peer_connection() const;
  public:
  void clear_peer_connection();
  const ::livekit::proto::RtcStats_PeerConnection& peer_connection() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_PeerConnection* release_peer_connection();
  ::livekit::proto::RtcStats_PeerConnection* mutable_peer_connection();
  void set_allocated_peer_connection(::livekit::proto::RtcStats_PeerConnection* peer_connection);
  private:
  const ::livekit::proto::RtcStats_PeerConnection& _internal_peer_connection() const;
  ::livekit::proto::RtcStats_PeerConnection* _internal_mutable_peer_connection();
  public:
  void unsafe_arena_set_allocated_peer_connection(
      ::livekit::proto::RtcStats_PeerConnection* peer_connection);
  ::livekit::proto::RtcStats_PeerConnection* unsafe_arena_release_peer_connection();

  // .livekit.proto.RtcStats.DataChannel data_channel = 11;
  bool has_data_channel() const;
  private:
  bool _internal_has_data_channel() const;
  public:
  void clear_data_channel();
  const ::livekit::proto::RtcStats_DataChannel& data_channel() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_DataChannel* release_data_channel();
  ::livekit::proto::RtcStats_DataChannel* mutable_data_channel();
  void set_allocated_data_channel(::livekit::proto::RtcStats_DataChannel* data_channel);
  private:
  const ::livekit::proto::RtcStats_DataChannel& _internal_data_channel() const;
  ::livekit::proto::RtcStats_DataChannel* _internal_mutable_data_channel();
  public:
  void unsafe_arena_set_allocated_data_channel(
      ::livekit::proto::RtcStats_DataChannel* data_channel);
  ::livekit::proto::RtcStats_DataChannel* unsafe_arena_release_data_channel();

  // .livekit.proto.RtcStats.Transport transport = 12;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::livekit::proto::RtcStats_Transport& transport() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_Transport* release_transport();
  ::livekit::proto::RtcStats_Transport* mutable_transport();
  void set_allocated_transport(::livekit::proto::RtcStats_Transport* transport);
  private:
  const ::livekit::proto::RtcStats_Transport& _internal_transport() const;
  ::livekit::proto::RtcStats_Transport* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::livekit::proto::RtcStats_Transport* transport);
  ::livekit::proto::RtcStats_Transport* unsafe_arena_release_transport();

  // .livekit.proto.RtcStats.CandidatePair candidate_pair = 13;
  bool has_candidate_pair() const;
  private:
  bool _internal_has_candidate_pair() const;
  public:
  void clear_candidate_pair();
  const ::livekit::proto::RtcStats_CandidatePair& candidate_pair() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_CandidatePair* release_candidate_pair();
  ::livekit::proto::RtcStats_CandidatePair* mutable_candidate_pair();
  void set_allocated_candidate_pair(::livekit::proto::RtcStats_CandidatePair* candidate_pair);
  private:
  const ::livekit::proto::RtcStats_CandidatePair& _internal_candidate_pair() const;
  ::livekit::proto::RtcStats_CandidatePair* _internal_mutable_candidate_pair();
  public:
  void unsafe_arena_set_allocated_candidate_pair(
      ::livekit::proto::RtcStats_CandidatePair* candidate_pair);
  ::livekit::proto::RtcStats_CandidatePair* unsafe_arena_release_candidate_pair();

  // .livekit.proto.RtcStats.LocalCandidate local_candidate = 14;
  bool has_local_candidate() const;
  private:
  bool _internal_has_local_candidate() const;
  public:
  void clear_local_candidate();
  const ::livekit::proto::RtcStats_LocalCandidate& local_candidate() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_LocalCandidate* release_local_candidate();
  ::livekit::proto::RtcStats_LocalCandidate* mutable_local_candidate();
  void set_allocated_local_candidate(::livekit::proto::RtcStats_LocalCandidate* local_candidate);
  private:
  const ::livekit::proto::RtcStats_LocalCandidate& _internal_local_candidate() const;
  ::livekit::proto::RtcStats_LocalCandidate* _internal_mutable_local_candidate();
  public:
  void unsafe_arena_set_allocated_local_candidate(
      ::livekit::proto::RtcStats_LocalCandidate* local_candidate);
  ::livekit::proto::RtcStats_LocalCandidate* unsafe_arena_release_local_candidate();

  // .livekit.proto.RtcStats.RemoteCandidate remote_candidate = 15;
  bool has_remote_candidate() const;
  private:
  bool _internal_has_remote_candidate() const;
  public:
  void clear_remote_candidate();
  const ::livekit::proto::RtcStats_RemoteCandidate& remote_candidate() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_RemoteCandidate* release_remote_candidate();
  ::livekit::proto::RtcStats_RemoteCandidate* mutable_remote_candidate();
  void set_allocated_remote_candidate(::livekit::proto::RtcStats_RemoteCandidate* remote_candidate);
  private:
  const ::livekit::proto::RtcStats_RemoteCandidate& _internal_remote_candidate() const;
  ::livekit::proto::RtcStats_RemoteCandidate* _internal_mutable_remote_candidate();
  public:
  void unsafe_arena_set_allocated_remote_candidate(
      ::livekit::proto::RtcStats_RemoteCandidate* remote_candidate);
  ::livekit::proto::RtcStats_RemoteCandidate* unsafe_arena_release_remote_candidate();

  // .livekit.proto.RtcStats.Certificate certificate = 16;
  bool has_certificate() const;
  private:
  bool _internal_has_certificate() const;
  public:
  void clear_certificate();
  const ::livekit::proto::RtcStats_Certificate& certificate() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_Certificate* release_certificate();
  ::livekit::proto::RtcStats_Certificate* mutable_certificate();
  void set_allocated_certificate(::livekit::proto::RtcStats_Certificate* certificate);
  private:
  const ::livekit::proto::RtcStats_Certificate& _internal_certificate() const;
  ::livekit::proto::RtcStats_Certificate* _internal_mutable_certificate();
  public:
  void unsafe_arena_set_allocated_certificate(
      ::livekit::proto::RtcStats_Certificate* certificate);
  ::livekit::proto::RtcStats_Certificate* unsafe_arena_release_certificate();

  // .livekit.proto.RtcStats.Stream stream = 17;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::livekit::proto::RtcStats_Stream& stream() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_Stream* release_stream();
  ::livekit::proto::RtcStats_Stream* mutable_stream();
  void set_allocated_stream(::livekit::proto::RtcStats_Stream* stream);
  private:
  const ::livekit::proto::RtcStats_Stream& _internal_stream() const;
  ::livekit::proto::RtcStats_Stream* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::livekit::proto::RtcStats_Stream* stream);
  ::livekit::proto::RtcStats_Stream* unsafe_arena_release_stream();

  // .livekit.proto.RtcStats.Track track = 18;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  const ::livekit::proto::RtcStats_Track& track() const;
  PROTOBUF_NODISCARD ::livekit::proto::RtcStats_Track* release_track();
  ::livekit::proto::RtcStats_Track* mutable_track();
  void set_allocated_track(::livekit::proto::RtcStats_Track* track);
  private:
  const ::livekit::proto::RtcStats_Track& _internal_track() const;
  ::livekit::proto::RtcStats_Track* _internal_mutable_track();
  public:
  void unsafe_arena_set_allocated_track(
      ::livekit::proto::RtcStats_Track* track);
  ::livekit::proto::RtcStats_Track* unsafe_arena_release_track();

  void clear_stats();
  StatsCase stats_case() const;
  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStats)
 private:
  class _Internal;
  void set_has_codec();
  void set_has_inbound_rtp();
  void set_has_outbound_rtp();
  void set_has_remote_inbound_rtp();
  void set_has_remote_outbound_rtp();
  void set_has_media_source();
  void set_has_media_playout();
  void set_has_peer_connection();
  void set_has_data_channel();
  void set_has_transport();
  void set_has_candidate_pair();
  void set_has_local_candidate();
  void set_has_remote_candidate();
  void set_has_certificate();
  void set_has_stream();
  void set_has_track();

  inline bool has_stats() const;
  inline void clear_has_stats();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union StatsUnion {
      constexpr StatsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::livekit::proto::RtcStats_Codec* codec_;
      ::livekit::proto::RtcStats_InboundRtp* inbound_rtp_;
      ::livekit::proto::RtcStats_OutboundRtp* outbound_rtp_;
      ::livekit::proto::RtcStats_RemoteInboundRtp* remote_inbound_rtp_;
      ::livekit::proto::RtcStats_RemoteOutboundRtp* remote_outbound_rtp_;
      ::livekit::proto::RtcStats_MediaSource* media_source_;
      ::livekit::proto::RtcStats_MediaPlayout* media_playout_;
      ::livekit::proto::RtcStats_PeerConnection* peer_connection_;
      ::livekit::proto::RtcStats_DataChannel* data_channel_;
      ::livekit::proto::RtcStats_Transport* transport_;
      ::livekit::proto::RtcStats_CandidatePair* candidate_pair_;
      ::livekit::proto::RtcStats_LocalCandidate* local_candidate_;
      ::livekit::proto::RtcStats_RemoteCandidate* remote_candidate_;
      ::livekit::proto::RtcStats_Certificate* certificate_;
      ::livekit::proto::RtcStats_Stream* stream_;
      ::livekit::proto::RtcStats_Track* track_;
    } stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtcStatsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtcStatsData) */ {
 public:
  inline RtcStatsData() : RtcStatsData(nullptr) {}
  ~RtcStatsData() override;
  explicit PROTOBUF_CONSTEXPR RtcStatsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStatsData(const RtcStatsData& from);
  RtcStatsData(RtcStatsData&& from) noexcept
    : RtcStatsData() {
    *this = ::std::move(from);
  }

  inline RtcStatsData& operator=(const RtcStatsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStatsData& operator=(RtcStatsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStatsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStatsData* internal_default_instance() {
    return reinterpret_cast<const RtcStatsData*>(
               &_RtcStatsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RtcStatsData& a, RtcStatsData& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStatsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStatsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStatsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStatsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStatsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStatsData& from) {
    RtcStatsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStatsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtcStatsData";
  }
  protected:
  explicit RtcStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required int64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RtcStatsData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class CodecStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.CodecStats) */ {
 public:
  inline CodecStats() : CodecStats(nullptr) {}
  ~CodecStats() override;
  explicit PROTOBUF_CONSTEXPR CodecStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CodecStats(const CodecStats& from);
  CodecStats(CodecStats&& from) noexcept
    : CodecStats() {
    *this = ::std::move(from);
  }

  inline CodecStats& operator=(const CodecStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodecStats& operator=(CodecStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodecStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodecStats* internal_default_instance() {
    return reinterpret_cast<const CodecStats*>(
               &_CodecStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CodecStats& a, CodecStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CodecStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodecStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodecStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodecStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CodecStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CodecStats& from) {
    CodecStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodecStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.CodecStats";
  }
  protected:
  explicit CodecStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportIdFieldNumber = 2,
    kMimeTypeFieldNumber = 3,
    kSdpFmtpLineFieldNumber = 6,
    kPayloadTypeFieldNumber = 1,
    kClockRateFieldNumber = 4,
    kChannelsFieldNumber = 5,
  };
  // required string transport_id = 2;
  bool has_transport_id() const;
  private:
  bool _internal_has_transport_id() const;
  public:
  void clear_transport_id();
  const std::string& transport_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transport_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transport_id();
  PROTOBUF_NODISCARD std::string* release_transport_id();
  void set_allocated_transport_id(std::string* transport_id);
  private:
  const std::string& _internal_transport_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transport_id(const std::string& value);
  std::string* _internal_mutable_transport_id();
  public:

  // required string mime_type = 3;
  bool has_mime_type() const;
  private:
  bool _internal_has_mime_type() const;
  public:
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // required string sdp_fmtp_line = 6;
  bool has_sdp_fmtp_line() const;
  private:
  bool _internal_has_sdp_fmtp_line() const;
  public:
  void clear_sdp_fmtp_line();
  const std::string& sdp_fmtp_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdp_fmtp_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdp_fmtp_line();
  PROTOBUF_NODISCARD std::string* release_sdp_fmtp_line();
  void set_allocated_sdp_fmtp_line(std::string* sdp_fmtp_line);
  private:
  const std::string& _internal_sdp_fmtp_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdp_fmtp_line(const std::string& value);
  std::string* _internal_mutable_sdp_fmtp_line();
  public:

  // required uint32 payload_type = 1;
  bool has_payload_type() const;
  private:
  bool _internal_has_payload_type() const;
  public:
  void clear_payload_type();
  uint32_t payload_type() const;
  void set_payload_type(uint32_t value);
  private:
  uint32_t _internal_payload_type() const;
  void _internal_set_payload_type(uint32_t value);
  public:

  // required uint32 clock_rate = 4;
  bool has_clock_rate() const;
  private:
  bool _internal_has_clock_rate() const;
  public:
  void clear_clock_rate();
  uint32_t clock_rate() const;
  void set_clock_rate(uint32_t value);
  private:
  uint32_t _internal_clock_rate() const;
  void _internal_set_clock_rate(uint32_t value);
  public:

  // required uint32 channels = 5;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  uint32_t channels() const;
  void set_channels(uint32_t value);
  private:
  uint32_t _internal_channels() const;
  void _internal_set_channels(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.CodecStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transport_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdp_fmtp_line_;
    uint32_t payload_type_;
    uint32_t clock_rate_;
    uint32_t channels_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RtpStreamStats) */ {
 public:
  inline RtpStreamStats() : RtpStreamStats(nullptr) {}
  ~RtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR RtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtpStreamStats(const RtpStreamStats& from);
  RtpStreamStats(RtpStreamStats&& from) noexcept
    : RtpStreamStats() {
    *this = ::std::move(from);
  }

  inline RtpStreamStats& operator=(const RtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpStreamStats& operator=(RtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const RtpStreamStats*>(
               &_RtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RtpStreamStats& a, RtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtpStreamStats& from) {
    RtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RtpStreamStats";
  }
  protected:
  explicit RtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKindFieldNumber = 2,
    kTransportIdFieldNumber = 3,
    kCodecIdFieldNumber = 4,
    kSsrcFieldNumber = 1,
  };
  // required string kind = 2;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // required string transport_id = 3;
  bool has_transport_id() const;
  private:
  bool _internal_has_transport_id() const;
  public:
  void clear_transport_id();
  const std::string& transport_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transport_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transport_id();
  PROTOBUF_NODISCARD std::string* release_transport_id();
  void set_allocated_transport_id(std::string* transport_id);
  private:
  const std::string& _internal_transport_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transport_id(const std::string& value);
  std::string* _internal_mutable_transport_id();
  public:

  // required string codec_id = 4;
  bool has_codec_id() const;
  private:
  bool _internal_has_codec_id() const;
  public:
  void clear_codec_id();
  const std::string& codec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec_id();
  PROTOBUF_NODISCARD std::string* release_codec_id();
  void set_allocated_codec_id(std::string* codec_id);
  private:
  const std::string& _internal_codec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec_id(const std::string& value);
  std::string* _internal_mutable_codec_id();
  public:

  // required uint32 ssrc = 1;
  bool has_ssrc() const;
  private:
  bool _internal_has_ssrc() const;
  public:
  void clear_ssrc();
  uint32_t ssrc() const;
  void set_ssrc(uint32_t value);
  private:
  uint32_t _internal_ssrc() const;
  void _internal_set_ssrc(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transport_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_id_;
    uint32_t ssrc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class ReceivedRtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.ReceivedRtpStreamStats) */ {
 public:
  inline ReceivedRtpStreamStats() : ReceivedRtpStreamStats(nullptr) {}
  ~ReceivedRtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR ReceivedRtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceivedRtpStreamStats(const ReceivedRtpStreamStats& from);
  ReceivedRtpStreamStats(ReceivedRtpStreamStats&& from) noexcept
    : ReceivedRtpStreamStats() {
    *this = ::std::move(from);
  }

  inline ReceivedRtpStreamStats& operator=(const ReceivedRtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedRtpStreamStats& operator=(ReceivedRtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceivedRtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceivedRtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const ReceivedRtpStreamStats*>(
               &_ReceivedRtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReceivedRtpStreamStats& a, ReceivedRtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedRtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceivedRtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceivedRtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceivedRtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceivedRtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceivedRtpStreamStats& from) {
    ReceivedRtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedRtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.ReceivedRtpStreamStats";
  }
  protected:
  explicit ReceivedRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketsReceivedFieldNumber = 1,
    kPacketsLostFieldNumber = 2,
    kJitterFieldNumber = 3,
  };
  // required uint64 packets_received = 1;
  bool has_packets_received() const;
  private:
  bool _internal_has_packets_received() const;
  public:
  void clear_packets_received();
  uint64_t packets_received() const;
  void set_packets_received(uint64_t value);
  private:
  uint64_t _internal_packets_received() const;
  void _internal_set_packets_received(uint64_t value);
  public:

  // required int64 packets_lost = 2;
  bool has_packets_lost() const;
  private:
  bool _internal_has_packets_lost() const;
  public:
  void clear_packets_lost();
  int64_t packets_lost() const;
  void set_packets_lost(int64_t value);
  private:
  int64_t _internal_packets_lost() const;
  void _internal_set_packets_lost(int64_t value);
  public:

  // required double jitter = 3;
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  double jitter() const;
  void set_jitter(double value);
  private:
  double _internal_jitter() const;
  void _internal_set_jitter(double value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.ReceivedRtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t packets_received_;
    int64_t packets_lost_;
    double jitter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class InboundRtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.InboundRtpStreamStats) */ {
 public:
  inline InboundRtpStreamStats() : InboundRtpStreamStats(nullptr) {}
  ~InboundRtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR InboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InboundRtpStreamStats(const InboundRtpStreamStats& from);
  InboundRtpStreamStats(InboundRtpStreamStats&& from) noexcept
    : InboundRtpStreamStats() {
    *this = ::std::move(from);
  }

  inline InboundRtpStreamStats& operator=(const InboundRtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline InboundRtpStreamStats& operator=(InboundRtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InboundRtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const InboundRtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const InboundRtpStreamStats*>(
               &_InboundRtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(InboundRtpStreamStats& a, InboundRtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(InboundRtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InboundRtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InboundRtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InboundRtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InboundRtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InboundRtpStreamStats& from) {
    InboundRtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InboundRtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.InboundRtpStreamStats";
  }
  protected:
  explicit InboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackIdentifierFieldNumber = 1,
    kMidFieldNumber = 2,
    kRemoteIdFieldNumber = 3,
    kDecoderImplementationFieldNumber = 45,
    kPlayoutIdFieldNumber = 46,
    kFramesDecodedFieldNumber = 4,
    kKeyFramesDecodedFieldNumber = 5,
    kFramesRenderedFieldNumber = 6,
    kFramesDroppedFieldNumber = 7,
    kFrameWidthFieldNumber = 8,
    kFrameHeightFieldNumber = 9,
    kFramesPerSecondFieldNumber = 10,
    kQpSumFieldNumber = 11,
    kTotalDecodeTimeFieldNumber = 12,
    kTotalInterFrameDelayFieldNumber = 13,
    kTotalSquaredInterFrameDelayFieldNumber = 14,
    kTotalPauseDurationFieldNumber = 16,
    kPauseCountFieldNumber = 15,
    kFreezeCountFieldNumber = 17,
    kTotalFreezeDurationFieldNumber = 18,
    kLastPacketReceivedTimestampFieldNumber = 19,
    kHeaderBytesReceivedFieldNumber = 20,
    kPacketsDiscardedFieldNumber = 21,
    kFecBytesReceivedFieldNumber = 22,
    kFecPacketsReceivedFieldNumber = 23,
    kFecPacketsDiscardedFieldNumber = 24,
    kBytesReceivedFieldNumber = 25,
    kNackCountFieldNumber = 26,
    kFirCountFieldNumber = 27,
    kTotalProcessingDelayFieldNumber = 29,
    kEstimatedPlayoutTimestampFieldNumber = 30,
    kJitterBufferDelayFieldNumber = 31,
    kJitterBufferTargetDelayFieldNumber = 32,
    kJitterBufferEmittedCountFieldNumber = 33,
    kJitterBufferMinimumDelayFieldNumber = 34,
    kTotalSamplesReceivedFieldNumber = 35,
    kConcealedSamplesFieldNumber = 36,
    kSilentConcealedSamplesFieldNumber = 37,
    kPliCountFieldNumber = 28,
    kPowerEfficientDecoderFieldNumber = 47,
    kConcealmentEventsFieldNumber = 38,
    kInsertedSamplesForDecelerationFieldNumber = 39,
    kRemovedSamplesForAccelerationFieldNumber = 40,
    kAudioLevelFieldNumber = 41,
    kTotalAudioEnergyFieldNumber = 42,
    kTotalSamplesDurationFieldNumber = 43,
    kFramesReceivedFieldNumber = 44,
    kFramesAssembledFromMultiplePacketsFieldNumber = 48,
    kTotalAssemblyTimeFieldNumber = 49,
    kRetransmittedPacketsReceivedFieldNumber = 50,
    kRetransmittedBytesReceivedFieldNumber = 51,
    kRtxSsrcFieldNumber = 52,
    kFecSsrcFieldNumber = 53,
  };
  // required string track_identifier = 1;
  bool has_track_identifier() const;
  private:
  bool _internal_has_track_identifier() const;
  public:
  void clear_track_identifier();
  const std::string& track_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_track_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_track_identifier();
  PROTOBUF_NODISCARD std::string* release_track_identifier();
  void set_allocated_track_identifier(std::string* track_identifier);
  private:
  const std::string& _internal_track_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_track_identifier(const std::string& value);
  std::string* _internal_mutable_track_identifier();
  public:

  // required string mid = 2;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_NODISCARD std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // required string remote_id = 3;
  bool has_remote_id() const;
  private:
  bool _internal_has_remote_id() const;
  public:
  void clear_remote_id();
  const std::string& remote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_id();
  PROTOBUF_NODISCARD std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // required string decoder_implementation = 45;
  bool has_decoder_implementation() const;
  private:
  bool _internal_has_decoder_implementation() const;
  public:
  void clear_decoder_implementation();
  const std::string& decoder_implementation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decoder_implementation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decoder_implementation();
  PROTOBUF_NODISCARD std::string* release_decoder_implementation();
  void set_allocated_decoder_implementation(std::string* decoder_implementation);
  private:
  const std::string& _internal_decoder_implementation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decoder_implementation(const std::string& value);
  std::string* _internal_mutable_decoder_implementation();
  public:

  // required string playout_id = 46;
  bool has_playout_id() const;
  private:
  bool _internal_has_playout_id() const;
  public:
  void clear_playout_id();
  const std::string& playout_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playout_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playout_id();
  PROTOBUF_NODISCARD std::string* release_playout_id();
  void set_allocated_playout_id(std::string* playout_id);
  private:
  const std::string& _internal_playout_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playout_id(const std::string& value);
  std::string* _internal_mutable_playout_id();
  public:

  // required uint32 frames_decoded = 4;
  bool has_frames_decoded() const;
  private:
  bool _internal_has_frames_decoded() const;
  public:
  void clear_frames_decoded();
  uint32_t frames_decoded() const;
  void set_frames_decoded(uint32_t value);
  private:
  uint32_t _internal_frames_decoded() const;
  void _internal_set_frames_decoded(uint32_t value);
  public:

  // required uint32 key_frames_decoded = 5;
  bool has_key_frames_decoded() const;
  private:
  bool _internal_has_key_frames_decoded() const;
  public:
  void clear_key_frames_decoded();
  uint32_t key_frames_decoded() const;
  void set_key_frames_decoded(uint32_t value);
  private:
  uint32_t _internal_key_frames_decoded() const;
  void _internal_set_key_frames_decoded(uint32_t value);
  public:

  // required uint32 frames_rendered = 6;
  bool has_frames_rendered() const;
  private:
  bool _internal_has_frames_rendered() const;
  public:
  void clear_frames_rendered();
  uint32_t frames_rendered() const;
  void set_frames_rendered(uint32_t value);
  private:
  uint32_t _internal_frames_rendered() const;
  void _internal_set_frames_rendered(uint32_t value);
  public:

  // required uint32 frames_dropped = 7;
  bool has_frames_dropped() const;
  private:
  bool _internal_has_frames_dropped() const;
  public:
  void clear_frames_dropped();
  uint32_t frames_dropped() const;
  void set_frames_dropped(uint32_t value);
  private:
  uint32_t _internal_frames_dropped() const;
  void _internal_set_frames_dropped(uint32_t value);
  public:

  // required uint32 frame_width = 8;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  uint32_t frame_width() const;
  void set_frame_width(uint32_t value);
  private:
  uint32_t _internal_frame_width() const;
  void _internal_set_frame_width(uint32_t value);
  public:

  // required uint32 frame_height = 9;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  uint32_t frame_height() const;
  void set_frame_height(uint32_t value);
  private:
  uint32_t _internal_frame_height() const;
  void _internal_set_frame_height(uint32_t value);
  public:

  // required double frames_per_second = 10;
  bool has_frames_per_second() const;
  private:
  bool _internal_has_frames_per_second() const;
  public:
  void clear_frames_per_second();
  double frames_per_second() const;
  void set_frames_per_second(double value);
  private:
  double _internal_frames_per_second() const;
  void _internal_set_frames_per_second(double value);
  public:

  // required uint64 qp_sum = 11;
  bool has_qp_sum() const;
  private:
  bool _internal_has_qp_sum() const;
  public:
  void clear_qp_sum();
  uint64_t qp_sum() const;
  void set_qp_sum(uint64_t value);
  private:
  uint64_t _internal_qp_sum() const;
  void _internal_set_qp_sum(uint64_t value);
  public:

  // required double total_decode_time = 12;
  bool has_total_decode_time() const;
  private:
  bool _internal_has_total_decode_time() const;
  public:
  void clear_total_decode_time();
  double total_decode_time() const;
  void set_total_decode_time(double value);
  private:
  double _internal_total_decode_time() const;
  void _internal_set_total_decode_time(double value);
  public:

  // required double total_inter_frame_delay = 13;
  bool has_total_inter_frame_delay() const;
  private:
  bool _internal_has_total_inter_frame_delay() const;
  public:
  void clear_total_inter_frame_delay();
  double total_inter_frame_delay() const;
  void set_total_inter_frame_delay(double value);
  private:
  double _internal_total_inter_frame_delay() const;
  void _internal_set_total_inter_frame_delay(double value);
  public:

  // required double total_squared_inter_frame_delay = 14;
  bool has_total_squared_inter_frame_delay() const;
  private:
  bool _internal_has_total_squared_inter_frame_delay() const;
  public:
  void clear_total_squared_inter_frame_delay();
  double total_squared_inter_frame_delay() const;
  void set_total_squared_inter_frame_delay(double value);
  private:
  double _internal_total_squared_inter_frame_delay() const;
  void _internal_set_total_squared_inter_frame_delay(double value);
  public:

  // required double total_pause_duration = 16;
  bool has_total_pause_duration() const;
  private:
  bool _internal_has_total_pause_duration() const;
  public:
  void clear_total_pause_duration();
  double total_pause_duration() const;
  void set_total_pause_duration(double value);
  private:
  double _internal_total_pause_duration() const;
  void _internal_set_total_pause_duration(double value);
  public:

  // required uint32 pause_count = 15;
  bool has_pause_count() const;
  private:
  bool _internal_has_pause_count() const;
  public:
  void clear_pause_count();
  uint32_t pause_count() const;
  void set_pause_count(uint32_t value);
  private:
  uint32_t _internal_pause_count() const;
  void _internal_set_pause_count(uint32_t value);
  public:

  // required uint32 freeze_count = 17;
  bool has_freeze_count() const;
  private:
  bool _internal_has_freeze_count() const;
  public:
  void clear_freeze_count();
  uint32_t freeze_count() const;
  void set_freeze_count(uint32_t value);
  private:
  uint32_t _internal_freeze_count() const;
  void _internal_set_freeze_count(uint32_t value);
  public:

  // required double total_freeze_duration = 18;
  bool has_total_freeze_duration() const;
  private:
  bool _internal_has_total_freeze_duration() const;
  public:
  void clear_total_freeze_duration();
  double total_freeze_duration() const;
  void set_total_freeze_duration(double value);
  private:
  double _internal_total_freeze_duration() const;
  void _internal_set_total_freeze_duration(double value);
  public:

  // required double last_packet_received_timestamp = 19;
  bool has_last_packet_received_timestamp() const;
  private:
  bool _internal_has_last_packet_received_timestamp() const;
  public:
  void clear_last_packet_received_timestamp();
  double last_packet_received_timestamp() const;
  void set_last_packet_received_timestamp(double value);
  private:
  double _internal_last_packet_received_timestamp() const;
  void _internal_set_last_packet_received_timestamp(double value);
  public:

  // required uint64 header_bytes_received = 20;
  bool has_header_bytes_received() const;
  private:
  bool _internal_has_header_bytes_received() const;
  public:
  void clear_header_bytes_received();
  uint64_t header_bytes_received() const;
  void set_header_bytes_received(uint64_t value);
  private:
  uint64_t _internal_header_bytes_received() const;
  void _internal_set_header_bytes_received(uint64_t value);
  public:

  // required uint64 packets_discarded = 21;
  bool has_packets_discarded() const;
  private:
  bool _internal_has_packets_discarded() const;
  public:
  void clear_packets_discarded();
  uint64_t packets_discarded() const;
  void set_packets_discarded(uint64_t value);
  private:
  uint64_t _internal_packets_discarded() const;
  void _internal_set_packets_discarded(uint64_t value);
  public:

  // required uint64 fec_bytes_received = 22;
  bool has_fec_bytes_received() const;
  private:
  bool _internal_has_fec_bytes_received() const;
  public:
  void clear_fec_bytes_received();
  uint64_t fec_bytes_received() const;
  void set_fec_bytes_received(uint64_t value);
  private:
  uint64_t _internal_fec_bytes_received() const;
  void _internal_set_fec_bytes_received(uint64_t value);
  public:

  // required uint64 fec_packets_received = 23;
  bool has_fec_packets_received() const;
  private:
  bool _internal_has_fec_packets_received() const;
  public:
  void clear_fec_packets_received();
  uint64_t fec_packets_received() const;
  void set_fec_packets_received(uint64_t value);
  private:
  uint64_t _internal_fec_packets_received() const;
  void _internal_set_fec_packets_received(uint64_t value);
  public:

  // required uint64 fec_packets_discarded = 24;
  bool has_fec_packets_discarded() const;
  private:
  bool _internal_has_fec_packets_discarded() const;
  public:
  void clear_fec_packets_discarded();
  uint64_t fec_packets_discarded() const;
  void set_fec_packets_discarded(uint64_t value);
  private:
  uint64_t _internal_fec_packets_discarded() const;
  void _internal_set_fec_packets_discarded(uint64_t value);
  public:

  // required uint64 bytes_received = 25;
  bool has_bytes_received() const;
  private:
  bool _internal_has_bytes_received() const;
  public:
  void clear_bytes_received();
  uint64_t bytes_received() const;
  void set_bytes_received(uint64_t value);
  private:
  uint64_t _internal_bytes_received() const;
  void _internal_set_bytes_received(uint64_t value);
  public:

  // required uint32 nack_count = 26;
  bool has_nack_count() const;
  private:
  bool _internal_has_nack_count() const;
  public:
  void clear_nack_count();
  uint32_t nack_count() const;
  void set_nack_count(uint32_t value);
  private:
  uint32_t _internal_nack_count() const;
  void _internal_set_nack_count(uint32_t value);
  public:

  // required uint32 fir_count = 27;
  bool has_fir_count() const;
  private:
  bool _internal_has_fir_count() const;
  public:
  void clear_fir_count();
  uint32_t fir_count() const;
  void set_fir_count(uint32_t value);
  private:
  uint32_t _internal_fir_count() const;
  void _internal_set_fir_count(uint32_t value);
  public:

  // required double total_processing_delay = 29;
  bool has_total_processing_delay() const;
  private:
  bool _internal_has_total_processing_delay() const;
  public:
  void clear_total_processing_delay();
  double total_processing_delay() const;
  void set_total_processing_delay(double value);
  private:
  double _internal_total_processing_delay() const;
  void _internal_set_total_processing_delay(double value);
  public:

  // required double estimated_playout_timestamp = 30;
  bool has_estimated_playout_timestamp() const;
  private:
  bool _internal_has_estimated_playout_timestamp() const;
  public:
  void clear_estimated_playout_timestamp();
  double estimated_playout_timestamp() const;
  void set_estimated_playout_timestamp(double value);
  private:
  double _internal_estimated_playout_timestamp() const;
  void _internal_set_estimated_playout_timestamp(double value);
  public:

  // required double jitter_buffer_delay = 31;
  bool has_jitter_buffer_delay() const;
  private:
  bool _internal_has_jitter_buffer_delay() const;
  public:
  void clear_jitter_buffer_delay();
  double jitter_buffer_delay() const;
  void set_jitter_buffer_delay(double value);
  private:
  double _internal_jitter_buffer_delay() const;
  void _internal_set_jitter_buffer_delay(double value);
  public:

  // required double jitter_buffer_target_delay = 32;
  bool has_jitter_buffer_target_delay() const;
  private:
  bool _internal_has_jitter_buffer_target_delay() const;
  public:
  void clear_jitter_buffer_target_delay();
  double jitter_buffer_target_delay() const;
  void set_jitter_buffer_target_delay(double value);
  private:
  double _internal_jitter_buffer_target_delay() const;
  void _internal_set_jitter_buffer_target_delay(double value);
  public:

  // required uint64 jitter_buffer_emitted_count = 33;
  bool has_jitter_buffer_emitted_count() const;
  private:
  bool _internal_has_jitter_buffer_emitted_count() const;
  public:
  void clear_jitter_buffer_emitted_count();
  uint64_t jitter_buffer_emitted_count() const;
  void set_jitter_buffer_emitted_count(uint64_t value);
  private:
  uint64_t _internal_jitter_buffer_emitted_count() const;
  void _internal_set_jitter_buffer_emitted_count(uint64_t value);
  public:

  // required double jitter_buffer_minimum_delay = 34;
  bool has_jitter_buffer_minimum_delay() const;
  private:
  bool _internal_has_jitter_buffer_minimum_delay() const;
  public:
  void clear_jitter_buffer_minimum_delay();
  double jitter_buffer_minimum_delay() const;
  void set_jitter_buffer_minimum_delay(double value);
  private:
  double _internal_jitter_buffer_minimum_delay() const;
  void _internal_set_jitter_buffer_minimum_delay(double value);
  public:

  // required uint64 total_samples_received = 35;
  bool has_total_samples_received() const;
  private:
  bool _internal_has_total_samples_received() const;
  public:
  void clear_total_samples_received();
  uint64_t total_samples_received() const;
  void set_total_samples_received(uint64_t value);
  private:
  uint64_t _internal_total_samples_received() const;
  void _internal_set_total_samples_received(uint64_t value);
  public:

  // required uint64 concealed_samples = 36;
  bool has_concealed_samples() const;
  private:
  bool _internal_has_concealed_samples() const;
  public:
  void clear_concealed_samples();
  uint64_t concealed_samples() const;
  void set_concealed_samples(uint64_t value);
  private:
  uint64_t _internal_concealed_samples() const;
  void _internal_set_concealed_samples(uint64_t value);
  public:

  // required uint64 silent_concealed_samples = 37;
  bool has_silent_concealed_samples() const;
  private:
  bool _internal_has_silent_concealed_samples() const;
  public:
  void clear_silent_concealed_samples();
  uint64_t silent_concealed_samples() const;
  void set_silent_concealed_samples(uint64_t value);
  private:
  uint64_t _internal_silent_concealed_samples() const;
  void _internal_set_silent_concealed_samples(uint64_t value);
  public:

  // required uint32 pli_count = 28;
  bool has_pli_count() const;
  private:
  bool _internal_has_pli_count() const;
  public:
  void clear_pli_count();
  uint32_t pli_count() const;
  void set_pli_count(uint32_t value);
  private:
  uint32_t _internal_pli_count() const;
  void _internal_set_pli_count(uint32_t value);
  public:

  // required bool power_efficient_decoder = 47;
  bool has_power_efficient_decoder() const;
  private:
  bool _internal_has_power_efficient_decoder() const;
  public:
  void clear_power_efficient_decoder();
  bool power_efficient_decoder() const;
  void set_power_efficient_decoder(bool value);
  private:
  bool _internal_power_efficient_decoder() const;
  void _internal_set_power_efficient_decoder(bool value);
  public:

  // required uint64 concealment_events = 38;
  bool has_concealment_events() const;
  private:
  bool _internal_has_concealment_events() const;
  public:
  void clear_concealment_events();
  uint64_t concealment_events() const;
  void set_concealment_events(uint64_t value);
  private:
  uint64_t _internal_concealment_events() const;
  void _internal_set_concealment_events(uint64_t value);
  public:

  // required uint64 inserted_samples_for_deceleration = 39;
  bool has_inserted_samples_for_deceleration() const;
  private:
  bool _internal_has_inserted_samples_for_deceleration() const;
  public:
  void clear_inserted_samples_for_deceleration();
  uint64_t inserted_samples_for_deceleration() const;
  void set_inserted_samples_for_deceleration(uint64_t value);
  private:
  uint64_t _internal_inserted_samples_for_deceleration() const;
  void _internal_set_inserted_samples_for_deceleration(uint64_t value);
  public:

  // required uint64 removed_samples_for_acceleration = 40;
  bool has_removed_samples_for_acceleration() const;
  private:
  bool _internal_has_removed_samples_for_acceleration() const;
  public:
  void clear_removed_samples_for_acceleration();
  uint64_t removed_samples_for_acceleration() const;
  void set_removed_samples_for_acceleration(uint64_t value);
  private:
  uint64_t _internal_removed_samples_for_acceleration() const;
  void _internal_set_removed_samples_for_acceleration(uint64_t value);
  public:

  // required double audio_level = 41;
  bool has_audio_level() const;
  private:
  bool _internal_has_audio_level() const;
  public:
  void clear_audio_level();
  double audio_level() const;
  void set_audio_level(double value);
  private:
  double _internal_audio_level() const;
  void _internal_set_audio_level(double value);
  public:

  // required double total_audio_energy = 42;
  bool has_total_audio_energy() const;
  private:
  bool _internal_has_total_audio_energy() const;
  public:
  void clear_total_audio_energy();
  double total_audio_energy() const;
  void set_total_audio_energy(double value);
  private:
  double _internal_total_audio_energy() const;
  void _internal_set_total_audio_energy(double value);
  public:

  // required double total_samples_duration = 43;
  bool has_total_samples_duration() const;
  private:
  bool _internal_has_total_samples_duration() const;
  public:
  void clear_total_samples_duration();
  double total_samples_duration() const;
  void set_total_samples_duration(double value);
  private:
  double _internal_total_samples_duration() const;
  void _internal_set_total_samples_duration(double value);
  public:

  // required uint64 frames_received = 44;
  bool has_frames_received() const;
  private:
  bool _internal_has_frames_received() const;
  public:
  void clear_frames_received();
  uint64_t frames_received() const;
  void set_frames_received(uint64_t value);
  private:
  uint64_t _internal_frames_received() const;
  void _internal_set_frames_received(uint64_t value);
  public:

  // required uint64 frames_assembled_from_multiple_packets = 48;
  bool has_frames_assembled_from_multiple_packets() const;
  private:
  bool _internal_has_frames_assembled_from_multiple_packets() const;
  public:
  void clear_frames_assembled_from_multiple_packets();
  uint64_t frames_assembled_from_multiple_packets() const;
  void set_frames_assembled_from_multiple_packets(uint64_t value);
  private:
  uint64_t _internal_frames_assembled_from_multiple_packets() const;
  void _internal_set_frames_assembled_from_multiple_packets(uint64_t value);
  public:

  // required double total_assembly_time = 49;
  bool has_total_assembly_time() const;
  private:
  bool _internal_has_total_assembly_time() const;
  public:
  void clear_total_assembly_time();
  double total_assembly_time() const;
  void set_total_assembly_time(double value);
  private:
  double _internal_total_assembly_time() const;
  void _internal_set_total_assembly_time(double value);
  public:

  // required uint64 retransmitted_packets_received = 50;
  bool has_retransmitted_packets_received() const;
  private:
  bool _internal_has_retransmitted_packets_received() const;
  public:
  void clear_retransmitted_packets_received();
  uint64_t retransmitted_packets_received() const;
  void set_retransmitted_packets_received(uint64_t value);
  private:
  uint64_t _internal_retransmitted_packets_received() const;
  void _internal_set_retransmitted_packets_received(uint64_t value);
  public:

  // required uint64 retransmitted_bytes_received = 51;
  bool has_retransmitted_bytes_received() const;
  private:
  bool _internal_has_retransmitted_bytes_received() const;
  public:
  void clear_retransmitted_bytes_received();
  uint64_t retransmitted_bytes_received() const;
  void set_retransmitted_bytes_received(uint64_t value);
  private:
  uint64_t _internal_retransmitted_bytes_received() const;
  void _internal_set_retransmitted_bytes_received(uint64_t value);
  public:

  // required uint32 rtx_ssrc = 52;
  bool has_rtx_ssrc() const;
  private:
  bool _internal_has_rtx_ssrc() const;
  public:
  void clear_rtx_ssrc();
  uint32_t rtx_ssrc() const;
  void set_rtx_ssrc(uint32_t value);
  private:
  uint32_t _internal_rtx_ssrc() const;
  void _internal_set_rtx_ssrc(uint32_t value);
  public:

  // required uint32 fec_ssrc = 53;
  bool has_fec_ssrc() const;
  private:
  bool _internal_has_fec_ssrc() const;
  public:
  void clear_fec_ssrc();
  uint32_t fec_ssrc() const;
  void set_fec_ssrc(uint32_t value);
  private:
  uint32_t _internal_fec_ssrc() const;
  void _internal_set_fec_ssrc(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.InboundRtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoder_implementation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playout_id_;
    uint32_t frames_decoded_;
    uint32_t key_frames_decoded_;
    uint32_t frames_rendered_;
    uint32_t frames_dropped_;
    uint32_t frame_width_;
    uint32_t frame_height_;
    double frames_per_second_;
    uint64_t qp_sum_;
    double total_decode_time_;
    double total_inter_frame_delay_;
    double total_squared_inter_frame_delay_;
    double total_pause_duration_;
    uint32_t pause_count_;
    uint32_t freeze_count_;
    double total_freeze_duration_;
    double last_packet_received_timestamp_;
    uint64_t header_bytes_received_;
    uint64_t packets_discarded_;
    uint64_t fec_bytes_received_;
    uint64_t fec_packets_received_;
    uint64_t fec_packets_discarded_;
    uint64_t bytes_received_;
    uint32_t nack_count_;
    uint32_t fir_count_;
    double total_processing_delay_;
    double estimated_playout_timestamp_;
    double jitter_buffer_delay_;
    double jitter_buffer_target_delay_;
    uint64_t jitter_buffer_emitted_count_;
    double jitter_buffer_minimum_delay_;
    uint64_t total_samples_received_;
    uint64_t concealed_samples_;
    uint64_t silent_concealed_samples_;
    uint32_t pli_count_;
    bool power_efficient_decoder_;
    uint64_t concealment_events_;
    uint64_t inserted_samples_for_deceleration_;
    uint64_t removed_samples_for_acceleration_;
    double audio_level_;
    double total_audio_energy_;
    double total_samples_duration_;
    uint64_t frames_received_;
    uint64_t frames_assembled_from_multiple_packets_;
    double total_assembly_time_;
    uint64_t retransmitted_packets_received_;
    uint64_t retransmitted_bytes_received_;
    uint32_t rtx_ssrc_;
    uint32_t fec_ssrc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class SentRtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.SentRtpStreamStats) */ {
 public:
  inline SentRtpStreamStats() : SentRtpStreamStats(nullptr) {}
  ~SentRtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR SentRtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SentRtpStreamStats(const SentRtpStreamStats& from);
  SentRtpStreamStats(SentRtpStreamStats&& from) noexcept
    : SentRtpStreamStats() {
    *this = ::std::move(from);
  }

  inline SentRtpStreamStats& operator=(const SentRtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentRtpStreamStats& operator=(SentRtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SentRtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentRtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const SentRtpStreamStats*>(
               &_SentRtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SentRtpStreamStats& a, SentRtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(SentRtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentRtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SentRtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SentRtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SentRtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SentRtpStreamStats& from) {
    SentRtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentRtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.SentRtpStreamStats";
  }
  protected:
  explicit SentRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketsSentFieldNumber = 1,
    kBytesSentFieldNumber = 2,
  };
  // required uint64 packets_sent = 1;
  bool has_packets_sent() const;
  private:
  bool _internal_has_packets_sent() const;
  public:
  void clear_packets_sent();
  uint64_t packets_sent() const;
  void set_packets_sent(uint64_t value);
  private:
  uint64_t _internal_packets_sent() const;
  void _internal_set_packets_sent(uint64_t value);
  public:

  // required uint64 bytes_sent = 2;
  bool has_bytes_sent() const;
  private:
  bool _internal_has_bytes_sent() const;
  public:
  void clear_bytes_sent();
  uint64_t bytes_sent() const;
  void set_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_bytes_sent() const;
  void _internal_set_bytes_sent(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.SentRtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t packets_sent_;
    uint64_t bytes_sent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse& other);
  static const OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse*>(&_OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "livekit.proto.OutboundRtpStreamStats.QualityLimitationDurationsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_stats_2eproto;
};

// -------------------------------------------------------------------

class OutboundRtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.OutboundRtpStreamStats) */ {
 public:
  inline OutboundRtpStreamStats() : OutboundRtpStreamStats(nullptr) {}
  ~OutboundRtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR OutboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutboundRtpStreamStats(const OutboundRtpStreamStats& from);
  OutboundRtpStreamStats(OutboundRtpStreamStats&& from) noexcept
    : OutboundRtpStreamStats() {
    *this = ::std::move(from);
  }

  inline OutboundRtpStreamStats& operator=(const OutboundRtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutboundRtpStreamStats& operator=(OutboundRtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutboundRtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutboundRtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const OutboundRtpStreamStats*>(
               &_OutboundRtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OutboundRtpStreamStats& a, OutboundRtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(OutboundRtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutboundRtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutboundRtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutboundRtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutboundRtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutboundRtpStreamStats& from) {
    OutboundRtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutboundRtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.OutboundRtpStreamStats";
  }
  protected:
  explicit OutboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kQualityLimitationDurationsFieldNumber = 22,
    kMidFieldNumber = 1,
    kMediaSourceIdFieldNumber = 2,
    kRemoteIdFieldNumber = 3,
    kRidFieldNumber = 4,
    kEncoderImplementationFieldNumber = 27,
    kScalabilityModeFieldNumber = 30,
    kHeaderBytesSentFieldNumber = 5,
    kRetransmittedPacketsSentFieldNumber = 6,
    kRetransmittedBytesSentFieldNumber = 7,
    kTargetBitrateFieldNumber = 9,
    kRtxSsrcFieldNumber = 8,
    kFrameWidthFieldNumber = 11,
    kTotalEncodedBytesTargetFieldNumber = 10,
    kFramesPerSecondFieldNumber = 13,
    kFrameHeightFieldNumber = 12,
    kFramesSentFieldNumber = 14,
    kHugeFramesSentFieldNumber = 15,
    kFramesEncodedFieldNumber = 16,
    kQpSumFieldNumber = 18,
    kTotalEncodeTimeFieldNumber = 19,
    kKeyFramesEncodedFieldNumber = 17,
    kQualityLimitationReasonFieldNumber = 21,
    kTotalPacketSendDelayFieldNumber = 20,
    kQualityLimitationResolutionChangesFieldNumber = 23,
    kNackCountFieldNumber = 24,
    kFirCountFieldNumber = 25,
    kPliCountFieldNumber = 26,
    kPowerEfficientEncoderFieldNumber = 28,
    kActiveFieldNumber = 29,
  };
  // map<string, double> quality_limitation_durations = 22;
  int quality_limitation_durations_size() const;
  private:
  int _internal_quality_limitation_durations_size() const;
  public:
  void clear_quality_limitation_durations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_quality_limitation_durations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_quality_limitation_durations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      quality_limitation_durations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_quality_limitation_durations();

  // required string mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_NODISCARD std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // required string media_source_id = 2;
  bool has_media_source_id() const;
  private:
  bool _internal_has_media_source_id() const;
  public:
  void clear_media_source_id();
  const std::string& media_source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_source_id();
  PROTOBUF_NODISCARD std::string* release_media_source_id();
  void set_allocated_media_source_id(std::string* media_source_id);
  private:
  const std::string& _internal_media_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_source_id(const std::string& value);
  std::string* _internal_mutable_media_source_id();
  public:

  // required string remote_id = 3;
  bool has_remote_id() const;
  private:
  bool _internal_has_remote_id() const;
  public:
  void clear_remote_id();
  const std::string& remote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_id();
  PROTOBUF_NODISCARD std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // required string rid = 4;
  bool has_rid() const;
  private:
  bool _internal_has_rid() const;
  public:
  void clear_rid();
  const std::string& rid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rid();
  PROTOBUF_NODISCARD std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // required string encoder_implementation = 27;
  bool has_encoder_implementation() const;
  private:
  bool _internal_has_encoder_implementation() const;
  public:
  void clear_encoder_implementation();
  const std::string& encoder_implementation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoder_implementation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoder_implementation();
  PROTOBUF_NODISCARD std::string* release_encoder_implementation();
  void set_allocated_encoder_implementation(std::string* encoder_implementation);
  private:
  const std::string& _internal_encoder_implementation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoder_implementation(const std::string& value);
  std::string* _internal_mutable_encoder_implementation();
  public:

  // required string scalability_mode = 30;
  bool has_scalability_mode() const;
  private:
  bool _internal_has_scalability_mode() const;
  public:
  void clear_scalability_mode();
  const std::string& scalability_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scalability_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scalability_mode();
  PROTOBUF_NODISCARD std::string* release_scalability_mode();
  void set_allocated_scalability_mode(std::string* scalability_mode);
  private:
  const std::string& _internal_scalability_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scalability_mode(const std::string& value);
  std::string* _internal_mutable_scalability_mode();
  public:

  // required uint64 header_bytes_sent = 5;
  bool has_header_bytes_sent() const;
  private:
  bool _internal_has_header_bytes_sent() const;
  public:
  void clear_header_bytes_sent();
  uint64_t header_bytes_sent() const;
  void set_header_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_header_bytes_sent() const;
  void _internal_set_header_bytes_sent(uint64_t value);
  public:

  // required uint64 retransmitted_packets_sent = 6;
  bool has_retransmitted_packets_sent() const;
  private:
  bool _internal_has_retransmitted_packets_sent() const;
  public:
  void clear_retransmitted_packets_sent();
  uint64_t retransmitted_packets_sent() const;
  void set_retransmitted_packets_sent(uint64_t value);
  private:
  uint64_t _internal_retransmitted_packets_sent() const;
  void _internal_set_retransmitted_packets_sent(uint64_t value);
  public:

  // required uint64 retransmitted_bytes_sent = 7;
  bool has_retransmitted_bytes_sent() const;
  private:
  bool _internal_has_retransmitted_bytes_sent() const;
  public:
  void clear_retransmitted_bytes_sent();
  uint64_t retransmitted_bytes_sent() const;
  void set_retransmitted_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_retransmitted_bytes_sent() const;
  void _internal_set_retransmitted_bytes_sent(uint64_t value);
  public:

  // required double target_bitrate = 9;
  bool has_target_bitrate() const;
  private:
  bool _internal_has_target_bitrate() const;
  public:
  void clear_target_bitrate();
  double target_bitrate() const;
  void set_target_bitrate(double value);
  private:
  double _internal_target_bitrate() const;
  void _internal_set_target_bitrate(double value);
  public:

  // required uint32 rtx_ssrc = 8;
  bool has_rtx_ssrc() const;
  private:
  bool _internal_has_rtx_ssrc() const;
  public:
  void clear_rtx_ssrc();
  uint32_t rtx_ssrc() const;
  void set_rtx_ssrc(uint32_t value);
  private:
  uint32_t _internal_rtx_ssrc() const;
  void _internal_set_rtx_ssrc(uint32_t value);
  public:

  // required uint32 frame_width = 11;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  uint32_t frame_width() const;
  void set_frame_width(uint32_t value);
  private:
  uint32_t _internal_frame_width() const;
  void _internal_set_frame_width(uint32_t value);
  public:

  // required uint64 total_encoded_bytes_target = 10;
  bool has_total_encoded_bytes_target() const;
  private:
  bool _internal_has_total_encoded_bytes_target() const;
  public:
  void clear_total_encoded_bytes_target();
  uint64_t total_encoded_bytes_target() const;
  void set_total_encoded_bytes_target(uint64_t value);
  private:
  uint64_t _internal_total_encoded_bytes_target() const;
  void _internal_set_total_encoded_bytes_target(uint64_t value);
  public:

  // required double frames_per_second = 13;
  bool has_frames_per_second() const;
  private:
  bool _internal_has_frames_per_second() const;
  public:
  void clear_frames_per_second();
  double frames_per_second() const;
  void set_frames_per_second(double value);
  private:
  double _internal_frames_per_second() const;
  void _internal_set_frames_per_second(double value);
  public:

  // required uint32 frame_height = 12;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  uint32_t frame_height() const;
  void set_frame_height(uint32_t value);
  private:
  uint32_t _internal_frame_height() const;
  void _internal_set_frame_height(uint32_t value);
  public:

  // required uint32 frames_sent = 14;
  bool has_frames_sent() const;
  private:
  bool _internal_has_frames_sent() const;
  public:
  void clear_frames_sent();
  uint32_t frames_sent() const;
  void set_frames_sent(uint32_t value);
  private:
  uint32_t _internal_frames_sent() const;
  void _internal_set_frames_sent(uint32_t value);
  public:

  // required uint32 huge_frames_sent = 15;
  bool has_huge_frames_sent() const;
  private:
  bool _internal_has_huge_frames_sent() const;
  public:
  void clear_huge_frames_sent();
  uint32_t huge_frames_sent() const;
  void set_huge_frames_sent(uint32_t value);
  private:
  uint32_t _internal_huge_frames_sent() const;
  void _internal_set_huge_frames_sent(uint32_t value);
  public:

  // required uint32 frames_encoded = 16;
  bool has_frames_encoded() const;
  private:
  bool _internal_has_frames_encoded() const;
  public:
  void clear_frames_encoded();
  uint32_t frames_encoded() const;
  void set_frames_encoded(uint32_t value);
  private:
  uint32_t _internal_frames_encoded() const;
  void _internal_set_frames_encoded(uint32_t value);
  public:

  // required uint64 qp_sum = 18;
  bool has_qp_sum() const;
  private:
  bool _internal_has_qp_sum() const;
  public:
  void clear_qp_sum();
  uint64_t qp_sum() const;
  void set_qp_sum(uint64_t value);
  private:
  uint64_t _internal_qp_sum() const;
  void _internal_set_qp_sum(uint64_t value);
  public:

  // required double total_encode_time = 19;
  bool has_total_encode_time() const;
  private:
  bool _internal_has_total_encode_time() const;
  public:
  void clear_total_encode_time();
  double total_encode_time() const;
  void set_total_encode_time(double value);
  private:
  double _internal_total_encode_time() const;
  void _internal_set_total_encode_time(double value);
  public:

  // required uint32 key_frames_encoded = 17;
  bool has_key_frames_encoded() const;
  private:
  bool _internal_has_key_frames_encoded() const;
  public:
  void clear_key_frames_encoded();
  uint32_t key_frames_encoded() const;
  void set_key_frames_encoded(uint32_t value);
  private:
  uint32_t _internal_key_frames_encoded() const;
  void _internal_set_key_frames_encoded(uint32_t value);
  public:

  // required .livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
  bool has_quality_limitation_reason() const;
  private:
  bool _internal_has_quality_limitation_reason() const;
  public:
  void clear_quality_limitation_reason();
  ::livekit::proto::QualityLimitationReason quality_limitation_reason() const;
  void set_quality_limitation_reason(::livekit::proto::QualityLimitationReason value);
  private:
  ::livekit::proto::QualityLimitationReason _internal_quality_limitation_reason() const;
  void _internal_set_quality_limitation_reason(::livekit::proto::QualityLimitationReason value);
  public:

  // required double total_packet_send_delay = 20;
  bool has_total_packet_send_delay() const;
  private:
  bool _internal_has_total_packet_send_delay() const;
  public:
  void clear_total_packet_send_delay();
  double total_packet_send_delay() const;
  void set_total_packet_send_delay(double value);
  private:
  double _internal_total_packet_send_delay() const;
  void _internal_set_total_packet_send_delay(double value);
  public:

  // required uint32 quality_limitation_resolution_changes = 23;
  bool has_quality_limitation_resolution_changes() const;
  private:
  bool _internal_has_quality_limitation_resolution_changes() const;
  public:
  void clear_quality_limitation_resolution_changes();
  uint32_t quality_limitation_resolution_changes() const;
  void set_quality_limitation_resolution_changes(uint32_t value);
  private:
  uint32_t _internal_quality_limitation_resolution_changes() const;
  void _internal_set_quality_limitation_resolution_changes(uint32_t value);
  public:

  // required uint32 nack_count = 24;
  bool has_nack_count() const;
  private:
  bool _internal_has_nack_count() const;
  public:
  void clear_nack_count();
  uint32_t nack_count() const;
  void set_nack_count(uint32_t value);
  private:
  uint32_t _internal_nack_count() const;
  void _internal_set_nack_count(uint32_t value);
  public:

  // required uint32 fir_count = 25;
  bool has_fir_count() const;
  private:
  bool _internal_has_fir_count() const;
  public:
  void clear_fir_count();
  uint32_t fir_count() const;
  void set_fir_count(uint32_t value);
  private:
  uint32_t _internal_fir_count() const;
  void _internal_set_fir_count(uint32_t value);
  public:

  // required uint32 pli_count = 26;
  bool has_pli_count() const;
  private:
  bool _internal_has_pli_count() const;
  public:
  void clear_pli_count();
  uint32_t pli_count() const;
  void set_pli_count(uint32_t value);
  private:
  uint32_t _internal_pli_count() const;
  void _internal_set_pli_count(uint32_t value);
  public:

  // required bool power_efficient_encoder = 28;
  bool has_power_efficient_encoder() const;
  private:
  bool _internal_has_power_efficient_encoder() const;
  public:
  void clear_power_efficient_encoder();
  bool power_efficient_encoder() const;
  void set_power_efficient_encoder(bool value);
  private:
  bool _internal_power_efficient_encoder() const;
  void _internal_set_power_efficient_encoder(bool value);
  public:

  // required bool active = 29;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.OutboundRtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse,
        std::string, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> quality_limitation_durations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_source_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoder_implementation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scalability_mode_;
    uint64_t header_bytes_sent_;
    uint64_t retransmitted_packets_sent_;
    uint64_t retransmitted_bytes_sent_;
    double target_bitrate_;
    uint32_t rtx_ssrc_;
    uint32_t frame_width_;
    uint64_t total_encoded_bytes_target_;
    double frames_per_second_;
    uint32_t frame_height_;
    uint32_t frames_sent_;
    uint32_t huge_frames_sent_;
    uint32_t frames_encoded_;
    uint64_t qp_sum_;
    double total_encode_time_;
    uint32_t key_frames_encoded_;
    int quality_limitation_reason_;
    double total_packet_send_delay_;
    uint32_t quality_limitation_resolution_changes_;
    uint32_t nack_count_;
    uint32_t fir_count_;
    uint32_t pli_count_;
    bool power_efficient_encoder_;
    bool active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RemoteInboundRtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RemoteInboundRtpStreamStats) */ {
 public:
  inline RemoteInboundRtpStreamStats() : RemoteInboundRtpStreamStats(nullptr) {}
  ~RemoteInboundRtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR RemoteInboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteInboundRtpStreamStats(const RemoteInboundRtpStreamStats& from);
  RemoteInboundRtpStreamStats(RemoteInboundRtpStreamStats&& from) noexcept
    : RemoteInboundRtpStreamStats() {
    *this = ::std::move(from);
  }

  inline RemoteInboundRtpStreamStats& operator=(const RemoteInboundRtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteInboundRtpStreamStats& operator=(RemoteInboundRtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteInboundRtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteInboundRtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const RemoteInboundRtpStreamStats*>(
               &_RemoteInboundRtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RemoteInboundRtpStreamStats& a, RemoteInboundRtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteInboundRtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteInboundRtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteInboundRtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteInboundRtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteInboundRtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteInboundRtpStreamStats& from) {
    RemoteInboundRtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteInboundRtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RemoteInboundRtpStreamStats";
  }
  protected:
  explicit RemoteInboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIdFieldNumber = 1,
    kRoundTripTimeFieldNumber = 2,
    kTotalRoundTripTimeFieldNumber = 3,
    kFractionLostFieldNumber = 4,
    kRoundTripTimeMeasurementsFieldNumber = 5,
  };
  // required string local_id = 1;
  bool has_local_id() const;
  private:
  bool _internal_has_local_id() const;
  public:
  void clear_local_id();
  const std::string& local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_id();
  PROTOBUF_NODISCARD std::string* release_local_id();
  void set_allocated_local_id(std::string* local_id);
  private:
  const std::string& _internal_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_id(const std::string& value);
  std::string* _internal_mutable_local_id();
  public:

  // required double round_trip_time = 2;
  bool has_round_trip_time() const;
  private:
  bool _internal_has_round_trip_time() const;
  public:
  void clear_round_trip_time();
  double round_trip_time() const;
  void set_round_trip_time(double value);
  private:
  double _internal_round_trip_time() const;
  void _internal_set_round_trip_time(double value);
  public:

  // required double total_round_trip_time = 3;
  bool has_total_round_trip_time() const;
  private:
  bool _internal_has_total_round_trip_time() const;
  public:
  void clear_total_round_trip_time();
  double total_round_trip_time() const;
  void set_total_round_trip_time(double value);
  private:
  double _internal_total_round_trip_time() const;
  void _internal_set_total_round_trip_time(double value);
  public:

  // required double fraction_lost = 4;
  bool has_fraction_lost() const;
  private:
  bool _internal_has_fraction_lost() const;
  public:
  void clear_fraction_lost();
  double fraction_lost() const;
  void set_fraction_lost(double value);
  private:
  double _internal_fraction_lost() const;
  void _internal_set_fraction_lost(double value);
  public:

  // required uint64 round_trip_time_measurements = 5;
  bool has_round_trip_time_measurements() const;
  private:
  bool _internal_has_round_trip_time_measurements() const;
  public:
  void clear_round_trip_time_measurements();
  uint64_t round_trip_time_measurements() const;
  void set_round_trip_time_measurements(uint64_t value);
  private:
  uint64_t _internal_round_trip_time_measurements() const;
  void _internal_set_round_trip_time_measurements(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RemoteInboundRtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_id_;
    double round_trip_time_;
    double total_round_trip_time_;
    double fraction_lost_;
    uint64_t round_trip_time_measurements_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class RemoteOutboundRtpStreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.RemoteOutboundRtpStreamStats) */ {
 public:
  inline RemoteOutboundRtpStreamStats() : RemoteOutboundRtpStreamStats(nullptr) {}
  ~RemoteOutboundRtpStreamStats() override;
  explicit PROTOBUF_CONSTEXPR RemoteOutboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteOutboundRtpStreamStats(const RemoteOutboundRtpStreamStats& from);
  RemoteOutboundRtpStreamStats(RemoteOutboundRtpStreamStats&& from) noexcept
    : RemoteOutboundRtpStreamStats() {
    *this = ::std::move(from);
  }

  inline RemoteOutboundRtpStreamStats& operator=(const RemoteOutboundRtpStreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteOutboundRtpStreamStats& operator=(RemoteOutboundRtpStreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteOutboundRtpStreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteOutboundRtpStreamStats* internal_default_instance() {
    return reinterpret_cast<const RemoteOutboundRtpStreamStats*>(
               &_RemoteOutboundRtpStreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RemoteOutboundRtpStreamStats& a, RemoteOutboundRtpStreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteOutboundRtpStreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteOutboundRtpStreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteOutboundRtpStreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteOutboundRtpStreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteOutboundRtpStreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteOutboundRtpStreamStats& from) {
    RemoteOutboundRtpStreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteOutboundRtpStreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.RemoteOutboundRtpStreamStats";
  }
  protected:
  explicit RemoteOutboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIdFieldNumber = 1,
    kRemoteTimestampFieldNumber = 2,
    kReportsSentFieldNumber = 3,
    kRoundTripTimeFieldNumber = 4,
    kTotalRoundTripTimeFieldNumber = 5,
    kRoundTripTimeMeasurementsFieldNumber = 6,
  };
  // required string local_id = 1;
  bool has_local_id() const;
  private:
  bool _internal_has_local_id() const;
  public:
  void clear_local_id();
  const std::string& local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_id();
  PROTOBUF_NODISCARD std::string* release_local_id();
  void set_allocated_local_id(std::string* local_id);
  private:
  const std::string& _internal_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_id(const std::string& value);
  std::string* _internal_mutable_local_id();
  public:

  // required double remote_timestamp = 2;
  bool has_remote_timestamp() const;
  private:
  bool _internal_has_remote_timestamp() const;
  public:
  void clear_remote_timestamp();
  double remote_timestamp() const;
  void set_remote_timestamp(double value);
  private:
  double _internal_remote_timestamp() const;
  void _internal_set_remote_timestamp(double value);
  public:

  // required uint64 reports_sent = 3;
  bool has_reports_sent() const;
  private:
  bool _internal_has_reports_sent() const;
  public:
  void clear_reports_sent();
  uint64_t reports_sent() const;
  void set_reports_sent(uint64_t value);
  private:
  uint64_t _internal_reports_sent() const;
  void _internal_set_reports_sent(uint64_t value);
  public:

  // required double round_trip_time = 4;
  bool has_round_trip_time() const;
  private:
  bool _internal_has_round_trip_time() const;
  public:
  void clear_round_trip_time();
  double round_trip_time() const;
  void set_round_trip_time(double value);
  private:
  double _internal_round_trip_time() const;
  void _internal_set_round_trip_time(double value);
  public:

  // required double total_round_trip_time = 5;
  bool has_total_round_trip_time() const;
  private:
  bool _internal_has_total_round_trip_time() const;
  public:
  void clear_total_round_trip_time();
  double total_round_trip_time() const;
  void set_total_round_trip_time(double value);
  private:
  double _internal_total_round_trip_time() const;
  void _internal_set_total_round_trip_time(double value);
  public:

  // required uint64 round_trip_time_measurements = 6;
  bool has_round_trip_time_measurements() const;
  private:
  bool _internal_has_round_trip_time_measurements() const;
  public:
  void clear_round_trip_time_measurements();
  uint64_t round_trip_time_measurements() const;
  void set_round_trip_time_measurements(uint64_t value);
  private:
  uint64_t _internal_round_trip_time_measurements() const;
  void _internal_set_round_trip_time_measurements(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.RemoteOutboundRtpStreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_id_;
    double remote_timestamp_;
    uint64_t reports_sent_;
    double round_trip_time_;
    double total_round_trip_time_;
    uint64_t round_trip_time_measurements_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class MediaSourceStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.MediaSourceStats) */ {
 public:
  inline MediaSourceStats() : MediaSourceStats(nullptr) {}
  ~MediaSourceStats() override;
  explicit PROTOBUF_CONSTEXPR MediaSourceStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaSourceStats(const MediaSourceStats& from);
  MediaSourceStats(MediaSourceStats&& from) noexcept
    : MediaSourceStats() {
    *this = ::std::move(from);
  }

  inline MediaSourceStats& operator=(const MediaSourceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaSourceStats& operator=(MediaSourceStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaSourceStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaSourceStats* internal_default_instance() {
    return reinterpret_cast<const MediaSourceStats*>(
               &_MediaSourceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MediaSourceStats& a, MediaSourceStats& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaSourceStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaSourceStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaSourceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaSourceStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaSourceStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaSourceStats& from) {
    MediaSourceStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaSourceStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.MediaSourceStats";
  }
  protected:
  explicit MediaSourceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackIdentifierFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // required string track_identifier = 1;
  bool has_track_identifier() const;
  private:
  bool _internal_has_track_identifier() const;
  public:
  void clear_track_identifier();
  const std::string& track_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_track_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_track_identifier();
  PROTOBUF_NODISCARD std::string* release_track_identifier();
  void set_allocated_track_identifier(std::string* track_identifier);
  private:
  const std::string& _internal_track_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_track_identifier(const std::string& value);
  std::string* _internal_mutable_track_identifier();
  public:

  // required string kind = 2;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.MediaSourceStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class AudioSourceStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.AudioSourceStats) */ {
 public:
  inline AudioSourceStats() : AudioSourceStats(nullptr) {}
  ~AudioSourceStats() override;
  explicit PROTOBUF_CONSTEXPR AudioSourceStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioSourceStats(const AudioSourceStats& from);
  AudioSourceStats(AudioSourceStats&& from) noexcept
    : AudioSourceStats() {
    *this = ::std::move(from);
  }

  inline AudioSourceStats& operator=(const AudioSourceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSourceStats& operator=(AudioSourceStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioSourceStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioSourceStats* internal_default_instance() {
    return reinterpret_cast<const AudioSourceStats*>(
               &_AudioSourceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AudioSourceStats& a, AudioSourceStats& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSourceStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSourceStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioSourceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioSourceStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioSourceStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AudioSourceStats& from) {
    AudioSourceStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioSourceStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.AudioSourceStats";
  }
  protected:
  explicit AudioSourceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioLevelFieldNumber = 1,
    kTotalAudioEnergyFieldNumber = 2,
    kTotalSamplesDurationFieldNumber = 3,
    kEchoReturnLossFieldNumber = 4,
    kEchoReturnLossEnhancementFieldNumber = 5,
    kDroppedSamplesDurationFieldNumber = 6,
    kTotalCaptureDelayFieldNumber = 8,
    kTotalSamplesCapturedFieldNumber = 9,
    kDroppedSamplesEventsFieldNumber = 7,
  };
  // required double audio_level = 1;
  bool has_audio_level() const;
  private:
  bool _internal_has_audio_level() const;
  public:
  void clear_audio_level();
  double audio_level() const;
  void set_audio_level(double value);
  private:
  double _internal_audio_level() const;
  void _internal_set_audio_level(double value);
  public:

  // required double total_audio_energy = 2;
  bool has_total_audio_energy() const;
  private:
  bool _internal_has_total_audio_energy() const;
  public:
  void clear_total_audio_energy();
  double total_audio_energy() const;
  void set_total_audio_energy(double value);
  private:
  double _internal_total_audio_energy() const;
  void _internal_set_total_audio_energy(double value);
  public:

  // required double total_samples_duration = 3;
  bool has_total_samples_duration() const;
  private:
  bool _internal_has_total_samples_duration() const;
  public:
  void clear_total_samples_duration();
  double total_samples_duration() const;
  void set_total_samples_duration(double value);
  private:
  double _internal_total_samples_duration() const;
  void _internal_set_total_samples_duration(double value);
  public:

  // required double echo_return_loss = 4;
  bool has_echo_return_loss() const;
  private:
  bool _internal_has_echo_return_loss() const;
  public:
  void clear_echo_return_loss();
  double echo_return_loss() const;
  void set_echo_return_loss(double value);
  private:
  double _internal_echo_return_loss() const;
  void _internal_set_echo_return_loss(double value);
  public:

  // required double echo_return_loss_enhancement = 5;
  bool has_echo_return_loss_enhancement() const;
  private:
  bool _internal_has_echo_return_loss_enhancement() const;
  public:
  void clear_echo_return_loss_enhancement();
  double echo_return_loss_enhancement() const;
  void set_echo_return_loss_enhancement(double value);
  private:
  double _internal_echo_return_loss_enhancement() const;
  void _internal_set_echo_return_loss_enhancement(double value);
  public:

  // required double dropped_samples_duration = 6;
  bool has_dropped_samples_duration() const;
  private:
  bool _internal_has_dropped_samples_duration() const;
  public:
  void clear_dropped_samples_duration();
  double dropped_samples_duration() const;
  void set_dropped_samples_duration(double value);
  private:
  double _internal_dropped_samples_duration() const;
  void _internal_set_dropped_samples_duration(double value);
  public:

  // required double total_capture_delay = 8;
  bool has_total_capture_delay() const;
  private:
  bool _internal_has_total_capture_delay() const;
  public:
  void clear_total_capture_delay();
  double total_capture_delay() const;
  void set_total_capture_delay(double value);
  private:
  double _internal_total_capture_delay() const;
  void _internal_set_total_capture_delay(double value);
  public:

  // required uint64 total_samples_captured = 9;
  bool has_total_samples_captured() const;
  private:
  bool _internal_has_total_samples_captured() const;
  public:
  void clear_total_samples_captured();
  uint64_t total_samples_captured() const;
  void set_total_samples_captured(uint64_t value);
  private:
  uint64_t _internal_total_samples_captured() const;
  void _internal_set_total_samples_captured(uint64_t value);
  public:

  // required uint32 dropped_samples_events = 7;
  bool has_dropped_samples_events() const;
  private:
  bool _internal_has_dropped_samples_events() const;
  public:
  void clear_dropped_samples_events();
  uint32_t dropped_samples_events() const;
  void set_dropped_samples_events(uint32_t value);
  private:
  uint32_t _internal_dropped_samples_events() const;
  void _internal_set_dropped_samples_events(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.AudioSourceStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double audio_level_;
    double total_audio_energy_;
    double total_samples_duration_;
    double echo_return_loss_;
    double echo_return_loss_enhancement_;
    double dropped_samples_duration_;
    double total_capture_delay_;
    uint64_t total_samples_captured_;
    uint32_t dropped_samples_events_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class VideoSourceStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.VideoSourceStats) */ {
 public:
  inline VideoSourceStats() : VideoSourceStats(nullptr) {}
  ~VideoSourceStats() override;
  explicit PROTOBUF_CONSTEXPR VideoSourceStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSourceStats(const VideoSourceStats& from);
  VideoSourceStats(VideoSourceStats&& from) noexcept
    : VideoSourceStats() {
    *this = ::std::move(from);
  }

  inline VideoSourceStats& operator=(const VideoSourceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSourceStats& operator=(VideoSourceStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoSourceStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSourceStats* internal_default_instance() {
    return reinterpret_cast<const VideoSourceStats*>(
               &_VideoSourceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(VideoSourceStats& a, VideoSourceStats& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSourceStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSourceStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSourceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSourceStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoSourceStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoSourceStats& from) {
    VideoSourceStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSourceStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.VideoSourceStats";
  }
  protected:
  explicit VideoSourceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kFramesPerSecondFieldNumber = 4,
    kFramesFieldNumber = 3,
  };
  // required uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // required uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // required double frames_per_second = 4;
  bool has_frames_per_second() const;
  private:
  bool _internal_has_frames_per_second() const;
  public:
  void clear_frames_per_second();
  double frames_per_second() const;
  void set_frames_per_second(double value);
  private:
  double _internal_frames_per_second() const;
  void _internal_set_frames_per_second(double value);
  public:

  // required uint32 frames = 3;
  bool has_frames() const;
  private:
  bool _internal_has_frames() const;
  public:
  void clear_frames();
  uint32_t frames() const;
  void set_frames(uint32_t value);
  private:
  uint32_t _internal_frames() const;
  void _internal_set_frames(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.VideoSourceStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t width_;
    uint32_t height_;
    double frames_per_second_;
    uint32_t frames_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class AudioPlayoutStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.AudioPlayoutStats) */ {
 public:
  inline AudioPlayoutStats() : AudioPlayoutStats(nullptr) {}
  ~AudioPlayoutStats() override;
  explicit PROTOBUF_CONSTEXPR AudioPlayoutStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioPlayoutStats(const AudioPlayoutStats& from);
  AudioPlayoutStats(AudioPlayoutStats&& from) noexcept
    : AudioPlayoutStats() {
    *this = ::std::move(from);
  }

  inline AudioPlayoutStats& operator=(const AudioPlayoutStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioPlayoutStats& operator=(AudioPlayoutStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioPlayoutStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioPlayoutStats* internal_default_instance() {
    return reinterpret_cast<const AudioPlayoutStats*>(
               &_AudioPlayoutStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(AudioPlayoutStats& a, AudioPlayoutStats& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioPlayoutStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioPlayoutStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioPlayoutStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioPlayoutStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioPlayoutStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AudioPlayoutStats& from) {
    AudioPlayoutStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioPlayoutStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.AudioPlayoutStats";
  }
  protected:
  explicit AudioPlayoutStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKindFieldNumber = 1,
    kSynthesizedSamplesDurationFieldNumber = 2,
    kTotalSamplesDurationFieldNumber = 4,
    kTotalPlayoutDelayFieldNumber = 5,
    kTotalSamplesCountFieldNumber = 6,
    kSynthesizedSamplesEventsFieldNumber = 3,
  };
  // required string kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // required double synthesized_samples_duration = 2;
  bool has_synthesized_samples_duration() const;
  private:
  bool _internal_has_synthesized_samples_duration() const;
  public:
  void clear_synthesized_samples_duration();
  double synthesized_samples_duration() const;
  void set_synthesized_samples_duration(double value);
  private:
  double _internal_synthesized_samples_duration() const;
  void _internal_set_synthesized_samples_duration(double value);
  public:

  // required double total_samples_duration = 4;
  bool has_total_samples_duration() const;
  private:
  bool _internal_has_total_samples_duration() const;
  public:
  void clear_total_samples_duration();
  double total_samples_duration() const;
  void set_total_samples_duration(double value);
  private:
  double _internal_total_samples_duration() const;
  void _internal_set_total_samples_duration(double value);
  public:

  // required double total_playout_delay = 5;
  bool has_total_playout_delay() const;
  private:
  bool _internal_has_total_playout_delay() const;
  public:
  void clear_total_playout_delay();
  double total_playout_delay() const;
  void set_total_playout_delay(double value);
  private:
  double _internal_total_playout_delay() const;
  void _internal_set_total_playout_delay(double value);
  public:

  // required uint64 total_samples_count = 6;
  bool has_total_samples_count() const;
  private:
  bool _internal_has_total_samples_count() const;
  public:
  void clear_total_samples_count();
  uint64_t total_samples_count() const;
  void set_total_samples_count(uint64_t value);
  private:
  uint64_t _internal_total_samples_count() const;
  void _internal_set_total_samples_count(uint64_t value);
  public:

  // required uint32 synthesized_samples_events = 3;
  bool has_synthesized_samples_events() const;
  private:
  bool _internal_has_synthesized_samples_events() const;
  public:
  void clear_synthesized_samples_events();
  uint32_t synthesized_samples_events() const;
  void set_synthesized_samples_events(uint32_t value);
  private:
  uint32_t _internal_synthesized_samples_events() const;
  void _internal_set_synthesized_samples_events(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.AudioPlayoutStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
    double synthesized_samples_duration_;
    double total_samples_duration_;
    double total_playout_delay_;
    uint64_t total_samples_count_;
    uint32_t synthesized_samples_events_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class PeerConnectionStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.PeerConnectionStats) */ {
 public:
  inline PeerConnectionStats() : PeerConnectionStats(nullptr) {}
  ~PeerConnectionStats() override;
  explicit PROTOBUF_CONSTEXPR PeerConnectionStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerConnectionStats(const PeerConnectionStats& from);
  PeerConnectionStats(PeerConnectionStats&& from) noexcept
    : PeerConnectionStats() {
    *this = ::std::move(from);
  }

  inline PeerConnectionStats& operator=(const PeerConnectionStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnectionStats& operator=(PeerConnectionStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerConnectionStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnectionStats* internal_default_instance() {
    return reinterpret_cast<const PeerConnectionStats*>(
               &_PeerConnectionStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PeerConnectionStats& a, PeerConnectionStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerConnectionStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnectionStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnectionStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConnectionStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeerConnectionStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeerConnectionStats& from) {
    PeerConnectionStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerConnectionStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.PeerConnectionStats";
  }
  protected:
  explicit PeerConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataChannelsOpenedFieldNumber = 1,
    kDataChannelsClosedFieldNumber = 2,
  };
  // required uint32 data_channels_opened = 1;
  bool has_data_channels_opened() const;
  private:
  bool _internal_has_data_channels_opened() const;
  public:
  void clear_data_channels_opened();
  uint32_t data_channels_opened() const;
  void set_data_channels_opened(uint32_t value);
  private:
  uint32_t _internal_data_channels_opened() const;
  void _internal_set_data_channels_opened(uint32_t value);
  public:

  // required uint32 data_channels_closed = 2;
  bool has_data_channels_closed() const;
  private:
  bool _internal_has_data_channels_closed() const;
  public:
  void clear_data_channels_closed();
  uint32_t data_channels_closed() const;
  void set_data_channels_closed(uint32_t value);
  private:
  uint32_t _internal_data_channels_closed() const;
  void _internal_set_data_channels_closed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.PeerConnectionStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t data_channels_opened_;
    uint32_t data_channels_closed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class DataChannelStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.DataChannelStats) */ {
 public:
  inline DataChannelStats() : DataChannelStats(nullptr) {}
  ~DataChannelStats() override;
  explicit PROTOBUF_CONSTEXPR DataChannelStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataChannelStats(const DataChannelStats& from);
  DataChannelStats(DataChannelStats&& from) noexcept
    : DataChannelStats() {
    *this = ::std::move(from);
  }

  inline DataChannelStats& operator=(const DataChannelStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChannelStats& operator=(DataChannelStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataChannelStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataChannelStats* internal_default_instance() {
    return reinterpret_cast<const DataChannelStats*>(
               &_DataChannelStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DataChannelStats& a, DataChannelStats& b) {
    a.Swap(&b);
  }
  inline void Swap(DataChannelStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChannelStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataChannelStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataChannelStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataChannelStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataChannelStats& from) {
    DataChannelStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataChannelStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.DataChannelStats";
  }
  protected:
  explicit DataChannelStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kDataChannelIdentifierFieldNumber = 3,
    kStateFieldNumber = 4,
    kBytesSentFieldNumber = 6,
    kMessagesSentFieldNumber = 5,
    kMessagesReceivedFieldNumber = 7,
    kBytesReceivedFieldNumber = 8,
  };
  // required string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required string protocol = 2;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // required int32 data_channel_identifier = 3;
  bool has_data_channel_identifier() const;
  private:
  bool _internal_has_data_channel_identifier() const;
  public:
  void clear_data_channel_identifier();
  int32_t data_channel_identifier() const;
  void set_data_channel_identifier(int32_t value);
  private:
  int32_t _internal_data_channel_identifier() const;
  void _internal_set_data_channel_identifier(int32_t value);
  public:

  // optional .livekit.proto.DataChannelState state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::livekit::proto::DataChannelState state() const;
  void set_state(::livekit::proto::DataChannelState value);
  private:
  ::livekit::proto::DataChannelState _internal_state() const;
  void _internal_set_state(::livekit::proto::DataChannelState value);
  public:

  // required uint64 bytes_sent = 6;
  bool has_bytes_sent() const;
  private:
  bool _internal_has_bytes_sent() const;
  public:
  void clear_bytes_sent();
  uint64_t bytes_sent() const;
  void set_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_bytes_sent() const;
  void _internal_set_bytes_sent(uint64_t value);
  public:

  // required uint32 messages_sent = 5;
  bool has_messages_sent() const;
  private:
  bool _internal_has_messages_sent() const;
  public:
  void clear_messages_sent();
  uint32_t messages_sent() const;
  void set_messages_sent(uint32_t value);
  private:
  uint32_t _internal_messages_sent() const;
  void _internal_set_messages_sent(uint32_t value);
  public:

  // required uint32 messages_received = 7;
  bool has_messages_received() const;
  private:
  bool _internal_has_messages_received() const;
  public:
  void clear_messages_received();
  uint32_t messages_received() const;
  void set_messages_received(uint32_t value);
  private:
  uint32_t _internal_messages_received() const;
  void _internal_set_messages_received(uint32_t value);
  public:

  // required uint64 bytes_received = 8;
  bool has_bytes_received() const;
  private:
  bool _internal_has_bytes_received() const;
  public:
  void clear_bytes_received();
  uint64_t bytes_received() const;
  void set_bytes_received(uint64_t value);
  private:
  uint64_t _internal_bytes_received() const;
  void _internal_set_bytes_received(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.DataChannelStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    int32_t data_channel_identifier_;
    int state_;
    uint64_t bytes_sent_;
    uint32_t messages_sent_;
    uint32_t messages_received_;
    uint64_t bytes_received_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class TransportStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.TransportStats) */ {
 public:
  inline TransportStats() : TransportStats(nullptr) {}
  ~TransportStats() override;
  explicit PROTOBUF_CONSTEXPR TransportStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportStats(const TransportStats& from);
  TransportStats(TransportStats&& from) noexcept
    : TransportStats() {
    *this = ::std::move(from);
  }

  inline TransportStats& operator=(const TransportStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportStats& operator=(TransportStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportStats* internal_default_instance() {
    return reinterpret_cast<const TransportStats*>(
               &_TransportStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TransportStats& a, TransportStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportStats& from) {
    TransportStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.TransportStats";
  }
  protected:
  explicit TransportStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIceLocalUsernameFragmentFieldNumber = 6,
    kSelectedCandidatePairIdFieldNumber = 9,
    kLocalCertificateIdFieldNumber = 10,
    kRemoteCertificateIdFieldNumber = 11,
    kTlsVersionFieldNumber = 12,
    kDtlsCipherFieldNumber = 13,
    kSrtpCipherFieldNumber = 15,
    kPacketsSentFieldNumber = 1,
    kPacketsReceivedFieldNumber = 2,
    kBytesSentFieldNumber = 3,
    kBytesReceivedFieldNumber = 4,
    kIceRoleFieldNumber = 5,
    kDtlsStateFieldNumber = 7,
    kIceStateFieldNumber = 8,
    kDtlsRoleFieldNumber = 14,
    kSelectedCandidatePairChangesFieldNumber = 16,
  };
  // required string ice_local_username_fragment = 6;
  bool has_ice_local_username_fragment() const;
  private:
  bool _internal_has_ice_local_username_fragment() const;
  public:
  void clear_ice_local_username_fragment();
  const std::string& ice_local_username_fragment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ice_local_username_fragment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ice_local_username_fragment();
  PROTOBUF_NODISCARD std::string* release_ice_local_username_fragment();
  void set_allocated_ice_local_username_fragment(std::string* ice_local_username_fragment);
  private:
  const std::string& _internal_ice_local_username_fragment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ice_local_username_fragment(const std::string& value);
  std::string* _internal_mutable_ice_local_username_fragment();
  public:

  // required string selected_candidate_pair_id = 9;
  bool has_selected_candidate_pair_id() const;
  private:
  bool _internal_has_selected_candidate_pair_id() const;
  public:
  void clear_selected_candidate_pair_id();
  const std::string& selected_candidate_pair_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selected_candidate_pair_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selected_candidate_pair_id();
  PROTOBUF_NODISCARD std::string* release_selected_candidate_pair_id();
  void set_allocated_selected_candidate_pair_id(std::string* selected_candidate_pair_id);
  private:
  const std::string& _internal_selected_candidate_pair_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selected_candidate_pair_id(const std::string& value);
  std::string* _internal_mutable_selected_candidate_pair_id();
  public:

  // required string local_certificate_id = 10;
  bool has_local_certificate_id() const;
  private:
  bool _internal_has_local_certificate_id() const;
  public:
  void clear_local_certificate_id();
  const std::string& local_certificate_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_certificate_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_certificate_id();
  PROTOBUF_NODISCARD std::string* release_local_certificate_id();
  void set_allocated_local_certificate_id(std::string* local_certificate_id);
  private:
  const std::string& _internal_local_certificate_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_certificate_id(const std::string& value);
  std::string* _internal_mutable_local_certificate_id();
  public:

  // required string remote_certificate_id = 11;
  bool has_remote_certificate_id() const;
  private:
  bool _internal_has_remote_certificate_id() const;
  public:
  void clear_remote_certificate_id();
  const std::string& remote_certificate_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_certificate_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_certificate_id();
  PROTOBUF_NODISCARD std::string* release_remote_certificate_id();
  void set_allocated_remote_certificate_id(std::string* remote_certificate_id);
  private:
  const std::string& _internal_remote_certificate_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_certificate_id(const std::string& value);
  std::string* _internal_mutable_remote_certificate_id();
  public:

  // required string tls_version = 12;
  bool has_tls_version() const;
  private:
  bool _internal_has_tls_version() const;
  public:
  void clear_tls_version();
  const std::string& tls_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tls_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tls_version();
  PROTOBUF_NODISCARD std::string* release_tls_version();
  void set_allocated_tls_version(std::string* tls_version);
  private:
  const std::string& _internal_tls_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tls_version(const std::string& value);
  std::string* _internal_mutable_tls_version();
  public:

  // required string dtls_cipher = 13;
  bool has_dtls_cipher() const;
  private:
  bool _internal_has_dtls_cipher() const;
  public:
  void clear_dtls_cipher();
  const std::string& dtls_cipher() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dtls_cipher(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dtls_cipher();
  PROTOBUF_NODISCARD std::string* release_dtls_cipher();
  void set_allocated_dtls_cipher(std::string* dtls_cipher);
  private:
  const std::string& _internal_dtls_cipher() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dtls_cipher(const std::string& value);
  std::string* _internal_mutable_dtls_cipher();
  public:

  // required string srtp_cipher = 15;
  bool has_srtp_cipher() const;
  private:
  bool _internal_has_srtp_cipher() const;
  public:
  void clear_srtp_cipher();
  const std::string& srtp_cipher() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srtp_cipher(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srtp_cipher();
  PROTOBUF_NODISCARD std::string* release_srtp_cipher();
  void set_allocated_srtp_cipher(std::string* srtp_cipher);
  private:
  const std::string& _internal_srtp_cipher() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srtp_cipher(const std::string& value);
  std::string* _internal_mutable_srtp_cipher();
  public:

  // required uint64 packets_sent = 1;
  bool has_packets_sent() const;
  private:
  bool _internal_has_packets_sent() const;
  public:
  void clear_packets_sent();
  uint64_t packets_sent() const;
  void set_packets_sent(uint64_t value);
  private:
  uint64_t _internal_packets_sent() const;
  void _internal_set_packets_sent(uint64_t value);
  public:

  // required uint64 packets_received = 2;
  bool has_packets_received() const;
  private:
  bool _internal_has_packets_received() const;
  public:
  void clear_packets_received();
  uint64_t packets_received() const;
  void set_packets_received(uint64_t value);
  private:
  uint64_t _internal_packets_received() const;
  void _internal_set_packets_received(uint64_t value);
  public:

  // required uint64 bytes_sent = 3;
  bool has_bytes_sent() const;
  private:
  bool _internal_has_bytes_sent() const;
  public:
  void clear_bytes_sent();
  uint64_t bytes_sent() const;
  void set_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_bytes_sent() const;
  void _internal_set_bytes_sent(uint64_t value);
  public:

  // required uint64 bytes_received = 4;
  bool has_bytes_received() const;
  private:
  bool _internal_has_bytes_received() const;
  public:
  void clear_bytes_received();
  uint64_t bytes_received() const;
  void set_bytes_received(uint64_t value);
  private:
  uint64_t _internal_bytes_received() const;
  void _internal_set_bytes_received(uint64_t value);
  public:

  // required .livekit.proto.IceRole ice_role = 5;
  bool has_ice_role() const;
  private:
  bool _internal_has_ice_role() const;
  public:
  void clear_ice_role();
  ::livekit::proto::IceRole ice_role() const;
  void set_ice_role(::livekit::proto::IceRole value);
  private:
  ::livekit::proto::IceRole _internal_ice_role() const;
  void _internal_set_ice_role(::livekit::proto::IceRole value);
  public:

  // optional .livekit.proto.DtlsTransportState dtls_state = 7;
  bool has_dtls_state() const;
  private:
  bool _internal_has_dtls_state() const;
  public:
  void clear_dtls_state();
  ::livekit::proto::DtlsTransportState dtls_state() const;
  void set_dtls_state(::livekit::proto::DtlsTransportState value);
  private:
  ::livekit::proto::DtlsTransportState _internal_dtls_state() const;
  void _internal_set_dtls_state(::livekit::proto::DtlsTransportState value);
  public:

  // optional .livekit.proto.IceTransportState ice_state = 8;
  bool has_ice_state() const;
  private:
  bool _internal_has_ice_state() const;
  public:
  void clear_ice_state();
  ::livekit::proto::IceTransportState ice_state() const;
  void set_ice_state(::livekit::proto::IceTransportState value);
  private:
  ::livekit::proto::IceTransportState _internal_ice_state() const;
  void _internal_set_ice_state(::livekit::proto::IceTransportState value);
  public:

  // required .livekit.proto.DtlsRole dtls_role = 14;
  bool has_dtls_role() const;
  private:
  bool _internal_has_dtls_role() const;
  public:
  void clear_dtls_role();
  ::livekit::proto::DtlsRole dtls_role() const;
  void set_dtls_role(::livekit::proto::DtlsRole value);
  private:
  ::livekit::proto::DtlsRole _internal_dtls_role() const;
  void _internal_set_dtls_role(::livekit::proto::DtlsRole value);
  public:

  // required uint32 selected_candidate_pair_changes = 16;
  bool has_selected_candidate_pair_changes() const;
  private:
  bool _internal_has_selected_candidate_pair_changes() const;
  public:
  void clear_selected_candidate_pair_changes();
  uint32_t selected_candidate_pair_changes() const;
  void set_selected_candidate_pair_changes(uint32_t value);
  private:
  uint32_t _internal_selected_candidate_pair_changes() const;
  void _internal_set_selected_candidate_pair_changes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.TransportStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ice_local_username_fragment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_candidate_pair_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_certificate_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_certificate_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tls_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtls_cipher_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srtp_cipher_;
    uint64_t packets_sent_;
    uint64_t packets_received_;
    uint64_t bytes_sent_;
    uint64_t bytes_received_;
    int ice_role_;
    int dtls_state_;
    int ice_state_;
    int dtls_role_;
    uint32_t selected_candidate_pair_changes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class CandidatePairStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.CandidatePairStats) */ {
 public:
  inline CandidatePairStats() : CandidatePairStats(nullptr) {}
  ~CandidatePairStats() override;
  explicit PROTOBUF_CONSTEXPR CandidatePairStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidatePairStats(const CandidatePairStats& from);
  CandidatePairStats(CandidatePairStats&& from) noexcept
    : CandidatePairStats() {
    *this = ::std::move(from);
  }

  inline CandidatePairStats& operator=(const CandidatePairStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidatePairStats& operator=(CandidatePairStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidatePairStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidatePairStats* internal_default_instance() {
    return reinterpret_cast<const CandidatePairStats*>(
               &_CandidatePairStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CandidatePairStats& a, CandidatePairStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidatePairStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidatePairStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CandidatePairStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CandidatePairStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidatePairStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CandidatePairStats& from) {
    CandidatePairStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidatePairStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.CandidatePairStats";
  }
  protected:
  explicit CandidatePairStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportIdFieldNumber = 1,
    kLocalCandidateIdFieldNumber = 2,
    kRemoteCandidateIdFieldNumber = 3,
    kStateFieldNumber = 4,
    kNominatedFieldNumber = 5,
    kPacketsSentFieldNumber = 6,
    kPacketsReceivedFieldNumber = 7,
    kBytesSentFieldNumber = 8,
    kBytesReceivedFieldNumber = 9,
    kLastPacketSentTimestampFieldNumber = 10,
    kLastPacketReceivedTimestampFieldNumber = 11,
    kTotalRoundTripTimeFieldNumber = 12,
    kCurrentRoundTripTimeFieldNumber = 13,
    kAvailableOutgoingBitrateFieldNumber = 14,
    kAvailableIncomingBitrateFieldNumber = 15,
    kRequestsReceivedFieldNumber = 16,
    kRequestsSentFieldNumber = 17,
    kResponsesReceivedFieldNumber = 18,
    kResponsesSentFieldNumber = 19,
    kConsentRequestsSentFieldNumber = 20,
    kBytesDiscardedOnSendFieldNumber = 22,
    kPacketsDiscardedOnSendFieldNumber = 21,
  };
  // required string transport_id = 1;
  bool has_transport_id() const;
  private:
  bool _internal_has_transport_id() const;
  public:
  void clear_transport_id();
  const std::string& transport_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transport_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transport_id();
  PROTOBUF_NODISCARD std::string* release_transport_id();
  void set_allocated_transport_id(std::string* transport_id);
  private:
  const std::string& _internal_transport_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transport_id(const std::string& value);
  std::string* _internal_mutable_transport_id();
  public:

  // required string local_candidate_id = 2;
  bool has_local_candidate_id() const;
  private:
  bool _internal_has_local_candidate_id() const;
  public:
  void clear_local_candidate_id();
  const std::string& local_candidate_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_candidate_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_candidate_id();
  PROTOBUF_NODISCARD std::string* release_local_candidate_id();
  void set_allocated_local_candidate_id(std::string* local_candidate_id);
  private:
  const std::string& _internal_local_candidate_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_candidate_id(const std::string& value);
  std::string* _internal_mutable_local_candidate_id();
  public:

  // required string remote_candidate_id = 3;
  bool has_remote_candidate_id() const;
  private:
  bool _internal_has_remote_candidate_id() const;
  public:
  void clear_remote_candidate_id();
  const std::string& remote_candidate_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_candidate_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_candidate_id();
  PROTOBUF_NODISCARD std::string* release_remote_candidate_id();
  void set_allocated_remote_candidate_id(std::string* remote_candidate_id);
  private:
  const std::string& _internal_remote_candidate_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_candidate_id(const std::string& value);
  std::string* _internal_mutable_remote_candidate_id();
  public:

  // optional .livekit.proto.IceCandidatePairState state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::livekit::proto::IceCandidatePairState state() const;
  void set_state(::livekit::proto::IceCandidatePairState value);
  private:
  ::livekit::proto::IceCandidatePairState _internal_state() const;
  void _internal_set_state(::livekit::proto::IceCandidatePairState value);
  public:

  // required bool nominated = 5;
  bool has_nominated() const;
  private:
  bool _internal_has_nominated() const;
  public:
  void clear_nominated();
  bool nominated() const;
  void set_nominated(bool value);
  private:
  bool _internal_nominated() const;
  void _internal_set_nominated(bool value);
  public:

  // required uint64 packets_sent = 6;
  bool has_packets_sent() const;
  private:
  bool _internal_has_packets_sent() const;
  public:
  void clear_packets_sent();
  uint64_t packets_sent() const;
  void set_packets_sent(uint64_t value);
  private:
  uint64_t _internal_packets_sent() const;
  void _internal_set_packets_sent(uint64_t value);
  public:

  // required uint64 packets_received = 7;
  bool has_packets_received() const;
  private:
  bool _internal_has_packets_received() const;
  public:
  void clear_packets_received();
  uint64_t packets_received() const;
  void set_packets_received(uint64_t value);
  private:
  uint64_t _internal_packets_received() const;
  void _internal_set_packets_received(uint64_t value);
  public:

  // required uint64 bytes_sent = 8;
  bool has_bytes_sent() const;
  private:
  bool _internal_has_bytes_sent() const;
  public:
  void clear_bytes_sent();
  uint64_t bytes_sent() const;
  void set_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_bytes_sent() const;
  void _internal_set_bytes_sent(uint64_t value);
  public:

  // required uint64 bytes_received = 9;
  bool has_bytes_received() const;
  private:
  bool _internal_has_bytes_received() const;
  public:
  void clear_bytes_received();
  uint64_t bytes_received() const;
  void set_bytes_received(uint64_t value);
  private:
  uint64_t _internal_bytes_received() const;
  void _internal_set_bytes_received(uint64_t value);
  public:

  // required double last_packet_sent_timestamp = 10;
  bool has_last_packet_sent_timestamp() const;
  private:
  bool _internal_has_last_packet_sent_timestamp() const;
  public:
  void clear_last_packet_sent_timestamp();
  double last_packet_sent_timestamp() const;
  void set_last_packet_sent_timestamp(double value);
  private:
  double _internal_last_packet_sent_timestamp() const;
  void _internal_set_last_packet_sent_timestamp(double value);
  public:

  // required double last_packet_received_timestamp = 11;
  bool has_last_packet_received_timestamp() const;
  private:
  bool _internal_has_last_packet_received_timestamp() const;
  public:
  void clear_last_packet_received_timestamp();
  double last_packet_received_timestamp() const;
  void set_last_packet_received_timestamp(double value);
  private:
  double _internal_last_packet_received_timestamp() const;
  void _internal_set_last_packet_received_timestamp(double value);
  public:

  // required double total_round_trip_time = 12;
  bool has_total_round_trip_time() const;
  private:
  bool _internal_has_total_round_trip_time() const;
  public:
  void clear_total_round_trip_time();
  double total_round_trip_time() const;
  void set_total_round_trip_time(double value);
  private:
  double _internal_total_round_trip_time() const;
  void _internal_set_total_round_trip_time(double value);
  public:

  // required double current_round_trip_time = 13;
  bool has_current_round_trip_time() const;
  private:
  bool _internal_has_current_round_trip_time() const;
  public:
  void clear_current_round_trip_time();
  double current_round_trip_time() const;
  void set_current_round_trip_time(double value);
  private:
  double _internal_current_round_trip_time() const;
  void _internal_set_current_round_trip_time(double value);
  public:

  // required double available_outgoing_bitrate = 14;
  bool has_available_outgoing_bitrate() const;
  private:
  bool _internal_has_available_outgoing_bitrate() const;
  public:
  void clear_available_outgoing_bitrate();
  double available_outgoing_bitrate() const;
  void set_available_outgoing_bitrate(double value);
  private:
  double _internal_available_outgoing_bitrate() const;
  void _internal_set_available_outgoing_bitrate(double value);
  public:

  // required double available_incoming_bitrate = 15;
  bool has_available_incoming_bitrate() const;
  private:
  bool _internal_has_available_incoming_bitrate() const;
  public:
  void clear_available_incoming_bitrate();
  double available_incoming_bitrate() const;
  void set_available_incoming_bitrate(double value);
  private:
  double _internal_available_incoming_bitrate() const;
  void _internal_set_available_incoming_bitrate(double value);
  public:

  // required uint64 requests_received = 16;
  bool has_requests_received() const;
  private:
  bool _internal_has_requests_received() const;
  public:
  void clear_requests_received();
  uint64_t requests_received() const;
  void set_requests_received(uint64_t value);
  private:
  uint64_t _internal_requests_received() const;
  void _internal_set_requests_received(uint64_t value);
  public:

  // required uint64 requests_sent = 17;
  bool has_requests_sent() const;
  private:
  bool _internal_has_requests_sent() const;
  public:
  void clear_requests_sent();
  uint64_t requests_sent() const;
  void set_requests_sent(uint64_t value);
  private:
  uint64_t _internal_requests_sent() const;
  void _internal_set_requests_sent(uint64_t value);
  public:

  // required uint64 responses_received = 18;
  bool has_responses_received() const;
  private:
  bool _internal_has_responses_received() const;
  public:
  void clear_responses_received();
  uint64_t responses_received() const;
  void set_responses_received(uint64_t value);
  private:
  uint64_t _internal_responses_received() const;
  void _internal_set_responses_received(uint64_t value);
  public:

  // required uint64 responses_sent = 19;
  bool has_responses_sent() const;
  private:
  bool _internal_has_responses_sent() const;
  public:
  void clear_responses_sent();
  uint64_t responses_sent() const;
  void set_responses_sent(uint64_t value);
  private:
  uint64_t _internal_responses_sent() const;
  void _internal_set_responses_sent(uint64_t value);
  public:

  // required uint64 consent_requests_sent = 20;
  bool has_consent_requests_sent() const;
  private:
  bool _internal_has_consent_requests_sent() const;
  public:
  void clear_consent_requests_sent();
  uint64_t consent_requests_sent() const;
  void set_consent_requests_sent(uint64_t value);
  private:
  uint64_t _internal_consent_requests_sent() const;
  void _internal_set_consent_requests_sent(uint64_t value);
  public:

  // required uint64 bytes_discarded_on_send = 22;
  bool has_bytes_discarded_on_send() const;
  private:
  bool _internal_has_bytes_discarded_on_send() const;
  public:
  void clear_bytes_discarded_on_send();
  uint64_t bytes_discarded_on_send() const;
  void set_bytes_discarded_on_send(uint64_t value);
  private:
  uint64_t _internal_bytes_discarded_on_send() const;
  void _internal_set_bytes_discarded_on_send(uint64_t value);
  public:

  // required uint32 packets_discarded_on_send = 21;
  bool has_packets_discarded_on_send() const;
  private:
  bool _internal_has_packets_discarded_on_send() const;
  public:
  void clear_packets_discarded_on_send();
  uint32_t packets_discarded_on_send() const;
  void set_packets_discarded_on_send(uint32_t value);
  private:
  uint32_t _internal_packets_discarded_on_send() const;
  void _internal_set_packets_discarded_on_send(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.CandidatePairStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transport_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_candidate_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_candidate_id_;
    int state_;
    bool nominated_;
    uint64_t packets_sent_;
    uint64_t packets_received_;
    uint64_t bytes_sent_;
    uint64_t bytes_received_;
    double last_packet_sent_timestamp_;
    double last_packet_received_timestamp_;
    double total_round_trip_time_;
    double current_round_trip_time_;
    double available_outgoing_bitrate_;
    double available_incoming_bitrate_;
    uint64_t requests_received_;
    uint64_t requests_sent_;
    uint64_t responses_received_;
    uint64_t responses_sent_;
    uint64_t consent_requests_sent_;
    uint64_t bytes_discarded_on_send_;
    uint32_t packets_discarded_on_send_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class IceCandidateStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.IceCandidateStats) */ {
 public:
  inline IceCandidateStats() : IceCandidateStats(nullptr) {}
  ~IceCandidateStats() override;
  explicit PROTOBUF_CONSTEXPR IceCandidateStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IceCandidateStats(const IceCandidateStats& from);
  IceCandidateStats(IceCandidateStats&& from) noexcept
    : IceCandidateStats() {
    *this = ::std::move(from);
  }

  inline IceCandidateStats& operator=(const IceCandidateStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IceCandidateStats& operator=(IceCandidateStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IceCandidateStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const IceCandidateStats* internal_default_instance() {
    return reinterpret_cast<const IceCandidateStats*>(
               &_IceCandidateStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(IceCandidateStats& a, IceCandidateStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IceCandidateStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IceCandidateStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IceCandidateStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IceCandidateStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IceCandidateStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IceCandidateStats& from) {
    IceCandidateStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IceCandidateStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.IceCandidateStats";
  }
  protected:
  explicit IceCandidateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportIdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kProtocolFieldNumber = 4,
    kUrlFieldNumber = 7,
    kFoundationFieldNumber = 9,
    kRelatedAddressFieldNumber = 10,
    kUsernameFragmentFieldNumber = 12,
    kPortFieldNumber = 3,
    kCandidateTypeFieldNumber = 5,
    kPriorityFieldNumber = 6,
    kRelayProtocolFieldNumber = 8,
    kRelatedPortFieldNumber = 11,
    kTcpTypeFieldNumber = 13,
  };
  // required string transport_id = 1;
  bool has_transport_id() const;
  private:
  bool _internal_has_transport_id() const;
  public:
  void clear_transport_id();
  const std::string& transport_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transport_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transport_id();
  PROTOBUF_NODISCARD std::string* release_transport_id();
  void set_allocated_transport_id(std::string* transport_id);
  private:
  const std::string& _internal_transport_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transport_id(const std::string& value);
  std::string* _internal_mutable_transport_id();
  public:

  // required string address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string protocol = 4;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // required string url = 7;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // required string foundation = 9;
  bool has_foundation() const;
  private:
  bool _internal_has_foundation() const;
  public:
  void clear_foundation();
  const std::string& foundation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foundation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foundation();
  PROTOBUF_NODISCARD std::string* release_foundation();
  void set_allocated_foundation(std::string* foundation);
  private:
  const std::string& _internal_foundation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foundation(const std::string& value);
  std::string* _internal_mutable_foundation();
  public:

  // required string related_address = 10;
  bool has_related_address() const;
  private:
  bool _internal_has_related_address() const;
  public:
  void clear_related_address();
  const std::string& related_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_related_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_related_address();
  PROTOBUF_NODISCARD std::string* release_related_address();
  void set_allocated_related_address(std::string* related_address);
  private:
  const std::string& _internal_related_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_related_address(const std::string& value);
  std::string* _internal_mutable_related_address();
  public:

  // required string username_fragment = 12;
  bool has_username_fragment() const;
  private:
  bool _internal_has_username_fragment() const;
  public:
  void clear_username_fragment();
  const std::string& username_fragment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username_fragment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username_fragment();
  PROTOBUF_NODISCARD std::string* release_username_fragment();
  void set_allocated_username_fragment(std::string* username_fragment);
  private:
  const std::string& _internal_username_fragment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username_fragment(const std::string& value);
  std::string* _internal_mutable_username_fragment();
  public:

  // required int32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // optional .livekit.proto.IceCandidateType candidate_type = 5;
  bool has_candidate_type() const;
  private:
  bool _internal_has_candidate_type() const;
  public:
  void clear_candidate_type();
  ::livekit::proto::IceCandidateType candidate_type() const;
  void set_candidate_type(::livekit::proto::IceCandidateType value);
  private:
  ::livekit::proto::IceCandidateType _internal_candidate_type() const;
  void _internal_set_candidate_type(::livekit::proto::IceCandidateType value);
  public:

  // required int32 priority = 6;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // optional .livekit.proto.IceServerTransportProtocol relay_protocol = 8;
  bool has_relay_protocol() const;
  private:
  bool _internal_has_relay_protocol() const;
  public:
  void clear_relay_protocol();
  ::livekit::proto::IceServerTransportProtocol relay_protocol() const;
  void set_relay_protocol(::livekit::proto::IceServerTransportProtocol value);
  private:
  ::livekit::proto::IceServerTransportProtocol _internal_relay_protocol() const;
  void _internal_set_relay_protocol(::livekit::proto::IceServerTransportProtocol value);
  public:

  // required int32 related_port = 11;
  bool has_related_port() const;
  private:
  bool _internal_has_related_port() const;
  public:
  void clear_related_port();
  int32_t related_port() const;
  void set_related_port(int32_t value);
  private:
  int32_t _internal_related_port() const;
  void _internal_set_related_port(int32_t value);
  public:

  // optional .livekit.proto.IceTcpCandidateType tcp_type = 13;
  bool has_tcp_type() const;
  private:
  bool _internal_has_tcp_type() const;
  public:
  void clear_tcp_type();
  ::livekit::proto::IceTcpCandidateType tcp_type() const;
  void set_tcp_type(::livekit::proto::IceTcpCandidateType value);
  private:
  ::livekit::proto::IceTcpCandidateType _internal_tcp_type() const;
  void _internal_set_tcp_type(::livekit::proto::IceTcpCandidateType value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.IceCandidateStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transport_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foundation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr related_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_fragment_;
    int32_t port_;
    int candidate_type_;
    int32_t priority_;
    int relay_protocol_;
    int32_t related_port_;
    int tcp_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class CertificateStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.CertificateStats) */ {
 public:
  inline CertificateStats() : CertificateStats(nullptr) {}
  ~CertificateStats() override;
  explicit PROTOBUF_CONSTEXPR CertificateStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CertificateStats(const CertificateStats& from);
  CertificateStats(CertificateStats&& from) noexcept
    : CertificateStats() {
    *this = ::std::move(from);
  }

  inline CertificateStats& operator=(const CertificateStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertificateStats& operator=(CertificateStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CertificateStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CertificateStats* internal_default_instance() {
    return reinterpret_cast<const CertificateStats*>(
               &_CertificateStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CertificateStats& a, CertificateStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CertificateStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CertificateStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CertificateStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CertificateStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CertificateStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CertificateStats& from) {
    CertificateStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertificateStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.CertificateStats";
  }
  protected:
  explicit CertificateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFingerprintFieldNumber = 1,
    kFingerprintAlgorithmFieldNumber = 2,
    kBase64CertificateFieldNumber = 3,
    kIssuerCertificateIdFieldNumber = 4,
  };
  // required string fingerprint = 1;
  bool has_fingerprint() const;
  private:
  bool _internal_has_fingerprint() const;
  public:
  void clear_fingerprint();
  const std::string& fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fingerprint();
  PROTOBUF_NODISCARD std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);
  private:
  const std::string& _internal_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint(const std::string& value);
  std::string* _internal_mutable_fingerprint();
  public:

  // required string fingerprint_algorithm = 2;
  bool has_fingerprint_algorithm() const;
  private:
  bool _internal_has_fingerprint_algorithm() const;
  public:
  void clear_fingerprint_algorithm();
  const std::string& fingerprint_algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fingerprint_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fingerprint_algorithm();
  PROTOBUF_NODISCARD std::string* release_fingerprint_algorithm();
  void set_allocated_fingerprint_algorithm(std::string* fingerprint_algorithm);
  private:
  const std::string& _internal_fingerprint_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint_algorithm(const std::string& value);
  std::string* _internal_mutable_fingerprint_algorithm();
  public:

  // required string base64_certificate = 3;
  bool has_base64_certificate() const;
  private:
  bool _internal_has_base64_certificate() const;
  public:
  void clear_base64_certificate();
  const std::string& base64_certificate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base64_certificate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base64_certificate();
  PROTOBUF_NODISCARD std::string* release_base64_certificate();
  void set_allocated_base64_certificate(std::string* base64_certificate);
  private:
  const std::string& _internal_base64_certificate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base64_certificate(const std::string& value);
  std::string* _internal_mutable_base64_certificate();
  public:

  // required string issuer_certificate_id = 4;
  bool has_issuer_certificate_id() const;
  private:
  bool _internal_has_issuer_certificate_id() const;
  public:
  void clear_issuer_certificate_id();
  const std::string& issuer_certificate_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuer_certificate_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuer_certificate_id();
  PROTOBUF_NODISCARD std::string* release_issuer_certificate_id();
  void set_allocated_issuer_certificate_id(std::string* issuer_certificate_id);
  private:
  const std::string& _internal_issuer_certificate_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer_certificate_id(const std::string& value);
  std::string* _internal_mutable_issuer_certificate_id();
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.CertificateStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_algorithm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_certificate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_certificate_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class StreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.proto.StreamStats) */ {
 public:
  inline StreamStats() : StreamStats(nullptr) {}
  ~StreamStats() override;
  explicit PROTOBUF_CONSTEXPR StreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStats(const StreamStats& from);
  StreamStats(StreamStats&& from) noexcept
    : StreamStats() {
    *this = ::std::move(from);
  }

  inline StreamStats& operator=(const StreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStats& operator=(StreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStats* internal_default_instance() {
    return reinterpret_cast<const StreamStats*>(
               &_StreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(StreamStats& a, StreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamStats& from) {
    StreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.proto.StreamStats";
  }
  protected:
  explicit StreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStreamIdentifierFieldNumber = 2,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string stream_identifier = 2;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const std::string& stream_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stream_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stream_identifier();
  PROTOBUF_NODISCARD std::string* release_stream_identifier();
  void set_allocated_stream_identifier(std::string* stream_identifier);
  private:
  const std::string& _internal_stream_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_identifier(const std::string& value);
  std::string* _internal_mutable_stream_identifier();
  public:

  // @@protoc_insertion_point(class_scope:livekit.proto.StreamStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RtcStats_Codec

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_Codec::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_Codec::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_Codec::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Codec::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Codec::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Codec.rtc)
  return _internal_rtc();
}
inline void RtcStats_Codec::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Codec.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_Codec::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Codec::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Codec.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Codec::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Codec::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Codec.rtc)
  return _msg;
}
inline void RtcStats_Codec::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Codec.rtc)
}

// required .livekit.proto.CodecStats codec = 2;
inline bool RtcStats_Codec::_internal_has_codec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.codec_ != nullptr);
  return value;
}
inline bool RtcStats_Codec::has_codec() const {
  return _internal_has_codec();
}
inline void RtcStats_Codec::clear_codec() {
  if (_impl_.codec_ != nullptr) _impl_.codec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::CodecStats& RtcStats_Codec::_internal_codec() const {
  const ::livekit::proto::CodecStats* p = _impl_.codec_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::CodecStats&>(
      ::livekit::proto::_CodecStats_default_instance_);
}
inline const ::livekit::proto::CodecStats& RtcStats_Codec::codec() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Codec.codec)
  return _internal_codec();
}
inline void RtcStats_Codec::unsafe_arena_set_allocated_codec(
    ::livekit::proto::CodecStats* codec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.codec_);
  }
  _impl_.codec_ = codec;
  if (codec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Codec.codec)
}
inline ::livekit::proto::CodecStats* RtcStats_Codec::release_codec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::CodecStats* temp = _impl_.codec_;
  _impl_.codec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::CodecStats* RtcStats_Codec::unsafe_arena_release_codec() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Codec.codec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::CodecStats* temp = _impl_.codec_;
  _impl_.codec_ = nullptr;
  return temp;
}
inline ::livekit::proto::CodecStats* RtcStats_Codec::_internal_mutable_codec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.codec_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::CodecStats>(GetArenaForAllocation());
    _impl_.codec_ = p;
  }
  return _impl_.codec_;
}
inline ::livekit::proto::CodecStats* RtcStats_Codec::mutable_codec() {
  ::livekit::proto::CodecStats* _msg = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Codec.codec)
  return _msg;
}
inline void RtcStats_Codec::set_allocated_codec(::livekit::proto::CodecStats* codec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.codec_;
  }
  if (codec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(codec);
    if (message_arena != submessage_arena) {
      codec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, codec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.codec_ = codec;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Codec.codec)
}

// -------------------------------------------------------------------

// RtcStats_InboundRtp

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_InboundRtp::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_InboundRtp::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_InboundRtp::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_InboundRtp::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_InboundRtp::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.InboundRtp.rtc)
  return _internal_rtc();
}
inline void RtcStats_InboundRtp::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.InboundRtp.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_InboundRtp::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_InboundRtp::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.InboundRtp.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_InboundRtp::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_InboundRtp::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.InboundRtp.rtc)
  return _msg;
}
inline void RtcStats_InboundRtp::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.InboundRtp.rtc)
}

// required .livekit.proto.RtpStreamStats stream = 2;
inline bool RtcStats_InboundRtp::_internal_has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_ != nullptr);
  return value;
}
inline bool RtcStats_InboundRtp::has_stream() const {
  return _internal_has_stream();
}
inline void RtcStats_InboundRtp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_InboundRtp::_internal_stream() const {
  const ::livekit::proto::RtpStreamStats* p = _impl_.stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtpStreamStats&>(
      ::livekit::proto::_RtpStreamStats_default_instance_);
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_InboundRtp::stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.InboundRtp.stream)
  return _internal_stream();
}
inline void RtcStats_InboundRtp::unsafe_arena_set_allocated_stream(
    ::livekit::proto::RtpStreamStats* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_);
  }
  _impl_.stream_ = stream;
  if (stream) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.InboundRtp.stream)
}
inline ::livekit::proto::RtpStreamStats* RtcStats_InboundRtp::release_stream() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_InboundRtp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.InboundRtp.stream)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_InboundRtp::_internal_mutable_stream() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtpStreamStats>(GetArenaForAllocation());
    _impl_.stream_ = p;
  }
  return _impl_.stream_;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_InboundRtp::mutable_stream() {
  ::livekit::proto::RtpStreamStats* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.InboundRtp.stream)
  return _msg;
}
inline void RtcStats_InboundRtp::set_allocated_stream(::livekit::proto::RtpStreamStats* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.InboundRtp.stream)
}

// required .livekit.proto.ReceivedRtpStreamStats received = 3;
inline bool RtcStats_InboundRtp::_internal_has_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.received_ != nullptr);
  return value;
}
inline bool RtcStats_InboundRtp::has_received() const {
  return _internal_has_received();
}
inline void RtcStats_InboundRtp::clear_received() {
  if (_impl_.received_ != nullptr) _impl_.received_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::livekit::proto::ReceivedRtpStreamStats& RtcStats_InboundRtp::_internal_received() const {
  const ::livekit::proto::ReceivedRtpStreamStats* p = _impl_.received_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::ReceivedRtpStreamStats&>(
      ::livekit::proto::_ReceivedRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::ReceivedRtpStreamStats& RtcStats_InboundRtp::received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.InboundRtp.received)
  return _internal_received();
}
inline void RtcStats_InboundRtp::unsafe_arena_set_allocated_received(
    ::livekit::proto::ReceivedRtpStreamStats* received) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_);
  }
  _impl_.received_ = received;
  if (received) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.InboundRtp.received)
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_InboundRtp::release_received() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::ReceivedRtpStreamStats* temp = _impl_.received_;
  _impl_.received_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_InboundRtp::unsafe_arena_release_received() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.InboundRtp.received)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::ReceivedRtpStreamStats* temp = _impl_.received_;
  _impl_.received_ = nullptr;
  return temp;
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_InboundRtp::_internal_mutable_received() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.received_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::ReceivedRtpStreamStats>(GetArenaForAllocation());
    _impl_.received_ = p;
  }
  return _impl_.received_;
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_InboundRtp::mutable_received() {
  ::livekit::proto::ReceivedRtpStreamStats* _msg = _internal_mutable_received();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.InboundRtp.received)
  return _msg;
}
inline void RtcStats_InboundRtp::set_allocated_received(::livekit::proto::ReceivedRtpStreamStats* received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.received_;
  }
  if (received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(received);
    if (message_arena != submessage_arena) {
      received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.received_ = received;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.InboundRtp.received)
}

// required .livekit.proto.InboundRtpStreamStats inbound = 4;
inline bool RtcStats_InboundRtp::_internal_has_inbound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inbound_ != nullptr);
  return value;
}
inline bool RtcStats_InboundRtp::has_inbound() const {
  return _internal_has_inbound();
}
inline void RtcStats_InboundRtp::clear_inbound() {
  if (_impl_.inbound_ != nullptr) _impl_.inbound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::livekit::proto::InboundRtpStreamStats& RtcStats_InboundRtp::_internal_inbound() const {
  const ::livekit::proto::InboundRtpStreamStats* p = _impl_.inbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::InboundRtpStreamStats&>(
      ::livekit::proto::_InboundRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::InboundRtpStreamStats& RtcStats_InboundRtp::inbound() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.InboundRtp.inbound)
  return _internal_inbound();
}
inline void RtcStats_InboundRtp::unsafe_arena_set_allocated_inbound(
    ::livekit::proto::InboundRtpStreamStats* inbound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inbound_);
  }
  _impl_.inbound_ = inbound;
  if (inbound) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.InboundRtp.inbound)
}
inline ::livekit::proto::InboundRtpStreamStats* RtcStats_InboundRtp::release_inbound() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::InboundRtpStreamStats* temp = _impl_.inbound_;
  _impl_.inbound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::InboundRtpStreamStats* RtcStats_InboundRtp::unsafe_arena_release_inbound() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.InboundRtp.inbound)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::InboundRtpStreamStats* temp = _impl_.inbound_;
  _impl_.inbound_ = nullptr;
  return temp;
}
inline ::livekit::proto::InboundRtpStreamStats* RtcStats_InboundRtp::_internal_mutable_inbound() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.inbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::InboundRtpStreamStats>(GetArenaForAllocation());
    _impl_.inbound_ = p;
  }
  return _impl_.inbound_;
}
inline ::livekit::proto::InboundRtpStreamStats* RtcStats_InboundRtp::mutable_inbound() {
  ::livekit::proto::InboundRtpStreamStats* _msg = _internal_mutable_inbound();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.InboundRtp.inbound)
  return _msg;
}
inline void RtcStats_InboundRtp::set_allocated_inbound(::livekit::proto::InboundRtpStreamStats* inbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inbound_;
  }
  if (inbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inbound);
    if (message_arena != submessage_arena) {
      inbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inbound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.inbound_ = inbound;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.InboundRtp.inbound)
}

// -------------------------------------------------------------------

// RtcStats_OutboundRtp

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_OutboundRtp::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_OutboundRtp::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_OutboundRtp::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_OutboundRtp::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_OutboundRtp::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.OutboundRtp.rtc)
  return _internal_rtc();
}
inline void RtcStats_OutboundRtp::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.OutboundRtp.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_OutboundRtp::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_OutboundRtp::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.OutboundRtp.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_OutboundRtp::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_OutboundRtp::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.OutboundRtp.rtc)
  return _msg;
}
inline void RtcStats_OutboundRtp::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.OutboundRtp.rtc)
}

// required .livekit.proto.RtpStreamStats stream = 2;
inline bool RtcStats_OutboundRtp::_internal_has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_ != nullptr);
  return value;
}
inline bool RtcStats_OutboundRtp::has_stream() const {
  return _internal_has_stream();
}
inline void RtcStats_OutboundRtp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_OutboundRtp::_internal_stream() const {
  const ::livekit::proto::RtpStreamStats* p = _impl_.stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtpStreamStats&>(
      ::livekit::proto::_RtpStreamStats_default_instance_);
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_OutboundRtp::stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.OutboundRtp.stream)
  return _internal_stream();
}
inline void RtcStats_OutboundRtp::unsafe_arena_set_allocated_stream(
    ::livekit::proto::RtpStreamStats* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_);
  }
  _impl_.stream_ = stream;
  if (stream) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.OutboundRtp.stream)
}
inline ::livekit::proto::RtpStreamStats* RtcStats_OutboundRtp::release_stream() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_OutboundRtp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.OutboundRtp.stream)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_OutboundRtp::_internal_mutable_stream() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtpStreamStats>(GetArenaForAllocation());
    _impl_.stream_ = p;
  }
  return _impl_.stream_;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_OutboundRtp::mutable_stream() {
  ::livekit::proto::RtpStreamStats* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.OutboundRtp.stream)
  return _msg;
}
inline void RtcStats_OutboundRtp::set_allocated_stream(::livekit::proto::RtpStreamStats* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.OutboundRtp.stream)
}

// required .livekit.proto.SentRtpStreamStats sent = 3;
inline bool RtcStats_OutboundRtp::_internal_has_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sent_ != nullptr);
  return value;
}
inline bool RtcStats_OutboundRtp::has_sent() const {
  return _internal_has_sent();
}
inline void RtcStats_OutboundRtp::clear_sent() {
  if (_impl_.sent_ != nullptr) _impl_.sent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::livekit::proto::SentRtpStreamStats& RtcStats_OutboundRtp::_internal_sent() const {
  const ::livekit::proto::SentRtpStreamStats* p = _impl_.sent_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::SentRtpStreamStats&>(
      ::livekit::proto::_SentRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::SentRtpStreamStats& RtcStats_OutboundRtp::sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.OutboundRtp.sent)
  return _internal_sent();
}
inline void RtcStats_OutboundRtp::unsafe_arena_set_allocated_sent(
    ::livekit::proto::SentRtpStreamStats* sent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sent_);
  }
  _impl_.sent_ = sent;
  if (sent) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.OutboundRtp.sent)
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_OutboundRtp::release_sent() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::SentRtpStreamStats* temp = _impl_.sent_;
  _impl_.sent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_OutboundRtp::unsafe_arena_release_sent() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.OutboundRtp.sent)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::SentRtpStreamStats* temp = _impl_.sent_;
  _impl_.sent_ = nullptr;
  return temp;
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_OutboundRtp::_internal_mutable_sent() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sent_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::SentRtpStreamStats>(GetArenaForAllocation());
    _impl_.sent_ = p;
  }
  return _impl_.sent_;
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_OutboundRtp::mutable_sent() {
  ::livekit::proto::SentRtpStreamStats* _msg = _internal_mutable_sent();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.OutboundRtp.sent)
  return _msg;
}
inline void RtcStats_OutboundRtp::set_allocated_sent(::livekit::proto::SentRtpStreamStats* sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sent_;
  }
  if (sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sent);
    if (message_arena != submessage_arena) {
      sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sent_ = sent;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.OutboundRtp.sent)
}

// required .livekit.proto.OutboundRtpStreamStats outbound = 4;
inline bool RtcStats_OutboundRtp::_internal_has_outbound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outbound_ != nullptr);
  return value;
}
inline bool RtcStats_OutboundRtp::has_outbound() const {
  return _internal_has_outbound();
}
inline void RtcStats_OutboundRtp::clear_outbound() {
  if (_impl_.outbound_ != nullptr) _impl_.outbound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::livekit::proto::OutboundRtpStreamStats& RtcStats_OutboundRtp::_internal_outbound() const {
  const ::livekit::proto::OutboundRtpStreamStats* p = _impl_.outbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::OutboundRtpStreamStats&>(
      ::livekit::proto::_OutboundRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::OutboundRtpStreamStats& RtcStats_OutboundRtp::outbound() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.OutboundRtp.outbound)
  return _internal_outbound();
}
inline void RtcStats_OutboundRtp::unsafe_arena_set_allocated_outbound(
    ::livekit::proto::OutboundRtpStreamStats* outbound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outbound_);
  }
  _impl_.outbound_ = outbound;
  if (outbound) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.OutboundRtp.outbound)
}
inline ::livekit::proto::OutboundRtpStreamStats* RtcStats_OutboundRtp::release_outbound() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::OutboundRtpStreamStats* temp = _impl_.outbound_;
  _impl_.outbound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::OutboundRtpStreamStats* RtcStats_OutboundRtp::unsafe_arena_release_outbound() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.OutboundRtp.outbound)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::OutboundRtpStreamStats* temp = _impl_.outbound_;
  _impl_.outbound_ = nullptr;
  return temp;
}
inline ::livekit::proto::OutboundRtpStreamStats* RtcStats_OutboundRtp::_internal_mutable_outbound() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.outbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::OutboundRtpStreamStats>(GetArenaForAllocation());
    _impl_.outbound_ = p;
  }
  return _impl_.outbound_;
}
inline ::livekit::proto::OutboundRtpStreamStats* RtcStats_OutboundRtp::mutable_outbound() {
  ::livekit::proto::OutboundRtpStreamStats* _msg = _internal_mutable_outbound();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.OutboundRtp.outbound)
  return _msg;
}
inline void RtcStats_OutboundRtp::set_allocated_outbound(::livekit::proto::OutboundRtpStreamStats* outbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.outbound_;
  }
  if (outbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outbound);
    if (message_arena != submessage_arena) {
      outbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outbound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.outbound_ = outbound;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.OutboundRtp.outbound)
}

// -------------------------------------------------------------------

// RtcStats_RemoteInboundRtp

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_RemoteInboundRtp::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteInboundRtp::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_RemoteInboundRtp::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_RemoteInboundRtp::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_RemoteInboundRtp::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteInboundRtp.rtc)
  return _internal_rtc();
}
inline void RtcStats_RemoteInboundRtp::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteInboundRtp::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteInboundRtp::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteInboundRtp.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteInboundRtp::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteInboundRtp::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteInboundRtp.rtc)
  return _msg;
}
inline void RtcStats_RemoteInboundRtp::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.rtc)
}

// required .livekit.proto.RtpStreamStats stream = 2;
inline bool RtcStats_RemoteInboundRtp::_internal_has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteInboundRtp::has_stream() const {
  return _internal_has_stream();
}
inline void RtcStats_RemoteInboundRtp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_RemoteInboundRtp::_internal_stream() const {
  const ::livekit::proto::RtpStreamStats* p = _impl_.stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtpStreamStats&>(
      ::livekit::proto::_RtpStreamStats_default_instance_);
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_RemoteInboundRtp::stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteInboundRtp.stream)
  return _internal_stream();
}
inline void RtcStats_RemoteInboundRtp::unsafe_arena_set_allocated_stream(
    ::livekit::proto::RtpStreamStats* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_);
  }
  _impl_.stream_ = stream;
  if (stream) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.stream)
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteInboundRtp::release_stream() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteInboundRtp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteInboundRtp.stream)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteInboundRtp::_internal_mutable_stream() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtpStreamStats>(GetArenaForAllocation());
    _impl_.stream_ = p;
  }
  return _impl_.stream_;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteInboundRtp::mutable_stream() {
  ::livekit::proto::RtpStreamStats* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteInboundRtp.stream)
  return _msg;
}
inline void RtcStats_RemoteInboundRtp::set_allocated_stream(::livekit::proto::RtpStreamStats* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.stream)
}

// required .livekit.proto.ReceivedRtpStreamStats received = 3;
inline bool RtcStats_RemoteInboundRtp::_internal_has_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.received_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteInboundRtp::has_received() const {
  return _internal_has_received();
}
inline void RtcStats_RemoteInboundRtp::clear_received() {
  if (_impl_.received_ != nullptr) _impl_.received_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::livekit::proto::ReceivedRtpStreamStats& RtcStats_RemoteInboundRtp::_internal_received() const {
  const ::livekit::proto::ReceivedRtpStreamStats* p = _impl_.received_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::ReceivedRtpStreamStats&>(
      ::livekit::proto::_ReceivedRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::ReceivedRtpStreamStats& RtcStats_RemoteInboundRtp::received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteInboundRtp.received)
  return _internal_received();
}
inline void RtcStats_RemoteInboundRtp::unsafe_arena_set_allocated_received(
    ::livekit::proto::ReceivedRtpStreamStats* received) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_);
  }
  _impl_.received_ = received;
  if (received) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.received)
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_RemoteInboundRtp::release_received() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::ReceivedRtpStreamStats* temp = _impl_.received_;
  _impl_.received_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_RemoteInboundRtp::unsafe_arena_release_received() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteInboundRtp.received)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::ReceivedRtpStreamStats* temp = _impl_.received_;
  _impl_.received_ = nullptr;
  return temp;
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_RemoteInboundRtp::_internal_mutable_received() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.received_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::ReceivedRtpStreamStats>(GetArenaForAllocation());
    _impl_.received_ = p;
  }
  return _impl_.received_;
}
inline ::livekit::proto::ReceivedRtpStreamStats* RtcStats_RemoteInboundRtp::mutable_received() {
  ::livekit::proto::ReceivedRtpStreamStats* _msg = _internal_mutable_received();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteInboundRtp.received)
  return _msg;
}
inline void RtcStats_RemoteInboundRtp::set_allocated_received(::livekit::proto::ReceivedRtpStreamStats* received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.received_;
  }
  if (received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(received);
    if (message_arena != submessage_arena) {
      received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.received_ = received;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.received)
}

// required .livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
inline bool RtcStats_RemoteInboundRtp::_internal_has_remote_inbound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remote_inbound_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteInboundRtp::has_remote_inbound() const {
  return _internal_has_remote_inbound();
}
inline void RtcStats_RemoteInboundRtp::clear_remote_inbound() {
  if (_impl_.remote_inbound_ != nullptr) _impl_.remote_inbound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::livekit::proto::RemoteInboundRtpStreamStats& RtcStats_RemoteInboundRtp::_internal_remote_inbound() const {
  const ::livekit::proto::RemoteInboundRtpStreamStats* p = _impl_.remote_inbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RemoteInboundRtpStreamStats&>(
      ::livekit::proto::_RemoteInboundRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::RemoteInboundRtpStreamStats& RtcStats_RemoteInboundRtp::remote_inbound() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteInboundRtp.remote_inbound)
  return _internal_remote_inbound();
}
inline void RtcStats_RemoteInboundRtp::unsafe_arena_set_allocated_remote_inbound(
    ::livekit::proto::RemoteInboundRtpStreamStats* remote_inbound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remote_inbound_);
  }
  _impl_.remote_inbound_ = remote_inbound;
  if (remote_inbound) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.remote_inbound)
}
inline ::livekit::proto::RemoteInboundRtpStreamStats* RtcStats_RemoteInboundRtp::release_remote_inbound() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::RemoteInboundRtpStreamStats* temp = _impl_.remote_inbound_;
  _impl_.remote_inbound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RemoteInboundRtpStreamStats* RtcStats_RemoteInboundRtp::unsafe_arena_release_remote_inbound() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteInboundRtp.remote_inbound)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::RemoteInboundRtpStreamStats* temp = _impl_.remote_inbound_;
  _impl_.remote_inbound_ = nullptr;
  return temp;
}
inline ::livekit::proto::RemoteInboundRtpStreamStats* RtcStats_RemoteInboundRtp::_internal_mutable_remote_inbound() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.remote_inbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RemoteInboundRtpStreamStats>(GetArenaForAllocation());
    _impl_.remote_inbound_ = p;
  }
  return _impl_.remote_inbound_;
}
inline ::livekit::proto::RemoteInboundRtpStreamStats* RtcStats_RemoteInboundRtp::mutable_remote_inbound() {
  ::livekit::proto::RemoteInboundRtpStreamStats* _msg = _internal_mutable_remote_inbound();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteInboundRtp.remote_inbound)
  return _msg;
}
inline void RtcStats_RemoteInboundRtp::set_allocated_remote_inbound(::livekit::proto::RemoteInboundRtpStreamStats* remote_inbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.remote_inbound_;
  }
  if (remote_inbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remote_inbound);
    if (message_arena != submessage_arena) {
      remote_inbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_inbound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.remote_inbound_ = remote_inbound;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteInboundRtp.remote_inbound)
}

// -------------------------------------------------------------------

// RtcStats_RemoteOutboundRtp

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_RemoteOutboundRtp::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteOutboundRtp::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_RemoteOutboundRtp::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_RemoteOutboundRtp::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_RemoteOutboundRtp::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteOutboundRtp.rtc)
  return _internal_rtc();
}
inline void RtcStats_RemoteOutboundRtp::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteOutboundRtp::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteOutboundRtp::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteOutboundRtp.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteOutboundRtp::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteOutboundRtp::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteOutboundRtp.rtc)
  return _msg;
}
inline void RtcStats_RemoteOutboundRtp::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.rtc)
}

// required .livekit.proto.RtpStreamStats stream = 2;
inline bool RtcStats_RemoteOutboundRtp::_internal_has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteOutboundRtp::has_stream() const {
  return _internal_has_stream();
}
inline void RtcStats_RemoteOutboundRtp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_RemoteOutboundRtp::_internal_stream() const {
  const ::livekit::proto::RtpStreamStats* p = _impl_.stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtpStreamStats&>(
      ::livekit::proto::_RtpStreamStats_default_instance_);
}
inline const ::livekit::proto::RtpStreamStats& RtcStats_RemoteOutboundRtp::stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteOutboundRtp.stream)
  return _internal_stream();
}
inline void RtcStats_RemoteOutboundRtp::unsafe_arena_set_allocated_stream(
    ::livekit::proto::RtpStreamStats* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_);
  }
  _impl_.stream_ = stream;
  if (stream) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.stream)
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteOutboundRtp::release_stream() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteOutboundRtp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteOutboundRtp.stream)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::RtpStreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteOutboundRtp::_internal_mutable_stream() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtpStreamStats>(GetArenaForAllocation());
    _impl_.stream_ = p;
  }
  return _impl_.stream_;
}
inline ::livekit::proto::RtpStreamStats* RtcStats_RemoteOutboundRtp::mutable_stream() {
  ::livekit::proto::RtpStreamStats* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteOutboundRtp.stream)
  return _msg;
}
inline void RtcStats_RemoteOutboundRtp::set_allocated_stream(::livekit::proto::RtpStreamStats* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.stream)
}

// required .livekit.proto.SentRtpStreamStats sent = 3;
inline bool RtcStats_RemoteOutboundRtp::_internal_has_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sent_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteOutboundRtp::has_sent() const {
  return _internal_has_sent();
}
inline void RtcStats_RemoteOutboundRtp::clear_sent() {
  if (_impl_.sent_ != nullptr) _impl_.sent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::livekit::proto::SentRtpStreamStats& RtcStats_RemoteOutboundRtp::_internal_sent() const {
  const ::livekit::proto::SentRtpStreamStats* p = _impl_.sent_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::SentRtpStreamStats&>(
      ::livekit::proto::_SentRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::SentRtpStreamStats& RtcStats_RemoteOutboundRtp::sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteOutboundRtp.sent)
  return _internal_sent();
}
inline void RtcStats_RemoteOutboundRtp::unsafe_arena_set_allocated_sent(
    ::livekit::proto::SentRtpStreamStats* sent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sent_);
  }
  _impl_.sent_ = sent;
  if (sent) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.sent)
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_RemoteOutboundRtp::release_sent() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::SentRtpStreamStats* temp = _impl_.sent_;
  _impl_.sent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_RemoteOutboundRtp::unsafe_arena_release_sent() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteOutboundRtp.sent)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::SentRtpStreamStats* temp = _impl_.sent_;
  _impl_.sent_ = nullptr;
  return temp;
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_RemoteOutboundRtp::_internal_mutable_sent() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sent_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::SentRtpStreamStats>(GetArenaForAllocation());
    _impl_.sent_ = p;
  }
  return _impl_.sent_;
}
inline ::livekit::proto::SentRtpStreamStats* RtcStats_RemoteOutboundRtp::mutable_sent() {
  ::livekit::proto::SentRtpStreamStats* _msg = _internal_mutable_sent();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteOutboundRtp.sent)
  return _msg;
}
inline void RtcStats_RemoteOutboundRtp::set_allocated_sent(::livekit::proto::SentRtpStreamStats* sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sent_;
  }
  if (sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sent);
    if (message_arena != submessage_arena) {
      sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sent_ = sent;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.sent)
}

// required .livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
inline bool RtcStats_RemoteOutboundRtp::_internal_has_remote_outbound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remote_outbound_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteOutboundRtp::has_remote_outbound() const {
  return _internal_has_remote_outbound();
}
inline void RtcStats_RemoteOutboundRtp::clear_remote_outbound() {
  if (_impl_.remote_outbound_ != nullptr) _impl_.remote_outbound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::livekit::proto::RemoteOutboundRtpStreamStats& RtcStats_RemoteOutboundRtp::_internal_remote_outbound() const {
  const ::livekit::proto::RemoteOutboundRtpStreamStats* p = _impl_.remote_outbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RemoteOutboundRtpStreamStats&>(
      ::livekit::proto::_RemoteOutboundRtpStreamStats_default_instance_);
}
inline const ::livekit::proto::RemoteOutboundRtpStreamStats& RtcStats_RemoteOutboundRtp::remote_outbound() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteOutboundRtp.remote_outbound)
  return _internal_remote_outbound();
}
inline void RtcStats_RemoteOutboundRtp::unsafe_arena_set_allocated_remote_outbound(
    ::livekit::proto::RemoteOutboundRtpStreamStats* remote_outbound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remote_outbound_);
  }
  _impl_.remote_outbound_ = remote_outbound;
  if (remote_outbound) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.remote_outbound)
}
inline ::livekit::proto::RemoteOutboundRtpStreamStats* RtcStats_RemoteOutboundRtp::release_remote_outbound() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::RemoteOutboundRtpStreamStats* temp = _impl_.remote_outbound_;
  _impl_.remote_outbound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RemoteOutboundRtpStreamStats* RtcStats_RemoteOutboundRtp::unsafe_arena_release_remote_outbound() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteOutboundRtp.remote_outbound)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::RemoteOutboundRtpStreamStats* temp = _impl_.remote_outbound_;
  _impl_.remote_outbound_ = nullptr;
  return temp;
}
inline ::livekit::proto::RemoteOutboundRtpStreamStats* RtcStats_RemoteOutboundRtp::_internal_mutable_remote_outbound() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.remote_outbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RemoteOutboundRtpStreamStats>(GetArenaForAllocation());
    _impl_.remote_outbound_ = p;
  }
  return _impl_.remote_outbound_;
}
inline ::livekit::proto::RemoteOutboundRtpStreamStats* RtcStats_RemoteOutboundRtp::mutable_remote_outbound() {
  ::livekit::proto::RemoteOutboundRtpStreamStats* _msg = _internal_mutable_remote_outbound();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteOutboundRtp.remote_outbound)
  return _msg;
}
inline void RtcStats_RemoteOutboundRtp::set_allocated_remote_outbound(::livekit::proto::RemoteOutboundRtpStreamStats* remote_outbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.remote_outbound_;
  }
  if (remote_outbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remote_outbound);
    if (message_arena != submessage_arena) {
      remote_outbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_outbound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.remote_outbound_ = remote_outbound;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteOutboundRtp.remote_outbound)
}

// -------------------------------------------------------------------

// RtcStats_MediaSource

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_MediaSource::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_MediaSource::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_MediaSource::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_MediaSource::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_MediaSource::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.MediaSource.rtc)
  return _internal_rtc();
}
inline void RtcStats_MediaSource::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.MediaSource.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaSource::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaSource::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.MediaSource.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaSource::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaSource::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.MediaSource.rtc)
  return _msg;
}
inline void RtcStats_MediaSource::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.MediaSource.rtc)
}

// required .livekit.proto.MediaSourceStats source = 2;
inline bool RtcStats_MediaSource::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
  return value;
}
inline bool RtcStats_MediaSource::has_source() const {
  return _internal_has_source();
}
inline void RtcStats_MediaSource::clear_source() {
  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::MediaSourceStats& RtcStats_MediaSource::_internal_source() const {
  const ::livekit::proto::MediaSourceStats* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::MediaSourceStats&>(
      ::livekit::proto::_MediaSourceStats_default_instance_);
}
inline const ::livekit::proto::MediaSourceStats& RtcStats_MediaSource::source() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.MediaSource.source)
  return _internal_source();
}
inline void RtcStats_MediaSource::unsafe_arena_set_allocated_source(
    ::livekit::proto::MediaSourceStats* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = source;
  if (source) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.MediaSource.source)
}
inline ::livekit::proto::MediaSourceStats* RtcStats_MediaSource::release_source() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::MediaSourceStats* temp = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::MediaSourceStats* RtcStats_MediaSource::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.MediaSource.source)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::MediaSourceStats* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::livekit::proto::MediaSourceStats* RtcStats_MediaSource::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::MediaSourceStats>(GetArenaForAllocation());
    _impl_.source_ = p;
  }
  return _impl_.source_;
}
inline ::livekit::proto::MediaSourceStats* RtcStats_MediaSource::mutable_source() {
  ::livekit::proto::MediaSourceStats* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.MediaSource.source)
  return _msg;
}
inline void RtcStats_MediaSource::set_allocated_source(::livekit::proto::MediaSourceStats* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.MediaSource.source)
}

// required .livekit.proto.AudioSourceStats audio = 3;
inline bool RtcStats_MediaSource::_internal_has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline bool RtcStats_MediaSource::has_audio() const {
  return _internal_has_audio();
}
inline void RtcStats_MediaSource::clear_audio() {
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::livekit::proto::AudioSourceStats& RtcStats_MediaSource::_internal_audio() const {
  const ::livekit::proto::AudioSourceStats* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::AudioSourceStats&>(
      ::livekit::proto::_AudioSourceStats_default_instance_);
}
inline const ::livekit::proto::AudioSourceStats& RtcStats_MediaSource::audio() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.MediaSource.audio)
  return _internal_audio();
}
inline void RtcStats_MediaSource::unsafe_arena_set_allocated_audio(
    ::livekit::proto::AudioSourceStats* audio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = audio;
  if (audio) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.MediaSource.audio)
}
inline ::livekit::proto::AudioSourceStats* RtcStats_MediaSource::release_audio() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::AudioSourceStats* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::AudioSourceStats* RtcStats_MediaSource::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.MediaSource.audio)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::proto::AudioSourceStats* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::livekit::proto::AudioSourceStats* RtcStats_MediaSource::_internal_mutable_audio() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::AudioSourceStats>(GetArenaForAllocation());
    _impl_.audio_ = p;
  }
  return _impl_.audio_;
}
inline ::livekit::proto::AudioSourceStats* RtcStats_MediaSource::mutable_audio() {
  ::livekit::proto::AudioSourceStats* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.MediaSource.audio)
  return _msg;
}
inline void RtcStats_MediaSource::set_allocated_audio(::livekit::proto::AudioSourceStats* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.MediaSource.audio)
}

// required .livekit.proto.VideoSourceStats video = 4;
inline bool RtcStats_MediaSource::_internal_has_video() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.video_ != nullptr);
  return value;
}
inline bool RtcStats_MediaSource::has_video() const {
  return _internal_has_video();
}
inline void RtcStats_MediaSource::clear_video() {
  if (_impl_.video_ != nullptr) _impl_.video_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::livekit::proto::VideoSourceStats& RtcStats_MediaSource::_internal_video() const {
  const ::livekit::proto::VideoSourceStats* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::VideoSourceStats&>(
      ::livekit::proto::_VideoSourceStats_default_instance_);
}
inline const ::livekit::proto::VideoSourceStats& RtcStats_MediaSource::video() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.MediaSource.video)
  return _internal_video();
}
inline void RtcStats_MediaSource::unsafe_arena_set_allocated_video(
    ::livekit::proto::VideoSourceStats* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.MediaSource.video)
}
inline ::livekit::proto::VideoSourceStats* RtcStats_MediaSource::release_video() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::VideoSourceStats* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::VideoSourceStats* RtcStats_MediaSource::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.MediaSource.video)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::proto::VideoSourceStats* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::livekit::proto::VideoSourceStats* RtcStats_MediaSource::_internal_mutable_video() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::VideoSourceStats>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::livekit::proto::VideoSourceStats* RtcStats_MediaSource::mutable_video() {
  ::livekit::proto::VideoSourceStats* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.MediaSource.video)
  return _msg;
}
inline void RtcStats_MediaSource::set_allocated_video(::livekit::proto::VideoSourceStats* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.MediaSource.video)
}

// -------------------------------------------------------------------

// RtcStats_MediaPlayout

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_MediaPlayout::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_MediaPlayout::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_MediaPlayout::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_MediaPlayout::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_MediaPlayout::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.MediaPlayout.rtc)
  return _internal_rtc();
}
inline void RtcStats_MediaPlayout::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.MediaPlayout.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaPlayout::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaPlayout::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.MediaPlayout.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaPlayout::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_MediaPlayout::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.MediaPlayout.rtc)
  return _msg;
}
inline void RtcStats_MediaPlayout::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.MediaPlayout.rtc)
}

// required .livekit.proto.AudioPlayoutStats audio_playout = 2;
inline bool RtcStats_MediaPlayout::_internal_has_audio_playout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_playout_ != nullptr);
  return value;
}
inline bool RtcStats_MediaPlayout::has_audio_playout() const {
  return _internal_has_audio_playout();
}
inline void RtcStats_MediaPlayout::clear_audio_playout() {
  if (_impl_.audio_playout_ != nullptr) _impl_.audio_playout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::AudioPlayoutStats& RtcStats_MediaPlayout::_internal_audio_playout() const {
  const ::livekit::proto::AudioPlayoutStats* p = _impl_.audio_playout_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::AudioPlayoutStats&>(
      ::livekit::proto::_AudioPlayoutStats_default_instance_);
}
inline const ::livekit::proto::AudioPlayoutStats& RtcStats_MediaPlayout::audio_playout() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.MediaPlayout.audio_playout)
  return _internal_audio_playout();
}
inline void RtcStats_MediaPlayout::unsafe_arena_set_allocated_audio_playout(
    ::livekit::proto::AudioPlayoutStats* audio_playout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_playout_);
  }
  _impl_.audio_playout_ = audio_playout;
  if (audio_playout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.MediaPlayout.audio_playout)
}
inline ::livekit::proto::AudioPlayoutStats* RtcStats_MediaPlayout::release_audio_playout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::AudioPlayoutStats* temp = _impl_.audio_playout_;
  _impl_.audio_playout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::AudioPlayoutStats* RtcStats_MediaPlayout::unsafe_arena_release_audio_playout() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.MediaPlayout.audio_playout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::AudioPlayoutStats* temp = _impl_.audio_playout_;
  _impl_.audio_playout_ = nullptr;
  return temp;
}
inline ::livekit::proto::AudioPlayoutStats* RtcStats_MediaPlayout::_internal_mutable_audio_playout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.audio_playout_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::AudioPlayoutStats>(GetArenaForAllocation());
    _impl_.audio_playout_ = p;
  }
  return _impl_.audio_playout_;
}
inline ::livekit::proto::AudioPlayoutStats* RtcStats_MediaPlayout::mutable_audio_playout() {
  ::livekit::proto::AudioPlayoutStats* _msg = _internal_mutable_audio_playout();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.MediaPlayout.audio_playout)
  return _msg;
}
inline void RtcStats_MediaPlayout::set_allocated_audio_playout(::livekit::proto::AudioPlayoutStats* audio_playout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.audio_playout_;
  }
  if (audio_playout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio_playout);
    if (message_arena != submessage_arena) {
      audio_playout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_playout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.audio_playout_ = audio_playout;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.MediaPlayout.audio_playout)
}

// -------------------------------------------------------------------

// RtcStats_PeerConnection

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_PeerConnection::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_PeerConnection::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_PeerConnection::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_PeerConnection::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_PeerConnection::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.PeerConnection.rtc)
  return _internal_rtc();
}
inline void RtcStats_PeerConnection::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.PeerConnection.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_PeerConnection::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_PeerConnection::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.PeerConnection.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_PeerConnection::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_PeerConnection::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.PeerConnection.rtc)
  return _msg;
}
inline void RtcStats_PeerConnection::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.PeerConnection.rtc)
}

// required .livekit.proto.PeerConnectionStats pc = 2;
inline bool RtcStats_PeerConnection::_internal_has_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pc_ != nullptr);
  return value;
}
inline bool RtcStats_PeerConnection::has_pc() const {
  return _internal_has_pc();
}
inline void RtcStats_PeerConnection::clear_pc() {
  if (_impl_.pc_ != nullptr) _impl_.pc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::PeerConnectionStats& RtcStats_PeerConnection::_internal_pc() const {
  const ::livekit::proto::PeerConnectionStats* p = _impl_.pc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::PeerConnectionStats&>(
      ::livekit::proto::_PeerConnectionStats_default_instance_);
}
inline const ::livekit::proto::PeerConnectionStats& RtcStats_PeerConnection::pc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.PeerConnection.pc)
  return _internal_pc();
}
inline void RtcStats_PeerConnection::unsafe_arena_set_allocated_pc(
    ::livekit::proto::PeerConnectionStats* pc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pc_);
  }
  _impl_.pc_ = pc;
  if (pc) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.PeerConnection.pc)
}
inline ::livekit::proto::PeerConnectionStats* RtcStats_PeerConnection::release_pc() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::PeerConnectionStats* temp = _impl_.pc_;
  _impl_.pc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::PeerConnectionStats* RtcStats_PeerConnection::unsafe_arena_release_pc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.PeerConnection.pc)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::PeerConnectionStats* temp = _impl_.pc_;
  _impl_.pc_ = nullptr;
  return temp;
}
inline ::livekit::proto::PeerConnectionStats* RtcStats_PeerConnection::_internal_mutable_pc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::PeerConnectionStats>(GetArenaForAllocation());
    _impl_.pc_ = p;
  }
  return _impl_.pc_;
}
inline ::livekit::proto::PeerConnectionStats* RtcStats_PeerConnection::mutable_pc() {
  ::livekit::proto::PeerConnectionStats* _msg = _internal_mutable_pc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.PeerConnection.pc)
  return _msg;
}
inline void RtcStats_PeerConnection::set_allocated_pc(::livekit::proto::PeerConnectionStats* pc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pc_;
  }
  if (pc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pc);
    if (message_arena != submessage_arena) {
      pc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pc_ = pc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.PeerConnection.pc)
}

// -------------------------------------------------------------------

// RtcStats_DataChannel

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_DataChannel::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_DataChannel::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_DataChannel::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_DataChannel::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_DataChannel::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.DataChannel.rtc)
  return _internal_rtc();
}
inline void RtcStats_DataChannel::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.DataChannel.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_DataChannel::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_DataChannel::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.DataChannel.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_DataChannel::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_DataChannel::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.DataChannel.rtc)
  return _msg;
}
inline void RtcStats_DataChannel::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.DataChannel.rtc)
}

// required .livekit.proto.DataChannelStats dc = 2;
inline bool RtcStats_DataChannel::_internal_has_dc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dc_ != nullptr);
  return value;
}
inline bool RtcStats_DataChannel::has_dc() const {
  return _internal_has_dc();
}
inline void RtcStats_DataChannel::clear_dc() {
  if (_impl_.dc_ != nullptr) _impl_.dc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::DataChannelStats& RtcStats_DataChannel::_internal_dc() const {
  const ::livekit::proto::DataChannelStats* p = _impl_.dc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::DataChannelStats&>(
      ::livekit::proto::_DataChannelStats_default_instance_);
}
inline const ::livekit::proto::DataChannelStats& RtcStats_DataChannel::dc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.DataChannel.dc)
  return _internal_dc();
}
inline void RtcStats_DataChannel::unsafe_arena_set_allocated_dc(
    ::livekit::proto::DataChannelStats* dc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dc_);
  }
  _impl_.dc_ = dc;
  if (dc) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.DataChannel.dc)
}
inline ::livekit::proto::DataChannelStats* RtcStats_DataChannel::release_dc() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::DataChannelStats* temp = _impl_.dc_;
  _impl_.dc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::DataChannelStats* RtcStats_DataChannel::unsafe_arena_release_dc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.DataChannel.dc)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::DataChannelStats* temp = _impl_.dc_;
  _impl_.dc_ = nullptr;
  return temp;
}
inline ::livekit::proto::DataChannelStats* RtcStats_DataChannel::_internal_mutable_dc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::DataChannelStats>(GetArenaForAllocation());
    _impl_.dc_ = p;
  }
  return _impl_.dc_;
}
inline ::livekit::proto::DataChannelStats* RtcStats_DataChannel::mutable_dc() {
  ::livekit::proto::DataChannelStats* _msg = _internal_mutable_dc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.DataChannel.dc)
  return _msg;
}
inline void RtcStats_DataChannel::set_allocated_dc(::livekit::proto::DataChannelStats* dc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dc_;
  }
  if (dc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dc);
    if (message_arena != submessage_arena) {
      dc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dc_ = dc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.DataChannel.dc)
}

// -------------------------------------------------------------------

// RtcStats_Transport

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_Transport::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_Transport::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_Transport::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Transport::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Transport::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Transport.rtc)
  return _internal_rtc();
}
inline void RtcStats_Transport::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Transport.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_Transport::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Transport::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Transport.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Transport::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Transport::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Transport.rtc)
  return _msg;
}
inline void RtcStats_Transport::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Transport.rtc)
}

// required .livekit.proto.TransportStats transport = 2;
inline bool RtcStats_Transport::_internal_has_transport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transport_ != nullptr);
  return value;
}
inline bool RtcStats_Transport::has_transport() const {
  return _internal_has_transport();
}
inline void RtcStats_Transport::clear_transport() {
  if (_impl_.transport_ != nullptr) _impl_.transport_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::TransportStats& RtcStats_Transport::_internal_transport() const {
  const ::livekit::proto::TransportStats* p = _impl_.transport_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::TransportStats&>(
      ::livekit::proto::_TransportStats_default_instance_);
}
inline const ::livekit::proto::TransportStats& RtcStats_Transport::transport() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Transport.transport)
  return _internal_transport();
}
inline void RtcStats_Transport::unsafe_arena_set_allocated_transport(
    ::livekit::proto::TransportStats* transport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transport_);
  }
  _impl_.transport_ = transport;
  if (transport) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Transport.transport)
}
inline ::livekit::proto::TransportStats* RtcStats_Transport::release_transport() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::TransportStats* temp = _impl_.transport_;
  _impl_.transport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::TransportStats* RtcStats_Transport::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Transport.transport)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::TransportStats* temp = _impl_.transport_;
  _impl_.transport_ = nullptr;
  return temp;
}
inline ::livekit::proto::TransportStats* RtcStats_Transport::_internal_mutable_transport() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::TransportStats>(GetArenaForAllocation());
    _impl_.transport_ = p;
  }
  return _impl_.transport_;
}
inline ::livekit::proto::TransportStats* RtcStats_Transport::mutable_transport() {
  ::livekit::proto::TransportStats* _msg = _internal_mutable_transport();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Transport.transport)
  return _msg;
}
inline void RtcStats_Transport::set_allocated_transport(::livekit::proto::TransportStats* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Transport.transport)
}

// -------------------------------------------------------------------

// RtcStats_CandidatePair

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_CandidatePair::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_CandidatePair::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_CandidatePair::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_CandidatePair::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_CandidatePair::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.CandidatePair.rtc)
  return _internal_rtc();
}
inline void RtcStats_CandidatePair::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.CandidatePair.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_CandidatePair::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_CandidatePair::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.CandidatePair.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_CandidatePair::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_CandidatePair::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.CandidatePair.rtc)
  return _msg;
}
inline void RtcStats_CandidatePair::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.CandidatePair.rtc)
}

// required .livekit.proto.CandidatePairStats candidate_pair = 2;
inline bool RtcStats_CandidatePair::_internal_has_candidate_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.candidate_pair_ != nullptr);
  return value;
}
inline bool RtcStats_CandidatePair::has_candidate_pair() const {
  return _internal_has_candidate_pair();
}
inline void RtcStats_CandidatePair::clear_candidate_pair() {
  if (_impl_.candidate_pair_ != nullptr) _impl_.candidate_pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::CandidatePairStats& RtcStats_CandidatePair::_internal_candidate_pair() const {
  const ::livekit::proto::CandidatePairStats* p = _impl_.candidate_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::CandidatePairStats&>(
      ::livekit::proto::_CandidatePairStats_default_instance_);
}
inline const ::livekit::proto::CandidatePairStats& RtcStats_CandidatePair::candidate_pair() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.CandidatePair.candidate_pair)
  return _internal_candidate_pair();
}
inline void RtcStats_CandidatePair::unsafe_arena_set_allocated_candidate_pair(
    ::livekit::proto::CandidatePairStats* candidate_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.candidate_pair_);
  }
  _impl_.candidate_pair_ = candidate_pair;
  if (candidate_pair) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.CandidatePair.candidate_pair)
}
inline ::livekit::proto::CandidatePairStats* RtcStats_CandidatePair::release_candidate_pair() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::CandidatePairStats* temp = _impl_.candidate_pair_;
  _impl_.candidate_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::CandidatePairStats* RtcStats_CandidatePair::unsafe_arena_release_candidate_pair() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.CandidatePair.candidate_pair)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::CandidatePairStats* temp = _impl_.candidate_pair_;
  _impl_.candidate_pair_ = nullptr;
  return temp;
}
inline ::livekit::proto::CandidatePairStats* RtcStats_CandidatePair::_internal_mutable_candidate_pair() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.candidate_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::CandidatePairStats>(GetArenaForAllocation());
    _impl_.candidate_pair_ = p;
  }
  return _impl_.candidate_pair_;
}
inline ::livekit::proto::CandidatePairStats* RtcStats_CandidatePair::mutable_candidate_pair() {
  ::livekit::proto::CandidatePairStats* _msg = _internal_mutable_candidate_pair();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.CandidatePair.candidate_pair)
  return _msg;
}
inline void RtcStats_CandidatePair::set_allocated_candidate_pair(::livekit::proto::CandidatePairStats* candidate_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.candidate_pair_;
  }
  if (candidate_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candidate_pair);
    if (message_arena != submessage_arena) {
      candidate_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_pair, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.candidate_pair_ = candidate_pair;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.CandidatePair.candidate_pair)
}

// -------------------------------------------------------------------

// RtcStats_LocalCandidate

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_LocalCandidate::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_LocalCandidate::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_LocalCandidate::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_LocalCandidate::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_LocalCandidate::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.LocalCandidate.rtc)
  return _internal_rtc();
}
inline void RtcStats_LocalCandidate::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.LocalCandidate.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_LocalCandidate::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_LocalCandidate::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.LocalCandidate.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_LocalCandidate::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_LocalCandidate::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.LocalCandidate.rtc)
  return _msg;
}
inline void RtcStats_LocalCandidate::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.LocalCandidate.rtc)
}

// required .livekit.proto.IceCandidateStats candidate = 2;
inline bool RtcStats_LocalCandidate::_internal_has_candidate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.candidate_ != nullptr);
  return value;
}
inline bool RtcStats_LocalCandidate::has_candidate() const {
  return _internal_has_candidate();
}
inline void RtcStats_LocalCandidate::clear_candidate() {
  if (_impl_.candidate_ != nullptr) _impl_.candidate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::IceCandidateStats& RtcStats_LocalCandidate::_internal_candidate() const {
  const ::livekit::proto::IceCandidateStats* p = _impl_.candidate_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::IceCandidateStats&>(
      ::livekit::proto::_IceCandidateStats_default_instance_);
}
inline const ::livekit::proto::IceCandidateStats& RtcStats_LocalCandidate::candidate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.LocalCandidate.candidate)
  return _internal_candidate();
}
inline void RtcStats_LocalCandidate::unsafe_arena_set_allocated_candidate(
    ::livekit::proto::IceCandidateStats* candidate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.candidate_);
  }
  _impl_.candidate_ = candidate;
  if (candidate) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.LocalCandidate.candidate)
}
inline ::livekit::proto::IceCandidateStats* RtcStats_LocalCandidate::release_candidate() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::IceCandidateStats* temp = _impl_.candidate_;
  _impl_.candidate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::IceCandidateStats* RtcStats_LocalCandidate::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.LocalCandidate.candidate)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::IceCandidateStats* temp = _impl_.candidate_;
  _impl_.candidate_ = nullptr;
  return temp;
}
inline ::livekit::proto::IceCandidateStats* RtcStats_LocalCandidate::_internal_mutable_candidate() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::IceCandidateStats>(GetArenaForAllocation());
    _impl_.candidate_ = p;
  }
  return _impl_.candidate_;
}
inline ::livekit::proto::IceCandidateStats* RtcStats_LocalCandidate::mutable_candidate() {
  ::livekit::proto::IceCandidateStats* _msg = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.LocalCandidate.candidate)
  return _msg;
}
inline void RtcStats_LocalCandidate::set_allocated_candidate(::livekit::proto::IceCandidateStats* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.LocalCandidate.candidate)
}

// -------------------------------------------------------------------

// RtcStats_RemoteCandidate

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_RemoteCandidate::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteCandidate::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_RemoteCandidate::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_RemoteCandidate::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_RemoteCandidate::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteCandidate.rtc)
  return _internal_rtc();
}
inline void RtcStats_RemoteCandidate::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteCandidate.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteCandidate::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteCandidate::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteCandidate.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteCandidate::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_RemoteCandidate::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteCandidate.rtc)
  return _msg;
}
inline void RtcStats_RemoteCandidate::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteCandidate.rtc)
}

// required .livekit.proto.IceCandidateStats candidate = 2;
inline bool RtcStats_RemoteCandidate::_internal_has_candidate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.candidate_ != nullptr);
  return value;
}
inline bool RtcStats_RemoteCandidate::has_candidate() const {
  return _internal_has_candidate();
}
inline void RtcStats_RemoteCandidate::clear_candidate() {
  if (_impl_.candidate_ != nullptr) _impl_.candidate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::IceCandidateStats& RtcStats_RemoteCandidate::_internal_candidate() const {
  const ::livekit::proto::IceCandidateStats* p = _impl_.candidate_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::IceCandidateStats&>(
      ::livekit::proto::_IceCandidateStats_default_instance_);
}
inline const ::livekit::proto::IceCandidateStats& RtcStats_RemoteCandidate::candidate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.RemoteCandidate.candidate)
  return _internal_candidate();
}
inline void RtcStats_RemoteCandidate::unsafe_arena_set_allocated_candidate(
    ::livekit::proto::IceCandidateStats* candidate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.candidate_);
  }
  _impl_.candidate_ = candidate;
  if (candidate) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.RemoteCandidate.candidate)
}
inline ::livekit::proto::IceCandidateStats* RtcStats_RemoteCandidate::release_candidate() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::IceCandidateStats* temp = _impl_.candidate_;
  _impl_.candidate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::IceCandidateStats* RtcStats_RemoteCandidate::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.RemoteCandidate.candidate)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::IceCandidateStats* temp = _impl_.candidate_;
  _impl_.candidate_ = nullptr;
  return temp;
}
inline ::livekit::proto::IceCandidateStats* RtcStats_RemoteCandidate::_internal_mutable_candidate() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::IceCandidateStats>(GetArenaForAllocation());
    _impl_.candidate_ = p;
  }
  return _impl_.candidate_;
}
inline ::livekit::proto::IceCandidateStats* RtcStats_RemoteCandidate::mutable_candidate() {
  ::livekit::proto::IceCandidateStats* _msg = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.RemoteCandidate.candidate)
  return _msg;
}
inline void RtcStats_RemoteCandidate::set_allocated_candidate(::livekit::proto::IceCandidateStats* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.RemoteCandidate.candidate)
}

// -------------------------------------------------------------------

// RtcStats_Certificate

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_Certificate::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_Certificate::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_Certificate::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Certificate::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Certificate::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Certificate.rtc)
  return _internal_rtc();
}
inline void RtcStats_Certificate::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Certificate.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_Certificate::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Certificate::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Certificate.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Certificate::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Certificate::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Certificate.rtc)
  return _msg;
}
inline void RtcStats_Certificate::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Certificate.rtc)
}

// required .livekit.proto.CertificateStats certificate = 2;
inline bool RtcStats_Certificate::_internal_has_certificate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.certificate_ != nullptr);
  return value;
}
inline bool RtcStats_Certificate::has_certificate() const {
  return _internal_has_certificate();
}
inline void RtcStats_Certificate::clear_certificate() {
  if (_impl_.certificate_ != nullptr) _impl_.certificate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::CertificateStats& RtcStats_Certificate::_internal_certificate() const {
  const ::livekit::proto::CertificateStats* p = _impl_.certificate_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::CertificateStats&>(
      ::livekit::proto::_CertificateStats_default_instance_);
}
inline const ::livekit::proto::CertificateStats& RtcStats_Certificate::certificate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Certificate.certificate)
  return _internal_certificate();
}
inline void RtcStats_Certificate::unsafe_arena_set_allocated_certificate(
    ::livekit::proto::CertificateStats* certificate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.certificate_);
  }
  _impl_.certificate_ = certificate;
  if (certificate) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Certificate.certificate)
}
inline ::livekit::proto::CertificateStats* RtcStats_Certificate::release_certificate() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::CertificateStats* temp = _impl_.certificate_;
  _impl_.certificate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::CertificateStats* RtcStats_Certificate::unsafe_arena_release_certificate() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Certificate.certificate)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::CertificateStats* temp = _impl_.certificate_;
  _impl_.certificate_ = nullptr;
  return temp;
}
inline ::livekit::proto::CertificateStats* RtcStats_Certificate::_internal_mutable_certificate() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.certificate_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::CertificateStats>(GetArenaForAllocation());
    _impl_.certificate_ = p;
  }
  return _impl_.certificate_;
}
inline ::livekit::proto::CertificateStats* RtcStats_Certificate::mutable_certificate() {
  ::livekit::proto::CertificateStats* _msg = _internal_mutable_certificate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Certificate.certificate)
  return _msg;
}
inline void RtcStats_Certificate::set_allocated_certificate(::livekit::proto::CertificateStats* certificate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.certificate_;
  }
  if (certificate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(certificate);
    if (message_arena != submessage_arena) {
      certificate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certificate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.certificate_ = certificate;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Certificate.certificate)
}

// -------------------------------------------------------------------

// RtcStats_Stream

// required .livekit.proto.RtcStatsData rtc = 1;
inline bool RtcStats_Stream::_internal_has_rtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtc_ != nullptr);
  return value;
}
inline bool RtcStats_Stream::has_rtc() const {
  return _internal_has_rtc();
}
inline void RtcStats_Stream::clear_rtc() {
  if (_impl_.rtc_ != nullptr) _impl_.rtc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Stream::_internal_rtc() const {
  const ::livekit::proto::RtcStatsData* p = _impl_.rtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::RtcStatsData&>(
      ::livekit::proto::_RtcStatsData_default_instance_);
}
inline const ::livekit::proto::RtcStatsData& RtcStats_Stream::rtc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Stream.rtc)
  return _internal_rtc();
}
inline void RtcStats_Stream::unsafe_arena_set_allocated_rtc(
    ::livekit::proto::RtcStatsData* rtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rtc_);
  }
  _impl_.rtc_ = rtc;
  if (rtc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Stream.rtc)
}
inline ::livekit::proto::RtcStatsData* RtcStats_Stream::release_rtc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Stream::unsafe_arena_release_rtc() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Stream.rtc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::proto::RtcStatsData* temp = _impl_.rtc_;
  _impl_.rtc_ = nullptr;
  return temp;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Stream::_internal_mutable_rtc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::RtcStatsData>(GetArenaForAllocation());
    _impl_.rtc_ = p;
  }
  return _impl_.rtc_;
}
inline ::livekit::proto::RtcStatsData* RtcStats_Stream::mutable_rtc() {
  ::livekit::proto::RtcStatsData* _msg = _internal_mutable_rtc();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Stream.rtc)
  return _msg;
}
inline void RtcStats_Stream::set_allocated_rtc(::livekit::proto::RtcStatsData* rtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rtc_;
  }
  if (rtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc);
    if (message_arena != submessage_arena) {
      rtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rtc_ = rtc;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Stream.rtc)
}

// required .livekit.proto.StreamStats stream = 2;
inline bool RtcStats_Stream::_internal_has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_ != nullptr);
  return value;
}
inline bool RtcStats_Stream::has_stream() const {
  return _internal_has_stream();
}
inline void RtcStats_Stream::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::proto::StreamStats& RtcStats_Stream::_internal_stream() const {
  const ::livekit::proto::StreamStats* p = _impl_.stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::proto::StreamStats&>(
      ::livekit::proto::_StreamStats_default_instance_);
}
inline const ::livekit::proto::StreamStats& RtcStats_Stream::stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.Stream.stream)
  return _internal_stream();
}
inline void RtcStats_Stream::unsafe_arena_set_allocated_stream(
    ::livekit::proto::StreamStats* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_);
  }
  _impl_.stream_ = stream;
  if (stream) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.Stream.stream)
}
inline ::livekit::proto::StreamStats* RtcStats_Stream::release_stream() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::StreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::proto::StreamStats* RtcStats_Stream::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.Stream.stream)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::proto::StreamStats* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
  return temp;
}
inline ::livekit::proto::StreamStats* RtcStats_Stream::_internal_mutable_stream() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::proto::StreamStats>(GetArenaForAllocation());
    _impl_.stream_ = p;
  }
  return _impl_.stream_;
}
inline ::livekit::proto::StreamStats* RtcStats_Stream::mutable_stream() {
  ::livekit::proto::StreamStats* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.Stream.stream)
  return _msg;
}
inline void RtcStats_Stream::set_allocated_stream(::livekit::proto::StreamStats* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.Stream.stream)
}

// -------------------------------------------------------------------

// RtcStats_Track

// -------------------------------------------------------------------

// RtcStats

// .livekit.proto.RtcStats.Codec codec = 3;
inline bool RtcStats::_internal_has_codec() const {
  return stats_case() == kCodec;
}
inline bool RtcStats::has_codec() const {
  return _internal_has_codec();
}
inline void RtcStats::set_has_codec() {
  _impl_._oneof_case_[0] = kCodec;
}
inline void RtcStats::clear_codec() {
  if (_internal_has_codec()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.codec_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_Codec* RtcStats::release_codec() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.codec)
  if (_internal_has_codec()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Codec* temp = _impl_.stats_.codec_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.codec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_Codec& RtcStats::_internal_codec() const {
  return _internal_has_codec()
      ? *_impl_.stats_.codec_
      : reinterpret_cast< ::livekit::proto::RtcStats_Codec&>(::livekit::proto::_RtcStats_Codec_default_instance_);
}
inline const ::livekit::proto::RtcStats_Codec& RtcStats::codec() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.codec)
  return _internal_codec();
}
inline ::livekit::proto::RtcStats_Codec* RtcStats::unsafe_arena_release_codec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.codec)
  if (_internal_has_codec()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Codec* temp = _impl_.stats_.codec_;
    _impl_.stats_.codec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_codec(::livekit::proto::RtcStats_Codec* codec) {
  clear_stats();
  if (codec) {
    set_has_codec();
    _impl_.stats_.codec_ = codec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.codec)
}
inline ::livekit::proto::RtcStats_Codec* RtcStats::_internal_mutable_codec() {
  if (!_internal_has_codec()) {
    clear_stats();
    set_has_codec();
    _impl_.stats_.codec_ = CreateMaybeMessage< ::livekit::proto::RtcStats_Codec >(GetArenaForAllocation());
  }
  return _impl_.stats_.codec_;
}
inline ::livekit::proto::RtcStats_Codec* RtcStats::mutable_codec() {
  ::livekit::proto::RtcStats_Codec* _msg = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.codec)
  return _msg;
}

// .livekit.proto.RtcStats.InboundRtp inbound_rtp = 4;
inline bool RtcStats::_internal_has_inbound_rtp() const {
  return stats_case() == kInboundRtp;
}
inline bool RtcStats::has_inbound_rtp() const {
  return _internal_has_inbound_rtp();
}
inline void RtcStats::set_has_inbound_rtp() {
  _impl_._oneof_case_[0] = kInboundRtp;
}
inline void RtcStats::clear_inbound_rtp() {
  if (_internal_has_inbound_rtp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.inbound_rtp_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_InboundRtp* RtcStats::release_inbound_rtp() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.inbound_rtp)
  if (_internal_has_inbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_InboundRtp* temp = _impl_.stats_.inbound_rtp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.inbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_InboundRtp& RtcStats::_internal_inbound_rtp() const {
  return _internal_has_inbound_rtp()
      ? *_impl_.stats_.inbound_rtp_
      : reinterpret_cast< ::livekit::proto::RtcStats_InboundRtp&>(::livekit::proto::_RtcStats_InboundRtp_default_instance_);
}
inline const ::livekit::proto::RtcStats_InboundRtp& RtcStats::inbound_rtp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.inbound_rtp)
  return _internal_inbound_rtp();
}
inline ::livekit::proto::RtcStats_InboundRtp* RtcStats::unsafe_arena_release_inbound_rtp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.inbound_rtp)
  if (_internal_has_inbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_InboundRtp* temp = _impl_.stats_.inbound_rtp_;
    _impl_.stats_.inbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_inbound_rtp(::livekit::proto::RtcStats_InboundRtp* inbound_rtp) {
  clear_stats();
  if (inbound_rtp) {
    set_has_inbound_rtp();
    _impl_.stats_.inbound_rtp_ = inbound_rtp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.inbound_rtp)
}
inline ::livekit::proto::RtcStats_InboundRtp* RtcStats::_internal_mutable_inbound_rtp() {
  if (!_internal_has_inbound_rtp()) {
    clear_stats();
    set_has_inbound_rtp();
    _impl_.stats_.inbound_rtp_ = CreateMaybeMessage< ::livekit::proto::RtcStats_InboundRtp >(GetArenaForAllocation());
  }
  return _impl_.stats_.inbound_rtp_;
}
inline ::livekit::proto::RtcStats_InboundRtp* RtcStats::mutable_inbound_rtp() {
  ::livekit::proto::RtcStats_InboundRtp* _msg = _internal_mutable_inbound_rtp();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.inbound_rtp)
  return _msg;
}

// .livekit.proto.RtcStats.OutboundRtp outbound_rtp = 5;
inline bool RtcStats::_internal_has_outbound_rtp() const {
  return stats_case() == kOutboundRtp;
}
inline bool RtcStats::has_outbound_rtp() const {
  return _internal_has_outbound_rtp();
}
inline void RtcStats::set_has_outbound_rtp() {
  _impl_._oneof_case_[0] = kOutboundRtp;
}
inline void RtcStats::clear_outbound_rtp() {
  if (_internal_has_outbound_rtp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.outbound_rtp_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_OutboundRtp* RtcStats::release_outbound_rtp() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.outbound_rtp)
  if (_internal_has_outbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_OutboundRtp* temp = _impl_.stats_.outbound_rtp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.outbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_OutboundRtp& RtcStats::_internal_outbound_rtp() const {
  return _internal_has_outbound_rtp()
      ? *_impl_.stats_.outbound_rtp_
      : reinterpret_cast< ::livekit::proto::RtcStats_OutboundRtp&>(::livekit::proto::_RtcStats_OutboundRtp_default_instance_);
}
inline const ::livekit::proto::RtcStats_OutboundRtp& RtcStats::outbound_rtp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.outbound_rtp)
  return _internal_outbound_rtp();
}
inline ::livekit::proto::RtcStats_OutboundRtp* RtcStats::unsafe_arena_release_outbound_rtp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.outbound_rtp)
  if (_internal_has_outbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_OutboundRtp* temp = _impl_.stats_.outbound_rtp_;
    _impl_.stats_.outbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_outbound_rtp(::livekit::proto::RtcStats_OutboundRtp* outbound_rtp) {
  clear_stats();
  if (outbound_rtp) {
    set_has_outbound_rtp();
    _impl_.stats_.outbound_rtp_ = outbound_rtp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.outbound_rtp)
}
inline ::livekit::proto::RtcStats_OutboundRtp* RtcStats::_internal_mutable_outbound_rtp() {
  if (!_internal_has_outbound_rtp()) {
    clear_stats();
    set_has_outbound_rtp();
    _impl_.stats_.outbound_rtp_ = CreateMaybeMessage< ::livekit::proto::RtcStats_OutboundRtp >(GetArenaForAllocation());
  }
  return _impl_.stats_.outbound_rtp_;
}
inline ::livekit::proto::RtcStats_OutboundRtp* RtcStats::mutable_outbound_rtp() {
  ::livekit::proto::RtcStats_OutboundRtp* _msg = _internal_mutable_outbound_rtp();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.outbound_rtp)
  return _msg;
}

// .livekit.proto.RtcStats.RemoteInboundRtp remote_inbound_rtp = 6;
inline bool RtcStats::_internal_has_remote_inbound_rtp() const {
  return stats_case() == kRemoteInboundRtp;
}
inline bool RtcStats::has_remote_inbound_rtp() const {
  return _internal_has_remote_inbound_rtp();
}
inline void RtcStats::set_has_remote_inbound_rtp() {
  _impl_._oneof_case_[0] = kRemoteInboundRtp;
}
inline void RtcStats::clear_remote_inbound_rtp() {
  if (_internal_has_remote_inbound_rtp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.remote_inbound_rtp_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_RemoteInboundRtp* RtcStats::release_remote_inbound_rtp() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.remote_inbound_rtp)
  if (_internal_has_remote_inbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_RemoteInboundRtp* temp = _impl_.stats_.remote_inbound_rtp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.remote_inbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_RemoteInboundRtp& RtcStats::_internal_remote_inbound_rtp() const {
  return _internal_has_remote_inbound_rtp()
      ? *_impl_.stats_.remote_inbound_rtp_
      : reinterpret_cast< ::livekit::proto::RtcStats_RemoteInboundRtp&>(::livekit::proto::_RtcStats_RemoteInboundRtp_default_instance_);
}
inline const ::livekit::proto::RtcStats_RemoteInboundRtp& RtcStats::remote_inbound_rtp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.remote_inbound_rtp)
  return _internal_remote_inbound_rtp();
}
inline ::livekit::proto::RtcStats_RemoteInboundRtp* RtcStats::unsafe_arena_release_remote_inbound_rtp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.remote_inbound_rtp)
  if (_internal_has_remote_inbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_RemoteInboundRtp* temp = _impl_.stats_.remote_inbound_rtp_;
    _impl_.stats_.remote_inbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_remote_inbound_rtp(::livekit::proto::RtcStats_RemoteInboundRtp* remote_inbound_rtp) {
  clear_stats();
  if (remote_inbound_rtp) {
    set_has_remote_inbound_rtp();
    _impl_.stats_.remote_inbound_rtp_ = remote_inbound_rtp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.remote_inbound_rtp)
}
inline ::livekit::proto::RtcStats_RemoteInboundRtp* RtcStats::_internal_mutable_remote_inbound_rtp() {
  if (!_internal_has_remote_inbound_rtp()) {
    clear_stats();
    set_has_remote_inbound_rtp();
    _impl_.stats_.remote_inbound_rtp_ = CreateMaybeMessage< ::livekit::proto::RtcStats_RemoteInboundRtp >(GetArenaForAllocation());
  }
  return _impl_.stats_.remote_inbound_rtp_;
}
inline ::livekit::proto::RtcStats_RemoteInboundRtp* RtcStats::mutable_remote_inbound_rtp() {
  ::livekit::proto::RtcStats_RemoteInboundRtp* _msg = _internal_mutable_remote_inbound_rtp();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.remote_inbound_rtp)
  return _msg;
}

// .livekit.proto.RtcStats.RemoteOutboundRtp remote_outbound_rtp = 7;
inline bool RtcStats::_internal_has_remote_outbound_rtp() const {
  return stats_case() == kRemoteOutboundRtp;
}
inline bool RtcStats::has_remote_outbound_rtp() const {
  return _internal_has_remote_outbound_rtp();
}
inline void RtcStats::set_has_remote_outbound_rtp() {
  _impl_._oneof_case_[0] = kRemoteOutboundRtp;
}
inline void RtcStats::clear_remote_outbound_rtp() {
  if (_internal_has_remote_outbound_rtp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.remote_outbound_rtp_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_RemoteOutboundRtp* RtcStats::release_remote_outbound_rtp() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.remote_outbound_rtp)
  if (_internal_has_remote_outbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_RemoteOutboundRtp* temp = _impl_.stats_.remote_outbound_rtp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.remote_outbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_RemoteOutboundRtp& RtcStats::_internal_remote_outbound_rtp() const {
  return _internal_has_remote_outbound_rtp()
      ? *_impl_.stats_.remote_outbound_rtp_
      : reinterpret_cast< ::livekit::proto::RtcStats_RemoteOutboundRtp&>(::livekit::proto::_RtcStats_RemoteOutboundRtp_default_instance_);
}
inline const ::livekit::proto::RtcStats_RemoteOutboundRtp& RtcStats::remote_outbound_rtp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.remote_outbound_rtp)
  return _internal_remote_outbound_rtp();
}
inline ::livekit::proto::RtcStats_RemoteOutboundRtp* RtcStats::unsafe_arena_release_remote_outbound_rtp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.remote_outbound_rtp)
  if (_internal_has_remote_outbound_rtp()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_RemoteOutboundRtp* temp = _impl_.stats_.remote_outbound_rtp_;
    _impl_.stats_.remote_outbound_rtp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_remote_outbound_rtp(::livekit::proto::RtcStats_RemoteOutboundRtp* remote_outbound_rtp) {
  clear_stats();
  if (remote_outbound_rtp) {
    set_has_remote_outbound_rtp();
    _impl_.stats_.remote_outbound_rtp_ = remote_outbound_rtp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.remote_outbound_rtp)
}
inline ::livekit::proto::RtcStats_RemoteOutboundRtp* RtcStats::_internal_mutable_remote_outbound_rtp() {
  if (!_internal_has_remote_outbound_rtp()) {
    clear_stats();
    set_has_remote_outbound_rtp();
    _impl_.stats_.remote_outbound_rtp_ = CreateMaybeMessage< ::livekit::proto::RtcStats_RemoteOutboundRtp >(GetArenaForAllocation());
  }
  return _impl_.stats_.remote_outbound_rtp_;
}
inline ::livekit::proto::RtcStats_RemoteOutboundRtp* RtcStats::mutable_remote_outbound_rtp() {
  ::livekit::proto::RtcStats_RemoteOutboundRtp* _msg = _internal_mutable_remote_outbound_rtp();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.remote_outbound_rtp)
  return _msg;
}

// .livekit.proto.RtcStats.MediaSource media_source = 8;
inline bool RtcStats::_internal_has_media_source() const {
  return stats_case() == kMediaSource;
}
inline bool RtcStats::has_media_source() const {
  return _internal_has_media_source();
}
inline void RtcStats::set_has_media_source() {
  _impl_._oneof_case_[0] = kMediaSource;
}
inline void RtcStats::clear_media_source() {
  if (_internal_has_media_source()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.media_source_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_MediaSource* RtcStats::release_media_source() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.media_source)
  if (_internal_has_media_source()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_MediaSource* temp = _impl_.stats_.media_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.media_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_MediaSource& RtcStats::_internal_media_source() const {
  return _internal_has_media_source()
      ? *_impl_.stats_.media_source_
      : reinterpret_cast< ::livekit::proto::RtcStats_MediaSource&>(::livekit::proto::_RtcStats_MediaSource_default_instance_);
}
inline const ::livekit::proto::RtcStats_MediaSource& RtcStats::media_source() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.media_source)
  return _internal_media_source();
}
inline ::livekit::proto::RtcStats_MediaSource* RtcStats::unsafe_arena_release_media_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.media_source)
  if (_internal_has_media_source()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_MediaSource* temp = _impl_.stats_.media_source_;
    _impl_.stats_.media_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_media_source(::livekit::proto::RtcStats_MediaSource* media_source) {
  clear_stats();
  if (media_source) {
    set_has_media_source();
    _impl_.stats_.media_source_ = media_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.media_source)
}
inline ::livekit::proto::RtcStats_MediaSource* RtcStats::_internal_mutable_media_source() {
  if (!_internal_has_media_source()) {
    clear_stats();
    set_has_media_source();
    _impl_.stats_.media_source_ = CreateMaybeMessage< ::livekit::proto::RtcStats_MediaSource >(GetArenaForAllocation());
  }
  return _impl_.stats_.media_source_;
}
inline ::livekit::proto::RtcStats_MediaSource* RtcStats::mutable_media_source() {
  ::livekit::proto::RtcStats_MediaSource* _msg = _internal_mutable_media_source();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.media_source)
  return _msg;
}

// .livekit.proto.RtcStats.MediaPlayout media_playout = 9;
inline bool RtcStats::_internal_has_media_playout() const {
  return stats_case() == kMediaPlayout;
}
inline bool RtcStats::has_media_playout() const {
  return _internal_has_media_playout();
}
inline void RtcStats::set_has_media_playout() {
  _impl_._oneof_case_[0] = kMediaPlayout;
}
inline void RtcStats::clear_media_playout() {
  if (_internal_has_media_playout()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.media_playout_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_MediaPlayout* RtcStats::release_media_playout() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.media_playout)
  if (_internal_has_media_playout()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_MediaPlayout* temp = _impl_.stats_.media_playout_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.media_playout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_MediaPlayout& RtcStats::_internal_media_playout() const {
  return _internal_has_media_playout()
      ? *_impl_.stats_.media_playout_
      : reinterpret_cast< ::livekit::proto::RtcStats_MediaPlayout&>(::livekit::proto::_RtcStats_MediaPlayout_default_instance_);
}
inline const ::livekit::proto::RtcStats_MediaPlayout& RtcStats::media_playout() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.media_playout)
  return _internal_media_playout();
}
inline ::livekit::proto::RtcStats_MediaPlayout* RtcStats::unsafe_arena_release_media_playout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.media_playout)
  if (_internal_has_media_playout()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_MediaPlayout* temp = _impl_.stats_.media_playout_;
    _impl_.stats_.media_playout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_media_playout(::livekit::proto::RtcStats_MediaPlayout* media_playout) {
  clear_stats();
  if (media_playout) {
    set_has_media_playout();
    _impl_.stats_.media_playout_ = media_playout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.media_playout)
}
inline ::livekit::proto::RtcStats_MediaPlayout* RtcStats::_internal_mutable_media_playout() {
  if (!_internal_has_media_playout()) {
    clear_stats();
    set_has_media_playout();
    _impl_.stats_.media_playout_ = CreateMaybeMessage< ::livekit::proto::RtcStats_MediaPlayout >(GetArenaForAllocation());
  }
  return _impl_.stats_.media_playout_;
}
inline ::livekit::proto::RtcStats_MediaPlayout* RtcStats::mutable_media_playout() {
  ::livekit::proto::RtcStats_MediaPlayout* _msg = _internal_mutable_media_playout();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.media_playout)
  return _msg;
}

// .livekit.proto.RtcStats.PeerConnection peer_connection = 10;
inline bool RtcStats::_internal_has_peer_connection() const {
  return stats_case() == kPeerConnection;
}
inline bool RtcStats::has_peer_connection() const {
  return _internal_has_peer_connection();
}
inline void RtcStats::set_has_peer_connection() {
  _impl_._oneof_case_[0] = kPeerConnection;
}
inline void RtcStats::clear_peer_connection() {
  if (_internal_has_peer_connection()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.peer_connection_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_PeerConnection* RtcStats::release_peer_connection() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.peer_connection)
  if (_internal_has_peer_connection()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_PeerConnection* temp = _impl_.stats_.peer_connection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.peer_connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_PeerConnection& RtcStats::_internal_peer_connection() const {
  return _internal_has_peer_connection()
      ? *_impl_.stats_.peer_connection_
      : reinterpret_cast< ::livekit::proto::RtcStats_PeerConnection&>(::livekit::proto::_RtcStats_PeerConnection_default_instance_);
}
inline const ::livekit::proto::RtcStats_PeerConnection& RtcStats::peer_connection() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.peer_connection)
  return _internal_peer_connection();
}
inline ::livekit::proto::RtcStats_PeerConnection* RtcStats::unsafe_arena_release_peer_connection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.peer_connection)
  if (_internal_has_peer_connection()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_PeerConnection* temp = _impl_.stats_.peer_connection_;
    _impl_.stats_.peer_connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_peer_connection(::livekit::proto::RtcStats_PeerConnection* peer_connection) {
  clear_stats();
  if (peer_connection) {
    set_has_peer_connection();
    _impl_.stats_.peer_connection_ = peer_connection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.peer_connection)
}
inline ::livekit::proto::RtcStats_PeerConnection* RtcStats::_internal_mutable_peer_connection() {
  if (!_internal_has_peer_connection()) {
    clear_stats();
    set_has_peer_connection();
    _impl_.stats_.peer_connection_ = CreateMaybeMessage< ::livekit::proto::RtcStats_PeerConnection >(GetArenaForAllocation());
  }
  return _impl_.stats_.peer_connection_;
}
inline ::livekit::proto::RtcStats_PeerConnection* RtcStats::mutable_peer_connection() {
  ::livekit::proto::RtcStats_PeerConnection* _msg = _internal_mutable_peer_connection();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.peer_connection)
  return _msg;
}

// .livekit.proto.RtcStats.DataChannel data_channel = 11;
inline bool RtcStats::_internal_has_data_channel() const {
  return stats_case() == kDataChannel;
}
inline bool RtcStats::has_data_channel() const {
  return _internal_has_data_channel();
}
inline void RtcStats::set_has_data_channel() {
  _impl_._oneof_case_[0] = kDataChannel;
}
inline void RtcStats::clear_data_channel() {
  if (_internal_has_data_channel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.data_channel_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_DataChannel* RtcStats::release_data_channel() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.data_channel)
  if (_internal_has_data_channel()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_DataChannel* temp = _impl_.stats_.data_channel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.data_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_DataChannel& RtcStats::_internal_data_channel() const {
  return _internal_has_data_channel()
      ? *_impl_.stats_.data_channel_
      : reinterpret_cast< ::livekit::proto::RtcStats_DataChannel&>(::livekit::proto::_RtcStats_DataChannel_default_instance_);
}
inline const ::livekit::proto::RtcStats_DataChannel& RtcStats::data_channel() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.data_channel)
  return _internal_data_channel();
}
inline ::livekit::proto::RtcStats_DataChannel* RtcStats::unsafe_arena_release_data_channel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.data_channel)
  if (_internal_has_data_channel()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_DataChannel* temp = _impl_.stats_.data_channel_;
    _impl_.stats_.data_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_data_channel(::livekit::proto::RtcStats_DataChannel* data_channel) {
  clear_stats();
  if (data_channel) {
    set_has_data_channel();
    _impl_.stats_.data_channel_ = data_channel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.data_channel)
}
inline ::livekit::proto::RtcStats_DataChannel* RtcStats::_internal_mutable_data_channel() {
  if (!_internal_has_data_channel()) {
    clear_stats();
    set_has_data_channel();
    _impl_.stats_.data_channel_ = CreateMaybeMessage< ::livekit::proto::RtcStats_DataChannel >(GetArenaForAllocation());
  }
  return _impl_.stats_.data_channel_;
}
inline ::livekit::proto::RtcStats_DataChannel* RtcStats::mutable_data_channel() {
  ::livekit::proto::RtcStats_DataChannel* _msg = _internal_mutable_data_channel();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.data_channel)
  return _msg;
}

// .livekit.proto.RtcStats.Transport transport = 12;
inline bool RtcStats::_internal_has_transport() const {
  return stats_case() == kTransport;
}
inline bool RtcStats::has_transport() const {
  return _internal_has_transport();
}
inline void RtcStats::set_has_transport() {
  _impl_._oneof_case_[0] = kTransport;
}
inline void RtcStats::clear_transport() {
  if (_internal_has_transport()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.transport_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_Transport* RtcStats::release_transport() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.transport)
  if (_internal_has_transport()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Transport* temp = _impl_.stats_.transport_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.transport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_Transport& RtcStats::_internal_transport() const {
  return _internal_has_transport()
      ? *_impl_.stats_.transport_
      : reinterpret_cast< ::livekit::proto::RtcStats_Transport&>(::livekit::proto::_RtcStats_Transport_default_instance_);
}
inline const ::livekit::proto::RtcStats_Transport& RtcStats::transport() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.transport)
  return _internal_transport();
}
inline ::livekit::proto::RtcStats_Transport* RtcStats::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.transport)
  if (_internal_has_transport()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Transport* temp = _impl_.stats_.transport_;
    _impl_.stats_.transport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_transport(::livekit::proto::RtcStats_Transport* transport) {
  clear_stats();
  if (transport) {
    set_has_transport();
    _impl_.stats_.transport_ = transport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.transport)
}
inline ::livekit::proto::RtcStats_Transport* RtcStats::_internal_mutable_transport() {
  if (!_internal_has_transport()) {
    clear_stats();
    set_has_transport();
    _impl_.stats_.transport_ = CreateMaybeMessage< ::livekit::proto::RtcStats_Transport >(GetArenaForAllocation());
  }
  return _impl_.stats_.transport_;
}
inline ::livekit::proto::RtcStats_Transport* RtcStats::mutable_transport() {
  ::livekit::proto::RtcStats_Transport* _msg = _internal_mutable_transport();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.transport)
  return _msg;
}

// .livekit.proto.RtcStats.CandidatePair candidate_pair = 13;
inline bool RtcStats::_internal_has_candidate_pair() const {
  return stats_case() == kCandidatePair;
}
inline bool RtcStats::has_candidate_pair() const {
  return _internal_has_candidate_pair();
}
inline void RtcStats::set_has_candidate_pair() {
  _impl_._oneof_case_[0] = kCandidatePair;
}
inline void RtcStats::clear_candidate_pair() {
  if (_internal_has_candidate_pair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.candidate_pair_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_CandidatePair* RtcStats::release_candidate_pair() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.candidate_pair)
  if (_internal_has_candidate_pair()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_CandidatePair* temp = _impl_.stats_.candidate_pair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.candidate_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_CandidatePair& RtcStats::_internal_candidate_pair() const {
  return _internal_has_candidate_pair()
      ? *_impl_.stats_.candidate_pair_
      : reinterpret_cast< ::livekit::proto::RtcStats_CandidatePair&>(::livekit::proto::_RtcStats_CandidatePair_default_instance_);
}
inline const ::livekit::proto::RtcStats_CandidatePair& RtcStats::candidate_pair() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.candidate_pair)
  return _internal_candidate_pair();
}
inline ::livekit::proto::RtcStats_CandidatePair* RtcStats::unsafe_arena_release_candidate_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.candidate_pair)
  if (_internal_has_candidate_pair()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_CandidatePair* temp = _impl_.stats_.candidate_pair_;
    _impl_.stats_.candidate_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_candidate_pair(::livekit::proto::RtcStats_CandidatePair* candidate_pair) {
  clear_stats();
  if (candidate_pair) {
    set_has_candidate_pair();
    _impl_.stats_.candidate_pair_ = candidate_pair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.candidate_pair)
}
inline ::livekit::proto::RtcStats_CandidatePair* RtcStats::_internal_mutable_candidate_pair() {
  if (!_internal_has_candidate_pair()) {
    clear_stats();
    set_has_candidate_pair();
    _impl_.stats_.candidate_pair_ = CreateMaybeMessage< ::livekit::proto::RtcStats_CandidatePair >(GetArenaForAllocation());
  }
  return _impl_.stats_.candidate_pair_;
}
inline ::livekit::proto::RtcStats_CandidatePair* RtcStats::mutable_candidate_pair() {
  ::livekit::proto::RtcStats_CandidatePair* _msg = _internal_mutable_candidate_pair();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.candidate_pair)
  return _msg;
}

// .livekit.proto.RtcStats.LocalCandidate local_candidate = 14;
inline bool RtcStats::_internal_has_local_candidate() const {
  return stats_case() == kLocalCandidate;
}
inline bool RtcStats::has_local_candidate() const {
  return _internal_has_local_candidate();
}
inline void RtcStats::set_has_local_candidate() {
  _impl_._oneof_case_[0] = kLocalCandidate;
}
inline void RtcStats::clear_local_candidate() {
  if (_internal_has_local_candidate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.local_candidate_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_LocalCandidate* RtcStats::release_local_candidate() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.local_candidate)
  if (_internal_has_local_candidate()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_LocalCandidate* temp = _impl_.stats_.local_candidate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.local_candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_LocalCandidate& RtcStats::_internal_local_candidate() const {
  return _internal_has_local_candidate()
      ? *_impl_.stats_.local_candidate_
      : reinterpret_cast< ::livekit::proto::RtcStats_LocalCandidate&>(::livekit::proto::_RtcStats_LocalCandidate_default_instance_);
}
inline const ::livekit::proto::RtcStats_LocalCandidate& RtcStats::local_candidate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.local_candidate)
  return _internal_local_candidate();
}
inline ::livekit::proto::RtcStats_LocalCandidate* RtcStats::unsafe_arena_release_local_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.local_candidate)
  if (_internal_has_local_candidate()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_LocalCandidate* temp = _impl_.stats_.local_candidate_;
    _impl_.stats_.local_candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_local_candidate(::livekit::proto::RtcStats_LocalCandidate* local_candidate) {
  clear_stats();
  if (local_candidate) {
    set_has_local_candidate();
    _impl_.stats_.local_candidate_ = local_candidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.local_candidate)
}
inline ::livekit::proto::RtcStats_LocalCandidate* RtcStats::_internal_mutable_local_candidate() {
  if (!_internal_has_local_candidate()) {
    clear_stats();
    set_has_local_candidate();
    _impl_.stats_.local_candidate_ = CreateMaybeMessage< ::livekit::proto::RtcStats_LocalCandidate >(GetArenaForAllocation());
  }
  return _impl_.stats_.local_candidate_;
}
inline ::livekit::proto::RtcStats_LocalCandidate* RtcStats::mutable_local_candidate() {
  ::livekit::proto::RtcStats_LocalCandidate* _msg = _internal_mutable_local_candidate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.local_candidate)
  return _msg;
}

// .livekit.proto.RtcStats.RemoteCandidate remote_candidate = 15;
inline bool RtcStats::_internal_has_remote_candidate() const {
  return stats_case() == kRemoteCandidate;
}
inline bool RtcStats::has_remote_candidate() const {
  return _internal_has_remote_candidate();
}
inline void RtcStats::set_has_remote_candidate() {
  _impl_._oneof_case_[0] = kRemoteCandidate;
}
inline void RtcStats::clear_remote_candidate() {
  if (_internal_has_remote_candidate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.remote_candidate_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_RemoteCandidate* RtcStats::release_remote_candidate() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.remote_candidate)
  if (_internal_has_remote_candidate()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_RemoteCandidate* temp = _impl_.stats_.remote_candidate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.remote_candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_RemoteCandidate& RtcStats::_internal_remote_candidate() const {
  return _internal_has_remote_candidate()
      ? *_impl_.stats_.remote_candidate_
      : reinterpret_cast< ::livekit::proto::RtcStats_RemoteCandidate&>(::livekit::proto::_RtcStats_RemoteCandidate_default_instance_);
}
inline const ::livekit::proto::RtcStats_RemoteCandidate& RtcStats::remote_candidate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.remote_candidate)
  return _internal_remote_candidate();
}
inline ::livekit::proto::RtcStats_RemoteCandidate* RtcStats::unsafe_arena_release_remote_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.remote_candidate)
  if (_internal_has_remote_candidate()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_RemoteCandidate* temp = _impl_.stats_.remote_candidate_;
    _impl_.stats_.remote_candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_remote_candidate(::livekit::proto::RtcStats_RemoteCandidate* remote_candidate) {
  clear_stats();
  if (remote_candidate) {
    set_has_remote_candidate();
    _impl_.stats_.remote_candidate_ = remote_candidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.remote_candidate)
}
inline ::livekit::proto::RtcStats_RemoteCandidate* RtcStats::_internal_mutable_remote_candidate() {
  if (!_internal_has_remote_candidate()) {
    clear_stats();
    set_has_remote_candidate();
    _impl_.stats_.remote_candidate_ = CreateMaybeMessage< ::livekit::proto::RtcStats_RemoteCandidate >(GetArenaForAllocation());
  }
  return _impl_.stats_.remote_candidate_;
}
inline ::livekit::proto::RtcStats_RemoteCandidate* RtcStats::mutable_remote_candidate() {
  ::livekit::proto::RtcStats_RemoteCandidate* _msg = _internal_mutable_remote_candidate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.remote_candidate)
  return _msg;
}

// .livekit.proto.RtcStats.Certificate certificate = 16;
inline bool RtcStats::_internal_has_certificate() const {
  return stats_case() == kCertificate;
}
inline bool RtcStats::has_certificate() const {
  return _internal_has_certificate();
}
inline void RtcStats::set_has_certificate() {
  _impl_._oneof_case_[0] = kCertificate;
}
inline void RtcStats::clear_certificate() {
  if (_internal_has_certificate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.certificate_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_Certificate* RtcStats::release_certificate() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.certificate)
  if (_internal_has_certificate()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Certificate* temp = _impl_.stats_.certificate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.certificate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_Certificate& RtcStats::_internal_certificate() const {
  return _internal_has_certificate()
      ? *_impl_.stats_.certificate_
      : reinterpret_cast< ::livekit::proto::RtcStats_Certificate&>(::livekit::proto::_RtcStats_Certificate_default_instance_);
}
inline const ::livekit::proto::RtcStats_Certificate& RtcStats::certificate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.certificate)
  return _internal_certificate();
}
inline ::livekit::proto::RtcStats_Certificate* RtcStats::unsafe_arena_release_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.certificate)
  if (_internal_has_certificate()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Certificate* temp = _impl_.stats_.certificate_;
    _impl_.stats_.certificate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_certificate(::livekit::proto::RtcStats_Certificate* certificate) {
  clear_stats();
  if (certificate) {
    set_has_certificate();
    _impl_.stats_.certificate_ = certificate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.certificate)
}
inline ::livekit::proto::RtcStats_Certificate* RtcStats::_internal_mutable_certificate() {
  if (!_internal_has_certificate()) {
    clear_stats();
    set_has_certificate();
    _impl_.stats_.certificate_ = CreateMaybeMessage< ::livekit::proto::RtcStats_Certificate >(GetArenaForAllocation());
  }
  return _impl_.stats_.certificate_;
}
inline ::livekit::proto::RtcStats_Certificate* RtcStats::mutable_certificate() {
  ::livekit::proto::RtcStats_Certificate* _msg = _internal_mutable_certificate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.certificate)
  return _msg;
}

// .livekit.proto.RtcStats.Stream stream = 17;
inline bool RtcStats::_internal_has_stream() const {
  return stats_case() == kStream;
}
inline bool RtcStats::has_stream() const {
  return _internal_has_stream();
}
inline void RtcStats::set_has_stream() {
  _impl_._oneof_case_[0] = kStream;
}
inline void RtcStats::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.stream_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_Stream* RtcStats::release_stream() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.stream)
  if (_internal_has_stream()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Stream* temp = _impl_.stats_.stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_Stream& RtcStats::_internal_stream() const {
  return _internal_has_stream()
      ? *_impl_.stats_.stream_
      : reinterpret_cast< ::livekit::proto::RtcStats_Stream&>(::livekit::proto::_RtcStats_Stream_default_instance_);
}
inline const ::livekit::proto::RtcStats_Stream& RtcStats::stream() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.stream)
  return _internal_stream();
}
inline ::livekit::proto::RtcStats_Stream* RtcStats::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.stream)
  if (_internal_has_stream()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Stream* temp = _impl_.stats_.stream_;
    _impl_.stats_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_stream(::livekit::proto::RtcStats_Stream* stream) {
  clear_stats();
  if (stream) {
    set_has_stream();
    _impl_.stats_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.stream)
}
inline ::livekit::proto::RtcStats_Stream* RtcStats::_internal_mutable_stream() {
  if (!_internal_has_stream()) {
    clear_stats();
    set_has_stream();
    _impl_.stats_.stream_ = CreateMaybeMessage< ::livekit::proto::RtcStats_Stream >(GetArenaForAllocation());
  }
  return _impl_.stats_.stream_;
}
inline ::livekit::proto::RtcStats_Stream* RtcStats::mutable_stream() {
  ::livekit::proto::RtcStats_Stream* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.stream)
  return _msg;
}

// .livekit.proto.RtcStats.Track track = 18;
inline bool RtcStats::_internal_has_track() const {
  return stats_case() == kTrack;
}
inline bool RtcStats::has_track() const {
  return _internal_has_track();
}
inline void RtcStats::set_has_track() {
  _impl_._oneof_case_[0] = kTrack;
}
inline void RtcStats::clear_track() {
  if (_internal_has_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_.track_;
    }
    clear_has_stats();
  }
}
inline ::livekit::proto::RtcStats_Track* RtcStats::release_track() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStats.track)
  if (_internal_has_track()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Track* temp = _impl_.stats_.track_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_.track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::proto::RtcStats_Track& RtcStats::_internal_track() const {
  return _internal_has_track()
      ? *_impl_.stats_.track_
      : reinterpret_cast< ::livekit::proto::RtcStats_Track&>(::livekit::proto::_RtcStats_Track_default_instance_);
}
inline const ::livekit::proto::RtcStats_Track& RtcStats::track() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStats.track)
  return _internal_track();
}
inline ::livekit::proto::RtcStats_Track* RtcStats::unsafe_arena_release_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.proto.RtcStats.track)
  if (_internal_has_track()) {
    clear_has_stats();
    ::livekit::proto::RtcStats_Track* temp = _impl_.stats_.track_;
    _impl_.stats_.track_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RtcStats::unsafe_arena_set_allocated_track(::livekit::proto::RtcStats_Track* track) {
  clear_stats();
  if (track) {
    set_has_track();
    _impl_.stats_.track_ = track;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.proto.RtcStats.track)
}
inline ::livekit::proto::RtcStats_Track* RtcStats::_internal_mutable_track() {
  if (!_internal_has_track()) {
    clear_stats();
    set_has_track();
    _impl_.stats_.track_ = CreateMaybeMessage< ::livekit::proto::RtcStats_Track >(GetArenaForAllocation());
  }
  return _impl_.stats_.track_;
}
inline ::livekit::proto::RtcStats_Track* RtcStats::mutable_track() {
  ::livekit::proto::RtcStats_Track* _msg = _internal_mutable_track();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStats.track)
  return _msg;
}

inline bool RtcStats::has_stats() const {
  return stats_case() != STATS_NOT_SET;
}
inline void RtcStats::clear_has_stats() {
  _impl_._oneof_case_[0] = STATS_NOT_SET;
}
inline RtcStats::StatsCase RtcStats::stats_case() const {
  return RtcStats::StatsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RtcStatsData

// required string id = 1;
inline bool RtcStatsData::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtcStatsData::has_id() const {
  return _internal_has_id();
}
inline void RtcStatsData::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtcStatsData::id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStatsData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcStatsData::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RtcStatsData.id)
}
inline std::string* RtcStatsData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtcStatsData.id)
  return _s;
}
inline const std::string& RtcStatsData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RtcStatsData::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcStatsData::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcStatsData::release_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtcStatsData.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RtcStatsData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStatsData.id)
}

// required int64 timestamp = 2;
inline bool RtcStatsData::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RtcStatsData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void RtcStatsData::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t RtcStatsData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t RtcStatsData::timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtcStatsData.timestamp)
  return _internal_timestamp();
}
inline void RtcStatsData::_internal_set_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void RtcStatsData::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RtcStatsData.timestamp)
}

// -------------------------------------------------------------------

// CodecStats

// required uint32 payload_type = 1;
inline bool CodecStats::_internal_has_payload_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CodecStats::has_payload_type() const {
  return _internal_has_payload_type();
}
inline void CodecStats::clear_payload_type() {
  _impl_.payload_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CodecStats::_internal_payload_type() const {
  return _impl_.payload_type_;
}
inline uint32_t CodecStats::payload_type() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CodecStats.payload_type)
  return _internal_payload_type();
}
inline void CodecStats::_internal_set_payload_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.payload_type_ = value;
}
inline void CodecStats::set_payload_type(uint32_t value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CodecStats.payload_type)
}

// required string transport_id = 2;
inline bool CodecStats::_internal_has_transport_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CodecStats::has_transport_id() const {
  return _internal_has_transport_id();
}
inline void CodecStats::clear_transport_id() {
  _impl_.transport_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CodecStats::transport_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CodecStats.transport_id)
  return _internal_transport_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CodecStats::set_transport_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.transport_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CodecStats.transport_id)
}
inline std::string* CodecStats::mutable_transport_id() {
  std::string* _s = _internal_mutable_transport_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CodecStats.transport_id)
  return _s;
}
inline const std::string& CodecStats::_internal_transport_id() const {
  return _impl_.transport_id_.Get();
}
inline void CodecStats::_internal_set_transport_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transport_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CodecStats::_internal_mutable_transport_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.transport_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CodecStats::release_transport_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.CodecStats.transport_id)
  if (!_internal_has_transport_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.transport_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CodecStats::set_allocated_transport_id(std::string* transport_id) {
  if (transport_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transport_id_.SetAllocated(transport_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CodecStats.transport_id)
}

// required string mime_type = 3;
inline bool CodecStats::_internal_has_mime_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CodecStats::has_mime_type() const {
  return _internal_has_mime_type();
}
inline void CodecStats::clear_mime_type() {
  _impl_.mime_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CodecStats::mime_type() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CodecStats.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CodecStats::set_mime_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CodecStats.mime_type)
}
inline std::string* CodecStats::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CodecStats.mime_type)
  return _s;
}
inline const std::string& CodecStats::_internal_mime_type() const {
  return _impl_.mime_type_.Get();
}
inline void CodecStats::_internal_set_mime_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CodecStats::_internal_mutable_mime_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CodecStats::release_mime_type() {
  // @@protoc_insertion_point(field_release:livekit.proto.CodecStats.mime_type)
  if (!_internal_has_mime_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mime_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CodecStats::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CodecStats.mime_type)
}

// required uint32 clock_rate = 4;
inline bool CodecStats::_internal_has_clock_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CodecStats::has_clock_rate() const {
  return _internal_has_clock_rate();
}
inline void CodecStats::clear_clock_rate() {
  _impl_.clock_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CodecStats::_internal_clock_rate() const {
  return _impl_.clock_rate_;
}
inline uint32_t CodecStats::clock_rate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CodecStats.clock_rate)
  return _internal_clock_rate();
}
inline void CodecStats::_internal_set_clock_rate(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.clock_rate_ = value;
}
inline void CodecStats::set_clock_rate(uint32_t value) {
  _internal_set_clock_rate(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CodecStats.clock_rate)
}

// required uint32 channels = 5;
inline bool CodecStats::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CodecStats::has_channels() const {
  return _internal_has_channels();
}
inline void CodecStats::clear_channels() {
  _impl_.channels_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CodecStats::_internal_channels() const {
  return _impl_.channels_;
}
inline uint32_t CodecStats::channels() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CodecStats.channels)
  return _internal_channels();
}
inline void CodecStats::_internal_set_channels(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.channels_ = value;
}
inline void CodecStats::set_channels(uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CodecStats.channels)
}

// required string sdp_fmtp_line = 6;
inline bool CodecStats::_internal_has_sdp_fmtp_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CodecStats::has_sdp_fmtp_line() const {
  return _internal_has_sdp_fmtp_line();
}
inline void CodecStats::clear_sdp_fmtp_line() {
  _impl_.sdp_fmtp_line_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CodecStats::sdp_fmtp_line() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CodecStats.sdp_fmtp_line)
  return _internal_sdp_fmtp_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CodecStats::set_sdp_fmtp_line(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.sdp_fmtp_line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CodecStats.sdp_fmtp_line)
}
inline std::string* CodecStats::mutable_sdp_fmtp_line() {
  std::string* _s = _internal_mutable_sdp_fmtp_line();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CodecStats.sdp_fmtp_line)
  return _s;
}
inline const std::string& CodecStats::_internal_sdp_fmtp_line() const {
  return _impl_.sdp_fmtp_line_.Get();
}
inline void CodecStats::_internal_set_sdp_fmtp_line(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sdp_fmtp_line_.Set(value, GetArenaForAllocation());
}
inline std::string* CodecStats::_internal_mutable_sdp_fmtp_line() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.sdp_fmtp_line_.Mutable(GetArenaForAllocation());
}
inline std::string* CodecStats::release_sdp_fmtp_line() {
  // @@protoc_insertion_point(field_release:livekit.proto.CodecStats.sdp_fmtp_line)
  if (!_internal_has_sdp_fmtp_line()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.sdp_fmtp_line_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdp_fmtp_line_.IsDefault()) {
    _impl_.sdp_fmtp_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CodecStats::set_allocated_sdp_fmtp_line(std::string* sdp_fmtp_line) {
  if (sdp_fmtp_line != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sdp_fmtp_line_.SetAllocated(sdp_fmtp_line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdp_fmtp_line_.IsDefault()) {
    _impl_.sdp_fmtp_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CodecStats.sdp_fmtp_line)
}

// -------------------------------------------------------------------

// RtpStreamStats

// required uint32 ssrc = 1;
inline bool RtpStreamStats::_internal_has_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RtpStreamStats::has_ssrc() const {
  return _internal_has_ssrc();
}
inline void RtpStreamStats::clear_ssrc() {
  _impl_.ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RtpStreamStats::_internal_ssrc() const {
  return _impl_.ssrc_;
}
inline uint32_t RtpStreamStats::ssrc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtpStreamStats.ssrc)
  return _internal_ssrc();
}
inline void RtpStreamStats::_internal_set_ssrc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ssrc_ = value;
}
inline void RtpStreamStats::set_ssrc(uint32_t value) {
  _internal_set_ssrc(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RtpStreamStats.ssrc)
}

// required string kind = 2;
inline bool RtpStreamStats::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtpStreamStats::has_kind() const {
  return _internal_has_kind();
}
inline void RtpStreamStats::clear_kind() {
  _impl_.kind_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtpStreamStats::kind() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtpStreamStats.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtpStreamStats::set_kind(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RtpStreamStats.kind)
}
inline std::string* RtpStreamStats::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtpStreamStats.kind)
  return _s;
}
inline const std::string& RtpStreamStats::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void RtpStreamStats::_internal_set_kind(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* RtpStreamStats::_internal_mutable_kind() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* RtpStreamStats::release_kind() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtpStreamStats.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.kind_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RtpStreamStats::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtpStreamStats.kind)
}

// required string transport_id = 3;
inline bool RtpStreamStats::_internal_has_transport_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RtpStreamStats::has_transport_id() const {
  return _internal_has_transport_id();
}
inline void RtpStreamStats::clear_transport_id() {
  _impl_.transport_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RtpStreamStats::transport_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtpStreamStats.transport_id)
  return _internal_transport_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtpStreamStats::set_transport_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.transport_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RtpStreamStats.transport_id)
}
inline std::string* RtpStreamStats::mutable_transport_id() {
  std::string* _s = _internal_mutable_transport_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtpStreamStats.transport_id)
  return _s;
}
inline const std::string& RtpStreamStats::_internal_transport_id() const {
  return _impl_.transport_id_.Get();
}
inline void RtpStreamStats::_internal_set_transport_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.transport_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RtpStreamStats::_internal_mutable_transport_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.transport_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RtpStreamStats::release_transport_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtpStreamStats.transport_id)
  if (!_internal_has_transport_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.transport_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RtpStreamStats::set_allocated_transport_id(std::string* transport_id) {
  if (transport_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transport_id_.SetAllocated(transport_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtpStreamStats.transport_id)
}

// required string codec_id = 4;
inline bool RtpStreamStats::_internal_has_codec_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RtpStreamStats::has_codec_id() const {
  return _internal_has_codec_id();
}
inline void RtpStreamStats::clear_codec_id() {
  _impl_.codec_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RtpStreamStats::codec_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RtpStreamStats.codec_id)
  return _internal_codec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtpStreamStats::set_codec_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.codec_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RtpStreamStats.codec_id)
}
inline std::string* RtpStreamStats::mutable_codec_id() {
  std::string* _s = _internal_mutable_codec_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RtpStreamStats.codec_id)
  return _s;
}
inline const std::string& RtpStreamStats::_internal_codec_id() const {
  return _impl_.codec_id_.Get();
}
inline void RtpStreamStats::_internal_set_codec_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.codec_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RtpStreamStats::_internal_mutable_codec_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.codec_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RtpStreamStats::release_codec_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.RtpStreamStats.codec_id)
  if (!_internal_has_codec_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.codec_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codec_id_.IsDefault()) {
    _impl_.codec_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RtpStreamStats::set_allocated_codec_id(std::string* codec_id) {
  if (codec_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.codec_id_.SetAllocated(codec_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codec_id_.IsDefault()) {
    _impl_.codec_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtpStreamStats.codec_id)
}

// -------------------------------------------------------------------

// ReceivedRtpStreamStats

// required uint64 packets_received = 1;
inline bool ReceivedRtpStreamStats::_internal_has_packets_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReceivedRtpStreamStats::has_packets_received() const {
  return _internal_has_packets_received();
}
inline void ReceivedRtpStreamStats::clear_packets_received() {
  _impl_.packets_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ReceivedRtpStreamStats::_internal_packets_received() const {
  return _impl_.packets_received_;
}
inline uint64_t ReceivedRtpStreamStats::packets_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ReceivedRtpStreamStats.packets_received)
  return _internal_packets_received();
}
inline void ReceivedRtpStreamStats::_internal_set_packets_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packets_received_ = value;
}
inline void ReceivedRtpStreamStats::set_packets_received(uint64_t value) {
  _internal_set_packets_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.ReceivedRtpStreamStats.packets_received)
}

// required int64 packets_lost = 2;
inline bool ReceivedRtpStreamStats::_internal_has_packets_lost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReceivedRtpStreamStats::has_packets_lost() const {
  return _internal_has_packets_lost();
}
inline void ReceivedRtpStreamStats::clear_packets_lost() {
  _impl_.packets_lost_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t ReceivedRtpStreamStats::_internal_packets_lost() const {
  return _impl_.packets_lost_;
}
inline int64_t ReceivedRtpStreamStats::packets_lost() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ReceivedRtpStreamStats.packets_lost)
  return _internal_packets_lost();
}
inline void ReceivedRtpStreamStats::_internal_set_packets_lost(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.packets_lost_ = value;
}
inline void ReceivedRtpStreamStats::set_packets_lost(int64_t value) {
  _internal_set_packets_lost(value);
  // @@protoc_insertion_point(field_set:livekit.proto.ReceivedRtpStreamStats.packets_lost)
}

// required double jitter = 3;
inline bool ReceivedRtpStreamStats::_internal_has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReceivedRtpStreamStats::has_jitter() const {
  return _internal_has_jitter();
}
inline void ReceivedRtpStreamStats::clear_jitter() {
  _impl_.jitter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ReceivedRtpStreamStats::_internal_jitter() const {
  return _impl_.jitter_;
}
inline double ReceivedRtpStreamStats::jitter() const {
  // @@protoc_insertion_point(field_get:livekit.proto.ReceivedRtpStreamStats.jitter)
  return _internal_jitter();
}
inline void ReceivedRtpStreamStats::_internal_set_jitter(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.jitter_ = value;
}
inline void ReceivedRtpStreamStats::set_jitter(double value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:livekit.proto.ReceivedRtpStreamStats.jitter)
}

// -------------------------------------------------------------------

// InboundRtpStreamStats

// required string track_identifier = 1;
inline bool InboundRtpStreamStats::_internal_has_track_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_track_identifier() const {
  return _internal_has_track_identifier();
}
inline void InboundRtpStreamStats::clear_track_identifier() {
  _impl_.track_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InboundRtpStreamStats::track_identifier() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.track_identifier)
  return _internal_track_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InboundRtpStreamStats::set_track_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.track_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.track_identifier)
}
inline std::string* InboundRtpStreamStats::mutable_track_identifier() {
  std::string* _s = _internal_mutable_track_identifier();
  // @@protoc_insertion_point(field_mutable:livekit.proto.InboundRtpStreamStats.track_identifier)
  return _s;
}
inline const std::string& InboundRtpStreamStats::_internal_track_identifier() const {
  return _impl_.track_identifier_.Get();
}
inline void InboundRtpStreamStats::_internal_set_track_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.track_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::_internal_mutable_track_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.track_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::release_track_identifier() {
  // @@protoc_insertion_point(field_release:livekit.proto.InboundRtpStreamStats.track_identifier)
  if (!_internal_has_track_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.track_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.track_identifier_.IsDefault()) {
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InboundRtpStreamStats::set_allocated_track_identifier(std::string* track_identifier) {
  if (track_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.track_identifier_.SetAllocated(track_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.track_identifier_.IsDefault()) {
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.InboundRtpStreamStats.track_identifier)
}

// required string mid = 2;
inline bool InboundRtpStreamStats::_internal_has_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_mid() const {
  return _internal_has_mid();
}
inline void InboundRtpStreamStats::clear_mid() {
  _impl_.mid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InboundRtpStreamStats::mid() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.mid)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InboundRtpStreamStats::set_mid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.mid)
}
inline std::string* InboundRtpStreamStats::mutable_mid() {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:livekit.proto.InboundRtpStreamStats.mid)
  return _s;
}
inline const std::string& InboundRtpStreamStats::_internal_mid() const {
  return _impl_.mid_.Get();
}
inline void InboundRtpStreamStats::_internal_set_mid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mid_.Set(value, GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::_internal_mutable_mid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mid_.Mutable(GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::release_mid() {
  // @@protoc_insertion_point(field_release:livekit.proto.InboundRtpStreamStats.mid)
  if (!_internal_has_mid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InboundRtpStreamStats::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mid_.SetAllocated(mid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.InboundRtpStreamStats.mid)
}

// required string remote_id = 3;
inline bool InboundRtpStreamStats::_internal_has_remote_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_remote_id() const {
  return _internal_has_remote_id();
}
inline void InboundRtpStreamStats::clear_remote_id() {
  _impl_.remote_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InboundRtpStreamStats::remote_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.remote_id)
  return _internal_remote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InboundRtpStreamStats::set_remote_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.remote_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.remote_id)
}
inline std::string* InboundRtpStreamStats::mutable_remote_id() {
  std::string* _s = _internal_mutable_remote_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.InboundRtpStreamStats.remote_id)
  return _s;
}
inline const std::string& InboundRtpStreamStats::_internal_remote_id() const {
  return _impl_.remote_id_.Get();
}
inline void InboundRtpStreamStats::_internal_set_remote_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remote_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::_internal_mutable_remote_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.remote_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::release_remote_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.InboundRtpStreamStats.remote_id)
  if (!_internal_has_remote_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.remote_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_id_.IsDefault()) {
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InboundRtpStreamStats::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.remote_id_.SetAllocated(remote_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_id_.IsDefault()) {
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.InboundRtpStreamStats.remote_id)
}

// required uint32 frames_decoded = 4;
inline bool InboundRtpStreamStats::_internal_has_frames_decoded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frames_decoded() const {
  return _internal_has_frames_decoded();
}
inline void InboundRtpStreamStats::clear_frames_decoded() {
  _impl_.frames_decoded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t InboundRtpStreamStats::_internal_frames_decoded() const {
  return _impl_.frames_decoded_;
}
inline uint32_t InboundRtpStreamStats::frames_decoded() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frames_decoded)
  return _internal_frames_decoded();
}
inline void InboundRtpStreamStats::_internal_set_frames_decoded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.frames_decoded_ = value;
}
inline void InboundRtpStreamStats::set_frames_decoded(uint32_t value) {
  _internal_set_frames_decoded(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frames_decoded)
}

// required uint32 key_frames_decoded = 5;
inline bool InboundRtpStreamStats::_internal_has_key_frames_decoded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_key_frames_decoded() const {
  return _internal_has_key_frames_decoded();
}
inline void InboundRtpStreamStats::clear_key_frames_decoded() {
  _impl_.key_frames_decoded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t InboundRtpStreamStats::_internal_key_frames_decoded() const {
  return _impl_.key_frames_decoded_;
}
inline uint32_t InboundRtpStreamStats::key_frames_decoded() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.key_frames_decoded)
  return _internal_key_frames_decoded();
}
inline void InboundRtpStreamStats::_internal_set_key_frames_decoded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.key_frames_decoded_ = value;
}
inline void InboundRtpStreamStats::set_key_frames_decoded(uint32_t value) {
  _internal_set_key_frames_decoded(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.key_frames_decoded)
}

// required uint32 frames_rendered = 6;
inline bool InboundRtpStreamStats::_internal_has_frames_rendered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frames_rendered() const {
  return _internal_has_frames_rendered();
}
inline void InboundRtpStreamStats::clear_frames_rendered() {
  _impl_.frames_rendered_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t InboundRtpStreamStats::_internal_frames_rendered() const {
  return _impl_.frames_rendered_;
}
inline uint32_t InboundRtpStreamStats::frames_rendered() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frames_rendered)
  return _internal_frames_rendered();
}
inline void InboundRtpStreamStats::_internal_set_frames_rendered(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.frames_rendered_ = value;
}
inline void InboundRtpStreamStats::set_frames_rendered(uint32_t value) {
  _internal_set_frames_rendered(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frames_rendered)
}

// required uint32 frames_dropped = 7;
inline bool InboundRtpStreamStats::_internal_has_frames_dropped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frames_dropped() const {
  return _internal_has_frames_dropped();
}
inline void InboundRtpStreamStats::clear_frames_dropped() {
  _impl_.frames_dropped_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t InboundRtpStreamStats::_internal_frames_dropped() const {
  return _impl_.frames_dropped_;
}
inline uint32_t InboundRtpStreamStats::frames_dropped() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frames_dropped)
  return _internal_frames_dropped();
}
inline void InboundRtpStreamStats::_internal_set_frames_dropped(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.frames_dropped_ = value;
}
inline void InboundRtpStreamStats::set_frames_dropped(uint32_t value) {
  _internal_set_frames_dropped(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frames_dropped)
}

// required uint32 frame_width = 8;
inline bool InboundRtpStreamStats::_internal_has_frame_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void InboundRtpStreamStats::clear_frame_width() {
  _impl_.frame_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t InboundRtpStreamStats::_internal_frame_width() const {
  return _impl_.frame_width_;
}
inline uint32_t InboundRtpStreamStats::frame_width() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frame_width)
  return _internal_frame_width();
}
inline void InboundRtpStreamStats::_internal_set_frame_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.frame_width_ = value;
}
inline void InboundRtpStreamStats::set_frame_width(uint32_t value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frame_width)
}

// required uint32 frame_height = 9;
inline bool InboundRtpStreamStats::_internal_has_frame_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void InboundRtpStreamStats::clear_frame_height() {
  _impl_.frame_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t InboundRtpStreamStats::_internal_frame_height() const {
  return _impl_.frame_height_;
}
inline uint32_t InboundRtpStreamStats::frame_height() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frame_height)
  return _internal_frame_height();
}
inline void InboundRtpStreamStats::_internal_set_frame_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.frame_height_ = value;
}
inline void InboundRtpStreamStats::set_frame_height(uint32_t value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frame_height)
}

// required double frames_per_second = 10;
inline bool InboundRtpStreamStats::_internal_has_frames_per_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frames_per_second() const {
  return _internal_has_frames_per_second();
}
inline void InboundRtpStreamStats::clear_frames_per_second() {
  _impl_.frames_per_second_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double InboundRtpStreamStats::_internal_frames_per_second() const {
  return _impl_.frames_per_second_;
}
inline double InboundRtpStreamStats::frames_per_second() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frames_per_second)
  return _internal_frames_per_second();
}
inline void InboundRtpStreamStats::_internal_set_frames_per_second(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.frames_per_second_ = value;
}
inline void InboundRtpStreamStats::set_frames_per_second(double value) {
  _internal_set_frames_per_second(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frames_per_second)
}

// required uint64 qp_sum = 11;
inline bool InboundRtpStreamStats::_internal_has_qp_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_qp_sum() const {
  return _internal_has_qp_sum();
}
inline void InboundRtpStreamStats::clear_qp_sum() {
  _impl_.qp_sum_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t InboundRtpStreamStats::_internal_qp_sum() const {
  return _impl_.qp_sum_;
}
inline uint64_t InboundRtpStreamStats::qp_sum() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.qp_sum)
  return _internal_qp_sum();
}
inline void InboundRtpStreamStats::_internal_set_qp_sum(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.qp_sum_ = value;
}
inline void InboundRtpStreamStats::set_qp_sum(uint64_t value) {
  _internal_set_qp_sum(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.qp_sum)
}

// required double total_decode_time = 12;
inline bool InboundRtpStreamStats::_internal_has_total_decode_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_decode_time() const {
  return _internal_has_total_decode_time();
}
inline void InboundRtpStreamStats::clear_total_decode_time() {
  _impl_.total_decode_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double InboundRtpStreamStats::_internal_total_decode_time() const {
  return _impl_.total_decode_time_;
}
inline double InboundRtpStreamStats::total_decode_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_decode_time)
  return _internal_total_decode_time();
}
inline void InboundRtpStreamStats::_internal_set_total_decode_time(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.total_decode_time_ = value;
}
inline void InboundRtpStreamStats::set_total_decode_time(double value) {
  _internal_set_total_decode_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_decode_time)
}

// required double total_inter_frame_delay = 13;
inline bool InboundRtpStreamStats::_internal_has_total_inter_frame_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_inter_frame_delay() const {
  return _internal_has_total_inter_frame_delay();
}
inline void InboundRtpStreamStats::clear_total_inter_frame_delay() {
  _impl_.total_inter_frame_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double InboundRtpStreamStats::_internal_total_inter_frame_delay() const {
  return _impl_.total_inter_frame_delay_;
}
inline double InboundRtpStreamStats::total_inter_frame_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_inter_frame_delay)
  return _internal_total_inter_frame_delay();
}
inline void InboundRtpStreamStats::_internal_set_total_inter_frame_delay(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.total_inter_frame_delay_ = value;
}
inline void InboundRtpStreamStats::set_total_inter_frame_delay(double value) {
  _internal_set_total_inter_frame_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_inter_frame_delay)
}

// required double total_squared_inter_frame_delay = 14;
inline bool InboundRtpStreamStats::_internal_has_total_squared_inter_frame_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_squared_inter_frame_delay() const {
  return _internal_has_total_squared_inter_frame_delay();
}
inline void InboundRtpStreamStats::clear_total_squared_inter_frame_delay() {
  _impl_.total_squared_inter_frame_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double InboundRtpStreamStats::_internal_total_squared_inter_frame_delay() const {
  return _impl_.total_squared_inter_frame_delay_;
}
inline double InboundRtpStreamStats::total_squared_inter_frame_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_squared_inter_frame_delay)
  return _internal_total_squared_inter_frame_delay();
}
inline void InboundRtpStreamStats::_internal_set_total_squared_inter_frame_delay(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.total_squared_inter_frame_delay_ = value;
}
inline void InboundRtpStreamStats::set_total_squared_inter_frame_delay(double value) {
  _internal_set_total_squared_inter_frame_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_squared_inter_frame_delay)
}

// required uint32 pause_count = 15;
inline bool InboundRtpStreamStats::_internal_has_pause_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_pause_count() const {
  return _internal_has_pause_count();
}
inline void InboundRtpStreamStats::clear_pause_count() {
  _impl_.pause_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t InboundRtpStreamStats::_internal_pause_count() const {
  return _impl_.pause_count_;
}
inline uint32_t InboundRtpStreamStats::pause_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.pause_count)
  return _internal_pause_count();
}
inline void InboundRtpStreamStats::_internal_set_pause_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.pause_count_ = value;
}
inline void InboundRtpStreamStats::set_pause_count(uint32_t value) {
  _internal_set_pause_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.pause_count)
}

// required double total_pause_duration = 16;
inline bool InboundRtpStreamStats::_internal_has_total_pause_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_pause_duration() const {
  return _internal_has_total_pause_duration();
}
inline void InboundRtpStreamStats::clear_total_pause_duration() {
  _impl_.total_pause_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double InboundRtpStreamStats::_internal_total_pause_duration() const {
  return _impl_.total_pause_duration_;
}
inline double InboundRtpStreamStats::total_pause_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_pause_duration)
  return _internal_total_pause_duration();
}
inline void InboundRtpStreamStats::_internal_set_total_pause_duration(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.total_pause_duration_ = value;
}
inline void InboundRtpStreamStats::set_total_pause_duration(double value) {
  _internal_set_total_pause_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_pause_duration)
}

// required uint32 freeze_count = 17;
inline bool InboundRtpStreamStats::_internal_has_freeze_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_freeze_count() const {
  return _internal_has_freeze_count();
}
inline void InboundRtpStreamStats::clear_freeze_count() {
  _impl_.freeze_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t InboundRtpStreamStats::_internal_freeze_count() const {
  return _impl_.freeze_count_;
}
inline uint32_t InboundRtpStreamStats::freeze_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.freeze_count)
  return _internal_freeze_count();
}
inline void InboundRtpStreamStats::_internal_set_freeze_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.freeze_count_ = value;
}
inline void InboundRtpStreamStats::set_freeze_count(uint32_t value) {
  _internal_set_freeze_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.freeze_count)
}

// required double total_freeze_duration = 18;
inline bool InboundRtpStreamStats::_internal_has_total_freeze_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_freeze_duration() const {
  return _internal_has_total_freeze_duration();
}
inline void InboundRtpStreamStats::clear_total_freeze_duration() {
  _impl_.total_freeze_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double InboundRtpStreamStats::_internal_total_freeze_duration() const {
  return _impl_.total_freeze_duration_;
}
inline double InboundRtpStreamStats::total_freeze_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_freeze_duration)
  return _internal_total_freeze_duration();
}
inline void InboundRtpStreamStats::_internal_set_total_freeze_duration(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.total_freeze_duration_ = value;
}
inline void InboundRtpStreamStats::set_total_freeze_duration(double value) {
  _internal_set_total_freeze_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_freeze_duration)
}

// required double last_packet_received_timestamp = 19;
inline bool InboundRtpStreamStats::_internal_has_last_packet_received_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_last_packet_received_timestamp() const {
  return _internal_has_last_packet_received_timestamp();
}
inline void InboundRtpStreamStats::clear_last_packet_received_timestamp() {
  _impl_.last_packet_received_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double InboundRtpStreamStats::_internal_last_packet_received_timestamp() const {
  return _impl_.last_packet_received_timestamp_;
}
inline double InboundRtpStreamStats::last_packet_received_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.last_packet_received_timestamp)
  return _internal_last_packet_received_timestamp();
}
inline void InboundRtpStreamStats::_internal_set_last_packet_received_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.last_packet_received_timestamp_ = value;
}
inline void InboundRtpStreamStats::set_last_packet_received_timestamp(double value) {
  _internal_set_last_packet_received_timestamp(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.last_packet_received_timestamp)
}

// required uint64 header_bytes_received = 20;
inline bool InboundRtpStreamStats::_internal_has_header_bytes_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_header_bytes_received() const {
  return _internal_has_header_bytes_received();
}
inline void InboundRtpStreamStats::clear_header_bytes_received() {
  _impl_.header_bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint64_t InboundRtpStreamStats::_internal_header_bytes_received() const {
  return _impl_.header_bytes_received_;
}
inline uint64_t InboundRtpStreamStats::header_bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.header_bytes_received)
  return _internal_header_bytes_received();
}
inline void InboundRtpStreamStats::_internal_set_header_bytes_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.header_bytes_received_ = value;
}
inline void InboundRtpStreamStats::set_header_bytes_received(uint64_t value) {
  _internal_set_header_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.header_bytes_received)
}

// required uint64 packets_discarded = 21;
inline bool InboundRtpStreamStats::_internal_has_packets_discarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_packets_discarded() const {
  return _internal_has_packets_discarded();
}
inline void InboundRtpStreamStats::clear_packets_discarded() {
  _impl_.packets_discarded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint64_t InboundRtpStreamStats::_internal_packets_discarded() const {
  return _impl_.packets_discarded_;
}
inline uint64_t InboundRtpStreamStats::packets_discarded() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.packets_discarded)
  return _internal_packets_discarded();
}
inline void InboundRtpStreamStats::_internal_set_packets_discarded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.packets_discarded_ = value;
}
inline void InboundRtpStreamStats::set_packets_discarded(uint64_t value) {
  _internal_set_packets_discarded(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.packets_discarded)
}

// required uint64 fec_bytes_received = 22;
inline bool InboundRtpStreamStats::_internal_has_fec_bytes_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_fec_bytes_received() const {
  return _internal_has_fec_bytes_received();
}
inline void InboundRtpStreamStats::clear_fec_bytes_received() {
  _impl_.fec_bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint64_t InboundRtpStreamStats::_internal_fec_bytes_received() const {
  return _impl_.fec_bytes_received_;
}
inline uint64_t InboundRtpStreamStats::fec_bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.fec_bytes_received)
  return _internal_fec_bytes_received();
}
inline void InboundRtpStreamStats::_internal_set_fec_bytes_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.fec_bytes_received_ = value;
}
inline void InboundRtpStreamStats::set_fec_bytes_received(uint64_t value) {
  _internal_set_fec_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.fec_bytes_received)
}

// required uint64 fec_packets_received = 23;
inline bool InboundRtpStreamStats::_internal_has_fec_packets_received() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_fec_packets_received() const {
  return _internal_has_fec_packets_received();
}
inline void InboundRtpStreamStats::clear_fec_packets_received() {
  _impl_.fec_packets_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint64_t InboundRtpStreamStats::_internal_fec_packets_received() const {
  return _impl_.fec_packets_received_;
}
inline uint64_t InboundRtpStreamStats::fec_packets_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.fec_packets_received)
  return _internal_fec_packets_received();
}
inline void InboundRtpStreamStats::_internal_set_fec_packets_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.fec_packets_received_ = value;
}
inline void InboundRtpStreamStats::set_fec_packets_received(uint64_t value) {
  _internal_set_fec_packets_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.fec_packets_received)
}

// required uint64 fec_packets_discarded = 24;
inline bool InboundRtpStreamStats::_internal_has_fec_packets_discarded() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_fec_packets_discarded() const {
  return _internal_has_fec_packets_discarded();
}
inline void InboundRtpStreamStats::clear_fec_packets_discarded() {
  _impl_.fec_packets_discarded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint64_t InboundRtpStreamStats::_internal_fec_packets_discarded() const {
  return _impl_.fec_packets_discarded_;
}
inline uint64_t InboundRtpStreamStats::fec_packets_discarded() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.fec_packets_discarded)
  return _internal_fec_packets_discarded();
}
inline void InboundRtpStreamStats::_internal_set_fec_packets_discarded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.fec_packets_discarded_ = value;
}
inline void InboundRtpStreamStats::set_fec_packets_discarded(uint64_t value) {
  _internal_set_fec_packets_discarded(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.fec_packets_discarded)
}

// required uint64 bytes_received = 25;
inline bool InboundRtpStreamStats::_internal_has_bytes_received() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_bytes_received() const {
  return _internal_has_bytes_received();
}
inline void InboundRtpStreamStats::clear_bytes_received() {
  _impl_.bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint64_t InboundRtpStreamStats::_internal_bytes_received() const {
  return _impl_.bytes_received_;
}
inline uint64_t InboundRtpStreamStats::bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.bytes_received)
  return _internal_bytes_received();
}
inline void InboundRtpStreamStats::_internal_set_bytes_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.bytes_received_ = value;
}
inline void InboundRtpStreamStats::set_bytes_received(uint64_t value) {
  _internal_set_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.bytes_received)
}

// required uint32 nack_count = 26;
inline bool InboundRtpStreamStats::_internal_has_nack_count() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_nack_count() const {
  return _internal_has_nack_count();
}
inline void InboundRtpStreamStats::clear_nack_count() {
  _impl_.nack_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t InboundRtpStreamStats::_internal_nack_count() const {
  return _impl_.nack_count_;
}
inline uint32_t InboundRtpStreamStats::nack_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.nack_count)
  return _internal_nack_count();
}
inline void InboundRtpStreamStats::_internal_set_nack_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.nack_count_ = value;
}
inline void InboundRtpStreamStats::set_nack_count(uint32_t value) {
  _internal_set_nack_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.nack_count)
}

// required uint32 fir_count = 27;
inline bool InboundRtpStreamStats::_internal_has_fir_count() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_fir_count() const {
  return _internal_has_fir_count();
}
inline void InboundRtpStreamStats::clear_fir_count() {
  _impl_.fir_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t InboundRtpStreamStats::_internal_fir_count() const {
  return _impl_.fir_count_;
}
inline uint32_t InboundRtpStreamStats::fir_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.fir_count)
  return _internal_fir_count();
}
inline void InboundRtpStreamStats::_internal_set_fir_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.fir_count_ = value;
}
inline void InboundRtpStreamStats::set_fir_count(uint32_t value) {
  _internal_set_fir_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.fir_count)
}

// required uint32 pli_count = 28;
inline bool InboundRtpStreamStats::_internal_has_pli_count() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_pli_count() const {
  return _internal_has_pli_count();
}
inline void InboundRtpStreamStats::clear_pli_count() {
  _impl_.pli_count_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t InboundRtpStreamStats::_internal_pli_count() const {
  return _impl_.pli_count_;
}
inline uint32_t InboundRtpStreamStats::pli_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.pli_count)
  return _internal_pli_count();
}
inline void InboundRtpStreamStats::_internal_set_pli_count(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.pli_count_ = value;
}
inline void InboundRtpStreamStats::set_pli_count(uint32_t value) {
  _internal_set_pli_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.pli_count)
}

// required double total_processing_delay = 29;
inline bool InboundRtpStreamStats::_internal_has_total_processing_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_processing_delay() const {
  return _internal_has_total_processing_delay();
}
inline void InboundRtpStreamStats::clear_total_processing_delay() {
  _impl_.total_processing_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double InboundRtpStreamStats::_internal_total_processing_delay() const {
  return _impl_.total_processing_delay_;
}
inline double InboundRtpStreamStats::total_processing_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_processing_delay)
  return _internal_total_processing_delay();
}
inline void InboundRtpStreamStats::_internal_set_total_processing_delay(double value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.total_processing_delay_ = value;
}
inline void InboundRtpStreamStats::set_total_processing_delay(double value) {
  _internal_set_total_processing_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_processing_delay)
}

// required double estimated_playout_timestamp = 30;
inline bool InboundRtpStreamStats::_internal_has_estimated_playout_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_estimated_playout_timestamp() const {
  return _internal_has_estimated_playout_timestamp();
}
inline void InboundRtpStreamStats::clear_estimated_playout_timestamp() {
  _impl_.estimated_playout_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double InboundRtpStreamStats::_internal_estimated_playout_timestamp() const {
  return _impl_.estimated_playout_timestamp_;
}
inline double InboundRtpStreamStats::estimated_playout_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.estimated_playout_timestamp)
  return _internal_estimated_playout_timestamp();
}
inline void InboundRtpStreamStats::_internal_set_estimated_playout_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.estimated_playout_timestamp_ = value;
}
inline void InboundRtpStreamStats::set_estimated_playout_timestamp(double value) {
  _internal_set_estimated_playout_timestamp(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.estimated_playout_timestamp)
}

// required double jitter_buffer_delay = 31;
inline bool InboundRtpStreamStats::_internal_has_jitter_buffer_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_jitter_buffer_delay() const {
  return _internal_has_jitter_buffer_delay();
}
inline void InboundRtpStreamStats::clear_jitter_buffer_delay() {
  _impl_.jitter_buffer_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline double InboundRtpStreamStats::_internal_jitter_buffer_delay() const {
  return _impl_.jitter_buffer_delay_;
}
inline double InboundRtpStreamStats::jitter_buffer_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.jitter_buffer_delay)
  return _internal_jitter_buffer_delay();
}
inline void InboundRtpStreamStats::_internal_set_jitter_buffer_delay(double value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.jitter_buffer_delay_ = value;
}
inline void InboundRtpStreamStats::set_jitter_buffer_delay(double value) {
  _internal_set_jitter_buffer_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.jitter_buffer_delay)
}

// required double jitter_buffer_target_delay = 32;
inline bool InboundRtpStreamStats::_internal_has_jitter_buffer_target_delay() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_jitter_buffer_target_delay() const {
  return _internal_has_jitter_buffer_target_delay();
}
inline void InboundRtpStreamStats::clear_jitter_buffer_target_delay() {
  _impl_.jitter_buffer_target_delay_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline double InboundRtpStreamStats::_internal_jitter_buffer_target_delay() const {
  return _impl_.jitter_buffer_target_delay_;
}
inline double InboundRtpStreamStats::jitter_buffer_target_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.jitter_buffer_target_delay)
  return _internal_jitter_buffer_target_delay();
}
inline void InboundRtpStreamStats::_internal_set_jitter_buffer_target_delay(double value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.jitter_buffer_target_delay_ = value;
}
inline void InboundRtpStreamStats::set_jitter_buffer_target_delay(double value) {
  _internal_set_jitter_buffer_target_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.jitter_buffer_target_delay)
}

// required uint64 jitter_buffer_emitted_count = 33;
inline bool InboundRtpStreamStats::_internal_has_jitter_buffer_emitted_count() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_jitter_buffer_emitted_count() const {
  return _internal_has_jitter_buffer_emitted_count();
}
inline void InboundRtpStreamStats::clear_jitter_buffer_emitted_count() {
  _impl_.jitter_buffer_emitted_count_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint64_t InboundRtpStreamStats::_internal_jitter_buffer_emitted_count() const {
  return _impl_.jitter_buffer_emitted_count_;
}
inline uint64_t InboundRtpStreamStats::jitter_buffer_emitted_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.jitter_buffer_emitted_count)
  return _internal_jitter_buffer_emitted_count();
}
inline void InboundRtpStreamStats::_internal_set_jitter_buffer_emitted_count(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.jitter_buffer_emitted_count_ = value;
}
inline void InboundRtpStreamStats::set_jitter_buffer_emitted_count(uint64_t value) {
  _internal_set_jitter_buffer_emitted_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.jitter_buffer_emitted_count)
}

// required double jitter_buffer_minimum_delay = 34;
inline bool InboundRtpStreamStats::_internal_has_jitter_buffer_minimum_delay() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_jitter_buffer_minimum_delay() const {
  return _internal_has_jitter_buffer_minimum_delay();
}
inline void InboundRtpStreamStats::clear_jitter_buffer_minimum_delay() {
  _impl_.jitter_buffer_minimum_delay_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline double InboundRtpStreamStats::_internal_jitter_buffer_minimum_delay() const {
  return _impl_.jitter_buffer_minimum_delay_;
}
inline double InboundRtpStreamStats::jitter_buffer_minimum_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.jitter_buffer_minimum_delay)
  return _internal_jitter_buffer_minimum_delay();
}
inline void InboundRtpStreamStats::_internal_set_jitter_buffer_minimum_delay(double value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.jitter_buffer_minimum_delay_ = value;
}
inline void InboundRtpStreamStats::set_jitter_buffer_minimum_delay(double value) {
  _internal_set_jitter_buffer_minimum_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.jitter_buffer_minimum_delay)
}

// required uint64 total_samples_received = 35;
inline bool InboundRtpStreamStats::_internal_has_total_samples_received() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_samples_received() const {
  return _internal_has_total_samples_received();
}
inline void InboundRtpStreamStats::clear_total_samples_received() {
  _impl_.total_samples_received_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint64_t InboundRtpStreamStats::_internal_total_samples_received() const {
  return _impl_.total_samples_received_;
}
inline uint64_t InboundRtpStreamStats::total_samples_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_samples_received)
  return _internal_total_samples_received();
}
inline void InboundRtpStreamStats::_internal_set_total_samples_received(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.total_samples_received_ = value;
}
inline void InboundRtpStreamStats::set_total_samples_received(uint64_t value) {
  _internal_set_total_samples_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_samples_received)
}

// required uint64 concealed_samples = 36;
inline bool InboundRtpStreamStats::_internal_has_concealed_samples() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_concealed_samples() const {
  return _internal_has_concealed_samples();
}
inline void InboundRtpStreamStats::clear_concealed_samples() {
  _impl_.concealed_samples_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint64_t InboundRtpStreamStats::_internal_concealed_samples() const {
  return _impl_.concealed_samples_;
}
inline uint64_t InboundRtpStreamStats::concealed_samples() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.concealed_samples)
  return _internal_concealed_samples();
}
inline void InboundRtpStreamStats::_internal_set_concealed_samples(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.concealed_samples_ = value;
}
inline void InboundRtpStreamStats::set_concealed_samples(uint64_t value) {
  _internal_set_concealed_samples(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.concealed_samples)
}

// required uint64 silent_concealed_samples = 37;
inline bool InboundRtpStreamStats::_internal_has_silent_concealed_samples() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_silent_concealed_samples() const {
  return _internal_has_silent_concealed_samples();
}
inline void InboundRtpStreamStats::clear_silent_concealed_samples() {
  _impl_.silent_concealed_samples_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint64_t InboundRtpStreamStats::_internal_silent_concealed_samples() const {
  return _impl_.silent_concealed_samples_;
}
inline uint64_t InboundRtpStreamStats::silent_concealed_samples() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.silent_concealed_samples)
  return _internal_silent_concealed_samples();
}
inline void InboundRtpStreamStats::_internal_set_silent_concealed_samples(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.silent_concealed_samples_ = value;
}
inline void InboundRtpStreamStats::set_silent_concealed_samples(uint64_t value) {
  _internal_set_silent_concealed_samples(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.silent_concealed_samples)
}

// required uint64 concealment_events = 38;
inline bool InboundRtpStreamStats::_internal_has_concealment_events() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_concealment_events() const {
  return _internal_has_concealment_events();
}
inline void InboundRtpStreamStats::clear_concealment_events() {
  _impl_.concealment_events_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint64_t InboundRtpStreamStats::_internal_concealment_events() const {
  return _impl_.concealment_events_;
}
inline uint64_t InboundRtpStreamStats::concealment_events() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.concealment_events)
  return _internal_concealment_events();
}
inline void InboundRtpStreamStats::_internal_set_concealment_events(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.concealment_events_ = value;
}
inline void InboundRtpStreamStats::set_concealment_events(uint64_t value) {
  _internal_set_concealment_events(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.concealment_events)
}

// required uint64 inserted_samples_for_deceleration = 39;
inline bool InboundRtpStreamStats::_internal_has_inserted_samples_for_deceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_inserted_samples_for_deceleration() const {
  return _internal_has_inserted_samples_for_deceleration();
}
inline void InboundRtpStreamStats::clear_inserted_samples_for_deceleration() {
  _impl_.inserted_samples_for_deceleration_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline uint64_t InboundRtpStreamStats::_internal_inserted_samples_for_deceleration() const {
  return _impl_.inserted_samples_for_deceleration_;
}
inline uint64_t InboundRtpStreamStats::inserted_samples_for_deceleration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.inserted_samples_for_deceleration)
  return _internal_inserted_samples_for_deceleration();
}
inline void InboundRtpStreamStats::_internal_set_inserted_samples_for_deceleration(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.inserted_samples_for_deceleration_ = value;
}
inline void InboundRtpStreamStats::set_inserted_samples_for_deceleration(uint64_t value) {
  _internal_set_inserted_samples_for_deceleration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.inserted_samples_for_deceleration)
}

// required uint64 removed_samples_for_acceleration = 40;
inline bool InboundRtpStreamStats::_internal_has_removed_samples_for_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_removed_samples_for_acceleration() const {
  return _internal_has_removed_samples_for_acceleration();
}
inline void InboundRtpStreamStats::clear_removed_samples_for_acceleration() {
  _impl_.removed_samples_for_acceleration_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline uint64_t InboundRtpStreamStats::_internal_removed_samples_for_acceleration() const {
  return _impl_.removed_samples_for_acceleration_;
}
inline uint64_t InboundRtpStreamStats::removed_samples_for_acceleration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.removed_samples_for_acceleration)
  return _internal_removed_samples_for_acceleration();
}
inline void InboundRtpStreamStats::_internal_set_removed_samples_for_acceleration(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.removed_samples_for_acceleration_ = value;
}
inline void InboundRtpStreamStats::set_removed_samples_for_acceleration(uint64_t value) {
  _internal_set_removed_samples_for_acceleration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.removed_samples_for_acceleration)
}

// required double audio_level = 41;
inline bool InboundRtpStreamStats::_internal_has_audio_level() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_audio_level() const {
  return _internal_has_audio_level();
}
inline void InboundRtpStreamStats::clear_audio_level() {
  _impl_.audio_level_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline double InboundRtpStreamStats::_internal_audio_level() const {
  return _impl_.audio_level_;
}
inline double InboundRtpStreamStats::audio_level() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.audio_level)
  return _internal_audio_level();
}
inline void InboundRtpStreamStats::_internal_set_audio_level(double value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.audio_level_ = value;
}
inline void InboundRtpStreamStats::set_audio_level(double value) {
  _internal_set_audio_level(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.audio_level)
}

// required double total_audio_energy = 42;
inline bool InboundRtpStreamStats::_internal_has_total_audio_energy() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_audio_energy() const {
  return _internal_has_total_audio_energy();
}
inline void InboundRtpStreamStats::clear_total_audio_energy() {
  _impl_.total_audio_energy_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline double InboundRtpStreamStats::_internal_total_audio_energy() const {
  return _impl_.total_audio_energy_;
}
inline double InboundRtpStreamStats::total_audio_energy() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_audio_energy)
  return _internal_total_audio_energy();
}
inline void InboundRtpStreamStats::_internal_set_total_audio_energy(double value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.total_audio_energy_ = value;
}
inline void InboundRtpStreamStats::set_total_audio_energy(double value) {
  _internal_set_total_audio_energy(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_audio_energy)
}

// required double total_samples_duration = 43;
inline bool InboundRtpStreamStats::_internal_has_total_samples_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_samples_duration() const {
  return _internal_has_total_samples_duration();
}
inline void InboundRtpStreamStats::clear_total_samples_duration() {
  _impl_.total_samples_duration_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline double InboundRtpStreamStats::_internal_total_samples_duration() const {
  return _impl_.total_samples_duration_;
}
inline double InboundRtpStreamStats::total_samples_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_samples_duration)
  return _internal_total_samples_duration();
}
inline void InboundRtpStreamStats::_internal_set_total_samples_duration(double value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.total_samples_duration_ = value;
}
inline void InboundRtpStreamStats::set_total_samples_duration(double value) {
  _internal_set_total_samples_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_samples_duration)
}

// required uint64 frames_received = 44;
inline bool InboundRtpStreamStats::_internal_has_frames_received() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frames_received() const {
  return _internal_has_frames_received();
}
inline void InboundRtpStreamStats::clear_frames_received() {
  _impl_.frames_received_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint64_t InboundRtpStreamStats::_internal_frames_received() const {
  return _impl_.frames_received_;
}
inline uint64_t InboundRtpStreamStats::frames_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frames_received)
  return _internal_frames_received();
}
inline void InboundRtpStreamStats::_internal_set_frames_received(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.frames_received_ = value;
}
inline void InboundRtpStreamStats::set_frames_received(uint64_t value) {
  _internal_set_frames_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frames_received)
}

// required string decoder_implementation = 45;
inline bool InboundRtpStreamStats::_internal_has_decoder_implementation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_decoder_implementation() const {
  return _internal_has_decoder_implementation();
}
inline void InboundRtpStreamStats::clear_decoder_implementation() {
  _impl_.decoder_implementation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& InboundRtpStreamStats::decoder_implementation() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.decoder_implementation)
  return _internal_decoder_implementation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InboundRtpStreamStats::set_decoder_implementation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.decoder_implementation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.decoder_implementation)
}
inline std::string* InboundRtpStreamStats::mutable_decoder_implementation() {
  std::string* _s = _internal_mutable_decoder_implementation();
  // @@protoc_insertion_point(field_mutable:livekit.proto.InboundRtpStreamStats.decoder_implementation)
  return _s;
}
inline const std::string& InboundRtpStreamStats::_internal_decoder_implementation() const {
  return _impl_.decoder_implementation_.Get();
}
inline void InboundRtpStreamStats::_internal_set_decoder_implementation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.decoder_implementation_.Set(value, GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::_internal_mutable_decoder_implementation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.decoder_implementation_.Mutable(GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::release_decoder_implementation() {
  // @@protoc_insertion_point(field_release:livekit.proto.InboundRtpStreamStats.decoder_implementation)
  if (!_internal_has_decoder_implementation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.decoder_implementation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decoder_implementation_.IsDefault()) {
    _impl_.decoder_implementation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InboundRtpStreamStats::set_allocated_decoder_implementation(std::string* decoder_implementation) {
  if (decoder_implementation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.decoder_implementation_.SetAllocated(decoder_implementation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decoder_implementation_.IsDefault()) {
    _impl_.decoder_implementation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.InboundRtpStreamStats.decoder_implementation)
}

// required string playout_id = 46;
inline bool InboundRtpStreamStats::_internal_has_playout_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_playout_id() const {
  return _internal_has_playout_id();
}
inline void InboundRtpStreamStats::clear_playout_id() {
  _impl_.playout_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& InboundRtpStreamStats::playout_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.playout_id)
  return _internal_playout_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InboundRtpStreamStats::set_playout_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.playout_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.playout_id)
}
inline std::string* InboundRtpStreamStats::mutable_playout_id() {
  std::string* _s = _internal_mutable_playout_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.InboundRtpStreamStats.playout_id)
  return _s;
}
inline const std::string& InboundRtpStreamStats::_internal_playout_id() const {
  return _impl_.playout_id_.Get();
}
inline void InboundRtpStreamStats::_internal_set_playout_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.playout_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::_internal_mutable_playout_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.playout_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InboundRtpStreamStats::release_playout_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.InboundRtpStreamStats.playout_id)
  if (!_internal_has_playout_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.playout_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playout_id_.IsDefault()) {
    _impl_.playout_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InboundRtpStreamStats::set_allocated_playout_id(std::string* playout_id) {
  if (playout_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.playout_id_.SetAllocated(playout_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playout_id_.IsDefault()) {
    _impl_.playout_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.InboundRtpStreamStats.playout_id)
}

// required bool power_efficient_decoder = 47;
inline bool InboundRtpStreamStats::_internal_has_power_efficient_decoder() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_power_efficient_decoder() const {
  return _internal_has_power_efficient_decoder();
}
inline void InboundRtpStreamStats::clear_power_efficient_decoder() {
  _impl_.power_efficient_decoder_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool InboundRtpStreamStats::_internal_power_efficient_decoder() const {
  return _impl_.power_efficient_decoder_;
}
inline bool InboundRtpStreamStats::power_efficient_decoder() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.power_efficient_decoder)
  return _internal_power_efficient_decoder();
}
inline void InboundRtpStreamStats::_internal_set_power_efficient_decoder(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.power_efficient_decoder_ = value;
}
inline void InboundRtpStreamStats::set_power_efficient_decoder(bool value) {
  _internal_set_power_efficient_decoder(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.power_efficient_decoder)
}

// required uint64 frames_assembled_from_multiple_packets = 48;
inline bool InboundRtpStreamStats::_internal_has_frames_assembled_from_multiple_packets() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_frames_assembled_from_multiple_packets() const {
  return _internal_has_frames_assembled_from_multiple_packets();
}
inline void InboundRtpStreamStats::clear_frames_assembled_from_multiple_packets() {
  _impl_.frames_assembled_from_multiple_packets_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint64_t InboundRtpStreamStats::_internal_frames_assembled_from_multiple_packets() const {
  return _impl_.frames_assembled_from_multiple_packets_;
}
inline uint64_t InboundRtpStreamStats::frames_assembled_from_multiple_packets() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.frames_assembled_from_multiple_packets)
  return _internal_frames_assembled_from_multiple_packets();
}
inline void InboundRtpStreamStats::_internal_set_frames_assembled_from_multiple_packets(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.frames_assembled_from_multiple_packets_ = value;
}
inline void InboundRtpStreamStats::set_frames_assembled_from_multiple_packets(uint64_t value) {
  _internal_set_frames_assembled_from_multiple_packets(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.frames_assembled_from_multiple_packets)
}

// required double total_assembly_time = 49;
inline bool InboundRtpStreamStats::_internal_has_total_assembly_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_total_assembly_time() const {
  return _internal_has_total_assembly_time();
}
inline void InboundRtpStreamStats::clear_total_assembly_time() {
  _impl_.total_assembly_time_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline double InboundRtpStreamStats::_internal_total_assembly_time() const {
  return _impl_.total_assembly_time_;
}
inline double InboundRtpStreamStats::total_assembly_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.total_assembly_time)
  return _internal_total_assembly_time();
}
inline void InboundRtpStreamStats::_internal_set_total_assembly_time(double value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.total_assembly_time_ = value;
}
inline void InboundRtpStreamStats::set_total_assembly_time(double value) {
  _internal_set_total_assembly_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.total_assembly_time)
}

// required uint64 retransmitted_packets_received = 50;
inline bool InboundRtpStreamStats::_internal_has_retransmitted_packets_received() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_retransmitted_packets_received() const {
  return _internal_has_retransmitted_packets_received();
}
inline void InboundRtpStreamStats::clear_retransmitted_packets_received() {
  _impl_.retransmitted_packets_received_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline uint64_t InboundRtpStreamStats::_internal_retransmitted_packets_received() const {
  return _impl_.retransmitted_packets_received_;
}
inline uint64_t InboundRtpStreamStats::retransmitted_packets_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.retransmitted_packets_received)
  return _internal_retransmitted_packets_received();
}
inline void InboundRtpStreamStats::_internal_set_retransmitted_packets_received(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.retransmitted_packets_received_ = value;
}
inline void InboundRtpStreamStats::set_retransmitted_packets_received(uint64_t value) {
  _internal_set_retransmitted_packets_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.retransmitted_packets_received)
}

// required uint64 retransmitted_bytes_received = 51;
inline bool InboundRtpStreamStats::_internal_has_retransmitted_bytes_received() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_retransmitted_bytes_received() const {
  return _internal_has_retransmitted_bytes_received();
}
inline void InboundRtpStreamStats::clear_retransmitted_bytes_received() {
  _impl_.retransmitted_bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline uint64_t InboundRtpStreamStats::_internal_retransmitted_bytes_received() const {
  return _impl_.retransmitted_bytes_received_;
}
inline uint64_t InboundRtpStreamStats::retransmitted_bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.retransmitted_bytes_received)
  return _internal_retransmitted_bytes_received();
}
inline void InboundRtpStreamStats::_internal_set_retransmitted_bytes_received(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.retransmitted_bytes_received_ = value;
}
inline void InboundRtpStreamStats::set_retransmitted_bytes_received(uint64_t value) {
  _internal_set_retransmitted_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.retransmitted_bytes_received)
}

// required uint32 rtx_ssrc = 52;
inline bool InboundRtpStreamStats::_internal_has_rtx_ssrc() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_rtx_ssrc() const {
  return _internal_has_rtx_ssrc();
}
inline void InboundRtpStreamStats::clear_rtx_ssrc() {
  _impl_.rtx_ssrc_ = 0u;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline uint32_t InboundRtpStreamStats::_internal_rtx_ssrc() const {
  return _impl_.rtx_ssrc_;
}
inline uint32_t InboundRtpStreamStats::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.rtx_ssrc)
  return _internal_rtx_ssrc();
}
inline void InboundRtpStreamStats::_internal_set_rtx_ssrc(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.rtx_ssrc_ = value;
}
inline void InboundRtpStreamStats::set_rtx_ssrc(uint32_t value) {
  _internal_set_rtx_ssrc(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.rtx_ssrc)
}

// required uint32 fec_ssrc = 53;
inline bool InboundRtpStreamStats::_internal_has_fec_ssrc() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool InboundRtpStreamStats::has_fec_ssrc() const {
  return _internal_has_fec_ssrc();
}
inline void InboundRtpStreamStats::clear_fec_ssrc() {
  _impl_.fec_ssrc_ = 0u;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline uint32_t InboundRtpStreamStats::_internal_fec_ssrc() const {
  return _impl_.fec_ssrc_;
}
inline uint32_t InboundRtpStreamStats::fec_ssrc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.InboundRtpStreamStats.fec_ssrc)
  return _internal_fec_ssrc();
}
inline void InboundRtpStreamStats::_internal_set_fec_ssrc(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.fec_ssrc_ = value;
}
inline void InboundRtpStreamStats::set_fec_ssrc(uint32_t value) {
  _internal_set_fec_ssrc(value);
  // @@protoc_insertion_point(field_set:livekit.proto.InboundRtpStreamStats.fec_ssrc)
}

// -------------------------------------------------------------------

// SentRtpStreamStats

// required uint64 packets_sent = 1;
inline bool SentRtpStreamStats::_internal_has_packets_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SentRtpStreamStats::has_packets_sent() const {
  return _internal_has_packets_sent();
}
inline void SentRtpStreamStats::clear_packets_sent() {
  _impl_.packets_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SentRtpStreamStats::_internal_packets_sent() const {
  return _impl_.packets_sent_;
}
inline uint64_t SentRtpStreamStats::packets_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.SentRtpStreamStats.packets_sent)
  return _internal_packets_sent();
}
inline void SentRtpStreamStats::_internal_set_packets_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packets_sent_ = value;
}
inline void SentRtpStreamStats::set_packets_sent(uint64_t value) {
  _internal_set_packets_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.SentRtpStreamStats.packets_sent)
}

// required uint64 bytes_sent = 2;
inline bool SentRtpStreamStats::_internal_has_bytes_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SentRtpStreamStats::has_bytes_sent() const {
  return _internal_has_bytes_sent();
}
inline void SentRtpStreamStats::clear_bytes_sent() {
  _impl_.bytes_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SentRtpStreamStats::_internal_bytes_sent() const {
  return _impl_.bytes_sent_;
}
inline uint64_t SentRtpStreamStats::bytes_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.SentRtpStreamStats.bytes_sent)
  return _internal_bytes_sent();
}
inline void SentRtpStreamStats::_internal_set_bytes_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bytes_sent_ = value;
}
inline void SentRtpStreamStats::set_bytes_sent(uint64_t value) {
  _internal_set_bytes_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.SentRtpStreamStats.bytes_sent)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OutboundRtpStreamStats

// required string mid = 1;
inline bool OutboundRtpStreamStats::_internal_has_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_mid() const {
  return _internal_has_mid();
}
inline void OutboundRtpStreamStats::clear_mid() {
  _impl_.mid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutboundRtpStreamStats::mid() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.mid)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutboundRtpStreamStats::set_mid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.mid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.mid)
}
inline std::string* OutboundRtpStreamStats::mutable_mid() {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OutboundRtpStreamStats.mid)
  return _s;
}
inline const std::string& OutboundRtpStreamStats::_internal_mid() const {
  return _impl_.mid_.Get();
}
inline void OutboundRtpStreamStats::_internal_set_mid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mid_.Set(value, GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::_internal_mutable_mid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mid_.Mutable(GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::release_mid() {
  // @@protoc_insertion_point(field_release:livekit.proto.OutboundRtpStreamStats.mid)
  if (!_internal_has_mid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.mid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OutboundRtpStreamStats::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mid_.SetAllocated(mid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OutboundRtpStreamStats.mid)
}

// required string media_source_id = 2;
inline bool OutboundRtpStreamStats::_internal_has_media_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_media_source_id() const {
  return _internal_has_media_source_id();
}
inline void OutboundRtpStreamStats::clear_media_source_id() {
  _impl_.media_source_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OutboundRtpStreamStats::media_source_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.media_source_id)
  return _internal_media_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutboundRtpStreamStats::set_media_source_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.media_source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.media_source_id)
}
inline std::string* OutboundRtpStreamStats::mutable_media_source_id() {
  std::string* _s = _internal_mutable_media_source_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OutboundRtpStreamStats.media_source_id)
  return _s;
}
inline const std::string& OutboundRtpStreamStats::_internal_media_source_id() const {
  return _impl_.media_source_id_.Get();
}
inline void OutboundRtpStreamStats::_internal_set_media_source_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.media_source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::_internal_mutable_media_source_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.media_source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::release_media_source_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.OutboundRtpStreamStats.media_source_id)
  if (!_internal_has_media_source_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.media_source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_source_id_.IsDefault()) {
    _impl_.media_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OutboundRtpStreamStats::set_allocated_media_source_id(std::string* media_source_id) {
  if (media_source_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.media_source_id_.SetAllocated(media_source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_source_id_.IsDefault()) {
    _impl_.media_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OutboundRtpStreamStats.media_source_id)
}

// required string remote_id = 3;
inline bool OutboundRtpStreamStats::_internal_has_remote_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_remote_id() const {
  return _internal_has_remote_id();
}
inline void OutboundRtpStreamStats::clear_remote_id() {
  _impl_.remote_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OutboundRtpStreamStats::remote_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.remote_id)
  return _internal_remote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutboundRtpStreamStats::set_remote_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.remote_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.remote_id)
}
inline std::string* OutboundRtpStreamStats::mutable_remote_id() {
  std::string* _s = _internal_mutable_remote_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OutboundRtpStreamStats.remote_id)
  return _s;
}
inline const std::string& OutboundRtpStreamStats::_internal_remote_id() const {
  return _impl_.remote_id_.Get();
}
inline void OutboundRtpStreamStats::_internal_set_remote_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remote_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::_internal_mutable_remote_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.remote_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::release_remote_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.OutboundRtpStreamStats.remote_id)
  if (!_internal_has_remote_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.remote_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_id_.IsDefault()) {
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OutboundRtpStreamStats::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.remote_id_.SetAllocated(remote_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_id_.IsDefault()) {
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OutboundRtpStreamStats.remote_id)
}

// required string rid = 4;
inline bool OutboundRtpStreamStats::_internal_has_rid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_rid() const {
  return _internal_has_rid();
}
inline void OutboundRtpStreamStats::clear_rid() {
  _impl_.rid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OutboundRtpStreamStats::rid() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.rid)
  return _internal_rid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutboundRtpStreamStats::set_rid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.rid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.rid)
}
inline std::string* OutboundRtpStreamStats::mutable_rid() {
  std::string* _s = _internal_mutable_rid();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OutboundRtpStreamStats.rid)
  return _s;
}
inline const std::string& OutboundRtpStreamStats::_internal_rid() const {
  return _impl_.rid_.Get();
}
inline void OutboundRtpStreamStats::_internal_set_rid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rid_.Set(value, GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::_internal_mutable_rid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.rid_.Mutable(GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::release_rid() {
  // @@protoc_insertion_point(field_release:livekit.proto.OutboundRtpStreamStats.rid)
  if (!_internal_has_rid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.rid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rid_.IsDefault()) {
    _impl_.rid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OutboundRtpStreamStats::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rid_.SetAllocated(rid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rid_.IsDefault()) {
    _impl_.rid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OutboundRtpStreamStats.rid)
}

// required uint64 header_bytes_sent = 5;
inline bool OutboundRtpStreamStats::_internal_has_header_bytes_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_header_bytes_sent() const {
  return _internal_has_header_bytes_sent();
}
inline void OutboundRtpStreamStats::clear_header_bytes_sent() {
  _impl_.header_bytes_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t OutboundRtpStreamStats::_internal_header_bytes_sent() const {
  return _impl_.header_bytes_sent_;
}
inline uint64_t OutboundRtpStreamStats::header_bytes_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.header_bytes_sent)
  return _internal_header_bytes_sent();
}
inline void OutboundRtpStreamStats::_internal_set_header_bytes_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.header_bytes_sent_ = value;
}
inline void OutboundRtpStreamStats::set_header_bytes_sent(uint64_t value) {
  _internal_set_header_bytes_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.header_bytes_sent)
}

// required uint64 retransmitted_packets_sent = 6;
inline bool OutboundRtpStreamStats::_internal_has_retransmitted_packets_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_retransmitted_packets_sent() const {
  return _internal_has_retransmitted_packets_sent();
}
inline void OutboundRtpStreamStats::clear_retransmitted_packets_sent() {
  _impl_.retransmitted_packets_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t OutboundRtpStreamStats::_internal_retransmitted_packets_sent() const {
  return _impl_.retransmitted_packets_sent_;
}
inline uint64_t OutboundRtpStreamStats::retransmitted_packets_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.retransmitted_packets_sent)
  return _internal_retransmitted_packets_sent();
}
inline void OutboundRtpStreamStats::_internal_set_retransmitted_packets_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.retransmitted_packets_sent_ = value;
}
inline void OutboundRtpStreamStats::set_retransmitted_packets_sent(uint64_t value) {
  _internal_set_retransmitted_packets_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.retransmitted_packets_sent)
}

// required uint64 retransmitted_bytes_sent = 7;
inline bool OutboundRtpStreamStats::_internal_has_retransmitted_bytes_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_retransmitted_bytes_sent() const {
  return _internal_has_retransmitted_bytes_sent();
}
inline void OutboundRtpStreamStats::clear_retransmitted_bytes_sent() {
  _impl_.retransmitted_bytes_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t OutboundRtpStreamStats::_internal_retransmitted_bytes_sent() const {
  return _impl_.retransmitted_bytes_sent_;
}
inline uint64_t OutboundRtpStreamStats::retransmitted_bytes_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.retransmitted_bytes_sent)
  return _internal_retransmitted_bytes_sent();
}
inline void OutboundRtpStreamStats::_internal_set_retransmitted_bytes_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.retransmitted_bytes_sent_ = value;
}
inline void OutboundRtpStreamStats::set_retransmitted_bytes_sent(uint64_t value) {
  _internal_set_retransmitted_bytes_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.retransmitted_bytes_sent)
}

// required uint32 rtx_ssrc = 8;
inline bool OutboundRtpStreamStats::_internal_has_rtx_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_rtx_ssrc() const {
  return _internal_has_rtx_ssrc();
}
inline void OutboundRtpStreamStats::clear_rtx_ssrc() {
  _impl_.rtx_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t OutboundRtpStreamStats::_internal_rtx_ssrc() const {
  return _impl_.rtx_ssrc_;
}
inline uint32_t OutboundRtpStreamStats::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.rtx_ssrc)
  return _internal_rtx_ssrc();
}
inline void OutboundRtpStreamStats::_internal_set_rtx_ssrc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.rtx_ssrc_ = value;
}
inline void OutboundRtpStreamStats::set_rtx_ssrc(uint32_t value) {
  _internal_set_rtx_ssrc(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.rtx_ssrc)
}

// required double target_bitrate = 9;
inline bool OutboundRtpStreamStats::_internal_has_target_bitrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_target_bitrate() const {
  return _internal_has_target_bitrate();
}
inline void OutboundRtpStreamStats::clear_target_bitrate() {
  _impl_.target_bitrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double OutboundRtpStreamStats::_internal_target_bitrate() const {
  return _impl_.target_bitrate_;
}
inline double OutboundRtpStreamStats::target_bitrate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.target_bitrate)
  return _internal_target_bitrate();
}
inline void OutboundRtpStreamStats::_internal_set_target_bitrate(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.target_bitrate_ = value;
}
inline void OutboundRtpStreamStats::set_target_bitrate(double value) {
  _internal_set_target_bitrate(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.target_bitrate)
}

// required uint64 total_encoded_bytes_target = 10;
inline bool OutboundRtpStreamStats::_internal_has_total_encoded_bytes_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_total_encoded_bytes_target() const {
  return _internal_has_total_encoded_bytes_target();
}
inline void OutboundRtpStreamStats::clear_total_encoded_bytes_target() {
  _impl_.total_encoded_bytes_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t OutboundRtpStreamStats::_internal_total_encoded_bytes_target() const {
  return _impl_.total_encoded_bytes_target_;
}
inline uint64_t OutboundRtpStreamStats::total_encoded_bytes_target() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.total_encoded_bytes_target)
  return _internal_total_encoded_bytes_target();
}
inline void OutboundRtpStreamStats::_internal_set_total_encoded_bytes_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.total_encoded_bytes_target_ = value;
}
inline void OutboundRtpStreamStats::set_total_encoded_bytes_target(uint64_t value) {
  _internal_set_total_encoded_bytes_target(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.total_encoded_bytes_target)
}

// required uint32 frame_width = 11;
inline bool OutboundRtpStreamStats::_internal_has_frame_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void OutboundRtpStreamStats::clear_frame_width() {
  _impl_.frame_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t OutboundRtpStreamStats::_internal_frame_width() const {
  return _impl_.frame_width_;
}
inline uint32_t OutboundRtpStreamStats::frame_width() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.frame_width)
  return _internal_frame_width();
}
inline void OutboundRtpStreamStats::_internal_set_frame_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.frame_width_ = value;
}
inline void OutboundRtpStreamStats::set_frame_width(uint32_t value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.frame_width)
}

// required uint32 frame_height = 12;
inline bool OutboundRtpStreamStats::_internal_has_frame_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void OutboundRtpStreamStats::clear_frame_height() {
  _impl_.frame_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_frame_height() const {
  return _impl_.frame_height_;
}
inline uint32_t OutboundRtpStreamStats::frame_height() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.frame_height)
  return _internal_frame_height();
}
inline void OutboundRtpStreamStats::_internal_set_frame_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.frame_height_ = value;
}
inline void OutboundRtpStreamStats::set_frame_height(uint32_t value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.frame_height)
}

// required double frames_per_second = 13;
inline bool OutboundRtpStreamStats::_internal_has_frames_per_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_frames_per_second() const {
  return _internal_has_frames_per_second();
}
inline void OutboundRtpStreamStats::clear_frames_per_second() {
  _impl_.frames_per_second_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double OutboundRtpStreamStats::_internal_frames_per_second() const {
  return _impl_.frames_per_second_;
}
inline double OutboundRtpStreamStats::frames_per_second() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.frames_per_second)
  return _internal_frames_per_second();
}
inline void OutboundRtpStreamStats::_internal_set_frames_per_second(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.frames_per_second_ = value;
}
inline void OutboundRtpStreamStats::set_frames_per_second(double value) {
  _internal_set_frames_per_second(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.frames_per_second)
}

// required uint32 frames_sent = 14;
inline bool OutboundRtpStreamStats::_internal_has_frames_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_frames_sent() const {
  return _internal_has_frames_sent();
}
inline void OutboundRtpStreamStats::clear_frames_sent() {
  _impl_.frames_sent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_frames_sent() const {
  return _impl_.frames_sent_;
}
inline uint32_t OutboundRtpStreamStats::frames_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.frames_sent)
  return _internal_frames_sent();
}
inline void OutboundRtpStreamStats::_internal_set_frames_sent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.frames_sent_ = value;
}
inline void OutboundRtpStreamStats::set_frames_sent(uint32_t value) {
  _internal_set_frames_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.frames_sent)
}

// required uint32 huge_frames_sent = 15;
inline bool OutboundRtpStreamStats::_internal_has_huge_frames_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_huge_frames_sent() const {
  return _internal_has_huge_frames_sent();
}
inline void OutboundRtpStreamStats::clear_huge_frames_sent() {
  _impl_.huge_frames_sent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_huge_frames_sent() const {
  return _impl_.huge_frames_sent_;
}
inline uint32_t OutboundRtpStreamStats::huge_frames_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.huge_frames_sent)
  return _internal_huge_frames_sent();
}
inline void OutboundRtpStreamStats::_internal_set_huge_frames_sent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.huge_frames_sent_ = value;
}
inline void OutboundRtpStreamStats::set_huge_frames_sent(uint32_t value) {
  _internal_set_huge_frames_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.huge_frames_sent)
}

// required uint32 frames_encoded = 16;
inline bool OutboundRtpStreamStats::_internal_has_frames_encoded() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_frames_encoded() const {
  return _internal_has_frames_encoded();
}
inline void OutboundRtpStreamStats::clear_frames_encoded() {
  _impl_.frames_encoded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_frames_encoded() const {
  return _impl_.frames_encoded_;
}
inline uint32_t OutboundRtpStreamStats::frames_encoded() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.frames_encoded)
  return _internal_frames_encoded();
}
inline void OutboundRtpStreamStats::_internal_set_frames_encoded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.frames_encoded_ = value;
}
inline void OutboundRtpStreamStats::set_frames_encoded(uint32_t value) {
  _internal_set_frames_encoded(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.frames_encoded)
}

// required uint32 key_frames_encoded = 17;
inline bool OutboundRtpStreamStats::_internal_has_key_frames_encoded() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_key_frames_encoded() const {
  return _internal_has_key_frames_encoded();
}
inline void OutboundRtpStreamStats::clear_key_frames_encoded() {
  _impl_.key_frames_encoded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_key_frames_encoded() const {
  return _impl_.key_frames_encoded_;
}
inline uint32_t OutboundRtpStreamStats::key_frames_encoded() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.key_frames_encoded)
  return _internal_key_frames_encoded();
}
inline void OutboundRtpStreamStats::_internal_set_key_frames_encoded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.key_frames_encoded_ = value;
}
inline void OutboundRtpStreamStats::set_key_frames_encoded(uint32_t value) {
  _internal_set_key_frames_encoded(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.key_frames_encoded)
}

// required uint64 qp_sum = 18;
inline bool OutboundRtpStreamStats::_internal_has_qp_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_qp_sum() const {
  return _internal_has_qp_sum();
}
inline void OutboundRtpStreamStats::clear_qp_sum() {
  _impl_.qp_sum_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint64_t OutboundRtpStreamStats::_internal_qp_sum() const {
  return _impl_.qp_sum_;
}
inline uint64_t OutboundRtpStreamStats::qp_sum() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.qp_sum)
  return _internal_qp_sum();
}
inline void OutboundRtpStreamStats::_internal_set_qp_sum(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.qp_sum_ = value;
}
inline void OutboundRtpStreamStats::set_qp_sum(uint64_t value) {
  _internal_set_qp_sum(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.qp_sum)
}

// required double total_encode_time = 19;
inline bool OutboundRtpStreamStats::_internal_has_total_encode_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_total_encode_time() const {
  return _internal_has_total_encode_time();
}
inline void OutboundRtpStreamStats::clear_total_encode_time() {
  _impl_.total_encode_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double OutboundRtpStreamStats::_internal_total_encode_time() const {
  return _impl_.total_encode_time_;
}
inline double OutboundRtpStreamStats::total_encode_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.total_encode_time)
  return _internal_total_encode_time();
}
inline void OutboundRtpStreamStats::_internal_set_total_encode_time(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.total_encode_time_ = value;
}
inline void OutboundRtpStreamStats::set_total_encode_time(double value) {
  _internal_set_total_encode_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.total_encode_time)
}

// required double total_packet_send_delay = 20;
inline bool OutboundRtpStreamStats::_internal_has_total_packet_send_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_total_packet_send_delay() const {
  return _internal_has_total_packet_send_delay();
}
inline void OutboundRtpStreamStats::clear_total_packet_send_delay() {
  _impl_.total_packet_send_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double OutboundRtpStreamStats::_internal_total_packet_send_delay() const {
  return _impl_.total_packet_send_delay_;
}
inline double OutboundRtpStreamStats::total_packet_send_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.total_packet_send_delay)
  return _internal_total_packet_send_delay();
}
inline void OutboundRtpStreamStats::_internal_set_total_packet_send_delay(double value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.total_packet_send_delay_ = value;
}
inline void OutboundRtpStreamStats::set_total_packet_send_delay(double value) {
  _internal_set_total_packet_send_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.total_packet_send_delay)
}

// required .livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
inline bool OutboundRtpStreamStats::_internal_has_quality_limitation_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_quality_limitation_reason() const {
  return _internal_has_quality_limitation_reason();
}
inline void OutboundRtpStreamStats::clear_quality_limitation_reason() {
  _impl_.quality_limitation_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::livekit::proto::QualityLimitationReason OutboundRtpStreamStats::_internal_quality_limitation_reason() const {
  return static_cast< ::livekit::proto::QualityLimitationReason >(_impl_.quality_limitation_reason_);
}
inline ::livekit::proto::QualityLimitationReason OutboundRtpStreamStats::quality_limitation_reason() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.quality_limitation_reason)
  return _internal_quality_limitation_reason();
}
inline void OutboundRtpStreamStats::_internal_set_quality_limitation_reason(::livekit::proto::QualityLimitationReason value) {
  assert(::livekit::proto::QualityLimitationReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.quality_limitation_reason_ = value;
}
inline void OutboundRtpStreamStats::set_quality_limitation_reason(::livekit::proto::QualityLimitationReason value) {
  _internal_set_quality_limitation_reason(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.quality_limitation_reason)
}

// map<string, double> quality_limitation_durations = 22;
inline int OutboundRtpStreamStats::_internal_quality_limitation_durations_size() const {
  return _impl_.quality_limitation_durations_.size();
}
inline int OutboundRtpStreamStats::quality_limitation_durations_size() const {
  return _internal_quality_limitation_durations_size();
}
inline void OutboundRtpStreamStats::clear_quality_limitation_durations() {
  _impl_.quality_limitation_durations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
OutboundRtpStreamStats::_internal_quality_limitation_durations() const {
  return _impl_.quality_limitation_durations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
OutboundRtpStreamStats::quality_limitation_durations() const {
  // @@protoc_insertion_point(field_map:livekit.proto.OutboundRtpStreamStats.quality_limitation_durations)
  return _internal_quality_limitation_durations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
OutboundRtpStreamStats::_internal_mutable_quality_limitation_durations() {
  return _impl_.quality_limitation_durations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
OutboundRtpStreamStats::mutable_quality_limitation_durations() {
  // @@protoc_insertion_point(field_mutable_map:livekit.proto.OutboundRtpStreamStats.quality_limitation_durations)
  return _internal_mutable_quality_limitation_durations();
}

// required uint32 quality_limitation_resolution_changes = 23;
inline bool OutboundRtpStreamStats::_internal_has_quality_limitation_resolution_changes() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_quality_limitation_resolution_changes() const {
  return _internal_has_quality_limitation_resolution_changes();
}
inline void OutboundRtpStreamStats::clear_quality_limitation_resolution_changes() {
  _impl_.quality_limitation_resolution_changes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_quality_limitation_resolution_changes() const {
  return _impl_.quality_limitation_resolution_changes_;
}
inline uint32_t OutboundRtpStreamStats::quality_limitation_resolution_changes() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.quality_limitation_resolution_changes)
  return _internal_quality_limitation_resolution_changes();
}
inline void OutboundRtpStreamStats::_internal_set_quality_limitation_resolution_changes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.quality_limitation_resolution_changes_ = value;
}
inline void OutboundRtpStreamStats::set_quality_limitation_resolution_changes(uint32_t value) {
  _internal_set_quality_limitation_resolution_changes(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.quality_limitation_resolution_changes)
}

// required uint32 nack_count = 24;
inline bool OutboundRtpStreamStats::_internal_has_nack_count() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_nack_count() const {
  return _internal_has_nack_count();
}
inline void OutboundRtpStreamStats::clear_nack_count() {
  _impl_.nack_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_nack_count() const {
  return _impl_.nack_count_;
}
inline uint32_t OutboundRtpStreamStats::nack_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.nack_count)
  return _internal_nack_count();
}
inline void OutboundRtpStreamStats::_internal_set_nack_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.nack_count_ = value;
}
inline void OutboundRtpStreamStats::set_nack_count(uint32_t value) {
  _internal_set_nack_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.nack_count)
}

// required uint32 fir_count = 25;
inline bool OutboundRtpStreamStats::_internal_has_fir_count() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_fir_count() const {
  return _internal_has_fir_count();
}
inline void OutboundRtpStreamStats::clear_fir_count() {
  _impl_.fir_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_fir_count() const {
  return _impl_.fir_count_;
}
inline uint32_t OutboundRtpStreamStats::fir_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.fir_count)
  return _internal_fir_count();
}
inline void OutboundRtpStreamStats::_internal_set_fir_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.fir_count_ = value;
}
inline void OutboundRtpStreamStats::set_fir_count(uint32_t value) {
  _internal_set_fir_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.fir_count)
}

// required uint32 pli_count = 26;
inline bool OutboundRtpStreamStats::_internal_has_pli_count() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_pli_count() const {
  return _internal_has_pli_count();
}
inline void OutboundRtpStreamStats::clear_pli_count() {
  _impl_.pli_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t OutboundRtpStreamStats::_internal_pli_count() const {
  return _impl_.pli_count_;
}
inline uint32_t OutboundRtpStreamStats::pli_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.pli_count)
  return _internal_pli_count();
}
inline void OutboundRtpStreamStats::_internal_set_pli_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.pli_count_ = value;
}
inline void OutboundRtpStreamStats::set_pli_count(uint32_t value) {
  _internal_set_pli_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.pli_count)
}

// required string encoder_implementation = 27;
inline bool OutboundRtpStreamStats::_internal_has_encoder_implementation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_encoder_implementation() const {
  return _internal_has_encoder_implementation();
}
inline void OutboundRtpStreamStats::clear_encoder_implementation() {
  _impl_.encoder_implementation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& OutboundRtpStreamStats::encoder_implementation() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.encoder_implementation)
  return _internal_encoder_implementation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutboundRtpStreamStats::set_encoder_implementation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.encoder_implementation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.encoder_implementation)
}
inline std::string* OutboundRtpStreamStats::mutable_encoder_implementation() {
  std::string* _s = _internal_mutable_encoder_implementation();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OutboundRtpStreamStats.encoder_implementation)
  return _s;
}
inline const std::string& OutboundRtpStreamStats::_internal_encoder_implementation() const {
  return _impl_.encoder_implementation_.Get();
}
inline void OutboundRtpStreamStats::_internal_set_encoder_implementation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.encoder_implementation_.Set(value, GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::_internal_mutable_encoder_implementation() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.encoder_implementation_.Mutable(GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::release_encoder_implementation() {
  // @@protoc_insertion_point(field_release:livekit.proto.OutboundRtpStreamStats.encoder_implementation)
  if (!_internal_has_encoder_implementation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.encoder_implementation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoder_implementation_.IsDefault()) {
    _impl_.encoder_implementation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OutboundRtpStreamStats::set_allocated_encoder_implementation(std::string* encoder_implementation) {
  if (encoder_implementation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.encoder_implementation_.SetAllocated(encoder_implementation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoder_implementation_.IsDefault()) {
    _impl_.encoder_implementation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OutboundRtpStreamStats.encoder_implementation)
}

// required bool power_efficient_encoder = 28;
inline bool OutboundRtpStreamStats::_internal_has_power_efficient_encoder() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_power_efficient_encoder() const {
  return _internal_has_power_efficient_encoder();
}
inline void OutboundRtpStreamStats::clear_power_efficient_encoder() {
  _impl_.power_efficient_encoder_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool OutboundRtpStreamStats::_internal_power_efficient_encoder() const {
  return _impl_.power_efficient_encoder_;
}
inline bool OutboundRtpStreamStats::power_efficient_encoder() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.power_efficient_encoder)
  return _internal_power_efficient_encoder();
}
inline void OutboundRtpStreamStats::_internal_set_power_efficient_encoder(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.power_efficient_encoder_ = value;
}
inline void OutboundRtpStreamStats::set_power_efficient_encoder(bool value) {
  _internal_set_power_efficient_encoder(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.power_efficient_encoder)
}

// required bool active = 29;
inline bool OutboundRtpStreamStats::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_active() const {
  return _internal_has_active();
}
inline void OutboundRtpStreamStats::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool OutboundRtpStreamStats::_internal_active() const {
  return _impl_.active_;
}
inline bool OutboundRtpStreamStats::active() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.active)
  return _internal_active();
}
inline void OutboundRtpStreamStats::_internal_set_active(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.active_ = value;
}
inline void OutboundRtpStreamStats::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.active)
}

// required string scalability_mode = 30;
inline bool OutboundRtpStreamStats::_internal_has_scalability_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OutboundRtpStreamStats::has_scalability_mode() const {
  return _internal_has_scalability_mode();
}
inline void OutboundRtpStreamStats::clear_scalability_mode() {
  _impl_.scalability_mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& OutboundRtpStreamStats::scalability_mode() const {
  // @@protoc_insertion_point(field_get:livekit.proto.OutboundRtpStreamStats.scalability_mode)
  return _internal_scalability_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutboundRtpStreamStats::set_scalability_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.scalability_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.OutboundRtpStreamStats.scalability_mode)
}
inline std::string* OutboundRtpStreamStats::mutable_scalability_mode() {
  std::string* _s = _internal_mutable_scalability_mode();
  // @@protoc_insertion_point(field_mutable:livekit.proto.OutboundRtpStreamStats.scalability_mode)
  return _s;
}
inline const std::string& OutboundRtpStreamStats::_internal_scalability_mode() const {
  return _impl_.scalability_mode_.Get();
}
inline void OutboundRtpStreamStats::_internal_set_scalability_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scalability_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::_internal_mutable_scalability_mode() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.scalability_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* OutboundRtpStreamStats::release_scalability_mode() {
  // @@protoc_insertion_point(field_release:livekit.proto.OutboundRtpStreamStats.scalability_mode)
  if (!_internal_has_scalability_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.scalability_mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scalability_mode_.IsDefault()) {
    _impl_.scalability_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OutboundRtpStreamStats::set_allocated_scalability_mode(std::string* scalability_mode) {
  if (scalability_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.scalability_mode_.SetAllocated(scalability_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scalability_mode_.IsDefault()) {
    _impl_.scalability_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.OutboundRtpStreamStats.scalability_mode)
}

// -------------------------------------------------------------------

// RemoteInboundRtpStreamStats

// required string local_id = 1;
inline bool RemoteInboundRtpStreamStats::_internal_has_local_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoteInboundRtpStreamStats::has_local_id() const {
  return _internal_has_local_id();
}
inline void RemoteInboundRtpStreamStats::clear_local_id() {
  _impl_.local_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RemoteInboundRtpStreamStats::local_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteInboundRtpStreamStats.local_id)
  return _internal_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteInboundRtpStreamStats::set_local_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.local_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteInboundRtpStreamStats.local_id)
}
inline std::string* RemoteInboundRtpStreamStats::mutable_local_id() {
  std::string* _s = _internal_mutable_local_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RemoteInboundRtpStreamStats.local_id)
  return _s;
}
inline const std::string& RemoteInboundRtpStreamStats::_internal_local_id() const {
  return _impl_.local_id_.Get();
}
inline void RemoteInboundRtpStreamStats::_internal_set_local_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.local_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteInboundRtpStreamStats::_internal_mutable_local_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.local_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteInboundRtpStreamStats::release_local_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.RemoteInboundRtpStreamStats.local_id)
  if (!_internal_has_local_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.local_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_id_.IsDefault()) {
    _impl_.local_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RemoteInboundRtpStreamStats::set_allocated_local_id(std::string* local_id) {
  if (local_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.local_id_.SetAllocated(local_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_id_.IsDefault()) {
    _impl_.local_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RemoteInboundRtpStreamStats.local_id)
}

// required double round_trip_time = 2;
inline bool RemoteInboundRtpStreamStats::_internal_has_round_trip_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoteInboundRtpStreamStats::has_round_trip_time() const {
  return _internal_has_round_trip_time();
}
inline void RemoteInboundRtpStreamStats::clear_round_trip_time() {
  _impl_.round_trip_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double RemoteInboundRtpStreamStats::_internal_round_trip_time() const {
  return _impl_.round_trip_time_;
}
inline double RemoteInboundRtpStreamStats::round_trip_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteInboundRtpStreamStats.round_trip_time)
  return _internal_round_trip_time();
}
inline void RemoteInboundRtpStreamStats::_internal_set_round_trip_time(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.round_trip_time_ = value;
}
inline void RemoteInboundRtpStreamStats::set_round_trip_time(double value) {
  _internal_set_round_trip_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteInboundRtpStreamStats.round_trip_time)
}

// required double total_round_trip_time = 3;
inline bool RemoteInboundRtpStreamStats::_internal_has_total_round_trip_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoteInboundRtpStreamStats::has_total_round_trip_time() const {
  return _internal_has_total_round_trip_time();
}
inline void RemoteInboundRtpStreamStats::clear_total_round_trip_time() {
  _impl_.total_round_trip_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RemoteInboundRtpStreamStats::_internal_total_round_trip_time() const {
  return _impl_.total_round_trip_time_;
}
inline double RemoteInboundRtpStreamStats::total_round_trip_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteInboundRtpStreamStats.total_round_trip_time)
  return _internal_total_round_trip_time();
}
inline void RemoteInboundRtpStreamStats::_internal_set_total_round_trip_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.total_round_trip_time_ = value;
}
inline void RemoteInboundRtpStreamStats::set_total_round_trip_time(double value) {
  _internal_set_total_round_trip_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteInboundRtpStreamStats.total_round_trip_time)
}

// required double fraction_lost = 4;
inline bool RemoteInboundRtpStreamStats::_internal_has_fraction_lost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoteInboundRtpStreamStats::has_fraction_lost() const {
  return _internal_has_fraction_lost();
}
inline void RemoteInboundRtpStreamStats::clear_fraction_lost() {
  _impl_.fraction_lost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RemoteInboundRtpStreamStats::_internal_fraction_lost() const {
  return _impl_.fraction_lost_;
}
inline double RemoteInboundRtpStreamStats::fraction_lost() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteInboundRtpStreamStats.fraction_lost)
  return _internal_fraction_lost();
}
inline void RemoteInboundRtpStreamStats::_internal_set_fraction_lost(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fraction_lost_ = value;
}
inline void RemoteInboundRtpStreamStats::set_fraction_lost(double value) {
  _internal_set_fraction_lost(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteInboundRtpStreamStats.fraction_lost)
}

// required uint64 round_trip_time_measurements = 5;
inline bool RemoteInboundRtpStreamStats::_internal_has_round_trip_time_measurements() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoteInboundRtpStreamStats::has_round_trip_time_measurements() const {
  return _internal_has_round_trip_time_measurements();
}
inline void RemoteInboundRtpStreamStats::clear_round_trip_time_measurements() {
  _impl_.round_trip_time_measurements_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t RemoteInboundRtpStreamStats::_internal_round_trip_time_measurements() const {
  return _impl_.round_trip_time_measurements_;
}
inline uint64_t RemoteInboundRtpStreamStats::round_trip_time_measurements() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteInboundRtpStreamStats.round_trip_time_measurements)
  return _internal_round_trip_time_measurements();
}
inline void RemoteInboundRtpStreamStats::_internal_set_round_trip_time_measurements(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.round_trip_time_measurements_ = value;
}
inline void RemoteInboundRtpStreamStats::set_round_trip_time_measurements(uint64_t value) {
  _internal_set_round_trip_time_measurements(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteInboundRtpStreamStats.round_trip_time_measurements)
}

// -------------------------------------------------------------------

// RemoteOutboundRtpStreamStats

// required string local_id = 1;
inline bool RemoteOutboundRtpStreamStats::_internal_has_local_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoteOutboundRtpStreamStats::has_local_id() const {
  return _internal_has_local_id();
}
inline void RemoteOutboundRtpStreamStats::clear_local_id() {
  _impl_.local_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RemoteOutboundRtpStreamStats::local_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteOutboundRtpStreamStats.local_id)
  return _internal_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteOutboundRtpStreamStats::set_local_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.local_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteOutboundRtpStreamStats.local_id)
}
inline std::string* RemoteOutboundRtpStreamStats::mutable_local_id() {
  std::string* _s = _internal_mutable_local_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.RemoteOutboundRtpStreamStats.local_id)
  return _s;
}
inline const std::string& RemoteOutboundRtpStreamStats::_internal_local_id() const {
  return _impl_.local_id_.Get();
}
inline void RemoteOutboundRtpStreamStats::_internal_set_local_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.local_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteOutboundRtpStreamStats::_internal_mutable_local_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.local_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteOutboundRtpStreamStats::release_local_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.RemoteOutboundRtpStreamStats.local_id)
  if (!_internal_has_local_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.local_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_id_.IsDefault()) {
    _impl_.local_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RemoteOutboundRtpStreamStats::set_allocated_local_id(std::string* local_id) {
  if (local_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.local_id_.SetAllocated(local_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_id_.IsDefault()) {
    _impl_.local_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RemoteOutboundRtpStreamStats.local_id)
}

// required double remote_timestamp = 2;
inline bool RemoteOutboundRtpStreamStats::_internal_has_remote_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoteOutboundRtpStreamStats::has_remote_timestamp() const {
  return _internal_has_remote_timestamp();
}
inline void RemoteOutboundRtpStreamStats::clear_remote_timestamp() {
  _impl_.remote_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double RemoteOutboundRtpStreamStats::_internal_remote_timestamp() const {
  return _impl_.remote_timestamp_;
}
inline double RemoteOutboundRtpStreamStats::remote_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteOutboundRtpStreamStats.remote_timestamp)
  return _internal_remote_timestamp();
}
inline void RemoteOutboundRtpStreamStats::_internal_set_remote_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remote_timestamp_ = value;
}
inline void RemoteOutboundRtpStreamStats::set_remote_timestamp(double value) {
  _internal_set_remote_timestamp(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteOutboundRtpStreamStats.remote_timestamp)
}

// required uint64 reports_sent = 3;
inline bool RemoteOutboundRtpStreamStats::_internal_has_reports_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoteOutboundRtpStreamStats::has_reports_sent() const {
  return _internal_has_reports_sent();
}
inline void RemoteOutboundRtpStreamStats::clear_reports_sent() {
  _impl_.reports_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t RemoteOutboundRtpStreamStats::_internal_reports_sent() const {
  return _impl_.reports_sent_;
}
inline uint64_t RemoteOutboundRtpStreamStats::reports_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteOutboundRtpStreamStats.reports_sent)
  return _internal_reports_sent();
}
inline void RemoteOutboundRtpStreamStats::_internal_set_reports_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reports_sent_ = value;
}
inline void RemoteOutboundRtpStreamStats::set_reports_sent(uint64_t value) {
  _internal_set_reports_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteOutboundRtpStreamStats.reports_sent)
}

// required double round_trip_time = 4;
inline bool RemoteOutboundRtpStreamStats::_internal_has_round_trip_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoteOutboundRtpStreamStats::has_round_trip_time() const {
  return _internal_has_round_trip_time();
}
inline void RemoteOutboundRtpStreamStats::clear_round_trip_time() {
  _impl_.round_trip_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RemoteOutboundRtpStreamStats::_internal_round_trip_time() const {
  return _impl_.round_trip_time_;
}
inline double RemoteOutboundRtpStreamStats::round_trip_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteOutboundRtpStreamStats.round_trip_time)
  return _internal_round_trip_time();
}
inline void RemoteOutboundRtpStreamStats::_internal_set_round_trip_time(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.round_trip_time_ = value;
}
inline void RemoteOutboundRtpStreamStats::set_round_trip_time(double value) {
  _internal_set_round_trip_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteOutboundRtpStreamStats.round_trip_time)
}

// required double total_round_trip_time = 5;
inline bool RemoteOutboundRtpStreamStats::_internal_has_total_round_trip_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoteOutboundRtpStreamStats::has_total_round_trip_time() const {
  return _internal_has_total_round_trip_time();
}
inline void RemoteOutboundRtpStreamStats::clear_total_round_trip_time() {
  _impl_.total_round_trip_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RemoteOutboundRtpStreamStats::_internal_total_round_trip_time() const {
  return _impl_.total_round_trip_time_;
}
inline double RemoteOutboundRtpStreamStats::total_round_trip_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteOutboundRtpStreamStats.total_round_trip_time)
  return _internal_total_round_trip_time();
}
inline void RemoteOutboundRtpStreamStats::_internal_set_total_round_trip_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_round_trip_time_ = value;
}
inline void RemoteOutboundRtpStreamStats::set_total_round_trip_time(double value) {
  _internal_set_total_round_trip_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteOutboundRtpStreamStats.total_round_trip_time)
}

// required uint64 round_trip_time_measurements = 6;
inline bool RemoteOutboundRtpStreamStats::_internal_has_round_trip_time_measurements() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RemoteOutboundRtpStreamStats::has_round_trip_time_measurements() const {
  return _internal_has_round_trip_time_measurements();
}
inline void RemoteOutboundRtpStreamStats::clear_round_trip_time_measurements() {
  _impl_.round_trip_time_measurements_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t RemoteOutboundRtpStreamStats::_internal_round_trip_time_measurements() const {
  return _impl_.round_trip_time_measurements_;
}
inline uint64_t RemoteOutboundRtpStreamStats::round_trip_time_measurements() const {
  // @@protoc_insertion_point(field_get:livekit.proto.RemoteOutboundRtpStreamStats.round_trip_time_measurements)
  return _internal_round_trip_time_measurements();
}
inline void RemoteOutboundRtpStreamStats::_internal_set_round_trip_time_measurements(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.round_trip_time_measurements_ = value;
}
inline void RemoteOutboundRtpStreamStats::set_round_trip_time_measurements(uint64_t value) {
  _internal_set_round_trip_time_measurements(value);
  // @@protoc_insertion_point(field_set:livekit.proto.RemoteOutboundRtpStreamStats.round_trip_time_measurements)
}

// -------------------------------------------------------------------

// MediaSourceStats

// required string track_identifier = 1;
inline bool MediaSourceStats::_internal_has_track_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaSourceStats::has_track_identifier() const {
  return _internal_has_track_identifier();
}
inline void MediaSourceStats::clear_track_identifier() {
  _impl_.track_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaSourceStats::track_identifier() const {
  // @@protoc_insertion_point(field_get:livekit.proto.MediaSourceStats.track_identifier)
  return _internal_track_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaSourceStats::set_track_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.track_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.MediaSourceStats.track_identifier)
}
inline std::string* MediaSourceStats::mutable_track_identifier() {
  std::string* _s = _internal_mutable_track_identifier();
  // @@protoc_insertion_point(field_mutable:livekit.proto.MediaSourceStats.track_identifier)
  return _s;
}
inline const std::string& MediaSourceStats::_internal_track_identifier() const {
  return _impl_.track_identifier_.Get();
}
inline void MediaSourceStats::_internal_set_track_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.track_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* MediaSourceStats::_internal_mutable_track_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.track_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* MediaSourceStats::release_track_identifier() {
  // @@protoc_insertion_point(field_release:livekit.proto.MediaSourceStats.track_identifier)
  if (!_internal_has_track_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.track_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.track_identifier_.IsDefault()) {
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MediaSourceStats::set_allocated_track_identifier(std::string* track_identifier) {
  if (track_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.track_identifier_.SetAllocated(track_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.track_identifier_.IsDefault()) {
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.MediaSourceStats.track_identifier)
}

// required string kind = 2;
inline bool MediaSourceStats::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MediaSourceStats::has_kind() const {
  return _internal_has_kind();
}
inline void MediaSourceStats::clear_kind() {
  _impl_.kind_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MediaSourceStats::kind() const {
  // @@protoc_insertion_point(field_get:livekit.proto.MediaSourceStats.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaSourceStats::set_kind(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.MediaSourceStats.kind)
}
inline std::string* MediaSourceStats::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:livekit.proto.MediaSourceStats.kind)
  return _s;
}
inline const std::string& MediaSourceStats::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void MediaSourceStats::_internal_set_kind(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* MediaSourceStats::_internal_mutable_kind() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* MediaSourceStats::release_kind() {
  // @@protoc_insertion_point(field_release:livekit.proto.MediaSourceStats.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.kind_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MediaSourceStats::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.MediaSourceStats.kind)
}

// -------------------------------------------------------------------

// AudioSourceStats

// required double audio_level = 1;
inline bool AudioSourceStats::_internal_has_audio_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AudioSourceStats::has_audio_level() const {
  return _internal_has_audio_level();
}
inline void AudioSourceStats::clear_audio_level() {
  _impl_.audio_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AudioSourceStats::_internal_audio_level() const {
  return _impl_.audio_level_;
}
inline double AudioSourceStats::audio_level() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.audio_level)
  return _internal_audio_level();
}
inline void AudioSourceStats::_internal_set_audio_level(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_level_ = value;
}
inline void AudioSourceStats::set_audio_level(double value) {
  _internal_set_audio_level(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.audio_level)
}

// required double total_audio_energy = 2;
inline bool AudioSourceStats::_internal_has_total_audio_energy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AudioSourceStats::has_total_audio_energy() const {
  return _internal_has_total_audio_energy();
}
inline void AudioSourceStats::clear_total_audio_energy() {
  _impl_.total_audio_energy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AudioSourceStats::_internal_total_audio_energy() const {
  return _impl_.total_audio_energy_;
}
inline double AudioSourceStats::total_audio_energy() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.total_audio_energy)
  return _internal_total_audio_energy();
}
inline void AudioSourceStats::_internal_set_total_audio_energy(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.total_audio_energy_ = value;
}
inline void AudioSourceStats::set_total_audio_energy(double value) {
  _internal_set_total_audio_energy(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.total_audio_energy)
}

// required double total_samples_duration = 3;
inline bool AudioSourceStats::_internal_has_total_samples_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AudioSourceStats::has_total_samples_duration() const {
  return _internal_has_total_samples_duration();
}
inline void AudioSourceStats::clear_total_samples_duration() {
  _impl_.total_samples_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AudioSourceStats::_internal_total_samples_duration() const {
  return _impl_.total_samples_duration_;
}
inline double AudioSourceStats::total_samples_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.total_samples_duration)
  return _internal_total_samples_duration();
}
inline void AudioSourceStats::_internal_set_total_samples_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.total_samples_duration_ = value;
}
inline void AudioSourceStats::set_total_samples_duration(double value) {
  _internal_set_total_samples_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.total_samples_duration)
}

// required double echo_return_loss = 4;
inline bool AudioSourceStats::_internal_has_echo_return_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AudioSourceStats::has_echo_return_loss() const {
  return _internal_has_echo_return_loss();
}
inline void AudioSourceStats::clear_echo_return_loss() {
  _impl_.echo_return_loss_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AudioSourceStats::_internal_echo_return_loss() const {
  return _impl_.echo_return_loss_;
}
inline double AudioSourceStats::echo_return_loss() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.echo_return_loss)
  return _internal_echo_return_loss();
}
inline void AudioSourceStats::_internal_set_echo_return_loss(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.echo_return_loss_ = value;
}
inline void AudioSourceStats::set_echo_return_loss(double value) {
  _internal_set_echo_return_loss(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.echo_return_loss)
}

// required double echo_return_loss_enhancement = 5;
inline bool AudioSourceStats::_internal_has_echo_return_loss_enhancement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AudioSourceStats::has_echo_return_loss_enhancement() const {
  return _internal_has_echo_return_loss_enhancement();
}
inline void AudioSourceStats::clear_echo_return_loss_enhancement() {
  _impl_.echo_return_loss_enhancement_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double AudioSourceStats::_internal_echo_return_loss_enhancement() const {
  return _impl_.echo_return_loss_enhancement_;
}
inline double AudioSourceStats::echo_return_loss_enhancement() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.echo_return_loss_enhancement)
  return _internal_echo_return_loss_enhancement();
}
inline void AudioSourceStats::_internal_set_echo_return_loss_enhancement(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.echo_return_loss_enhancement_ = value;
}
inline void AudioSourceStats::set_echo_return_loss_enhancement(double value) {
  _internal_set_echo_return_loss_enhancement(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.echo_return_loss_enhancement)
}

// required double dropped_samples_duration = 6;
inline bool AudioSourceStats::_internal_has_dropped_samples_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AudioSourceStats::has_dropped_samples_duration() const {
  return _internal_has_dropped_samples_duration();
}
inline void AudioSourceStats::clear_dropped_samples_duration() {
  _impl_.dropped_samples_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double AudioSourceStats::_internal_dropped_samples_duration() const {
  return _impl_.dropped_samples_duration_;
}
inline double AudioSourceStats::dropped_samples_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.dropped_samples_duration)
  return _internal_dropped_samples_duration();
}
inline void AudioSourceStats::_internal_set_dropped_samples_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dropped_samples_duration_ = value;
}
inline void AudioSourceStats::set_dropped_samples_duration(double value) {
  _internal_set_dropped_samples_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.dropped_samples_duration)
}

// required uint32 dropped_samples_events = 7;
inline bool AudioSourceStats::_internal_has_dropped_samples_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AudioSourceStats::has_dropped_samples_events() const {
  return _internal_has_dropped_samples_events();
}
inline void AudioSourceStats::clear_dropped_samples_events() {
  _impl_.dropped_samples_events_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t AudioSourceStats::_internal_dropped_samples_events() const {
  return _impl_.dropped_samples_events_;
}
inline uint32_t AudioSourceStats::dropped_samples_events() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.dropped_samples_events)
  return _internal_dropped_samples_events();
}
inline void AudioSourceStats::_internal_set_dropped_samples_events(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.dropped_samples_events_ = value;
}
inline void AudioSourceStats::set_dropped_samples_events(uint32_t value) {
  _internal_set_dropped_samples_events(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.dropped_samples_events)
}

// required double total_capture_delay = 8;
inline bool AudioSourceStats::_internal_has_total_capture_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AudioSourceStats::has_total_capture_delay() const {
  return _internal_has_total_capture_delay();
}
inline void AudioSourceStats::clear_total_capture_delay() {
  _impl_.total_capture_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double AudioSourceStats::_internal_total_capture_delay() const {
  return _impl_.total_capture_delay_;
}
inline double AudioSourceStats::total_capture_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.total_capture_delay)
  return _internal_total_capture_delay();
}
inline void AudioSourceStats::_internal_set_total_capture_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.total_capture_delay_ = value;
}
inline void AudioSourceStats::set_total_capture_delay(double value) {
  _internal_set_total_capture_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.total_capture_delay)
}

// required uint64 total_samples_captured = 9;
inline bool AudioSourceStats::_internal_has_total_samples_captured() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AudioSourceStats::has_total_samples_captured() const {
  return _internal_has_total_samples_captured();
}
inline void AudioSourceStats::clear_total_samples_captured() {
  _impl_.total_samples_captured_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t AudioSourceStats::_internal_total_samples_captured() const {
  return _impl_.total_samples_captured_;
}
inline uint64_t AudioSourceStats::total_samples_captured() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioSourceStats.total_samples_captured)
  return _internal_total_samples_captured();
}
inline void AudioSourceStats::_internal_set_total_samples_captured(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.total_samples_captured_ = value;
}
inline void AudioSourceStats::set_total_samples_captured(uint64_t value) {
  _internal_set_total_samples_captured(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioSourceStats.total_samples_captured)
}

// -------------------------------------------------------------------

// VideoSourceStats

// required uint32 width = 1;
inline bool VideoSourceStats::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoSourceStats::has_width() const {
  return _internal_has_width();
}
inline void VideoSourceStats::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t VideoSourceStats::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t VideoSourceStats::width() const {
  // @@protoc_insertion_point(field_get:livekit.proto.VideoSourceStats.width)
  return _internal_width();
}
inline void VideoSourceStats::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.width_ = value;
}
inline void VideoSourceStats::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:livekit.proto.VideoSourceStats.width)
}

// required uint32 height = 2;
inline bool VideoSourceStats::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoSourceStats::has_height() const {
  return _internal_has_height();
}
inline void VideoSourceStats::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t VideoSourceStats::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t VideoSourceStats::height() const {
  // @@protoc_insertion_point(field_get:livekit.proto.VideoSourceStats.height)
  return _internal_height();
}
inline void VideoSourceStats::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.height_ = value;
}
inline void VideoSourceStats::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:livekit.proto.VideoSourceStats.height)
}

// required uint32 frames = 3;
inline bool VideoSourceStats::_internal_has_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VideoSourceStats::has_frames() const {
  return _internal_has_frames();
}
inline void VideoSourceStats::clear_frames() {
  _impl_.frames_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t VideoSourceStats::_internal_frames() const {
  return _impl_.frames_;
}
inline uint32_t VideoSourceStats::frames() const {
  // @@protoc_insertion_point(field_get:livekit.proto.VideoSourceStats.frames)
  return _internal_frames();
}
inline void VideoSourceStats::_internal_set_frames(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.frames_ = value;
}
inline void VideoSourceStats::set_frames(uint32_t value) {
  _internal_set_frames(value);
  // @@protoc_insertion_point(field_set:livekit.proto.VideoSourceStats.frames)
}

// required double frames_per_second = 4;
inline bool VideoSourceStats::_internal_has_frames_per_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VideoSourceStats::has_frames_per_second() const {
  return _internal_has_frames_per_second();
}
inline void VideoSourceStats::clear_frames_per_second() {
  _impl_.frames_per_second_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double VideoSourceStats::_internal_frames_per_second() const {
  return _impl_.frames_per_second_;
}
inline double VideoSourceStats::frames_per_second() const {
  // @@protoc_insertion_point(field_get:livekit.proto.VideoSourceStats.frames_per_second)
  return _internal_frames_per_second();
}
inline void VideoSourceStats::_internal_set_frames_per_second(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.frames_per_second_ = value;
}
inline void VideoSourceStats::set_frames_per_second(double value) {
  _internal_set_frames_per_second(value);
  // @@protoc_insertion_point(field_set:livekit.proto.VideoSourceStats.frames_per_second)
}

// -------------------------------------------------------------------

// AudioPlayoutStats

// required string kind = 1;
inline bool AudioPlayoutStats::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AudioPlayoutStats::has_kind() const {
  return _internal_has_kind();
}
inline void AudioPlayoutStats::clear_kind() {
  _impl_.kind_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioPlayoutStats::kind() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioPlayoutStats.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioPlayoutStats::set_kind(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.AudioPlayoutStats.kind)
}
inline std::string* AudioPlayoutStats::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:livekit.proto.AudioPlayoutStats.kind)
  return _s;
}
inline const std::string& AudioPlayoutStats::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void AudioPlayoutStats::_internal_set_kind(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioPlayoutStats::_internal_mutable_kind() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioPlayoutStats::release_kind() {
  // @@protoc_insertion_point(field_release:livekit.proto.AudioPlayoutStats.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.kind_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AudioPlayoutStats::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.AudioPlayoutStats.kind)
}

// required double synthesized_samples_duration = 2;
inline bool AudioPlayoutStats::_internal_has_synthesized_samples_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AudioPlayoutStats::has_synthesized_samples_duration() const {
  return _internal_has_synthesized_samples_duration();
}
inline void AudioPlayoutStats::clear_synthesized_samples_duration() {
  _impl_.synthesized_samples_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AudioPlayoutStats::_internal_synthesized_samples_duration() const {
  return _impl_.synthesized_samples_duration_;
}
inline double AudioPlayoutStats::synthesized_samples_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioPlayoutStats.synthesized_samples_duration)
  return _internal_synthesized_samples_duration();
}
inline void AudioPlayoutStats::_internal_set_synthesized_samples_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.synthesized_samples_duration_ = value;
}
inline void AudioPlayoutStats::set_synthesized_samples_duration(double value) {
  _internal_set_synthesized_samples_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioPlayoutStats.synthesized_samples_duration)
}

// required uint32 synthesized_samples_events = 3;
inline bool AudioPlayoutStats::_internal_has_synthesized_samples_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AudioPlayoutStats::has_synthesized_samples_events() const {
  return _internal_has_synthesized_samples_events();
}
inline void AudioPlayoutStats::clear_synthesized_samples_events() {
  _impl_.synthesized_samples_events_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t AudioPlayoutStats::_internal_synthesized_samples_events() const {
  return _impl_.synthesized_samples_events_;
}
inline uint32_t AudioPlayoutStats::synthesized_samples_events() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioPlayoutStats.synthesized_samples_events)
  return _internal_synthesized_samples_events();
}
inline void AudioPlayoutStats::_internal_set_synthesized_samples_events(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.synthesized_samples_events_ = value;
}
inline void AudioPlayoutStats::set_synthesized_samples_events(uint32_t value) {
  _internal_set_synthesized_samples_events(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioPlayoutStats.synthesized_samples_events)
}

// required double total_samples_duration = 4;
inline bool AudioPlayoutStats::_internal_has_total_samples_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AudioPlayoutStats::has_total_samples_duration() const {
  return _internal_has_total_samples_duration();
}
inline void AudioPlayoutStats::clear_total_samples_duration() {
  _impl_.total_samples_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AudioPlayoutStats::_internal_total_samples_duration() const {
  return _impl_.total_samples_duration_;
}
inline double AudioPlayoutStats::total_samples_duration() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioPlayoutStats.total_samples_duration)
  return _internal_total_samples_duration();
}
inline void AudioPlayoutStats::_internal_set_total_samples_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.total_samples_duration_ = value;
}
inline void AudioPlayoutStats::set_total_samples_duration(double value) {
  _internal_set_total_samples_duration(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioPlayoutStats.total_samples_duration)
}

// required double total_playout_delay = 5;
inline bool AudioPlayoutStats::_internal_has_total_playout_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AudioPlayoutStats::has_total_playout_delay() const {
  return _internal_has_total_playout_delay();
}
inline void AudioPlayoutStats::clear_total_playout_delay() {
  _impl_.total_playout_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AudioPlayoutStats::_internal_total_playout_delay() const {
  return _impl_.total_playout_delay_;
}
inline double AudioPlayoutStats::total_playout_delay() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioPlayoutStats.total_playout_delay)
  return _internal_total_playout_delay();
}
inline void AudioPlayoutStats::_internal_set_total_playout_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.total_playout_delay_ = value;
}
inline void AudioPlayoutStats::set_total_playout_delay(double value) {
  _internal_set_total_playout_delay(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioPlayoutStats.total_playout_delay)
}

// required uint64 total_samples_count = 6;
inline bool AudioPlayoutStats::_internal_has_total_samples_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AudioPlayoutStats::has_total_samples_count() const {
  return _internal_has_total_samples_count();
}
inline void AudioPlayoutStats::clear_total_samples_count() {
  _impl_.total_samples_count_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t AudioPlayoutStats::_internal_total_samples_count() const {
  return _impl_.total_samples_count_;
}
inline uint64_t AudioPlayoutStats::total_samples_count() const {
  // @@protoc_insertion_point(field_get:livekit.proto.AudioPlayoutStats.total_samples_count)
  return _internal_total_samples_count();
}
inline void AudioPlayoutStats::_internal_set_total_samples_count(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_samples_count_ = value;
}
inline void AudioPlayoutStats::set_total_samples_count(uint64_t value) {
  _internal_set_total_samples_count(value);
  // @@protoc_insertion_point(field_set:livekit.proto.AudioPlayoutStats.total_samples_count)
}

// -------------------------------------------------------------------

// PeerConnectionStats

// required uint32 data_channels_opened = 1;
inline bool PeerConnectionStats::_internal_has_data_channels_opened() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeerConnectionStats::has_data_channels_opened() const {
  return _internal_has_data_channels_opened();
}
inline void PeerConnectionStats::clear_data_channels_opened() {
  _impl_.data_channels_opened_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PeerConnectionStats::_internal_data_channels_opened() const {
  return _impl_.data_channels_opened_;
}
inline uint32_t PeerConnectionStats::data_channels_opened() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PeerConnectionStats.data_channels_opened)
  return _internal_data_channels_opened();
}
inline void PeerConnectionStats::_internal_set_data_channels_opened(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_channels_opened_ = value;
}
inline void PeerConnectionStats::set_data_channels_opened(uint32_t value) {
  _internal_set_data_channels_opened(value);
  // @@protoc_insertion_point(field_set:livekit.proto.PeerConnectionStats.data_channels_opened)
}

// required uint32 data_channels_closed = 2;
inline bool PeerConnectionStats::_internal_has_data_channels_closed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeerConnectionStats::has_data_channels_closed() const {
  return _internal_has_data_channels_closed();
}
inline void PeerConnectionStats::clear_data_channels_closed() {
  _impl_.data_channels_closed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PeerConnectionStats::_internal_data_channels_closed() const {
  return _impl_.data_channels_closed_;
}
inline uint32_t PeerConnectionStats::data_channels_closed() const {
  // @@protoc_insertion_point(field_get:livekit.proto.PeerConnectionStats.data_channels_closed)
  return _internal_data_channels_closed();
}
inline void PeerConnectionStats::_internal_set_data_channels_closed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_channels_closed_ = value;
}
inline void PeerConnectionStats::set_data_channels_closed(uint32_t value) {
  _internal_set_data_channels_closed(value);
  // @@protoc_insertion_point(field_set:livekit.proto.PeerConnectionStats.data_channels_closed)
}

// -------------------------------------------------------------------

// DataChannelStats

// required string label = 1;
inline bool DataChannelStats::_internal_has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataChannelStats::has_label() const {
  return _internal_has_label();
}
inline void DataChannelStats::clear_label() {
  _impl_.label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataChannelStats::label() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataChannelStats::set_label(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.label)
}
inline std::string* DataChannelStats::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:livekit.proto.DataChannelStats.label)
  return _s;
}
inline const std::string& DataChannelStats::_internal_label() const {
  return _impl_.label_.Get();
}
inline void DataChannelStats::_internal_set_label(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* DataChannelStats::_internal_mutable_label() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* DataChannelStats::release_label() {
  // @@protoc_insertion_point(field_release:livekit.proto.DataChannelStats.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataChannelStats::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.DataChannelStats.label)
}

// required string protocol = 2;
inline bool DataChannelStats::_internal_has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataChannelStats::has_protocol() const {
  return _internal_has_protocol();
}
inline void DataChannelStats::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataChannelStats::protocol() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataChannelStats::set_protocol(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.protocol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.protocol)
}
inline std::string* DataChannelStats::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:livekit.proto.DataChannelStats.protocol)
  return _s;
}
inline const std::string& DataChannelStats::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void DataChannelStats::_internal_set_protocol(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* DataChannelStats::_internal_mutable_protocol() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* DataChannelStats::release_protocol() {
  // @@protoc_insertion_point(field_release:livekit.proto.DataChannelStats.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.protocol_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataChannelStats::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.protocol_.SetAllocated(protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.DataChannelStats.protocol)
}

// required int32 data_channel_identifier = 3;
inline bool DataChannelStats::_internal_has_data_channel_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataChannelStats::has_data_channel_identifier() const {
  return _internal_has_data_channel_identifier();
}
inline void DataChannelStats::clear_data_channel_identifier() {
  _impl_.data_channel_identifier_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DataChannelStats::_internal_data_channel_identifier() const {
  return _impl_.data_channel_identifier_;
}
inline int32_t DataChannelStats::data_channel_identifier() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.data_channel_identifier)
  return _internal_data_channel_identifier();
}
inline void DataChannelStats::_internal_set_data_channel_identifier(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_channel_identifier_ = value;
}
inline void DataChannelStats::set_data_channel_identifier(int32_t value) {
  _internal_set_data_channel_identifier(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.data_channel_identifier)
}

// optional .livekit.proto.DataChannelState state = 4;
inline bool DataChannelStats::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataChannelStats::has_state() const {
  return _internal_has_state();
}
inline void DataChannelStats::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::livekit::proto::DataChannelState DataChannelStats::_internal_state() const {
  return static_cast< ::livekit::proto::DataChannelState >(_impl_.state_);
}
inline ::livekit::proto::DataChannelState DataChannelStats::state() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.state)
  return _internal_state();
}
inline void DataChannelStats::_internal_set_state(::livekit::proto::DataChannelState value) {
  assert(::livekit::proto::DataChannelState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void DataChannelStats::set_state(::livekit::proto::DataChannelState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.state)
}

// required uint32 messages_sent = 5;
inline bool DataChannelStats::_internal_has_messages_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataChannelStats::has_messages_sent() const {
  return _internal_has_messages_sent();
}
inline void DataChannelStats::clear_messages_sent() {
  _impl_.messages_sent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DataChannelStats::_internal_messages_sent() const {
  return _impl_.messages_sent_;
}
inline uint32_t DataChannelStats::messages_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.messages_sent)
  return _internal_messages_sent();
}
inline void DataChannelStats::_internal_set_messages_sent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.messages_sent_ = value;
}
inline void DataChannelStats::set_messages_sent(uint32_t value) {
  _internal_set_messages_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.messages_sent)
}

// required uint64 bytes_sent = 6;
inline bool DataChannelStats::_internal_has_bytes_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataChannelStats::has_bytes_sent() const {
  return _internal_has_bytes_sent();
}
inline void DataChannelStats::clear_bytes_sent() {
  _impl_.bytes_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t DataChannelStats::_internal_bytes_sent() const {
  return _impl_.bytes_sent_;
}
inline uint64_t DataChannelStats::bytes_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.bytes_sent)
  return _internal_bytes_sent();
}
inline void DataChannelStats::_internal_set_bytes_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bytes_sent_ = value;
}
inline void DataChannelStats::set_bytes_sent(uint64_t value) {
  _internal_set_bytes_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.bytes_sent)
}

// required uint32 messages_received = 7;
inline bool DataChannelStats::_internal_has_messages_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataChannelStats::has_messages_received() const {
  return _internal_has_messages_received();
}
inline void DataChannelStats::clear_messages_received() {
  _impl_.messages_received_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t DataChannelStats::_internal_messages_received() const {
  return _impl_.messages_received_;
}
inline uint32_t DataChannelStats::messages_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.messages_received)
  return _internal_messages_received();
}
inline void DataChannelStats::_internal_set_messages_received(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.messages_received_ = value;
}
inline void DataChannelStats::set_messages_received(uint32_t value) {
  _internal_set_messages_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.messages_received)
}

// required uint64 bytes_received = 8;
inline bool DataChannelStats::_internal_has_bytes_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DataChannelStats::has_bytes_received() const {
  return _internal_has_bytes_received();
}
inline void DataChannelStats::clear_bytes_received() {
  _impl_.bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t DataChannelStats::_internal_bytes_received() const {
  return _impl_.bytes_received_;
}
inline uint64_t DataChannelStats::bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.DataChannelStats.bytes_received)
  return _internal_bytes_received();
}
inline void DataChannelStats::_internal_set_bytes_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bytes_received_ = value;
}
inline void DataChannelStats::set_bytes_received(uint64_t value) {
  _internal_set_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.DataChannelStats.bytes_received)
}

// -------------------------------------------------------------------

// TransportStats

// required uint64 packets_sent = 1;
inline bool TransportStats::_internal_has_packets_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TransportStats::has_packets_sent() const {
  return _internal_has_packets_sent();
}
inline void TransportStats::clear_packets_sent() {
  _impl_.packets_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t TransportStats::_internal_packets_sent() const {
  return _impl_.packets_sent_;
}
inline uint64_t TransportStats::packets_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.packets_sent)
  return _internal_packets_sent();
}
inline void TransportStats::_internal_set_packets_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.packets_sent_ = value;
}
inline void TransportStats::set_packets_sent(uint64_t value) {
  _internal_set_packets_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.packets_sent)
}

// required uint64 packets_received = 2;
inline bool TransportStats::_internal_has_packets_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TransportStats::has_packets_received() const {
  return _internal_has_packets_received();
}
inline void TransportStats::clear_packets_received() {
  _impl_.packets_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t TransportStats::_internal_packets_received() const {
  return _impl_.packets_received_;
}
inline uint64_t TransportStats::packets_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.packets_received)
  return _internal_packets_received();
}
inline void TransportStats::_internal_set_packets_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.packets_received_ = value;
}
inline void TransportStats::set_packets_received(uint64_t value) {
  _internal_set_packets_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.packets_received)
}

// required uint64 bytes_sent = 3;
inline bool TransportStats::_internal_has_bytes_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TransportStats::has_bytes_sent() const {
  return _internal_has_bytes_sent();
}
inline void TransportStats::clear_bytes_sent() {
  _impl_.bytes_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t TransportStats::_internal_bytes_sent() const {
  return _impl_.bytes_sent_;
}
inline uint64_t TransportStats::bytes_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.bytes_sent)
  return _internal_bytes_sent();
}
inline void TransportStats::_internal_set_bytes_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bytes_sent_ = value;
}
inline void TransportStats::set_bytes_sent(uint64_t value) {
  _internal_set_bytes_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.bytes_sent)
}

// required uint64 bytes_received = 4;
inline bool TransportStats::_internal_has_bytes_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TransportStats::has_bytes_received() const {
  return _internal_has_bytes_received();
}
inline void TransportStats::clear_bytes_received() {
  _impl_.bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t TransportStats::_internal_bytes_received() const {
  return _impl_.bytes_received_;
}
inline uint64_t TransportStats::bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.bytes_received)
  return _internal_bytes_received();
}
inline void TransportStats::_internal_set_bytes_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bytes_received_ = value;
}
inline void TransportStats::set_bytes_received(uint64_t value) {
  _internal_set_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.bytes_received)
}

// required .livekit.proto.IceRole ice_role = 5;
inline bool TransportStats::_internal_has_ice_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TransportStats::has_ice_role() const {
  return _internal_has_ice_role();
}
inline void TransportStats::clear_ice_role() {
  _impl_.ice_role_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::livekit::proto::IceRole TransportStats::_internal_ice_role() const {
  return static_cast< ::livekit::proto::IceRole >(_impl_.ice_role_);
}
inline ::livekit::proto::IceRole TransportStats::ice_role() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.ice_role)
  return _internal_ice_role();
}
inline void TransportStats::_internal_set_ice_role(::livekit::proto::IceRole value) {
  assert(::livekit::proto::IceRole_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.ice_role_ = value;
}
inline void TransportStats::set_ice_role(::livekit::proto::IceRole value) {
  _internal_set_ice_role(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.ice_role)
}

// required string ice_local_username_fragment = 6;
inline bool TransportStats::_internal_has_ice_local_username_fragment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransportStats::has_ice_local_username_fragment() const {
  return _internal_has_ice_local_username_fragment();
}
inline void TransportStats::clear_ice_local_username_fragment() {
  _impl_.ice_local_username_fragment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransportStats::ice_local_username_fragment() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.ice_local_username_fragment)
  return _internal_ice_local_username_fragment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_ice_local_username_fragment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ice_local_username_fragment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.ice_local_username_fragment)
}
inline std::string* TransportStats::mutable_ice_local_username_fragment() {
  std::string* _s = _internal_mutable_ice_local_username_fragment();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.ice_local_username_fragment)
  return _s;
}
inline const std::string& TransportStats::_internal_ice_local_username_fragment() const {
  return _impl_.ice_local_username_fragment_.Get();
}
inline void TransportStats::_internal_set_ice_local_username_fragment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ice_local_username_fragment_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_ice_local_username_fragment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ice_local_username_fragment_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_ice_local_username_fragment() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.ice_local_username_fragment)
  if (!_internal_has_ice_local_username_fragment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ice_local_username_fragment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ice_local_username_fragment_.IsDefault()) {
    _impl_.ice_local_username_fragment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_ice_local_username_fragment(std::string* ice_local_username_fragment) {
  if (ice_local_username_fragment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ice_local_username_fragment_.SetAllocated(ice_local_username_fragment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ice_local_username_fragment_.IsDefault()) {
    _impl_.ice_local_username_fragment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.ice_local_username_fragment)
}

// optional .livekit.proto.DtlsTransportState dtls_state = 7;
inline bool TransportStats::_internal_has_dtls_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TransportStats::has_dtls_state() const {
  return _internal_has_dtls_state();
}
inline void TransportStats::clear_dtls_state() {
  _impl_.dtls_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::livekit::proto::DtlsTransportState TransportStats::_internal_dtls_state() const {
  return static_cast< ::livekit::proto::DtlsTransportState >(_impl_.dtls_state_);
}
inline ::livekit::proto::DtlsTransportState TransportStats::dtls_state() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.dtls_state)
  return _internal_dtls_state();
}
inline void TransportStats::_internal_set_dtls_state(::livekit::proto::DtlsTransportState value) {
  assert(::livekit::proto::DtlsTransportState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.dtls_state_ = value;
}
inline void TransportStats::set_dtls_state(::livekit::proto::DtlsTransportState value) {
  _internal_set_dtls_state(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.dtls_state)
}

// optional .livekit.proto.IceTransportState ice_state = 8;
inline bool TransportStats::_internal_has_ice_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TransportStats::has_ice_state() const {
  return _internal_has_ice_state();
}
inline void TransportStats::clear_ice_state() {
  _impl_.ice_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::livekit::proto::IceTransportState TransportStats::_internal_ice_state() const {
  return static_cast< ::livekit::proto::IceTransportState >(_impl_.ice_state_);
}
inline ::livekit::proto::IceTransportState TransportStats::ice_state() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.ice_state)
  return _internal_ice_state();
}
inline void TransportStats::_internal_set_ice_state(::livekit::proto::IceTransportState value) {
  assert(::livekit::proto::IceTransportState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.ice_state_ = value;
}
inline void TransportStats::set_ice_state(::livekit::proto::IceTransportState value) {
  _internal_set_ice_state(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.ice_state)
}

// required string selected_candidate_pair_id = 9;
inline bool TransportStats::_internal_has_selected_candidate_pair_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransportStats::has_selected_candidate_pair_id() const {
  return _internal_has_selected_candidate_pair_id();
}
inline void TransportStats::clear_selected_candidate_pair_id() {
  _impl_.selected_candidate_pair_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransportStats::selected_candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.selected_candidate_pair_id)
  return _internal_selected_candidate_pair_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_selected_candidate_pair_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.selected_candidate_pair_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.selected_candidate_pair_id)
}
inline std::string* TransportStats::mutable_selected_candidate_pair_id() {
  std::string* _s = _internal_mutable_selected_candidate_pair_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.selected_candidate_pair_id)
  return _s;
}
inline const std::string& TransportStats::_internal_selected_candidate_pair_id() const {
  return _impl_.selected_candidate_pair_id_.Get();
}
inline void TransportStats::_internal_set_selected_candidate_pair_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.selected_candidate_pair_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_selected_candidate_pair_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.selected_candidate_pair_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_selected_candidate_pair_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.selected_candidate_pair_id)
  if (!_internal_has_selected_candidate_pair_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.selected_candidate_pair_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selected_candidate_pair_id_.IsDefault()) {
    _impl_.selected_candidate_pair_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_selected_candidate_pair_id(std::string* selected_candidate_pair_id) {
  if (selected_candidate_pair_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selected_candidate_pair_id_.SetAllocated(selected_candidate_pair_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selected_candidate_pair_id_.IsDefault()) {
    _impl_.selected_candidate_pair_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.selected_candidate_pair_id)
}

// required string local_certificate_id = 10;
inline bool TransportStats::_internal_has_local_certificate_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransportStats::has_local_certificate_id() const {
  return _internal_has_local_certificate_id();
}
inline void TransportStats::clear_local_certificate_id() {
  _impl_.local_certificate_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TransportStats::local_certificate_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.local_certificate_id)
  return _internal_local_certificate_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_local_certificate_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.local_certificate_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.local_certificate_id)
}
inline std::string* TransportStats::mutable_local_certificate_id() {
  std::string* _s = _internal_mutable_local_certificate_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.local_certificate_id)
  return _s;
}
inline const std::string& TransportStats::_internal_local_certificate_id() const {
  return _impl_.local_certificate_id_.Get();
}
inline void TransportStats::_internal_set_local_certificate_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.local_certificate_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_local_certificate_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.local_certificate_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_local_certificate_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.local_certificate_id)
  if (!_internal_has_local_certificate_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.local_certificate_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_certificate_id_.IsDefault()) {
    _impl_.local_certificate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_local_certificate_id(std::string* local_certificate_id) {
  if (local_certificate_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.local_certificate_id_.SetAllocated(local_certificate_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_certificate_id_.IsDefault()) {
    _impl_.local_certificate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.local_certificate_id)
}

// required string remote_certificate_id = 11;
inline bool TransportStats::_internal_has_remote_certificate_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransportStats::has_remote_certificate_id() const {
  return _internal_has_remote_certificate_id();
}
inline void TransportStats::clear_remote_certificate_id() {
  _impl_.remote_certificate_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TransportStats::remote_certificate_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.remote_certificate_id)
  return _internal_remote_certificate_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_remote_certificate_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.remote_certificate_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.remote_certificate_id)
}
inline std::string* TransportStats::mutable_remote_certificate_id() {
  std::string* _s = _internal_mutable_remote_certificate_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.remote_certificate_id)
  return _s;
}
inline const std::string& TransportStats::_internal_remote_certificate_id() const {
  return _impl_.remote_certificate_id_.Get();
}
inline void TransportStats::_internal_set_remote_certificate_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.remote_certificate_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_remote_certificate_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.remote_certificate_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_remote_certificate_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.remote_certificate_id)
  if (!_internal_has_remote_certificate_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.remote_certificate_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_certificate_id_.IsDefault()) {
    _impl_.remote_certificate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_remote_certificate_id(std::string* remote_certificate_id) {
  if (remote_certificate_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.remote_certificate_id_.SetAllocated(remote_certificate_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_certificate_id_.IsDefault()) {
    _impl_.remote_certificate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.remote_certificate_id)
}

// required string tls_version = 12;
inline bool TransportStats::_internal_has_tls_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransportStats::has_tls_version() const {
  return _internal_has_tls_version();
}
inline void TransportStats::clear_tls_version() {
  _impl_.tls_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TransportStats::tls_version() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.tls_version)
  return _internal_tls_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_tls_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.tls_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.tls_version)
}
inline std::string* TransportStats::mutable_tls_version() {
  std::string* _s = _internal_mutable_tls_version();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.tls_version)
  return _s;
}
inline const std::string& TransportStats::_internal_tls_version() const {
  return _impl_.tls_version_.Get();
}
inline void TransportStats::_internal_set_tls_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tls_version_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_tls_version() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.tls_version_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_tls_version() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.tls_version)
  if (!_internal_has_tls_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.tls_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tls_version_.IsDefault()) {
    _impl_.tls_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_tls_version(std::string* tls_version) {
  if (tls_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tls_version_.SetAllocated(tls_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tls_version_.IsDefault()) {
    _impl_.tls_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.tls_version)
}

// required string dtls_cipher = 13;
inline bool TransportStats::_internal_has_dtls_cipher() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransportStats::has_dtls_cipher() const {
  return _internal_has_dtls_cipher();
}
inline void TransportStats::clear_dtls_cipher() {
  _impl_.dtls_cipher_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TransportStats::dtls_cipher() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.dtls_cipher)
  return _internal_dtls_cipher();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_dtls_cipher(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.dtls_cipher_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.dtls_cipher)
}
inline std::string* TransportStats::mutable_dtls_cipher() {
  std::string* _s = _internal_mutable_dtls_cipher();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.dtls_cipher)
  return _s;
}
inline const std::string& TransportStats::_internal_dtls_cipher() const {
  return _impl_.dtls_cipher_.Get();
}
inline void TransportStats::_internal_set_dtls_cipher(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dtls_cipher_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_dtls_cipher() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.dtls_cipher_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_dtls_cipher() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.dtls_cipher)
  if (!_internal_has_dtls_cipher()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.dtls_cipher_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dtls_cipher_.IsDefault()) {
    _impl_.dtls_cipher_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_dtls_cipher(std::string* dtls_cipher) {
  if (dtls_cipher != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.dtls_cipher_.SetAllocated(dtls_cipher, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dtls_cipher_.IsDefault()) {
    _impl_.dtls_cipher_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.dtls_cipher)
}

// required .livekit.proto.DtlsRole dtls_role = 14;
inline bool TransportStats::_internal_has_dtls_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TransportStats::has_dtls_role() const {
  return _internal_has_dtls_role();
}
inline void TransportStats::clear_dtls_role() {
  _impl_.dtls_role_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::livekit::proto::DtlsRole TransportStats::_internal_dtls_role() const {
  return static_cast< ::livekit::proto::DtlsRole >(_impl_.dtls_role_);
}
inline ::livekit::proto::DtlsRole TransportStats::dtls_role() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.dtls_role)
  return _internal_dtls_role();
}
inline void TransportStats::_internal_set_dtls_role(::livekit::proto::DtlsRole value) {
  assert(::livekit::proto::DtlsRole_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.dtls_role_ = value;
}
inline void TransportStats::set_dtls_role(::livekit::proto::DtlsRole value) {
  _internal_set_dtls_role(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.dtls_role)
}

// required string srtp_cipher = 15;
inline bool TransportStats::_internal_has_srtp_cipher() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransportStats::has_srtp_cipher() const {
  return _internal_has_srtp_cipher();
}
inline void TransportStats::clear_srtp_cipher() {
  _impl_.srtp_cipher_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TransportStats::srtp_cipher() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.srtp_cipher)
  return _internal_srtp_cipher();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportStats::set_srtp_cipher(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.srtp_cipher_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.srtp_cipher)
}
inline std::string* TransportStats::mutable_srtp_cipher() {
  std::string* _s = _internal_mutable_srtp_cipher();
  // @@protoc_insertion_point(field_mutable:livekit.proto.TransportStats.srtp_cipher)
  return _s;
}
inline const std::string& TransportStats::_internal_srtp_cipher() const {
  return _impl_.srtp_cipher_.Get();
}
inline void TransportStats::_internal_set_srtp_cipher(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.srtp_cipher_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportStats::_internal_mutable_srtp_cipher() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.srtp_cipher_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportStats::release_srtp_cipher() {
  // @@protoc_insertion_point(field_release:livekit.proto.TransportStats.srtp_cipher)
  if (!_internal_has_srtp_cipher()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.srtp_cipher_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srtp_cipher_.IsDefault()) {
    _impl_.srtp_cipher_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransportStats::set_allocated_srtp_cipher(std::string* srtp_cipher) {
  if (srtp_cipher != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.srtp_cipher_.SetAllocated(srtp_cipher, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srtp_cipher_.IsDefault()) {
    _impl_.srtp_cipher_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.TransportStats.srtp_cipher)
}

// required uint32 selected_candidate_pair_changes = 16;
inline bool TransportStats::_internal_has_selected_candidate_pair_changes() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TransportStats::has_selected_candidate_pair_changes() const {
  return _internal_has_selected_candidate_pair_changes();
}
inline void TransportStats::clear_selected_candidate_pair_changes() {
  _impl_.selected_candidate_pair_changes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t TransportStats::_internal_selected_candidate_pair_changes() const {
  return _impl_.selected_candidate_pair_changes_;
}
inline uint32_t TransportStats::selected_candidate_pair_changes() const {
  // @@protoc_insertion_point(field_get:livekit.proto.TransportStats.selected_candidate_pair_changes)
  return _internal_selected_candidate_pair_changes();
}
inline void TransportStats::_internal_set_selected_candidate_pair_changes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.selected_candidate_pair_changes_ = value;
}
inline void TransportStats::set_selected_candidate_pair_changes(uint32_t value) {
  _internal_set_selected_candidate_pair_changes(value);
  // @@protoc_insertion_point(field_set:livekit.proto.TransportStats.selected_candidate_pair_changes)
}

// -------------------------------------------------------------------

// CandidatePairStats

// required string transport_id = 1;
inline bool CandidatePairStats::_internal_has_transport_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CandidatePairStats::has_transport_id() const {
  return _internal_has_transport_id();
}
inline void CandidatePairStats::clear_transport_id() {
  _impl_.transport_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CandidatePairStats::transport_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.transport_id)
  return _internal_transport_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidatePairStats::set_transport_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.transport_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.transport_id)
}
inline std::string* CandidatePairStats::mutable_transport_id() {
  std::string* _s = _internal_mutable_transport_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CandidatePairStats.transport_id)
  return _s;
}
inline const std::string& CandidatePairStats::_internal_transport_id() const {
  return _impl_.transport_id_.Get();
}
inline void CandidatePairStats::_internal_set_transport_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transport_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CandidatePairStats::_internal_mutable_transport_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.transport_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CandidatePairStats::release_transport_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.CandidatePairStats.transport_id)
  if (!_internal_has_transport_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.transport_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CandidatePairStats::set_allocated_transport_id(std::string* transport_id) {
  if (transport_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transport_id_.SetAllocated(transport_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CandidatePairStats.transport_id)
}

// required string local_candidate_id = 2;
inline bool CandidatePairStats::_internal_has_local_candidate_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CandidatePairStats::has_local_candidate_id() const {
  return _internal_has_local_candidate_id();
}
inline void CandidatePairStats::clear_local_candidate_id() {
  _impl_.local_candidate_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CandidatePairStats::local_candidate_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.local_candidate_id)
  return _internal_local_candidate_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidatePairStats::set_local_candidate_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.local_candidate_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.local_candidate_id)
}
inline std::string* CandidatePairStats::mutable_local_candidate_id() {
  std::string* _s = _internal_mutable_local_candidate_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CandidatePairStats.local_candidate_id)
  return _s;
}
inline const std::string& CandidatePairStats::_internal_local_candidate_id() const {
  return _impl_.local_candidate_id_.Get();
}
inline void CandidatePairStats::_internal_set_local_candidate_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.local_candidate_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CandidatePairStats::_internal_mutable_local_candidate_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.local_candidate_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CandidatePairStats::release_local_candidate_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.CandidatePairStats.local_candidate_id)
  if (!_internal_has_local_candidate_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.local_candidate_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_candidate_id_.IsDefault()) {
    _impl_.local_candidate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CandidatePairStats::set_allocated_local_candidate_id(std::string* local_candidate_id) {
  if (local_candidate_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.local_candidate_id_.SetAllocated(local_candidate_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_candidate_id_.IsDefault()) {
    _impl_.local_candidate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CandidatePairStats.local_candidate_id)
}

// required string remote_candidate_id = 3;
inline bool CandidatePairStats::_internal_has_remote_candidate_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CandidatePairStats::has_remote_candidate_id() const {
  return _internal_has_remote_candidate_id();
}
inline void CandidatePairStats::clear_remote_candidate_id() {
  _impl_.remote_candidate_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CandidatePairStats::remote_candidate_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.remote_candidate_id)
  return _internal_remote_candidate_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidatePairStats::set_remote_candidate_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.remote_candidate_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.remote_candidate_id)
}
inline std::string* CandidatePairStats::mutable_remote_candidate_id() {
  std::string* _s = _internal_mutable_remote_candidate_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CandidatePairStats.remote_candidate_id)
  return _s;
}
inline const std::string& CandidatePairStats::_internal_remote_candidate_id() const {
  return _impl_.remote_candidate_id_.Get();
}
inline void CandidatePairStats::_internal_set_remote_candidate_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remote_candidate_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CandidatePairStats::_internal_mutable_remote_candidate_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.remote_candidate_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CandidatePairStats::release_remote_candidate_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.CandidatePairStats.remote_candidate_id)
  if (!_internal_has_remote_candidate_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.remote_candidate_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_candidate_id_.IsDefault()) {
    _impl_.remote_candidate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CandidatePairStats::set_allocated_remote_candidate_id(std::string* remote_candidate_id) {
  if (remote_candidate_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.remote_candidate_id_.SetAllocated(remote_candidate_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_candidate_id_.IsDefault()) {
    _impl_.remote_candidate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CandidatePairStats.remote_candidate_id)
}

// optional .livekit.proto.IceCandidatePairState state = 4;
inline bool CandidatePairStats::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CandidatePairStats::has_state() const {
  return _internal_has_state();
}
inline void CandidatePairStats::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::livekit::proto::IceCandidatePairState CandidatePairStats::_internal_state() const {
  return static_cast< ::livekit::proto::IceCandidatePairState >(_impl_.state_);
}
inline ::livekit::proto::IceCandidatePairState CandidatePairStats::state() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.state)
  return _internal_state();
}
inline void CandidatePairStats::_internal_set_state(::livekit::proto::IceCandidatePairState value) {
  assert(::livekit::proto::IceCandidatePairState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void CandidatePairStats::set_state(::livekit::proto::IceCandidatePairState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.state)
}

// required bool nominated = 5;
inline bool CandidatePairStats::_internal_has_nominated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CandidatePairStats::has_nominated() const {
  return _internal_has_nominated();
}
inline void CandidatePairStats::clear_nominated() {
  _impl_.nominated_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CandidatePairStats::_internal_nominated() const {
  return _impl_.nominated_;
}
inline bool CandidatePairStats::nominated() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.nominated)
  return _internal_nominated();
}
inline void CandidatePairStats::_internal_set_nominated(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nominated_ = value;
}
inline void CandidatePairStats::set_nominated(bool value) {
  _internal_set_nominated(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.nominated)
}

// required uint64 packets_sent = 6;
inline bool CandidatePairStats::_internal_has_packets_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CandidatePairStats::has_packets_sent() const {
  return _internal_has_packets_sent();
}
inline void CandidatePairStats::clear_packets_sent() {
  _impl_.packets_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CandidatePairStats::_internal_packets_sent() const {
  return _impl_.packets_sent_;
}
inline uint64_t CandidatePairStats::packets_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.packets_sent)
  return _internal_packets_sent();
}
inline void CandidatePairStats::_internal_set_packets_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.packets_sent_ = value;
}
inline void CandidatePairStats::set_packets_sent(uint64_t value) {
  _internal_set_packets_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.packets_sent)
}

// required uint64 packets_received = 7;
inline bool CandidatePairStats::_internal_has_packets_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CandidatePairStats::has_packets_received() const {
  return _internal_has_packets_received();
}
inline void CandidatePairStats::clear_packets_received() {
  _impl_.packets_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CandidatePairStats::_internal_packets_received() const {
  return _impl_.packets_received_;
}
inline uint64_t CandidatePairStats::packets_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.packets_received)
  return _internal_packets_received();
}
inline void CandidatePairStats::_internal_set_packets_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.packets_received_ = value;
}
inline void CandidatePairStats::set_packets_received(uint64_t value) {
  _internal_set_packets_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.packets_received)
}

// required uint64 bytes_sent = 8;
inline bool CandidatePairStats::_internal_has_bytes_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CandidatePairStats::has_bytes_sent() const {
  return _internal_has_bytes_sent();
}
inline void CandidatePairStats::clear_bytes_sent() {
  _impl_.bytes_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CandidatePairStats::_internal_bytes_sent() const {
  return _impl_.bytes_sent_;
}
inline uint64_t CandidatePairStats::bytes_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.bytes_sent)
  return _internal_bytes_sent();
}
inline void CandidatePairStats::_internal_set_bytes_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bytes_sent_ = value;
}
inline void CandidatePairStats::set_bytes_sent(uint64_t value) {
  _internal_set_bytes_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.bytes_sent)
}

// required uint64 bytes_received = 9;
inline bool CandidatePairStats::_internal_has_bytes_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CandidatePairStats::has_bytes_received() const {
  return _internal_has_bytes_received();
}
inline void CandidatePairStats::clear_bytes_received() {
  _impl_.bytes_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CandidatePairStats::_internal_bytes_received() const {
  return _impl_.bytes_received_;
}
inline uint64_t CandidatePairStats::bytes_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.bytes_received)
  return _internal_bytes_received();
}
inline void CandidatePairStats::_internal_set_bytes_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bytes_received_ = value;
}
inline void CandidatePairStats::set_bytes_received(uint64_t value) {
  _internal_set_bytes_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.bytes_received)
}

// required double last_packet_sent_timestamp = 10;
inline bool CandidatePairStats::_internal_has_last_packet_sent_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CandidatePairStats::has_last_packet_sent_timestamp() const {
  return _internal_has_last_packet_sent_timestamp();
}
inline void CandidatePairStats::clear_last_packet_sent_timestamp() {
  _impl_.last_packet_sent_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double CandidatePairStats::_internal_last_packet_sent_timestamp() const {
  return _impl_.last_packet_sent_timestamp_;
}
inline double CandidatePairStats::last_packet_sent_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.last_packet_sent_timestamp)
  return _internal_last_packet_sent_timestamp();
}
inline void CandidatePairStats::_internal_set_last_packet_sent_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.last_packet_sent_timestamp_ = value;
}
inline void CandidatePairStats::set_last_packet_sent_timestamp(double value) {
  _internal_set_last_packet_sent_timestamp(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.last_packet_sent_timestamp)
}

// required double last_packet_received_timestamp = 11;
inline bool CandidatePairStats::_internal_has_last_packet_received_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CandidatePairStats::has_last_packet_received_timestamp() const {
  return _internal_has_last_packet_received_timestamp();
}
inline void CandidatePairStats::clear_last_packet_received_timestamp() {
  _impl_.last_packet_received_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double CandidatePairStats::_internal_last_packet_received_timestamp() const {
  return _impl_.last_packet_received_timestamp_;
}
inline double CandidatePairStats::last_packet_received_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.last_packet_received_timestamp)
  return _internal_last_packet_received_timestamp();
}
inline void CandidatePairStats::_internal_set_last_packet_received_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.last_packet_received_timestamp_ = value;
}
inline void CandidatePairStats::set_last_packet_received_timestamp(double value) {
  _internal_set_last_packet_received_timestamp(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.last_packet_received_timestamp)
}

// required double total_round_trip_time = 12;
inline bool CandidatePairStats::_internal_has_total_round_trip_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CandidatePairStats::has_total_round_trip_time() const {
  return _internal_has_total_round_trip_time();
}
inline void CandidatePairStats::clear_total_round_trip_time() {
  _impl_.total_round_trip_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double CandidatePairStats::_internal_total_round_trip_time() const {
  return _impl_.total_round_trip_time_;
}
inline double CandidatePairStats::total_round_trip_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.total_round_trip_time)
  return _internal_total_round_trip_time();
}
inline void CandidatePairStats::_internal_set_total_round_trip_time(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.total_round_trip_time_ = value;
}
inline void CandidatePairStats::set_total_round_trip_time(double value) {
  _internal_set_total_round_trip_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.total_round_trip_time)
}

// required double current_round_trip_time = 13;
inline bool CandidatePairStats::_internal_has_current_round_trip_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_current_round_trip_time() const {
  return _internal_has_current_round_trip_time();
}
inline void CandidatePairStats::clear_current_round_trip_time() {
  _impl_.current_round_trip_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double CandidatePairStats::_internal_current_round_trip_time() const {
  return _impl_.current_round_trip_time_;
}
inline double CandidatePairStats::current_round_trip_time() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.current_round_trip_time)
  return _internal_current_round_trip_time();
}
inline void CandidatePairStats::_internal_set_current_round_trip_time(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.current_round_trip_time_ = value;
}
inline void CandidatePairStats::set_current_round_trip_time(double value) {
  _internal_set_current_round_trip_time(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.current_round_trip_time)
}

// required double available_outgoing_bitrate = 14;
inline bool CandidatePairStats::_internal_has_available_outgoing_bitrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_available_outgoing_bitrate() const {
  return _internal_has_available_outgoing_bitrate();
}
inline void CandidatePairStats::clear_available_outgoing_bitrate() {
  _impl_.available_outgoing_bitrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double CandidatePairStats::_internal_available_outgoing_bitrate() const {
  return _impl_.available_outgoing_bitrate_;
}
inline double CandidatePairStats::available_outgoing_bitrate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.available_outgoing_bitrate)
  return _internal_available_outgoing_bitrate();
}
inline void CandidatePairStats::_internal_set_available_outgoing_bitrate(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.available_outgoing_bitrate_ = value;
}
inline void CandidatePairStats::set_available_outgoing_bitrate(double value) {
  _internal_set_available_outgoing_bitrate(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.available_outgoing_bitrate)
}

// required double available_incoming_bitrate = 15;
inline bool CandidatePairStats::_internal_has_available_incoming_bitrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_available_incoming_bitrate() const {
  return _internal_has_available_incoming_bitrate();
}
inline void CandidatePairStats::clear_available_incoming_bitrate() {
  _impl_.available_incoming_bitrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double CandidatePairStats::_internal_available_incoming_bitrate() const {
  return _impl_.available_incoming_bitrate_;
}
inline double CandidatePairStats::available_incoming_bitrate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.available_incoming_bitrate)
  return _internal_available_incoming_bitrate();
}
inline void CandidatePairStats::_internal_set_available_incoming_bitrate(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.available_incoming_bitrate_ = value;
}
inline void CandidatePairStats::set_available_incoming_bitrate(double value) {
  _internal_set_available_incoming_bitrate(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.available_incoming_bitrate)
}

// required uint64 requests_received = 16;
inline bool CandidatePairStats::_internal_has_requests_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_requests_received() const {
  return _internal_has_requests_received();
}
inline void CandidatePairStats::clear_requests_received() {
  _impl_.requests_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CandidatePairStats::_internal_requests_received() const {
  return _impl_.requests_received_;
}
inline uint64_t CandidatePairStats::requests_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.requests_received)
  return _internal_requests_received();
}
inline void CandidatePairStats::_internal_set_requests_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.requests_received_ = value;
}
inline void CandidatePairStats::set_requests_received(uint64_t value) {
  _internal_set_requests_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.requests_received)
}

// required uint64 requests_sent = 17;
inline bool CandidatePairStats::_internal_has_requests_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_requests_sent() const {
  return _internal_has_requests_sent();
}
inline void CandidatePairStats::clear_requests_sent() {
  _impl_.requests_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint64_t CandidatePairStats::_internal_requests_sent() const {
  return _impl_.requests_sent_;
}
inline uint64_t CandidatePairStats::requests_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.requests_sent)
  return _internal_requests_sent();
}
inline void CandidatePairStats::_internal_set_requests_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.requests_sent_ = value;
}
inline void CandidatePairStats::set_requests_sent(uint64_t value) {
  _internal_set_requests_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.requests_sent)
}

// required uint64 responses_received = 18;
inline bool CandidatePairStats::_internal_has_responses_received() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_responses_received() const {
  return _internal_has_responses_received();
}
inline void CandidatePairStats::clear_responses_received() {
  _impl_.responses_received_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint64_t CandidatePairStats::_internal_responses_received() const {
  return _impl_.responses_received_;
}
inline uint64_t CandidatePairStats::responses_received() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.responses_received)
  return _internal_responses_received();
}
inline void CandidatePairStats::_internal_set_responses_received(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.responses_received_ = value;
}
inline void CandidatePairStats::set_responses_received(uint64_t value) {
  _internal_set_responses_received(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.responses_received)
}

// required uint64 responses_sent = 19;
inline bool CandidatePairStats::_internal_has_responses_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_responses_sent() const {
  return _internal_has_responses_sent();
}
inline void CandidatePairStats::clear_responses_sent() {
  _impl_.responses_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CandidatePairStats::_internal_responses_sent() const {
  return _impl_.responses_sent_;
}
inline uint64_t CandidatePairStats::responses_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.responses_sent)
  return _internal_responses_sent();
}
inline void CandidatePairStats::_internal_set_responses_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.responses_sent_ = value;
}
inline void CandidatePairStats::set_responses_sent(uint64_t value) {
  _internal_set_responses_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.responses_sent)
}

// required uint64 consent_requests_sent = 20;
inline bool CandidatePairStats::_internal_has_consent_requests_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_consent_requests_sent() const {
  return _internal_has_consent_requests_sent();
}
inline void CandidatePairStats::clear_consent_requests_sent() {
  _impl_.consent_requests_sent_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint64_t CandidatePairStats::_internal_consent_requests_sent() const {
  return _impl_.consent_requests_sent_;
}
inline uint64_t CandidatePairStats::consent_requests_sent() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.consent_requests_sent)
  return _internal_consent_requests_sent();
}
inline void CandidatePairStats::_internal_set_consent_requests_sent(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.consent_requests_sent_ = value;
}
inline void CandidatePairStats::set_consent_requests_sent(uint64_t value) {
  _internal_set_consent_requests_sent(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.consent_requests_sent)
}

// required uint32 packets_discarded_on_send = 21;
inline bool CandidatePairStats::_internal_has_packets_discarded_on_send() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_packets_discarded_on_send() const {
  return _internal_has_packets_discarded_on_send();
}
inline void CandidatePairStats::clear_packets_discarded_on_send() {
  _impl_.packets_discarded_on_send_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CandidatePairStats::_internal_packets_discarded_on_send() const {
  return _impl_.packets_discarded_on_send_;
}
inline uint32_t CandidatePairStats::packets_discarded_on_send() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.packets_discarded_on_send)
  return _internal_packets_discarded_on_send();
}
inline void CandidatePairStats::_internal_set_packets_discarded_on_send(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.packets_discarded_on_send_ = value;
}
inline void CandidatePairStats::set_packets_discarded_on_send(uint32_t value) {
  _internal_set_packets_discarded_on_send(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.packets_discarded_on_send)
}

// required uint64 bytes_discarded_on_send = 22;
inline bool CandidatePairStats::_internal_has_bytes_discarded_on_send() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CandidatePairStats::has_bytes_discarded_on_send() const {
  return _internal_has_bytes_discarded_on_send();
}
inline void CandidatePairStats::clear_bytes_discarded_on_send() {
  _impl_.bytes_discarded_on_send_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint64_t CandidatePairStats::_internal_bytes_discarded_on_send() const {
  return _impl_.bytes_discarded_on_send_;
}
inline uint64_t CandidatePairStats::bytes_discarded_on_send() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CandidatePairStats.bytes_discarded_on_send)
  return _internal_bytes_discarded_on_send();
}
inline void CandidatePairStats::_internal_set_bytes_discarded_on_send(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.bytes_discarded_on_send_ = value;
}
inline void CandidatePairStats::set_bytes_discarded_on_send(uint64_t value) {
  _internal_set_bytes_discarded_on_send(value);
  // @@protoc_insertion_point(field_set:livekit.proto.CandidatePairStats.bytes_discarded_on_send)
}

// -------------------------------------------------------------------

// IceCandidateStats

// required string transport_id = 1;
inline bool IceCandidateStats::_internal_has_transport_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IceCandidateStats::has_transport_id() const {
  return _internal_has_transport_id();
}
inline void IceCandidateStats::clear_transport_id() {
  _impl_.transport_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IceCandidateStats::transport_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.transport_id)
  return _internal_transport_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_transport_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.transport_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.transport_id)
}
inline std::string* IceCandidateStats::mutable_transport_id() {
  std::string* _s = _internal_mutable_transport_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.transport_id)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_transport_id() const {
  return _impl_.transport_id_.Get();
}
inline void IceCandidateStats::_internal_set_transport_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transport_id_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_transport_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.transport_id_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_transport_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.transport_id)
  if (!_internal_has_transport_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.transport_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_transport_id(std::string* transport_id) {
  if (transport_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transport_id_.SetAllocated(transport_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transport_id_.IsDefault()) {
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.transport_id)
}

// required string address = 2;
inline bool IceCandidateStats::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IceCandidateStats::has_address() const {
  return _internal_has_address();
}
inline void IceCandidateStats::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IceCandidateStats::address() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.address)
}
inline std::string* IceCandidateStats::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.address)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_address() const {
  return _impl_.address_.Get();
}
inline void IceCandidateStats::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_address() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.address)
}

// required int32 port = 3;
inline bool IceCandidateStats::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IceCandidateStats::has_port() const {
  return _internal_has_port();
}
inline void IceCandidateStats::clear_port() {
  _impl_.port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t IceCandidateStats::_internal_port() const {
  return _impl_.port_;
}
inline int32_t IceCandidateStats::port() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.port)
  return _internal_port();
}
inline void IceCandidateStats::_internal_set_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.port_ = value;
}
inline void IceCandidateStats::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.port)
}

// required string protocol = 4;
inline bool IceCandidateStats::_internal_has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IceCandidateStats::has_protocol() const {
  return _internal_has_protocol();
}
inline void IceCandidateStats::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IceCandidateStats::protocol() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_protocol(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.protocol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.protocol)
}
inline std::string* IceCandidateStats::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.protocol)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void IceCandidateStats::_internal_set_protocol(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_protocol() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_protocol() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.protocol_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.protocol_.SetAllocated(protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.protocol)
}

// optional .livekit.proto.IceCandidateType candidate_type = 5;
inline bool IceCandidateStats::_internal_has_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IceCandidateStats::has_candidate_type() const {
  return _internal_has_candidate_type();
}
inline void IceCandidateStats::clear_candidate_type() {
  _impl_.candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::livekit::proto::IceCandidateType IceCandidateStats::_internal_candidate_type() const {
  return static_cast< ::livekit::proto::IceCandidateType >(_impl_.candidate_type_);
}
inline ::livekit::proto::IceCandidateType IceCandidateStats::candidate_type() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.candidate_type)
  return _internal_candidate_type();
}
inline void IceCandidateStats::_internal_set_candidate_type(::livekit::proto::IceCandidateType value) {
  assert(::livekit::proto::IceCandidateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.candidate_type_ = value;
}
inline void IceCandidateStats::set_candidate_type(::livekit::proto::IceCandidateType value) {
  _internal_set_candidate_type(value);
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.candidate_type)
}

// required int32 priority = 6;
inline bool IceCandidateStats::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IceCandidateStats::has_priority() const {
  return _internal_has_priority();
}
inline void IceCandidateStats::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t IceCandidateStats::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t IceCandidateStats::priority() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.priority)
  return _internal_priority();
}
inline void IceCandidateStats::_internal_set_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.priority_ = value;
}
inline void IceCandidateStats::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.priority)
}

// required string url = 7;
inline bool IceCandidateStats::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IceCandidateStats::has_url() const {
  return _internal_has_url();
}
inline void IceCandidateStats::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& IceCandidateStats::url() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.url)
}
inline std::string* IceCandidateStats::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.url)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_url() const {
  return _impl_.url_.Get();
}
inline void IceCandidateStats::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_url() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.url)
}

// optional .livekit.proto.IceServerTransportProtocol relay_protocol = 8;
inline bool IceCandidateStats::_internal_has_relay_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IceCandidateStats::has_relay_protocol() const {
  return _internal_has_relay_protocol();
}
inline void IceCandidateStats::clear_relay_protocol() {
  _impl_.relay_protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::livekit::proto::IceServerTransportProtocol IceCandidateStats::_internal_relay_protocol() const {
  return static_cast< ::livekit::proto::IceServerTransportProtocol >(_impl_.relay_protocol_);
}
inline ::livekit::proto::IceServerTransportProtocol IceCandidateStats::relay_protocol() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.relay_protocol)
  return _internal_relay_protocol();
}
inline void IceCandidateStats::_internal_set_relay_protocol(::livekit::proto::IceServerTransportProtocol value) {
  assert(::livekit::proto::IceServerTransportProtocol_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.relay_protocol_ = value;
}
inline void IceCandidateStats::set_relay_protocol(::livekit::proto::IceServerTransportProtocol value) {
  _internal_set_relay_protocol(value);
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.relay_protocol)
}

// required string foundation = 9;
inline bool IceCandidateStats::_internal_has_foundation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IceCandidateStats::has_foundation() const {
  return _internal_has_foundation();
}
inline void IceCandidateStats::clear_foundation() {
  _impl_.foundation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& IceCandidateStats::foundation() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.foundation)
  return _internal_foundation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_foundation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.foundation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.foundation)
}
inline std::string* IceCandidateStats::mutable_foundation() {
  std::string* _s = _internal_mutable_foundation();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.foundation)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_foundation() const {
  return _impl_.foundation_.Get();
}
inline void IceCandidateStats::_internal_set_foundation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.foundation_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_foundation() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.foundation_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_foundation() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.foundation)
  if (!_internal_has_foundation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.foundation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.foundation_.IsDefault()) {
    _impl_.foundation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_foundation(std::string* foundation) {
  if (foundation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.foundation_.SetAllocated(foundation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.foundation_.IsDefault()) {
    _impl_.foundation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.foundation)
}

// required string related_address = 10;
inline bool IceCandidateStats::_internal_has_related_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IceCandidateStats::has_related_address() const {
  return _internal_has_related_address();
}
inline void IceCandidateStats::clear_related_address() {
  _impl_.related_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& IceCandidateStats::related_address() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.related_address)
  return _internal_related_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_related_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.related_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.related_address)
}
inline std::string* IceCandidateStats::mutable_related_address() {
  std::string* _s = _internal_mutable_related_address();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.related_address)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_related_address() const {
  return _impl_.related_address_.Get();
}
inline void IceCandidateStats::_internal_set_related_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.related_address_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_related_address() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.related_address_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_related_address() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.related_address)
  if (!_internal_has_related_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.related_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.related_address_.IsDefault()) {
    _impl_.related_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_related_address(std::string* related_address) {
  if (related_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.related_address_.SetAllocated(related_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.related_address_.IsDefault()) {
    _impl_.related_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.related_address)
}

// required int32 related_port = 11;
inline bool IceCandidateStats::_internal_has_related_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IceCandidateStats::has_related_port() const {
  return _internal_has_related_port();
}
inline void IceCandidateStats::clear_related_port() {
  _impl_.related_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t IceCandidateStats::_internal_related_port() const {
  return _impl_.related_port_;
}
inline int32_t IceCandidateStats::related_port() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.related_port)
  return _internal_related_port();
}
inline void IceCandidateStats::_internal_set_related_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.related_port_ = value;
}
inline void IceCandidateStats::set_related_port(int32_t value) {
  _internal_set_related_port(value);
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.related_port)
}

// required string username_fragment = 12;
inline bool IceCandidateStats::_internal_has_username_fragment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IceCandidateStats::has_username_fragment() const {
  return _internal_has_username_fragment();
}
inline void IceCandidateStats::clear_username_fragment() {
  _impl_.username_fragment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& IceCandidateStats::username_fragment() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.username_fragment)
  return _internal_username_fragment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IceCandidateStats::set_username_fragment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.username_fragment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.username_fragment)
}
inline std::string* IceCandidateStats::mutable_username_fragment() {
  std::string* _s = _internal_mutable_username_fragment();
  // @@protoc_insertion_point(field_mutable:livekit.proto.IceCandidateStats.username_fragment)
  return _s;
}
inline const std::string& IceCandidateStats::_internal_username_fragment() const {
  return _impl_.username_fragment_.Get();
}
inline void IceCandidateStats::_internal_set_username_fragment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.username_fragment_.Set(value, GetArenaForAllocation());
}
inline std::string* IceCandidateStats::_internal_mutable_username_fragment() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.username_fragment_.Mutable(GetArenaForAllocation());
}
inline std::string* IceCandidateStats::release_username_fragment() {
  // @@protoc_insertion_point(field_release:livekit.proto.IceCandidateStats.username_fragment)
  if (!_internal_has_username_fragment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.username_fragment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_fragment_.IsDefault()) {
    _impl_.username_fragment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IceCandidateStats::set_allocated_username_fragment(std::string* username_fragment) {
  if (username_fragment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.username_fragment_.SetAllocated(username_fragment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_fragment_.IsDefault()) {
    _impl_.username_fragment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.IceCandidateStats.username_fragment)
}

// optional .livekit.proto.IceTcpCandidateType tcp_type = 13;
inline bool IceCandidateStats::_internal_has_tcp_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool IceCandidateStats::has_tcp_type() const {
  return _internal_has_tcp_type();
}
inline void IceCandidateStats::clear_tcp_type() {
  _impl_.tcp_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::livekit::proto::IceTcpCandidateType IceCandidateStats::_internal_tcp_type() const {
  return static_cast< ::livekit::proto::IceTcpCandidateType >(_impl_.tcp_type_);
}
inline ::livekit::proto::IceTcpCandidateType IceCandidateStats::tcp_type() const {
  // @@protoc_insertion_point(field_get:livekit.proto.IceCandidateStats.tcp_type)
  return _internal_tcp_type();
}
inline void IceCandidateStats::_internal_set_tcp_type(::livekit::proto::IceTcpCandidateType value) {
  assert(::livekit::proto::IceTcpCandidateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tcp_type_ = value;
}
inline void IceCandidateStats::set_tcp_type(::livekit::proto::IceTcpCandidateType value) {
  _internal_set_tcp_type(value);
  // @@protoc_insertion_point(field_set:livekit.proto.IceCandidateStats.tcp_type)
}

// -------------------------------------------------------------------

// CertificateStats

// required string fingerprint = 1;
inline bool CertificateStats::_internal_has_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CertificateStats::has_fingerprint() const {
  return _internal_has_fingerprint();
}
inline void CertificateStats::clear_fingerprint() {
  _impl_.fingerprint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CertificateStats::fingerprint() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CertificateStats.fingerprint)
  return _internal_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CertificateStats::set_fingerprint(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.fingerprint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CertificateStats.fingerprint)
}
inline std::string* CertificateStats::mutable_fingerprint() {
  std::string* _s = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CertificateStats.fingerprint)
  return _s;
}
inline const std::string& CertificateStats::_internal_fingerprint() const {
  return _impl_.fingerprint_.Get();
}
inline void CertificateStats::_internal_set_fingerprint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* CertificateStats::_internal_mutable_fingerprint() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.fingerprint_.Mutable(GetArenaForAllocation());
}
inline std::string* CertificateStats::release_fingerprint() {
  // @@protoc_insertion_point(field_release:livekit.proto.CertificateStats.fingerprint)
  if (!_internal_has_fingerprint()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.fingerprint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_.IsDefault()) {
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CertificateStats::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fingerprint_.SetAllocated(fingerprint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_.IsDefault()) {
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CertificateStats.fingerprint)
}

// required string fingerprint_algorithm = 2;
inline bool CertificateStats::_internal_has_fingerprint_algorithm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CertificateStats::has_fingerprint_algorithm() const {
  return _internal_has_fingerprint_algorithm();
}
inline void CertificateStats::clear_fingerprint_algorithm() {
  _impl_.fingerprint_algorithm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CertificateStats::fingerprint_algorithm() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CertificateStats.fingerprint_algorithm)
  return _internal_fingerprint_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CertificateStats::set_fingerprint_algorithm(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.fingerprint_algorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CertificateStats.fingerprint_algorithm)
}
inline std::string* CertificateStats::mutable_fingerprint_algorithm() {
  std::string* _s = _internal_mutable_fingerprint_algorithm();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CertificateStats.fingerprint_algorithm)
  return _s;
}
inline const std::string& CertificateStats::_internal_fingerprint_algorithm() const {
  return _impl_.fingerprint_algorithm_.Get();
}
inline void CertificateStats::_internal_set_fingerprint_algorithm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fingerprint_algorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* CertificateStats::_internal_mutable_fingerprint_algorithm() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.fingerprint_algorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* CertificateStats::release_fingerprint_algorithm() {
  // @@protoc_insertion_point(field_release:livekit.proto.CertificateStats.fingerprint_algorithm)
  if (!_internal_has_fingerprint_algorithm()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.fingerprint_algorithm_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_algorithm_.IsDefault()) {
    _impl_.fingerprint_algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CertificateStats::set_allocated_fingerprint_algorithm(std::string* fingerprint_algorithm) {
  if (fingerprint_algorithm != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fingerprint_algorithm_.SetAllocated(fingerprint_algorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_algorithm_.IsDefault()) {
    _impl_.fingerprint_algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CertificateStats.fingerprint_algorithm)
}

// required string base64_certificate = 3;
inline bool CertificateStats::_internal_has_base64_certificate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CertificateStats::has_base64_certificate() const {
  return _internal_has_base64_certificate();
}
inline void CertificateStats::clear_base64_certificate() {
  _impl_.base64_certificate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CertificateStats::base64_certificate() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CertificateStats.base64_certificate)
  return _internal_base64_certificate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CertificateStats::set_base64_certificate(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.base64_certificate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CertificateStats.base64_certificate)
}
inline std::string* CertificateStats::mutable_base64_certificate() {
  std::string* _s = _internal_mutable_base64_certificate();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CertificateStats.base64_certificate)
  return _s;
}
inline const std::string& CertificateStats::_internal_base64_certificate() const {
  return _impl_.base64_certificate_.Get();
}
inline void CertificateStats::_internal_set_base64_certificate(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.base64_certificate_.Set(value, GetArenaForAllocation());
}
inline std::string* CertificateStats::_internal_mutable_base64_certificate() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.base64_certificate_.Mutable(GetArenaForAllocation());
}
inline std::string* CertificateStats::release_base64_certificate() {
  // @@protoc_insertion_point(field_release:livekit.proto.CertificateStats.base64_certificate)
  if (!_internal_has_base64_certificate()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.base64_certificate_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base64_certificate_.IsDefault()) {
    _impl_.base64_certificate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CertificateStats::set_allocated_base64_certificate(std::string* base64_certificate) {
  if (base64_certificate != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.base64_certificate_.SetAllocated(base64_certificate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base64_certificate_.IsDefault()) {
    _impl_.base64_certificate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CertificateStats.base64_certificate)
}

// required string issuer_certificate_id = 4;
inline bool CertificateStats::_internal_has_issuer_certificate_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CertificateStats::has_issuer_certificate_id() const {
  return _internal_has_issuer_certificate_id();
}
inline void CertificateStats::clear_issuer_certificate_id() {
  _impl_.issuer_certificate_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CertificateStats::issuer_certificate_id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.CertificateStats.issuer_certificate_id)
  return _internal_issuer_certificate_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CertificateStats::set_issuer_certificate_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.issuer_certificate_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.CertificateStats.issuer_certificate_id)
}
inline std::string* CertificateStats::mutable_issuer_certificate_id() {
  std::string* _s = _internal_mutable_issuer_certificate_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.CertificateStats.issuer_certificate_id)
  return _s;
}
inline const std::string& CertificateStats::_internal_issuer_certificate_id() const {
  return _impl_.issuer_certificate_id_.Get();
}
inline void CertificateStats::_internal_set_issuer_certificate_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.issuer_certificate_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CertificateStats::_internal_mutable_issuer_certificate_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.issuer_certificate_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CertificateStats::release_issuer_certificate_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.CertificateStats.issuer_certificate_id)
  if (!_internal_has_issuer_certificate_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.issuer_certificate_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.issuer_certificate_id_.IsDefault()) {
    _impl_.issuer_certificate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CertificateStats::set_allocated_issuer_certificate_id(std::string* issuer_certificate_id) {
  if (issuer_certificate_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.issuer_certificate_id_.SetAllocated(issuer_certificate_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.issuer_certificate_id_.IsDefault()) {
    _impl_.issuer_certificate_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.CertificateStats.issuer_certificate_id)
}

// -------------------------------------------------------------------

// StreamStats

// required string id = 1;
inline bool StreamStats::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamStats::has_id() const {
  return _internal_has_id();
}
inline void StreamStats::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StreamStats::id() const {
  // @@protoc_insertion_point(field_get:livekit.proto.StreamStats.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamStats::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.StreamStats.id)
}
inline std::string* StreamStats::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.proto.StreamStats.id)
  return _s;
}
inline const std::string& StreamStats::_internal_id() const {
  return _impl_.id_.Get();
}
inline void StreamStats::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamStats::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamStats::release_id() {
  // @@protoc_insertion_point(field_release:livekit.proto.StreamStats.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StreamStats::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.StreamStats.id)
}

// required string stream_identifier = 2;
inline bool StreamStats::_internal_has_stream_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamStats::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void StreamStats::clear_stream_identifier() {
  _impl_.stream_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StreamStats::stream_identifier() const {
  // @@protoc_insertion_point(field_get:livekit.proto.StreamStats.stream_identifier)
  return _internal_stream_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamStats::set_stream_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.stream_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.proto.StreamStats.stream_identifier)
}
inline std::string* StreamStats::mutable_stream_identifier() {
  std::string* _s = _internal_mutable_stream_identifier();
  // @@protoc_insertion_point(field_mutable:livekit.proto.StreamStats.stream_identifier)
  return _s;
}
inline const std::string& StreamStats::_internal_stream_identifier() const {
  return _impl_.stream_identifier_.Get();
}
inline void StreamStats::_internal_set_stream_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stream_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamStats::_internal_mutable_stream_identifier() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.stream_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamStats::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:livekit.proto.StreamStats.stream_identifier)
  if (!_internal_has_stream_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.stream_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stream_identifier_.IsDefault()) {
    _impl_.stream_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StreamStats::set_allocated_stream_identifier(std::string* stream_identifier) {
  if (stream_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stream_identifier_.SetAllocated(stream_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stream_identifier_.IsDefault()) {
    _impl_.stream_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.StreamStats.stream_identifier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace livekit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::livekit::proto::DataChannelState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::DataChannelState>() {
  return ::livekit::proto::DataChannelState_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::QualityLimitationReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::QualityLimitationReason>() {
  return ::livekit::proto::QualityLimitationReason_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::IceRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::IceRole>() {
  return ::livekit::proto::IceRole_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::DtlsTransportState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::DtlsTransportState>() {
  return ::livekit::proto::DtlsTransportState_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::IceTransportState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::IceTransportState>() {
  return ::livekit::proto::IceTransportState_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::DtlsRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::DtlsRole>() {
  return ::livekit::proto::DtlsRole_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::IceCandidatePairState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::IceCandidatePairState>() {
  return ::livekit::proto::IceCandidatePairState_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::IceCandidateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::IceCandidateType>() {
  return ::livekit::proto::IceCandidateType_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::IceServerTransportProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::IceServerTransportProtocol>() {
  return ::livekit::proto::IceServerTransportProtocol_descriptor();
}
template <> struct is_proto_enum< ::livekit::proto::IceTcpCandidateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::livekit::proto::IceTcpCandidateType>() {
  return ::livekit::proto::IceTcpCandidateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stats_2eproto
