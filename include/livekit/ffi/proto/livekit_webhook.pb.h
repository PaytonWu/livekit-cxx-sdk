// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_webhook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_livekit_5fwebhook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_livekit_5fwebhook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "livekit_models.pb.h"
#include "livekit_egress.pb.h"
#include "livekit_ingress.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_livekit_5fwebhook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_livekit_5fwebhook_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_livekit_5fwebhook_2eproto;
namespace livekit {
class WebhookEvent;
struct WebhookEventDefaultTypeInternal;
extern WebhookEventDefaultTypeInternal _WebhookEvent_default_instance_;
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> ::livekit::WebhookEvent* Arena::CreateMaybeMessage<::livekit::WebhookEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace livekit {

// ===================================================================

class WebhookEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:livekit.WebhookEvent) */ {
 public:
  inline WebhookEvent() : WebhookEvent(nullptr) {}
  ~WebhookEvent() override;
  explicit PROTOBUF_CONSTEXPR WebhookEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebhookEvent(const WebhookEvent& from);
  WebhookEvent(WebhookEvent&& from) noexcept
    : WebhookEvent() {
    *this = ::std::move(from);
  }

  inline WebhookEvent& operator=(const WebhookEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebhookEvent& operator=(WebhookEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WebhookEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebhookEvent* internal_default_instance() {
    return reinterpret_cast<const WebhookEvent*>(
               &_WebhookEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebhookEvent& a, WebhookEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(WebhookEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebhookEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebhookEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebhookEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WebhookEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WebhookEvent& from) {
    WebhookEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebhookEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "livekit.WebhookEvent";
  }
  protected:
  explicit WebhookEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kIdFieldNumber = 6,
    kRoomFieldNumber = 2,
    kParticipantFieldNumber = 3,
    kTrackFieldNumber = 8,
    kEgressInfoFieldNumber = 9,
    kIngressInfoFieldNumber = 10,
    kCreatedAtFieldNumber = 7,
    kNumDroppedFieldNumber = 11,
  };
  // string event = 1;
  void clear_event();
  const std::string& event() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event();
  PROTOBUF_NODISCARD std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .livekit.Room room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::livekit::Room& room() const;
  PROTOBUF_NODISCARD ::livekit::Room* release_room();
  ::livekit::Room* mutable_room();
  void set_allocated_room(::livekit::Room* room);
  private:
  const ::livekit::Room& _internal_room() const;
  ::livekit::Room* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::livekit::Room* room);
  ::livekit::Room* unsafe_arena_release_room();

  // .livekit.ParticipantInfo participant = 3;
  bool has_participant() const;
  private:
  bool _internal_has_participant() const;
  public:
  void clear_participant();
  const ::livekit::ParticipantInfo& participant() const;
  PROTOBUF_NODISCARD ::livekit::ParticipantInfo* release_participant();
  ::livekit::ParticipantInfo* mutable_participant();
  void set_allocated_participant(::livekit::ParticipantInfo* participant);
  private:
  const ::livekit::ParticipantInfo& _internal_participant() const;
  ::livekit::ParticipantInfo* _internal_mutable_participant();
  public:
  void unsafe_arena_set_allocated_participant(
      ::livekit::ParticipantInfo* participant);
  ::livekit::ParticipantInfo* unsafe_arena_release_participant();

  // .livekit.TrackInfo track = 8;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  const ::livekit::TrackInfo& track() const;
  PROTOBUF_NODISCARD ::livekit::TrackInfo* release_track();
  ::livekit::TrackInfo* mutable_track();
  void set_allocated_track(::livekit::TrackInfo* track);
  private:
  const ::livekit::TrackInfo& _internal_track() const;
  ::livekit::TrackInfo* _internal_mutable_track();
  public:
  void unsafe_arena_set_allocated_track(
      ::livekit::TrackInfo* track);
  ::livekit::TrackInfo* unsafe_arena_release_track();

  // .livekit.EgressInfo egress_info = 9;
  bool has_egress_info() const;
  private:
  bool _internal_has_egress_info() const;
  public:
  void clear_egress_info();
  const ::livekit::EgressInfo& egress_info() const;
  PROTOBUF_NODISCARD ::livekit::EgressInfo* release_egress_info();
  ::livekit::EgressInfo* mutable_egress_info();
  void set_allocated_egress_info(::livekit::EgressInfo* egress_info);
  private:
  const ::livekit::EgressInfo& _internal_egress_info() const;
  ::livekit::EgressInfo* _internal_mutable_egress_info();
  public:
  void unsafe_arena_set_allocated_egress_info(
      ::livekit::EgressInfo* egress_info);
  ::livekit::EgressInfo* unsafe_arena_release_egress_info();

  // .livekit.IngressInfo ingress_info = 10;
  bool has_ingress_info() const;
  private:
  bool _internal_has_ingress_info() const;
  public:
  void clear_ingress_info();
  const ::livekit::IngressInfo& ingress_info() const;
  PROTOBUF_NODISCARD ::livekit::IngressInfo* release_ingress_info();
  ::livekit::IngressInfo* mutable_ingress_info();
  void set_allocated_ingress_info(::livekit::IngressInfo* ingress_info);
  private:
  const ::livekit::IngressInfo& _internal_ingress_info() const;
  ::livekit::IngressInfo* _internal_mutable_ingress_info();
  public:
  void unsafe_arena_set_allocated_ingress_info(
      ::livekit::IngressInfo* ingress_info);
  ::livekit::IngressInfo* unsafe_arena_release_ingress_info();

  // int64 created_at = 7;
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // int32 num_dropped = 11;
  void clear_num_dropped();
  int32_t num_dropped() const;
  void set_num_dropped(int32_t value);
  private:
  int32_t _internal_num_dropped() const;
  void _internal_set_num_dropped(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:livekit.WebhookEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::livekit::Room* room_;
    ::livekit::ParticipantInfo* participant_;
    ::livekit::TrackInfo* track_;
    ::livekit::EgressInfo* egress_info_;
    ::livekit::IngressInfo* ingress_info_;
    int64_t created_at_;
    int32_t num_dropped_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fwebhook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebhookEvent

// string event = 1;
inline void WebhookEvent::clear_event() {
  _impl_.event_.ClearToEmpty();
}
inline const std::string& WebhookEvent::event() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.event)
  return _internal_event();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebhookEvent::set_event(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.event)
}
inline std::string* WebhookEvent::mutable_event() {
  std::string* _s = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.event)
  return _s;
}
inline const std::string& WebhookEvent::_internal_event() const {
  return _impl_.event_.Get();
}
inline void WebhookEvent::_internal_set_event(const std::string& value) {
  
  _impl_.event_.Set(value, GetArenaForAllocation());
}
inline std::string* WebhookEvent::_internal_mutable_event() {
  
  return _impl_.event_.Mutable(GetArenaForAllocation());
}
inline std::string* WebhookEvent::release_event() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.event)
  return _impl_.event_.Release();
}
inline void WebhookEvent::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  _impl_.event_.SetAllocated(event, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_.IsDefault()) {
    _impl_.event_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.event)
}

// .livekit.Room room = 2;
inline bool WebhookEvent::_internal_has_room() const {
  return this != internal_default_instance() && _impl_.room_ != nullptr;
}
inline bool WebhookEvent::has_room() const {
  return _internal_has_room();
}
inline const ::livekit::Room& WebhookEvent::_internal_room() const {
  const ::livekit::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::Room&>(
      ::livekit::_Room_default_instance_);
}
inline const ::livekit::Room& WebhookEvent::room() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.room)
  return _internal_room();
}
inline void WebhookEvent::unsafe_arena_set_allocated_room(
    ::livekit::Room* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.room)
}
inline ::livekit::Room* WebhookEvent::release_room() {
  
  ::livekit::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::Room* WebhookEvent::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.room)
  
  ::livekit::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::livekit::Room* WebhookEvent::_internal_mutable_room() {
  
  if (_impl_.room_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::Room>(GetArenaForAllocation());
    _impl_.room_ = p;
  }
  return _impl_.room_;
}
inline ::livekit::Room* WebhookEvent::mutable_room() {
  ::livekit::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.room)
  return _msg;
}
inline void WebhookEvent::set_allocated_room(::livekit::Room* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_ = room;
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.room)
}

// .livekit.ParticipantInfo participant = 3;
inline bool WebhookEvent::_internal_has_participant() const {
  return this != internal_default_instance() && _impl_.participant_ != nullptr;
}
inline bool WebhookEvent::has_participant() const {
  return _internal_has_participant();
}
inline const ::livekit::ParticipantInfo& WebhookEvent::_internal_participant() const {
  const ::livekit::ParticipantInfo* p = _impl_.participant_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::ParticipantInfo&>(
      ::livekit::_ParticipantInfo_default_instance_);
}
inline const ::livekit::ParticipantInfo& WebhookEvent::participant() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.participant)
  return _internal_participant();
}
inline void WebhookEvent::unsafe_arena_set_allocated_participant(
    ::livekit::ParticipantInfo* participant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.participant_);
  }
  _impl_.participant_ = participant;
  if (participant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.participant)
}
inline ::livekit::ParticipantInfo* WebhookEvent::release_participant() {
  
  ::livekit::ParticipantInfo* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::ParticipantInfo* WebhookEvent::unsafe_arena_release_participant() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.participant)
  
  ::livekit::ParticipantInfo* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
  return temp;
}
inline ::livekit::ParticipantInfo* WebhookEvent::_internal_mutable_participant() {
  
  if (_impl_.participant_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::ParticipantInfo>(GetArenaForAllocation());
    _impl_.participant_ = p;
  }
  return _impl_.participant_;
}
inline ::livekit::ParticipantInfo* WebhookEvent::mutable_participant() {
  ::livekit::ParticipantInfo* _msg = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.participant)
  return _msg;
}
inline void WebhookEvent::set_allocated_participant(::livekit::ParticipantInfo* participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.participant_);
  }
  if (participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(participant));
    if (message_arena != submessage_arena) {
      participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.participant_ = participant;
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.participant)
}

// .livekit.EgressInfo egress_info = 9;
inline bool WebhookEvent::_internal_has_egress_info() const {
  return this != internal_default_instance() && _impl_.egress_info_ != nullptr;
}
inline bool WebhookEvent::has_egress_info() const {
  return _internal_has_egress_info();
}
inline const ::livekit::EgressInfo& WebhookEvent::_internal_egress_info() const {
  const ::livekit::EgressInfo* p = _impl_.egress_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::EgressInfo&>(
      ::livekit::_EgressInfo_default_instance_);
}
inline const ::livekit::EgressInfo& WebhookEvent::egress_info() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.egress_info)
  return _internal_egress_info();
}
inline void WebhookEvent::unsafe_arena_set_allocated_egress_info(
    ::livekit::EgressInfo* egress_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.egress_info_);
  }
  _impl_.egress_info_ = egress_info;
  if (egress_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.egress_info)
}
inline ::livekit::EgressInfo* WebhookEvent::release_egress_info() {
  
  ::livekit::EgressInfo* temp = _impl_.egress_info_;
  _impl_.egress_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::EgressInfo* WebhookEvent::unsafe_arena_release_egress_info() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.egress_info)
  
  ::livekit::EgressInfo* temp = _impl_.egress_info_;
  _impl_.egress_info_ = nullptr;
  return temp;
}
inline ::livekit::EgressInfo* WebhookEvent::_internal_mutable_egress_info() {
  
  if (_impl_.egress_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::EgressInfo>(GetArenaForAllocation());
    _impl_.egress_info_ = p;
  }
  return _impl_.egress_info_;
}
inline ::livekit::EgressInfo* WebhookEvent::mutable_egress_info() {
  ::livekit::EgressInfo* _msg = _internal_mutable_egress_info();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.egress_info)
  return _msg;
}
inline void WebhookEvent::set_allocated_egress_info(::livekit::EgressInfo* egress_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.egress_info_);
  }
  if (egress_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(egress_info));
    if (message_arena != submessage_arena) {
      egress_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egress_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.egress_info_ = egress_info;
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.egress_info)
}

// .livekit.IngressInfo ingress_info = 10;
inline bool WebhookEvent::_internal_has_ingress_info() const {
  return this != internal_default_instance() && _impl_.ingress_info_ != nullptr;
}
inline bool WebhookEvent::has_ingress_info() const {
  return _internal_has_ingress_info();
}
inline const ::livekit::IngressInfo& WebhookEvent::_internal_ingress_info() const {
  const ::livekit::IngressInfo* p = _impl_.ingress_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::IngressInfo&>(
      ::livekit::_IngressInfo_default_instance_);
}
inline const ::livekit::IngressInfo& WebhookEvent::ingress_info() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.ingress_info)
  return _internal_ingress_info();
}
inline void WebhookEvent::unsafe_arena_set_allocated_ingress_info(
    ::livekit::IngressInfo* ingress_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ingress_info_);
  }
  _impl_.ingress_info_ = ingress_info;
  if (ingress_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.ingress_info)
}
inline ::livekit::IngressInfo* WebhookEvent::release_ingress_info() {
  
  ::livekit::IngressInfo* temp = _impl_.ingress_info_;
  _impl_.ingress_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::IngressInfo* WebhookEvent::unsafe_arena_release_ingress_info() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.ingress_info)
  
  ::livekit::IngressInfo* temp = _impl_.ingress_info_;
  _impl_.ingress_info_ = nullptr;
  return temp;
}
inline ::livekit::IngressInfo* WebhookEvent::_internal_mutable_ingress_info() {
  
  if (_impl_.ingress_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::IngressInfo>(GetArenaForAllocation());
    _impl_.ingress_info_ = p;
  }
  return _impl_.ingress_info_;
}
inline ::livekit::IngressInfo* WebhookEvent::mutable_ingress_info() {
  ::livekit::IngressInfo* _msg = _internal_mutable_ingress_info();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.ingress_info)
  return _msg;
}
inline void WebhookEvent::set_allocated_ingress_info(::livekit::IngressInfo* ingress_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ingress_info_);
  }
  if (ingress_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ingress_info));
    if (message_arena != submessage_arena) {
      ingress_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ingress_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ingress_info_ = ingress_info;
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.ingress_info)
}

// .livekit.TrackInfo track = 8;
inline bool WebhookEvent::_internal_has_track() const {
  return this != internal_default_instance() && _impl_.track_ != nullptr;
}
inline bool WebhookEvent::has_track() const {
  return _internal_has_track();
}
inline const ::livekit::TrackInfo& WebhookEvent::_internal_track() const {
  const ::livekit::TrackInfo* p = _impl_.track_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::TrackInfo&>(
      ::livekit::_TrackInfo_default_instance_);
}
inline const ::livekit::TrackInfo& WebhookEvent::track() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.track)
  return _internal_track();
}
inline void WebhookEvent::unsafe_arena_set_allocated_track(
    ::livekit::TrackInfo* track) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.track_);
  }
  _impl_.track_ = track;
  if (track) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.track)
}
inline ::livekit::TrackInfo* WebhookEvent::release_track() {
  
  ::livekit::TrackInfo* temp = _impl_.track_;
  _impl_.track_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::livekit::TrackInfo* WebhookEvent::unsafe_arena_release_track() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.track)
  
  ::livekit::TrackInfo* temp = _impl_.track_;
  _impl_.track_ = nullptr;
  return temp;
}
inline ::livekit::TrackInfo* WebhookEvent::_internal_mutable_track() {
  
  if (_impl_.track_ == nullptr) {
    auto* p = CreateMaybeMessage<::livekit::TrackInfo>(GetArenaForAllocation());
    _impl_.track_ = p;
  }
  return _impl_.track_;
}
inline ::livekit::TrackInfo* WebhookEvent::mutable_track() {
  ::livekit::TrackInfo* _msg = _internal_mutable_track();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.track)
  return _msg;
}
inline void WebhookEvent::set_allocated_track(::livekit::TrackInfo* track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.track_);
  }
  if (track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track));
    if (message_arena != submessage_arena) {
      track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.track_ = track;
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.track)
}

// string id = 6;
inline void WebhookEvent::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& WebhookEvent::id() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebhookEvent::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.id)
}
inline std::string* WebhookEvent::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.id)
  return _s;
}
inline const std::string& WebhookEvent::_internal_id() const {
  return _impl_.id_.Get();
}
inline void WebhookEvent::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebhookEvent::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebhookEvent::release_id() {
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.id)
  return _impl_.id_.Release();
}
inline void WebhookEvent::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.id)
}

// int64 created_at = 7;
inline void WebhookEvent::clear_created_at() {
  _impl_.created_at_ = int64_t{0};
}
inline int64_t WebhookEvent::_internal_created_at() const {
  return _impl_.created_at_;
}
inline int64_t WebhookEvent::created_at() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.created_at)
  return _internal_created_at();
}
inline void WebhookEvent::_internal_set_created_at(int64_t value) {
  
  _impl_.created_at_ = value;
}
inline void WebhookEvent::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.created_at)
}

// int32 num_dropped = 11;
inline void WebhookEvent::clear_num_dropped() {
  _impl_.num_dropped_ = 0;
}
inline int32_t WebhookEvent::_internal_num_dropped() const {
  return _impl_.num_dropped_;
}
inline int32_t WebhookEvent::num_dropped() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.num_dropped)
  return _internal_num_dropped();
}
inline void WebhookEvent::_internal_set_num_dropped(int32_t value) {
  
  _impl_.num_dropped_ = value;
}
inline void WebhookEvent::set_num_dropped(int32_t value) {
  _internal_set_num_dropped(value);
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.num_dropped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace livekit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_livekit_5fwebhook_2eproto
