// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: participant.proto

#include "participant.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
namespace proto {
PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ParticipantInfo_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal _ParticipantInfo_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ParticipantInfo::ParticipantInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.disconnect_reason_)*/0} {}
struct ParticipantInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantInfoDefaultTypeInternal() {}
  union {
    ParticipantInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;
PROTOBUF_CONSTEXPR OwnedParticipant::OwnedParticipant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr} {}
struct OwnedParticipantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnedParticipantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnedParticipantDefaultTypeInternal() {}
  union {
    OwnedParticipant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnedParticipantDefaultTypeInternal _OwnedParticipant_default_instance_;
}  // namespace proto
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_participant_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_participant_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_participant_2eproto = nullptr;

const uint32_t TableStruct_participant_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantInfo, _impl_.disconnect_reason_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedParticipant, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedParticipant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedParticipant, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedParticipant, _impl_.info_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse)},
  { 10, 23, -1, sizeof(::livekit::proto::ParticipantInfo)},
  { 30, 38, -1, sizeof(::livekit::proto::OwnedParticipant)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::proto::_ParticipantInfo_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::proto::_ParticipantInfo_default_instance_._instance,
  &::livekit::proto::_OwnedParticipant_default_instance_._instance,
};

const char descriptor_table_protodef_participant_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021participant.proto\022\rlivekit.proto\032\014hand"
  "le.proto\"\261\002\n\017ParticipantInfo\022\013\n\003sid\030\001 \002("
  "\t\022\014\n\004name\030\002 \002(\t\022\020\n\010identity\030\003 \002(\t\022\020\n\010met"
  "adata\030\004 \002(\t\022B\n\nattributes\030\005 \003(\0132..liveki"
  "t.proto.ParticipantInfo.AttributesEntry\022"
  ",\n\004kind\030\006 \002(\0162\036.livekit.proto.Participan"
  "tKind\022:\n\021disconnect_reason\030\007 \002(\0162\037.livek"
  "it.proto.DisconnectReason\0321\n\017AttributesE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"o\n\020"
  "OwnedParticipant\022-\n\006handle\030\001 \002(\0132\035.livek"
  "it.proto.FfiOwnedHandle\022,\n\004info\030\002 \002(\0132\036."
  "livekit.proto.ParticipantInfo*\241\001\n\017Partic"
  "ipantKind\022\035\n\031PARTICIPANT_KIND_STANDARD\020\000"
  "\022\034\n\030PARTICIPANT_KIND_INGRESS\020\001\022\033\n\027PARTIC"
  "IPANT_KIND_EGRESS\020\002\022\030\n\024PARTICIPANT_KIND_"
  "SIP\020\003\022\032\n\026PARTICIPANT_KIND_AGENT\020\004*\254\002\n\020Di"
  "sconnectReason\022\022\n\016UNKNOWN_REASON\020\000\022\024\n\020CL"
  "IENT_INITIATED\020\001\022\026\n\022DUPLICATE_IDENTITY\020\002"
  "\022\023\n\017SERVER_SHUTDOWN\020\003\022\027\n\023PARTICIPANT_REM"
  "OVED\020\004\022\020\n\014ROOM_DELETED\020\005\022\022\n\016STATE_MISMAT"
  "CH\020\006\022\020\n\014JOIN_FAILURE\020\007\022\r\n\tMIGRATION\020\010\022\020\n"
  "\014SIGNAL_CLOSE\020\t\022\017\n\013ROOM_CLOSED\020\n\022\024\n\020USER"
  "_UNAVAILABLE\020\013\022\021\n\rUSER_REJECTED\020\014\022\025\n\021SIP"
  "_TRUNK_FAILURE\020\rB\020\252\002\rLiveKit.Proto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_participant_2eproto_deps[1] = {
  &::descriptor_table_handle_2eproto,
};
static ::_pbi::once_flag descriptor_table_participant_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_participant_2eproto = {
    false, false, 954, descriptor_table_protodef_participant_2eproto,
    "participant.proto",
    &descriptor_table_participant_2eproto_once, descriptor_table_participant_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_participant_2eproto::offsets,
    file_level_metadata_participant_2eproto, file_level_enum_descriptors_participant_2eproto,
    file_level_service_descriptors_participant_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_participant_2eproto_getter() {
  return &descriptor_table_participant_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_participant_2eproto(&descriptor_table_participant_2eproto);
namespace livekit {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_participant_2eproto);
  return file_level_enum_descriptors_participant_2eproto[0];
}
bool ParticipantKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisconnectReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_participant_2eproto);
  return file_level_enum_descriptors_participant_2eproto[1];
}
bool DisconnectReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse() {}
ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ParticipantInfo_AttributesEntry_DoNotUse::MergeFrom(const ParticipantInfo_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ParticipantInfo_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_participant_2eproto_getter, &descriptor_table_participant_2eproto_once,
      file_level_metadata_participant_2eproto[0]);
}

// ===================================================================

class ParticipantInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantInfo>()._impl_._has_bits_);
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

ParticipantInfo::ParticipantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ParticipantInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantInfo)
}
ParticipantInfo::ParticipantInfo(const ParticipantInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.disconnect_reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sid()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identity()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.kind_, &from._impl_.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
    reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantInfo)
}

inline void ParticipantInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.disconnect_reason_){0}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantInfo::~ParticipantInfo() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ParticipantInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.sid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.metadata_.Destroy();
}

void ParticipantInfo::ArenaDtor(void* object) {
  ParticipantInfo* _this = reinterpret_cast< ParticipantInfo* >(object);
  _this->_impl_.attributes_.Destruct();
}
void ParticipantInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
        reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.disconnect_reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantInfo.sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantInfo.identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantInfo.metadata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.ParticipantKind kind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::ParticipantKind_IsValid(val))) {
            _internal_set_kind(static_cast<::livekit::proto::ParticipantKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DisconnectReason disconnect_reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DisconnectReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::livekit::proto::DisconnectReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required string identity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantInfo.identity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_identity(), target);
  }

  // required string metadata = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_metadata(), target);
  }

  // map<string, string> attributes = 5;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ParticipantInfo_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.ParticipantInfo.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.ParticipantInfo.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // required .livekit.proto.ParticipantKind kind = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_kind(), target);
  }

  // required .livekit.proto.DisconnectReason disconnect_reason = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_disconnect_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantInfo)
  return target;
}

size_t ParticipantInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ParticipantInfo)
  size_t total_size = 0;

  if (_internal_has_sid()) {
    // required string sid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_identity()) {
    // required string identity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  if (_internal_has_metadata()) {
    // required string metadata = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  if (_internal_has_kind()) {
    // required .livekit.proto.ParticipantKind kind = 6;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (_internal_has_disconnect_reason()) {
    // required .livekit.proto.DisconnectReason disconnect_reason = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
  }

  return total_size;
}
size_t ParticipantInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string sid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string identity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());

    // required string metadata = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());

    // required .livekit.proto.ParticipantKind kind = 6;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());

    // required .livekit.proto.DisconnectReason disconnect_reason = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += ParticipantInfo_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantInfo::GetClassData() const { return &_class_data_; }


void ParticipantInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantInfo*>(&to_msg);
  auto& from = static_cast<const ParticipantInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sid(from._internal_sid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_identity(from._internal_identity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantInfo::CopyFrom(const ParticipantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParticipantInfo::InternalSwap(ParticipantInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.disconnect_reason_)
      + sizeof(ParticipantInfo::_impl_.disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.kind_)>(
          reinterpret_cast<char*>(&_impl_.kind_),
          reinterpret_cast<char*>(&other->_impl_.kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_participant_2eproto_getter, &descriptor_table_participant_2eproto_once,
      file_level_metadata_participant_2eproto[1]);
}

// ===================================================================

class OwnedParticipant::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnedParticipant>()._impl_._has_bits_);
  static const ::livekit::proto::FfiOwnedHandle& handle(const OwnedParticipant* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::ParticipantInfo& info(const OwnedParticipant* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::FfiOwnedHandle&
OwnedParticipant::_Internal::handle(const OwnedParticipant* msg) {
  return *msg->_impl_.handle_;
}
const ::livekit::proto::ParticipantInfo&
OwnedParticipant::_Internal::info(const OwnedParticipant* msg) {
  return *msg->_impl_.info_;
}
void OwnedParticipant::clear_handle() {
  if (_impl_.handle_ != nullptr) _impl_.handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OwnedParticipant::OwnedParticipant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.OwnedParticipant)
}
OwnedParticipant::OwnedParticipant(const OwnedParticipant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnedParticipant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    _this->_impl_.handle_ = new ::livekit::proto::FfiOwnedHandle(*from._impl_.handle_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::livekit::proto::ParticipantInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.OwnedParticipant)
}

inline void OwnedParticipant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}
  };
}

OwnedParticipant::~OwnedParticipant() {
  // @@protoc_insertion_point(destructor:livekit.proto.OwnedParticipant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnedParticipant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.handle_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void OwnedParticipant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnedParticipant::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.OwnedParticipant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.handle_ != nullptr);
      _impl_.handle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnedParticipant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.FfiOwnedHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.ParticipantInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnedParticipant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.OwnedParticipant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.FfiOwnedHandle handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::handle(this),
        _Internal::handle(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.ParticipantInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.OwnedParticipant)
  return target;
}

size_t OwnedParticipant::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.OwnedParticipant)
  size_t total_size = 0;

  if (_internal_has_handle()) {
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);
  }

  if (_internal_has_info()) {
    // required .livekit.proto.ParticipantInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t OwnedParticipant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.OwnedParticipant)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);

    // required .livekit.proto.ParticipantInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnedParticipant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnedParticipant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnedParticipant::GetClassData() const { return &_class_data_; }


void OwnedParticipant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnedParticipant*>(&to_msg);
  auto& from = static_cast<const OwnedParticipant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.OwnedParticipant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handle()->::livekit::proto::FfiOwnedHandle::MergeFrom(
          from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::livekit::proto::ParticipantInfo::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnedParticipant::CopyFrom(const OwnedParticipant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.OwnedParticipant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedParticipant::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!_impl_.handle_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void OwnedParticipant::InternalSwap(OwnedParticipant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnedParticipant, _impl_.info_)
      + sizeof(OwnedParticipant::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(OwnedParticipant, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnedParticipant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_participant_2eproto_getter, &descriptor_table_participant_2eproto_once,
      file_level_metadata_participant_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantInfo_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantInfo*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OwnedParticipant*
Arena::CreateMaybeMessage< ::livekit::proto::OwnedParticipant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OwnedParticipant >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
