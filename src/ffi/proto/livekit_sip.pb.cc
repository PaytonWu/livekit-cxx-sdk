// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_sip.proto

#include "livekit_sip.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR SIPStatus::SIPStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPStatusDefaultTypeInternal() {}
  union {
    SIPStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPStatusDefaultTypeInternal _SIPStatus_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPTrunkRequest::CreateSIPTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inbound_addresses_)*/{}
  , /*decltype(_impl_.inbound_numbers_regex_)*/{}
  , /*decltype(_impl_.inbound_numbers_)*/{}
  , /*decltype(_impl_.outbound_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inbound_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inbound_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSIPTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPTrunkRequestDefaultTypeInternal() {}
  union {
    CreateSIPTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPTrunkRequestDefaultTypeInternal _CreateSIPTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPTrunkInfo::SIPTrunkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inbound_addresses_)*/{}
  , /*decltype(_impl_.inbound_numbers_regex_)*/{}
  , /*decltype(_impl_.inbound_numbers_)*/{}
  , /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inbound_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inbound_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outbound_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transport_)*/0
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPTrunkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPTrunkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPTrunkInfoDefaultTypeInternal() {}
  union {
    SIPTrunkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPTrunkInfoDefaultTypeInternal _SIPTrunkInfo_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPInboundTrunkRequest::CreateSIPInboundTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSIPInboundTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPInboundTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPInboundTrunkRequestDefaultTypeInternal() {}
  union {
    CreateSIPInboundTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPInboundTrunkRequestDefaultTypeInternal _CreateSIPInboundTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_HeadersEntry_DoNotUse::SIPInboundTrunkInfo_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPInboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPInboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPInboundTrunkInfo_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPInboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal _SIPInboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal _SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal _SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPInboundTrunkInfo::SIPInboundTrunkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.numbers_)*/{}
  , /*decltype(_impl_.allowed_addresses_)*/{}
  , /*decltype(_impl_.allowed_numbers_)*/{}
  , /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.headers_to_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.attributes_to_headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ringing_timeout_)*/nullptr
  , /*decltype(_impl_.max_call_duration_)*/nullptr
  , /*decltype(_impl_.krisp_enabled_)*/false
  , /*decltype(_impl_.include_headers_)*/0
  , /*decltype(_impl_.media_encryption_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPInboundTrunkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPInboundTrunkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPInboundTrunkInfoDefaultTypeInternal() {}
  union {
    SIPInboundTrunkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPInboundTrunkInfoDefaultTypeInternal _SIPInboundTrunkInfo_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPOutboundTrunkRequest::CreateSIPOutboundTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSIPOutboundTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPOutboundTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPOutboundTrunkRequestDefaultTypeInternal() {}
  union {
    CreateSIPOutboundTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPOutboundTrunkRequestDefaultTypeInternal _CreateSIPOutboundTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPOutboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPOutboundTrunkInfo_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundTrunkInfo_HeadersEntry_DoNotUseDefaultTypeInternal _SIPOutboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal _SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal _SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundTrunkInfo::SIPOutboundTrunkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.numbers_)*/{}
  , /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.headers_to_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.attributes_to_headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transport_)*/0
  , /*decltype(_impl_.include_headers_)*/0
  , /*decltype(_impl_.media_encryption_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPOutboundTrunkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundTrunkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundTrunkInfoDefaultTypeInternal() {}
  union {
    SIPOutboundTrunkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundTrunkInfoDefaultTypeInternal _SIPOutboundTrunkInfo_default_instance_;
PROTOBUF_CONSTEXPR GetSIPInboundTrunkRequest::GetSIPInboundTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSIPInboundTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSIPInboundTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSIPInboundTrunkRequestDefaultTypeInternal() {}
  union {
    GetSIPInboundTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSIPInboundTrunkRequestDefaultTypeInternal _GetSIPInboundTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSIPInboundTrunkResponse::GetSIPInboundTrunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSIPInboundTrunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSIPInboundTrunkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSIPInboundTrunkResponseDefaultTypeInternal() {}
  union {
    GetSIPInboundTrunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSIPInboundTrunkResponseDefaultTypeInternal _GetSIPInboundTrunkResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSIPOutboundTrunkRequest::GetSIPOutboundTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSIPOutboundTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSIPOutboundTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSIPOutboundTrunkRequestDefaultTypeInternal() {}
  union {
    GetSIPOutboundTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSIPOutboundTrunkRequestDefaultTypeInternal _GetSIPOutboundTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSIPOutboundTrunkResponse::GetSIPOutboundTrunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSIPOutboundTrunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSIPOutboundTrunkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSIPOutboundTrunkResponseDefaultTypeInternal() {}
  union {
    GetSIPOutboundTrunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSIPOutboundTrunkResponseDefaultTypeInternal _GetSIPOutboundTrunkResponse_default_instance_;
PROTOBUF_CONSTEXPR ListSIPTrunkRequest::ListSIPTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPTrunkRequestDefaultTypeInternal() {}
  union {
    ListSIPTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPTrunkRequestDefaultTypeInternal _ListSIPTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR ListSIPTrunkResponse::ListSIPTrunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPTrunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPTrunkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPTrunkResponseDefaultTypeInternal() {}
  union {
    ListSIPTrunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPTrunkResponseDefaultTypeInternal _ListSIPTrunkResponse_default_instance_;
PROTOBUF_CONSTEXPR ListSIPInboundTrunkRequest::ListSIPInboundTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_ids_)*/{}
  , /*decltype(_impl_.numbers_)*/{}
  , /*decltype(_impl_.page_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPInboundTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPInboundTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPInboundTrunkRequestDefaultTypeInternal() {}
  union {
    ListSIPInboundTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPInboundTrunkRequestDefaultTypeInternal _ListSIPInboundTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR ListSIPInboundTrunkResponse::ListSIPInboundTrunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPInboundTrunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPInboundTrunkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPInboundTrunkResponseDefaultTypeInternal() {}
  union {
    ListSIPInboundTrunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPInboundTrunkResponseDefaultTypeInternal _ListSIPInboundTrunkResponse_default_instance_;
PROTOBUF_CONSTEXPR ListSIPOutboundTrunkRequest::ListSIPOutboundTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_ids_)*/{}
  , /*decltype(_impl_.numbers_)*/{}
  , /*decltype(_impl_.page_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPOutboundTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPOutboundTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPOutboundTrunkRequestDefaultTypeInternal() {}
  union {
    ListSIPOutboundTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPOutboundTrunkRequestDefaultTypeInternal _ListSIPOutboundTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR ListSIPOutboundTrunkResponse::ListSIPOutboundTrunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPOutboundTrunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPOutboundTrunkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPOutboundTrunkResponseDefaultTypeInternal() {}
  union {
    ListSIPOutboundTrunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPOutboundTrunkResponseDefaultTypeInternal _ListSIPOutboundTrunkResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteSIPTrunkRequest::DeleteSIPTrunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteSIPTrunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteSIPTrunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteSIPTrunkRequestDefaultTypeInternal() {}
  union {
    DeleteSIPTrunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteSIPTrunkRequestDefaultTypeInternal _DeleteSIPTrunkRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPDispatchRuleDirect::SIPDispatchRuleDirect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPDispatchRuleDirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPDispatchRuleDirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPDispatchRuleDirectDefaultTypeInternal() {}
  union {
    SIPDispatchRuleDirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPDispatchRuleDirectDefaultTypeInternal _SIPDispatchRuleDirect_default_instance_;
PROTOBUF_CONSTEXPR SIPDispatchRuleIndividual::SIPDispatchRuleIndividual(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPDispatchRuleIndividualDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPDispatchRuleIndividualDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPDispatchRuleIndividualDefaultTypeInternal() {}
  union {
    SIPDispatchRuleIndividual _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPDispatchRuleIndividualDefaultTypeInternal _SIPDispatchRuleIndividual_default_instance_;
PROTOBUF_CONSTEXPR SIPDispatchRuleCallee::SIPDispatchRuleCallee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.randomize_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPDispatchRuleCalleeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPDispatchRuleCalleeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPDispatchRuleCalleeDefaultTypeInternal() {}
  union {
    SIPDispatchRuleCallee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPDispatchRuleCalleeDefaultTypeInternal _SIPDispatchRuleCallee_default_instance_;
PROTOBUF_CONSTEXPR SIPDispatchRule::SIPDispatchRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rule_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SIPDispatchRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPDispatchRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPDispatchRuleDefaultTypeInternal() {}
  union {
    SIPDispatchRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPDispatchRuleDefaultTypeInternal _SIPDispatchRule_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUseDefaultTypeInternal _CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPDispatchRuleRequest::CreateSIPDispatchRuleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_ids_)*/{}
  , /*decltype(_impl_.inbound_numbers_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_preset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rule_)*/nullptr
  , /*decltype(_impl_.room_config_)*/nullptr
  , /*decltype(_impl_.hide_phone_number_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSIPDispatchRuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPDispatchRuleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPDispatchRuleRequestDefaultTypeInternal() {}
  union {
    CreateSIPDispatchRuleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPDispatchRuleRequestDefaultTypeInternal _CreateSIPDispatchRuleRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPDispatchRuleInfo_AttributesEntry_DoNotUse::SIPDispatchRuleInfo_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPDispatchRuleInfo_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPDispatchRuleInfo_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPDispatchRuleInfo_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPDispatchRuleInfo_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPDispatchRuleInfo_AttributesEntry_DoNotUseDefaultTypeInternal _SIPDispatchRuleInfo_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPDispatchRuleInfo::SIPDispatchRuleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trunk_ids_)*/{}
  , /*decltype(_impl_.inbound_numbers_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sip_dispatch_rule_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_preset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rule_)*/nullptr
  , /*decltype(_impl_.room_config_)*/nullptr
  , /*decltype(_impl_.hide_phone_number_)*/false
  , /*decltype(_impl_.krisp_enabled_)*/false
  , /*decltype(_impl_.media_encryption_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPDispatchRuleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPDispatchRuleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPDispatchRuleInfoDefaultTypeInternal() {}
  union {
    SIPDispatchRuleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPDispatchRuleInfoDefaultTypeInternal _SIPDispatchRuleInfo_default_instance_;
PROTOBUF_CONSTEXPR ListSIPDispatchRuleRequest::ListSIPDispatchRuleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dispatch_rule_ids_)*/{}
  , /*decltype(_impl_.trunk_ids_)*/{}
  , /*decltype(_impl_.page_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPDispatchRuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPDispatchRuleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPDispatchRuleRequestDefaultTypeInternal() {}
  union {
    ListSIPDispatchRuleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPDispatchRuleRequestDefaultTypeInternal _ListSIPDispatchRuleRequest_default_instance_;
PROTOBUF_CONSTEXPR ListSIPDispatchRuleResponse::ListSIPDispatchRuleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSIPDispatchRuleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSIPDispatchRuleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSIPDispatchRuleResponseDefaultTypeInternal() {}
  union {
    ListSIPDispatchRuleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSIPDispatchRuleResponseDefaultTypeInternal _ListSIPDispatchRuleResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteSIPDispatchRuleRequest::DeleteSIPDispatchRuleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sip_dispatch_rule_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteSIPDispatchRuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteSIPDispatchRuleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteSIPDispatchRuleRequestDefaultTypeInternal() {}
  union {
    DeleteSIPDispatchRuleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteSIPDispatchRuleRequestDefaultTypeInternal _DeleteSIPDispatchRuleRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPOutboundConfig_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundConfig_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundConfig_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundConfig_HeadersToAttributesEntry_DoNotUseDefaultTypeInternal _SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPOutboundConfig_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundConfig_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundConfig_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundConfig_AttributesToHeadersEntry_DoNotUseDefaultTypeInternal _SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPOutboundConfig::SIPOutboundConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headers_to_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.attributes_to_headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPOutboundConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPOutboundConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPOutboundConfigDefaultTypeInternal() {}
  union {
    SIPOutboundConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPOutboundConfigDefaultTypeInternal _SIPOutboundConfig_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal _CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPParticipantRequest_HeadersEntry_DoNotUse::CreateSIPParticipantRequest_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CreateSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateSIPParticipantRequest_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal _CreateSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CreateSIPParticipantRequest::CreateSIPParticipantRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sip_trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sip_call_to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtmf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sip_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ringing_timeout_)*/nullptr
  , /*decltype(_impl_.max_call_duration_)*/nullptr
  , /*decltype(_impl_.trunk_)*/nullptr
  , /*decltype(_impl_.play_ringtone_)*/false
  , /*decltype(_impl_.play_dialtone_)*/false
  , /*decltype(_impl_.hide_phone_number_)*/false
  , /*decltype(_impl_.krisp_enabled_)*/false
  , /*decltype(_impl_.include_headers_)*/0
  , /*decltype(_impl_.media_encryption_)*/0
  , /*decltype(_impl_.wait_until_answered_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSIPParticipantRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSIPParticipantRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSIPParticipantRequestDefaultTypeInternal() {}
  union {
    CreateSIPParticipantRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSIPParticipantRequestDefaultTypeInternal _CreateSIPParticipantRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPParticipantInfo::SIPParticipantInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sip_call_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPParticipantInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPParticipantInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPParticipantInfoDefaultTypeInternal() {}
  union {
    SIPParticipantInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPParticipantInfoDefaultTypeInternal _SIPParticipantInfo_default_instance_;
PROTOBUF_CONSTEXPR TransferSIPParticipantRequest_HeadersEntry_DoNotUse::TransferSIPParticipantRequest_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TransferSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TransferSIPParticipantRequest_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferSIPParticipantRequest_HeadersEntry_DoNotUseDefaultTypeInternal _TransferSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TransferSIPParticipantRequest::TransferSIPParticipantRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transfer_to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.play_dialtone_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferSIPParticipantRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferSIPParticipantRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferSIPParticipantRequestDefaultTypeInternal() {}
  union {
    TransferSIPParticipantRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferSIPParticipantRequestDefaultTypeInternal _TransferSIPParticipantRequest_default_instance_;
PROTOBUF_CONSTEXPR SIPCallInfo_ParticipantAttributesEntry_DoNotUse::SIPCallInfo_ParticipantAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SIPCallInfo_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPCallInfo_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPCallInfo_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SIPCallInfo_ParticipantAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPCallInfo_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal _SIPCallInfo_ParticipantAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SIPCallInfo::SIPCallInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_features_)*/{}
  , /*decltype(_impl_._enabled_features_cached_byte_size_)*/{0}
  , /*decltype(_impl_.participant_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.call_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trunk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dispatch_rule_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_codec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_encryption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_uri_)*/nullptr
  , /*decltype(_impl_.to_uri_)*/nullptr
  , /*decltype(_impl_.call_status_code_)*/nullptr
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.call_status_)*/0
  , /*decltype(_impl_.disconnect_reason_)*/0
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_.created_at_ns_)*/int64_t{0}
  , /*decltype(_impl_.started_at_ns_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_ns_)*/int64_t{0}
  , /*decltype(_impl_.call_direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPCallInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPCallInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPCallInfoDefaultTypeInternal() {}
  union {
    SIPCallInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPCallInfoDefaultTypeInternal _SIPCallInfo_default_instance_;
PROTOBUF_CONSTEXPR SIPUri::SIPUri(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.transport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SIPUriDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SIPUriDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SIPUriDefaultTypeInternal() {}
  union {
    SIPUri _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SIPUriDefaultTypeInternal _SIPUri_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5fsip_2eproto[47];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_livekit_5fsip_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5fsip_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fsip_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPStatus, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPStatus, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.inbound_addresses_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.outbound_address_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.outbound_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.inbound_numbers_regex_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.inbound_numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.inbound_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.inbound_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.outbound_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.outbound_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPTrunkRequest, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.sip_trunk_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.inbound_addresses_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.outbound_address_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.outbound_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.transport_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.inbound_numbers_regex_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.inbound_numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.inbound_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.inbound_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.outbound_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.outbound_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPTrunkInfo, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPInboundTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPInboundTrunkRequest, _impl_.trunk_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.sip_trunk_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.allowed_addresses_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.allowed_numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.auth_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.auth_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.headers_to_attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.attributes_to_headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.include_headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.ringing_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.max_call_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.krisp_enabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPInboundTrunkInfo, _impl_.media_encryption_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPOutboundTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPOutboundTrunkRequest, _impl_.trunk_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.sip_trunk_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.transport_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.auth_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.auth_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.headers_to_attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.attributes_to_headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.include_headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundTrunkInfo, _impl_.media_encryption_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPInboundTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPInboundTrunkRequest, _impl_.sip_trunk_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPInboundTrunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPInboundTrunkResponse, _impl_.trunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPOutboundTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPOutboundTrunkRequest, _impl_.sip_trunk_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPOutboundTrunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::GetSIPOutboundTrunkResponse, _impl_.trunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPTrunkRequest, _impl_.page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPTrunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPTrunkResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPInboundTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPInboundTrunkRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPInboundTrunkRequest, _impl_.trunk_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPInboundTrunkRequest, _impl_.numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPInboundTrunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPInboundTrunkResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPOutboundTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPOutboundTrunkRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPOutboundTrunkRequest, _impl_.trunk_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPOutboundTrunkRequest, _impl_.numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPOutboundTrunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPOutboundTrunkResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteSIPTrunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteSIPTrunkRequest, _impl_.sip_trunk_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleDirect, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleDirect, _impl_.pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleIndividual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleIndividual, _impl_.room_prefix_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleIndividual, _impl_.pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleCallee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleCallee, _impl_.room_prefix_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleCallee, _impl_.pin_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleCallee, _impl_.randomize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRule, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRule, _impl_.rule_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.rule_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.trunk_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.hide_phone_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.inbound_numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.room_preset_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPDispatchRuleRequest, _impl_.room_config_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.sip_dispatch_rule_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.rule_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.trunk_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.hide_phone_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.inbound_numbers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.room_preset_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.room_config_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.krisp_enabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPDispatchRuleInfo, _impl_.media_encryption_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPDispatchRuleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPDispatchRuleRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPDispatchRuleRequest, _impl_.dispatch_rule_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPDispatchRuleRequest, _impl_.trunk_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPDispatchRuleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListSIPDispatchRuleResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteSIPDispatchRuleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteSIPDispatchRuleRequest, _impl_.sip_dispatch_rule_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _impl_.transport_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _impl_.auth_username_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _impl_.auth_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _impl_.headers_to_attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPOutboundConfig, _impl_.attributes_to_headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.sip_trunk_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.trunk_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.sip_call_to_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.sip_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.participant_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.participant_metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.participant_attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.dtmf_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.play_ringtone_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.play_dialtone_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.hide_phone_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.include_headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.ringing_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.max_call_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.krisp_enabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.media_encryption_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateSIPParticipantRequest, _impl_.wait_until_answered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPParticipantInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPParticipantInfo, _impl_.participant_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPParticipantInfo, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPParticipantInfo, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPParticipantInfo, _impl_.sip_call_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest, _impl_.transfer_to_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest, _impl_.play_dialtone_),
  PROTOBUF_FIELD_OFFSET(::livekit::TransferSIPParticipantRequest, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.call_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.trunk_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.dispatch_rule_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.participant_attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.from_uri_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.to_uri_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.ended_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.enabled_features_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.call_direction_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.call_status_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.created_at_ns_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.started_at_ns_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.ended_at_ns_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.call_status_code_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.audio_codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPCallInfo, _impl_.media_encryption_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPUri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SIPUri, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPUri, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPUri, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPUri, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::livekit::SIPUri, _impl_.transport_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::SIPStatus)},
  { 8, -1, -1, sizeof(::livekit::CreateSIPTrunkRequest)},
  { 25, -1, -1, sizeof(::livekit::SIPTrunkInfo)},
  { 45, -1, -1, sizeof(::livekit::CreateSIPInboundTrunkRequest)},
  { 52, 60, -1, sizeof(::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse)},
  { 62, 70, -1, sizeof(::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse)},
  { 72, 80, -1, sizeof(::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse)},
  { 82, -1, -1, sizeof(::livekit::SIPInboundTrunkInfo)},
  { 104, -1, -1, sizeof(::livekit::CreateSIPOutboundTrunkRequest)},
  { 111, 119, -1, sizeof(::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse)},
  { 121, 129, -1, sizeof(::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse)},
  { 131, 139, -1, sizeof(::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse)},
  { 141, -1, -1, sizeof(::livekit::SIPOutboundTrunkInfo)},
  { 160, -1, -1, sizeof(::livekit::GetSIPInboundTrunkRequest)},
  { 167, -1, -1, sizeof(::livekit::GetSIPInboundTrunkResponse)},
  { 174, -1, -1, sizeof(::livekit::GetSIPOutboundTrunkRequest)},
  { 181, -1, -1, sizeof(::livekit::GetSIPOutboundTrunkResponse)},
  { 188, -1, -1, sizeof(::livekit::ListSIPTrunkRequest)},
  { 195, -1, -1, sizeof(::livekit::ListSIPTrunkResponse)},
  { 202, -1, -1, sizeof(::livekit::ListSIPInboundTrunkRequest)},
  { 211, -1, -1, sizeof(::livekit::ListSIPInboundTrunkResponse)},
  { 218, -1, -1, sizeof(::livekit::ListSIPOutboundTrunkRequest)},
  { 227, -1, -1, sizeof(::livekit::ListSIPOutboundTrunkResponse)},
  { 234, -1, -1, sizeof(::livekit::DeleteSIPTrunkRequest)},
  { 241, -1, -1, sizeof(::livekit::SIPDispatchRuleDirect)},
  { 249, -1, -1, sizeof(::livekit::SIPDispatchRuleIndividual)},
  { 257, -1, -1, sizeof(::livekit::SIPDispatchRuleCallee)},
  { 266, -1, -1, sizeof(::livekit::SIPDispatchRule)},
  { 276, 284, -1, sizeof(::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse)},
  { 286, -1, -1, sizeof(::livekit::CreateSIPDispatchRuleRequest)},
  { 301, 309, -1, sizeof(::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse)},
  { 311, -1, -1, sizeof(::livekit::SIPDispatchRuleInfo)},
  { 329, -1, -1, sizeof(::livekit::ListSIPDispatchRuleRequest)},
  { 338, -1, -1, sizeof(::livekit::ListSIPDispatchRuleResponse)},
  { 345, -1, -1, sizeof(::livekit::DeleteSIPDispatchRuleRequest)},
  { 352, 360, -1, sizeof(::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse)},
  { 362, 370, -1, sizeof(::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse)},
  { 372, -1, -1, sizeof(::livekit::SIPOutboundConfig)},
  { 384, 392, -1, sizeof(::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse)},
  { 394, 402, -1, sizeof(::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse)},
  { 404, -1, -1, sizeof(::livekit::CreateSIPParticipantRequest)},
  { 430, -1, -1, sizeof(::livekit::SIPParticipantInfo)},
  { 440, 448, -1, sizeof(::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse)},
  { 450, -1, -1, sizeof(::livekit::TransferSIPParticipantRequest)},
  { 461, 469, -1, sizeof(::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse)},
  { 471, -1, -1, sizeof(::livekit::SIPCallInfo)},
  { 501, -1, -1, sizeof(::livekit::SIPUri)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_SIPStatus_default_instance_._instance,
  &::livekit::_CreateSIPTrunkRequest_default_instance_._instance,
  &::livekit::_SIPTrunkInfo_default_instance_._instance,
  &::livekit::_CreateSIPInboundTrunkRequest_default_instance_._instance,
  &::livekit::_SIPInboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPInboundTrunkInfo_default_instance_._instance,
  &::livekit::_CreateSIPOutboundTrunkRequest_default_instance_._instance,
  &::livekit::_SIPOutboundTrunkInfo_HeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPOutboundTrunkInfo_default_instance_._instance,
  &::livekit::_GetSIPInboundTrunkRequest_default_instance_._instance,
  &::livekit::_GetSIPInboundTrunkResponse_default_instance_._instance,
  &::livekit::_GetSIPOutboundTrunkRequest_default_instance_._instance,
  &::livekit::_GetSIPOutboundTrunkResponse_default_instance_._instance,
  &::livekit::_ListSIPTrunkRequest_default_instance_._instance,
  &::livekit::_ListSIPTrunkResponse_default_instance_._instance,
  &::livekit::_ListSIPInboundTrunkRequest_default_instance_._instance,
  &::livekit::_ListSIPInboundTrunkResponse_default_instance_._instance,
  &::livekit::_ListSIPOutboundTrunkRequest_default_instance_._instance,
  &::livekit::_ListSIPOutboundTrunkResponse_default_instance_._instance,
  &::livekit::_DeleteSIPTrunkRequest_default_instance_._instance,
  &::livekit::_SIPDispatchRuleDirect_default_instance_._instance,
  &::livekit::_SIPDispatchRuleIndividual_default_instance_._instance,
  &::livekit::_SIPDispatchRuleCallee_default_instance_._instance,
  &::livekit::_SIPDispatchRule_default_instance_._instance,
  &::livekit::_CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_CreateSIPDispatchRuleRequest_default_instance_._instance,
  &::livekit::_SIPDispatchRuleInfo_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPDispatchRuleInfo_default_instance_._instance,
  &::livekit::_ListSIPDispatchRuleRequest_default_instance_._instance,
  &::livekit::_ListSIPDispatchRuleResponse_default_instance_._instance,
  &::livekit::_DeleteSIPDispatchRuleRequest_default_instance_._instance,
  &::livekit::_SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPOutboundConfig_default_instance_._instance,
  &::livekit::_CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_CreateSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_CreateSIPParticipantRequest_default_instance_._instance,
  &::livekit::_SIPParticipantInfo_default_instance_._instance,
  &::livekit::_TransferSIPParticipantRequest_HeadersEntry_DoNotUse_default_instance_._instance,
  &::livekit::_TransferSIPParticipantRequest_default_instance_._instance,
  &::livekit::_SIPCallInfo_ParticipantAttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_SIPCallInfo_default_instance_._instance,
  &::livekit::_SIPUri_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5fsip_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021livekit_sip.proto\022\007livekit\032\036google/pro"
  "tobuf/duration.proto\032\033google/protobuf/em"
  "pty.proto\032\024livekit_models.proto\032\022livekit"
  "_room.proto\"A\n\tSIPStatus\022$\n\004code\030\001 \001(\0162\026"
  ".livekit.SIPStatusCode\022\016\n\006status\030\002 \001(\t\"\257"
  "\002\n\025CreateSIPTrunkRequest\022\031\n\021inbound_addr"
  "esses\030\001 \003(\t\022\030\n\020outbound_address\030\002 \001(\t\022\027\n"
  "\017outbound_number\030\003 \001(\t\022!\n\025inbound_number"
  "s_regex\030\004 \003(\tB\002\030\001\022\027\n\017inbound_numbers\030\t \003"
  "(\t\022\030\n\020inbound_username\030\005 \001(\t\022\030\n\020inbound_"
  "password\030\006 \001(\t\022\031\n\021outbound_username\030\007 \001("
  "\t\022\031\n\021outbound_password\030\010 \001(\t\022\014\n\004name\030\n \001"
  "(\t\022\020\n\010metadata\030\013 \001(\t:\002\030\001\"\333\003\n\014SIPTrunkInf"
  "o\022\024\n\014sip_trunk_id\030\001 \001(\t\022-\n\004kind\030\016 \001(\0162\037."
  "livekit.SIPTrunkInfo.TrunkKind\022\031\n\021inboun"
  "d_addresses\030\002 \003(\t\022\030\n\020outbound_address\030\003 "
  "\001(\t\022\027\n\017outbound_number\030\004 \001(\t\022(\n\ttranspor"
  "t\030\r \001(\0162\025.livekit.SIPTransport\022!\n\025inboun"
  "d_numbers_regex\030\005 \003(\tB\002\030\001\022\027\n\017inbound_num"
  "bers\030\n \003(\t\022\030\n\020inbound_username\030\006 \001(\t\022\030\n\020"
  "inbound_password\030\007 \001(\t\022\031\n\021outbound_usern"
  "ame\030\010 \001(\t\022\031\n\021outbound_password\030\t \001(\t\022\014\n\004"
  "name\030\013 \001(\t\022\020\n\010metadata\030\014 \001(\t\"D\n\tTrunkKin"
  "d\022\020\n\014TRUNK_LEGACY\020\000\022\021\n\rTRUNK_INBOUND\020\001\022\022"
  "\n\016TRUNK_OUTBOUND\020\002:\002\030\001\"K\n\034CreateSIPInbou"
  "ndTrunkRequest\022+\n\005trunk\030\001 \001(\0132\034.livekit."
  "SIPInboundTrunkInfo\"\272\006\n\023SIPInboundTrunkI"
  "nfo\022\024\n\014sip_trunk_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
  "\020\n\010metadata\030\003 \001(\t\022\017\n\007numbers\030\004 \003(\t\022\031\n\021al"
  "lowed_addresses\030\005 \003(\t\022\027\n\017allowed_numbers"
  "\030\006 \003(\t\022\025\n\rauth_username\030\007 \001(\t\022\025\n\rauth_pa"
  "ssword\030\010 \001(\t\022:\n\007headers\030\t \003(\0132).livekit."
  "SIPInboundTrunkInfo.HeadersEntry\022T\n\025head"
  "ers_to_attributes\030\n \003(\01325.livekit.SIPInb"
  "oundTrunkInfo.HeadersToAttributesEntry\022T"
  "\n\025attributes_to_headers\030\016 \003(\01325.livekit."
  "SIPInboundTrunkInfo.AttributesToHeadersE"
  "ntry\0222\n\017include_headers\030\017 \001(\0162\031.livekit."
  "SIPHeaderOptions\0222\n\017ringing_timeout\030\013 \001("
  "\0132\031.google.protobuf.Duration\0224\n\021max_call"
  "_duration\030\014 \001(\0132\031.google.protobuf.Durati"
  "on\022\025\n\rkrisp_enabled\030\r \001(\010\0225\n\020media_encry"
  "ption\030\020 \001(\0162\033.livekit.SIPMediaEncryption"
  "\032.\n\014HeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\032:\n\030HeadersToAttributesEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032:\n\030Attribut"
  "esToHeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"M\n\035CreateSIPOutboundTrunkReques"
  "t\022,\n\005trunk\030\001 \001(\0132\035.livekit.SIPOutboundTr"
  "unkInfo\"\304\005\n\024SIPOutboundTrunkInfo\022\024\n\014sip_"
  "trunk_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\020\n\010metadata"
  "\030\003 \001(\t\022\017\n\007address\030\004 \001(\t\022(\n\ttransport\030\005 \001"
  "(\0162\025.livekit.SIPTransport\022\017\n\007numbers\030\006 \003"
  "(\t\022\025\n\rauth_username\030\007 \001(\t\022\025\n\rauth_passwo"
  "rd\030\010 \001(\t\022;\n\007headers\030\t \003(\0132*.livekit.SIPO"
  "utboundTrunkInfo.HeadersEntry\022U\n\025headers"
  "_to_attributes\030\n \003(\01326.livekit.SIPOutbou"
  "ndTrunkInfo.HeadersToAttributesEntry\022U\n\025"
  "attributes_to_headers\030\013 \003(\01326.livekit.SI"
  "POutboundTrunkInfo.AttributesToHeadersEn"
  "try\0222\n\017include_headers\030\014 \001(\0162\031.livekit.S"
  "IPHeaderOptions\0225\n\020media_encryption\030\r \001("
  "\0162\033.livekit.SIPMediaEncryption\032.\n\014Header"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032:"
  "\n\030HeadersToAttributesEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\032:\n\030AttributesToHeader"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"1"
  "\n\031GetSIPInboundTrunkRequest\022\024\n\014sip_trunk"
  "_id\030\001 \001(\t\"I\n\032GetSIPInboundTrunkResponse\022"
  "+\n\005trunk\030\001 \001(\0132\034.livekit.SIPInboundTrunk"
  "Info\"2\n\032GetSIPOutboundTrunkRequest\022\024\n\014si"
  "p_trunk_id\030\001 \001(\t\"K\n\033GetSIPOutboundTrunkR"
  "esponse\022,\n\005trunk\030\001 \001(\0132\035.livekit.SIPOutb"
  "oundTrunkInfo\"<\n\023ListSIPTrunkRequest\022!\n\004"
  "page\030\001 \001(\0132\023.livekit.Pagination:\002\030\001\"@\n\024L"
  "istSIPTrunkResponse\022$\n\005items\030\001 \003(\0132\025.liv"
  "ekit.SIPTrunkInfo:\002\030\001\"c\n\032ListSIPInboundT"
  "runkRequest\022!\n\004page\030\003 \001(\0132\023.livekit.Pagi"
  "nation\022\021\n\ttrunk_ids\030\001 \003(\t\022\017\n\007numbers\030\002 \003"
  "(\t\"J\n\033ListSIPInboundTrunkResponse\022+\n\005ite"
  "ms\030\001 \003(\0132\034.livekit.SIPInboundTrunkInfo\"d"
  "\n\033ListSIPOutboundTrunkRequest\022!\n\004page\030\003 "
  "\001(\0132\023.livekit.Pagination\022\021\n\ttrunk_ids\030\001 "
  "\003(\t\022\017\n\007numbers\030\002 \003(\t\"L\n\034ListSIPOutboundT"
  "runkResponse\022,\n\005items\030\001 \003(\0132\035.livekit.SI"
  "POutboundTrunkInfo\"-\n\025DeleteSIPTrunkRequ"
  "est\022\024\n\014sip_trunk_id\030\001 \001(\t\"7\n\025SIPDispatch"
  "RuleDirect\022\021\n\troom_name\030\001 \001(\t\022\013\n\003pin\030\002 \001"
  "(\t\"=\n\031SIPDispatchRuleIndividual\022\023\n\013room_"
  "prefix\030\001 \001(\t\022\013\n\003pin\030\002 \001(\t\"L\n\025SIPDispatch"
  "RuleCallee\022\023\n\013room_prefix\030\001 \001(\t\022\013\n\003pin\030\002"
  " \001(\t\022\021\n\trandomize\030\003 \001(\010\"\341\001\n\017SIPDispatchR"
  "ule\022>\n\024dispatch_rule_direct\030\001 \001(\0132\036.live"
  "kit.SIPDispatchRuleDirectH\000\022F\n\030dispatch_"
  "rule_individual\030\002 \001(\0132\".livekit.SIPDispa"
  "tchRuleIndividualH\000\022>\n\024dispatch_rule_cal"
  "lee\030\003 \001(\0132\036.livekit.SIPDispatchRuleCalle"
  "eH\000B\006\n\004rule\"\361\002\n\034CreateSIPDispatchRuleReq"
  "uest\022&\n\004rule\030\001 \001(\0132\030.livekit.SIPDispatch"
  "Rule\022\021\n\ttrunk_ids\030\002 \003(\t\022\031\n\021hide_phone_nu"
  "mber\030\003 \001(\010\022\027\n\017inbound_numbers\030\006 \003(\t\022\014\n\004n"
  "ame\030\004 \001(\t\022\020\n\010metadata\030\005 \001(\t\022I\n\nattribute"
  "s\030\007 \003(\01325.livekit.CreateSIPDispatchRuleR"
  "equest.AttributesEntry\022\023\n\013room_preset\030\010 "
  "\001(\t\022/\n\013room_config\030\t \001(\0132\032.livekit.RoomC"
  "onfiguration\0321\n\017AttributesEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\313\003\n\023SIPDispatchR"
  "uleInfo\022\034\n\024sip_dispatch_rule_id\030\001 \001(\t\022&\n"
  "\004rule\030\002 \001(\0132\030.livekit.SIPDispatchRule\022\021\n"
  "\ttrunk_ids\030\003 \003(\t\022\031\n\021hide_phone_number\030\004 "
  "\001(\010\022\027\n\017inbound_numbers\030\007 \003(\t\022\014\n\004name\030\005 \001"
  "(\t\022\020\n\010metadata\030\006 \001(\t\022@\n\nattributes\030\010 \003(\013"
  "2,.livekit.SIPDispatchRuleInfo.Attribute"
  "sEntry\022\023\n\013room_preset\030\t \001(\t\022/\n\013room_conf"
  "ig\030\n \001(\0132\032.livekit.RoomConfiguration\022\025\n\r"
  "krisp_enabled\030\013 \001(\010\0225\n\020media_encryption\030"
  "\014 \001(\0162\033.livekit.SIPMediaEncryption\0321\n\017At"
  "tributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\"m\n\032ListSIPDispatchRuleRequest\022!\n\004p"
  "age\030\003 \001(\0132\023.livekit.Pagination\022\031\n\021dispat"
  "ch_rule_ids\030\001 \003(\t\022\021\n\ttrunk_ids\030\002 \003(\t\"J\n\033"
  "ListSIPDispatchRuleResponse\022+\n\005items\030\001 \003"
  "(\0132\034.livekit.SIPDispatchRuleInfo\"<\n\034Dele"
  "teSIPDispatchRuleRequest\022\034\n\024sip_dispatch"
  "_rule_id\030\001 \001(\t\"\235\003\n\021SIPOutboundConfig\022\020\n\010"
  "hostname\030\001 \001(\t\022(\n\ttransport\030\002 \001(\0162\025.live"
  "kit.SIPTransport\022\025\n\rauth_username\030\003 \001(\t\022"
  "\025\n\rauth_password\030\004 \001(\t\022R\n\025headers_to_att"
  "ributes\030\005 \003(\01323.livekit.SIPOutboundConfi"
  "g.HeadersToAttributesEntry\022R\n\025attributes"
  "_to_headers\030\006 \003(\01323.livekit.SIPOutboundC"
  "onfig.AttributesToHeadersEntry\032:\n\030Header"
  "sToAttributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\032:\n\030AttributesToHeadersEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\347\006\n\033Creat"
  "eSIPParticipantRequest\022\024\n\014sip_trunk_id\030\001"
  " \001(\t\022)\n\005trunk\030\024 \001(\0132\032.livekit.SIPOutboun"
  "dConfig\022\023\n\013sip_call_to\030\002 \001(\t\022\022\n\nsip_numb"
  "er\030\017 \001(\t\022\021\n\troom_name\030\003 \001(\t\022\034\n\024participa"
  "nt_identity\030\004 \001(\t\022\030\n\020participant_name\030\007 "
  "\001(\t\022\034\n\024participant_metadata\030\010 \001(\t\022_\n\026par"
  "ticipant_attributes\030\t \003(\0132\?.livekit.Crea"
  "teSIPParticipantRequest.ParticipantAttri"
  "butesEntry\022\014\n\004dtmf\030\005 \001(\t\022\031\n\rplay_rington"
  "e\030\006 \001(\010B\002\030\001\022\025\n\rplay_dialtone\030\r \001(\010\022\031\n\021hi"
  "de_phone_number\030\n \001(\010\022B\n\007headers\030\020 \003(\01321"
  ".livekit.CreateSIPParticipantRequest.Hea"
  "dersEntry\0222\n\017include_headers\030\021 \001(\0162\031.liv"
  "ekit.SIPHeaderOptions\0222\n\017ringing_timeout"
  "\030\013 \001(\0132\031.google.protobuf.Duration\0224\n\021max"
  "_call_duration\030\014 \001(\0132\031.google.protobuf.D"
  "uration\022\025\n\rkrisp_enabled\030\016 \001(\010\0225\n\020media_"
  "encryption\030\022 \001(\0162\033.livekit.SIPMediaEncry"
  "ption\022\033\n\023wait_until_answered\030\023 \001(\010\032<\n\032Pa"
  "rticipantAttributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\032.\n\014HeadersEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"r\n\022SIPParticipa"
  "ntInfo\022\026\n\016participant_id\030\001 \001(\t\022\034\n\024partic"
  "ipant_identity\030\002 \001(\t\022\021\n\troom_name\030\003 \001(\t\022"
  "\023\n\013sip_call_id\030\004 \001(\t\"\362\001\n\035TransferSIPPart"
  "icipantRequest\022\034\n\024participant_identity\030\001"
  " \001(\t\022\021\n\troom_name\030\002 \001(\t\022\023\n\013transfer_to\030\003"
  " \001(\t\022\025\n\rplay_dialtone\030\004 \001(\010\022D\n\007headers\030\005"
  " \003(\01323.livekit.TransferSIPParticipantReq"
  "uest.HeadersEntry\032.\n\014HeadersEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\251\006\n\013SIPCallInf"
  "o\022\017\n\007call_id\030\001 \001(\t\022\020\n\010trunk_id\030\002 \001(\t\022\030\n\020"
  "dispatch_rule_id\030\020 \001(\t\022\016\n\006region\030\021 \001(\t\022\021"
  "\n\troom_name\030\003 \001(\t\022\017\n\007room_id\030\004 \001(\t\022\034\n\024pa"
  "rticipant_identity\030\005 \001(\t\022O\n\026participant_"
  "attributes\030\022 \003(\0132/.livekit.SIPCallInfo.P"
  "articipantAttributesEntry\022!\n\010from_uri\030\006 "
  "\001(\0132\017.livekit.SIPUri\022\037\n\006to_uri\030\007 \001(\0132\017.l"
  "ivekit.SIPUri\022\026\n\ncreated_at\030\t \001(\003B\002\030\001\022\026\n"
  "\nstarted_at\030\n \001(\003B\002\030\001\022\024\n\010ended_at\030\013 \001(\003B"
  "\002\030\001\022-\n\020enabled_features\030\016 \003(\0162\023.livekit."
  "SIPFeature\0221\n\016call_direction\030\017 \001(\0162\031.liv"
  "ekit.SIPCallDirection\022+\n\013call_status\030\010 \001"
  "(\0162\026.livekit.SIPCallStatus\022\025\n\rcreated_at"
  "_ns\030\026 \001(\003\022\025\n\rstarted_at_ns\030\027 \001(\003\022\023\n\013ende"
  "d_at_ns\030\030 \001(\003\0224\n\021disconnect_reason\030\014 \001(\016"
  "2\031.livekit.DisconnectReason\022\r\n\005error\030\r \001"
  "(\t\022,\n\020call_status_code\030\023 \001(\0132\022.livekit.S"
  "IPStatus\022\023\n\013audio_codec\030\024 \001(\t\022\030\n\020media_e"
  "ncryption\030\025 \001(\t\032<\n\032ParticipantAttributes"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"h\n"
  "\006SIPUri\022\014\n\004user\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\n\n\002i"
  "p\030\003 \001(\t\022\014\n\004port\030\004 \001(\r\022(\n\ttransport\030\005 \001(\016"
  "2\025.livekit.SIPTransport*\357\014\n\rSIPStatusCod"
  "e\022\026\n\022SIP_STATUS_UNKNOWN\020\000\022\025\n\021SIP_STATUS_"
  "TRYING\020d\022\027\n\022SIP_STATUS_RINGING\020\264\001\022!\n\034SIP"
  "_STATUS_CALL_IS_FORWARDED\020\265\001\022\026\n\021SIP_STAT"
  "US_QUEUED\020\266\001\022 \n\033SIP_STATUS_SESSION_PROGR"
  "ESS\020\267\001\022\022\n\rSIP_STATUS_OK\020\310\001\022\030\n\023SIP_STATUS"
  "_ACCEPTED\020\312\001\022!\n\034SIP_STATUS_MOVED_PERMANE"
  "NTLY\020\255\002\022!\n\034SIP_STATUS_MOVED_TEMPORARILY\020"
  "\256\002\022\031\n\024SIP_STATUS_USE_PROXY\020\261\002\022\033\n\026SIP_STA"
  "TUS_BAD_REQUEST\020\220\003\022\034\n\027SIP_STATUS_UNAUTHO"
  "RIZED\020\221\003\022 \n\033SIP_STATUS_PAYMENT_REQUIRED\020"
  "\222\003\022\031\n\024SIP_STATUS_FORBIDDEN\020\223\003\022\030\n\023SIP_STA"
  "TUS_NOTFOUND\020\224\003\022\"\n\035SIP_STATUS_METHOD_NOT"
  "_ALLOWED\020\225\003\022\036\n\031SIP_STATUS_NOT_ACCEPTABLE"
  "\020\226\003\022#\n\036SIP_STATUS_PROXY_AUTH_REQUIRED\020\227\003"
  "\022\037\n\032SIP_STATUS_REQUEST_TIMEOUT\020\230\003\022\030\n\023SIP"
  "_STATUS_CONFLICT\020\231\003\022\024\n\017SIP_STATUS_GONE\020\232"
  "\003\022(\n#SIP_STATUS_REQUEST_ENTITY_TOO_LARGE"
  "\020\235\003\022$\n\037SIP_STATUS_REQUEST_URI_TOO_LONG\020\236"
  "\003\022&\n!SIP_STATUS_UNSUPPORTED_MEDIA_TYPE\020\237"
  "\003\022/\n*SIP_STATUS_REQUESTED_RANGE_NOT_SATI"
  "SFIABLE\020\240\003\022\035\n\030SIP_STATUS_BAD_EXTENSION\020\244"
  "\003\022\"\n\035SIP_STATUS_EXTENSION_REQUIRED\020\245\003\022\"\n"
  "\035SIP_STATUS_INTERVAL_TOO_BRIEF\020\247\003\022\'\n\"SIP"
  "_STATUS_TEMPORARILY_UNAVAILABLE\020\340\003\0220\n+SI"
  "P_STATUS_CALL_TRANSACTION_DOES_NOT_EXIST"
  "S\020\341\003\022\035\n\030SIP_STATUS_LOOP_DETECTED\020\342\003\022\035\n\030S"
  "IP_STATUS_TOO_MANY_HOPS\020\343\003\022\"\n\035SIP_STATUS"
  "_ADDRESS_INCOMPLETE\020\344\003\022\031\n\024SIP_STATUS_AMB"
  "IGUOUS\020\345\003\022\031\n\024SIP_STATUS_BUSY_HERE\020\346\003\022\"\n\035"
  "SIP_STATUS_REQUEST_TERMINATED\020\347\003\022#\n\036SIP_"
  "STATUS_NOT_ACCEPTABLE_HERE\020\350\003\022%\n SIP_STA"
  "TUS_INTERNAL_SERVER_ERROR\020\364\003\022\037\n\032SIP_STAT"
  "US_NOT_IMPLEMENTED\020\365\003\022\033\n\026SIP_STATUS_BAD_"
  "GATEWAY\020\366\003\022#\n\036SIP_STATUS_SERVICE_UNAVAIL"
  "ABLE\020\367\003\022\037\n\032SIP_STATUS_GATEWAY_TIMEOUT\020\370\003"
  "\022%\n SIP_STATUS_VERSION_NOT_SUPPORTED\020\371\003\022"
  "!\n\034SIP_STATUS_MESSAGE_TOO_LARGE\020\201\004\022&\n!SI"
  "P_STATUS_GLOBAL_BUSY_EVERYWHERE\020\330\004\022\036\n\031SI"
  "P_STATUS_GLOBAL_DECLINE\020\333\004\022.\n)SIP_STATUS"
  "_GLOBAL_DOES_NOT_EXIST_ANYWHERE\020\334\004\022%\n SI"
  "P_STATUS_GLOBAL_NOT_ACCEPTABLE\020\336\004*k\n\014SIP"
  "Transport\022\026\n\022SIP_TRANSPORT_AUTO\020\000\022\025\n\021SIP"
  "_TRANSPORT_UDP\020\001\022\025\n\021SIP_TRANSPORT_TCP\020\002\022"
  "\025\n\021SIP_TRANSPORT_TLS\020\003*N\n\020SIPHeaderOptio"
  "ns\022\022\n\016SIP_NO_HEADERS\020\000\022\021\n\rSIP_X_HEADERS\020"
  "\001\022\023\n\017SIP_ALL_HEADERS\020\002*o\n\022SIPMediaEncryp"
  "tion\022\035\n\031SIP_MEDIA_ENCRYPT_DISABLE\020\000\022\033\n\027S"
  "IP_MEDIA_ENCRYPT_ALLOW\020\001\022\035\n\031SIP_MEDIA_EN"
  "CRYPT_REQUIRE\020\002*w\n\rSIPCallStatus\022\025\n\021SCS_"
  "CALL_INCOMING\020\000\022\032\n\026SCS_PARTICIPANT_JOINE"
  "D\020\001\022\016\n\nSCS_ACTIVE\020\002\022\024\n\020SCS_DISCONNECTED\020"
  "\003\022\r\n\tSCS_ERROR\020\004*)\n\nSIPFeature\022\010\n\004NONE\020\000"
  "\022\021\n\rKRISP_ENABLED\020\001*F\n\020SIPCallDirection\022"
  "\017\n\013SCD_UNKNOWN\020\000\022\017\n\013SCD_INBOUND\020\001\022\020\n\014SCD"
  "_OUTBOUND\020\0022\272\t\n\003SIP\022P\n\014ListSIPTrunk\022\034.li"
  "vekit.ListSIPTrunkRequest\032\035.livekit.List"
  "SIPTrunkResponse\"\003\210\002\001\022\\\n\025CreateSIPInboun"
  "dTrunk\022%.livekit.CreateSIPInboundTrunkRe"
  "quest\032\034.livekit.SIPInboundTrunkInfo\022_\n\026C"
  "reateSIPOutboundTrunk\022&.livekit.CreateSI"
  "POutboundTrunkRequest\032\035.livekit.SIPOutbo"
  "undTrunkInfo\022]\n\022GetSIPInboundTrunk\022\".liv"
  "ekit.GetSIPInboundTrunkRequest\032#.livekit"
  ".GetSIPInboundTrunkResponse\022`\n\023GetSIPOut"
  "boundTrunk\022#.livekit.GetSIPOutboundTrunk"
  "Request\032$.livekit.GetSIPOutboundTrunkRes"
  "ponse\022`\n\023ListSIPInboundTrunk\022#.livekit.L"
  "istSIPInboundTrunkRequest\032$.livekit.List"
  "SIPInboundTrunkResponse\022c\n\024ListSIPOutbou"
  "ndTrunk\022$.livekit.ListSIPOutboundTrunkRe"
  "quest\032%.livekit.ListSIPOutboundTrunkResp"
  "onse\022G\n\016DeleteSIPTrunk\022\036.livekit.DeleteS"
  "IPTrunkRequest\032\025.livekit.SIPTrunkInfo\022\\\n"
  "\025CreateSIPDispatchRule\022%.livekit.CreateS"
  "IPDispatchRuleRequest\032\034.livekit.SIPDispa"
  "tchRuleInfo\022`\n\023ListSIPDispatchRule\022#.liv"
  "ekit.ListSIPDispatchRuleRequest\032$.liveki"
  "t.ListSIPDispatchRuleResponse\022\\\n\025DeleteS"
  "IPDispatchRule\022%.livekit.DeleteSIPDispat"
  "chRuleRequest\032\034.livekit.SIPDispatchRuleI"
  "nfo\022Y\n\024CreateSIPParticipant\022$.livekit.Cr"
  "eateSIPParticipantRequest\032\033.livekit.SIPP"
  "articipantInfo\022X\n\026TransferSIPParticipant"
  "\022&.livekit.TransferSIPParticipantRequest"
  "\032\026.google.protobuf.EmptyBFZ#github.com/l"
  "ivekit/protocol/livekit\252\002\rLiveKit.Proto\352"
  "\002\016LiveKit::Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5fsip_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_livekit_5fmodels_2eproto,
  &::descriptor_table_livekit_5froom_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5fsip_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5fsip_2eproto = {
    false, false, 11024, descriptor_table_protodef_livekit_5fsip_2eproto,
    "livekit_sip.proto",
    &descriptor_table_livekit_5fsip_2eproto_once, descriptor_table_livekit_5fsip_2eproto_deps, 4, 47,
    schemas, file_default_instances, TableStruct_livekit_5fsip_2eproto::offsets,
    file_level_metadata_livekit_5fsip_2eproto, file_level_enum_descriptors_livekit_5fsip_2eproto,
    file_level_service_descriptors_livekit_5fsip_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5fsip_2eproto_getter() {
  return &descriptor_table_livekit_5fsip_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5fsip_2eproto(&descriptor_table_livekit_5fsip_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPTrunkInfo_TrunkKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[0];
}
bool SIPTrunkInfo_TrunkKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo::TRUNK_LEGACY;
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo::TRUNK_INBOUND;
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo::TRUNK_OUTBOUND;
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo::TrunkKind_MIN;
constexpr SIPTrunkInfo_TrunkKind SIPTrunkInfo::TrunkKind_MAX;
constexpr int SIPTrunkInfo::TrunkKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[1];
}
bool SIPStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 180:
    case 181:
    case 182:
    case 183:
    case 200:
    case 202:
    case 301:
    case 302:
    case 305:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 413:
    case 414:
    case 415:
    case 416:
    case 420:
    case 421:
    case 423:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 513:
    case 600:
    case 603:
    case 604:
    case 606:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPTransport_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[2];
}
bool SIPTransport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPHeaderOptions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[3];
}
bool SIPHeaderOptions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPMediaEncryption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[4];
}
bool SIPMediaEncryption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPCallStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[5];
}
bool SIPCallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPFeature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[6];
}
bool SIPFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPCallDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fsip_2eproto);
  return file_level_enum_descriptors_livekit_5fsip_2eproto[7];
}
bool SIPCallDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SIPStatus::_Internal {
 public:
};

SIPStatus::SIPStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPStatus)
}
SIPStatus::SIPStatus(const SIPStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:livekit.SIPStatus)
}

inline void SIPStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPStatus::~SIPStatus() {
  // @@protoc_insertion_point(destructor:livekit.SIPStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void SIPStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPStatusCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::livekit::SIPStatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPStatus.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPStatusCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPStatus.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPStatus)
  return target;
}

size_t SIPStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .livekit.SIPStatusCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPStatus::GetClassData() const { return &_class_data_; }


void SIPStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPStatus*>(&to_msg);
  auto& from = static_cast<const SIPStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPStatus::CopyFrom(const SIPStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPStatus::IsInitialized() const {
  return true;
}

void SIPStatus::InternalSwap(SIPStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[0]);
}

// ===================================================================

class CreateSIPTrunkRequest::_Internal {
 public:
};

CreateSIPTrunkRequest::CreateSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.CreateSIPTrunkRequest)
}
CreateSIPTrunkRequest::CreateSIPTrunkRequest(const CreateSIPTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSIPTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inbound_addresses_){from._impl_.inbound_addresses_}
    , decltype(_impl_.inbound_numbers_regex_){from._impl_.inbound_numbers_regex_}
    , decltype(_impl_.inbound_numbers_){from._impl_.inbound_numbers_}
    , decltype(_impl_.outbound_address_){}
    , decltype(_impl_.outbound_number_){}
    , decltype(_impl_.inbound_username_){}
    , decltype(_impl_.inbound_password_){}
    , decltype(_impl_.outbound_username_){}
    , decltype(_impl_.outbound_password_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.outbound_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_address().empty()) {
    _this->_impl_.outbound_address_.Set(from._internal_outbound_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_number().empty()) {
    _this->_impl_.outbound_number_.Set(from._internal_outbound_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inbound_username().empty()) {
    _this->_impl_.inbound_username_.Set(from._internal_inbound_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inbound_password().empty()) {
    _this->_impl_.inbound_password_.Set(from._internal_inbound_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_username().empty()) {
    _this->_impl_.outbound_username_.Set(from._internal_outbound_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_password().empty()) {
    _this->_impl_.outbound_password_.Set(from._internal_outbound_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.CreateSIPTrunkRequest)
}

inline void CreateSIPTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inbound_addresses_){arena}
    , decltype(_impl_.inbound_numbers_regex_){arena}
    , decltype(_impl_.inbound_numbers_){arena}
    , decltype(_impl_.outbound_address_){}
    , decltype(_impl_.outbound_number_){}
    , decltype(_impl_.inbound_username_){}
    , decltype(_impl_.inbound_password_){}
    , decltype(_impl_.outbound_username_){}
    , decltype(_impl_.outbound_password_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.outbound_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSIPTrunkRequest::~CreateSIPTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateSIPTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSIPTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inbound_addresses_.~RepeatedPtrField();
  _impl_.inbound_numbers_regex_.~RepeatedPtrField();
  _impl_.inbound_numbers_.~RepeatedPtrField();
  _impl_.outbound_address_.Destroy();
  _impl_.outbound_number_.Destroy();
  _impl_.inbound_username_.Destroy();
  _impl_.inbound_password_.Destroy();
  _impl_.outbound_username_.Destroy();
  _impl_.outbound_password_.Destroy();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
}

void CreateSIPTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSIPTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateSIPTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inbound_addresses_.Clear();
  _impl_.inbound_numbers_regex_.Clear();
  _impl_.inbound_numbers_.Clear();
  _impl_.outbound_address_.ClearToEmpty();
  _impl_.outbound_number_.ClearToEmpty();
  _impl_.inbound_username_.ClearToEmpty();
  _impl_.inbound_password_.ClearToEmpty();
  _impl_.outbound_username_.ClearToEmpty();
  _impl_.outbound_password_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSIPTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string inbound_addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.inbound_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string outbound_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_outbound_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.outbound_address"));
        } else
          goto handle_unusual;
        continue;
      // string outbound_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_outbound_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.outbound_number"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_numbers_regex = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_numbers_regex();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.inbound_numbers_regex"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string inbound_username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_inbound_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.inbound_username"));
        } else
          goto handle_unusual;
        continue;
      // string inbound_password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_inbound_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.inbound_password"));
        } else
          goto handle_unusual;
        continue;
      // string outbound_username = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_outbound_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.outbound_username"));
        } else
          goto handle_unusual;
        continue;
      // string outbound_password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_outbound_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.outbound_password"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_numbers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.inbound_numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPTrunkRequest.metadata"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSIPTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateSIPTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string inbound_addresses = 1;
  for (int i = 0, n = this->_internal_inbound_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.inbound_addresses");
    target = stream->WriteString(1, s, target);
  }

  // string outbound_address = 2;
  if (!this->_internal_outbound_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_address().data(), static_cast<int>(this->_internal_outbound_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.outbound_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_outbound_address(), target);
  }

  // string outbound_number = 3;
  if (!this->_internal_outbound_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_number().data(), static_cast<int>(this->_internal_outbound_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.outbound_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outbound_number(), target);
  }

  // repeated string inbound_numbers_regex = 4 [deprecated = true];
  for (int i = 0, n = this->_internal_inbound_numbers_regex_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_numbers_regex(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.inbound_numbers_regex");
    target = stream->WriteString(4, s, target);
  }

  // string inbound_username = 5;
  if (!this->_internal_inbound_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inbound_username().data(), static_cast<int>(this->_internal_inbound_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.inbound_username");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_inbound_username(), target);
  }

  // string inbound_password = 6;
  if (!this->_internal_inbound_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inbound_password().data(), static_cast<int>(this->_internal_inbound_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.inbound_password");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_inbound_password(), target);
  }

  // string outbound_username = 7;
  if (!this->_internal_outbound_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_username().data(), static_cast<int>(this->_internal_outbound_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.outbound_username");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_outbound_username(), target);
  }

  // string outbound_password = 8;
  if (!this->_internal_outbound_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_password().data(), static_cast<int>(this->_internal_outbound_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.outbound_password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_outbound_password(), target);
  }

  // repeated string inbound_numbers = 9;
  for (int i = 0, n = this->_internal_inbound_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.inbound_numbers");
    target = stream->WriteString(9, s, target);
  }

  // string name = 10;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // string metadata = 11;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPTrunkRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateSIPTrunkRequest)
  return target;
}

size_t CreateSIPTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.CreateSIPTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string inbound_addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_addresses_.size());
  for (int i = 0, n = _impl_.inbound_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_addresses_.Get(i));
  }

  // repeated string inbound_numbers_regex = 4 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_numbers_regex_.size());
  for (int i = 0, n = _impl_.inbound_numbers_regex_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_numbers_regex_.Get(i));
  }

  // repeated string inbound_numbers = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_numbers_.size());
  for (int i = 0, n = _impl_.inbound_numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_numbers_.Get(i));
  }

  // string outbound_address = 2;
  if (!this->_internal_outbound_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_address());
  }

  // string outbound_number = 3;
  if (!this->_internal_outbound_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_number());
  }

  // string inbound_username = 5;
  if (!this->_internal_inbound_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inbound_username());
  }

  // string inbound_password = 6;
  if (!this->_internal_inbound_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inbound_password());
  }

  // string outbound_username = 7;
  if (!this->_internal_outbound_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_username());
  }

  // string outbound_password = 8;
  if (!this->_internal_outbound_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_password());
  }

  // string name = 10;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string metadata = 11;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSIPTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSIPTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSIPTrunkRequest::GetClassData() const { return &_class_data_; }


void CreateSIPTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSIPTrunkRequest*>(&to_msg);
  auto& from = static_cast<const CreateSIPTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateSIPTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inbound_addresses_.MergeFrom(from._impl_.inbound_addresses_);
  _this->_impl_.inbound_numbers_regex_.MergeFrom(from._impl_.inbound_numbers_regex_);
  _this->_impl_.inbound_numbers_.MergeFrom(from._impl_.inbound_numbers_);
  if (!from._internal_outbound_address().empty()) {
    _this->_internal_set_outbound_address(from._internal_outbound_address());
  }
  if (!from._internal_outbound_number().empty()) {
    _this->_internal_set_outbound_number(from._internal_outbound_number());
  }
  if (!from._internal_inbound_username().empty()) {
    _this->_internal_set_inbound_username(from._internal_inbound_username());
  }
  if (!from._internal_inbound_password().empty()) {
    _this->_internal_set_inbound_password(from._internal_inbound_password());
  }
  if (!from._internal_outbound_username().empty()) {
    _this->_internal_set_outbound_username(from._internal_outbound_username());
  }
  if (!from._internal_outbound_password().empty()) {
    _this->_internal_set_outbound_password(from._internal_outbound_password());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSIPTrunkRequest::CopyFrom(const CreateSIPTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateSIPTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSIPTrunkRequest::IsInitialized() const {
  return true;
}

void CreateSIPTrunkRequest::InternalSwap(CreateSIPTrunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inbound_addresses_.InternalSwap(&other->_impl_.inbound_addresses_);
  _impl_.inbound_numbers_regex_.InternalSwap(&other->_impl_.inbound_numbers_regex_);
  _impl_.inbound_numbers_.InternalSwap(&other->_impl_.inbound_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_address_, lhs_arena,
      &other->_impl_.outbound_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_number_, lhs_arena,
      &other->_impl_.outbound_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inbound_username_, lhs_arena,
      &other->_impl_.inbound_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inbound_password_, lhs_arena,
      &other->_impl_.inbound_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_username_, lhs_arena,
      &other->_impl_.outbound_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_password_, lhs_arena,
      &other->_impl_.outbound_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[1]);
}

// ===================================================================

class SIPTrunkInfo::_Internal {
 public:
};

SIPTrunkInfo::SIPTrunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPTrunkInfo)
}
SIPTrunkInfo::SIPTrunkInfo(const SIPTrunkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPTrunkInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inbound_addresses_){from._impl_.inbound_addresses_}
    , decltype(_impl_.inbound_numbers_regex_){from._impl_.inbound_numbers_regex_}
    , decltype(_impl_.inbound_numbers_){from._impl_.inbound_numbers_}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.outbound_address_){}
    , decltype(_impl_.outbound_number_){}
    , decltype(_impl_.inbound_username_){}
    , decltype(_impl_.inbound_password_){}
    , decltype(_impl_.outbound_username_){}
    , decltype(_impl_.outbound_password_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.transport_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_address().empty()) {
    _this->_impl_.outbound_address_.Set(from._internal_outbound_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_number().empty()) {
    _this->_impl_.outbound_number_.Set(from._internal_outbound_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inbound_username().empty()) {
    _this->_impl_.inbound_username_.Set(from._internal_inbound_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inbound_password().empty()) {
    _this->_impl_.inbound_password_.Set(from._internal_inbound_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_username().empty()) {
    _this->_impl_.outbound_username_.Set(from._internal_outbound_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outbound_password().empty()) {
    _this->_impl_.outbound_password_.Set(from._internal_outbound_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.transport_, &from._impl_.transport_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.transport_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:livekit.SIPTrunkInfo)
}

inline void SIPTrunkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inbound_addresses_){arena}
    , decltype(_impl_.inbound_numbers_regex_){arena}
    , decltype(_impl_.inbound_numbers_){arena}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.outbound_address_){}
    , decltype(_impl_.outbound_number_){}
    , decltype(_impl_.inbound_username_){}
    , decltype(_impl_.inbound_password_){}
    , decltype(_impl_.outbound_username_){}
    , decltype(_impl_.outbound_password_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.transport_){0}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outbound_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outbound_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPTrunkInfo::~SIPTrunkInfo() {
  // @@protoc_insertion_point(destructor:livekit.SIPTrunkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPTrunkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inbound_addresses_.~RepeatedPtrField();
  _impl_.inbound_numbers_regex_.~RepeatedPtrField();
  _impl_.inbound_numbers_.~RepeatedPtrField();
  _impl_.sip_trunk_id_.Destroy();
  _impl_.outbound_address_.Destroy();
  _impl_.outbound_number_.Destroy();
  _impl_.inbound_username_.Destroy();
  _impl_.inbound_password_.Destroy();
  _impl_.outbound_username_.Destroy();
  _impl_.outbound_password_.Destroy();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
}

void SIPTrunkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPTrunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPTrunkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inbound_addresses_.Clear();
  _impl_.inbound_numbers_regex_.Clear();
  _impl_.inbound_numbers_.Clear();
  _impl_.sip_trunk_id_.ClearToEmpty();
  _impl_.outbound_address_.ClearToEmpty();
  _impl_.outbound_number_.ClearToEmpty();
  _impl_.inbound_username_.ClearToEmpty();
  _impl_.inbound_password_.ClearToEmpty();
  _impl_.outbound_username_.ClearToEmpty();
  _impl_.outbound_password_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  ::memset(&_impl_.transport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.transport_)) + sizeof(_impl_.kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPTrunkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.inbound_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string outbound_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_outbound_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.outbound_address"));
        } else
          goto handle_unusual;
        continue;
      // string outbound_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_outbound_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.outbound_number"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_numbers_regex = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_numbers_regex();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.inbound_numbers_regex"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string inbound_username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_inbound_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.inbound_username"));
        } else
          goto handle_unusual;
        continue;
      // string inbound_password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_inbound_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.inbound_password"));
        } else
          goto handle_unusual;
        continue;
      // string outbound_username = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_outbound_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.outbound_username"));
        } else
          goto handle_unusual;
        continue;
      // string outbound_password = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_outbound_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.outbound_password"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_numbers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.inbound_numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPTrunkInfo.metadata"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPTransport transport = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transport(static_cast<::livekit::SIPTransport>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPTrunkInfo.TrunkKind kind = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::livekit::SIPTrunkInfo_TrunkKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPTrunkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPTrunkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  // repeated string inbound_addresses = 2;
  for (int i = 0, n = this->_internal_inbound_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.inbound_addresses");
    target = stream->WriteString(2, s, target);
  }

  // string outbound_address = 3;
  if (!this->_internal_outbound_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_address().data(), static_cast<int>(this->_internal_outbound_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.outbound_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outbound_address(), target);
  }

  // string outbound_number = 4;
  if (!this->_internal_outbound_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_number().data(), static_cast<int>(this->_internal_outbound_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.outbound_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_outbound_number(), target);
  }

  // repeated string inbound_numbers_regex = 5 [deprecated = true];
  for (int i = 0, n = this->_internal_inbound_numbers_regex_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_numbers_regex(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.inbound_numbers_regex");
    target = stream->WriteString(5, s, target);
  }

  // string inbound_username = 6;
  if (!this->_internal_inbound_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inbound_username().data(), static_cast<int>(this->_internal_inbound_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.inbound_username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_inbound_username(), target);
  }

  // string inbound_password = 7;
  if (!this->_internal_inbound_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inbound_password().data(), static_cast<int>(this->_internal_inbound_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.inbound_password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_inbound_password(), target);
  }

  // string outbound_username = 8;
  if (!this->_internal_outbound_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_username().data(), static_cast<int>(this->_internal_outbound_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.outbound_username");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_outbound_username(), target);
  }

  // string outbound_password = 9;
  if (!this->_internal_outbound_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outbound_password().data(), static_cast<int>(this->_internal_outbound_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.outbound_password");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_outbound_password(), target);
  }

  // repeated string inbound_numbers = 10;
  for (int i = 0, n = this->_internal_inbound_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.inbound_numbers");
    target = stream->WriteString(10, s, target);
  }

  // string name = 11;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_name(), target);
  }

  // string metadata = 12;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPTrunkInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_metadata(), target);
  }

  // .livekit.SIPTransport transport = 13;
  if (this->_internal_transport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_transport(), target);
  }

  // .livekit.SIPTrunkInfo.TrunkKind kind = 14;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPTrunkInfo)
  return target;
}

size_t SIPTrunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPTrunkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string inbound_addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_addresses_.size());
  for (int i = 0, n = _impl_.inbound_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_addresses_.Get(i));
  }

  // repeated string inbound_numbers_regex = 5 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_numbers_regex_.size());
  for (int i = 0, n = _impl_.inbound_numbers_regex_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_numbers_regex_.Get(i));
  }

  // repeated string inbound_numbers = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_numbers_.size());
  for (int i = 0, n = _impl_.inbound_numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_numbers_.Get(i));
  }

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  // string outbound_address = 3;
  if (!this->_internal_outbound_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_address());
  }

  // string outbound_number = 4;
  if (!this->_internal_outbound_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_number());
  }

  // string inbound_username = 6;
  if (!this->_internal_inbound_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inbound_username());
  }

  // string inbound_password = 7;
  if (!this->_internal_inbound_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inbound_password());
  }

  // string outbound_username = 8;
  if (!this->_internal_outbound_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_username());
  }

  // string outbound_password = 9;
  if (!this->_internal_outbound_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outbound_password());
  }

  // string name = 11;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string metadata = 12;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .livekit.SIPTransport transport = 13;
  if (this->_internal_transport() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_transport());
  }

  // .livekit.SIPTrunkInfo.TrunkKind kind = 14;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPTrunkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPTrunkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPTrunkInfo::GetClassData() const { return &_class_data_; }


void SIPTrunkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPTrunkInfo*>(&to_msg);
  auto& from = static_cast<const SIPTrunkInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPTrunkInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inbound_addresses_.MergeFrom(from._impl_.inbound_addresses_);
  _this->_impl_.inbound_numbers_regex_.MergeFrom(from._impl_.inbound_numbers_regex_);
  _this->_impl_.inbound_numbers_.MergeFrom(from._impl_.inbound_numbers_);
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  if (!from._internal_outbound_address().empty()) {
    _this->_internal_set_outbound_address(from._internal_outbound_address());
  }
  if (!from._internal_outbound_number().empty()) {
    _this->_internal_set_outbound_number(from._internal_outbound_number());
  }
  if (!from._internal_inbound_username().empty()) {
    _this->_internal_set_inbound_username(from._internal_inbound_username());
  }
  if (!from._internal_inbound_password().empty()) {
    _this->_internal_set_inbound_password(from._internal_inbound_password());
  }
  if (!from._internal_outbound_username().empty()) {
    _this->_internal_set_outbound_username(from._internal_outbound_username());
  }
  if (!from._internal_outbound_password().empty()) {
    _this->_internal_set_outbound_password(from._internal_outbound_password());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_transport() != 0) {
    _this->_internal_set_transport(from._internal_transport());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPTrunkInfo::CopyFrom(const SIPTrunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPTrunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPTrunkInfo::IsInitialized() const {
  return true;
}

void SIPTrunkInfo::InternalSwap(SIPTrunkInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inbound_addresses_.InternalSwap(&other->_impl_.inbound_addresses_);
  _impl_.inbound_numbers_regex_.InternalSwap(&other->_impl_.inbound_numbers_regex_);
  _impl_.inbound_numbers_.InternalSwap(&other->_impl_.inbound_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_address_, lhs_arena,
      &other->_impl_.outbound_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_number_, lhs_arena,
      &other->_impl_.outbound_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inbound_username_, lhs_arena,
      &other->_impl_.inbound_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inbound_password_, lhs_arena,
      &other->_impl_.inbound_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_username_, lhs_arena,
      &other->_impl_.outbound_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outbound_password_, lhs_arena,
      &other->_impl_.outbound_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SIPTrunkInfo, _impl_.kind_)
      + sizeof(SIPTrunkInfo::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(SIPTrunkInfo, _impl_.transport_)>(
          reinterpret_cast<char*>(&_impl_.transport_),
          reinterpret_cast<char*>(&other->_impl_.transport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPTrunkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[2]);
}

// ===================================================================

class CreateSIPInboundTrunkRequest::_Internal {
 public:
  static const ::livekit::SIPInboundTrunkInfo& trunk(const CreateSIPInboundTrunkRequest* msg);
};

const ::livekit::SIPInboundTrunkInfo&
CreateSIPInboundTrunkRequest::_Internal::trunk(const CreateSIPInboundTrunkRequest* msg) {
  return *msg->_impl_.trunk_;
}
CreateSIPInboundTrunkRequest::CreateSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.CreateSIPInboundTrunkRequest)
}
CreateSIPInboundTrunkRequest::CreateSIPInboundTrunkRequest(const CreateSIPInboundTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSIPInboundTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trunk()) {
    _this->_impl_.trunk_ = new ::livekit::SIPInboundTrunkInfo(*from._impl_.trunk_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.CreateSIPInboundTrunkRequest)
}

inline void CreateSIPInboundTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateSIPInboundTrunkRequest::~CreateSIPInboundTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateSIPInboundTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSIPInboundTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trunk_;
}

void CreateSIPInboundTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSIPInboundTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateSIPInboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSIPInboundTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPInboundTrunkInfo trunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSIPInboundTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateSIPInboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPInboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trunk(this),
        _Internal::trunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateSIPInboundTrunkRequest)
  return target;
}

size_t CreateSIPInboundTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.CreateSIPInboundTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.SIPInboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSIPInboundTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSIPInboundTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSIPInboundTrunkRequest::GetClassData() const { return &_class_data_; }


void CreateSIPInboundTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSIPInboundTrunkRequest*>(&to_msg);
  auto& from = static_cast<const CreateSIPInboundTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateSIPInboundTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trunk()) {
    _this->_internal_mutable_trunk()->::livekit::SIPInboundTrunkInfo::MergeFrom(
        from._internal_trunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSIPInboundTrunkRequest::CopyFrom(const CreateSIPInboundTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateSIPInboundTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSIPInboundTrunkRequest::IsInitialized() const {
  return true;
}

void CreateSIPInboundTrunkRequest::InternalSwap(CreateSIPInboundTrunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.trunk_, other->_impl_.trunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPInboundTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[3]);
}

// ===================================================================

SIPInboundTrunkInfo_HeadersEntry_DoNotUse::SIPInboundTrunkInfo_HeadersEntry_DoNotUse() {}
SIPInboundTrunkInfo_HeadersEntry_DoNotUse::SIPInboundTrunkInfo_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPInboundTrunkInfo_HeadersEntry_DoNotUse::MergeFrom(const SIPInboundTrunkInfo_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPInboundTrunkInfo_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[4]);
}

// ===================================================================

SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse() {}
SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::MergeFrom(const SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[5]);
}

// ===================================================================

SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse() {}
SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::MergeFrom(const SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[6]);
}

// ===================================================================

class SIPInboundTrunkInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ringing_timeout(const SIPInboundTrunkInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_call_duration(const SIPInboundTrunkInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SIPInboundTrunkInfo::_Internal::ringing_timeout(const SIPInboundTrunkInfo* msg) {
  return *msg->_impl_.ringing_timeout_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SIPInboundTrunkInfo::_Internal::max_call_duration(const SIPInboundTrunkInfo* msg) {
  return *msg->_impl_.max_call_duration_;
}
void SIPInboundTrunkInfo::clear_ringing_timeout() {
  if (GetArenaForAllocation() == nullptr && _impl_.ringing_timeout_ != nullptr) {
    delete _impl_.ringing_timeout_;
  }
  _impl_.ringing_timeout_ = nullptr;
}
void SIPInboundTrunkInfo::clear_max_call_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_call_duration_ != nullptr) {
    delete _impl_.max_call_duration_;
  }
  _impl_.max_call_duration_ = nullptr;
}
SIPInboundTrunkInfo::SIPInboundTrunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SIPInboundTrunkInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SIPInboundTrunkInfo)
}
SIPInboundTrunkInfo::SIPInboundTrunkInfo(const SIPInboundTrunkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPInboundTrunkInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.numbers_){from._impl_.numbers_}
    , decltype(_impl_.allowed_addresses_){from._impl_.allowed_addresses_}
    , decltype(_impl_.allowed_numbers_){from._impl_.allowed_numbers_}
    , /*decltype(_impl_.headers_)*/{}
    , /*decltype(_impl_.headers_to_attributes_)*/{}
    , /*decltype(_impl_.attributes_to_headers_)*/{}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.auth_username_){}
    , decltype(_impl_.auth_password_){}
    , decltype(_impl_.ringing_timeout_){nullptr}
    , decltype(_impl_.max_call_duration_){nullptr}
    , decltype(_impl_.krisp_enabled_){}
    , decltype(_impl_.include_headers_){}
    , decltype(_impl_.media_encryption_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.headers_to_attributes_.MergeFrom(from._impl_.headers_to_attributes_);
  _this->_impl_.attributes_to_headers_.MergeFrom(from._impl_.attributes_to_headers_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_username().empty()) {
    _this->_impl_.auth_username_.Set(from._internal_auth_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_password().empty()) {
    _this->_impl_.auth_password_.Set(from._internal_auth_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ringing_timeout()) {
    _this->_impl_.ringing_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ringing_timeout_);
  }
  if (from._internal_has_max_call_duration()) {
    _this->_impl_.max_call_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.max_call_duration_);
  }
  ::memcpy(&_impl_.krisp_enabled_, &from._impl_.krisp_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.media_encryption_) -
    reinterpret_cast<char*>(&_impl_.krisp_enabled_)) + sizeof(_impl_.media_encryption_));
  // @@protoc_insertion_point(copy_constructor:livekit.SIPInboundTrunkInfo)
}

inline void SIPInboundTrunkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.numbers_){arena}
    , decltype(_impl_.allowed_addresses_){arena}
    , decltype(_impl_.allowed_numbers_){arena}
    , /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.headers_to_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.attributes_to_headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.auth_username_){}
    , decltype(_impl_.auth_password_){}
    , decltype(_impl_.ringing_timeout_){nullptr}
    , decltype(_impl_.max_call_duration_){nullptr}
    , decltype(_impl_.krisp_enabled_){false}
    , decltype(_impl_.include_headers_){0}
    , decltype(_impl_.media_encryption_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPInboundTrunkInfo::~SIPInboundTrunkInfo() {
  // @@protoc_insertion_point(destructor:livekit.SIPInboundTrunkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SIPInboundTrunkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.numbers_.~RepeatedPtrField();
  _impl_.allowed_addresses_.~RepeatedPtrField();
  _impl_.allowed_numbers_.~RepeatedPtrField();
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.headers_to_attributes_.Destruct();
  _impl_.headers_to_attributes_.~MapField();
  _impl_.attributes_to_headers_.Destruct();
  _impl_.attributes_to_headers_.~MapField();
  _impl_.sip_trunk_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.auth_username_.Destroy();
  _impl_.auth_password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ringing_timeout_;
  if (this != internal_default_instance()) delete _impl_.max_call_duration_;
}

void SIPInboundTrunkInfo::ArenaDtor(void* object) {
  SIPInboundTrunkInfo* _this = reinterpret_cast< SIPInboundTrunkInfo* >(object);
  _this->_impl_.headers_.Destruct();
  _this->_impl_.headers_to_attributes_.Destruct();
  _this->_impl_.attributes_to_headers_.Destruct();
}
void SIPInboundTrunkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPInboundTrunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPInboundTrunkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.numbers_.Clear();
  _impl_.allowed_addresses_.Clear();
  _impl_.allowed_numbers_.Clear();
  _impl_.headers_.Clear();
  _impl_.headers_to_attributes_.Clear();
  _impl_.attributes_to_headers_.Clear();
  _impl_.sip_trunk_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.auth_username_.ClearToEmpty();
  _impl_.auth_password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ringing_timeout_ != nullptr) {
    delete _impl_.ringing_timeout_;
  }
  _impl_.ringing_timeout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_call_duration_ != nullptr) {
    delete _impl_.max_call_duration_;
  }
  _impl_.max_call_duration_ = nullptr;
  ::memset(&_impl_.krisp_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.media_encryption_) -
      reinterpret_cast<char*>(&_impl_.krisp_enabled_)) + sizeof(_impl_.media_encryption_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPInboundTrunkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.metadata"));
        } else
          goto handle_unusual;
        continue;
      // repeated string numbers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string allowed_addresses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.allowed_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string allowed_numbers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.allowed_numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string auth_username = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_auth_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.auth_username"));
        } else
          goto handle_unusual;
        continue;
      // string auth_password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPInboundTrunkInfo.auth_password"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers_to_attributes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_to_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ringing_timeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ringing_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration max_call_duration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_call_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool krisp_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.krisp_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes_to_headers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_to_headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPHeaderOptions include_headers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_include_headers(static_cast<::livekit::SIPHeaderOptions>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPMediaEncryption media_encryption = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_encryption(static_cast<::livekit::SIPMediaEncryption>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPInboundTrunkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPInboundTrunkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // repeated string numbers = 4;
  for (int i = 0, n = this->_internal_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.numbers");
    target = stream->WriteString(4, s, target);
  }

  // repeated string allowed_addresses = 5;
  for (int i = 0, n = this->_internal_allowed_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.allowed_addresses");
    target = stream->WriteString(5, s, target);
  }

  // repeated string allowed_numbers = 6;
  for (int i = 0, n = this->_internal_allowed_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.allowed_numbers");
    target = stream->WriteString(6, s, target);
  }

  // string auth_username = 7;
  if (!this->_internal_auth_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_username().data(), static_cast<int>(this->_internal_auth_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.auth_username");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_auth_username(), target);
  }

  // string auth_password = 8;
  if (!this->_internal_auth_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPInboundTrunkInfo.auth_password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_auth_password(), target);
  }

  // map<string, string> headers = 9;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPInboundTrunkInfo_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPInboundTrunkInfo.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPInboundTrunkInfo.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> headers_to_attributes = 10;
  if (!this->_internal_headers_to_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers_to_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPInboundTrunkInfo.HeadersToAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPInboundTrunkInfo.HeadersToAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Duration ringing_timeout = 11;
  if (this->_internal_has_ringing_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ringing_timeout(this),
        _Internal::ringing_timeout(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration max_call_duration = 12;
  if (this->_internal_has_max_call_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::max_call_duration(this),
        _Internal::max_call_duration(this).GetCachedSize(), target, stream);
  }

  // bool krisp_enabled = 13;
  if (this->_internal_krisp_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_krisp_enabled(), target);
  }

  // map<string, string> attributes_to_headers = 14;
  if (!this->_internal_attributes_to_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes_to_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPInboundTrunkInfo.AttributesToHeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPInboundTrunkInfo.AttributesToHeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .livekit.SIPHeaderOptions include_headers = 15;
  if (this->_internal_include_headers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_include_headers(), target);
  }

  // .livekit.SIPMediaEncryption media_encryption = 16;
  if (this->_internal_media_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_media_encryption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPInboundTrunkInfo)
  return target;
}

size_t SIPInboundTrunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPInboundTrunkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string numbers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.numbers_.size());
  for (int i = 0, n = _impl_.numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.numbers_.Get(i));
  }

  // repeated string allowed_addresses = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.allowed_addresses_.size());
  for (int i = 0, n = _impl_.allowed_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.allowed_addresses_.Get(i));
  }

  // repeated string allowed_numbers = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.allowed_numbers_.size());
  for (int i = 0, n = _impl_.allowed_numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.allowed_numbers_.Get(i));
  }

  // map<string, string> headers = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += SIPInboundTrunkInfo_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> headers_to_attributes = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_to_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers_to_attributes().begin();
      it != this->_internal_headers_to_attributes().end(); ++it) {
    total_size += SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> attributes_to_headers = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_to_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes_to_headers().begin();
      it != this->_internal_attributes_to_headers().end(); ++it) {
    total_size += SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string auth_username = 7;
  if (!this->_internal_auth_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_username());
  }

  // string auth_password = 8;
  if (!this->_internal_auth_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // .google.protobuf.Duration ringing_timeout = 11;
  if (this->_internal_has_ringing_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ringing_timeout_);
  }

  // .google.protobuf.Duration max_call_duration = 12;
  if (this->_internal_has_max_call_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_call_duration_);
  }

  // bool krisp_enabled = 13;
  if (this->_internal_krisp_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.SIPHeaderOptions include_headers = 15;
  if (this->_internal_include_headers() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_include_headers());
  }

  // .livekit.SIPMediaEncryption media_encryption = 16;
  if (this->_internal_media_encryption() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_media_encryption());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPInboundTrunkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPInboundTrunkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPInboundTrunkInfo::GetClassData() const { return &_class_data_; }


void SIPInboundTrunkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPInboundTrunkInfo*>(&to_msg);
  auto& from = static_cast<const SIPInboundTrunkInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPInboundTrunkInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.numbers_.MergeFrom(from._impl_.numbers_);
  _this->_impl_.allowed_addresses_.MergeFrom(from._impl_.allowed_addresses_);
  _this->_impl_.allowed_numbers_.MergeFrom(from._impl_.allowed_numbers_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.headers_to_attributes_.MergeFrom(from._impl_.headers_to_attributes_);
  _this->_impl_.attributes_to_headers_.MergeFrom(from._impl_.attributes_to_headers_);
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_auth_username().empty()) {
    _this->_internal_set_auth_username(from._internal_auth_username());
  }
  if (!from._internal_auth_password().empty()) {
    _this->_internal_set_auth_password(from._internal_auth_password());
  }
  if (from._internal_has_ringing_timeout()) {
    _this->_internal_mutable_ringing_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ringing_timeout());
  }
  if (from._internal_has_max_call_duration()) {
    _this->_internal_mutable_max_call_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_max_call_duration());
  }
  if (from._internal_krisp_enabled() != 0) {
    _this->_internal_set_krisp_enabled(from._internal_krisp_enabled());
  }
  if (from._internal_include_headers() != 0) {
    _this->_internal_set_include_headers(from._internal_include_headers());
  }
  if (from._internal_media_encryption() != 0) {
    _this->_internal_set_media_encryption(from._internal_media_encryption());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPInboundTrunkInfo::CopyFrom(const SIPInboundTrunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPInboundTrunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPInboundTrunkInfo::IsInitialized() const {
  return true;
}

void SIPInboundTrunkInfo::InternalSwap(SIPInboundTrunkInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.numbers_.InternalSwap(&other->_impl_.numbers_);
  _impl_.allowed_addresses_.InternalSwap(&other->_impl_.allowed_addresses_);
  _impl_.allowed_numbers_.InternalSwap(&other->_impl_.allowed_numbers_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  _impl_.headers_to_attributes_.InternalSwap(&other->_impl_.headers_to_attributes_);
  _impl_.attributes_to_headers_.InternalSwap(&other->_impl_.attributes_to_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_username_, lhs_arena,
      &other->_impl_.auth_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_password_, lhs_arena,
      &other->_impl_.auth_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SIPInboundTrunkInfo, _impl_.media_encryption_)
      + sizeof(SIPInboundTrunkInfo::_impl_.media_encryption_)
      - PROTOBUF_FIELD_OFFSET(SIPInboundTrunkInfo, _impl_.ringing_timeout_)>(
          reinterpret_cast<char*>(&_impl_.ringing_timeout_),
          reinterpret_cast<char*>(&other->_impl_.ringing_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPInboundTrunkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[7]);
}

// ===================================================================

class CreateSIPOutboundTrunkRequest::_Internal {
 public:
  static const ::livekit::SIPOutboundTrunkInfo& trunk(const CreateSIPOutboundTrunkRequest* msg);
};

const ::livekit::SIPOutboundTrunkInfo&
CreateSIPOutboundTrunkRequest::_Internal::trunk(const CreateSIPOutboundTrunkRequest* msg) {
  return *msg->_impl_.trunk_;
}
CreateSIPOutboundTrunkRequest::CreateSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.CreateSIPOutboundTrunkRequest)
}
CreateSIPOutboundTrunkRequest::CreateSIPOutboundTrunkRequest(const CreateSIPOutboundTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSIPOutboundTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trunk()) {
    _this->_impl_.trunk_ = new ::livekit::SIPOutboundTrunkInfo(*from._impl_.trunk_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.CreateSIPOutboundTrunkRequest)
}

inline void CreateSIPOutboundTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateSIPOutboundTrunkRequest::~CreateSIPOutboundTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateSIPOutboundTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSIPOutboundTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trunk_;
}

void CreateSIPOutboundTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSIPOutboundTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateSIPOutboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSIPOutboundTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPOutboundTrunkInfo trunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSIPOutboundTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateSIPOutboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPOutboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trunk(this),
        _Internal::trunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateSIPOutboundTrunkRequest)
  return target;
}

size_t CreateSIPOutboundTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.CreateSIPOutboundTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.SIPOutboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSIPOutboundTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSIPOutboundTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSIPOutboundTrunkRequest::GetClassData() const { return &_class_data_; }


void CreateSIPOutboundTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSIPOutboundTrunkRequest*>(&to_msg);
  auto& from = static_cast<const CreateSIPOutboundTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateSIPOutboundTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trunk()) {
    _this->_internal_mutable_trunk()->::livekit::SIPOutboundTrunkInfo::MergeFrom(
        from._internal_trunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSIPOutboundTrunkRequest::CopyFrom(const CreateSIPOutboundTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateSIPOutboundTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSIPOutboundTrunkRequest::IsInitialized() const {
  return true;
}

void CreateSIPOutboundTrunkRequest::InternalSwap(CreateSIPOutboundTrunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.trunk_, other->_impl_.trunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPOutboundTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[8]);
}

// ===================================================================

SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse() {}
SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::MergeFrom(const SIPOutboundTrunkInfo_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[9]);
}

// ===================================================================

SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse() {}
SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::MergeFrom(const SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[10]);
}

// ===================================================================

SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse() {}
SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::MergeFrom(const SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[11]);
}

// ===================================================================

class SIPOutboundTrunkInfo::_Internal {
 public:
};

SIPOutboundTrunkInfo::SIPOutboundTrunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SIPOutboundTrunkInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SIPOutboundTrunkInfo)
}
SIPOutboundTrunkInfo::SIPOutboundTrunkInfo(const SIPOutboundTrunkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPOutboundTrunkInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.numbers_){from._impl_.numbers_}
    , /*decltype(_impl_.headers_)*/{}
    , /*decltype(_impl_.headers_to_attributes_)*/{}
    , /*decltype(_impl_.attributes_to_headers_)*/{}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.auth_username_){}
    , decltype(_impl_.auth_password_){}
    , decltype(_impl_.transport_){}
    , decltype(_impl_.include_headers_){}
    , decltype(_impl_.media_encryption_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.headers_to_attributes_.MergeFrom(from._impl_.headers_to_attributes_);
  _this->_impl_.attributes_to_headers_.MergeFrom(from._impl_.attributes_to_headers_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_username().empty()) {
    _this->_impl_.auth_username_.Set(from._internal_auth_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_password().empty()) {
    _this->_impl_.auth_password_.Set(from._internal_auth_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.transport_, &from._impl_.transport_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.media_encryption_) -
    reinterpret_cast<char*>(&_impl_.transport_)) + sizeof(_impl_.media_encryption_));
  // @@protoc_insertion_point(copy_constructor:livekit.SIPOutboundTrunkInfo)
}

inline void SIPOutboundTrunkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.numbers_){arena}
    , /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.headers_to_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.attributes_to_headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.auth_username_){}
    , decltype(_impl_.auth_password_){}
    , decltype(_impl_.transport_){0}
    , decltype(_impl_.include_headers_){0}
    , decltype(_impl_.media_encryption_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPOutboundTrunkInfo::~SIPOutboundTrunkInfo() {
  // @@protoc_insertion_point(destructor:livekit.SIPOutboundTrunkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SIPOutboundTrunkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.numbers_.~RepeatedPtrField();
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.headers_to_attributes_.Destruct();
  _impl_.headers_to_attributes_.~MapField();
  _impl_.attributes_to_headers_.Destruct();
  _impl_.attributes_to_headers_.~MapField();
  _impl_.sip_trunk_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.address_.Destroy();
  _impl_.auth_username_.Destroy();
  _impl_.auth_password_.Destroy();
}

void SIPOutboundTrunkInfo::ArenaDtor(void* object) {
  SIPOutboundTrunkInfo* _this = reinterpret_cast< SIPOutboundTrunkInfo* >(object);
  _this->_impl_.headers_.Destruct();
  _this->_impl_.headers_to_attributes_.Destruct();
  _this->_impl_.attributes_to_headers_.Destruct();
}
void SIPOutboundTrunkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPOutboundTrunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPOutboundTrunkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.numbers_.Clear();
  _impl_.headers_.Clear();
  _impl_.headers_to_attributes_.Clear();
  _impl_.attributes_to_headers_.Clear();
  _impl_.sip_trunk_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.auth_username_.ClearToEmpty();
  _impl_.auth_password_.ClearToEmpty();
  ::memset(&_impl_.transport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.media_encryption_) -
      reinterpret_cast<char*>(&_impl_.transport_)) + sizeof(_impl_.media_encryption_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPOutboundTrunkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.metadata"));
        } else
          goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.address"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPTransport transport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transport(static_cast<::livekit::SIPTransport>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string numbers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string auth_username = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_auth_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.auth_username"));
        } else
          goto handle_unusual;
        continue;
      // string auth_password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundTrunkInfo.auth_password"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers_to_attributes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_to_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes_to_headers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_to_headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPHeaderOptions include_headers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_include_headers(static_cast<::livekit::SIPHeaderOptions>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPMediaEncryption media_encryption = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_encryption(static_cast<::livekit::SIPMediaEncryption>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPOutboundTrunkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPOutboundTrunkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // string address = 4;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // .livekit.SIPTransport transport = 5;
  if (this->_internal_transport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_transport(), target);
  }

  // repeated string numbers = 6;
  for (int i = 0, n = this->_internal_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.numbers");
    target = stream->WriteString(6, s, target);
  }

  // string auth_username = 7;
  if (!this->_internal_auth_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_username().data(), static_cast<int>(this->_internal_auth_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.auth_username");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_auth_username(), target);
  }

  // string auth_password = 8;
  if (!this->_internal_auth_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundTrunkInfo.auth_password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_auth_password(), target);
  }

  // map<string, string> headers = 9;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundTrunkInfo.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundTrunkInfo.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> headers_to_attributes = 10;
  if (!this->_internal_headers_to_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers_to_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundTrunkInfo.HeadersToAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundTrunkInfo.HeadersToAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> attributes_to_headers = 11;
  if (!this->_internal_attributes_to_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes_to_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundTrunkInfo.AttributesToHeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundTrunkInfo.AttributesToHeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .livekit.SIPHeaderOptions include_headers = 12;
  if (this->_internal_include_headers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_include_headers(), target);
  }

  // .livekit.SIPMediaEncryption media_encryption = 13;
  if (this->_internal_media_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_media_encryption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPOutboundTrunkInfo)
  return target;
}

size_t SIPOutboundTrunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPOutboundTrunkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string numbers = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.numbers_.size());
  for (int i = 0, n = _impl_.numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.numbers_.Get(i));
  }

  // map<string, string> headers = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += SIPOutboundTrunkInfo_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> headers_to_attributes = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_to_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers_to_attributes().begin();
      it != this->_internal_headers_to_attributes().end(); ++it) {
    total_size += SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> attributes_to_headers = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_to_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes_to_headers().begin();
      it != this->_internal_attributes_to_headers().end(); ++it) {
    total_size += SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string address = 4;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string auth_username = 7;
  if (!this->_internal_auth_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_username());
  }

  // string auth_password = 8;
  if (!this->_internal_auth_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // .livekit.SIPTransport transport = 5;
  if (this->_internal_transport() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_transport());
  }

  // .livekit.SIPHeaderOptions include_headers = 12;
  if (this->_internal_include_headers() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_include_headers());
  }

  // .livekit.SIPMediaEncryption media_encryption = 13;
  if (this->_internal_media_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_media_encryption());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPOutboundTrunkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPOutboundTrunkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPOutboundTrunkInfo::GetClassData() const { return &_class_data_; }


void SIPOutboundTrunkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPOutboundTrunkInfo*>(&to_msg);
  auto& from = static_cast<const SIPOutboundTrunkInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPOutboundTrunkInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.numbers_.MergeFrom(from._impl_.numbers_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.headers_to_attributes_.MergeFrom(from._impl_.headers_to_attributes_);
  _this->_impl_.attributes_to_headers_.MergeFrom(from._impl_.attributes_to_headers_);
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_auth_username().empty()) {
    _this->_internal_set_auth_username(from._internal_auth_username());
  }
  if (!from._internal_auth_password().empty()) {
    _this->_internal_set_auth_password(from._internal_auth_password());
  }
  if (from._internal_transport() != 0) {
    _this->_internal_set_transport(from._internal_transport());
  }
  if (from._internal_include_headers() != 0) {
    _this->_internal_set_include_headers(from._internal_include_headers());
  }
  if (from._internal_media_encryption() != 0) {
    _this->_internal_set_media_encryption(from._internal_media_encryption());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPOutboundTrunkInfo::CopyFrom(const SIPOutboundTrunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPOutboundTrunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPOutboundTrunkInfo::IsInitialized() const {
  return true;
}

void SIPOutboundTrunkInfo::InternalSwap(SIPOutboundTrunkInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.numbers_.InternalSwap(&other->_impl_.numbers_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  _impl_.headers_to_attributes_.InternalSwap(&other->_impl_.headers_to_attributes_);
  _impl_.attributes_to_headers_.InternalSwap(&other->_impl_.attributes_to_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_username_, lhs_arena,
      &other->_impl_.auth_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_password_, lhs_arena,
      &other->_impl_.auth_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SIPOutboundTrunkInfo, _impl_.media_encryption_)
      + sizeof(SIPOutboundTrunkInfo::_impl_.media_encryption_)
      - PROTOBUF_FIELD_OFFSET(SIPOutboundTrunkInfo, _impl_.transport_)>(
          reinterpret_cast<char*>(&_impl_.transport_),
          reinterpret_cast<char*>(&other->_impl_.transport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundTrunkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[12]);
}

// ===================================================================

class GetSIPInboundTrunkRequest::_Internal {
 public:
};

GetSIPInboundTrunkRequest::GetSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.GetSIPInboundTrunkRequest)
}
GetSIPInboundTrunkRequest::GetSIPInboundTrunkRequest(const GetSIPInboundTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSIPInboundTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_trunk_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.GetSIPInboundTrunkRequest)
}

inline void GetSIPInboundTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_trunk_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSIPInboundTrunkRequest::~GetSIPInboundTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.GetSIPInboundTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSIPInboundTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sip_trunk_id_.Destroy();
}

void GetSIPInboundTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSIPInboundTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.GetSIPInboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sip_trunk_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSIPInboundTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.GetSIPInboundTrunkRequest.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSIPInboundTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.GetSIPInboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.GetSIPInboundTrunkRequest.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.GetSIPInboundTrunkRequest)
  return target;
}

size_t GetSIPInboundTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.GetSIPInboundTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSIPInboundTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSIPInboundTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSIPInboundTrunkRequest::GetClassData() const { return &_class_data_; }


void GetSIPInboundTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSIPInboundTrunkRequest*>(&to_msg);
  auto& from = static_cast<const GetSIPInboundTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.GetSIPInboundTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSIPInboundTrunkRequest::CopyFrom(const GetSIPInboundTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.GetSIPInboundTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSIPInboundTrunkRequest::IsInitialized() const {
  return true;
}

void GetSIPInboundTrunkRequest::InternalSwap(GetSIPInboundTrunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSIPInboundTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[13]);
}

// ===================================================================

class GetSIPInboundTrunkResponse::_Internal {
 public:
  static const ::livekit::SIPInboundTrunkInfo& trunk(const GetSIPInboundTrunkResponse* msg);
};

const ::livekit::SIPInboundTrunkInfo&
GetSIPInboundTrunkResponse::_Internal::trunk(const GetSIPInboundTrunkResponse* msg) {
  return *msg->_impl_.trunk_;
}
GetSIPInboundTrunkResponse::GetSIPInboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.GetSIPInboundTrunkResponse)
}
GetSIPInboundTrunkResponse::GetSIPInboundTrunkResponse(const GetSIPInboundTrunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSIPInboundTrunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trunk()) {
    _this->_impl_.trunk_ = new ::livekit::SIPInboundTrunkInfo(*from._impl_.trunk_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.GetSIPInboundTrunkResponse)
}

inline void GetSIPInboundTrunkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSIPInboundTrunkResponse::~GetSIPInboundTrunkResponse() {
  // @@protoc_insertion_point(destructor:livekit.GetSIPInboundTrunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSIPInboundTrunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trunk_;
}

void GetSIPInboundTrunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSIPInboundTrunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.GetSIPInboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSIPInboundTrunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPInboundTrunkInfo trunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSIPInboundTrunkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.GetSIPInboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPInboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trunk(this),
        _Internal::trunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.GetSIPInboundTrunkResponse)
  return target;
}

size_t GetSIPInboundTrunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.GetSIPInboundTrunkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.SIPInboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSIPInboundTrunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSIPInboundTrunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSIPInboundTrunkResponse::GetClassData() const { return &_class_data_; }


void GetSIPInboundTrunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSIPInboundTrunkResponse*>(&to_msg);
  auto& from = static_cast<const GetSIPInboundTrunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.GetSIPInboundTrunkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trunk()) {
    _this->_internal_mutable_trunk()->::livekit::SIPInboundTrunkInfo::MergeFrom(
        from._internal_trunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSIPInboundTrunkResponse::CopyFrom(const GetSIPInboundTrunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.GetSIPInboundTrunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSIPInboundTrunkResponse::IsInitialized() const {
  return true;
}

void GetSIPInboundTrunkResponse::InternalSwap(GetSIPInboundTrunkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.trunk_, other->_impl_.trunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSIPInboundTrunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[14]);
}

// ===================================================================

class GetSIPOutboundTrunkRequest::_Internal {
 public:
};

GetSIPOutboundTrunkRequest::GetSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.GetSIPOutboundTrunkRequest)
}
GetSIPOutboundTrunkRequest::GetSIPOutboundTrunkRequest(const GetSIPOutboundTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSIPOutboundTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_trunk_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.GetSIPOutboundTrunkRequest)
}

inline void GetSIPOutboundTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_trunk_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSIPOutboundTrunkRequest::~GetSIPOutboundTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.GetSIPOutboundTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSIPOutboundTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sip_trunk_id_.Destroy();
}

void GetSIPOutboundTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSIPOutboundTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.GetSIPOutboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sip_trunk_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSIPOutboundTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.GetSIPOutboundTrunkRequest.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSIPOutboundTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.GetSIPOutboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.GetSIPOutboundTrunkRequest.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.GetSIPOutboundTrunkRequest)
  return target;
}

size_t GetSIPOutboundTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.GetSIPOutboundTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSIPOutboundTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSIPOutboundTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSIPOutboundTrunkRequest::GetClassData() const { return &_class_data_; }


void GetSIPOutboundTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSIPOutboundTrunkRequest*>(&to_msg);
  auto& from = static_cast<const GetSIPOutboundTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.GetSIPOutboundTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSIPOutboundTrunkRequest::CopyFrom(const GetSIPOutboundTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.GetSIPOutboundTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSIPOutboundTrunkRequest::IsInitialized() const {
  return true;
}

void GetSIPOutboundTrunkRequest::InternalSwap(GetSIPOutboundTrunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSIPOutboundTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[15]);
}

// ===================================================================

class GetSIPOutboundTrunkResponse::_Internal {
 public:
  static const ::livekit::SIPOutboundTrunkInfo& trunk(const GetSIPOutboundTrunkResponse* msg);
};

const ::livekit::SIPOutboundTrunkInfo&
GetSIPOutboundTrunkResponse::_Internal::trunk(const GetSIPOutboundTrunkResponse* msg) {
  return *msg->_impl_.trunk_;
}
GetSIPOutboundTrunkResponse::GetSIPOutboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.GetSIPOutboundTrunkResponse)
}
GetSIPOutboundTrunkResponse::GetSIPOutboundTrunkResponse(const GetSIPOutboundTrunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSIPOutboundTrunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trunk()) {
    _this->_impl_.trunk_ = new ::livekit::SIPOutboundTrunkInfo(*from._impl_.trunk_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.GetSIPOutboundTrunkResponse)
}

inline void GetSIPOutboundTrunkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSIPOutboundTrunkResponse::~GetSIPOutboundTrunkResponse() {
  // @@protoc_insertion_point(destructor:livekit.GetSIPOutboundTrunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSIPOutboundTrunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trunk_;
}

void GetSIPOutboundTrunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSIPOutboundTrunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.GetSIPOutboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSIPOutboundTrunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPOutboundTrunkInfo trunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSIPOutboundTrunkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.GetSIPOutboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPOutboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trunk(this),
        _Internal::trunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.GetSIPOutboundTrunkResponse)
  return target;
}

size_t GetSIPOutboundTrunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.GetSIPOutboundTrunkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.SIPOutboundTrunkInfo trunk = 1;
  if (this->_internal_has_trunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSIPOutboundTrunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSIPOutboundTrunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSIPOutboundTrunkResponse::GetClassData() const { return &_class_data_; }


void GetSIPOutboundTrunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSIPOutboundTrunkResponse*>(&to_msg);
  auto& from = static_cast<const GetSIPOutboundTrunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.GetSIPOutboundTrunkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trunk()) {
    _this->_internal_mutable_trunk()->::livekit::SIPOutboundTrunkInfo::MergeFrom(
        from._internal_trunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSIPOutboundTrunkResponse::CopyFrom(const GetSIPOutboundTrunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.GetSIPOutboundTrunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSIPOutboundTrunkResponse::IsInitialized() const {
  return true;
}

void GetSIPOutboundTrunkResponse::InternalSwap(GetSIPOutboundTrunkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.trunk_, other->_impl_.trunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSIPOutboundTrunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[16]);
}

// ===================================================================

class ListSIPTrunkRequest::_Internal {
 public:
  static const ::livekit::Pagination& page(const ListSIPTrunkRequest* msg);
};

const ::livekit::Pagination&
ListSIPTrunkRequest::_Internal::page(const ListSIPTrunkRequest* msg) {
  return *msg->_impl_.page_;
}
void ListSIPTrunkRequest::clear_page() {
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
}
ListSIPTrunkRequest::ListSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPTrunkRequest)
}
ListSIPTrunkRequest::ListSIPTrunkRequest(const ListSIPTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page()) {
    _this->_impl_.page_ = new ::livekit::Pagination(*from._impl_.page_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPTrunkRequest)
}

inline void ListSIPTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPTrunkRequest::~ListSIPTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.page_;
}

void ListSIPTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Pagination page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_page(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Pagination page = 1;
  if (this->_internal_has_page()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPTrunkRequest)
  return target;
}

size_t ListSIPTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.Pagination page = 1;
  if (this->_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPTrunkRequest::GetClassData() const { return &_class_data_; }


void ListSIPTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPTrunkRequest*>(&to_msg);
  auto& from = static_cast<const ListSIPTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_page()) {
    _this->_internal_mutable_page()->::livekit::Pagination::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPTrunkRequest::CopyFrom(const ListSIPTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPTrunkRequest::IsInitialized() const {
  return true;
}

void ListSIPTrunkRequest::InternalSwap(ListSIPTrunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[17]);
}

// ===================================================================

class ListSIPTrunkResponse::_Internal {
 public:
};

ListSIPTrunkResponse::ListSIPTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPTrunkResponse)
}
ListSIPTrunkResponse::ListSIPTrunkResponse(const ListSIPTrunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPTrunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPTrunkResponse)
}

inline void ListSIPTrunkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPTrunkResponse::~ListSIPTrunkResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPTrunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPTrunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListSIPTrunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPTrunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPTrunkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPTrunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SIPTrunkInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPTrunkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPTrunkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SIPTrunkInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPTrunkResponse)
  return target;
}

size_t ListSIPTrunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPTrunkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SIPTrunkInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPTrunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPTrunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPTrunkResponse::GetClassData() const { return &_class_data_; }


void ListSIPTrunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPTrunkResponse*>(&to_msg);
  auto& from = static_cast<const ListSIPTrunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPTrunkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPTrunkResponse::CopyFrom(const ListSIPTrunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPTrunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPTrunkResponse::IsInitialized() const {
  return true;
}

void ListSIPTrunkResponse::InternalSwap(ListSIPTrunkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPTrunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[18]);
}

// ===================================================================

class ListSIPInboundTrunkRequest::_Internal {
 public:
  static const ::livekit::Pagination& page(const ListSIPInboundTrunkRequest* msg);
};

const ::livekit::Pagination&
ListSIPInboundTrunkRequest::_Internal::page(const ListSIPInboundTrunkRequest* msg) {
  return *msg->_impl_.page_;
}
void ListSIPInboundTrunkRequest::clear_page() {
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
}
ListSIPInboundTrunkRequest::ListSIPInboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPInboundTrunkRequest)
}
ListSIPInboundTrunkRequest::ListSIPInboundTrunkRequest(const ListSIPInboundTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPInboundTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){from._impl_.trunk_ids_}
    , decltype(_impl_.numbers_){from._impl_.numbers_}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page()) {
    _this->_impl_.page_ = new ::livekit::Pagination(*from._impl_.page_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPInboundTrunkRequest)
}

inline void ListSIPInboundTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){arena}
    , decltype(_impl_.numbers_){arena}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPInboundTrunkRequest::~ListSIPInboundTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPInboundTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPInboundTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trunk_ids_.~RepeatedPtrField();
  _impl_.numbers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.page_;
}

void ListSIPInboundTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPInboundTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPInboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trunk_ids_.Clear();
  _impl_.numbers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPInboundTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string trunk_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_trunk_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListSIPInboundTrunkRequest.trunk_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string numbers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListSIPInboundTrunkRequest.numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.Pagination page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_page(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPInboundTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPInboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string trunk_ids = 1;
  for (int i = 0, n = this->_internal_trunk_ids_size(); i < n; i++) {
    const auto& s = this->_internal_trunk_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListSIPInboundTrunkRequest.trunk_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string numbers = 2;
  for (int i = 0, n = this->_internal_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListSIPInboundTrunkRequest.numbers");
    target = stream->WriteString(2, s, target);
  }

  // .livekit.Pagination page = 3;
  if (this->_internal_has_page()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPInboundTrunkRequest)
  return target;
}

size_t ListSIPInboundTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPInboundTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string trunk_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.trunk_ids_.size());
  for (int i = 0, n = _impl_.trunk_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.trunk_ids_.Get(i));
  }

  // repeated string numbers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.numbers_.size());
  for (int i = 0, n = _impl_.numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.numbers_.Get(i));
  }

  // .livekit.Pagination page = 3;
  if (this->_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPInboundTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPInboundTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPInboundTrunkRequest::GetClassData() const { return &_class_data_; }


void ListSIPInboundTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPInboundTrunkRequest*>(&to_msg);
  auto& from = static_cast<const ListSIPInboundTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPInboundTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trunk_ids_.MergeFrom(from._impl_.trunk_ids_);
  _this->_impl_.numbers_.MergeFrom(from._impl_.numbers_);
  if (from._internal_has_page()) {
    _this->_internal_mutable_page()->::livekit::Pagination::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPInboundTrunkRequest::CopyFrom(const ListSIPInboundTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPInboundTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPInboundTrunkRequest::IsInitialized() const {
  return true;
}

void ListSIPInboundTrunkRequest::InternalSwap(ListSIPInboundTrunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trunk_ids_.InternalSwap(&other->_impl_.trunk_ids_);
  _impl_.numbers_.InternalSwap(&other->_impl_.numbers_);
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPInboundTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[19]);
}

// ===================================================================

class ListSIPInboundTrunkResponse::_Internal {
 public:
};

ListSIPInboundTrunkResponse::ListSIPInboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPInboundTrunkResponse)
}
ListSIPInboundTrunkResponse::ListSIPInboundTrunkResponse(const ListSIPInboundTrunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPInboundTrunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPInboundTrunkResponse)
}

inline void ListSIPInboundTrunkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPInboundTrunkResponse::~ListSIPInboundTrunkResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPInboundTrunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPInboundTrunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListSIPInboundTrunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPInboundTrunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPInboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPInboundTrunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SIPInboundTrunkInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPInboundTrunkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPInboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SIPInboundTrunkInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPInboundTrunkResponse)
  return target;
}

size_t ListSIPInboundTrunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPInboundTrunkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SIPInboundTrunkInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPInboundTrunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPInboundTrunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPInboundTrunkResponse::GetClassData() const { return &_class_data_; }


void ListSIPInboundTrunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPInboundTrunkResponse*>(&to_msg);
  auto& from = static_cast<const ListSIPInboundTrunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPInboundTrunkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPInboundTrunkResponse::CopyFrom(const ListSIPInboundTrunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPInboundTrunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPInboundTrunkResponse::IsInitialized() const {
  return true;
}

void ListSIPInboundTrunkResponse::InternalSwap(ListSIPInboundTrunkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPInboundTrunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[20]);
}

// ===================================================================

class ListSIPOutboundTrunkRequest::_Internal {
 public:
  static const ::livekit::Pagination& page(const ListSIPOutboundTrunkRequest* msg);
};

const ::livekit::Pagination&
ListSIPOutboundTrunkRequest::_Internal::page(const ListSIPOutboundTrunkRequest* msg) {
  return *msg->_impl_.page_;
}
void ListSIPOutboundTrunkRequest::clear_page() {
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
}
ListSIPOutboundTrunkRequest::ListSIPOutboundTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPOutboundTrunkRequest)
}
ListSIPOutboundTrunkRequest::ListSIPOutboundTrunkRequest(const ListSIPOutboundTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPOutboundTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){from._impl_.trunk_ids_}
    , decltype(_impl_.numbers_){from._impl_.numbers_}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page()) {
    _this->_impl_.page_ = new ::livekit::Pagination(*from._impl_.page_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPOutboundTrunkRequest)
}

inline void ListSIPOutboundTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){arena}
    , decltype(_impl_.numbers_){arena}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPOutboundTrunkRequest::~ListSIPOutboundTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPOutboundTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPOutboundTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trunk_ids_.~RepeatedPtrField();
  _impl_.numbers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.page_;
}

void ListSIPOutboundTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPOutboundTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPOutboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trunk_ids_.Clear();
  _impl_.numbers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPOutboundTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string trunk_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_trunk_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListSIPOutboundTrunkRequest.trunk_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string numbers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListSIPOutboundTrunkRequest.numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.Pagination page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_page(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPOutboundTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPOutboundTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string trunk_ids = 1;
  for (int i = 0, n = this->_internal_trunk_ids_size(); i < n; i++) {
    const auto& s = this->_internal_trunk_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListSIPOutboundTrunkRequest.trunk_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string numbers = 2;
  for (int i = 0, n = this->_internal_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListSIPOutboundTrunkRequest.numbers");
    target = stream->WriteString(2, s, target);
  }

  // .livekit.Pagination page = 3;
  if (this->_internal_has_page()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPOutboundTrunkRequest)
  return target;
}

size_t ListSIPOutboundTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPOutboundTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string trunk_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.trunk_ids_.size());
  for (int i = 0, n = _impl_.trunk_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.trunk_ids_.Get(i));
  }

  // repeated string numbers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.numbers_.size());
  for (int i = 0, n = _impl_.numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.numbers_.Get(i));
  }

  // .livekit.Pagination page = 3;
  if (this->_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPOutboundTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPOutboundTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPOutboundTrunkRequest::GetClassData() const { return &_class_data_; }


void ListSIPOutboundTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPOutboundTrunkRequest*>(&to_msg);
  auto& from = static_cast<const ListSIPOutboundTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPOutboundTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trunk_ids_.MergeFrom(from._impl_.trunk_ids_);
  _this->_impl_.numbers_.MergeFrom(from._impl_.numbers_);
  if (from._internal_has_page()) {
    _this->_internal_mutable_page()->::livekit::Pagination::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPOutboundTrunkRequest::CopyFrom(const ListSIPOutboundTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPOutboundTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPOutboundTrunkRequest::IsInitialized() const {
  return true;
}

void ListSIPOutboundTrunkRequest::InternalSwap(ListSIPOutboundTrunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trunk_ids_.InternalSwap(&other->_impl_.trunk_ids_);
  _impl_.numbers_.InternalSwap(&other->_impl_.numbers_);
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPOutboundTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[21]);
}

// ===================================================================

class ListSIPOutboundTrunkResponse::_Internal {
 public:
};

ListSIPOutboundTrunkResponse::ListSIPOutboundTrunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPOutboundTrunkResponse)
}
ListSIPOutboundTrunkResponse::ListSIPOutboundTrunkResponse(const ListSIPOutboundTrunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPOutboundTrunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPOutboundTrunkResponse)
}

inline void ListSIPOutboundTrunkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPOutboundTrunkResponse::~ListSIPOutboundTrunkResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPOutboundTrunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPOutboundTrunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListSIPOutboundTrunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPOutboundTrunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPOutboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPOutboundTrunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SIPOutboundTrunkInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPOutboundTrunkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPOutboundTrunkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SIPOutboundTrunkInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPOutboundTrunkResponse)
  return target;
}

size_t ListSIPOutboundTrunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPOutboundTrunkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SIPOutboundTrunkInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPOutboundTrunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPOutboundTrunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPOutboundTrunkResponse::GetClassData() const { return &_class_data_; }


void ListSIPOutboundTrunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPOutboundTrunkResponse*>(&to_msg);
  auto& from = static_cast<const ListSIPOutboundTrunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPOutboundTrunkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPOutboundTrunkResponse::CopyFrom(const ListSIPOutboundTrunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPOutboundTrunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPOutboundTrunkResponse::IsInitialized() const {
  return true;
}

void ListSIPOutboundTrunkResponse::InternalSwap(ListSIPOutboundTrunkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPOutboundTrunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[22]);
}

// ===================================================================

class DeleteSIPTrunkRequest::_Internal {
 public:
};

DeleteSIPTrunkRequest::DeleteSIPTrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DeleteSIPTrunkRequest)
}
DeleteSIPTrunkRequest::DeleteSIPTrunkRequest(const DeleteSIPTrunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteSIPTrunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_trunk_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DeleteSIPTrunkRequest)
}

inline void DeleteSIPTrunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_trunk_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteSIPTrunkRequest::~DeleteSIPTrunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.DeleteSIPTrunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteSIPTrunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sip_trunk_id_.Destroy();
}

void DeleteSIPTrunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteSIPTrunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DeleteSIPTrunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sip_trunk_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSIPTrunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DeleteSIPTrunkRequest.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSIPTrunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DeleteSIPTrunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DeleteSIPTrunkRequest.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DeleteSIPTrunkRequest)
  return target;
}

size_t DeleteSIPTrunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DeleteSIPTrunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSIPTrunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteSIPTrunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSIPTrunkRequest::GetClassData() const { return &_class_data_; }


void DeleteSIPTrunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteSIPTrunkRequest*>(&to_msg);
  auto& from = static_cast<const DeleteSIPTrunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DeleteSIPTrunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSIPTrunkRequest::CopyFrom(const DeleteSIPTrunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DeleteSIPTrunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSIPTrunkRequest::IsInitialized() const {
  return true;
}

void DeleteSIPTrunkRequest::InternalSwap(DeleteSIPTrunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSIPTrunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[23]);
}

// ===================================================================

class SIPDispatchRuleDirect::_Internal {
 public:
};

SIPDispatchRuleDirect::SIPDispatchRuleDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPDispatchRuleDirect)
}
SIPDispatchRuleDirect::SIPDispatchRuleDirect(const SIPDispatchRuleDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPDispatchRuleDirect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.pin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pin().empty()) {
    _this->_impl_.pin_.Set(from._internal_pin(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SIPDispatchRuleDirect)
}

inline void SIPDispatchRuleDirect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.pin_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPDispatchRuleDirect::~SIPDispatchRuleDirect() {
  // @@protoc_insertion_point(destructor:livekit.SIPDispatchRuleDirect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPDispatchRuleDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  _impl_.pin_.Destroy();
}

void SIPDispatchRuleDirect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPDispatchRuleDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPDispatchRuleDirect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.pin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPDispatchRuleDirect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleDirect.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleDirect.pin"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPDispatchRuleDirect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPDispatchRuleDirect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleDirect.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleDirect.pin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPDispatchRuleDirect)
  return target;
}

size_t SIPDispatchRuleDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPDispatchRuleDirect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPDispatchRuleDirect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPDispatchRuleDirect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPDispatchRuleDirect::GetClassData() const { return &_class_data_; }


void SIPDispatchRuleDirect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPDispatchRuleDirect*>(&to_msg);
  auto& from = static_cast<const SIPDispatchRuleDirect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPDispatchRuleDirect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_pin().empty()) {
    _this->_internal_set_pin(from._internal_pin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPDispatchRuleDirect::CopyFrom(const SIPDispatchRuleDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPDispatchRuleDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPDispatchRuleDirect::IsInitialized() const {
  return true;
}

void SIPDispatchRuleDirect::InternalSwap(SIPDispatchRuleDirect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pin_, lhs_arena,
      &other->_impl_.pin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPDispatchRuleDirect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[24]);
}

// ===================================================================

class SIPDispatchRuleIndividual::_Internal {
 public:
};

SIPDispatchRuleIndividual::SIPDispatchRuleIndividual(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPDispatchRuleIndividual)
}
SIPDispatchRuleIndividual::SIPDispatchRuleIndividual(const SIPDispatchRuleIndividual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPDispatchRuleIndividual* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_prefix_){}
    , decltype(_impl_.pin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_prefix().empty()) {
    _this->_impl_.room_prefix_.Set(from._internal_room_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pin().empty()) {
    _this->_impl_.pin_.Set(from._internal_pin(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SIPDispatchRuleIndividual)
}

inline void SIPDispatchRuleIndividual::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_prefix_){}
    , decltype(_impl_.pin_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPDispatchRuleIndividual::~SIPDispatchRuleIndividual() {
  // @@protoc_insertion_point(destructor:livekit.SIPDispatchRuleIndividual)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPDispatchRuleIndividual::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_prefix_.Destroy();
  _impl_.pin_.Destroy();
}

void SIPDispatchRuleIndividual::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPDispatchRuleIndividual::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPDispatchRuleIndividual)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_prefix_.ClearToEmpty();
  _impl_.pin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPDispatchRuleIndividual::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleIndividual.room_prefix"));
        } else
          goto handle_unusual;
        continue;
      // string pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleIndividual.pin"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPDispatchRuleIndividual::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPDispatchRuleIndividual)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_prefix = 1;
  if (!this->_internal_room_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_prefix().data(), static_cast<int>(this->_internal_room_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleIndividual.room_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_prefix(), target);
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleIndividual.pin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPDispatchRuleIndividual)
  return target;
}

size_t SIPDispatchRuleIndividual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPDispatchRuleIndividual)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_prefix = 1;
  if (!this->_internal_room_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_prefix());
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPDispatchRuleIndividual::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPDispatchRuleIndividual::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPDispatchRuleIndividual::GetClassData() const { return &_class_data_; }


void SIPDispatchRuleIndividual::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPDispatchRuleIndividual*>(&to_msg);
  auto& from = static_cast<const SIPDispatchRuleIndividual&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPDispatchRuleIndividual)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_prefix().empty()) {
    _this->_internal_set_room_prefix(from._internal_room_prefix());
  }
  if (!from._internal_pin().empty()) {
    _this->_internal_set_pin(from._internal_pin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPDispatchRuleIndividual::CopyFrom(const SIPDispatchRuleIndividual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPDispatchRuleIndividual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPDispatchRuleIndividual::IsInitialized() const {
  return true;
}

void SIPDispatchRuleIndividual::InternalSwap(SIPDispatchRuleIndividual* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_prefix_, lhs_arena,
      &other->_impl_.room_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pin_, lhs_arena,
      &other->_impl_.pin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPDispatchRuleIndividual::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[25]);
}

// ===================================================================

class SIPDispatchRuleCallee::_Internal {
 public:
};

SIPDispatchRuleCallee::SIPDispatchRuleCallee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPDispatchRuleCallee)
}
SIPDispatchRuleCallee::SIPDispatchRuleCallee(const SIPDispatchRuleCallee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPDispatchRuleCallee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_prefix_){}
    , decltype(_impl_.pin_){}
    , decltype(_impl_.randomize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_prefix().empty()) {
    _this->_impl_.room_prefix_.Set(from._internal_room_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pin().empty()) {
    _this->_impl_.pin_.Set(from._internal_pin(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.randomize_ = from._impl_.randomize_;
  // @@protoc_insertion_point(copy_constructor:livekit.SIPDispatchRuleCallee)
}

inline void SIPDispatchRuleCallee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_prefix_){}
    , decltype(_impl_.pin_){}
    , decltype(_impl_.randomize_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPDispatchRuleCallee::~SIPDispatchRuleCallee() {
  // @@protoc_insertion_point(destructor:livekit.SIPDispatchRuleCallee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPDispatchRuleCallee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_prefix_.Destroy();
  _impl_.pin_.Destroy();
}

void SIPDispatchRuleCallee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPDispatchRuleCallee::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPDispatchRuleCallee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_prefix_.ClearToEmpty();
  _impl_.pin_.ClearToEmpty();
  _impl_.randomize_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPDispatchRuleCallee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleCallee.room_prefix"));
        } else
          goto handle_unusual;
        continue;
      // string pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleCallee.pin"));
        } else
          goto handle_unusual;
        continue;
      // bool randomize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.randomize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPDispatchRuleCallee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPDispatchRuleCallee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_prefix = 1;
  if (!this->_internal_room_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_prefix().data(), static_cast<int>(this->_internal_room_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleCallee.room_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_prefix(), target);
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleCallee.pin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pin(), target);
  }

  // bool randomize = 3;
  if (this->_internal_randomize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_randomize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPDispatchRuleCallee)
  return target;
}

size_t SIPDispatchRuleCallee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPDispatchRuleCallee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_prefix = 1;
  if (!this->_internal_room_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_prefix());
  }

  // string pin = 2;
  if (!this->_internal_pin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }

  // bool randomize = 3;
  if (this->_internal_randomize() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPDispatchRuleCallee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPDispatchRuleCallee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPDispatchRuleCallee::GetClassData() const { return &_class_data_; }


void SIPDispatchRuleCallee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPDispatchRuleCallee*>(&to_msg);
  auto& from = static_cast<const SIPDispatchRuleCallee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPDispatchRuleCallee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_prefix().empty()) {
    _this->_internal_set_room_prefix(from._internal_room_prefix());
  }
  if (!from._internal_pin().empty()) {
    _this->_internal_set_pin(from._internal_pin());
  }
  if (from._internal_randomize() != 0) {
    _this->_internal_set_randomize(from._internal_randomize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPDispatchRuleCallee::CopyFrom(const SIPDispatchRuleCallee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPDispatchRuleCallee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPDispatchRuleCallee::IsInitialized() const {
  return true;
}

void SIPDispatchRuleCallee::InternalSwap(SIPDispatchRuleCallee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_prefix_, lhs_arena,
      &other->_impl_.room_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pin_, lhs_arena,
      &other->_impl_.pin_, rhs_arena
  );
  swap(_impl_.randomize_, other->_impl_.randomize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPDispatchRuleCallee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[26]);
}

// ===================================================================

class SIPDispatchRule::_Internal {
 public:
  static const ::livekit::SIPDispatchRuleDirect& dispatch_rule_direct(const SIPDispatchRule* msg);
  static const ::livekit::SIPDispatchRuleIndividual& dispatch_rule_individual(const SIPDispatchRule* msg);
  static const ::livekit::SIPDispatchRuleCallee& dispatch_rule_callee(const SIPDispatchRule* msg);
};

const ::livekit::SIPDispatchRuleDirect&
SIPDispatchRule::_Internal::dispatch_rule_direct(const SIPDispatchRule* msg) {
  return *msg->_impl_.rule_.dispatch_rule_direct_;
}
const ::livekit::SIPDispatchRuleIndividual&
SIPDispatchRule::_Internal::dispatch_rule_individual(const SIPDispatchRule* msg) {
  return *msg->_impl_.rule_.dispatch_rule_individual_;
}
const ::livekit::SIPDispatchRuleCallee&
SIPDispatchRule::_Internal::dispatch_rule_callee(const SIPDispatchRule* msg) {
  return *msg->_impl_.rule_.dispatch_rule_callee_;
}
void SIPDispatchRule::set_allocated_dispatch_rule_direct(::livekit::SIPDispatchRuleDirect* dispatch_rule_direct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rule();
  if (dispatch_rule_direct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dispatch_rule_direct);
    if (message_arena != submessage_arena) {
      dispatch_rule_direct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispatch_rule_direct, submessage_arena);
    }
    set_has_dispatch_rule_direct();
    _impl_.rule_.dispatch_rule_direct_ = dispatch_rule_direct;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRule.dispatch_rule_direct)
}
void SIPDispatchRule::set_allocated_dispatch_rule_individual(::livekit::SIPDispatchRuleIndividual* dispatch_rule_individual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rule();
  if (dispatch_rule_individual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dispatch_rule_individual);
    if (message_arena != submessage_arena) {
      dispatch_rule_individual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispatch_rule_individual, submessage_arena);
    }
    set_has_dispatch_rule_individual();
    _impl_.rule_.dispatch_rule_individual_ = dispatch_rule_individual;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRule.dispatch_rule_individual)
}
void SIPDispatchRule::set_allocated_dispatch_rule_callee(::livekit::SIPDispatchRuleCallee* dispatch_rule_callee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rule();
  if (dispatch_rule_callee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dispatch_rule_callee);
    if (message_arena != submessage_arena) {
      dispatch_rule_callee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispatch_rule_callee, submessage_arena);
    }
    set_has_dispatch_rule_callee();
    _impl_.rule_.dispatch_rule_callee_ = dispatch_rule_callee;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SIPDispatchRule.dispatch_rule_callee)
}
SIPDispatchRule::SIPDispatchRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPDispatchRule)
}
SIPDispatchRule::SIPDispatchRule(const SIPDispatchRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPDispatchRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rule();
  switch (from.rule_case()) {
    case kDispatchRuleDirect: {
      _this->_internal_mutable_dispatch_rule_direct()->::livekit::SIPDispatchRuleDirect::MergeFrom(
          from._internal_dispatch_rule_direct());
      break;
    }
    case kDispatchRuleIndividual: {
      _this->_internal_mutable_dispatch_rule_individual()->::livekit::SIPDispatchRuleIndividual::MergeFrom(
          from._internal_dispatch_rule_individual());
      break;
    }
    case kDispatchRuleCallee: {
      _this->_internal_mutable_dispatch_rule_callee()->::livekit::SIPDispatchRuleCallee::MergeFrom(
          from._internal_dispatch_rule_callee());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SIPDispatchRule)
}

inline void SIPDispatchRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_rule();
}

SIPDispatchRule::~SIPDispatchRule() {
  // @@protoc_insertion_point(destructor:livekit.SIPDispatchRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPDispatchRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_rule()) {
    clear_rule();
  }
}

void SIPDispatchRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPDispatchRule::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SIPDispatchRule)
  switch (rule_case()) {
    case kDispatchRuleDirect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rule_.dispatch_rule_direct_;
      }
      break;
    }
    case kDispatchRuleIndividual: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rule_.dispatch_rule_individual_;
      }
      break;
    }
    case kDispatchRuleCallee: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rule_.dispatch_rule_callee_;
      }
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RULE_NOT_SET;
}


void SIPDispatchRule::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPDispatchRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rule();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPDispatchRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPDispatchRuleDirect dispatch_rule_direct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispatch_rule_direct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPDispatchRuleIndividual dispatch_rule_individual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispatch_rule_individual(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPDispatchRuleCallee dispatch_rule_callee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispatch_rule_callee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPDispatchRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPDispatchRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPDispatchRuleDirect dispatch_rule_direct = 1;
  if (_internal_has_dispatch_rule_direct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dispatch_rule_direct(this),
        _Internal::dispatch_rule_direct(this).GetCachedSize(), target, stream);
  }

  // .livekit.SIPDispatchRuleIndividual dispatch_rule_individual = 2;
  if (_internal_has_dispatch_rule_individual()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dispatch_rule_individual(this),
        _Internal::dispatch_rule_individual(this).GetCachedSize(), target, stream);
  }

  // .livekit.SIPDispatchRuleCallee dispatch_rule_callee = 3;
  if (_internal_has_dispatch_rule_callee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dispatch_rule_callee(this),
        _Internal::dispatch_rule_callee(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPDispatchRule)
  return target;
}

size_t SIPDispatchRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPDispatchRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rule_case()) {
    // .livekit.SIPDispatchRuleDirect dispatch_rule_direct = 1;
    case kDispatchRuleDirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rule_.dispatch_rule_direct_);
      break;
    }
    // .livekit.SIPDispatchRuleIndividual dispatch_rule_individual = 2;
    case kDispatchRuleIndividual: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rule_.dispatch_rule_individual_);
      break;
    }
    // .livekit.SIPDispatchRuleCallee dispatch_rule_callee = 3;
    case kDispatchRuleCallee: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rule_.dispatch_rule_callee_);
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPDispatchRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPDispatchRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPDispatchRule::GetClassData() const { return &_class_data_; }


void SIPDispatchRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPDispatchRule*>(&to_msg);
  auto& from = static_cast<const SIPDispatchRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPDispatchRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rule_case()) {
    case kDispatchRuleDirect: {
      _this->_internal_mutable_dispatch_rule_direct()->::livekit::SIPDispatchRuleDirect::MergeFrom(
          from._internal_dispatch_rule_direct());
      break;
    }
    case kDispatchRuleIndividual: {
      _this->_internal_mutable_dispatch_rule_individual()->::livekit::SIPDispatchRuleIndividual::MergeFrom(
          from._internal_dispatch_rule_individual());
      break;
    }
    case kDispatchRuleCallee: {
      _this->_internal_mutable_dispatch_rule_callee()->::livekit::SIPDispatchRuleCallee::MergeFrom(
          from._internal_dispatch_rule_callee());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPDispatchRule::CopyFrom(const SIPDispatchRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPDispatchRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPDispatchRule::IsInitialized() const {
  return true;
}

void SIPDispatchRule::InternalSwap(SIPDispatchRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rule_, other->_impl_.rule_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPDispatchRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[27]);
}

// ===================================================================

CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse() {}
CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::MergeFrom(const CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[28]);
}

// ===================================================================

class CreateSIPDispatchRuleRequest::_Internal {
 public:
  static const ::livekit::SIPDispatchRule& rule(const CreateSIPDispatchRuleRequest* msg);
  static const ::livekit::RoomConfiguration& room_config(const CreateSIPDispatchRuleRequest* msg);
};

const ::livekit::SIPDispatchRule&
CreateSIPDispatchRuleRequest::_Internal::rule(const CreateSIPDispatchRuleRequest* msg) {
  return *msg->_impl_.rule_;
}
const ::livekit::RoomConfiguration&
CreateSIPDispatchRuleRequest::_Internal::room_config(const CreateSIPDispatchRuleRequest* msg) {
  return *msg->_impl_.room_config_;
}
void CreateSIPDispatchRuleRequest::clear_room_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_config_ != nullptr) {
    delete _impl_.room_config_;
  }
  _impl_.room_config_ = nullptr;
}
CreateSIPDispatchRuleRequest::CreateSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CreateSIPDispatchRuleRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.CreateSIPDispatchRuleRequest)
}
CreateSIPDispatchRuleRequest::CreateSIPDispatchRuleRequest(const CreateSIPDispatchRuleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSIPDispatchRuleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){from._impl_.trunk_ids_}
    , decltype(_impl_.inbound_numbers_){from._impl_.inbound_numbers_}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.room_preset_){}
    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.room_config_){nullptr}
    , decltype(_impl_.hide_phone_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_preset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_preset().empty()) {
    _this->_impl_.room_preset_.Set(from._internal_room_preset(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rule()) {
    _this->_impl_.rule_ = new ::livekit::SIPDispatchRule(*from._impl_.rule_);
  }
  if (from._internal_has_room_config()) {
    _this->_impl_.room_config_ = new ::livekit::RoomConfiguration(*from._impl_.room_config_);
  }
  _this->_impl_.hide_phone_number_ = from._impl_.hide_phone_number_;
  // @@protoc_insertion_point(copy_constructor:livekit.CreateSIPDispatchRuleRequest)
}

inline void CreateSIPDispatchRuleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){arena}
    , decltype(_impl_.inbound_numbers_){arena}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.room_preset_){}
    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.room_config_){nullptr}
    , decltype(_impl_.hide_phone_number_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_preset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSIPDispatchRuleRequest::~CreateSIPDispatchRuleRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateSIPDispatchRuleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CreateSIPDispatchRuleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trunk_ids_.~RepeatedPtrField();
  _impl_.inbound_numbers_.~RepeatedPtrField();
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.room_preset_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rule_;
  if (this != internal_default_instance()) delete _impl_.room_config_;
}

void CreateSIPDispatchRuleRequest::ArenaDtor(void* object) {
  CreateSIPDispatchRuleRequest* _this = reinterpret_cast< CreateSIPDispatchRuleRequest* >(object);
  _this->_impl_.attributes_.Destruct();
}
void CreateSIPDispatchRuleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSIPDispatchRuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateSIPDispatchRuleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trunk_ids_.Clear();
  _impl_.inbound_numbers_.Clear();
  _impl_.attributes_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.room_preset_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rule_ != nullptr) {
    delete _impl_.rule_;
  }
  _impl_.rule_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.room_config_ != nullptr) {
    delete _impl_.room_config_;
  }
  _impl_.room_config_ = nullptr;
  _impl_.hide_phone_number_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSIPDispatchRuleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SIPDispatchRule rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string trunk_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_trunk_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPDispatchRuleRequest.trunk_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool hide_phone_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hide_phone_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPDispatchRuleRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPDispatchRuleRequest.metadata"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_numbers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPDispatchRuleRequest.inbound_numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string room_preset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_room_preset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPDispatchRuleRequest.room_preset"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomConfiguration room_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSIPDispatchRuleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateSIPDispatchRuleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SIPDispatchRule rule = 1;
  if (this->_internal_has_rule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  // repeated string trunk_ids = 2;
  for (int i = 0, n = this->_internal_trunk_ids_size(); i < n; i++) {
    const auto& s = this->_internal_trunk_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPDispatchRuleRequest.trunk_ids");
    target = stream->WriteString(2, s, target);
  }

  // bool hide_phone_number = 3;
  if (this->_internal_hide_phone_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_hide_phone_number(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPDispatchRuleRequest.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPDispatchRuleRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  // repeated string inbound_numbers = 6;
  for (int i = 0, n = this->_internal_inbound_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPDispatchRuleRequest.inbound_numbers");
    target = stream->WriteString(6, s, target);
  }

  // map<string, string> attributes = 7;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.CreateSIPDispatchRuleRequest.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.CreateSIPDispatchRuleRequest.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string room_preset = 8;
  if (!this->_internal_room_preset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_preset().data(), static_cast<int>(this->_internal_room_preset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPDispatchRuleRequest.room_preset");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_room_preset(), target);
  }

  // .livekit.RoomConfiguration room_config = 9;
  if (this->_internal_has_room_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::room_config(this),
        _Internal::room_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateSIPDispatchRuleRequest)
  return target;
}

size_t CreateSIPDispatchRuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.CreateSIPDispatchRuleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string trunk_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.trunk_ids_.size());
  for (int i = 0, n = _impl_.trunk_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.trunk_ids_.Get(i));
  }

  // repeated string inbound_numbers = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_numbers_.size());
  for (int i = 0, n = _impl_.inbound_numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_numbers_.Get(i));
  }

  // map<string, string> attributes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string room_preset = 8;
  if (!this->_internal_room_preset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_preset());
  }

  // .livekit.SIPDispatchRule rule = 1;
  if (this->_internal_has_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rule_);
  }

  // .livekit.RoomConfiguration room_config = 9;
  if (this->_internal_has_room_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_config_);
  }

  // bool hide_phone_number = 3;
  if (this->_internal_hide_phone_number() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSIPDispatchRuleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSIPDispatchRuleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSIPDispatchRuleRequest::GetClassData() const { return &_class_data_; }


void CreateSIPDispatchRuleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSIPDispatchRuleRequest*>(&to_msg);
  auto& from = static_cast<const CreateSIPDispatchRuleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateSIPDispatchRuleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trunk_ids_.MergeFrom(from._impl_.trunk_ids_);
  _this->_impl_.inbound_numbers_.MergeFrom(from._impl_.inbound_numbers_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_room_preset().empty()) {
    _this->_internal_set_room_preset(from._internal_room_preset());
  }
  if (from._internal_has_rule()) {
    _this->_internal_mutable_rule()->::livekit::SIPDispatchRule::MergeFrom(
        from._internal_rule());
  }
  if (from._internal_has_room_config()) {
    _this->_internal_mutable_room_config()->::livekit::RoomConfiguration::MergeFrom(
        from._internal_room_config());
  }
  if (from._internal_hide_phone_number() != 0) {
    _this->_internal_set_hide_phone_number(from._internal_hide_phone_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSIPDispatchRuleRequest::CopyFrom(const CreateSIPDispatchRuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateSIPDispatchRuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSIPDispatchRuleRequest::IsInitialized() const {
  return true;
}

void CreateSIPDispatchRuleRequest::InternalSwap(CreateSIPDispatchRuleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trunk_ids_.InternalSwap(&other->_impl_.trunk_ids_);
  _impl_.inbound_numbers_.InternalSwap(&other->_impl_.inbound_numbers_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_preset_, lhs_arena,
      &other->_impl_.room_preset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSIPDispatchRuleRequest, _impl_.hide_phone_number_)
      + sizeof(CreateSIPDispatchRuleRequest::_impl_.hide_phone_number_)
      - PROTOBUF_FIELD_OFFSET(CreateSIPDispatchRuleRequest, _impl_.rule_)>(
          reinterpret_cast<char*>(&_impl_.rule_),
          reinterpret_cast<char*>(&other->_impl_.rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPDispatchRuleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[29]);
}

// ===================================================================

SIPDispatchRuleInfo_AttributesEntry_DoNotUse::SIPDispatchRuleInfo_AttributesEntry_DoNotUse() {}
SIPDispatchRuleInfo_AttributesEntry_DoNotUse::SIPDispatchRuleInfo_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPDispatchRuleInfo_AttributesEntry_DoNotUse::MergeFrom(const SIPDispatchRuleInfo_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPDispatchRuleInfo_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[30]);
}

// ===================================================================

class SIPDispatchRuleInfo::_Internal {
 public:
  static const ::livekit::SIPDispatchRule& rule(const SIPDispatchRuleInfo* msg);
  static const ::livekit::RoomConfiguration& room_config(const SIPDispatchRuleInfo* msg);
};

const ::livekit::SIPDispatchRule&
SIPDispatchRuleInfo::_Internal::rule(const SIPDispatchRuleInfo* msg) {
  return *msg->_impl_.rule_;
}
const ::livekit::RoomConfiguration&
SIPDispatchRuleInfo::_Internal::room_config(const SIPDispatchRuleInfo* msg) {
  return *msg->_impl_.room_config_;
}
void SIPDispatchRuleInfo::clear_room_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_config_ != nullptr) {
    delete _impl_.room_config_;
  }
  _impl_.room_config_ = nullptr;
}
SIPDispatchRuleInfo::SIPDispatchRuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SIPDispatchRuleInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SIPDispatchRuleInfo)
}
SIPDispatchRuleInfo::SIPDispatchRuleInfo(const SIPDispatchRuleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPDispatchRuleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){from._impl_.trunk_ids_}
    , decltype(_impl_.inbound_numbers_){from._impl_.inbound_numbers_}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.sip_dispatch_rule_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.room_preset_){}
    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.room_config_){nullptr}
    , decltype(_impl_.hide_phone_number_){}
    , decltype(_impl_.krisp_enabled_){}
    , decltype(_impl_.media_encryption_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.sip_dispatch_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_dispatch_rule_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_dispatch_rule_id().empty()) {
    _this->_impl_.sip_dispatch_rule_id_.Set(from._internal_sip_dispatch_rule_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_preset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_preset().empty()) {
    _this->_impl_.room_preset_.Set(from._internal_room_preset(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rule()) {
    _this->_impl_.rule_ = new ::livekit::SIPDispatchRule(*from._impl_.rule_);
  }
  if (from._internal_has_room_config()) {
    _this->_impl_.room_config_ = new ::livekit::RoomConfiguration(*from._impl_.room_config_);
  }
  ::memcpy(&_impl_.hide_phone_number_, &from._impl_.hide_phone_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.media_encryption_) -
    reinterpret_cast<char*>(&_impl_.hide_phone_number_)) + sizeof(_impl_.media_encryption_));
  // @@protoc_insertion_point(copy_constructor:livekit.SIPDispatchRuleInfo)
}

inline void SIPDispatchRuleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trunk_ids_){arena}
    , decltype(_impl_.inbound_numbers_){arena}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sip_dispatch_rule_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.room_preset_){}
    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.room_config_){nullptr}
    , decltype(_impl_.hide_phone_number_){false}
    , decltype(_impl_.krisp_enabled_){false}
    , decltype(_impl_.media_encryption_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_dispatch_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_dispatch_rule_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_preset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPDispatchRuleInfo::~SIPDispatchRuleInfo() {
  // @@protoc_insertion_point(destructor:livekit.SIPDispatchRuleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SIPDispatchRuleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trunk_ids_.~RepeatedPtrField();
  _impl_.inbound_numbers_.~RepeatedPtrField();
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.sip_dispatch_rule_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.room_preset_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rule_;
  if (this != internal_default_instance()) delete _impl_.room_config_;
}

void SIPDispatchRuleInfo::ArenaDtor(void* object) {
  SIPDispatchRuleInfo* _this = reinterpret_cast< SIPDispatchRuleInfo* >(object);
  _this->_impl_.attributes_.Destruct();
}
void SIPDispatchRuleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPDispatchRuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPDispatchRuleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trunk_ids_.Clear();
  _impl_.inbound_numbers_.Clear();
  _impl_.attributes_.Clear();
  _impl_.sip_dispatch_rule_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.room_preset_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rule_ != nullptr) {
    delete _impl_.rule_;
  }
  _impl_.rule_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.room_config_ != nullptr) {
    delete _impl_.room_config_;
  }
  _impl_.room_config_ = nullptr;
  ::memset(&_impl_.hide_phone_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.media_encryption_) -
      reinterpret_cast<char*>(&_impl_.hide_phone_number_)) + sizeof(_impl_.media_encryption_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPDispatchRuleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_dispatch_rule_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_dispatch_rule_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPDispatchRule rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string trunk_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_trunk_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleInfo.trunk_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool hide_phone_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hide_phone_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleInfo.metadata"));
        } else
          goto handle_unusual;
        continue;
      // repeated string inbound_numbers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inbound_numbers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleInfo.inbound_numbers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string room_preset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_room_preset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPDispatchRuleInfo.room_preset"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomConfiguration room_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool krisp_enabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.krisp_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPMediaEncryption media_encryption = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_encryption(static_cast<::livekit::SIPMediaEncryption>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPDispatchRuleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPDispatchRuleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_dispatch_rule_id = 1;
  if (!this->_internal_sip_dispatch_rule_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_dispatch_rule_id().data(), static_cast<int>(this->_internal_sip_dispatch_rule_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleInfo.sip_dispatch_rule_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_dispatch_rule_id(), target);
  }

  // .livekit.SIPDispatchRule rule = 2;
  if (this->_internal_has_rule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  // repeated string trunk_ids = 3;
  for (int i = 0, n = this->_internal_trunk_ids_size(); i < n; i++) {
    const auto& s = this->_internal_trunk_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleInfo.trunk_ids");
    target = stream->WriteString(3, s, target);
  }

  // bool hide_phone_number = 4;
  if (this->_internal_hide_phone_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_hide_phone_number(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleInfo.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string metadata = 6;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_metadata(), target);
  }

  // repeated string inbound_numbers = 7;
  for (int i = 0, n = this->_internal_inbound_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_inbound_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleInfo.inbound_numbers");
    target = stream->WriteString(7, s, target);
  }

  // map<string, string> attributes = 8;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPDispatchRuleInfo_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPDispatchRuleInfo.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPDispatchRuleInfo.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string room_preset = 9;
  if (!this->_internal_room_preset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_preset().data(), static_cast<int>(this->_internal_room_preset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPDispatchRuleInfo.room_preset");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_room_preset(), target);
  }

  // .livekit.RoomConfiguration room_config = 10;
  if (this->_internal_has_room_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::room_config(this),
        _Internal::room_config(this).GetCachedSize(), target, stream);
  }

  // bool krisp_enabled = 11;
  if (this->_internal_krisp_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_krisp_enabled(), target);
  }

  // .livekit.SIPMediaEncryption media_encryption = 12;
  if (this->_internal_media_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_media_encryption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPDispatchRuleInfo)
  return target;
}

size_t SIPDispatchRuleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPDispatchRuleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string trunk_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.trunk_ids_.size());
  for (int i = 0, n = _impl_.trunk_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.trunk_ids_.Get(i));
  }

  // repeated string inbound_numbers = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inbound_numbers_.size());
  for (int i = 0, n = _impl_.inbound_numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.inbound_numbers_.Get(i));
  }

  // map<string, string> attributes = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += SIPDispatchRuleInfo_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sip_dispatch_rule_id = 1;
  if (!this->_internal_sip_dispatch_rule_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_dispatch_rule_id());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string metadata = 6;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string room_preset = 9;
  if (!this->_internal_room_preset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_preset());
  }

  // .livekit.SIPDispatchRule rule = 2;
  if (this->_internal_has_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rule_);
  }

  // .livekit.RoomConfiguration room_config = 10;
  if (this->_internal_has_room_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_config_);
  }

  // bool hide_phone_number = 4;
  if (this->_internal_hide_phone_number() != 0) {
    total_size += 1 + 1;
  }

  // bool krisp_enabled = 11;
  if (this->_internal_krisp_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.SIPMediaEncryption media_encryption = 12;
  if (this->_internal_media_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_media_encryption());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPDispatchRuleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPDispatchRuleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPDispatchRuleInfo::GetClassData() const { return &_class_data_; }


void SIPDispatchRuleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPDispatchRuleInfo*>(&to_msg);
  auto& from = static_cast<const SIPDispatchRuleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPDispatchRuleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trunk_ids_.MergeFrom(from._impl_.trunk_ids_);
  _this->_impl_.inbound_numbers_.MergeFrom(from._impl_.inbound_numbers_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_sip_dispatch_rule_id().empty()) {
    _this->_internal_set_sip_dispatch_rule_id(from._internal_sip_dispatch_rule_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_room_preset().empty()) {
    _this->_internal_set_room_preset(from._internal_room_preset());
  }
  if (from._internal_has_rule()) {
    _this->_internal_mutable_rule()->::livekit::SIPDispatchRule::MergeFrom(
        from._internal_rule());
  }
  if (from._internal_has_room_config()) {
    _this->_internal_mutable_room_config()->::livekit::RoomConfiguration::MergeFrom(
        from._internal_room_config());
  }
  if (from._internal_hide_phone_number() != 0) {
    _this->_internal_set_hide_phone_number(from._internal_hide_phone_number());
  }
  if (from._internal_krisp_enabled() != 0) {
    _this->_internal_set_krisp_enabled(from._internal_krisp_enabled());
  }
  if (from._internal_media_encryption() != 0) {
    _this->_internal_set_media_encryption(from._internal_media_encryption());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPDispatchRuleInfo::CopyFrom(const SIPDispatchRuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPDispatchRuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPDispatchRuleInfo::IsInitialized() const {
  return true;
}

void SIPDispatchRuleInfo::InternalSwap(SIPDispatchRuleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trunk_ids_.InternalSwap(&other->_impl_.trunk_ids_);
  _impl_.inbound_numbers_.InternalSwap(&other->_impl_.inbound_numbers_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_dispatch_rule_id_, lhs_arena,
      &other->_impl_.sip_dispatch_rule_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_preset_, lhs_arena,
      &other->_impl_.room_preset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SIPDispatchRuleInfo, _impl_.media_encryption_)
      + sizeof(SIPDispatchRuleInfo::_impl_.media_encryption_)
      - PROTOBUF_FIELD_OFFSET(SIPDispatchRuleInfo, _impl_.rule_)>(
          reinterpret_cast<char*>(&_impl_.rule_),
          reinterpret_cast<char*>(&other->_impl_.rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPDispatchRuleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[31]);
}

// ===================================================================

class ListSIPDispatchRuleRequest::_Internal {
 public:
  static const ::livekit::Pagination& page(const ListSIPDispatchRuleRequest* msg);
};

const ::livekit::Pagination&
ListSIPDispatchRuleRequest::_Internal::page(const ListSIPDispatchRuleRequest* msg) {
  return *msg->_impl_.page_;
}
void ListSIPDispatchRuleRequest::clear_page() {
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
}
ListSIPDispatchRuleRequest::ListSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPDispatchRuleRequest)
}
ListSIPDispatchRuleRequest::ListSIPDispatchRuleRequest(const ListSIPDispatchRuleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPDispatchRuleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dispatch_rule_ids_){from._impl_.dispatch_rule_ids_}
    , decltype(_impl_.trunk_ids_){from._impl_.trunk_ids_}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page()) {
    _this->_impl_.page_ = new ::livekit::Pagination(*from._impl_.page_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPDispatchRuleRequest)
}

inline void ListSIPDispatchRuleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dispatch_rule_ids_){arena}
    , decltype(_impl_.trunk_ids_){arena}
    , decltype(_impl_.page_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPDispatchRuleRequest::~ListSIPDispatchRuleRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPDispatchRuleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPDispatchRuleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dispatch_rule_ids_.~RepeatedPtrField();
  _impl_.trunk_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.page_;
}

void ListSIPDispatchRuleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPDispatchRuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPDispatchRuleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dispatch_rule_ids_.Clear();
  _impl_.trunk_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.page_ != nullptr) {
    delete _impl_.page_;
  }
  _impl_.page_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPDispatchRuleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dispatch_rule_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dispatch_rule_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string trunk_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_trunk_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListSIPDispatchRuleRequest.trunk_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.Pagination page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_page(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPDispatchRuleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPDispatchRuleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dispatch_rule_ids = 1;
  for (int i = 0, n = this->_internal_dispatch_rule_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dispatch_rule_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListSIPDispatchRuleRequest.dispatch_rule_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string trunk_ids = 2;
  for (int i = 0, n = this->_internal_trunk_ids_size(); i < n; i++) {
    const auto& s = this->_internal_trunk_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListSIPDispatchRuleRequest.trunk_ids");
    target = stream->WriteString(2, s, target);
  }

  // .livekit.Pagination page = 3;
  if (this->_internal_has_page()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPDispatchRuleRequest)
  return target;
}

size_t ListSIPDispatchRuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPDispatchRuleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dispatch_rule_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dispatch_rule_ids_.size());
  for (int i = 0, n = _impl_.dispatch_rule_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dispatch_rule_ids_.Get(i));
  }

  // repeated string trunk_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.trunk_ids_.size());
  for (int i = 0, n = _impl_.trunk_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.trunk_ids_.Get(i));
  }

  // .livekit.Pagination page = 3;
  if (this->_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPDispatchRuleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPDispatchRuleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPDispatchRuleRequest::GetClassData() const { return &_class_data_; }


void ListSIPDispatchRuleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPDispatchRuleRequest*>(&to_msg);
  auto& from = static_cast<const ListSIPDispatchRuleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPDispatchRuleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dispatch_rule_ids_.MergeFrom(from._impl_.dispatch_rule_ids_);
  _this->_impl_.trunk_ids_.MergeFrom(from._impl_.trunk_ids_);
  if (from._internal_has_page()) {
    _this->_internal_mutable_page()->::livekit::Pagination::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPDispatchRuleRequest::CopyFrom(const ListSIPDispatchRuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPDispatchRuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPDispatchRuleRequest::IsInitialized() const {
  return true;
}

void ListSIPDispatchRuleRequest::InternalSwap(ListSIPDispatchRuleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dispatch_rule_ids_.InternalSwap(&other->_impl_.dispatch_rule_ids_);
  _impl_.trunk_ids_.InternalSwap(&other->_impl_.trunk_ids_);
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPDispatchRuleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[32]);
}

// ===================================================================

class ListSIPDispatchRuleResponse::_Internal {
 public:
};

ListSIPDispatchRuleResponse::ListSIPDispatchRuleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListSIPDispatchRuleResponse)
}
ListSIPDispatchRuleResponse::ListSIPDispatchRuleResponse(const ListSIPDispatchRuleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSIPDispatchRuleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListSIPDispatchRuleResponse)
}

inline void ListSIPDispatchRuleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSIPDispatchRuleResponse::~ListSIPDispatchRuleResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListSIPDispatchRuleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSIPDispatchRuleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListSIPDispatchRuleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSIPDispatchRuleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListSIPDispatchRuleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSIPDispatchRuleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SIPDispatchRuleInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSIPDispatchRuleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListSIPDispatchRuleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SIPDispatchRuleInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListSIPDispatchRuleResponse)
  return target;
}

size_t ListSIPDispatchRuleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListSIPDispatchRuleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SIPDispatchRuleInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSIPDispatchRuleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSIPDispatchRuleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSIPDispatchRuleResponse::GetClassData() const { return &_class_data_; }


void ListSIPDispatchRuleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSIPDispatchRuleResponse*>(&to_msg);
  auto& from = static_cast<const ListSIPDispatchRuleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListSIPDispatchRuleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSIPDispatchRuleResponse::CopyFrom(const ListSIPDispatchRuleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListSIPDispatchRuleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSIPDispatchRuleResponse::IsInitialized() const {
  return true;
}

void ListSIPDispatchRuleResponse::InternalSwap(ListSIPDispatchRuleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSIPDispatchRuleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[33]);
}

// ===================================================================

class DeleteSIPDispatchRuleRequest::_Internal {
 public:
};

DeleteSIPDispatchRuleRequest::DeleteSIPDispatchRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DeleteSIPDispatchRuleRequest)
}
DeleteSIPDispatchRuleRequest::DeleteSIPDispatchRuleRequest(const DeleteSIPDispatchRuleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteSIPDispatchRuleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_dispatch_rule_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sip_dispatch_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_dispatch_rule_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_dispatch_rule_id().empty()) {
    _this->_impl_.sip_dispatch_rule_id_.Set(from._internal_sip_dispatch_rule_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DeleteSIPDispatchRuleRequest)
}

inline void DeleteSIPDispatchRuleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sip_dispatch_rule_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_dispatch_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_dispatch_rule_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteSIPDispatchRuleRequest::~DeleteSIPDispatchRuleRequest() {
  // @@protoc_insertion_point(destructor:livekit.DeleteSIPDispatchRuleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteSIPDispatchRuleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sip_dispatch_rule_id_.Destroy();
}

void DeleteSIPDispatchRuleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteSIPDispatchRuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DeleteSIPDispatchRuleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sip_dispatch_rule_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSIPDispatchRuleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_dispatch_rule_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_dispatch_rule_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSIPDispatchRuleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DeleteSIPDispatchRuleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_dispatch_rule_id = 1;
  if (!this->_internal_sip_dispatch_rule_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_dispatch_rule_id().data(), static_cast<int>(this->_internal_sip_dispatch_rule_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DeleteSIPDispatchRuleRequest.sip_dispatch_rule_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_dispatch_rule_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DeleteSIPDispatchRuleRequest)
  return target;
}

size_t DeleteSIPDispatchRuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DeleteSIPDispatchRuleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sip_dispatch_rule_id = 1;
  if (!this->_internal_sip_dispatch_rule_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_dispatch_rule_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSIPDispatchRuleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteSIPDispatchRuleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSIPDispatchRuleRequest::GetClassData() const { return &_class_data_; }


void DeleteSIPDispatchRuleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteSIPDispatchRuleRequest*>(&to_msg);
  auto& from = static_cast<const DeleteSIPDispatchRuleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DeleteSIPDispatchRuleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sip_dispatch_rule_id().empty()) {
    _this->_internal_set_sip_dispatch_rule_id(from._internal_sip_dispatch_rule_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSIPDispatchRuleRequest::CopyFrom(const DeleteSIPDispatchRuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DeleteSIPDispatchRuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSIPDispatchRuleRequest::IsInitialized() const {
  return true;
}

void DeleteSIPDispatchRuleRequest::InternalSwap(DeleteSIPDispatchRuleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_dispatch_rule_id_, lhs_arena,
      &other->_impl_.sip_dispatch_rule_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSIPDispatchRuleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[34]);
}

// ===================================================================

SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse() {}
SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::MergeFrom(const SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[35]);
}

// ===================================================================

SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse() {}
SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::MergeFrom(const SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[36]);
}

// ===================================================================

class SIPOutboundConfig::_Internal {
 public:
};

SIPOutboundConfig::SIPOutboundConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SIPOutboundConfig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SIPOutboundConfig)
}
SIPOutboundConfig::SIPOutboundConfig(const SIPOutboundConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPOutboundConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.headers_to_attributes_)*/{}
    , /*decltype(_impl_.attributes_to_headers_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.auth_username_){}
    , decltype(_impl_.auth_password_){}
    , decltype(_impl_.transport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_to_attributes_.MergeFrom(from._impl_.headers_to_attributes_);
  _this->_impl_.attributes_to_headers_.MergeFrom(from._impl_.attributes_to_headers_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_username().empty()) {
    _this->_impl_.auth_username_.Set(from._internal_auth_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_password().empty()) {
    _this->_impl_.auth_password_.Set(from._internal_auth_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.transport_ = from._impl_.transport_;
  // @@protoc_insertion_point(copy_constructor:livekit.SIPOutboundConfig)
}

inline void SIPOutboundConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.headers_to_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.attributes_to_headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.auth_username_){}
    , decltype(_impl_.auth_password_){}
    , decltype(_impl_.transport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPOutboundConfig::~SIPOutboundConfig() {
  // @@protoc_insertion_point(destructor:livekit.SIPOutboundConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SIPOutboundConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_to_attributes_.Destruct();
  _impl_.headers_to_attributes_.~MapField();
  _impl_.attributes_to_headers_.Destruct();
  _impl_.attributes_to_headers_.~MapField();
  _impl_.hostname_.Destroy();
  _impl_.auth_username_.Destroy();
  _impl_.auth_password_.Destroy();
}

void SIPOutboundConfig::ArenaDtor(void* object) {
  SIPOutboundConfig* _this = reinterpret_cast< SIPOutboundConfig* >(object);
  _this->_impl_.headers_to_attributes_.Destruct();
  _this->_impl_.attributes_to_headers_.Destruct();
}
void SIPOutboundConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPOutboundConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPOutboundConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_to_attributes_.Clear();
  _impl_.attributes_to_headers_.Clear();
  _impl_.hostname_.ClearToEmpty();
  _impl_.auth_username_.ClearToEmpty();
  _impl_.auth_password_.ClearToEmpty();
  _impl_.transport_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPOutboundConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundConfig.hostname"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPTransport transport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transport(static_cast<::livekit::SIPTransport>(val));
        } else
          goto handle_unusual;
        continue;
      // string auth_username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_auth_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundConfig.auth_username"));
        } else
          goto handle_unusual;
        continue;
      // string auth_password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPOutboundConfig.auth_password"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers_to_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_to_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes_to_headers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_to_headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPOutboundConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPOutboundConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundConfig.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // .livekit.SIPTransport transport = 2;
  if (this->_internal_transport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_transport(), target);
  }

  // string auth_username = 3;
  if (!this->_internal_auth_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_username().data(), static_cast<int>(this->_internal_auth_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundConfig.auth_username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth_username(), target);
  }

  // string auth_password = 4;
  if (!this->_internal_auth_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPOutboundConfig.auth_password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_auth_password(), target);
  }

  // map<string, string> headers_to_attributes = 5;
  if (!this->_internal_headers_to_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers_to_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundConfig.HeadersToAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundConfig.HeadersToAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> attributes_to_headers = 6;
  if (!this->_internal_attributes_to_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes_to_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundConfig.AttributesToHeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPOutboundConfig.AttributesToHeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPOutboundConfig)
  return target;
}

size_t SIPOutboundConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPOutboundConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers_to_attributes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_to_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers_to_attributes().begin();
      it != this->_internal_headers_to_attributes().end(); ++it) {
    total_size += SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> attributes_to_headers = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_to_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes_to_headers().begin();
      it != this->_internal_attributes_to_headers().end(); ++it) {
    total_size += SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string auth_username = 3;
  if (!this->_internal_auth_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_username());
  }

  // string auth_password = 4;
  if (!this->_internal_auth_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // .livekit.SIPTransport transport = 2;
  if (this->_internal_transport() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_transport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPOutboundConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPOutboundConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPOutboundConfig::GetClassData() const { return &_class_data_; }


void SIPOutboundConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPOutboundConfig*>(&to_msg);
  auto& from = static_cast<const SIPOutboundConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPOutboundConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_to_attributes_.MergeFrom(from._impl_.headers_to_attributes_);
  _this->_impl_.attributes_to_headers_.MergeFrom(from._impl_.attributes_to_headers_);
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_auth_username().empty()) {
    _this->_internal_set_auth_username(from._internal_auth_username());
  }
  if (!from._internal_auth_password().empty()) {
    _this->_internal_set_auth_password(from._internal_auth_password());
  }
  if (from._internal_transport() != 0) {
    _this->_internal_set_transport(from._internal_transport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPOutboundConfig::CopyFrom(const SIPOutboundConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPOutboundConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPOutboundConfig::IsInitialized() const {
  return true;
}

void SIPOutboundConfig::InternalSwap(SIPOutboundConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_to_attributes_.InternalSwap(&other->_impl_.headers_to_attributes_);
  _impl_.attributes_to_headers_.InternalSwap(&other->_impl_.attributes_to_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_username_, lhs_arena,
      &other->_impl_.auth_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_password_, lhs_arena,
      &other->_impl_.auth_password_, rhs_arena
  );
  swap(_impl_.transport_, other->_impl_.transport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPOutboundConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[37]);
}

// ===================================================================

CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse() {}
CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::MergeFrom(const CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[38]);
}

// ===================================================================

CreateSIPParticipantRequest_HeadersEntry_DoNotUse::CreateSIPParticipantRequest_HeadersEntry_DoNotUse() {}
CreateSIPParticipantRequest_HeadersEntry_DoNotUse::CreateSIPParticipantRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSIPParticipantRequest_HeadersEntry_DoNotUse::MergeFrom(const CreateSIPParticipantRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPParticipantRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[39]);
}

// ===================================================================

class CreateSIPParticipantRequest::_Internal {
 public:
  static const ::livekit::SIPOutboundConfig& trunk(const CreateSIPParticipantRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ringing_timeout(const CreateSIPParticipantRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_call_duration(const CreateSIPParticipantRequest* msg);
};

const ::livekit::SIPOutboundConfig&
CreateSIPParticipantRequest::_Internal::trunk(const CreateSIPParticipantRequest* msg) {
  return *msg->_impl_.trunk_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CreateSIPParticipantRequest::_Internal::ringing_timeout(const CreateSIPParticipantRequest* msg) {
  return *msg->_impl_.ringing_timeout_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CreateSIPParticipantRequest::_Internal::max_call_duration(const CreateSIPParticipantRequest* msg) {
  return *msg->_impl_.max_call_duration_;
}
void CreateSIPParticipantRequest::clear_ringing_timeout() {
  if (GetArenaForAllocation() == nullptr && _impl_.ringing_timeout_ != nullptr) {
    delete _impl_.ringing_timeout_;
  }
  _impl_.ringing_timeout_ = nullptr;
}
void CreateSIPParticipantRequest::clear_max_call_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_call_duration_ != nullptr) {
    delete _impl_.max_call_duration_;
  }
  _impl_.max_call_duration_ = nullptr;
}
CreateSIPParticipantRequest::CreateSIPParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CreateSIPParticipantRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.CreateSIPParticipantRequest)
}
CreateSIPParticipantRequest::CreateSIPParticipantRequest(const CreateSIPParticipantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSIPParticipantRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.participant_attributes_)*/{}
    , /*decltype(_impl_.headers_)*/{}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.sip_call_to_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.dtmf_){}
    , decltype(_impl_.participant_name_){}
    , decltype(_impl_.participant_metadata_){}
    , decltype(_impl_.sip_number_){}
    , decltype(_impl_.ringing_timeout_){nullptr}
    , decltype(_impl_.max_call_duration_){nullptr}
    , decltype(_impl_.trunk_){nullptr}
    , decltype(_impl_.play_ringtone_){}
    , decltype(_impl_.play_dialtone_){}
    , decltype(_impl_.hide_phone_number_){}
    , decltype(_impl_.krisp_enabled_){}
    , decltype(_impl_.include_headers_){}
    , decltype(_impl_.media_encryption_){}
    , decltype(_impl_.wait_until_answered_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.participant_attributes_.MergeFrom(from._impl_.participant_attributes_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_impl_.sip_trunk_id_.Set(from._internal_sip_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sip_call_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_call_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_call_to().empty()) {
    _this->_impl_.sip_call_to_.Set(from._internal_sip_call_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dtmf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtmf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtmf().empty()) {
    _this->_impl_.dtmf_.Set(from._internal_dtmf(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_name().empty()) {
    _this->_impl_.participant_name_.Set(from._internal_participant_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_metadata().empty()) {
    _this->_impl_.participant_metadata_.Set(from._internal_participant_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sip_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_number().empty()) {
    _this->_impl_.sip_number_.Set(from._internal_sip_number(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ringing_timeout()) {
    _this->_impl_.ringing_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ringing_timeout_);
  }
  if (from._internal_has_max_call_duration()) {
    _this->_impl_.max_call_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.max_call_duration_);
  }
  if (from._internal_has_trunk()) {
    _this->_impl_.trunk_ = new ::livekit::SIPOutboundConfig(*from._impl_.trunk_);
  }
  ::memcpy(&_impl_.play_ringtone_, &from._impl_.play_ringtone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wait_until_answered_) -
    reinterpret_cast<char*>(&_impl_.play_ringtone_)) + sizeof(_impl_.wait_until_answered_));
  // @@protoc_insertion_point(copy_constructor:livekit.CreateSIPParticipantRequest)
}

inline void CreateSIPParticipantRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.participant_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sip_trunk_id_){}
    , decltype(_impl_.sip_call_to_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.dtmf_){}
    , decltype(_impl_.participant_name_){}
    , decltype(_impl_.participant_metadata_){}
    , decltype(_impl_.sip_number_){}
    , decltype(_impl_.ringing_timeout_){nullptr}
    , decltype(_impl_.max_call_duration_){nullptr}
    , decltype(_impl_.trunk_){nullptr}
    , decltype(_impl_.play_ringtone_){false}
    , decltype(_impl_.play_dialtone_){false}
    , decltype(_impl_.hide_phone_number_){false}
    , decltype(_impl_.krisp_enabled_){false}
    , decltype(_impl_.include_headers_){0}
    , decltype(_impl_.media_encryption_){0}
    , decltype(_impl_.wait_until_answered_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sip_trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sip_call_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_call_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dtmf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtmf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sip_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSIPParticipantRequest::~CreateSIPParticipantRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateSIPParticipantRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CreateSIPParticipantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_attributes_.Destruct();
  _impl_.participant_attributes_.~MapField();
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.sip_trunk_id_.Destroy();
  _impl_.sip_call_to_.Destroy();
  _impl_.room_name_.Destroy();
  _impl_.participant_identity_.Destroy();
  _impl_.dtmf_.Destroy();
  _impl_.participant_name_.Destroy();
  _impl_.participant_metadata_.Destroy();
  _impl_.sip_number_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ringing_timeout_;
  if (this != internal_default_instance()) delete _impl_.max_call_duration_;
  if (this != internal_default_instance()) delete _impl_.trunk_;
}

void CreateSIPParticipantRequest::ArenaDtor(void* object) {
  CreateSIPParticipantRequest* _this = reinterpret_cast< CreateSIPParticipantRequest* >(object);
  _this->_impl_.participant_attributes_.Destruct();
  _this->_impl_.headers_.Destruct();
}
void CreateSIPParticipantRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSIPParticipantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateSIPParticipantRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_attributes_.Clear();
  _impl_.headers_.Clear();
  _impl_.sip_trunk_id_.ClearToEmpty();
  _impl_.sip_call_to_.ClearToEmpty();
  _impl_.room_name_.ClearToEmpty();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.dtmf_.ClearToEmpty();
  _impl_.participant_name_.ClearToEmpty();
  _impl_.participant_metadata_.ClearToEmpty();
  _impl_.sip_number_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ringing_timeout_ != nullptr) {
    delete _impl_.ringing_timeout_;
  }
  _impl_.ringing_timeout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_call_duration_ != nullptr) {
    delete _impl_.max_call_duration_;
  }
  _impl_.max_call_duration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trunk_ != nullptr) {
    delete _impl_.trunk_;
  }
  _impl_.trunk_ = nullptr;
  ::memset(&_impl_.play_ringtone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wait_until_answered_) -
      reinterpret_cast<char*>(&_impl_.play_ringtone_)) + sizeof(_impl_.wait_until_answered_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSIPParticipantRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sip_trunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sip_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.sip_trunk_id"));
        } else
          goto handle_unusual;
        continue;
      // string sip_call_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sip_call_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.sip_call_to"));
        } else
          goto handle_unusual;
        continue;
      // string room_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // string dtmf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dtmf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.dtmf"));
        } else
          goto handle_unusual;
        continue;
      // bool play_ringtone = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.play_ringtone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string participant_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_participant_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.participant_name"));
        } else
          goto handle_unusual;
        continue;
      // string participant_metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_participant_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.participant_metadata"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> participant_attributes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.participant_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool hide_phone_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.hide_phone_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ringing_timeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ringing_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration max_call_duration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_call_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool play_dialtone = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.play_dialtone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool krisp_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.krisp_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sip_number = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_sip_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateSIPParticipantRequest.sip_number"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPHeaderOptions include_headers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_include_headers(static_cast<::livekit::SIPHeaderOptions>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPMediaEncryption media_encryption = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_encryption(static_cast<::livekit::SIPMediaEncryption>(val));
        } else
          goto handle_unusual;
        continue;
      // bool wait_until_answered = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.wait_until_answered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPOutboundConfig trunk = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_trunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSIPParticipantRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateSIPParticipantRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_trunk_id().data(), static_cast<int>(this->_internal_sip_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.sip_trunk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip_trunk_id(), target);
  }

  // string sip_call_to = 2;
  if (!this->_internal_sip_call_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_call_to().data(), static_cast<int>(this->_internal_sip_call_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.sip_call_to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sip_call_to(), target);
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_name(), target);
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.participant_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant_identity(), target);
  }

  // string dtmf = 5;
  if (!this->_internal_dtmf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtmf().data(), static_cast<int>(this->_internal_dtmf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.dtmf");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dtmf(), target);
  }

  // bool play_ringtone = 6 [deprecated = true];
  if (this->_internal_play_ringtone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_play_ringtone(), target);
  }

  // string participant_name = 7;
  if (!this->_internal_participant_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_name().data(), static_cast<int>(this->_internal_participant_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.participant_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_participant_name(), target);
  }

  // string participant_metadata = 8;
  if (!this->_internal_participant_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_metadata().data(), static_cast<int>(this->_internal_participant_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.participant_metadata");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_participant_metadata(), target);
  }

  // map<string, string> participant_attributes = 9;
  if (!this->_internal_participant_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_participant_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.CreateSIPParticipantRequest.ParticipantAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.CreateSIPParticipantRequest.ParticipantAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool hide_phone_number = 10;
  if (this->_internal_hide_phone_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_hide_phone_number(), target);
  }

  // .google.protobuf.Duration ringing_timeout = 11;
  if (this->_internal_has_ringing_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ringing_timeout(this),
        _Internal::ringing_timeout(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration max_call_duration = 12;
  if (this->_internal_has_max_call_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::max_call_duration(this),
        _Internal::max_call_duration(this).GetCachedSize(), target, stream);
  }

  // bool play_dialtone = 13;
  if (this->_internal_play_dialtone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_play_dialtone(), target);
  }

  // bool krisp_enabled = 14;
  if (this->_internal_krisp_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_krisp_enabled(), target);
  }

  // string sip_number = 15;
  if (!this->_internal_sip_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_number().data(), static_cast<int>(this->_internal_sip_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateSIPParticipantRequest.sip_number");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sip_number(), target);
  }

  // map<string, string> headers = 16;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CreateSIPParticipantRequest_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.CreateSIPParticipantRequest.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.CreateSIPParticipantRequest.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .livekit.SIPHeaderOptions include_headers = 17;
  if (this->_internal_include_headers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_include_headers(), target);
  }

  // .livekit.SIPMediaEncryption media_encryption = 18;
  if (this->_internal_media_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_media_encryption(), target);
  }

  // bool wait_until_answered = 19;
  if (this->_internal_wait_until_answered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_wait_until_answered(), target);
  }

  // .livekit.SIPOutboundConfig trunk = 20;
  if (this->_internal_has_trunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::trunk(this),
        _Internal::trunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateSIPParticipantRequest)
  return target;
}

size_t CreateSIPParticipantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.CreateSIPParticipantRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> participant_attributes = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_participant_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_participant_attributes().begin();
      it != this->_internal_participant_attributes().end(); ++it) {
    total_size += CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> headers = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += CreateSIPParticipantRequest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sip_trunk_id = 1;
  if (!this->_internal_sip_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_trunk_id());
  }

  // string sip_call_to = 2;
  if (!this->_internal_sip_call_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_call_to());
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // string dtmf = 5;
  if (!this->_internal_dtmf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtmf());
  }

  // string participant_name = 7;
  if (!this->_internal_participant_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_name());
  }

  // string participant_metadata = 8;
  if (!this->_internal_participant_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_metadata());
  }

  // string sip_number = 15;
  if (!this->_internal_sip_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_number());
  }

  // .google.protobuf.Duration ringing_timeout = 11;
  if (this->_internal_has_ringing_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ringing_timeout_);
  }

  // .google.protobuf.Duration max_call_duration = 12;
  if (this->_internal_has_max_call_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_call_duration_);
  }

  // .livekit.SIPOutboundConfig trunk = 20;
  if (this->_internal_has_trunk()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trunk_);
  }

  // bool play_ringtone = 6 [deprecated = true];
  if (this->_internal_play_ringtone() != 0) {
    total_size += 1 + 1;
  }

  // bool play_dialtone = 13;
  if (this->_internal_play_dialtone() != 0) {
    total_size += 1 + 1;
  }

  // bool hide_phone_number = 10;
  if (this->_internal_hide_phone_number() != 0) {
    total_size += 1 + 1;
  }

  // bool krisp_enabled = 14;
  if (this->_internal_krisp_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.SIPHeaderOptions include_headers = 17;
  if (this->_internal_include_headers() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_include_headers());
  }

  // .livekit.SIPMediaEncryption media_encryption = 18;
  if (this->_internal_media_encryption() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_media_encryption());
  }

  // bool wait_until_answered = 19;
  if (this->_internal_wait_until_answered() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSIPParticipantRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSIPParticipantRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSIPParticipantRequest::GetClassData() const { return &_class_data_; }


void CreateSIPParticipantRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSIPParticipantRequest*>(&to_msg);
  auto& from = static_cast<const CreateSIPParticipantRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateSIPParticipantRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_attributes_.MergeFrom(from._impl_.participant_attributes_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  if (!from._internal_sip_trunk_id().empty()) {
    _this->_internal_set_sip_trunk_id(from._internal_sip_trunk_id());
  }
  if (!from._internal_sip_call_to().empty()) {
    _this->_internal_set_sip_call_to(from._internal_sip_call_to());
  }
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (!from._internal_dtmf().empty()) {
    _this->_internal_set_dtmf(from._internal_dtmf());
  }
  if (!from._internal_participant_name().empty()) {
    _this->_internal_set_participant_name(from._internal_participant_name());
  }
  if (!from._internal_participant_metadata().empty()) {
    _this->_internal_set_participant_metadata(from._internal_participant_metadata());
  }
  if (!from._internal_sip_number().empty()) {
    _this->_internal_set_sip_number(from._internal_sip_number());
  }
  if (from._internal_has_ringing_timeout()) {
    _this->_internal_mutable_ringing_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ringing_timeout());
  }
  if (from._internal_has_max_call_duration()) {
    _this->_internal_mutable_max_call_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_max_call_duration());
  }
  if (from._internal_has_trunk()) {
    _this->_internal_mutable_trunk()->::livekit::SIPOutboundConfig::MergeFrom(
        from._internal_trunk());
  }
  if (from._internal_play_ringtone() != 0) {
    _this->_internal_set_play_ringtone(from._internal_play_ringtone());
  }
  if (from._internal_play_dialtone() != 0) {
    _this->_internal_set_play_dialtone(from._internal_play_dialtone());
  }
  if (from._internal_hide_phone_number() != 0) {
    _this->_internal_set_hide_phone_number(from._internal_hide_phone_number());
  }
  if (from._internal_krisp_enabled() != 0) {
    _this->_internal_set_krisp_enabled(from._internal_krisp_enabled());
  }
  if (from._internal_include_headers() != 0) {
    _this->_internal_set_include_headers(from._internal_include_headers());
  }
  if (from._internal_media_encryption() != 0) {
    _this->_internal_set_media_encryption(from._internal_media_encryption());
  }
  if (from._internal_wait_until_answered() != 0) {
    _this->_internal_set_wait_until_answered(from._internal_wait_until_answered());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSIPParticipantRequest::CopyFrom(const CreateSIPParticipantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateSIPParticipantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSIPParticipantRequest::IsInitialized() const {
  return true;
}

void CreateSIPParticipantRequest::InternalSwap(CreateSIPParticipantRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_attributes_.InternalSwap(&other->_impl_.participant_attributes_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_trunk_id_, lhs_arena,
      &other->_impl_.sip_trunk_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_call_to_, lhs_arena,
      &other->_impl_.sip_call_to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtmf_, lhs_arena,
      &other->_impl_.dtmf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_name_, lhs_arena,
      &other->_impl_.participant_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_metadata_, lhs_arena,
      &other->_impl_.participant_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_number_, lhs_arena,
      &other->_impl_.sip_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSIPParticipantRequest, _impl_.wait_until_answered_)
      + sizeof(CreateSIPParticipantRequest::_impl_.wait_until_answered_)
      - PROTOBUF_FIELD_OFFSET(CreateSIPParticipantRequest, _impl_.ringing_timeout_)>(
          reinterpret_cast<char*>(&_impl_.ringing_timeout_),
          reinterpret_cast<char*>(&other->_impl_.ringing_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSIPParticipantRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[40]);
}

// ===================================================================

class SIPParticipantInfo::_Internal {
 public:
};

SIPParticipantInfo::SIPParticipantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPParticipantInfo)
}
SIPParticipantInfo::SIPParticipantInfo(const SIPParticipantInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPParticipantInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_id_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.sip_call_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_id().empty()) {
    _this->_impl_.participant_id_.Set(from._internal_participant_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sip_call_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_call_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sip_call_id().empty()) {
    _this->_impl_.sip_call_id_.Set(from._internal_sip_call_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SIPParticipantInfo)
}

inline void SIPParticipantInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_id_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.sip_call_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sip_call_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sip_call_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPParticipantInfo::~SIPParticipantInfo() {
  // @@protoc_insertion_point(destructor:livekit.SIPParticipantInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPParticipantInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_id_.Destroy();
  _impl_.participant_identity_.Destroy();
  _impl_.room_name_.Destroy();
  _impl_.sip_call_id_.Destroy();
}

void SIPParticipantInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPParticipantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPParticipantInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_id_.ClearToEmpty();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.room_name_.ClearToEmpty();
  _impl_.sip_call_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPParticipantInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPParticipantInfo.participant_id"));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPParticipantInfo.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // string room_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPParticipantInfo.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string sip_call_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sip_call_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPParticipantInfo.sip_call_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPParticipantInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPParticipantInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_id = 1;
  if (!this->_internal_participant_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_id().data(), static_cast<int>(this->_internal_participant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPParticipantInfo.participant_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_id(), target);
  }

  // string participant_identity = 2;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPParticipantInfo.participant_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participant_identity(), target);
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPParticipantInfo.room_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_name(), target);
  }

  // string sip_call_id = 4;
  if (!this->_internal_sip_call_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip_call_id().data(), static_cast<int>(this->_internal_sip_call_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPParticipantInfo.sip_call_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sip_call_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPParticipantInfo)
  return target;
}

size_t SIPParticipantInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPParticipantInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_id = 1;
  if (!this->_internal_participant_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_id());
  }

  // string participant_identity = 2;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string sip_call_id = 4;
  if (!this->_internal_sip_call_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip_call_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPParticipantInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPParticipantInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPParticipantInfo::GetClassData() const { return &_class_data_; }


void SIPParticipantInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPParticipantInfo*>(&to_msg);
  auto& from = static_cast<const SIPParticipantInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPParticipantInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_id().empty()) {
    _this->_internal_set_participant_id(from._internal_participant_id());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_sip_call_id().empty()) {
    _this->_internal_set_sip_call_id(from._internal_sip_call_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPParticipantInfo::CopyFrom(const SIPParticipantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPParticipantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPParticipantInfo::IsInitialized() const {
  return true;
}

void SIPParticipantInfo::InternalSwap(SIPParticipantInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_id_, lhs_arena,
      &other->_impl_.participant_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sip_call_id_, lhs_arena,
      &other->_impl_.sip_call_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPParticipantInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[41]);
}

// ===================================================================

TransferSIPParticipantRequest_HeadersEntry_DoNotUse::TransferSIPParticipantRequest_HeadersEntry_DoNotUse() {}
TransferSIPParticipantRequest_HeadersEntry_DoNotUse::TransferSIPParticipantRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransferSIPParticipantRequest_HeadersEntry_DoNotUse::MergeFrom(const TransferSIPParticipantRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransferSIPParticipantRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[42]);
}

// ===================================================================

class TransferSIPParticipantRequest::_Internal {
 public:
};

TransferSIPParticipantRequest::TransferSIPParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TransferSIPParticipantRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.TransferSIPParticipantRequest)
}
TransferSIPParticipantRequest::TransferSIPParticipantRequest(const TransferSIPParticipantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferSIPParticipantRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.headers_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.transfer_to_){}
    , decltype(_impl_.play_dialtone_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transfer_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transfer_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transfer_to().empty()) {
    _this->_impl_.transfer_to_.Set(from._internal_transfer_to(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.play_dialtone_ = from._impl_.play_dialtone_;
  // @@protoc_insertion_point(copy_constructor:livekit.TransferSIPParticipantRequest)
}

inline void TransferSIPParticipantRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.transfer_to_){}
    , decltype(_impl_.play_dialtone_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transfer_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transfer_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferSIPParticipantRequest::~TransferSIPParticipantRequest() {
  // @@protoc_insertion_point(destructor:livekit.TransferSIPParticipantRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TransferSIPParticipantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.participant_identity_.Destroy();
  _impl_.room_name_.Destroy();
  _impl_.transfer_to_.Destroy();
}

void TransferSIPParticipantRequest::ArenaDtor(void* object) {
  TransferSIPParticipantRequest* _this = reinterpret_cast< TransferSIPParticipantRequest* >(object);
  _this->_impl_.headers_.Destruct();
}
void TransferSIPParticipantRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferSIPParticipantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TransferSIPParticipantRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.room_name_.ClearToEmpty();
  _impl_.transfer_to_.ClearToEmpty();
  _impl_.play_dialtone_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferSIPParticipantRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TransferSIPParticipantRequest.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // string room_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TransferSIPParticipantRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string transfer_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transfer_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TransferSIPParticipantRequest.transfer_to"));
        } else
          goto handle_unusual;
        continue;
      // bool play_dialtone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.play_dialtone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferSIPParticipantRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TransferSIPParticipantRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_identity = 1;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TransferSIPParticipantRequest.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TransferSIPParticipantRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_name(), target);
  }

  // string transfer_to = 3;
  if (!this->_internal_transfer_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transfer_to().data(), static_cast<int>(this->_internal_transfer_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TransferSIPParticipantRequest.transfer_to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transfer_to(), target);
  }

  // bool play_dialtone = 4;
  if (this->_internal_play_dialtone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_play_dialtone(), target);
  }

  // map<string, string> headers = 5;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TransferSIPParticipantRequest_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.TransferSIPParticipantRequest.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.TransferSIPParticipantRequest.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TransferSIPParticipantRequest)
  return target;
}

size_t TransferSIPParticipantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TransferSIPParticipantRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += TransferSIPParticipantRequest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string participant_identity = 1;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string transfer_to = 3;
  if (!this->_internal_transfer_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transfer_to());
  }

  // bool play_dialtone = 4;
  if (this->_internal_play_dialtone() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferSIPParticipantRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferSIPParticipantRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferSIPParticipantRequest::GetClassData() const { return &_class_data_; }


void TransferSIPParticipantRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferSIPParticipantRequest*>(&to_msg);
  auto& from = static_cast<const TransferSIPParticipantRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TransferSIPParticipantRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_transfer_to().empty()) {
    _this->_internal_set_transfer_to(from._internal_transfer_to());
  }
  if (from._internal_play_dialtone() != 0) {
    _this->_internal_set_play_dialtone(from._internal_play_dialtone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferSIPParticipantRequest::CopyFrom(const TransferSIPParticipantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TransferSIPParticipantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferSIPParticipantRequest::IsInitialized() const {
  return true;
}

void TransferSIPParticipantRequest::InternalSwap(TransferSIPParticipantRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transfer_to_, lhs_arena,
      &other->_impl_.transfer_to_, rhs_arena
  );
  swap(_impl_.play_dialtone_, other->_impl_.play_dialtone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferSIPParticipantRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[43]);
}

// ===================================================================

SIPCallInfo_ParticipantAttributesEntry_DoNotUse::SIPCallInfo_ParticipantAttributesEntry_DoNotUse() {}
SIPCallInfo_ParticipantAttributesEntry_DoNotUse::SIPCallInfo_ParticipantAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SIPCallInfo_ParticipantAttributesEntry_DoNotUse::MergeFrom(const SIPCallInfo_ParticipantAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SIPCallInfo_ParticipantAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[44]);
}

// ===================================================================

class SIPCallInfo::_Internal {
 public:
  static const ::livekit::SIPUri& from_uri(const SIPCallInfo* msg);
  static const ::livekit::SIPUri& to_uri(const SIPCallInfo* msg);
  static const ::livekit::SIPStatus& call_status_code(const SIPCallInfo* msg);
};

const ::livekit::SIPUri&
SIPCallInfo::_Internal::from_uri(const SIPCallInfo* msg) {
  return *msg->_impl_.from_uri_;
}
const ::livekit::SIPUri&
SIPCallInfo::_Internal::to_uri(const SIPCallInfo* msg) {
  return *msg->_impl_.to_uri_;
}
const ::livekit::SIPStatus&
SIPCallInfo::_Internal::call_status_code(const SIPCallInfo* msg) {
  return *msg->_impl_.call_status_code_;
}
SIPCallInfo::SIPCallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SIPCallInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.SIPCallInfo)
}
SIPCallInfo::SIPCallInfo(const SIPCallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPCallInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_features_){from._impl_.enabled_features_}
    , /*decltype(_impl_._enabled_features_cached_byte_size_)*/{0}
    , /*decltype(_impl_.participant_attributes_)*/{}
    , decltype(_impl_.call_id_){}
    , decltype(_impl_.trunk_id_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.dispatch_rule_id_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.audio_codec_){}
    , decltype(_impl_.media_encryption_){}
    , decltype(_impl_.from_uri_){nullptr}
    , decltype(_impl_.to_uri_){nullptr}
    , decltype(_impl_.call_status_code_){nullptr}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.call_status_){}
    , decltype(_impl_.disconnect_reason_){}
    , decltype(_impl_.ended_at_){}
    , decltype(_impl_.created_at_ns_){}
    , decltype(_impl_.started_at_ns_){}
    , decltype(_impl_.ended_at_ns_){}
    , decltype(_impl_.call_direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.participant_attributes_.MergeFrom(from._impl_.participant_attributes_);
  _impl_.call_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.call_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_call_id().empty()) {
    _this->_impl_.call_id_.Set(from._internal_call_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trunk_id().empty()) {
    _this->_impl_.trunk_id_.Set(from._internal_trunk_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dispatch_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dispatch_rule_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dispatch_rule_id().empty()) {
    _this->_impl_.dispatch_rule_id_.Set(from._internal_dispatch_rule_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.audio_codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_codec().empty()) {
    _this->_impl_.audio_codec_.Set(from._internal_audio_codec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.media_encryption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_encryption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_encryption().empty()) {
    _this->_impl_.media_encryption_.Set(from._internal_media_encryption(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from_uri()) {
    _this->_impl_.from_uri_ = new ::livekit::SIPUri(*from._impl_.from_uri_);
  }
  if (from._internal_has_to_uri()) {
    _this->_impl_.to_uri_ = new ::livekit::SIPUri(*from._impl_.to_uri_);
  }
  if (from._internal_has_call_status_code()) {
    _this->_impl_.call_status_code_ = new ::livekit::SIPStatus(*from._impl_.call_status_code_);
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.call_direction_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.call_direction_));
  // @@protoc_insertion_point(copy_constructor:livekit.SIPCallInfo)
}

inline void SIPCallInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_features_){arena}
    , /*decltype(_impl_._enabled_features_cached_byte_size_)*/{0}
    , /*decltype(_impl_.participant_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.call_id_){}
    , decltype(_impl_.trunk_id_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.dispatch_rule_id_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.audio_codec_){}
    , decltype(_impl_.media_encryption_){}
    , decltype(_impl_.from_uri_){nullptr}
    , decltype(_impl_.to_uri_){nullptr}
    , decltype(_impl_.call_status_code_){nullptr}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.call_status_){0}
    , decltype(_impl_.disconnect_reason_){0}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , decltype(_impl_.created_at_ns_){int64_t{0}}
    , decltype(_impl_.started_at_ns_){int64_t{0}}
    , decltype(_impl_.ended_at_ns_){int64_t{0}}
    , decltype(_impl_.call_direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.call_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.call_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trunk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trunk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dispatch_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dispatch_rule_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.media_encryption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_encryption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPCallInfo::~SIPCallInfo() {
  // @@protoc_insertion_point(destructor:livekit.SIPCallInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SIPCallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enabled_features_.~RepeatedField();
  _impl_.participant_attributes_.Destruct();
  _impl_.participant_attributes_.~MapField();
  _impl_.call_id_.Destroy();
  _impl_.trunk_id_.Destroy();
  _impl_.room_name_.Destroy();
  _impl_.room_id_.Destroy();
  _impl_.participant_identity_.Destroy();
  _impl_.error_.Destroy();
  _impl_.dispatch_rule_id_.Destroy();
  _impl_.region_.Destroy();
  _impl_.audio_codec_.Destroy();
  _impl_.media_encryption_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_uri_;
  if (this != internal_default_instance()) delete _impl_.to_uri_;
  if (this != internal_default_instance()) delete _impl_.call_status_code_;
}

void SIPCallInfo::ArenaDtor(void* object) {
  SIPCallInfo* _this = reinterpret_cast< SIPCallInfo* >(object);
  _this->_impl_.participant_attributes_.Destruct();
}
void SIPCallInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPCallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPCallInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_features_.Clear();
  _impl_.participant_attributes_.Clear();
  _impl_.call_id_.ClearToEmpty();
  _impl_.trunk_id_.ClearToEmpty();
  _impl_.room_name_.ClearToEmpty();
  _impl_.room_id_.ClearToEmpty();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.error_.ClearToEmpty();
  _impl_.dispatch_rule_id_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.audio_codec_.ClearToEmpty();
  _impl_.media_encryption_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_uri_ != nullptr) {
    delete _impl_.from_uri_;
  }
  _impl_.from_uri_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_uri_ != nullptr) {
    delete _impl_.to_uri_;
  }
  _impl_.to_uri_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.call_status_code_ != nullptr) {
    delete _impl_.call_status_code_;
  }
  _impl_.call_status_code_ = nullptr;
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.call_direction_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.call_direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPCallInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_call_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.call_id"));
        } else
          goto handle_unusual;
        continue;
      // string trunk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trunk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.trunk_id"));
        } else
          goto handle_unusual;
        continue;
      // string room_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string room_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.room_id"));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPUri from_uri = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_uri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPUri to_uri = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_uri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPCallStatus call_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_call_status(static_cast<::livekit::SIPCallStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DisconnectReason disconnect_reason = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_disconnect_reason(static_cast<::livekit::DisconnectReason>(val));
        } else
          goto handle_unusual;
        continue;
      // string error = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.error"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SIPFeature enabled_features = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_enabled_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_enabled_features(static_cast<::livekit::SIPFeature>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPCallDirection call_direction = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_call_direction(static_cast<::livekit::SIPCallDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // string dispatch_rule_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_dispatch_rule_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.dispatch_rule_id"));
        } else
          goto handle_unusual;
        continue;
      // string region = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.region"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> participant_attributes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.participant_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPStatus call_status_code = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_status_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string audio_codec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_audio_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.audio_codec"));
        } else
          goto handle_unusual;
        continue;
      // string media_encryption = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_media_encryption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPCallInfo.media_encryption"));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at_ns = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.created_at_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 started_at_ns = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.started_at_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at_ns = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.ended_at_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPCallInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPCallInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_id = 1;
  if (!this->_internal_call_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_id().data(), static_cast<int>(this->_internal_call_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.call_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_call_id(), target);
  }

  // string trunk_id = 2;
  if (!this->_internal_trunk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trunk_id().data(), static_cast<int>(this->_internal_trunk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.trunk_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trunk_id(), target);
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.room_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_name(), target);
  }

  // string room_id = 4;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.room_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room_id(), target);
  }

  // string participant_identity = 5;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.participant_identity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_participant_identity(), target);
  }

  // .livekit.SIPUri from_uri = 6;
  if (this->_internal_has_from_uri()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::from_uri(this),
        _Internal::from_uri(this).GetCachedSize(), target, stream);
  }

  // .livekit.SIPUri to_uri = 7;
  if (this->_internal_has_to_uri()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::to_uri(this),
        _Internal::to_uri(this).GetCachedSize(), target, stream);
  }

  // .livekit.SIPCallStatus call_status = 8;
  if (this->_internal_call_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_call_status(), target);
  }

  // int64 created_at = 9 [deprecated = true];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_created_at(), target);
  }

  // int64 started_at = 10 [deprecated = true];
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_started_at(), target);
  }

  // int64 ended_at = 11 [deprecated = true];
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_ended_at(), target);
  }

  // .livekit.DisconnectReason disconnect_reason = 12;
  if (this->_internal_disconnect_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_disconnect_reason(), target);
  }

  // string error = 13;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.error");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_error(), target);
  }

  // repeated .livekit.SIPFeature enabled_features = 14;
  {
    int byte_size = _impl_._enabled_features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          14, _impl_.enabled_features_, byte_size, target);
    }
  }

  // .livekit.SIPCallDirection call_direction = 15;
  if (this->_internal_call_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_call_direction(), target);
  }

  // string dispatch_rule_id = 16;
  if (!this->_internal_dispatch_rule_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dispatch_rule_id().data(), static_cast<int>(this->_internal_dispatch_rule_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.dispatch_rule_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_dispatch_rule_id(), target);
  }

  // string region = 17;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.region");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_region(), target);
  }

  // map<string, string> participant_attributes = 18;
  if (!this->_internal_participant_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SIPCallInfo_ParticipantAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_participant_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPCallInfo.ParticipantAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.SIPCallInfo.ParticipantAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .livekit.SIPStatus call_status_code = 19;
  if (this->_internal_has_call_status_code()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::call_status_code(this),
        _Internal::call_status_code(this).GetCachedSize(), target, stream);
  }

  // string audio_codec = 20;
  if (!this->_internal_audio_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_codec().data(), static_cast<int>(this->_internal_audio_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.audio_codec");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_audio_codec(), target);
  }

  // string media_encryption = 21;
  if (!this->_internal_media_encryption().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_encryption().data(), static_cast<int>(this->_internal_media_encryption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPCallInfo.media_encryption");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_media_encryption(), target);
  }

  // int64 created_at_ns = 22;
  if (this->_internal_created_at_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_created_at_ns(), target);
  }

  // int64 started_at_ns = 23;
  if (this->_internal_started_at_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_started_at_ns(), target);
  }

  // int64 ended_at_ns = 24;
  if (this->_internal_ended_at_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_ended_at_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPCallInfo)
  return target;
}

size_t SIPCallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPCallInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SIPFeature enabled_features = 14;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enabled_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_enabled_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._enabled_features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, string> participant_attributes = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_participant_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_participant_attributes().begin();
      it != this->_internal_participant_attributes().end(); ++it) {
    total_size += SIPCallInfo_ParticipantAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string call_id = 1;
  if (!this->_internal_call_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_id());
  }

  // string trunk_id = 2;
  if (!this->_internal_trunk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trunk_id());
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string room_id = 4;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string participant_identity = 5;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // string error = 13;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // string dispatch_rule_id = 16;
  if (!this->_internal_dispatch_rule_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dispatch_rule_id());
  }

  // string region = 17;
  if (!this->_internal_region().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string audio_codec = 20;
  if (!this->_internal_audio_codec().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_codec());
  }

  // string media_encryption = 21;
  if (!this->_internal_media_encryption().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_encryption());
  }

  // .livekit.SIPUri from_uri = 6;
  if (this->_internal_has_from_uri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_uri_);
  }

  // .livekit.SIPUri to_uri = 7;
  if (this->_internal_has_to_uri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_uri_);
  }

  // .livekit.SIPStatus call_status_code = 19;
  if (this->_internal_has_call_status_code()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.call_status_code_);
  }

  // int64 created_at = 9 [deprecated = true];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int64 started_at = 10 [deprecated = true];
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // .livekit.SIPCallStatus call_status = 8;
  if (this->_internal_call_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_call_status());
  }

  // .livekit.DisconnectReason disconnect_reason = 12;
  if (this->_internal_disconnect_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
  }

  // int64 ended_at = 11 [deprecated = true];
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  // int64 created_at_ns = 22;
  if (this->_internal_created_at_ns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_created_at_ns());
  }

  // int64 started_at_ns = 23;
  if (this->_internal_started_at_ns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_started_at_ns());
  }

  // int64 ended_at_ns = 24;
  if (this->_internal_ended_at_ns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ended_at_ns());
  }

  // .livekit.SIPCallDirection call_direction = 15;
  if (this->_internal_call_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_call_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPCallInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPCallInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPCallInfo::GetClassData() const { return &_class_data_; }


void SIPCallInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPCallInfo*>(&to_msg);
  auto& from = static_cast<const SIPCallInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPCallInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enabled_features_.MergeFrom(from._impl_.enabled_features_);
  _this->_impl_.participant_attributes_.MergeFrom(from._impl_.participant_attributes_);
  if (!from._internal_call_id().empty()) {
    _this->_internal_set_call_id(from._internal_call_id());
  }
  if (!from._internal_trunk_id().empty()) {
    _this->_internal_set_trunk_id(from._internal_trunk_id());
  }
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (!from._internal_dispatch_rule_id().empty()) {
    _this->_internal_set_dispatch_rule_id(from._internal_dispatch_rule_id());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_audio_codec().empty()) {
    _this->_internal_set_audio_codec(from._internal_audio_codec());
  }
  if (!from._internal_media_encryption().empty()) {
    _this->_internal_set_media_encryption(from._internal_media_encryption());
  }
  if (from._internal_has_from_uri()) {
    _this->_internal_mutable_from_uri()->::livekit::SIPUri::MergeFrom(
        from._internal_from_uri());
  }
  if (from._internal_has_to_uri()) {
    _this->_internal_mutable_to_uri()->::livekit::SIPUri::MergeFrom(
        from._internal_to_uri());
  }
  if (from._internal_has_call_status_code()) {
    _this->_internal_mutable_call_status_code()->::livekit::SIPStatus::MergeFrom(
        from._internal_call_status_code());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_call_status() != 0) {
    _this->_internal_set_call_status(from._internal_call_status());
  }
  if (from._internal_disconnect_reason() != 0) {
    _this->_internal_set_disconnect_reason(from._internal_disconnect_reason());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  if (from._internal_created_at_ns() != 0) {
    _this->_internal_set_created_at_ns(from._internal_created_at_ns());
  }
  if (from._internal_started_at_ns() != 0) {
    _this->_internal_set_started_at_ns(from._internal_started_at_ns());
  }
  if (from._internal_ended_at_ns() != 0) {
    _this->_internal_set_ended_at_ns(from._internal_ended_at_ns());
  }
  if (from._internal_call_direction() != 0) {
    _this->_internal_set_call_direction(from._internal_call_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPCallInfo::CopyFrom(const SIPCallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPCallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPCallInfo::IsInitialized() const {
  return true;
}

void SIPCallInfo::InternalSwap(SIPCallInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enabled_features_.InternalSwap(&other->_impl_.enabled_features_);
  _impl_.participant_attributes_.InternalSwap(&other->_impl_.participant_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.call_id_, lhs_arena,
      &other->_impl_.call_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trunk_id_, lhs_arena,
      &other->_impl_.trunk_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dispatch_rule_id_, lhs_arena,
      &other->_impl_.dispatch_rule_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_codec_, lhs_arena,
      &other->_impl_.audio_codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_encryption_, lhs_arena,
      &other->_impl_.media_encryption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SIPCallInfo, _impl_.call_direction_)
      + sizeof(SIPCallInfo::_impl_.call_direction_)
      - PROTOBUF_FIELD_OFFSET(SIPCallInfo, _impl_.from_uri_)>(
          reinterpret_cast<char*>(&_impl_.from_uri_),
          reinterpret_cast<char*>(&other->_impl_.from_uri_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPCallInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[45]);
}

// ===================================================================

class SIPUri::_Internal {
 public:
};

SIPUri::SIPUri(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SIPUri)
}
SIPUri::SIPUri(const SIPUri& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SIPUri* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.transport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transport_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.transport_));
  // @@protoc_insertion_point(copy_constructor:livekit.SIPUri)
}

inline void SIPUri::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.transport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SIPUri::~SIPUri() {
  // @@protoc_insertion_point(destructor:livekit.SIPUri)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SIPUri::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  _impl_.host_.Destroy();
  _impl_.ip_.Destroy();
}

void SIPUri::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SIPUri::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SIPUri)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transport_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.transport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SIPUri::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPUri.user"));
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPUri.host"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SIPUri.ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SIPTransport transport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transport(static_cast<::livekit::SIPTransport>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SIPUri::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SIPUri)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPUri.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPUri.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SIPUri.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // .livekit.SIPTransport transport = 5;
  if (this->_internal_transport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_transport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SIPUri)
  return target;
}

size_t SIPUri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SIPUri)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .livekit.SIPTransport transport = 5;
  if (this->_internal_transport() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_transport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SIPUri::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SIPUri::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SIPUri::GetClassData() const { return &_class_data_; }


void SIPUri::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SIPUri*>(&to_msg);
  auto& from = static_cast<const SIPUri&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SIPUri)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_transport() != 0) {
    _this->_internal_set_transport(from._internal_transport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SIPUri::CopyFrom(const SIPUri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SIPUri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIPUri::IsInitialized() const {
  return true;
}

void SIPUri::InternalSwap(SIPUri* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SIPUri, _impl_.transport_)
      + sizeof(SIPUri::_impl_.transport_)
      - PROTOBUF_FIELD_OFFSET(SIPUri, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SIPUri::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fsip_2eproto_getter, &descriptor_table_livekit_5fsip_2eproto_once,
      file_level_metadata_livekit_5fsip_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::SIPStatus*
Arena::CreateMaybeMessage< ::livekit::SIPStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::CreateSIPTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPTrunkInfo*
Arena::CreateMaybeMessage< ::livekit::SIPTrunkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPTrunkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPInboundTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::CreateSIPInboundTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPInboundTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPInboundTrunkInfo_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPInboundTrunkInfo_HeadersToAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPInboundTrunkInfo_AttributesToHeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPInboundTrunkInfo*
Arena::CreateMaybeMessage< ::livekit::SIPInboundTrunkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPInboundTrunkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPOutboundTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::CreateSIPOutboundTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPOutboundTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundTrunkInfo_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundTrunkInfo_HeadersToAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundTrunkInfo_AttributesToHeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundTrunkInfo*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundTrunkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundTrunkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::GetSIPInboundTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::GetSIPInboundTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::GetSIPInboundTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::GetSIPInboundTrunkResponse*
Arena::CreateMaybeMessage< ::livekit::GetSIPInboundTrunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::GetSIPInboundTrunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::GetSIPOutboundTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::GetSIPOutboundTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::GetSIPOutboundTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::GetSIPOutboundTrunkResponse*
Arena::CreateMaybeMessage< ::livekit::GetSIPOutboundTrunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::GetSIPOutboundTrunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::ListSIPTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPTrunkResponse*
Arena::CreateMaybeMessage< ::livekit::ListSIPTrunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPTrunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPInboundTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::ListSIPInboundTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPInboundTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPInboundTrunkResponse*
Arena::CreateMaybeMessage< ::livekit::ListSIPInboundTrunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPInboundTrunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPOutboundTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::ListSIPOutboundTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPOutboundTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPOutboundTrunkResponse*
Arena::CreateMaybeMessage< ::livekit::ListSIPOutboundTrunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPOutboundTrunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DeleteSIPTrunkRequest*
Arena::CreateMaybeMessage< ::livekit::DeleteSIPTrunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DeleteSIPTrunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPDispatchRuleDirect*
Arena::CreateMaybeMessage< ::livekit::SIPDispatchRuleDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPDispatchRuleDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPDispatchRuleIndividual*
Arena::CreateMaybeMessage< ::livekit::SIPDispatchRuleIndividual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPDispatchRuleIndividual >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPDispatchRuleCallee*
Arena::CreateMaybeMessage< ::livekit::SIPDispatchRuleCallee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPDispatchRuleCallee >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPDispatchRule*
Arena::CreateMaybeMessage< ::livekit::SIPDispatchRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPDispatchRule >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPDispatchRuleRequest_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPDispatchRuleRequest*
Arena::CreateMaybeMessage< ::livekit::CreateSIPDispatchRuleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPDispatchRuleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPDispatchRuleInfo_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPDispatchRuleInfo*
Arena::CreateMaybeMessage< ::livekit::SIPDispatchRuleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPDispatchRuleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPDispatchRuleRequest*
Arena::CreateMaybeMessage< ::livekit::ListSIPDispatchRuleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPDispatchRuleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListSIPDispatchRuleResponse*
Arena::CreateMaybeMessage< ::livekit::ListSIPDispatchRuleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListSIPDispatchRuleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DeleteSIPDispatchRuleRequest*
Arena::CreateMaybeMessage< ::livekit::DeleteSIPDispatchRuleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DeleteSIPDispatchRuleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundConfig_HeadersToAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundConfig_AttributesToHeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPOutboundConfig*
Arena::CreateMaybeMessage< ::livekit::SIPOutboundConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPOutboundConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPParticipantRequest_ParticipantAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPParticipantRequest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::CreateSIPParticipantRequest*
Arena::CreateMaybeMessage< ::livekit::CreateSIPParticipantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateSIPParticipantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPParticipantInfo*
Arena::CreateMaybeMessage< ::livekit::SIPParticipantInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPParticipantInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TransferSIPParticipantRequest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TransferSIPParticipantRequest*
Arena::CreateMaybeMessage< ::livekit::TransferSIPParticipantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TransferSIPParticipantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPCallInfo_ParticipantAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPCallInfo*
Arena::CreateMaybeMessage< ::livekit::SIPCallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPCallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SIPUri*
Arena::CreateMaybeMessage< ::livekit::SIPUri >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SIPUri >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
