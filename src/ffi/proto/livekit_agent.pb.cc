// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_agent.proto

#include "livekit_agent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR Job::Job(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agent_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dispatch_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.participant_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct JobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobDefaultTypeInternal() {}
  union {
    Job _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobDefaultTypeInternal _Job_default_instance_;
PROTOBUF_CONSTEXPR JobState::JobState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_.updated_at_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JobStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobStateDefaultTypeInternal() {}
  union {
    JobState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobStateDefaultTypeInternal _JobState_default_instance_;
PROTOBUF_CONSTEXPR WorkerMessage::WorkerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WorkerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerMessageDefaultTypeInternal() {}
  union {
    WorkerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerMessageDefaultTypeInternal _WorkerMessage_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage::ServerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessageDefaultTypeInternal() {}
  union {
    ServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
PROTOBUF_CONSTEXPR SimulateJobRequest::SimulateJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.participant_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimulateJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulateJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulateJobRequestDefaultTypeInternal() {}
  union {
    SimulateJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulateJobRequestDefaultTypeInternal _SimulateJobRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkerPing::WorkerPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerPingDefaultTypeInternal() {}
  union {
    WorkerPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerPingDefaultTypeInternal _WorkerPing_default_instance_;
PROTOBUF_CONSTEXPR WorkerPong::WorkerPong(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerPongDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerPongDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerPongDefaultTypeInternal() {}
  union {
    WorkerPong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerPongDefaultTypeInternal _WorkerPong_default_instance_;
PROTOBUF_CONSTEXPR RegisterWorkerRequest::RegisterWorkerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agent_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allowed_permissions_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.ping_interval_)*/0u} {}
struct RegisterWorkerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterWorkerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterWorkerRequestDefaultTypeInternal() {}
  union {
    RegisterWorkerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterWorkerRequestDefaultTypeInternal _RegisterWorkerRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterWorkerResponse::RegisterWorkerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterWorkerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterWorkerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterWorkerResponseDefaultTypeInternal() {}
  union {
    RegisterWorkerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterWorkerResponseDefaultTypeInternal _RegisterWorkerResponse_default_instance_;
PROTOBUF_CONSTEXPR MigrateJobRequest::MigrateJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MigrateJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrateJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrateJobRequestDefaultTypeInternal() {}
  union {
    MigrateJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrateJobRequestDefaultTypeInternal _MigrateJobRequest_default_instance_;
PROTOBUF_CONSTEXPR AvailabilityRequest::AvailabilityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_)*/nullptr
  , /*decltype(_impl_.resuming_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvailabilityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailabilityRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailabilityRequestDefaultTypeInternal() {}
  union {
    AvailabilityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailabilityRequestDefaultTypeInternal _AvailabilityRequest_default_instance_;
PROTOBUF_CONSTEXPR AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AvailabilityResponse_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailabilityResponse_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailabilityResponse_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AvailabilityResponse_ParticipantAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailabilityResponse_ParticipantAttributesEntry_DoNotUseDefaultTypeInternal _AvailabilityResponse_ParticipantAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AvailabilityResponse::AvailabilityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.available_)*/false
  , /*decltype(_impl_.supports_resume_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvailabilityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailabilityResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailabilityResponseDefaultTypeInternal() {}
  union {
    AvailabilityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailabilityResponseDefaultTypeInternal _AvailabilityResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateJobStatus::UpdateJobStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateJobStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateJobStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateJobStatusDefaultTypeInternal() {}
  union {
    UpdateJobStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateJobStatusDefaultTypeInternal _UpdateJobStatus_default_instance_;
PROTOBUF_CONSTEXPR UpdateWorkerStatus::UpdateWorkerStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.load_)*/0
  , /*decltype(_impl_.job_count_)*/0u} {}
struct UpdateWorkerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateWorkerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateWorkerStatusDefaultTypeInternal() {}
  union {
    UpdateWorkerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateWorkerStatusDefaultTypeInternal _UpdateWorkerStatus_default_instance_;
PROTOBUF_CONSTEXPR JobAssignment::JobAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.job_)*/nullptr} {}
struct JobAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobAssignmentDefaultTypeInternal() {}
  union {
    JobAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobAssignmentDefaultTypeInternal _JobAssignment_default_instance_;
PROTOBUF_CONSTEXPR JobTermination::JobTermination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JobTerminationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobTerminationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobTerminationDefaultTypeInternal() {}
  union {
    JobTermination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobTerminationDefaultTypeInternal _JobTermination_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5fagent_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_livekit_5fagent_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5fagent_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fagent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.dispatch_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.agent_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::Job, _impl_.state_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _impl_.ended_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobState, _impl_.participant_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerMessage, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::ServerMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::ServerMessage, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateJobRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateJobRequest, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateJobRequest, _impl_.participant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerPing, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerPong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerPong, _impl_.last_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::WorkerPong, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_.agent_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_.ping_interval_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerRequest, _impl_.allowed_permissions_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerResponse, _impl_.worker_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegisterWorkerResponse, _impl_.server_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MigrateJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MigrateJobRequest, _impl_.job_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityRequest, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityRequest, _impl_.resuming_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.job_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.available_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.supports_resume_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.participant_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.participant_metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::AvailabilityResponse, _impl_.participant_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateJobStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateJobStatus, _impl_.job_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateJobStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateJobStatus, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateWorkerStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateWorkerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateWorkerStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateWorkerStatus, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateWorkerStatus, _impl_.job_count_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::JobAssignment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::JobAssignment, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobAssignment, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::JobAssignment, _impl_.token_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::JobTermination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::JobTermination, _impl_.job_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::livekit::Job)},
  { 24, -1, -1, sizeof(::livekit::JobState)},
  { 36, -1, -1, sizeof(::livekit::WorkerMessage)},
  { 50, -1, -1, sizeof(::livekit::ServerMessage)},
  { 62, -1, -1, sizeof(::livekit::SimulateJobRequest)},
  { 71, -1, -1, sizeof(::livekit::WorkerPing)},
  { 78, -1, -1, sizeof(::livekit::WorkerPong)},
  { 86, 98, -1, sizeof(::livekit::RegisterWorkerRequest)},
  { 104, -1, -1, sizeof(::livekit::RegisterWorkerResponse)},
  { 112, -1, -1, sizeof(::livekit::MigrateJobRequest)},
  { 119, -1, -1, sizeof(::livekit::AvailabilityRequest)},
  { 127, 135, -1, sizeof(::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse)},
  { 137, -1, -1, sizeof(::livekit::AvailabilityResponse)},
  { 150, -1, -1, sizeof(::livekit::UpdateJobStatus)},
  { 159, 168, -1, sizeof(::livekit::UpdateWorkerStatus)},
  { 171, 180, -1, sizeof(::livekit::JobAssignment)},
  { 183, -1, -1, sizeof(::livekit::JobTermination)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_Job_default_instance_._instance,
  &::livekit::_JobState_default_instance_._instance,
  &::livekit::_WorkerMessage_default_instance_._instance,
  &::livekit::_ServerMessage_default_instance_._instance,
  &::livekit::_SimulateJobRequest_default_instance_._instance,
  &::livekit::_WorkerPing_default_instance_._instance,
  &::livekit::_WorkerPong_default_instance_._instance,
  &::livekit::_RegisterWorkerRequest_default_instance_._instance,
  &::livekit::_RegisterWorkerResponse_default_instance_._instance,
  &::livekit::_MigrateJobRequest_default_instance_._instance,
  &::livekit::_AvailabilityRequest_default_instance_._instance,
  &::livekit::_AvailabilityResponse_ParticipantAttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_AvailabilityResponse_default_instance_._instance,
  &::livekit::_UpdateJobStatus_default_instance_._instance,
  &::livekit::_UpdateWorkerStatus_default_instance_._instance,
  &::livekit::_JobAssignment_default_instance_._instance,
  &::livekit::_JobTermination_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5fagent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023livekit_agent.proto\022\007livekit\032\024livekit_"
  "models.proto\"\206\002\n\003Job\022\n\n\002id\030\001 \001(\t\022\023\n\013disp"
  "atch_id\030\t \001(\t\022\036\n\004type\030\002 \001(\0162\020.livekit.Jo"
  "bType\022\033\n\004room\030\003 \001(\0132\r.livekit.Room\0222\n\013pa"
  "rticipant\030\004 \001(\0132\030.livekit.ParticipantInf"
  "oH\000\210\001\001\022\025\n\tnamespace\030\005 \001(\tB\002\030\001\022\020\n\010metadat"
  "a\030\006 \001(\t\022\022\n\nagent_name\030\007 \001(\t\022 \n\005state\030\010 \001"
  "(\0132\021.livekit.JobStateB\016\n\014_participant\"\225\001"
  "\n\010JobState\022\"\n\006status\030\001 \001(\0162\022.livekit.Job"
  "Status\022\r\n\005error\030\002 \001(\t\022\022\n\nstarted_at\030\003 \001("
  "\003\022\020\n\010ended_at\030\004 \001(\003\022\022\n\nupdated_at\030\005 \001(\003\022"
  "\034\n\024participant_identity\030\006 \001(\t\"\370\002\n\rWorker"
  "Message\0222\n\010register\030\001 \001(\0132\036.livekit.Regi"
  "sterWorkerRequestH\000\0225\n\014availability\030\002 \001("
  "\0132\035.livekit.AvailabilityResponseH\000\0224\n\rup"
  "date_worker\030\003 \001(\0132\033.livekit.UpdateWorker"
  "StatusH\000\022.\n\nupdate_job\030\004 \001(\0132\030.livekit.U"
  "pdateJobStatusH\000\022#\n\004ping\030\005 \001(\0132\023.livekit"
  ".WorkerPingH\000\0223\n\014simulate_job\030\006 \001(\0132\033.li"
  "vekit.SimulateJobRequestH\000\0221\n\013migrate_jo"
  "b\030\007 \001(\0132\032.livekit.MigrateJobRequestH\000B\t\n"
  "\007message\"\210\002\n\rServerMessage\0223\n\010register\030\001"
  " \001(\0132\037.livekit.RegisterWorkerResponseH\000\022"
  "4\n\014availability\030\002 \001(\0132\034.livekit.Availabi"
  "lityRequestH\000\022,\n\nassignment\030\003 \001(\0132\026.live"
  "kit.JobAssignmentH\000\022.\n\013termination\030\005 \001(\013"
  "2\027.livekit.JobTerminationH\000\022#\n\004pong\030\004 \001("
  "\0132\023.livekit.WorkerPongH\000B\t\n\007message\"\200\001\n\022"
  "SimulateJobRequest\022\036\n\004type\030\001 \001(\0162\020.livek"
  "it.JobType\022\033\n\004room\030\002 \001(\0132\r.livekit.Room\022"
  "-\n\013participant\030\003 \001(\0132\030.livekit.Participa"
  "ntInfo\"\037\n\nWorkerPing\022\021\n\ttimestamp\030\001 \001(\003\""
  "7\n\nWorkerPong\022\026\n\016last_timestamp\030\001 \001(\003\022\021\n"
  "\ttimestamp\030\002 \001(\003\"\326\001\n\025RegisterWorkerReque"
  "st\022\036\n\004type\030\001 \001(\0162\020.livekit.JobType\022\022\n\nag"
  "ent_name\030\010 \001(\t\022\017\n\007version\030\003 \001(\t\022\025\n\rping_"
  "interval\030\005 \001(\r\022\026\n\tnamespace\030\006 \001(\tH\000\210\001\001\022;"
  "\n\023allowed_permissions\030\007 \001(\0132\036.livekit.Pa"
  "rticipantPermissionB\014\n\n_namespace\"U\n\026Reg"
  "isterWorkerResponse\022\021\n\tworker_id\030\001 \001(\t\022("
  "\n\013server_info\030\003 \001(\0132\023.livekit.ServerInfo"
  "\"$\n\021MigrateJobRequest\022\017\n\007job_ids\030\002 \003(\t\"B"
  "\n\023AvailabilityRequest\022\031\n\003job\030\001 \001(\0132\014.liv"
  "ekit.Job\022\020\n\010resuming\030\002 \001(\010\"\300\002\n\024Availabil"
  "ityResponse\022\016\n\006job_id\030\001 \001(\t\022\021\n\tavailable"
  "\030\002 \001(\010\022\027\n\017supports_resume\030\003 \001(\010\022\030\n\020parti"
  "cipant_name\030\004 \001(\t\022\034\n\024participant_identit"
  "y\030\005 \001(\t\022\034\n\024participant_metadata\030\006 \001(\t\022X\n"
  "\026participant_attributes\030\007 \003(\01328.livekit."
  "AvailabilityResponse.ParticipantAttribut"
  "esEntry\032<\n\032ParticipantAttributesEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"T\n\017UpdateJ"
  "obStatus\022\016\n\006job_id\030\001 \001(\t\022\"\n\006status\030\002 \001(\016"
  "2\022.livekit.JobStatus\022\r\n\005error\030\003 \001(\t\"l\n\022U"
  "pdateWorkerStatus\022*\n\006status\030\001 \001(\0162\025.live"
  "kit.WorkerStatusH\000\210\001\001\022\014\n\004load\030\003 \001(\002\022\021\n\tj"
  "ob_count\030\004 \001(\rB\t\n\007_status\"S\n\rJobAssignme"
  "nt\022\031\n\003job\030\001 \001(\0132\014.livekit.Job\022\020\n\003url\030\002 \001"
  "(\tH\000\210\001\001\022\r\n\005token\030\003 \001(\tB\006\n\004_url\" \n\016JobTer"
  "mination\022\016\n\006job_id\030\001 \001(\t*<\n\007JobType\022\013\n\007J"
  "T_ROOM\020\000\022\020\n\014JT_PUBLISHER\020\001\022\022\n\016JT_PARTICI"
  "PANT\020\002*-\n\014WorkerStatus\022\020\n\014WS_AVAILABLE\020\000"
  "\022\013\n\007WS_FULL\020\001*J\n\tJobStatus\022\016\n\nJS_PENDING"
  "\020\000\022\016\n\nJS_RUNNING\020\001\022\016\n\nJS_SUCCESS\020\002\022\r\n\tJS"
  "_FAILED\020\003BFZ#github.com/livekit/protocol"
  "/livekit\252\002\rLiveKit.Proto\352\002\016LiveKit::Prot"
  "ob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5fagent_2eproto_deps[1] = {
  &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5fagent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5fagent_2eproto = {
    false, false, 2649, descriptor_table_protodef_livekit_5fagent_2eproto,
    "livekit_agent.proto",
    &descriptor_table_livekit_5fagent_2eproto_once, descriptor_table_livekit_5fagent_2eproto_deps, 1, 17,
    schemas, file_default_instances, TableStruct_livekit_5fagent_2eproto::offsets,
    file_level_metadata_livekit_5fagent_2eproto, file_level_enum_descriptors_livekit_5fagent_2eproto,
    file_level_service_descriptors_livekit_5fagent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5fagent_2eproto_getter() {
  return &descriptor_table_livekit_5fagent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5fagent_2eproto(&descriptor_table_livekit_5fagent_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fagent_2eproto);
  return file_level_enum_descriptors_livekit_5fagent_2eproto[0];
}
bool JobType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fagent_2eproto);
  return file_level_enum_descriptors_livekit_5fagent_2eproto[1];
}
bool WorkerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fagent_2eproto);
  return file_level_enum_descriptors_livekit_5fagent_2eproto[2];
}
bool JobStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Job::_Internal {
 public:
  using HasBits = decltype(std::declval<Job>()._impl_._has_bits_);
  static const ::livekit::Room& room(const Job* msg);
  static const ::livekit::ParticipantInfo& participant(const Job* msg);
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::JobState& state(const Job* msg);
};

const ::livekit::Room&
Job::_Internal::room(const Job* msg) {
  return *msg->_impl_.room_;
}
const ::livekit::ParticipantInfo&
Job::_Internal::participant(const Job* msg) {
  return *msg->_impl_.participant_;
}
const ::livekit::JobState&
Job::_Internal::state(const Job* msg) {
  return *msg->_impl_.state_;
}
void Job::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
void Job::clear_participant() {
  if (_impl_.participant_ != nullptr) _impl_.participant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Job::Job(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Job)
}
Job::Job(const Job& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Job* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.agent_name_){}
    , decltype(_impl_.dispatch_id_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agent_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_name().empty()) {
    _this->_impl_.agent_name_.Set(from._internal_agent_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dispatch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dispatch_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dispatch_id().empty()) {
    _this->_impl_.dispatch_id_.Set(from._internal_dispatch_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::Room(*from._impl_.room_);
  }
  if (from._internal_has_participant()) {
    _this->_impl_.participant_ = new ::livekit::ParticipantInfo(*from._impl_.participant_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::livekit::JobState(*from._impl_.state_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:livekit.Job)
}

inline void Job::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.agent_name_){}
    , decltype(_impl_.dispatch_id_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.type_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agent_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dispatch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dispatch_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:livekit.Job)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Job::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.namespace__.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.agent_name_.Destroy();
  _impl_.dispatch_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.participant_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void Job::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Job)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.namespace__.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.agent_name_.ClearToEmpty();
  _impl_.dispatch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.participant_ != nullptr);
    _impl_.participant_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Job.id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.JobType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::JobType>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.Room room = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.ParticipantInfo participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string namespace = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Job.namespace"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Job.metadata"));
        } else
          goto handle_unusual;
        continue;
      // string agent_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_agent_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Job.agent_name"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.JobState state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dispatch_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_dispatch_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Job.dispatch_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Job::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Job)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Job.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .livekit.JobType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .livekit.Room room = 3;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // optional .livekit.ParticipantInfo participant = 4;
  if (_internal_has_participant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  // string namespace = 5 [deprecated = true];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Job.namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_namespace_(), target);
  }

  // string metadata = 6;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Job.metadata");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_metadata(), target);
  }

  // string agent_name = 7;
  if (!this->_internal_agent_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_name().data(), static_cast<int>(this->_internal_agent_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Job.agent_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_agent_name(), target);
  }

  // .livekit.JobState state = 8;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // string dispatch_id = 9;
  if (!this->_internal_dispatch_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dispatch_id().data(), static_cast<int>(this->_internal_dispatch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Job.dispatch_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_dispatch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Job)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string namespace = 5 [deprecated = true];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string metadata = 6;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string agent_name = 7;
  if (!this->_internal_agent_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_name());
  }

  // string dispatch_id = 9;
  if (!this->_internal_dispatch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dispatch_id());
  }

  // .livekit.Room room = 3;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // optional .livekit.ParticipantInfo participant = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.participant_);
  }

  // .livekit.JobState state = 8;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // .livekit.JobType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Job::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Job::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Job::GetClassData() const { return &_class_data_; }


void Job::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Job*>(&to_msg);
  auto& from = static_cast<const Job&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Job)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_agent_name().empty()) {
    _this->_internal_set_agent_name(from._internal_agent_name());
  }
  if (!from._internal_dispatch_id().empty()) {
    _this->_internal_set_dispatch_id(from._internal_dispatch_id());
  }
  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::livekit::Room::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_participant()) {
    _this->_internal_mutable_participant()->::livekit::ParticipantInfo::MergeFrom(
        from._internal_participant());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::livekit::JobState::MergeFrom(
        from._internal_state());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::InternalSwap(Job* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_name_, lhs_arena,
      &other->_impl_.agent_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dispatch_id_, lhs_arena,
      &other->_impl_.dispatch_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job, _impl_.type_)
      + sizeof(Job::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Job, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[0]);
}

// ===================================================================

class JobState::_Internal {
 public:
};

JobState::JobState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.JobState)
}
JobState::JobState(const JobState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JobState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.ended_at_){}
    , decltype(_impl_.updated_at_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.started_at_, &from._impl_.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:livekit.JobState)
}

inline void JobState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , decltype(_impl_.updated_at_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JobState::~JobState() {
  // @@protoc_insertion_point(destructor:livekit.JobState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JobState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
  _impl_.participant_identity_.Destroy();
}

void JobState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JobState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.JobState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _impl_.participant_identity_.ClearToEmpty();
  ::memset(&_impl_.started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.JobStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::livekit::JobStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JobState.error"));
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updated_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JobState.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.JobState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.JobStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JobState.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // int64 started_at = 3;
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_started_at(), target);
  }

  // int64 ended_at = 4;
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_ended_at(), target);
  }

  // int64 updated_at = 5;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_updated_at(), target);
  }

  // string participant_identity = 6;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JobState.participant_identity");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_participant_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.JobState)
  return target;
}

size_t JobState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.JobState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // string participant_identity = 6;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // int64 started_at = 3;
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // int64 ended_at = 4;
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  // int64 updated_at = 5;
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updated_at());
  }

  // .livekit.JobStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JobState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobState::GetClassData() const { return &_class_data_; }


void JobState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JobState*>(&to_msg);
  auto& from = static_cast<const JobState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.JobState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobState::CopyFrom(const JobState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.JobState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobState::IsInitialized() const {
  return true;
}

void JobState::InternalSwap(JobState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobState, _impl_.status_)
      + sizeof(JobState::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(JobState, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[1]);
}

// ===================================================================

class WorkerMessage::_Internal {
 public:
  static const ::livekit::RegisterWorkerRequest& register_(const WorkerMessage* msg);
  static const ::livekit::AvailabilityResponse& availability(const WorkerMessage* msg);
  static const ::livekit::UpdateWorkerStatus& update_worker(const WorkerMessage* msg);
  static const ::livekit::UpdateJobStatus& update_job(const WorkerMessage* msg);
  static const ::livekit::WorkerPing& ping(const WorkerMessage* msg);
  static const ::livekit::SimulateJobRequest& simulate_job(const WorkerMessage* msg);
  static const ::livekit::MigrateJobRequest& migrate_job(const WorkerMessage* msg);
};

const ::livekit::RegisterWorkerRequest&
WorkerMessage::_Internal::register_(const WorkerMessage* msg) {
  return *msg->_impl_.message_.register__;
}
const ::livekit::AvailabilityResponse&
WorkerMessage::_Internal::availability(const WorkerMessage* msg) {
  return *msg->_impl_.message_.availability_;
}
const ::livekit::UpdateWorkerStatus&
WorkerMessage::_Internal::update_worker(const WorkerMessage* msg) {
  return *msg->_impl_.message_.update_worker_;
}
const ::livekit::UpdateJobStatus&
WorkerMessage::_Internal::update_job(const WorkerMessage* msg) {
  return *msg->_impl_.message_.update_job_;
}
const ::livekit::WorkerPing&
WorkerMessage::_Internal::ping(const WorkerMessage* msg) {
  return *msg->_impl_.message_.ping_;
}
const ::livekit::SimulateJobRequest&
WorkerMessage::_Internal::simulate_job(const WorkerMessage* msg) {
  return *msg->_impl_.message_.simulate_job_;
}
const ::livekit::MigrateJobRequest&
WorkerMessage::_Internal::migrate_job(const WorkerMessage* msg) {
  return *msg->_impl_.message_.migrate_job_;
}
void WorkerMessage::set_allocated_register_(::livekit::RegisterWorkerRequest* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(register_);
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    _impl_.message_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.register)
}
void WorkerMessage::set_allocated_availability(::livekit::AvailabilityResponse* availability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (availability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(availability);
    if (message_arena != submessage_arena) {
      availability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, availability, submessage_arena);
    }
    set_has_availability();
    _impl_.message_.availability_ = availability;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.availability)
}
void WorkerMessage::set_allocated_update_worker(::livekit::UpdateWorkerStatus* update_worker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_worker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_worker);
    if (message_arena != submessage_arena) {
      update_worker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_worker, submessage_arena);
    }
    set_has_update_worker();
    _impl_.message_.update_worker_ = update_worker;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.update_worker)
}
void WorkerMessage::set_allocated_update_job(::livekit::UpdateJobStatus* update_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_job);
    if (message_arena != submessage_arena) {
      update_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_job, submessage_arena);
    }
    set_has_update_job();
    _impl_.message_.update_job_ = update_job;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.update_job)
}
void WorkerMessage::set_allocated_ping(::livekit::WorkerPing* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.message_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.ping)
}
void WorkerMessage::set_allocated_simulate_job(::livekit::SimulateJobRequest* simulate_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (simulate_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(simulate_job);
    if (message_arena != submessage_arena) {
      simulate_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulate_job, submessage_arena);
    }
    set_has_simulate_job();
    _impl_.message_.simulate_job_ = simulate_job;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.simulate_job)
}
void WorkerMessage::set_allocated_migrate_job(::livekit::MigrateJobRequest* migrate_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (migrate_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(migrate_job);
    if (message_arena != submessage_arena) {
      migrate_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_job, submessage_arena);
    }
    set_has_migrate_job();
    _impl_.message_.migrate_job_ = migrate_job;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WorkerMessage.migrate_job)
}
WorkerMessage::WorkerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.WorkerMessage)
}
WorkerMessage::WorkerMessage(const WorkerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRegister: {
      _this->_internal_mutable_register_()->::livekit::RegisterWorkerRequest::MergeFrom(
          from._internal_register_());
      break;
    }
    case kAvailability: {
      _this->_internal_mutable_availability()->::livekit::AvailabilityResponse::MergeFrom(
          from._internal_availability());
      break;
    }
    case kUpdateWorker: {
      _this->_internal_mutable_update_worker()->::livekit::UpdateWorkerStatus::MergeFrom(
          from._internal_update_worker());
      break;
    }
    case kUpdateJob: {
      _this->_internal_mutable_update_job()->::livekit::UpdateJobStatus::MergeFrom(
          from._internal_update_job());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::livekit::WorkerPing::MergeFrom(
          from._internal_ping());
      break;
    }
    case kSimulateJob: {
      _this->_internal_mutable_simulate_job()->::livekit::SimulateJobRequest::MergeFrom(
          from._internal_simulate_job());
      break;
    }
    case kMigrateJob: {
      _this->_internal_mutable_migrate_job()->::livekit::MigrateJobRequest::MergeFrom(
          from._internal_migrate_job());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.WorkerMessage)
}

inline void WorkerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

WorkerMessage::~WorkerMessage() {
  // @@protoc_insertion_point(destructor:livekit.WorkerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void WorkerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.WorkerMessage)
  switch (message_case()) {
    case kRegister: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.register__;
      }
      break;
    }
    case kAvailability: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.availability_;
      }
      break;
    }
    case kUpdateWorker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_worker_;
      }
      break;
    }
    case kUpdateJob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_job_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.ping_;
      }
      break;
    }
    case kSimulateJob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.simulate_job_;
      }
      break;
    }
    case kMigrateJob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.migrate_job_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void WorkerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.WorkerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.RegisterWorkerRequest register = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AvailabilityResponse availability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_availability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateWorkerStatus update_worker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_worker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateJobStatus update_job = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.WorkerPing ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SimulateJobRequest simulate_job = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulate_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.MigrateJobRequest migrate_job = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_migrate_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.WorkerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.RegisterWorkerRequest register = 1;
  if (_internal_has_register_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::register_(this),
        _Internal::register_(this).GetCachedSize(), target, stream);
  }

  // .livekit.AvailabilityResponse availability = 2;
  if (_internal_has_availability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::availability(this),
        _Internal::availability(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateWorkerStatus update_worker = 3;
  if (_internal_has_update_worker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::update_worker(this),
        _Internal::update_worker(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateJobStatus update_job = 4;
  if (_internal_has_update_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::update_job(this),
        _Internal::update_job(this).GetCachedSize(), target, stream);
  }

  // .livekit.WorkerPing ping = 5;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  // .livekit.SimulateJobRequest simulate_job = 6;
  if (_internal_has_simulate_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::simulate_job(this),
        _Internal::simulate_job(this).GetCachedSize(), target, stream);
  }

  // .livekit.MigrateJobRequest migrate_job = 7;
  if (_internal_has_migrate_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::migrate_job(this),
        _Internal::migrate_job(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.WorkerMessage)
  return target;
}

size_t WorkerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.WorkerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.RegisterWorkerRequest register = 1;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.register__);
      break;
    }
    // .livekit.AvailabilityResponse availability = 2;
    case kAvailability: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.availability_);
      break;
    }
    // .livekit.UpdateWorkerStatus update_worker = 3;
    case kUpdateWorker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_worker_);
      break;
    }
    // .livekit.UpdateJobStatus update_job = 4;
    case kUpdateJob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_job_);
      break;
    }
    // .livekit.WorkerPing ping = 5;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.ping_);
      break;
    }
    // .livekit.SimulateJobRequest simulate_job = 6;
    case kSimulateJob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.simulate_job_);
      break;
    }
    // .livekit.MigrateJobRequest migrate_job = 7;
    case kMigrateJob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.migrate_job_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerMessage::GetClassData() const { return &_class_data_; }


void WorkerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerMessage*>(&to_msg);
  auto& from = static_cast<const WorkerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.WorkerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRegister: {
      _this->_internal_mutable_register_()->::livekit::RegisterWorkerRequest::MergeFrom(
          from._internal_register_());
      break;
    }
    case kAvailability: {
      _this->_internal_mutable_availability()->::livekit::AvailabilityResponse::MergeFrom(
          from._internal_availability());
      break;
    }
    case kUpdateWorker: {
      _this->_internal_mutable_update_worker()->::livekit::UpdateWorkerStatus::MergeFrom(
          from._internal_update_worker());
      break;
    }
    case kUpdateJob: {
      _this->_internal_mutable_update_job()->::livekit::UpdateJobStatus::MergeFrom(
          from._internal_update_job());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::livekit::WorkerPing::MergeFrom(
          from._internal_ping());
      break;
    }
    case kSimulateJob: {
      _this->_internal_mutable_simulate_job()->::livekit::SimulateJobRequest::MergeFrom(
          from._internal_simulate_job());
      break;
    }
    case kMigrateJob: {
      _this->_internal_mutable_migrate_job()->::livekit::MigrateJobRequest::MergeFrom(
          from._internal_migrate_job());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerMessage::CopyFrom(const WorkerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.WorkerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerMessage::IsInitialized() const {
  return true;
}

void WorkerMessage::InternalSwap(WorkerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[2]);
}

// ===================================================================

class ServerMessage::_Internal {
 public:
  static const ::livekit::RegisterWorkerResponse& register_(const ServerMessage* msg);
  static const ::livekit::AvailabilityRequest& availability(const ServerMessage* msg);
  static const ::livekit::JobAssignment& assignment(const ServerMessage* msg);
  static const ::livekit::JobTermination& termination(const ServerMessage* msg);
  static const ::livekit::WorkerPong& pong(const ServerMessage* msg);
};

const ::livekit::RegisterWorkerResponse&
ServerMessage::_Internal::register_(const ServerMessage* msg) {
  return *msg->_impl_.message_.register__;
}
const ::livekit::AvailabilityRequest&
ServerMessage::_Internal::availability(const ServerMessage* msg) {
  return *msg->_impl_.message_.availability_;
}
const ::livekit::JobAssignment&
ServerMessage::_Internal::assignment(const ServerMessage* msg) {
  return *msg->_impl_.message_.assignment_;
}
const ::livekit::JobTermination&
ServerMessage::_Internal::termination(const ServerMessage* msg) {
  return *msg->_impl_.message_.termination_;
}
const ::livekit::WorkerPong&
ServerMessage::_Internal::pong(const ServerMessage* msg) {
  return *msg->_impl_.message_.pong_;
}
void ServerMessage::set_allocated_register_(::livekit::RegisterWorkerResponse* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(register_);
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    _impl_.message_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerMessage.register)
}
void ServerMessage::set_allocated_availability(::livekit::AvailabilityRequest* availability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (availability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(availability);
    if (message_arena != submessage_arena) {
      availability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, availability, submessage_arena);
    }
    set_has_availability();
    _impl_.message_.availability_ = availability;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerMessage.availability)
}
void ServerMessage::set_allocated_assignment(::livekit::JobAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assignment);
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    set_has_assignment();
    _impl_.message_.assignment_ = assignment;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerMessage.assignment)
}
void ServerMessage::set_allocated_termination(::livekit::JobTermination* termination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (termination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(termination);
    if (message_arena != submessage_arena) {
      termination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, termination, submessage_arena);
    }
    set_has_termination();
    _impl_.message_.termination_ = termination;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerMessage.termination)
}
void ServerMessage::set_allocated_pong(::livekit::WorkerPong* pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pong);
    if (message_arena != submessage_arena) {
      pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong, submessage_arena);
    }
    set_has_pong();
    _impl_.message_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerMessage.pong)
}
ServerMessage::ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRegister: {
      _this->_internal_mutable_register_()->::livekit::RegisterWorkerResponse::MergeFrom(
          from._internal_register_());
      break;
    }
    case kAvailability: {
      _this->_internal_mutable_availability()->::livekit::AvailabilityRequest::MergeFrom(
          from._internal_availability());
      break;
    }
    case kAssignment: {
      _this->_internal_mutable_assignment()->::livekit::JobAssignment::MergeFrom(
          from._internal_assignment());
      break;
    }
    case kTermination: {
      _this->_internal_mutable_termination()->::livekit::JobTermination::MergeFrom(
          from._internal_termination());
      break;
    }
    case kPong: {
      _this->_internal_mutable_pong()->::livekit::WorkerPong::MergeFrom(
          from._internal_pong());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ServerMessage)
}

inline void ServerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:livekit.ServerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void ServerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.ServerMessage)
  switch (message_case()) {
    case kRegister: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.register__;
      }
      break;
    }
    case kAvailability: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.availability_;
      }
      break;
    }
    case kAssignment: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.assignment_;
      }
      break;
    }
    case kTermination: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.termination_;
      }
      break;
    }
    case kPong: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.pong_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ServerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.RegisterWorkerResponse register = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AvailabilityRequest availability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_availability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.JobAssignment assignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.WorkerPong pong = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.JobTermination termination = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_termination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ServerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.RegisterWorkerResponse register = 1;
  if (_internal_has_register_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::register_(this),
        _Internal::register_(this).GetCachedSize(), target, stream);
  }

  // .livekit.AvailabilityRequest availability = 2;
  if (_internal_has_availability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::availability(this),
        _Internal::availability(this).GetCachedSize(), target, stream);
  }

  // .livekit.JobAssignment assignment = 3;
  if (_internal_has_assignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::assignment(this),
        _Internal::assignment(this).GetCachedSize(), target, stream);
  }

  // .livekit.WorkerPong pong = 4;
  if (_internal_has_pong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pong(this),
        _Internal::pong(this).GetCachedSize(), target, stream);
  }

  // .livekit.JobTermination termination = 5;
  if (_internal_has_termination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::termination(this),
        _Internal::termination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ServerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.RegisterWorkerResponse register = 1;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.register__);
      break;
    }
    // .livekit.AvailabilityRequest availability = 2;
    case kAvailability: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.availability_);
      break;
    }
    // .livekit.JobAssignment assignment = 3;
    case kAssignment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.assignment_);
      break;
    }
    // .livekit.JobTermination termination = 5;
    case kTermination: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.termination_);
      break;
    }
    // .livekit.WorkerPong pong = 4;
    case kPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.pong_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage::GetClassData() const { return &_class_data_; }


void ServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage*>(&to_msg);
  auto& from = static_cast<const ServerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ServerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRegister: {
      _this->_internal_mutable_register_()->::livekit::RegisterWorkerResponse::MergeFrom(
          from._internal_register_());
      break;
    }
    case kAvailability: {
      _this->_internal_mutable_availability()->::livekit::AvailabilityRequest::MergeFrom(
          from._internal_availability());
      break;
    }
    case kAssignment: {
      _this->_internal_mutable_assignment()->::livekit::JobAssignment::MergeFrom(
          from._internal_assignment());
      break;
    }
    case kTermination: {
      _this->_internal_mutable_termination()->::livekit::JobTermination::MergeFrom(
          from._internal_termination());
      break;
    }
    case kPong: {
      _this->_internal_mutable_pong()->::livekit::WorkerPong::MergeFrom(
          from._internal_pong());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[3]);
}

// ===================================================================

class SimulateJobRequest::_Internal {
 public:
  static const ::livekit::Room& room(const SimulateJobRequest* msg);
  static const ::livekit::ParticipantInfo& participant(const SimulateJobRequest* msg);
};

const ::livekit::Room&
SimulateJobRequest::_Internal::room(const SimulateJobRequest* msg) {
  return *msg->_impl_.room_;
}
const ::livekit::ParticipantInfo&
SimulateJobRequest::_Internal::participant(const SimulateJobRequest* msg) {
  return *msg->_impl_.participant_;
}
void SimulateJobRequest::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
void SimulateJobRequest::clear_participant() {
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
}
SimulateJobRequest::SimulateJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulateJobRequest)
}
SimulateJobRequest::SimulateJobRequest(const SimulateJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulateJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::Room(*from._impl_.room_);
  }
  if (from._internal_has_participant()) {
    _this->_impl_.participant_ = new ::livekit::ParticipantInfo(*from._impl_.participant_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:livekit.SimulateJobRequest)
}

inline void SimulateJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimulateJobRequest::~SimulateJobRequest() {
  // @@protoc_insertion_point(destructor:livekit.SimulateJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulateJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.participant_;
}

void SimulateJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulateJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulateJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulateJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.JobType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::JobType>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.Room room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo participant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulateJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulateJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.JobType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .livekit.Room room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // .livekit.ParticipantInfo participant = 3;
  if (this->_internal_has_participant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulateJobRequest)
  return target;
}

size_t SimulateJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SimulateJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.Room room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // .livekit.ParticipantInfo participant = 3;
  if (this->_internal_has_participant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.participant_);
  }

  // .livekit.JobType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulateJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulateJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulateJobRequest::GetClassData() const { return &_class_data_; }


void SimulateJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulateJobRequest*>(&to_msg);
  auto& from = static_cast<const SimulateJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulateJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::livekit::Room::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_participant()) {
    _this->_internal_mutable_participant()->::livekit::ParticipantInfo::MergeFrom(
        from._internal_participant());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulateJobRequest::CopyFrom(const SimulateJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulateJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulateJobRequest::IsInitialized() const {
  return true;
}

void SimulateJobRequest::InternalSwap(SimulateJobRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulateJobRequest, _impl_.type_)
      + sizeof(SimulateJobRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SimulateJobRequest, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulateJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[4]);
}

// ===================================================================

class WorkerPing::_Internal {
 public:
};

WorkerPing::WorkerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.WorkerPing)
}
WorkerPing::WorkerPing(const WorkerPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:livekit.WorkerPing)
}

inline void WorkerPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkerPing::~WorkerPing() {
  // @@protoc_insertion_point(destructor:livekit.WorkerPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkerPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.WorkerPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.WorkerPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.WorkerPing)
  return target;
}

size_t WorkerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.WorkerPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerPing::GetClassData() const { return &_class_data_; }


void WorkerPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerPing*>(&to_msg);
  auto& from = static_cast<const WorkerPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.WorkerPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerPing::CopyFrom(const WorkerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.WorkerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerPing::IsInitialized() const {
  return true;
}

void WorkerPing::InternalSwap(WorkerPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[5]);
}

// ===================================================================

class WorkerPong::_Internal {
 public:
};

WorkerPong::WorkerPong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.WorkerPong)
}
WorkerPong::WorkerPong(const WorkerPong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerPong* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_timestamp_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_timestamp_, &from._impl_.last_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.last_timestamp_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:livekit.WorkerPong)
}

inline void WorkerPong::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_timestamp_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkerPong::~WorkerPong() {
  // @@protoc_insertion_point(destructor:livekit.WorkerPong)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerPong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkerPong::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerPong::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.WorkerPong)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.last_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.last_timestamp_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerPong::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerPong::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.WorkerPong)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_timestamp = 1;
  if (this->_internal_last_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_timestamp(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.WorkerPong)
  return target;
}

size_t WorkerPong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.WorkerPong)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 last_timestamp = 1;
  if (this->_internal_last_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_timestamp());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerPong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerPong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerPong::GetClassData() const { return &_class_data_; }


void WorkerPong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerPong*>(&to_msg);
  auto& from = static_cast<const WorkerPong&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.WorkerPong)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_last_timestamp() != 0) {
    _this->_internal_set_last_timestamp(from._internal_last_timestamp());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerPong::CopyFrom(const WorkerPong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.WorkerPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerPong::IsInitialized() const {
  return true;
}

void WorkerPong::InternalSwap(WorkerPong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerPong, _impl_.timestamp_)
      + sizeof(WorkerPong::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(WorkerPong, _impl_.last_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.last_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.last_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerPong::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[6]);
}

// ===================================================================

class RegisterWorkerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterWorkerRequest>()._impl_._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::ParticipantPermission& allowed_permissions(const RegisterWorkerRequest* msg);
};

const ::livekit::ParticipantPermission&
RegisterWorkerRequest::_Internal::allowed_permissions(const RegisterWorkerRequest* msg) {
  return *msg->_impl_.allowed_permissions_;
}
void RegisterWorkerRequest::clear_allowed_permissions() {
  if (GetArenaForAllocation() == nullptr && _impl_.allowed_permissions_ != nullptr) {
    delete _impl_.allowed_permissions_;
  }
  _impl_.allowed_permissions_ = nullptr;
}
RegisterWorkerRequest::RegisterWorkerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RegisterWorkerRequest)
}
RegisterWorkerRequest::RegisterWorkerRequest(const RegisterWorkerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterWorkerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.agent_name_){}
    , decltype(_impl_.allowed_permissions_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.ping_interval_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agent_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_name().empty()) {
    _this->_impl_.agent_name_.Set(from._internal_agent_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_allowed_permissions()) {
    _this->_impl_.allowed_permissions_ = new ::livekit::ParticipantPermission(*from._impl_.allowed_permissions_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ping_interval_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ping_interval_));
  // @@protoc_insertion_point(copy_constructor:livekit.RegisterWorkerRequest)
}

inline void RegisterWorkerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.agent_name_){}
    , decltype(_impl_.allowed_permissions_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.ping_interval_){0u}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agent_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterWorkerRequest::~RegisterWorkerRequest() {
  // @@protoc_insertion_point(destructor:livekit.RegisterWorkerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterWorkerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.namespace__.Destroy();
  _impl_.agent_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.allowed_permissions_;
}

void RegisterWorkerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterWorkerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RegisterWorkerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.namespace__.ClearNonDefaultToEmpty();
  }
  _impl_.agent_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.allowed_permissions_ != nullptr) {
    delete _impl_.allowed_permissions_;
  }
  _impl_.allowed_permissions_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ping_interval_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ping_interval_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterWorkerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.JobType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::JobType>(val));
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RegisterWorkerRequest.version"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ping_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ping_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string namespace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RegisterWorkerRequest.namespace"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantPermission allowed_permissions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowed_permissions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string agent_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_agent_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RegisterWorkerRequest.agent_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterWorkerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RegisterWorkerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.JobType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RegisterWorkerRequest.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // uint32 ping_interval = 5;
  if (this->_internal_ping_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ping_interval(), target);
  }

  // optional string namespace = 6;
  if (_internal_has_namespace_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RegisterWorkerRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_namespace_(), target);
  }

  // .livekit.ParticipantPermission allowed_permissions = 7;
  if (this->_internal_has_allowed_permissions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::allowed_permissions(this),
        _Internal::allowed_permissions(this).GetCachedSize(), target, stream);
  }

  // string agent_name = 8;
  if (!this->_internal_agent_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_name().data(), static_cast<int>(this->_internal_agent_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RegisterWorkerRequest.agent_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_agent_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RegisterWorkerRequest)
  return target;
}

size_t RegisterWorkerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RegisterWorkerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // optional string namespace = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string agent_name = 8;
  if (!this->_internal_agent_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_name());
  }

  // .livekit.ParticipantPermission allowed_permissions = 7;
  if (this->_internal_has_allowed_permissions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allowed_permissions_);
  }

  // .livekit.JobType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 ping_interval = 5;
  if (this->_internal_ping_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterWorkerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterWorkerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterWorkerRequest::GetClassData() const { return &_class_data_; }


void RegisterWorkerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterWorkerRequest*>(&to_msg);
  auto& from = static_cast<const RegisterWorkerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RegisterWorkerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_namespace_()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_agent_name().empty()) {
    _this->_internal_set_agent_name(from._internal_agent_name());
  }
  if (from._internal_has_allowed_permissions()) {
    _this->_internal_mutable_allowed_permissions()->::livekit::ParticipantPermission::MergeFrom(
        from._internal_allowed_permissions());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_ping_interval() != 0) {
    _this->_internal_set_ping_interval(from._internal_ping_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterWorkerRequest::CopyFrom(const RegisterWorkerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RegisterWorkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterWorkerRequest::IsInitialized() const {
  return true;
}

void RegisterWorkerRequest::InternalSwap(RegisterWorkerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_name_, lhs_arena,
      &other->_impl_.agent_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterWorkerRequest, _impl_.ping_interval_)
      + sizeof(RegisterWorkerRequest::_impl_.ping_interval_)
      - PROTOBUF_FIELD_OFFSET(RegisterWorkerRequest, _impl_.allowed_permissions_)>(
          reinterpret_cast<char*>(&_impl_.allowed_permissions_),
          reinterpret_cast<char*>(&other->_impl_.allowed_permissions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterWorkerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[7]);
}

// ===================================================================

class RegisterWorkerResponse::_Internal {
 public:
  static const ::livekit::ServerInfo& server_info(const RegisterWorkerResponse* msg);
};

const ::livekit::ServerInfo&
RegisterWorkerResponse::_Internal::server_info(const RegisterWorkerResponse* msg) {
  return *msg->_impl_.server_info_;
}
void RegisterWorkerResponse::clear_server_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
}
RegisterWorkerResponse::RegisterWorkerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RegisterWorkerResponse)
}
RegisterWorkerResponse::RegisterWorkerResponse(const RegisterWorkerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterWorkerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_id_){}
    , decltype(_impl_.server_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_server_info()) {
    _this->_impl_.server_info_ = new ::livekit::ServerInfo(*from._impl_.server_info_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RegisterWorkerResponse)
}

inline void RegisterWorkerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_id_){}
    , decltype(_impl_.server_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterWorkerResponse::~RegisterWorkerResponse() {
  // @@protoc_insertion_point(destructor:livekit.RegisterWorkerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterWorkerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.server_info_;
}

void RegisterWorkerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterWorkerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RegisterWorkerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterWorkerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RegisterWorkerResponse.worker_id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ServerInfo server_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterWorkerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RegisterWorkerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RegisterWorkerResponse.worker_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_id(), target);
  }

  // .livekit.ServerInfo server_info = 3;
  if (this->_internal_has_server_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RegisterWorkerResponse)
  return target;
}

size_t RegisterWorkerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RegisterWorkerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // .livekit.ServerInfo server_info = 3;
  if (this->_internal_has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterWorkerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterWorkerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterWorkerResponse::GetClassData() const { return &_class_data_; }


void RegisterWorkerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterWorkerResponse*>(&to_msg);
  auto& from = static_cast<const RegisterWorkerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RegisterWorkerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (from._internal_has_server_info()) {
    _this->_internal_mutable_server_info()->::livekit::ServerInfo::MergeFrom(
        from._internal_server_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterWorkerResponse::CopyFrom(const RegisterWorkerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RegisterWorkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterWorkerResponse::IsInitialized() const {
  return true;
}

void RegisterWorkerResponse::InternalSwap(RegisterWorkerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
  swap(_impl_.server_info_, other->_impl_.server_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterWorkerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[8]);
}

// ===================================================================

class MigrateJobRequest::_Internal {
 public:
};

MigrateJobRequest::MigrateJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.MigrateJobRequest)
}
MigrateJobRequest::MigrateJobRequest(const MigrateJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MigrateJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_ids_){from._impl_.job_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.MigrateJobRequest)
}

inline void MigrateJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MigrateJobRequest::~MigrateJobRequest() {
  // @@protoc_insertion_point(destructor:livekit.MigrateJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MigrateJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_ids_.~RepeatedPtrField();
}

void MigrateJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MigrateJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MigrateJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MigrateJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string job_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_job_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.MigrateJobRequest.job_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MigrateJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MigrateJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string job_ids = 2;
  for (int i = 0, n = this->_internal_job_ids_size(); i < n; i++) {
    const auto& s = this->_internal_job_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MigrateJobRequest.job_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MigrateJobRequest)
  return target;
}

size_t MigrateJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MigrateJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string job_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.job_ids_.size());
  for (int i = 0, n = _impl_.job_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.job_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MigrateJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MigrateJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MigrateJobRequest::GetClassData() const { return &_class_data_; }


void MigrateJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MigrateJobRequest*>(&to_msg);
  auto& from = static_cast<const MigrateJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MigrateJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.job_ids_.MergeFrom(from._impl_.job_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MigrateJobRequest::CopyFrom(const MigrateJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MigrateJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateJobRequest::IsInitialized() const {
  return true;
}

void MigrateJobRequest::InternalSwap(MigrateJobRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.job_ids_.InternalSwap(&other->_impl_.job_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MigrateJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[9]);
}

// ===================================================================

class AvailabilityRequest::_Internal {
 public:
  static const ::livekit::Job& job(const AvailabilityRequest* msg);
};

const ::livekit::Job&
AvailabilityRequest::_Internal::job(const AvailabilityRequest* msg) {
  return *msg->_impl_.job_;
}
AvailabilityRequest::AvailabilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.AvailabilityRequest)
}
AvailabilityRequest::AvailabilityRequest(const AvailabilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvailabilityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_){nullptr}
    , decltype(_impl_.resuming_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_job()) {
    _this->_impl_.job_ = new ::livekit::Job(*from._impl_.job_);
  }
  _this->_impl_.resuming_ = from._impl_.resuming_;
  // @@protoc_insertion_point(copy_constructor:livekit.AvailabilityRequest)
}

inline void AvailabilityRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_){nullptr}
    , decltype(_impl_.resuming_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AvailabilityRequest::~AvailabilityRequest() {
  // @@protoc_insertion_point(destructor:livekit.AvailabilityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvailabilityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.job_;
}

void AvailabilityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvailabilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AvailabilityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
  _impl_.resuming_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvailabilityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Job job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool resuming = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.resuming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvailabilityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AvailabilityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Job job = 1;
  if (this->_internal_has_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::job(this),
        _Internal::job(this).GetCachedSize(), target, stream);
  }

  // bool resuming = 2;
  if (this->_internal_resuming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_resuming(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AvailabilityRequest)
  return target;
}

size_t AvailabilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AvailabilityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.Job job = 1;
  if (this->_internal_has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.job_);
  }

  // bool resuming = 2;
  if (this->_internal_resuming() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvailabilityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvailabilityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvailabilityRequest::GetClassData() const { return &_class_data_; }


void AvailabilityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvailabilityRequest*>(&to_msg);
  auto& from = static_cast<const AvailabilityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AvailabilityRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_job()) {
    _this->_internal_mutable_job()->::livekit::Job::MergeFrom(
        from._internal_job());
  }
  if (from._internal_resuming() != 0) {
    _this->_internal_set_resuming(from._internal_resuming());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvailabilityRequest::CopyFrom(const AvailabilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AvailabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailabilityRequest::IsInitialized() const {
  return true;
}

void AvailabilityRequest::InternalSwap(AvailabilityRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvailabilityRequest, _impl_.resuming_)
      + sizeof(AvailabilityRequest::_impl_.resuming_)
      - PROTOBUF_FIELD_OFFSET(AvailabilityRequest, _impl_.job_)>(
          reinterpret_cast<char*>(&_impl_.job_),
          reinterpret_cast<char*>(&other->_impl_.job_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvailabilityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[10]);
}

// ===================================================================

AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse() {}
AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::MergeFrom(const AvailabilityResponse_ParticipantAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[11]);
}

// ===================================================================

class AvailabilityResponse::_Internal {
 public:
};

AvailabilityResponse::AvailabilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AvailabilityResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.AvailabilityResponse)
}
AvailabilityResponse::AvailabilityResponse(const AvailabilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvailabilityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.participant_attributes_)*/{}
    , decltype(_impl_.job_id_){}
    , decltype(_impl_.participant_name_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.participant_metadata_){}
    , decltype(_impl_.available_){}
    , decltype(_impl_.supports_resume_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.participant_attributes_.MergeFrom(from._impl_.participant_attributes_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_name().empty()) {
    _this->_impl_.participant_name_.Set(from._internal_participant_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_metadata().empty()) {
    _this->_impl_.participant_metadata_.Set(from._internal_participant_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.available_, &from._impl_.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.supports_resume_) -
    reinterpret_cast<char*>(&_impl_.available_)) + sizeof(_impl_.supports_resume_));
  // @@protoc_insertion_point(copy_constructor:livekit.AvailabilityResponse)
}

inline void AvailabilityResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.participant_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.job_id_){}
    , decltype(_impl_.participant_name_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.participant_metadata_){}
    , decltype(_impl_.available_){false}
    , decltype(_impl_.supports_resume_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AvailabilityResponse::~AvailabilityResponse() {
  // @@protoc_insertion_point(destructor:livekit.AvailabilityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AvailabilityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_attributes_.Destruct();
  _impl_.participant_attributes_.~MapField();
  _impl_.job_id_.Destroy();
  _impl_.participant_name_.Destroy();
  _impl_.participant_identity_.Destroy();
  _impl_.participant_metadata_.Destroy();
}

void AvailabilityResponse::ArenaDtor(void* object) {
  AvailabilityResponse* _this = reinterpret_cast< AvailabilityResponse* >(object);
  _this->_impl_.participant_attributes_.Destruct();
}
void AvailabilityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvailabilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AvailabilityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_attributes_.Clear();
  _impl_.job_id_.ClearToEmpty();
  _impl_.participant_name_.ClearToEmpty();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.participant_metadata_.ClearToEmpty();
  ::memset(&_impl_.available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.supports_resume_) -
      reinterpret_cast<char*>(&_impl_.available_)) + sizeof(_impl_.supports_resume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvailabilityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AvailabilityResponse.job_id"));
        } else
          goto handle_unusual;
        continue;
      // bool available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool supports_resume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.supports_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string participant_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AvailabilityResponse.participant_name"));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AvailabilityResponse.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // string participant_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_participant_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AvailabilityResponse.participant_metadata"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> participant_attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.participant_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvailabilityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AvailabilityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AvailabilityResponse.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // bool available = 2;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_available(), target);
  }

  // bool supports_resume = 3;
  if (this->_internal_supports_resume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_supports_resume(), target);
  }

  // string participant_name = 4;
  if (!this->_internal_participant_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_name().data(), static_cast<int>(this->_internal_participant_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AvailabilityResponse.participant_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant_name(), target);
  }

  // string participant_identity = 5;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AvailabilityResponse.participant_identity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_participant_identity(), target);
  }

  // string participant_metadata = 6;
  if (!this->_internal_participant_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_metadata().data(), static_cast<int>(this->_internal_participant_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AvailabilityResponse.participant_metadata");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_participant_metadata(), target);
  }

  // map<string, string> participant_attributes = 7;
  if (!this->_internal_participant_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_participant_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.AvailabilityResponse.ParticipantAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.AvailabilityResponse.ParticipantAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AvailabilityResponse)
  return target;
}

size_t AvailabilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AvailabilityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> participant_attributes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_participant_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_participant_attributes().begin();
      it != this->_internal_participant_attributes().end(); ++it) {
    total_size += AvailabilityResponse_ParticipantAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string participant_name = 4;
  if (!this->_internal_participant_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_name());
  }

  // string participant_identity = 5;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // string participant_metadata = 6;
  if (!this->_internal_participant_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_metadata());
  }

  // bool available = 2;
  if (this->_internal_available() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_resume = 3;
  if (this->_internal_supports_resume() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvailabilityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvailabilityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvailabilityResponse::GetClassData() const { return &_class_data_; }


void AvailabilityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvailabilityResponse*>(&to_msg);
  auto& from = static_cast<const AvailabilityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AvailabilityResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_attributes_.MergeFrom(from._impl_.participant_attributes_);
  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_participant_name().empty()) {
    _this->_internal_set_participant_name(from._internal_participant_name());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (!from._internal_participant_metadata().empty()) {
    _this->_internal_set_participant_metadata(from._internal_participant_metadata());
  }
  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  if (from._internal_supports_resume() != 0) {
    _this->_internal_set_supports_resume(from._internal_supports_resume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvailabilityResponse::CopyFrom(const AvailabilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AvailabilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailabilityResponse::IsInitialized() const {
  return true;
}

void AvailabilityResponse::InternalSwap(AvailabilityResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_attributes_.InternalSwap(&other->_impl_.participant_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_name_, lhs_arena,
      &other->_impl_.participant_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_metadata_, lhs_arena,
      &other->_impl_.participant_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvailabilityResponse, _impl_.supports_resume_)
      + sizeof(AvailabilityResponse::_impl_.supports_resume_)
      - PROTOBUF_FIELD_OFFSET(AvailabilityResponse, _impl_.available_)>(
          reinterpret_cast<char*>(&_impl_.available_),
          reinterpret_cast<char*>(&other->_impl_.available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvailabilityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[12]);
}

// ===================================================================

class UpdateJobStatus::_Internal {
 public:
};

UpdateJobStatus::UpdateJobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateJobStatus)
}
UpdateJobStatus::UpdateJobStatus(const UpdateJobStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateJobStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateJobStatus)
}

inline void UpdateJobStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateJobStatus::~UpdateJobStatus() {
  // @@protoc_insertion_point(destructor:livekit.UpdateJobStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateJobStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
  _impl_.error_.Destroy();
}

void UpdateJobStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateJobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateJobStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _impl_.error_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateJobStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateJobStatus.job_id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.JobStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::livekit::JobStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateJobStatus.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateJobStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateJobStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateJobStatus.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // .livekit.JobStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateJobStatus.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateJobStatus)
  return target;
}

size_t UpdateJobStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateJobStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .livekit.JobStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateJobStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateJobStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateJobStatus::GetClassData() const { return &_class_data_; }


void UpdateJobStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateJobStatus*>(&to_msg);
  auto& from = static_cast<const UpdateJobStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateJobStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateJobStatus::CopyFrom(const UpdateJobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateJobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateJobStatus::IsInitialized() const {
  return true;
}

void UpdateJobStatus::InternalSwap(UpdateJobStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateJobStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[13]);
}

// ===================================================================

class UpdateWorkerStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateWorkerStatus>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateWorkerStatus::UpdateWorkerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateWorkerStatus)
}
UpdateWorkerStatus::UpdateWorkerStatus(const UpdateWorkerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateWorkerStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.job_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.job_count_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.job_count_));
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateWorkerStatus)
}

inline void UpdateWorkerStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.load_){0}
    , decltype(_impl_.job_count_){0u}
  };
}

UpdateWorkerStatus::~UpdateWorkerStatus() {
  // @@protoc_insertion_point(destructor:livekit.UpdateWorkerStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateWorkerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateWorkerStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateWorkerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateWorkerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  ::memset(&_impl_.load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.job_count_) -
      reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.job_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkerStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .livekit.WorkerStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::livekit::WorkerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // float load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 job_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateWorkerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateWorkerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .livekit.WorkerStatus status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // float load = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_load = this->_internal_load();
  uint32_t raw_load;
  memcpy(&raw_load, &tmp_load, sizeof(tmp_load));
  if (raw_load != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_load(), target);
  }

  // uint32 job_count = 4;
  if (this->_internal_job_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_job_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateWorkerStatus)
  return target;
}

size_t UpdateWorkerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateWorkerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .livekit.WorkerStatus status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float load = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_load = this->_internal_load();
  uint32_t raw_load;
  memcpy(&raw_load, &tmp_load, sizeof(tmp_load));
  if (raw_load != 0) {
    total_size += 1 + 4;
  }

  // uint32 job_count = 4;
  if (this->_internal_job_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_job_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateWorkerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateWorkerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateWorkerStatus::GetClassData() const { return &_class_data_; }


void UpdateWorkerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateWorkerStatus*>(&to_msg);
  auto& from = static_cast<const UpdateWorkerStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateWorkerStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_set_status(from._internal_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_load = from._internal_load();
  uint32_t raw_load;
  memcpy(&raw_load, &tmp_load, sizeof(tmp_load));
  if (raw_load != 0) {
    _this->_internal_set_load(from._internal_load());
  }
  if (from._internal_job_count() != 0) {
    _this->_internal_set_job_count(from._internal_job_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateWorkerStatus::CopyFrom(const UpdateWorkerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateWorkerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkerStatus::IsInitialized() const {
  return true;
}

void UpdateWorkerStatus::InternalSwap(UpdateWorkerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateWorkerStatus, _impl_.job_count_)
      + sizeof(UpdateWorkerStatus::_impl_.job_count_)
      - PROTOBUF_FIELD_OFFSET(UpdateWorkerStatus, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[14]);
}

// ===================================================================

class JobAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<JobAssignment>()._impl_._has_bits_);
  static const ::livekit::Job& job(const JobAssignment* msg);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::livekit::Job&
JobAssignment::_Internal::job(const JobAssignment* msg) {
  return *msg->_impl_.job_;
}
JobAssignment::JobAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.JobAssignment)
}
JobAssignment::JobAssignment(const JobAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JobAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.job_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_job()) {
    _this->_impl_.job_ = new ::livekit::Job(*from._impl_.job_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.JobAssignment)
}

inline void JobAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.job_){nullptr}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JobAssignment::~JobAssignment() {
  // @@protoc_insertion_point(destructor:livekit.JobAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JobAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.job_;
}

void JobAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JobAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.JobAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.url_.ClearNonDefaultToEmpty();
  }
  _impl_.token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Job job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JobAssignment.url"));
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JobAssignment.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.JobAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Job job = 1;
  if (this->_internal_has_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::job(this),
        _Internal::job(this).GetCachedSize(), target, stream);
  }

  // optional string url = 2;
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JobAssignment.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JobAssignment.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.JobAssignment)
  return target;
}

size_t JobAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.JobAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .livekit.Job job = 1;
  if (this->_internal_has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JobAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobAssignment::GetClassData() const { return &_class_data_; }


void JobAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JobAssignment*>(&to_msg);
  auto& from = static_cast<const JobAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.JobAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_job()) {
    _this->_internal_mutable_job()->::livekit::Job::MergeFrom(
        from._internal_job());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobAssignment::CopyFrom(const JobAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.JobAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobAssignment::IsInitialized() const {
  return true;
}

void JobAssignment::InternalSwap(JobAssignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.job_, other->_impl_.job_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[15]);
}

// ===================================================================

class JobTermination::_Internal {
 public:
};

JobTermination::JobTermination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.JobTermination)
}
JobTermination::JobTermination(const JobTermination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JobTermination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.JobTermination)
}

inline void JobTermination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JobTermination::~JobTermination() {
  // @@protoc_insertion_point(destructor:livekit.JobTermination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JobTermination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
}

void JobTermination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JobTermination::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.JobTermination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobTermination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JobTermination.job_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobTermination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.JobTermination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JobTermination.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.JobTermination)
  return target;
}

size_t JobTermination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.JobTermination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobTermination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JobTermination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobTermination::GetClassData() const { return &_class_data_; }


void JobTermination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JobTermination*>(&to_msg);
  auto& from = static_cast<const JobTermination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.JobTermination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobTermination::CopyFrom(const JobTermination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.JobTermination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobTermination::IsInitialized() const {
  return true;
}

void JobTermination::InternalSwap(JobTermination* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JobTermination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fagent_2eproto_getter, &descriptor_table_livekit_5fagent_2eproto_once,
      file_level_metadata_livekit_5fagent_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::Job*
Arena::CreateMaybeMessage< ::livekit::Job >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Job >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::JobState*
Arena::CreateMaybeMessage< ::livekit::JobState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::JobState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::WorkerMessage*
Arena::CreateMaybeMessage< ::livekit::WorkerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::WorkerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ServerMessage*
Arena::CreateMaybeMessage< ::livekit::ServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SimulateJobRequest*
Arena::CreateMaybeMessage< ::livekit::SimulateJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SimulateJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::WorkerPing*
Arena::CreateMaybeMessage< ::livekit::WorkerPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::WorkerPing >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::WorkerPong*
Arena::CreateMaybeMessage< ::livekit::WorkerPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::WorkerPong >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RegisterWorkerRequest*
Arena::CreateMaybeMessage< ::livekit::RegisterWorkerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RegisterWorkerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RegisterWorkerResponse*
Arena::CreateMaybeMessage< ::livekit::RegisterWorkerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RegisterWorkerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::MigrateJobRequest*
Arena::CreateMaybeMessage< ::livekit::MigrateJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MigrateJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AvailabilityRequest*
Arena::CreateMaybeMessage< ::livekit::AvailabilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AvailabilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AvailabilityResponse_ParticipantAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AvailabilityResponse*
Arena::CreateMaybeMessage< ::livekit::AvailabilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AvailabilityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateJobStatus*
Arena::CreateMaybeMessage< ::livekit::UpdateJobStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateJobStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateWorkerStatus*
Arena::CreateMaybeMessage< ::livekit::UpdateWorkerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateWorkerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::JobAssignment*
Arena::CreateMaybeMessage< ::livekit::JobAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::JobAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::JobTermination*
Arena::CreateMaybeMessage< ::livekit::JobTermination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::JobTermination >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
