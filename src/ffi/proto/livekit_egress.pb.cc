// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_egress.proto

#include "livekit_egress.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR RoomCompositeEgressRequest::RoomCompositeEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_outputs_)*/{}
  , /*decltype(_impl_.stream_outputs_)*/{}
  , /*decltype(_impl_.segment_outputs_)*/{}
  , /*decltype(_impl_.image_outputs_)*/{}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layout_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_base_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_only_)*/false
  , /*decltype(_impl_.video_only_)*/false
  , /*decltype(_impl_.audio_mixing_)*/0
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RoomCompositeEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCompositeEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCompositeEgressRequestDefaultTypeInternal() {}
  union {
    RoomCompositeEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCompositeEgressRequestDefaultTypeInternal _RoomCompositeEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR WebEgressRequest::WebEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_outputs_)*/{}
  , /*decltype(_impl_.stream_outputs_)*/{}
  , /*decltype(_impl_.segment_outputs_)*/{}
  , /*decltype(_impl_.image_outputs_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_only_)*/false
  , /*decltype(_impl_.video_only_)*/false
  , /*decltype(_impl_.await_start_signal_)*/false
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WebEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebEgressRequestDefaultTypeInternal() {}
  union {
    WebEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebEgressRequestDefaultTypeInternal _WebEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR ParticipantEgressRequest::ParticipantEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_outputs_)*/{}
  , /*decltype(_impl_.stream_outputs_)*/{}
  , /*decltype(_impl_.segment_outputs_)*/{}
  , /*decltype(_impl_.image_outputs_)*/{}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.screen_share_)*/false
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ParticipantEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantEgressRequestDefaultTypeInternal() {}
  union {
    ParticipantEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantEgressRequestDefaultTypeInternal _ParticipantEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR TrackCompositeEgressRequest::TrackCompositeEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_outputs_)*/{}
  , /*decltype(_impl_.stream_outputs_)*/{}
  , /*decltype(_impl_.segment_outputs_)*/{}
  , /*decltype(_impl_.image_outputs_)*/{}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_track_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.video_track_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrackCompositeEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackCompositeEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackCompositeEgressRequestDefaultTypeInternal() {}
  union {
    TrackCompositeEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackCompositeEgressRequestDefaultTypeInternal _TrackCompositeEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR TrackEgressRequest::TrackEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrackEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEgressRequestDefaultTypeInternal() {}
  union {
    TrackEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEgressRequestDefaultTypeInternal _TrackEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR EncodedFileOutput::EncodedFileOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_type_)*/0
  , /*decltype(_impl_.disable_manifest_)*/false
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EncodedFileOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncodedFileOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncodedFileOutputDefaultTypeInternal() {}
  union {
    EncodedFileOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncodedFileOutputDefaultTypeInternal _EncodedFileOutput_default_instance_;
PROTOBUF_CONSTEXPR SegmentedFileOutput::SegmentedFileOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playlist_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.live_playlist_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.segment_duration_)*/0u
  , /*decltype(_impl_.disable_manifest_)*/false
  , /*decltype(_impl_.filename_suffix_)*/0
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SegmentedFileOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentedFileOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentedFileOutputDefaultTypeInternal() {}
  union {
    SegmentedFileOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentedFileOutputDefaultTypeInternal _SegmentedFileOutput_default_instance_;
PROTOBUF_CONSTEXPR DirectFileOutput::DirectFileOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disable_manifest_)*/false
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DirectFileOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectFileOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectFileOutputDefaultTypeInternal() {}
  union {
    DirectFileOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectFileOutputDefaultTypeInternal _DirectFileOutput_default_instance_;
PROTOBUF_CONSTEXPR ImageOutput::ImageOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capture_interval_)*/0u
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.filename_suffix_)*/0
  , /*decltype(_impl_.image_codec_)*/0
  , /*decltype(_impl_.disable_manifest_)*/false
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ImageOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageOutputDefaultTypeInternal() {}
  union {
    ImageOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageOutputDefaultTypeInternal _ImageOutput_default_instance_;
PROTOBUF_CONSTEXPR S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    S3Upload_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal _S3Upload_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR S3Upload::S3Upload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.access_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tagging_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_disposition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proxy_)*/nullptr
  , /*decltype(_impl_.force_path_style_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S3UploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3UploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3UploadDefaultTypeInternal() {}
  union {
    S3Upload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3UploadDefaultTypeInternal _S3Upload_default_instance_;
PROTOBUF_CONSTEXPR GCPUpload::GCPUpload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.credentials_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proxy_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPUploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPUploadDefaultTypeInternal() {}
  union {
    GCPUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPUploadDefaultTypeInternal _GCPUpload_default_instance_;
PROTOBUF_CONSTEXPR AzureBlobUpload::AzureBlobUpload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.container_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AzureBlobUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AzureBlobUploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AzureBlobUploadDefaultTypeInternal() {}
  union {
    AzureBlobUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AzureBlobUploadDefaultTypeInternal _AzureBlobUpload_default_instance_;
PROTOBUF_CONSTEXPR AliOSSUpload::AliOSSUpload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.access_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AliOSSUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AliOSSUploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AliOSSUploadDefaultTypeInternal() {}
  union {
    AliOSSUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AliOSSUploadDefaultTypeInternal _AliOSSUpload_default_instance_;
PROTOBUF_CONSTEXPR ProxyConfig::ProxyConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProxyConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyConfigDefaultTypeInternal() {}
  union {
    ProxyConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyConfigDefaultTypeInternal _ProxyConfig_default_instance_;
PROTOBUF_CONSTEXPR StreamOutput::StreamOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.urls_)*/{}
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOutputDefaultTypeInternal() {}
  union {
    StreamOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOutputDefaultTypeInternal _StreamOutput_default_instance_;
PROTOBUF_CONSTEXPR EncodingOptions::EncodingOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.framerate_)*/0
  , /*decltype(_impl_.audio_codec_)*/0
  , /*decltype(_impl_.audio_bitrate_)*/0
  , /*decltype(_impl_.audio_frequency_)*/0
  , /*decltype(_impl_.video_codec_)*/0
  , /*decltype(_impl_.key_frame_interval_)*/0
  , /*decltype(_impl_.video_bitrate_)*/0
  , /*decltype(_impl_.audio_quality_)*/0
  , /*decltype(_impl_.video_quality_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncodingOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncodingOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncodingOptionsDefaultTypeInternal() {}
  union {
    EncodingOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncodingOptionsDefaultTypeInternal _EncodingOptions_default_instance_;
PROTOBUF_CONSTEXPR UpdateLayoutRequest::UpdateLayoutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.egress_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layout_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateLayoutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateLayoutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateLayoutRequestDefaultTypeInternal() {}
  union {
    UpdateLayoutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateLayoutRequestDefaultTypeInternal _UpdateLayoutRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateStreamRequest::UpdateStreamRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.add_output_urls_)*/{}
  , /*decltype(_impl_.remove_output_urls_)*/{}
  , /*decltype(_impl_.egress_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateStreamRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateStreamRequestDefaultTypeInternal() {}
  union {
    UpdateStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateStreamRequestDefaultTypeInternal _UpdateStreamRequest_default_instance_;
PROTOBUF_CONSTEXPR ListEgressRequest::ListEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.egress_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.active_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEgressRequestDefaultTypeInternal() {}
  union {
    ListEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEgressRequestDefaultTypeInternal _ListEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR ListEgressResponse::ListEgressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListEgressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEgressResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEgressResponseDefaultTypeInternal() {}
  union {
    ListEgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEgressResponseDefaultTypeInternal _ListEgressResponse_default_instance_;
PROTOBUF_CONSTEXPR StopEgressRequest::StopEgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.egress_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopEgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopEgressRequestDefaultTypeInternal() {}
  union {
    StopEgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopEgressRequestDefaultTypeInternal _StopEgressRequest_default_instance_;
PROTOBUF_CONSTEXPR EgressInfo::EgressInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_results_)*/{}
  , /*decltype(_impl_.file_results_)*/{}
  , /*decltype(_impl_.segment_results_)*/{}
  , /*decltype(_impl_.image_results_)*/{}
  , /*decltype(_impl_.egress_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manifest_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.updated_at_)*/int64_t{0}
  , /*decltype(_impl_.backup_storage_used_)*/false
  , /*decltype(_impl_.source_type_)*/0
  , /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EgressInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgressInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgressInfoDefaultTypeInternal() {}
  union {
    EgressInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgressInfoDefaultTypeInternal _EgressInfo_default_instance_;
PROTOBUF_CONSTEXPR StreamInfoList::StreamInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInfoListDefaultTypeInternal() {}
  union {
    StreamInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInfoListDefaultTypeInternal _StreamInfoList_default_instance_;
PROTOBUF_CONSTEXPR StreamInfo::StreamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInfoDefaultTypeInternal() {}
  union {
    StreamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
PROTOBUF_CONSTEXPR FileInfo::FileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfoDefaultTypeInternal _FileInfo_default_instance_;
PROTOBUF_CONSTEXPR SegmentsInfo::SegmentsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playlist_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playlist_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.live_playlist_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.live_playlist_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.segment_count_)*/int64_t{0}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentsInfoDefaultTypeInternal() {}
  union {
    SegmentsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentsInfoDefaultTypeInternal _SegmentsInfo_default_instance_;
PROTOBUF_CONSTEXPR ImagesInfo::ImagesInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_count_)*/int64_t{0}
  , /*decltype(_impl_.started_at_)*/int64_t{0}
  , /*decltype(_impl_.ended_at_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesInfoDefaultTypeInternal() {}
  union {
    ImagesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesInfoDefaultTypeInternal _ImagesInfo_default_instance_;
PROTOBUF_CONSTEXPR AutoParticipantEgress::AutoParticipantEgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_outputs_)*/{}
  , /*decltype(_impl_.segment_outputs_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AutoParticipantEgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoParticipantEgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoParticipantEgressDefaultTypeInternal() {}
  union {
    AutoParticipantEgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoParticipantEgressDefaultTypeInternal _AutoParticipantEgress_default_instance_;
PROTOBUF_CONSTEXPR AutoTrackEgress::AutoTrackEgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disable_manifest_)*/false
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AutoTrackEgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoTrackEgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoTrackEgressDefaultTypeInternal() {}
  union {
    AutoTrackEgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoTrackEgressDefaultTypeInternal _AutoTrackEgress_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5fegress_2eproto[30];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_livekit_5fegress_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5fegress_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fegress_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.layout_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.audio_only_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.audio_mixing_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.video_only_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.custom_base_url_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.file_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.stream_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.segment_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.image_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.audio_only_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.video_only_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.await_start_signal_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.file_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.stream_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.segment_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.image_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.screen_share_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.file_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.stream_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.segment_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.image_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.audio_track_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.video_track_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.file_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.stream_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.segment_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.image_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_.track_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_.output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.file_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.disable_manifest_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.filename_prefix_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.playlist_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.live_playlist_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.segment_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.filename_suffix_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.disable_manifest_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_.disable_manifest_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_.output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.capture_interval_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.filename_prefix_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.filename_suffix_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.image_codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.disable_manifest_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.access_key_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.session_token_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.force_path_style_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.tagging_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.content_disposition_),
  PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.proxy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_.credentials_),
  PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_.proxy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_.account_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_.account_key_),
  PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_.container_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.access_key_),
  PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.bucket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _impl_.urls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.framerate_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_frequency_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.video_codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.video_bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.video_quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.key_frame_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _impl_.egress_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _impl_.layout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_.egress_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_.add_output_urls_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_.remove_output_urls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_.egress_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_.active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListEgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListEgressResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StopEgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StopEgressRequest, _impl_.egress_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.egress_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.source_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.ended_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.error_code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.stream_results_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.file_results_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.segment_results_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.image_results_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.manifest_location_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.backup_storage_used_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfoList, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.ended_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.ended_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.playlist_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.live_playlist_name_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.playlist_location_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.live_playlist_location_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.segment_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.ended_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.filename_prefix_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.image_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.ended_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_.file_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_.segment_outputs_),
  PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_.disable_manifest_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_.output_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::RoomCompositeEgressRequest)},
  { 23, -1, -1, sizeof(::livekit::WebEgressRequest)},
  { 44, -1, -1, sizeof(::livekit::ParticipantEgressRequest)},
  { 60, -1, -1, sizeof(::livekit::TrackCompositeEgressRequest)},
  { 80, -1, -1, sizeof(::livekit::TrackEgressRequest)},
  { 91, -1, -1, sizeof(::livekit::EncodedFileOutput)},
  { 105, -1, -1, sizeof(::livekit::SegmentedFileOutput)},
  { 123, -1, -1, sizeof(::livekit::DirectFileOutput)},
  { 136, -1, -1, sizeof(::livekit::ImageOutput)},
  { 154, 162, -1, sizeof(::livekit::S3Upload_MetadataEntry_DoNotUse)},
  { 164, -1, -1, sizeof(::livekit::S3Upload)},
  { 181, -1, -1, sizeof(::livekit::GCPUpload)},
  { 190, -1, -1, sizeof(::livekit::AzureBlobUpload)},
  { 199, -1, -1, sizeof(::livekit::AliOSSUpload)},
  { 210, -1, -1, sizeof(::livekit::ProxyConfig)},
  { 219, -1, -1, sizeof(::livekit::StreamOutput)},
  { 227, -1, -1, sizeof(::livekit::EncodingOptions)},
  { 245, -1, -1, sizeof(::livekit::UpdateLayoutRequest)},
  { 253, -1, -1, sizeof(::livekit::UpdateStreamRequest)},
  { 262, -1, -1, sizeof(::livekit::ListEgressRequest)},
  { 271, -1, -1, sizeof(::livekit::ListEgressResponse)},
  { 278, -1, -1, sizeof(::livekit::StopEgressRequest)},
  { 285, -1, -1, sizeof(::livekit::EgressInfo)},
  { 318, -1, -1, sizeof(::livekit::StreamInfoList)},
  { 325, -1, -1, sizeof(::livekit::StreamInfo)},
  { 337, -1, -1, sizeof(::livekit::FileInfo)},
  { 349, -1, -1, sizeof(::livekit::SegmentsInfo)},
  { 364, -1, -1, sizeof(::livekit::ImagesInfo)},
  { 374, -1, -1, sizeof(::livekit::AutoParticipantEgress)},
  { 385, -1, -1, sizeof(::livekit::AutoTrackEgress)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_RoomCompositeEgressRequest_default_instance_._instance,
  &::livekit::_WebEgressRequest_default_instance_._instance,
  &::livekit::_ParticipantEgressRequest_default_instance_._instance,
  &::livekit::_TrackCompositeEgressRequest_default_instance_._instance,
  &::livekit::_TrackEgressRequest_default_instance_._instance,
  &::livekit::_EncodedFileOutput_default_instance_._instance,
  &::livekit::_SegmentedFileOutput_default_instance_._instance,
  &::livekit::_DirectFileOutput_default_instance_._instance,
  &::livekit::_ImageOutput_default_instance_._instance,
  &::livekit::_S3Upload_MetadataEntry_DoNotUse_default_instance_._instance,
  &::livekit::_S3Upload_default_instance_._instance,
  &::livekit::_GCPUpload_default_instance_._instance,
  &::livekit::_AzureBlobUpload_default_instance_._instance,
  &::livekit::_AliOSSUpload_default_instance_._instance,
  &::livekit::_ProxyConfig_default_instance_._instance,
  &::livekit::_StreamOutput_default_instance_._instance,
  &::livekit::_EncodingOptions_default_instance_._instance,
  &::livekit::_UpdateLayoutRequest_default_instance_._instance,
  &::livekit::_UpdateStreamRequest_default_instance_._instance,
  &::livekit::_ListEgressRequest_default_instance_._instance,
  &::livekit::_ListEgressResponse_default_instance_._instance,
  &::livekit::_StopEgressRequest_default_instance_._instance,
  &::livekit::_EgressInfo_default_instance_._instance,
  &::livekit::_StreamInfoList_default_instance_._instance,
  &::livekit::_StreamInfo_default_instance_._instance,
  &::livekit::_FileInfo_default_instance_._instance,
  &::livekit::_SegmentsInfo_default_instance_._instance,
  &::livekit::_ImagesInfo_default_instance_._instance,
  &::livekit::_AutoParticipantEgress_default_instance_._instance,
  &::livekit::_AutoTrackEgress_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5fegress_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024livekit_egress.proto\022\007livekit\032\024livekit"
  "_models.proto\"\371\004\n\032RoomCompositeEgressReq"
  "uest\022\021\n\troom_name\030\001 \001(\t\022\016\n\006layout\030\002 \001(\t\022"
  "\022\n\naudio_only\030\003 \001(\010\022*\n\014audio_mixing\030\017 \001("
  "\0162\024.livekit.AudioMixing\022\022\n\nvideo_only\030\004 "
  "\001(\010\022\027\n\017custom_base_url\030\005 \001(\t\022.\n\004file\030\006 \001"
  "(\0132\032.livekit.EncodedFileOutputB\002\030\001H\000\022+\n\006"
  "stream\030\007 \001(\0132\025.livekit.StreamOutputB\002\030\001H"
  "\000\0224\n\010segments\030\n \001(\0132\034.livekit.SegmentedF"
  "ileOutputB\002\030\001H\000\0220\n\006preset\030\010 \001(\0162\036.liveki"
  "t.EncodingOptionsPresetH\001\022,\n\010advanced\030\t "
  "\001(\0132\030.livekit.EncodingOptionsH\001\0220\n\014file_"
  "outputs\030\013 \003(\0132\032.livekit.EncodedFileOutpu"
  "t\022-\n\016stream_outputs\030\014 \003(\0132\025.livekit.Stre"
  "amOutput\0225\n\017segment_outputs\030\r \003(\0132\034.live"
  "kit.SegmentedFileOutput\022+\n\rimage_outputs"
  "\030\016 \003(\0132\024.livekit.ImageOutputB\010\n\006outputB\t"
  "\n\007options\"\260\004\n\020WebEgressRequest\022\013\n\003url\030\001 "
  "\001(\t\022\022\n\naudio_only\030\002 \001(\010\022\022\n\nvideo_only\030\003 "
  "\001(\010\022\032\n\022await_start_signal\030\014 \001(\010\022.\n\004file\030"
  "\004 \001(\0132\032.livekit.EncodedFileOutputB\002\030\001H\000\022"
  "+\n\006stream\030\005 \001(\0132\025.livekit.StreamOutputB\002"
  "\030\001H\000\0224\n\010segments\030\006 \001(\0132\034.livekit.Segment"
  "edFileOutputB\002\030\001H\000\0220\n\006preset\030\007 \001(\0162\036.liv"
  "ekit.EncodingOptionsPresetH\001\022,\n\010advanced"
  "\030\010 \001(\0132\030.livekit.EncodingOptionsH\001\0220\n\014fi"
  "le_outputs\030\t \003(\0132\032.livekit.EncodedFileOu"
  "tput\022-\n\016stream_outputs\030\n \003(\0132\025.livekit.S"
  "treamOutput\0225\n\017segment_outputs\030\013 \003(\0132\034.l"
  "ivekit.SegmentedFileOutput\022+\n\rimage_outp"
  "uts\030\r \003(\0132\024.livekit.ImageOutputB\010\n\006outpu"
  "tB\t\n\007options\"\205\003\n\030ParticipantEgressReques"
  "t\022\021\n\troom_name\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022\024"
  "\n\014screen_share\030\003 \001(\010\0220\n\006preset\030\004 \001(\0162\036.l"
  "ivekit.EncodingOptionsPresetH\000\022,\n\010advanc"
  "ed\030\005 \001(\0132\030.livekit.EncodingOptionsH\000\0220\n\014"
  "file_outputs\030\006 \003(\0132\032.livekit.EncodedFile"
  "Output\022-\n\016stream_outputs\030\007 \003(\0132\025.livekit"
  ".StreamOutput\0225\n\017segment_outputs\030\010 \003(\0132\034"
  ".livekit.SegmentedFileOutput\022+\n\rimage_ou"
  "tputs\030\t \003(\0132\024.livekit.ImageOutputB\t\n\007opt"
  "ions\"\255\004\n\033TrackCompositeEgressRequest\022\021\n\t"
  "room_name\030\001 \001(\t\022\026\n\016audio_track_id\030\002 \001(\t\022"
  "\026\n\016video_track_id\030\003 \001(\t\022.\n\004file\030\004 \001(\0132\032."
  "livekit.EncodedFileOutputB\002\030\001H\000\022+\n\006strea"
  "m\030\005 \001(\0132\025.livekit.StreamOutputB\002\030\001H\000\0224\n\010"
  "segments\030\010 \001(\0132\034.livekit.SegmentedFileOu"
  "tputB\002\030\001H\000\0220\n\006preset\030\006 \001(\0162\036.livekit.Enc"
  "odingOptionsPresetH\001\022,\n\010advanced\030\007 \001(\0132\030"
  ".livekit.EncodingOptionsH\001\0220\n\014file_outpu"
  "ts\030\013 \003(\0132\032.livekit.EncodedFileOutput\022-\n\016"
  "stream_outputs\030\014 \003(\0132\025.livekit.StreamOut"
  "put\0225\n\017segment_outputs\030\r \003(\0132\034.livekit.S"
  "egmentedFileOutput\022+\n\rimage_outputs\030\016 \003("
  "\0132\024.livekit.ImageOutputB\010\n\006outputB\t\n\007opt"
  "ions\"\207\001\n\022TrackEgressRequest\022\021\n\troom_name"
  "\030\001 \001(\t\022\020\n\010track_id\030\002 \001(\t\022)\n\004file\030\003 \001(\0132\031"
  ".livekit.DirectFileOutputH\000\022\027\n\rwebsocket"
  "_url\030\004 \001(\tH\000B\010\n\006output\"\216\002\n\021EncodedFileOu"
  "tput\022+\n\tfile_type\030\001 \001(\0162\030.livekit.Encode"
  "dFileType\022\020\n\010filepath\030\002 \001(\t\022\030\n\020disable_m"
  "anifest\030\006 \001(\010\022\037\n\002s3\030\003 \001(\0132\021.livekit.S3Up"
  "loadH\000\022!\n\003gcp\030\004 \001(\0132\022.livekit.GCPUploadH"
  "\000\022)\n\005azure\030\005 \001(\0132\030.livekit.AzureBlobUplo"
  "adH\000\022\'\n\006aliOSS\030\007 \001(\0132\025.livekit.AliOSSUpl"
  "oadH\000B\010\n\006output\"\240\003\n\023SegmentedFileOutput\022"
  "0\n\010protocol\030\001 \001(\0162\036.livekit.SegmentedFil"
  "eProtocol\022\027\n\017filename_prefix\030\002 \001(\t\022\025\n\rpl"
  "aylist_name\030\003 \001(\t\022\032\n\022live_playlist_name\030"
  "\013 \001(\t\022\030\n\020segment_duration\030\004 \001(\r\0225\n\017filen"
  "ame_suffix\030\n \001(\0162\034.livekit.SegmentedFile"
  "Suffix\022\030\n\020disable_manifest\030\010 \001(\010\022\037\n\002s3\030\005"
  " \001(\0132\021.livekit.S3UploadH\000\022!\n\003gcp\030\006 \001(\0132\022"
  ".livekit.GCPUploadH\000\022)\n\005azure\030\007 \001(\0132\030.li"
  "vekit.AzureBlobUploadH\000\022\'\n\006aliOSS\030\t \001(\0132"
  "\025.livekit.AliOSSUploadH\000B\010\n\006output\"\340\001\n\020D"
  "irectFileOutput\022\020\n\010filepath\030\001 \001(\t\022\030\n\020dis"
  "able_manifest\030\005 \001(\010\022\037\n\002s3\030\002 \001(\0132\021.liveki"
  "t.S3UploadH\000\022!\n\003gcp\030\003 \001(\0132\022.livekit.GCPU"
  "ploadH\000\022)\n\005azure\030\004 \001(\0132\030.livekit.AzureBl"
  "obUploadH\000\022\'\n\006aliOSS\030\006 \001(\0132\025.livekit.Ali"
  "OSSUploadH\000B\010\n\006output\"\370\002\n\013ImageOutput\022\030\n"
  "\020capture_interval\030\001 \001(\r\022\r\n\005width\030\002 \001(\005\022\016"
  "\n\006height\030\003 \001(\005\022\027\n\017filename_prefix\030\004 \001(\t\022"
  "1\n\017filename_suffix\030\005 \001(\0162\030.livekit.Image"
  "FileSuffix\022(\n\013image_codec\030\006 \001(\0162\023.liveki"
  "t.ImageCodec\022\030\n\020disable_manifest\030\007 \001(\010\022\037"
  "\n\002s3\030\010 \001(\0132\021.livekit.S3UploadH\000\022!\n\003gcp\030\t"
  " \001(\0132\022.livekit.GCPUploadH\000\022)\n\005azure\030\n \001("
  "\0132\030.livekit.AzureBlobUploadH\000\022\'\n\006aliOSS\030"
  "\013 \001(\0132\025.livekit.AliOSSUploadH\000B\010\n\006output"
  "\"\310\002\n\010S3Upload\022\022\n\naccess_key\030\001 \001(\t\022\016\n\006sec"
  "ret\030\002 \001(\t\022\025\n\rsession_token\030\013 \001(\t\022\016\n\006regi"
  "on\030\003 \001(\t\022\020\n\010endpoint\030\004 \001(\t\022\016\n\006bucket\030\005 \001"
  "(\t\022\030\n\020force_path_style\030\006 \001(\010\0221\n\010metadata"
  "\030\007 \003(\0132\037.livekit.S3Upload.MetadataEntry\022"
  "\017\n\007tagging\030\010 \001(\t\022\033\n\023content_disposition\030"
  "\t \001(\t\022#\n\005proxy\030\n \001(\0132\024.livekit.ProxyConf"
  "ig\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\"U\n\tGCPUpload\022\023\n\013credentials\030"
  "\001 \001(\t\022\016\n\006bucket\030\002 \001(\t\022#\n\005proxy\030\003 \001(\0132\024.l"
  "ivekit.ProxyConfig\"T\n\017AzureBlobUpload\022\024\n"
  "\014account_name\030\001 \001(\t\022\023\n\013account_key\030\002 \001(\t"
  "\022\026\n\016container_name\030\003 \001(\t\"d\n\014AliOSSUpload"
  "\022\022\n\naccess_key\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\016\n\006"
  "region\030\003 \001(\t\022\020\n\010endpoint\030\004 \001(\t\022\016\n\006bucket"
  "\030\005 \001(\t\">\n\013ProxyConfig\022\013\n\003url\030\001 \001(\t\022\020\n\010us"
  "ername\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"G\n\014Stream"
  "Output\022)\n\010protocol\030\001 \001(\0162\027.livekit.Strea"
  "mProtocol\022\014\n\004urls\030\002 \003(\t\"\267\002\n\017EncodingOpti"
  "ons\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005de"
  "pth\030\003 \001(\005\022\021\n\tframerate\030\004 \001(\005\022(\n\013audio_co"
  "dec\030\005 \001(\0162\023.livekit.AudioCodec\022\025\n\raudio_"
  "bitrate\030\006 \001(\005\022\025\n\raudio_quality\030\013 \001(\005\022\027\n\017"
  "audio_frequency\030\007 \001(\005\022(\n\013video_codec\030\010 \001"
  "(\0162\023.livekit.VideoCodec\022\025\n\rvideo_bitrate"
  "\030\t \001(\005\022\025\n\rvideo_quality\030\014 \001(\005\022\032\n\022key_fra"
  "me_interval\030\n \001(\001\"8\n\023UpdateLayoutRequest"
  "\022\021\n\tegress_id\030\001 \001(\t\022\016\n\006layout\030\002 \001(\t\"]\n\023U"
  "pdateStreamRequest\022\021\n\tegress_id\030\001 \001(\t\022\027\n"
  "\017add_output_urls\030\002 \003(\t\022\032\n\022remove_output_"
  "urls\030\003 \003(\t\"I\n\021ListEgressRequest\022\021\n\troom_"
  "name\030\001 \001(\t\022\021\n\tegress_id\030\002 \001(\t\022\016\n\006active\030"
  "\003 \001(\010\"8\n\022ListEgressResponse\022\"\n\005items\030\001 \003"
  "(\0132\023.livekit.EgressInfo\"&\n\021StopEgressReq"
  "uest\022\021\n\tegress_id\030\001 \001(\t\"\236\007\n\nEgressInfo\022\021"
  "\n\tegress_id\030\001 \001(\t\022\017\n\007room_id\030\002 \001(\t\022\021\n\tro"
  "om_name\030\r \001(\t\022.\n\013source_type\030\032 \001(\0162\031.liv"
  "ekit.EgressSourceType\022%\n\006status\030\003 \001(\0162\025."
  "livekit.EgressStatus\022\022\n\nstarted_at\030\n \001(\003"
  "\022\020\n\010ended_at\030\013 \001(\003\022\022\n\nupdated_at\030\022 \001(\003\022\017"
  "\n\007details\030\025 \001(\t\022\r\n\005error\030\t \001(\t\022\022\n\nerror_"
  "code\030\026 \001(\005\022=\n\016room_composite\030\004 \001(\0132#.liv"
  "ekit.RoomCompositeEgressRequestH\000\022(\n\003web"
  "\030\016 \001(\0132\031.livekit.WebEgressRequestH\000\0228\n\013p"
  "articipant\030\023 \001(\0132!.livekit.ParticipantEg"
  "ressRequestH\000\022\?\n\017track_composite\030\005 \001(\0132$"
  ".livekit.TrackCompositeEgressRequestH\000\022,"
  "\n\005track\030\006 \001(\0132\033.livekit.TrackEgressReque"
  "stH\000\022-\n\006stream\030\007 \001(\0132\027.livekit.StreamInf"
  "oListB\002\030\001H\001\022%\n\004file\030\010 \001(\0132\021.livekit.File"
  "InfoB\002\030\001H\001\022-\n\010segments\030\014 \001(\0132\025.livekit.S"
  "egmentsInfoB\002\030\001H\001\022+\n\016stream_results\030\017 \003("
  "\0132\023.livekit.StreamInfo\022\'\n\014file_results\030\020"
  " \003(\0132\021.livekit.FileInfo\022.\n\017segment_resul"
  "ts\030\021 \003(\0132\025.livekit.SegmentsInfo\022*\n\rimage"
  "_results\030\024 \003(\0132\023.livekit.ImagesInfo\022\031\n\021m"
  "anifest_location\030\027 \001(\t\022\033\n\023backup_storage"
  "_used\030\031 \001(\010B\t\n\007requestB\010\n\006result\"7\n\016Stre"
  "amInfoList\022!\n\004info\030\001 \003(\0132\023.livekit.Strea"
  "mInfo:\002\030\001\"\274\001\n\nStreamInfo\022\013\n\003url\030\001 \001(\t\022\022\n"
  "\nstarted_at\030\002 \001(\003\022\020\n\010ended_at\030\003 \001(\003\022\020\n\010d"
  "uration\030\004 \001(\003\022*\n\006status\030\005 \001(\0162\032.livekit."
  "StreamInfo.Status\022\r\n\005error\030\006 \001(\t\".\n\006Stat"
  "us\022\n\n\006ACTIVE\020\000\022\014\n\010FINISHED\020\001\022\n\n\006FAILED\020\002"
  "\"t\n\010FileInfo\022\020\n\010filename\030\001 \001(\t\022\022\n\nstarte"
  "d_at\030\002 \001(\003\022\020\n\010ended_at\030\003 \001(\003\022\020\n\010duration"
  "\030\006 \001(\003\022\014\n\004size\030\004 \001(\003\022\020\n\010location\030\005 \001(\t\"\331"
  "\001\n\014SegmentsInfo\022\025\n\rplaylist_name\030\001 \001(\t\022\032"
  "\n\022live_playlist_name\030\010 \001(\t\022\020\n\010duration\030\002"
  " \001(\003\022\014\n\004size\030\003 \001(\003\022\031\n\021playlist_location\030"
  "\004 \001(\t\022\036\n\026live_playlist_location\030\t \001(\t\022\025\n"
  "\rsegment_count\030\005 \001(\003\022\022\n\nstarted_at\030\006 \001(\003"
  "\022\020\n\010ended_at\030\007 \001(\003\"`\n\nImagesInfo\022\027\n\017file"
  "name_prefix\030\004 \001(\t\022\023\n\013image_count\030\001 \001(\003\022\022"
  "\n\nstarted_at\030\002 \001(\003\022\020\n\010ended_at\030\003 \001(\003\"\353\001\n"
  "\025AutoParticipantEgress\0220\n\006preset\030\001 \001(\0162\036"
  ".livekit.EncodingOptionsPresetH\000\022,\n\010adva"
  "nced\030\002 \001(\0132\030.livekit.EncodingOptionsH\000\0220"
  "\n\014file_outputs\030\003 \003(\0132\032.livekit.EncodedFi"
  "leOutput\0225\n\017segment_outputs\030\004 \003(\0132\034.live"
  "kit.SegmentedFileOutputB\t\n\007options\"\337\001\n\017A"
  "utoTrackEgress\022\020\n\010filepath\030\001 \001(\t\022\030\n\020disa"
  "ble_manifest\030\005 \001(\010\022\037\n\002s3\030\002 \001(\0132\021.livekit"
  ".S3UploadH\000\022!\n\003gcp\030\003 \001(\0132\022.livekit.GCPUp"
  "loadH\000\022)\n\005azure\030\004 \001(\0132\030.livekit.AzureBlo"
  "bUploadH\000\022\'\n\006aliOSS\030\006 \001(\0132\025.livekit.AliO"
  "SSUploadH\000B\010\n\006output*9\n\017EncodedFileType\022"
  "\024\n\020DEFAULT_FILETYPE\020\000\022\007\n\003MP4\020\001\022\007\n\003OGG\020\002*"
  "N\n\025SegmentedFileProtocol\022#\n\037DEFAULT_SEGM"
  "ENTED_FILE_PROTOCOL\020\000\022\020\n\014HLS_PROTOCOL\020\001*"
  "/\n\023SegmentedFileSuffix\022\t\n\005INDEX\020\000\022\r\n\tTIM"
  "ESTAMP\020\001*E\n\017ImageFileSuffix\022\026\n\022IMAGE_SUF"
  "FIX_INDEX\020\000\022\032\n\026IMAGE_SUFFIX_TIMESTAMP\020\001*"
  "9\n\016StreamProtocol\022\024\n\020DEFAULT_PROTOCOL\020\000\022"
  "\010\n\004RTMP\020\001\022\007\n\003SRT\020\002*U\n\013AudioMixing\022\022\n\016DEF"
  "AULT_MIXING\020\000\022\026\n\022DUAL_CHANNEL_AGENT\020\001\022\032\n"
  "\026DUAL_CHANNEL_ALTERNATE\020\002*\317\001\n\025EncodingOp"
  "tionsPreset\022\020\n\014H264_720P_30\020\000\022\020\n\014H264_72"
  "0P_60\020\001\022\021\n\rH264_1080P_30\020\002\022\021\n\rH264_1080P"
  "_60\020\003\022\031\n\025PORTRAIT_H264_720P_30\020\004\022\031\n\025PORT"
  "RAIT_H264_720P_60\020\005\022\032\n\026PORTRAIT_H264_108"
  "0P_30\020\006\022\032\n\026PORTRAIT_H264_1080P_60\020\007*\237\001\n\014"
  "EgressStatus\022\023\n\017EGRESS_STARTING\020\000\022\021\n\rEGR"
  "ESS_ACTIVE\020\001\022\021\n\rEGRESS_ENDING\020\002\022\023\n\017EGRES"
  "S_COMPLETE\020\003\022\021\n\rEGRESS_FAILED\020\004\022\022\n\016EGRES"
  "S_ABORTED\020\005\022\030\n\024EGRESS_LIMIT_REACHED\020\006*J\n"
  "\020EgressSourceType\022\032\n\026EGRESS_SOURCE_TYPE_"
  "WEB\020\000\022\032\n\026EGRESS_SOURCE_TYPE_SDK\020\0012\234\005\n\006Eg"
  "ress\022T\n\030StartRoomCompositeEgress\022#.livek"
  "it.RoomCompositeEgressRequest\032\023.livekit."
  "EgressInfo\022@\n\016StartWebEgress\022\031.livekit.W"
  "ebEgressRequest\032\023.livekit.EgressInfo\022P\n\026"
  "StartParticipantEgress\022!.livekit.Partici"
  "pantEgressRequest\032\023.livekit.EgressInfo\022V"
  "\n\031StartTrackCompositeEgress\022$.livekit.Tr"
  "ackCompositeEgressRequest\032\023.livekit.Egre"
  "ssInfo\022D\n\020StartTrackEgress\022\033.livekit.Tra"
  "ckEgressRequest\032\023.livekit.EgressInfo\022A\n\014"
  "UpdateLayout\022\034.livekit.UpdateLayoutReque"
  "st\032\023.livekit.EgressInfo\022A\n\014UpdateStream\022"
  "\034.livekit.UpdateStreamRequest\032\023.livekit."
  "EgressInfo\022E\n\nListEgress\022\032.livekit.ListE"
  "gressRequest\032\033.livekit.ListEgressRespons"
  "e\022=\n\nStopEgress\022\032.livekit.StopEgressRequ"
  "est\032\023.livekit.EgressInfoBFZ#github.com/l"
  "ivekit/protocol/livekit\252\002\rLiveKit.Proto\352"
  "\002\016LiveKit::Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5fegress_2eproto_deps[1] = {
  &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5fegress_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5fegress_2eproto = {
    false, false, 8704, descriptor_table_protodef_livekit_5fegress_2eproto,
    "livekit_egress.proto",
    &descriptor_table_livekit_5fegress_2eproto_once, descriptor_table_livekit_5fegress_2eproto_deps, 1, 30,
    schemas, file_default_instances, TableStruct_livekit_5fegress_2eproto::offsets,
    file_level_metadata_livekit_5fegress_2eproto, file_level_enum_descriptors_livekit_5fegress_2eproto,
    file_level_service_descriptors_livekit_5fegress_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5fegress_2eproto_getter() {
  return &descriptor_table_livekit_5fegress_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5fegress_2eproto(&descriptor_table_livekit_5fegress_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[0];
}
bool StreamInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamInfo_Status StreamInfo::ACTIVE;
constexpr StreamInfo_Status StreamInfo::FINISHED;
constexpr StreamInfo_Status StreamInfo::FAILED;
constexpr StreamInfo_Status StreamInfo::Status_MIN;
constexpr StreamInfo_Status StreamInfo::Status_MAX;
constexpr int StreamInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodedFileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[1];
}
bool EncodedFileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentedFileProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[2];
}
bool SegmentedFileProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentedFileSuffix_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[3];
}
bool SegmentedFileSuffix_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFileSuffix_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[4];
}
bool ImageFileSuffix_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[5];
}
bool StreamProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioMixing_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[6];
}
bool AudioMixing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodingOptionsPreset_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[7];
}
bool EncodingOptionsPreset_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EgressStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[8];
}
bool EgressStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EgressSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[9];
}
bool EgressSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RoomCompositeEgressRequest::_Internal {
 public:
  static const ::livekit::EncodedFileOutput& file(const RoomCompositeEgressRequest* msg);
  static const ::livekit::StreamOutput& stream(const RoomCompositeEgressRequest* msg);
  static const ::livekit::SegmentedFileOutput& segments(const RoomCompositeEgressRequest* msg);
  static const ::livekit::EncodingOptions& advanced(const RoomCompositeEgressRequest* msg);
};

const ::livekit::EncodedFileOutput&
RoomCompositeEgressRequest::_Internal::file(const RoomCompositeEgressRequest* msg) {
  return *msg->_impl_.output_.file_;
}
const ::livekit::StreamOutput&
RoomCompositeEgressRequest::_Internal::stream(const RoomCompositeEgressRequest* msg) {
  return *msg->_impl_.output_.stream_;
}
const ::livekit::SegmentedFileOutput&
RoomCompositeEgressRequest::_Internal::segments(const RoomCompositeEgressRequest* msg) {
  return *msg->_impl_.output_.segments_;
}
const ::livekit::EncodingOptions&
RoomCompositeEgressRequest::_Internal::advanced(const RoomCompositeEgressRequest* msg) {
  return *msg->_impl_.options_.advanced_;
}
void RoomCompositeEgressRequest::set_allocated_file(::livekit::EncodedFileOutput* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.file)
}
void RoomCompositeEgressRequest::set_allocated_stream(::livekit::StreamOutput* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.output_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.stream)
}
void RoomCompositeEgressRequest::set_allocated_segments(::livekit::SegmentedFileOutput* segments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (segments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segments);
    if (message_arena != submessage_arena) {
      segments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.output_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.segments)
}
void RoomCompositeEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* advanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (advanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advanced);
    if (message_arena != submessage_arena) {
      advanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.advanced)
}
RoomCompositeEgressRequest::RoomCompositeEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomCompositeEgressRequest)
}
RoomCompositeEgressRequest::RoomCompositeEgressRequest(const RoomCompositeEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCompositeEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){from._impl_.file_outputs_}
    , decltype(_impl_.stream_outputs_){from._impl_.stream_outputs_}
    , decltype(_impl_.segment_outputs_){from._impl_.segment_outputs_}
    , decltype(_impl_.image_outputs_){from._impl_.image_outputs_}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.layout_){}
    , decltype(_impl_.custom_base_url_){}
    , decltype(_impl_.audio_only_){}
    , decltype(_impl_.video_only_){}
    , decltype(_impl_.audio_mixing_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.layout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_layout().empty()) {
    _this->_impl_.layout_.Set(from._internal_layout(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_base_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_base_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_custom_base_url().empty()) {
    _this->_impl_.custom_base_url_.Set(from._internal_custom_base_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.audio_only_, &from._impl_.audio_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.audio_mixing_) -
    reinterpret_cast<char*>(&_impl_.audio_only_)) + sizeof(_impl_.audio_mixing_));
  clear_has_output();
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::EncodedFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamOutput::MergeFrom(
          from._internal_stream());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentedFileOutput::MergeFrom(
          from._internal_segments());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  clear_has_options();
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RoomCompositeEgressRequest)
}

inline void RoomCompositeEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){arena}
    , decltype(_impl_.stream_outputs_){arena}
    , decltype(_impl_.segment_outputs_){arena}
    , decltype(_impl_.image_outputs_){arena}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.layout_){}
    , decltype(_impl_.custom_base_url_){}
    , decltype(_impl_.audio_only_){false}
    , decltype(_impl_.video_only_){false}
    , decltype(_impl_.audio_mixing_){0}
    , decltype(_impl_.output_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_base_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_base_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
  clear_has_options();
}

RoomCompositeEgressRequest::~RoomCompositeEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.RoomCompositeEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCompositeEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_outputs_.~RepeatedPtrField();
  _impl_.stream_outputs_.~RepeatedPtrField();
  _impl_.segment_outputs_.~RepeatedPtrField();
  _impl_.image_outputs_.~RepeatedPtrField();
  _impl_.room_name_.Destroy();
  _impl_.layout_.Destroy();
  _impl_.custom_base_url_.Destroy();
  if (has_output()) {
    clear_output();
  }
  if (has_options()) {
    clear_options();
  }
}

void RoomCompositeEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCompositeEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RoomCompositeEgressRequest)
  switch (output_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.file_;
      }
      break;
    }
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.stream_;
      }
      break;
    }
    case kSegments: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.segments_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}

void RoomCompositeEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RoomCompositeEgressRequest)
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.options_.advanced_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONS_NOT_SET;
}


void RoomCompositeEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomCompositeEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  _impl_.room_name_.ClearToEmpty();
  _impl_.layout_.ClearToEmpty();
  _impl_.custom_base_url_.ClearToEmpty();
  ::memset(&_impl_.audio_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.audio_mixing_) -
      reinterpret_cast<char*>(&_impl_.audio_only_)) + sizeof(_impl_.audio_mixing_));
  clear_output();
  clear_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCompositeEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RoomCompositeEgressRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_layout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RoomCompositeEgressRequest.layout"));
        } else
          goto handle_unusual;
        continue;
      // bool audio_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.audio_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool video_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.video_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string custom_base_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_custom_base_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RoomCompositeEgressRequest.custom_base_url"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodedFileOutput file = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamOutput stream = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptionsPreset preset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preset(static_cast<::livekit::EncodingOptionsPreset>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptions advanced = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SegmentedFileOutput segments = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_segments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.EncodedFileOutput file_outputs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.StreamOutput stream_outputs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ImageOutput image_outputs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.AudioMixing audio_mixing = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audio_mixing(static_cast<::livekit::AudioMixing>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCompositeEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomCompositeEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RoomCompositeEgressRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // string layout = 2;
  if (!this->_internal_layout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layout().data(), static_cast<int>(this->_internal_layout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RoomCompositeEgressRequest.layout");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_layout(), target);
  }

  // bool audio_only = 3;
  if (this->_internal_audio_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_audio_only(), target);
  }

  // bool video_only = 4;
  if (this->_internal_video_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_video_only(), target);
  }

  // string custom_base_url = 5;
  if (!this->_internal_custom_base_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_base_url().data(), static_cast<int>(this->_internal_custom_base_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RoomCompositeEgressRequest.custom_base_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_custom_base_url(), target);
  }

  // .livekit.EncodedFileOutput file = 6 [deprecated = true];
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .livekit.StreamOutput stream = 7 [deprecated = true];
  if (_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .livekit.EncodingOptionsPreset preset = 8;
  if (_internal_has_preset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_preset(), target);
  }

  // .livekit.EncodingOptions advanced = 9;
  if (_internal_has_advanced()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::advanced(this),
        _Internal::advanced(this).GetCachedSize(), target, stream);
  }

  // .livekit.SegmentedFileOutput segments = 10 [deprecated = true];
  if (_internal_has_segments()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::segments(this),
        _Internal::segments(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.ImageOutput image_outputs = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .livekit.AudioMixing audio_mixing = 15;
  if (this->_internal_audio_mixing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_audio_mixing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomCompositeEgressRequest)
  return target;
}

size_t RoomCompositeEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomCompositeEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.EncodedFileOutput file_outputs = 11;
  total_size += 1UL * this->_internal_file_outputs_size();
  for (const auto& msg : this->_impl_.file_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.StreamOutput stream_outputs = 12;
  total_size += 1UL * this->_internal_stream_outputs_size();
  for (const auto& msg : this->_impl_.stream_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
  total_size += 1UL * this->_internal_segment_outputs_size();
  for (const auto& msg : this->_impl_.segment_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ImageOutput image_outputs = 14;
  total_size += 1UL * this->_internal_image_outputs_size();
  for (const auto& msg : this->_impl_.image_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string layout = 2;
  if (!this->_internal_layout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layout());
  }

  // string custom_base_url = 5;
  if (!this->_internal_custom_base_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_base_url());
  }

  // bool audio_only = 3;
  if (this->_internal_audio_only() != 0) {
    total_size += 1 + 1;
  }

  // bool video_only = 4;
  if (this->_internal_video_only() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.AudioMixing audio_mixing = 15;
  if (this->_internal_audio_mixing() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_audio_mixing());
  }

  switch (output_case()) {
    // .livekit.EncodedFileOutput file = 6 [deprecated = true];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.file_);
      break;
    }
    // .livekit.StreamOutput stream = 7 [deprecated = true];
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.stream_);
      break;
    }
    // .livekit.SegmentedFileOutput segments = 10 [deprecated = true];
    case kSegments: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.segments_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (options_case()) {
    // .livekit.EncodingOptionsPreset preset = 8;
    case kPreset: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 9;
    case kAdvanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCompositeEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCompositeEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCompositeEgressRequest::GetClassData() const { return &_class_data_; }


void RoomCompositeEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCompositeEgressRequest*>(&to_msg);
  auto& from = static_cast<const RoomCompositeEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomCompositeEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_outputs_.MergeFrom(from._impl_.file_outputs_);
  _this->_impl_.stream_outputs_.MergeFrom(from._impl_.stream_outputs_);
  _this->_impl_.segment_outputs_.MergeFrom(from._impl_.segment_outputs_);
  _this->_impl_.image_outputs_.MergeFrom(from._impl_.image_outputs_);
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_layout().empty()) {
    _this->_internal_set_layout(from._internal_layout());
  }
  if (!from._internal_custom_base_url().empty()) {
    _this->_internal_set_custom_base_url(from._internal_custom_base_url());
  }
  if (from._internal_audio_only() != 0) {
    _this->_internal_set_audio_only(from._internal_audio_only());
  }
  if (from._internal_video_only() != 0) {
    _this->_internal_set_video_only(from._internal_video_only());
  }
  if (from._internal_audio_mixing() != 0) {
    _this->_internal_set_audio_mixing(from._internal_audio_mixing());
  }
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::EncodedFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamOutput::MergeFrom(
          from._internal_stream());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentedFileOutput::MergeFrom(
          from._internal_segments());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCompositeEgressRequest::CopyFrom(const RoomCompositeEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomCompositeEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCompositeEgressRequest::IsInitialized() const {
  return true;
}

void RoomCompositeEgressRequest::InternalSwap(RoomCompositeEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layout_, lhs_arena,
      &other->_impl_.layout_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_base_url_, lhs_arena,
      &other->_impl_.custom_base_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_mixing_)
      + sizeof(RoomCompositeEgressRequest::_impl_.audio_mixing_)
      - PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_only_)>(
          reinterpret_cast<char*>(&_impl_.audio_only_),
          reinterpret_cast<char*>(&other->_impl_.audio_only_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCompositeEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[0]);
}

// ===================================================================

class WebEgressRequest::_Internal {
 public:
  static const ::livekit::EncodedFileOutput& file(const WebEgressRequest* msg);
  static const ::livekit::StreamOutput& stream(const WebEgressRequest* msg);
  static const ::livekit::SegmentedFileOutput& segments(const WebEgressRequest* msg);
  static const ::livekit::EncodingOptions& advanced(const WebEgressRequest* msg);
};

const ::livekit::EncodedFileOutput&
WebEgressRequest::_Internal::file(const WebEgressRequest* msg) {
  return *msg->_impl_.output_.file_;
}
const ::livekit::StreamOutput&
WebEgressRequest::_Internal::stream(const WebEgressRequest* msg) {
  return *msg->_impl_.output_.stream_;
}
const ::livekit::SegmentedFileOutput&
WebEgressRequest::_Internal::segments(const WebEgressRequest* msg) {
  return *msg->_impl_.output_.segments_;
}
const ::livekit::EncodingOptions&
WebEgressRequest::_Internal::advanced(const WebEgressRequest* msg) {
  return *msg->_impl_.options_.advanced_;
}
void WebEgressRequest::set_allocated_file(::livekit::EncodedFileOutput* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.file)
}
void WebEgressRequest::set_allocated_stream(::livekit::StreamOutput* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.output_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.stream)
}
void WebEgressRequest::set_allocated_segments(::livekit::SegmentedFileOutput* segments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (segments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segments);
    if (message_arena != submessage_arena) {
      segments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.output_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.segments)
}
void WebEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* advanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (advanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advanced);
    if (message_arena != submessage_arena) {
      advanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.advanced)
}
WebEgressRequest::WebEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.WebEgressRequest)
}
WebEgressRequest::WebEgressRequest(const WebEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){from._impl_.file_outputs_}
    , decltype(_impl_.stream_outputs_){from._impl_.stream_outputs_}
    , decltype(_impl_.segment_outputs_){from._impl_.segment_outputs_}
    , decltype(_impl_.image_outputs_){from._impl_.image_outputs_}
    , decltype(_impl_.url_){}
    , decltype(_impl_.audio_only_){}
    , decltype(_impl_.video_only_){}
    , decltype(_impl_.await_start_signal_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.audio_only_, &from._impl_.audio_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.await_start_signal_) -
    reinterpret_cast<char*>(&_impl_.audio_only_)) + sizeof(_impl_.await_start_signal_));
  clear_has_output();
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::EncodedFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamOutput::MergeFrom(
          from._internal_stream());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentedFileOutput::MergeFrom(
          from._internal_segments());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  clear_has_options();
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.WebEgressRequest)
}

inline void WebEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){arena}
    , decltype(_impl_.stream_outputs_){arena}
    , decltype(_impl_.segment_outputs_){arena}
    , decltype(_impl_.image_outputs_){arena}
    , decltype(_impl_.url_){}
    , decltype(_impl_.audio_only_){false}
    , decltype(_impl_.video_only_){false}
    , decltype(_impl_.await_start_signal_){false}
    , decltype(_impl_.output_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
  clear_has_options();
}

WebEgressRequest::~WebEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.WebEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_outputs_.~RepeatedPtrField();
  _impl_.stream_outputs_.~RepeatedPtrField();
  _impl_.segment_outputs_.~RepeatedPtrField();
  _impl_.image_outputs_.~RepeatedPtrField();
  _impl_.url_.Destroy();
  if (has_output()) {
    clear_output();
  }
  if (has_options()) {
    clear_options();
  }
}

void WebEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.WebEgressRequest)
  switch (output_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.file_;
      }
      break;
    }
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.stream_;
      }
      break;
    }
    case kSegments: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.segments_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}

void WebEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.WebEgressRequest)
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.options_.advanced_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONS_NOT_SET;
}


void WebEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.WebEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  _impl_.url_.ClearToEmpty();
  ::memset(&_impl_.audio_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.await_start_signal_) -
      reinterpret_cast<char*>(&_impl_.audio_only_)) + sizeof(_impl_.await_start_signal_));
  clear_output();
  clear_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.WebEgressRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // bool audio_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.audio_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool video_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.video_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodedFileOutput file = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamOutput stream = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SegmentedFileOutput segments = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_segments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptionsPreset preset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preset(static_cast<::livekit::EncodingOptionsPreset>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptions advanced = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.EncodedFileOutput file_outputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.StreamOutput stream_outputs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool await_start_signal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.await_start_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ImageOutput image_outputs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.WebEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.WebEgressRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bool audio_only = 2;
  if (this->_internal_audio_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_audio_only(), target);
  }

  // bool video_only = 3;
  if (this->_internal_video_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_video_only(), target);
  }

  // .livekit.EncodedFileOutput file = 4 [deprecated = true];
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .livekit.StreamOutput stream = 5 [deprecated = true];
  if (_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .livekit.SegmentedFileOutput segments = 6 [deprecated = true];
  if (_internal_has_segments()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::segments(this),
        _Internal::segments(this).GetCachedSize(), target, stream);
  }

  // .livekit.EncodingOptionsPreset preset = 7;
  if (_internal_has_preset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_preset(), target);
  }

  // .livekit.EncodingOptions advanced = 8;
  if (_internal_has_advanced()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::advanced(this),
        _Internal::advanced(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool await_start_signal = 12;
  if (this->_internal_await_start_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_await_start_signal(), target);
  }

  // repeated .livekit.ImageOutput image_outputs = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.WebEgressRequest)
  return target;
}

size_t WebEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.WebEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.EncodedFileOutput file_outputs = 9;
  total_size += 1UL * this->_internal_file_outputs_size();
  for (const auto& msg : this->_impl_.file_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.StreamOutput stream_outputs = 10;
  total_size += 1UL * this->_internal_stream_outputs_size();
  for (const auto& msg : this->_impl_.stream_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
  total_size += 1UL * this->_internal_segment_outputs_size();
  for (const auto& msg : this->_impl_.segment_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ImageOutput image_outputs = 13;
  total_size += 1UL * this->_internal_image_outputs_size();
  for (const auto& msg : this->_impl_.image_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bool audio_only = 2;
  if (this->_internal_audio_only() != 0) {
    total_size += 1 + 1;
  }

  // bool video_only = 3;
  if (this->_internal_video_only() != 0) {
    total_size += 1 + 1;
  }

  // bool await_start_signal = 12;
  if (this->_internal_await_start_signal() != 0) {
    total_size += 1 + 1;
  }

  switch (output_case()) {
    // .livekit.EncodedFileOutput file = 4 [deprecated = true];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.file_);
      break;
    }
    // .livekit.StreamOutput stream = 5 [deprecated = true];
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.stream_);
      break;
    }
    // .livekit.SegmentedFileOutput segments = 6 [deprecated = true];
    case kSegments: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.segments_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (options_case()) {
    // .livekit.EncodingOptionsPreset preset = 7;
    case kPreset: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 8;
    case kAdvanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebEgressRequest::GetClassData() const { return &_class_data_; }


void WebEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebEgressRequest*>(&to_msg);
  auto& from = static_cast<const WebEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.WebEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_outputs_.MergeFrom(from._impl_.file_outputs_);
  _this->_impl_.stream_outputs_.MergeFrom(from._impl_.stream_outputs_);
  _this->_impl_.segment_outputs_.MergeFrom(from._impl_.segment_outputs_);
  _this->_impl_.image_outputs_.MergeFrom(from._impl_.image_outputs_);
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_audio_only() != 0) {
    _this->_internal_set_audio_only(from._internal_audio_only());
  }
  if (from._internal_video_only() != 0) {
    _this->_internal_set_video_only(from._internal_video_only());
  }
  if (from._internal_await_start_signal() != 0) {
    _this->_internal_set_await_start_signal(from._internal_await_start_signal());
  }
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::EncodedFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamOutput::MergeFrom(
          from._internal_stream());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentedFileOutput::MergeFrom(
          from._internal_segments());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebEgressRequest::CopyFrom(const WebEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.WebEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebEgressRequest::IsInitialized() const {
  return true;
}

void WebEgressRequest::InternalSwap(WebEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.await_start_signal_)
      + sizeof(WebEgressRequest::_impl_.await_start_signal_)
      - PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.audio_only_)>(
          reinterpret_cast<char*>(&_impl_.audio_only_),
          reinterpret_cast<char*>(&other->_impl_.audio_only_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[1]);
}

// ===================================================================

class ParticipantEgressRequest::_Internal {
 public:
  static const ::livekit::EncodingOptions& advanced(const ParticipantEgressRequest* msg);
};

const ::livekit::EncodingOptions&
ParticipantEgressRequest::_Internal::advanced(const ParticipantEgressRequest* msg) {
  return *msg->_impl_.options_.advanced_;
}
void ParticipantEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* advanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (advanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advanced);
    if (message_arena != submessage_arena) {
      advanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantEgressRequest.advanced)
}
ParticipantEgressRequest::ParticipantEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantEgressRequest)
}
ParticipantEgressRequest::ParticipantEgressRequest(const ParticipantEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){from._impl_.file_outputs_}
    , decltype(_impl_.stream_outputs_){from._impl_.stream_outputs_}
    , decltype(_impl_.segment_outputs_){from._impl_.segment_outputs_}
    , decltype(_impl_.image_outputs_){from._impl_.image_outputs_}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.screen_share_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.screen_share_ = from._impl_.screen_share_;
  clear_has_options();
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantEgressRequest)
}

inline void ParticipantEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){arena}
    , decltype(_impl_.stream_outputs_){arena}
    , decltype(_impl_.segment_outputs_){arena}
    , decltype(_impl_.image_outputs_){arena}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.screen_share_){false}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_options();
}

ParticipantEgressRequest::~ParticipantEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_outputs_.~RepeatedPtrField();
  _impl_.stream_outputs_.~RepeatedPtrField();
  _impl_.segment_outputs_.~RepeatedPtrField();
  _impl_.image_outputs_.~RepeatedPtrField();
  _impl_.room_name_.Destroy();
  _impl_.identity_.Destroy();
  if (has_options()) {
    clear_options();
  }
}

void ParticipantEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.ParticipantEgressRequest)
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.options_.advanced_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONS_NOT_SET;
}


void ParticipantEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  _impl_.room_name_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.screen_share_ = false;
  clear_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantEgressRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantEgressRequest.identity"));
        } else
          goto handle_unusual;
        continue;
      // bool screen_share = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.screen_share_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptionsPreset preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preset(static_cast<::livekit::EncodingOptionsPreset>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptions advanced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.EncodedFileOutput file_outputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.StreamOutput stream_outputs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ImageOutput image_outputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantEgressRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantEgressRequest.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // bool screen_share = 3;
  if (this->_internal_screen_share() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_screen_share(), target);
  }

  // .livekit.EncodingOptionsPreset preset = 4;
  if (_internal_has_preset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_preset(), target);
  }

  // .livekit.EncodingOptions advanced = 5;
  if (_internal_has_advanced()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::advanced(this),
        _Internal::advanced(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.ImageOutput image_outputs = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantEgressRequest)
  return target;
}

size_t ParticipantEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.EncodedFileOutput file_outputs = 6;
  total_size += 1UL * this->_internal_file_outputs_size();
  for (const auto& msg : this->_impl_.file_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.StreamOutput stream_outputs = 7;
  total_size += 1UL * this->_internal_stream_outputs_size();
  for (const auto& msg : this->_impl_.stream_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
  total_size += 1UL * this->_internal_segment_outputs_size();
  for (const auto& msg : this->_impl_.segment_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ImageOutput image_outputs = 9;
  total_size += 1UL * this->_internal_image_outputs_size();
  for (const auto& msg : this->_impl_.image_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // bool screen_share = 3;
  if (this->_internal_screen_share() != 0) {
    total_size += 1 + 1;
  }

  switch (options_case()) {
    // .livekit.EncodingOptionsPreset preset = 4;
    case kPreset: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 5;
    case kAdvanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantEgressRequest::GetClassData() const { return &_class_data_; }


void ParticipantEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantEgressRequest*>(&to_msg);
  auto& from = static_cast<const ParticipantEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_outputs_.MergeFrom(from._impl_.file_outputs_);
  _this->_impl_.stream_outputs_.MergeFrom(from._impl_.stream_outputs_);
  _this->_impl_.segment_outputs_.MergeFrom(from._impl_.segment_outputs_);
  _this->_impl_.image_outputs_.MergeFrom(from._impl_.image_outputs_);
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (from._internal_screen_share() != 0) {
    _this->_internal_set_screen_share(from._internal_screen_share());
  }
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantEgressRequest::CopyFrom(const ParticipantEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantEgressRequest::IsInitialized() const {
  return true;
}

void ParticipantEgressRequest::InternalSwap(ParticipantEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  swap(_impl_.screen_share_, other->_impl_.screen_share_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[2]);
}

// ===================================================================

class TrackCompositeEgressRequest::_Internal {
 public:
  static const ::livekit::EncodedFileOutput& file(const TrackCompositeEgressRequest* msg);
  static const ::livekit::StreamOutput& stream(const TrackCompositeEgressRequest* msg);
  static const ::livekit::SegmentedFileOutput& segments(const TrackCompositeEgressRequest* msg);
  static const ::livekit::EncodingOptions& advanced(const TrackCompositeEgressRequest* msg);
};

const ::livekit::EncodedFileOutput&
TrackCompositeEgressRequest::_Internal::file(const TrackCompositeEgressRequest* msg) {
  return *msg->_impl_.output_.file_;
}
const ::livekit::StreamOutput&
TrackCompositeEgressRequest::_Internal::stream(const TrackCompositeEgressRequest* msg) {
  return *msg->_impl_.output_.stream_;
}
const ::livekit::SegmentedFileOutput&
TrackCompositeEgressRequest::_Internal::segments(const TrackCompositeEgressRequest* msg) {
  return *msg->_impl_.output_.segments_;
}
const ::livekit::EncodingOptions&
TrackCompositeEgressRequest::_Internal::advanced(const TrackCompositeEgressRequest* msg) {
  return *msg->_impl_.options_.advanced_;
}
void TrackCompositeEgressRequest::set_allocated_file(::livekit::EncodedFileOutput* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.file)
}
void TrackCompositeEgressRequest::set_allocated_stream(::livekit::StreamOutput* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.output_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.stream)
}
void TrackCompositeEgressRequest::set_allocated_segments(::livekit::SegmentedFileOutput* segments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (segments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segments);
    if (message_arena != submessage_arena) {
      segments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.output_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.segments)
}
void TrackCompositeEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* advanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (advanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advanced);
    if (message_arena != submessage_arena) {
      advanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.advanced)
}
TrackCompositeEgressRequest::TrackCompositeEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackCompositeEgressRequest)
}
TrackCompositeEgressRequest::TrackCompositeEgressRequest(const TrackCompositeEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackCompositeEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){from._impl_.file_outputs_}
    , decltype(_impl_.stream_outputs_){from._impl_.stream_outputs_}
    , decltype(_impl_.segment_outputs_){from._impl_.segment_outputs_}
    , decltype(_impl_.image_outputs_){from._impl_.image_outputs_}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.audio_track_id_){}
    , decltype(_impl_.video_track_id_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.audio_track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_track_id().empty()) {
    _this->_impl_.audio_track_id_.Set(from._internal_audio_track_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.video_track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_track_id().empty()) {
    _this->_impl_.video_track_id_.Set(from._internal_video_track_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_output();
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::EncodedFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamOutput::MergeFrom(
          from._internal_stream());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentedFileOutput::MergeFrom(
          from._internal_segments());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  clear_has_options();
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackCompositeEgressRequest)
}

inline void TrackCompositeEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){arena}
    , decltype(_impl_.stream_outputs_){arena}
    , decltype(_impl_.segment_outputs_){arena}
    , decltype(_impl_.image_outputs_){arena}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.audio_track_id_){}
    , decltype(_impl_.video_track_id_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.video_track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
  clear_has_options();
}

TrackCompositeEgressRequest::~TrackCompositeEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrackCompositeEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackCompositeEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_outputs_.~RepeatedPtrField();
  _impl_.stream_outputs_.~RepeatedPtrField();
  _impl_.segment_outputs_.~RepeatedPtrField();
  _impl_.image_outputs_.~RepeatedPtrField();
  _impl_.room_name_.Destroy();
  _impl_.audio_track_id_.Destroy();
  _impl_.video_track_id_.Destroy();
  if (has_output()) {
    clear_output();
  }
  if (has_options()) {
    clear_options();
  }
}

void TrackCompositeEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackCompositeEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.TrackCompositeEgressRequest)
  switch (output_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.file_;
      }
      break;
    }
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.stream_;
      }
      break;
    }
    case kSegments: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.segments_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}

void TrackCompositeEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.TrackCompositeEgressRequest)
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.options_.advanced_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONS_NOT_SET;
}


void TrackCompositeEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackCompositeEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  _impl_.room_name_.ClearToEmpty();
  _impl_.audio_track_id_.ClearToEmpty();
  _impl_.video_track_id_.ClearToEmpty();
  clear_output();
  clear_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackCompositeEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackCompositeEgressRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string audio_track_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_audio_track_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackCompositeEgressRequest.audio_track_id"));
        } else
          goto handle_unusual;
        continue;
      // string video_track_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_video_track_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackCompositeEgressRequest.video_track_id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodedFileOutput file = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamOutput stream = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptionsPreset preset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preset(static_cast<::livekit::EncodingOptionsPreset>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptions advanced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SegmentedFileOutput segments = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_segments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.EncodedFileOutput file_outputs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.StreamOutput stream_outputs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ImageOutput image_outputs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackCompositeEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackCompositeEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackCompositeEgressRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // string audio_track_id = 2;
  if (!this->_internal_audio_track_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_track_id().data(), static_cast<int>(this->_internal_audio_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackCompositeEgressRequest.audio_track_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_audio_track_id(), target);
  }

  // string video_track_id = 3;
  if (!this->_internal_video_track_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_track_id().data(), static_cast<int>(this->_internal_video_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackCompositeEgressRequest.video_track_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_video_track_id(), target);
  }

  // .livekit.EncodedFileOutput file = 4 [deprecated = true];
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .livekit.StreamOutput stream = 5 [deprecated = true];
  if (_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .livekit.EncodingOptionsPreset preset = 6;
  if (_internal_has_preset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_preset(), target);
  }

  // .livekit.EncodingOptions advanced = 7;
  if (_internal_has_advanced()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::advanced(this),
        _Internal::advanced(this).GetCachedSize(), target, stream);
  }

  // .livekit.SegmentedFileOutput segments = 8 [deprecated = true];
  if (_internal_has_segments()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::segments(this),
        _Internal::segments(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.ImageOutput image_outputs = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackCompositeEgressRequest)
  return target;
}

size_t TrackCompositeEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackCompositeEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.EncodedFileOutput file_outputs = 11;
  total_size += 1UL * this->_internal_file_outputs_size();
  for (const auto& msg : this->_impl_.file_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.StreamOutput stream_outputs = 12;
  total_size += 1UL * this->_internal_stream_outputs_size();
  for (const auto& msg : this->_impl_.stream_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
  total_size += 1UL * this->_internal_segment_outputs_size();
  for (const auto& msg : this->_impl_.segment_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ImageOutput image_outputs = 14;
  total_size += 1UL * this->_internal_image_outputs_size();
  for (const auto& msg : this->_impl_.image_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string audio_track_id = 2;
  if (!this->_internal_audio_track_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_track_id());
  }

  // string video_track_id = 3;
  if (!this->_internal_video_track_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_track_id());
  }

  switch (output_case()) {
    // .livekit.EncodedFileOutput file = 4 [deprecated = true];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.file_);
      break;
    }
    // .livekit.StreamOutput stream = 5 [deprecated = true];
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.stream_);
      break;
    }
    // .livekit.SegmentedFileOutput segments = 8 [deprecated = true];
    case kSegments: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.segments_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (options_case()) {
    // .livekit.EncodingOptionsPreset preset = 6;
    case kPreset: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 7;
    case kAdvanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackCompositeEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackCompositeEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackCompositeEgressRequest::GetClassData() const { return &_class_data_; }


void TrackCompositeEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackCompositeEgressRequest*>(&to_msg);
  auto& from = static_cast<const TrackCompositeEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackCompositeEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_outputs_.MergeFrom(from._impl_.file_outputs_);
  _this->_impl_.stream_outputs_.MergeFrom(from._impl_.stream_outputs_);
  _this->_impl_.segment_outputs_.MergeFrom(from._impl_.segment_outputs_);
  _this->_impl_.image_outputs_.MergeFrom(from._impl_.image_outputs_);
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_audio_track_id().empty()) {
    _this->_internal_set_audio_track_id(from._internal_audio_track_id());
  }
  if (!from._internal_video_track_id().empty()) {
    _this->_internal_set_video_track_id(from._internal_video_track_id());
  }
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::EncodedFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamOutput::MergeFrom(
          from._internal_stream());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentedFileOutput::MergeFrom(
          from._internal_segments());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackCompositeEgressRequest::CopyFrom(const TrackCompositeEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackCompositeEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackCompositeEgressRequest::IsInitialized() const {
  return true;
}

void TrackCompositeEgressRequest::InternalSwap(TrackCompositeEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_track_id_, lhs_arena,
      &other->_impl_.audio_track_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_track_id_, lhs_arena,
      &other->_impl_.video_track_id_, rhs_arena
  );
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackCompositeEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[3]);
}

// ===================================================================

class TrackEgressRequest::_Internal {
 public:
  static const ::livekit::DirectFileOutput& file(const TrackEgressRequest* msg);
};

const ::livekit::DirectFileOutput&
TrackEgressRequest::_Internal::file(const TrackEgressRequest* msg) {
  return *msg->_impl_.output_.file_;
}
void TrackEgressRequest::set_allocated_file(::livekit::DirectFileOutput* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackEgressRequest.file)
}
TrackEgressRequest::TrackEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackEgressRequest)
}
TrackEgressRequest::TrackEgressRequest(const TrackEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_id().empty()) {
    _this->_impl_.track_id_.Set(from._internal_track_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_output();
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::DirectFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kWebsocketUrl: {
      _this->_internal_set_websocket_url(from._internal_websocket_url());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackEgressRequest)
}

inline void TrackEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
}

TrackEgressRequest::~TrackEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrackEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  _impl_.track_id_.Destroy();
  if (has_output()) {
    clear_output();
  }
}

void TrackEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.TrackEgressRequest)
  switch (output_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.file_;
      }
      break;
    }
    case kWebsocketUrl: {
      _impl_.output_.websocket_url_.Destroy();
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


void TrackEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.track_id_.ClearToEmpty();
  clear_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackEgressRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string track_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackEgressRequest.track_id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.DirectFileOutput file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string websocket_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_websocket_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackEgressRequest.websocket_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackEgressRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // string track_id = 2;
  if (!this->_internal_track_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackEgressRequest.track_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_id(), target);
  }

  // .livekit.DirectFileOutput file = 3;
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // string websocket_url = 4;
  if (_internal_has_websocket_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_websocket_url().data(), static_cast<int>(this->_internal_websocket_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackEgressRequest.websocket_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_websocket_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackEgressRequest)
  return target;
}

size_t TrackEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string track_id = 2;
  if (!this->_internal_track_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  switch (output_case()) {
    // .livekit.DirectFileOutput file = 3;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.file_);
      break;
    }
    // string websocket_url = 4;
    case kWebsocketUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_websocket_url());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackEgressRequest::GetClassData() const { return &_class_data_; }


void TrackEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackEgressRequest*>(&to_msg);
  auto& from = static_cast<const TrackEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_track_id().empty()) {
    _this->_internal_set_track_id(from._internal_track_id());
  }
  switch (from.output_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::livekit::DirectFileOutput::MergeFrom(
          from._internal_file());
      break;
    }
    case kWebsocketUrl: {
      _this->_internal_set_websocket_url(from._internal_websocket_url());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackEgressRequest::CopyFrom(const TrackEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEgressRequest::IsInitialized() const {
  return true;
}

void TrackEgressRequest::InternalSwap(TrackEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_id_, lhs_arena,
      &other->_impl_.track_id_, rhs_arena
  );
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[4]);
}

// ===================================================================

class EncodedFileOutput::_Internal {
 public:
  static const ::livekit::S3Upload& s3(const EncodedFileOutput* msg);
  static const ::livekit::GCPUpload& gcp(const EncodedFileOutput* msg);
  static const ::livekit::AzureBlobUpload& azure(const EncodedFileOutput* msg);
  static const ::livekit::AliOSSUpload& alioss(const EncodedFileOutput* msg);
};

const ::livekit::S3Upload&
EncodedFileOutput::_Internal::s3(const EncodedFileOutput* msg) {
  return *msg->_impl_.output_.s3_;
}
const ::livekit::GCPUpload&
EncodedFileOutput::_Internal::gcp(const EncodedFileOutput* msg) {
  return *msg->_impl_.output_.gcp_;
}
const ::livekit::AzureBlobUpload&
EncodedFileOutput::_Internal::azure(const EncodedFileOutput* msg) {
  return *msg->_impl_.output_.azure_;
}
const ::livekit::AliOSSUpload&
EncodedFileOutput::_Internal::alioss(const EncodedFileOutput* msg) {
  return *msg->_impl_.output_.alioss_;
}
void EncodedFileOutput::set_allocated_s3(::livekit::S3Upload* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.s3)
}
void EncodedFileOutput::set_allocated_gcp(::livekit::GCPUpload* gcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (gcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gcp);
    if (message_arena != submessage_arena) {
      gcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.gcp)
}
void EncodedFileOutput::set_allocated_azure(::livekit::AzureBlobUpload* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.azure)
}
void EncodedFileOutput::set_allocated_alioss(::livekit::AliOSSUpload* alioss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (alioss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alioss);
    if (message_arena != submessage_arena) {
      alioss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.aliOSS)
}
EncodedFileOutput::EncodedFileOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.EncodedFileOutput)
}
EncodedFileOutput::EncodedFileOutput(const EncodedFileOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncodedFileOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.file_type_){}
    , decltype(_impl_.disable_manifest_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_type_, &from._impl_.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disable_manifest_) -
    reinterpret_cast<char*>(&_impl_.file_type_)) + sizeof(_impl_.disable_manifest_));
  clear_has_output();
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.EncodedFileOutput)
}

inline void EncodedFileOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.file_type_){0}
    , decltype(_impl_.disable_manifest_){false}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
}

EncodedFileOutput::~EncodedFileOutput() {
  // @@protoc_insertion_point(destructor:livekit.EncodedFileOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncodedFileOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  if (has_output()) {
    clear_output();
  }
}

void EncodedFileOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncodedFileOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.EncodedFileOutput)
  switch (output_case()) {
    case kS3: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.s3_;
      }
      break;
    }
    case kGcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.gcp_;
      }
      break;
    }
    case kAzure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.azure_;
      }
      break;
    }
    case kAliOSS: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.alioss_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


void EncodedFileOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EncodedFileOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  ::memset(&_impl_.file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.disable_manifest_) -
      reinterpret_cast<char*>(&_impl_.file_type_)) + sizeof(_impl_.disable_manifest_));
  clear_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncodedFileOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.EncodedFileType file_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_type(static_cast<::livekit::EncodedFileType>(val));
        } else
          goto handle_unusual;
        continue;
      // string filepath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EncodedFileOutput.filepath"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.S3Upload s3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.GCPUpload gcp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AzureBlobUpload azure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_manifest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.disable_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AliOSSUpload aliOSS = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_alioss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncodedFileOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EncodedFileOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.EncodedFileType file_type = 1;
  if (this->_internal_file_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_file_type(), target);
  }

  // string filepath = 2;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EncodedFileOutput.filepath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filepath(), target);
  }

  // .livekit.S3Upload s3 = 3;
  if (_internal_has_s3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::s3(this),
        _Internal::s3(this).GetCachedSize(), target, stream);
  }

  // .livekit.GCPUpload gcp = 4;
  if (_internal_has_gcp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gcp(this),
        _Internal::gcp(this).GetCachedSize(), target, stream);
  }

  // .livekit.AzureBlobUpload azure = 5;
  if (_internal_has_azure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::azure(this),
        _Internal::azure(this).GetCachedSize(), target, stream);
  }

  // bool disable_manifest = 6;
  if (this->_internal_disable_manifest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_disable_manifest(), target);
  }

  // .livekit.AliOSSUpload aliOSS = 7;
  if (_internal_has_alioss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::alioss(this),
        _Internal::alioss(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EncodedFileOutput)
  return target;
}

size_t EncodedFileOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.EncodedFileOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 2;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // .livekit.EncodedFileType file_type = 1;
  if (this->_internal_file_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_file_type());
  }

  // bool disable_manifest = 6;
  if (this->_internal_disable_manifest() != 0) {
    total_size += 1 + 1;
  }

  switch (output_case()) {
    // .livekit.S3Upload s3 = 3;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 4;
    case kGcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 5;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 7;
    case kAliOSS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncodedFileOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncodedFileOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncodedFileOutput::GetClassData() const { return &_class_data_; }


void EncodedFileOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncodedFileOutput*>(&to_msg);
  auto& from = static_cast<const EncodedFileOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EncodedFileOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (from._internal_file_type() != 0) {
    _this->_internal_set_file_type(from._internal_file_type());
  }
  if (from._internal_disable_manifest() != 0) {
    _this->_internal_set_disable_manifest(from._internal_disable_manifest());
  }
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncodedFileOutput::CopyFrom(const EncodedFileOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EncodedFileOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodedFileOutput::IsInitialized() const {
  return true;
}

void EncodedFileOutput::InternalSwap(EncodedFileOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.disable_manifest_)
      + sizeof(EncodedFileOutput::_impl_.disable_manifest_)
      - PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.file_type_)>(
          reinterpret_cast<char*>(&_impl_.file_type_),
          reinterpret_cast<char*>(&other->_impl_.file_type_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncodedFileOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[5]);
}

// ===================================================================

class SegmentedFileOutput::_Internal {
 public:
  static const ::livekit::S3Upload& s3(const SegmentedFileOutput* msg);
  static const ::livekit::GCPUpload& gcp(const SegmentedFileOutput* msg);
  static const ::livekit::AzureBlobUpload& azure(const SegmentedFileOutput* msg);
  static const ::livekit::AliOSSUpload& alioss(const SegmentedFileOutput* msg);
};

const ::livekit::S3Upload&
SegmentedFileOutput::_Internal::s3(const SegmentedFileOutput* msg) {
  return *msg->_impl_.output_.s3_;
}
const ::livekit::GCPUpload&
SegmentedFileOutput::_Internal::gcp(const SegmentedFileOutput* msg) {
  return *msg->_impl_.output_.gcp_;
}
const ::livekit::AzureBlobUpload&
SegmentedFileOutput::_Internal::azure(const SegmentedFileOutput* msg) {
  return *msg->_impl_.output_.azure_;
}
const ::livekit::AliOSSUpload&
SegmentedFileOutput::_Internal::alioss(const SegmentedFileOutput* msg) {
  return *msg->_impl_.output_.alioss_;
}
void SegmentedFileOutput::set_allocated_s3(::livekit::S3Upload* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.s3)
}
void SegmentedFileOutput::set_allocated_gcp(::livekit::GCPUpload* gcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (gcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gcp);
    if (message_arena != submessage_arena) {
      gcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.gcp)
}
void SegmentedFileOutput::set_allocated_azure(::livekit::AzureBlobUpload* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.azure)
}
void SegmentedFileOutput::set_allocated_alioss(::livekit::AliOSSUpload* alioss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (alioss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alioss);
    if (message_arena != submessage_arena) {
      alioss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.aliOSS)
}
SegmentedFileOutput::SegmentedFileOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SegmentedFileOutput)
}
SegmentedFileOutput::SegmentedFileOutput(const SegmentedFileOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentedFileOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_prefix_){}
    , decltype(_impl_.playlist_name_){}
    , decltype(_impl_.live_playlist_name_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.segment_duration_){}
    , decltype(_impl_.disable_manifest_){}
    , decltype(_impl_.filename_suffix_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename_prefix().empty()) {
    _this->_impl_.filename_prefix_.Set(from._internal_filename_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playlist_name().empty()) {
    _this->_impl_.playlist_name_.Set(from._internal_playlist_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.live_playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.live_playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_live_playlist_name().empty()) {
    _this->_impl_.live_playlist_name_.Set(from._internal_live_playlist_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.protocol_, &from._impl_.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filename_suffix_) -
    reinterpret_cast<char*>(&_impl_.protocol_)) + sizeof(_impl_.filename_suffix_));
  clear_has_output();
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SegmentedFileOutput)
}

inline void SegmentedFileOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_prefix_){}
    , decltype(_impl_.playlist_name_){}
    , decltype(_impl_.live_playlist_name_){}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.segment_duration_){0u}
    , decltype(_impl_.disable_manifest_){false}
    , decltype(_impl_.filename_suffix_){0}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.filename_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.live_playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.live_playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
}

SegmentedFileOutput::~SegmentedFileOutput() {
  // @@protoc_insertion_point(destructor:livekit.SegmentedFileOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentedFileOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_prefix_.Destroy();
  _impl_.playlist_name_.Destroy();
  _impl_.live_playlist_name_.Destroy();
  if (has_output()) {
    clear_output();
  }
}

void SegmentedFileOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentedFileOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SegmentedFileOutput)
  switch (output_case()) {
    case kS3: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.s3_;
      }
      break;
    }
    case kGcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.gcp_;
      }
      break;
    }
    case kAzure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.azure_;
      }
      break;
    }
    case kAliOSS: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.alioss_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


void SegmentedFileOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SegmentedFileOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_prefix_.ClearToEmpty();
  _impl_.playlist_name_.ClearToEmpty();
  _impl_.live_playlist_name_.ClearToEmpty();
  ::memset(&_impl_.protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filename_suffix_) -
      reinterpret_cast<char*>(&_impl_.protocol_)) + sizeof(_impl_.filename_suffix_));
  clear_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentedFileOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SegmentedFileProtocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::livekit::SegmentedFileProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // string filename_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentedFileOutput.filename_prefix"));
        } else
          goto handle_unusual;
        continue;
      // string playlist_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_playlist_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentedFileOutput.playlist_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 segment_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.segment_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.S3Upload s3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.GCPUpload gcp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AzureBlobUpload azure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_manifest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.disable_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AliOSSUpload aliOSS = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_alioss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SegmentedFileSuffix filename_suffix = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filename_suffix(static_cast<::livekit::SegmentedFileSuffix>(val));
        } else
          goto handle_unusual;
        continue;
      // string live_playlist_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_live_playlist_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentedFileOutput.live_playlist_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentedFileOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SegmentedFileOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SegmentedFileProtocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // string filename_prefix = 2;
  if (!this->_internal_filename_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename_prefix().data(), static_cast<int>(this->_internal_filename_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentedFileOutput.filename_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename_prefix(), target);
  }

  // string playlist_name = 3;
  if (!this->_internal_playlist_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playlist_name().data(), static_cast<int>(this->_internal_playlist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentedFileOutput.playlist_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playlist_name(), target);
  }

  // uint32 segment_duration = 4;
  if (this->_internal_segment_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_segment_duration(), target);
  }

  // .livekit.S3Upload s3 = 5;
  if (_internal_has_s3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::s3(this),
        _Internal::s3(this).GetCachedSize(), target, stream);
  }

  // .livekit.GCPUpload gcp = 6;
  if (_internal_has_gcp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gcp(this),
        _Internal::gcp(this).GetCachedSize(), target, stream);
  }

  // .livekit.AzureBlobUpload azure = 7;
  if (_internal_has_azure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::azure(this),
        _Internal::azure(this).GetCachedSize(), target, stream);
  }

  // bool disable_manifest = 8;
  if (this->_internal_disable_manifest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_manifest(), target);
  }

  // .livekit.AliOSSUpload aliOSS = 9;
  if (_internal_has_alioss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::alioss(this),
        _Internal::alioss(this).GetCachedSize(), target, stream);
  }

  // .livekit.SegmentedFileSuffix filename_suffix = 10;
  if (this->_internal_filename_suffix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_filename_suffix(), target);
  }

  // string live_playlist_name = 11;
  if (!this->_internal_live_playlist_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_live_playlist_name().data(), static_cast<int>(this->_internal_live_playlist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentedFileOutput.live_playlist_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_live_playlist_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SegmentedFileOutput)
  return target;
}

size_t SegmentedFileOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SegmentedFileOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename_prefix = 2;
  if (!this->_internal_filename_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename_prefix());
  }

  // string playlist_name = 3;
  if (!this->_internal_playlist_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playlist_name());
  }

  // string live_playlist_name = 11;
  if (!this->_internal_live_playlist_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_live_playlist_name());
  }

  // .livekit.SegmentedFileProtocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // uint32 segment_duration = 4;
  if (this->_internal_segment_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_segment_duration());
  }

  // bool disable_manifest = 8;
  if (this->_internal_disable_manifest() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.SegmentedFileSuffix filename_suffix = 10;
  if (this->_internal_filename_suffix() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_filename_suffix());
  }

  switch (output_case()) {
    // .livekit.S3Upload s3 = 5;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 6;
    case kGcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 7;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 9;
    case kAliOSS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentedFileOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentedFileOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentedFileOutput::GetClassData() const { return &_class_data_; }


void SegmentedFileOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentedFileOutput*>(&to_msg);
  auto& from = static_cast<const SegmentedFileOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SegmentedFileOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename_prefix().empty()) {
    _this->_internal_set_filename_prefix(from._internal_filename_prefix());
  }
  if (!from._internal_playlist_name().empty()) {
    _this->_internal_set_playlist_name(from._internal_playlist_name());
  }
  if (!from._internal_live_playlist_name().empty()) {
    _this->_internal_set_live_playlist_name(from._internal_live_playlist_name());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_segment_duration() != 0) {
    _this->_internal_set_segment_duration(from._internal_segment_duration());
  }
  if (from._internal_disable_manifest() != 0) {
    _this->_internal_set_disable_manifest(from._internal_disable_manifest());
  }
  if (from._internal_filename_suffix() != 0) {
    _this->_internal_set_filename_suffix(from._internal_filename_suffix());
  }
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentedFileOutput::CopyFrom(const SegmentedFileOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SegmentedFileOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentedFileOutput::IsInitialized() const {
  return true;
}

void SegmentedFileOutput::InternalSwap(SegmentedFileOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_prefix_, lhs_arena,
      &other->_impl_.filename_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playlist_name_, lhs_arena,
      &other->_impl_.playlist_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.live_playlist_name_, lhs_arena,
      &other->_impl_.live_playlist_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.filename_suffix_)
      + sizeof(SegmentedFileOutput::_impl_.filename_suffix_)
      - PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.protocol_)>(
          reinterpret_cast<char*>(&_impl_.protocol_),
          reinterpret_cast<char*>(&other->_impl_.protocol_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentedFileOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[6]);
}

// ===================================================================

class DirectFileOutput::_Internal {
 public:
  static const ::livekit::S3Upload& s3(const DirectFileOutput* msg);
  static const ::livekit::GCPUpload& gcp(const DirectFileOutput* msg);
  static const ::livekit::AzureBlobUpload& azure(const DirectFileOutput* msg);
  static const ::livekit::AliOSSUpload& alioss(const DirectFileOutput* msg);
};

const ::livekit::S3Upload&
DirectFileOutput::_Internal::s3(const DirectFileOutput* msg) {
  return *msg->_impl_.output_.s3_;
}
const ::livekit::GCPUpload&
DirectFileOutput::_Internal::gcp(const DirectFileOutput* msg) {
  return *msg->_impl_.output_.gcp_;
}
const ::livekit::AzureBlobUpload&
DirectFileOutput::_Internal::azure(const DirectFileOutput* msg) {
  return *msg->_impl_.output_.azure_;
}
const ::livekit::AliOSSUpload&
DirectFileOutput::_Internal::alioss(const DirectFileOutput* msg) {
  return *msg->_impl_.output_.alioss_;
}
void DirectFileOutput::set_allocated_s3(::livekit::S3Upload* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.s3)
}
void DirectFileOutput::set_allocated_gcp(::livekit::GCPUpload* gcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (gcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gcp);
    if (message_arena != submessage_arena) {
      gcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.gcp)
}
void DirectFileOutput::set_allocated_azure(::livekit::AzureBlobUpload* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.azure)
}
void DirectFileOutput::set_allocated_alioss(::livekit::AliOSSUpload* alioss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (alioss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alioss);
    if (message_arena != submessage_arena) {
      alioss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.aliOSS)
}
DirectFileOutput::DirectFileOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DirectFileOutput)
}
DirectFileOutput::DirectFileOutput(const DirectFileOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectFileOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.disable_manifest_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
  clear_has_output();
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DirectFileOutput)
}

inline void DirectFileOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.disable_manifest_){false}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
}

DirectFileOutput::~DirectFileOutput() {
  // @@protoc_insertion_point(destructor:livekit.DirectFileOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectFileOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  if (has_output()) {
    clear_output();
  }
}

void DirectFileOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectFileOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DirectFileOutput)
  switch (output_case()) {
    case kS3: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.s3_;
      }
      break;
    }
    case kGcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.gcp_;
      }
      break;
    }
    case kAzure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.azure_;
      }
      break;
    }
    case kAliOSS: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.alioss_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


void DirectFileOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DirectFileOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _impl_.disable_manifest_ = false;
  clear_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectFileOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filepath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DirectFileOutput.filepath"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.S3Upload s3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.GCPUpload gcp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AzureBlobUpload azure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_manifest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.disable_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AliOSSUpload aliOSS = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_alioss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectFileOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DirectFileOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DirectFileOutput.filepath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // .livekit.S3Upload s3 = 2;
  if (_internal_has_s3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::s3(this),
        _Internal::s3(this).GetCachedSize(), target, stream);
  }

  // .livekit.GCPUpload gcp = 3;
  if (_internal_has_gcp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gcp(this),
        _Internal::gcp(this).GetCachedSize(), target, stream);
  }

  // .livekit.AzureBlobUpload azure = 4;
  if (_internal_has_azure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::azure(this),
        _Internal::azure(this).GetCachedSize(), target, stream);
  }

  // bool disable_manifest = 5;
  if (this->_internal_disable_manifest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_disable_manifest(), target);
  }

  // .livekit.AliOSSUpload aliOSS = 6;
  if (_internal_has_alioss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::alioss(this),
        _Internal::alioss(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DirectFileOutput)
  return target;
}

size_t DirectFileOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DirectFileOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // bool disable_manifest = 5;
  if (this->_internal_disable_manifest() != 0) {
    total_size += 1 + 1;
  }

  switch (output_case()) {
    // .livekit.S3Upload s3 = 2;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 3;
    case kGcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 4;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 6;
    case kAliOSS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectFileOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectFileOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectFileOutput::GetClassData() const { return &_class_data_; }


void DirectFileOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectFileOutput*>(&to_msg);
  auto& from = static_cast<const DirectFileOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DirectFileOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (from._internal_disable_manifest() != 0) {
    _this->_internal_set_disable_manifest(from._internal_disable_manifest());
  }
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectFileOutput::CopyFrom(const DirectFileOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DirectFileOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectFileOutput::IsInitialized() const {
  return true;
}

void DirectFileOutput::InternalSwap(DirectFileOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  swap(_impl_.disable_manifest_, other->_impl_.disable_manifest_);
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectFileOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[7]);
}

// ===================================================================

class ImageOutput::_Internal {
 public:
  static const ::livekit::S3Upload& s3(const ImageOutput* msg);
  static const ::livekit::GCPUpload& gcp(const ImageOutput* msg);
  static const ::livekit::AzureBlobUpload& azure(const ImageOutput* msg);
  static const ::livekit::AliOSSUpload& alioss(const ImageOutput* msg);
};

const ::livekit::S3Upload&
ImageOutput::_Internal::s3(const ImageOutput* msg) {
  return *msg->_impl_.output_.s3_;
}
const ::livekit::GCPUpload&
ImageOutput::_Internal::gcp(const ImageOutput* msg) {
  return *msg->_impl_.output_.gcp_;
}
const ::livekit::AzureBlobUpload&
ImageOutput::_Internal::azure(const ImageOutput* msg) {
  return *msg->_impl_.output_.azure_;
}
const ::livekit::AliOSSUpload&
ImageOutput::_Internal::alioss(const ImageOutput* msg) {
  return *msg->_impl_.output_.alioss_;
}
void ImageOutput::set_allocated_s3(::livekit::S3Upload* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.s3)
}
void ImageOutput::set_allocated_gcp(::livekit::GCPUpload* gcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (gcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gcp);
    if (message_arena != submessage_arena) {
      gcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.gcp)
}
void ImageOutput::set_allocated_azure(::livekit::AzureBlobUpload* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.azure)
}
void ImageOutput::set_allocated_alioss(::livekit::AliOSSUpload* alioss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (alioss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alioss);
    if (message_arena != submessage_arena) {
      alioss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.aliOSS)
}
ImageOutput::ImageOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ImageOutput)
}
ImageOutput::ImageOutput(const ImageOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_prefix_){}
    , decltype(_impl_.capture_interval_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.filename_suffix_){}
    , decltype(_impl_.image_codec_){}
    , decltype(_impl_.disable_manifest_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename_prefix().empty()) {
    _this->_impl_.filename_prefix_.Set(from._internal_filename_prefix(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.capture_interval_, &from._impl_.capture_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disable_manifest_) -
    reinterpret_cast<char*>(&_impl_.capture_interval_)) + sizeof(_impl_.disable_manifest_));
  clear_has_output();
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ImageOutput)
}

inline void ImageOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_prefix_){}
    , decltype(_impl_.capture_interval_){0u}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.filename_suffix_){0}
    , decltype(_impl_.image_codec_){0}
    , decltype(_impl_.disable_manifest_){false}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.filename_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
}

ImageOutput::~ImageOutput() {
  // @@protoc_insertion_point(destructor:livekit.ImageOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_prefix_.Destroy();
  if (has_output()) {
    clear_output();
  }
}

void ImageOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.ImageOutput)
  switch (output_case()) {
    case kS3: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.s3_;
      }
      break;
    }
    case kGcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.gcp_;
      }
      break;
    }
    case kAzure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.azure_;
      }
      break;
    }
    case kAliOSS: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.alioss_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


void ImageOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ImageOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_prefix_.ClearToEmpty();
  ::memset(&_impl_.capture_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.disable_manifest_) -
      reinterpret_cast<char*>(&_impl_.capture_interval_)) + sizeof(_impl_.disable_manifest_));
  clear_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 capture_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.capture_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filename_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ImageOutput.filename_prefix"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ImageFileSuffix filename_suffix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filename_suffix(static_cast<::livekit::ImageFileSuffix>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ImageCodec image_codec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_image_codec(static_cast<::livekit::ImageCodec>(val));
        } else
          goto handle_unusual;
        continue;
      // bool disable_manifest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.disable_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.S3Upload s3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.GCPUpload gcp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AzureBlobUpload azure = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AliOSSUpload aliOSS = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_alioss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ImageOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capture_interval = 1;
  if (this->_internal_capture_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capture_interval(), target);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // string filename_prefix = 4;
  if (!this->_internal_filename_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename_prefix().data(), static_cast<int>(this->_internal_filename_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ImageOutput.filename_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename_prefix(), target);
  }

  // .livekit.ImageFileSuffix filename_suffix = 5;
  if (this->_internal_filename_suffix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_filename_suffix(), target);
  }

  // .livekit.ImageCodec image_codec = 6;
  if (this->_internal_image_codec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_image_codec(), target);
  }

  // bool disable_manifest = 7;
  if (this->_internal_disable_manifest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_manifest(), target);
  }

  // .livekit.S3Upload s3 = 8;
  if (_internal_has_s3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::s3(this),
        _Internal::s3(this).GetCachedSize(), target, stream);
  }

  // .livekit.GCPUpload gcp = 9;
  if (_internal_has_gcp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::gcp(this),
        _Internal::gcp(this).GetCachedSize(), target, stream);
  }

  // .livekit.AzureBlobUpload azure = 10;
  if (_internal_has_azure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::azure(this),
        _Internal::azure(this).GetCachedSize(), target, stream);
  }

  // .livekit.AliOSSUpload aliOSS = 11;
  if (_internal_has_alioss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::alioss(this),
        _Internal::alioss(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ImageOutput)
  return target;
}

size_t ImageOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ImageOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename_prefix = 4;
  if (!this->_internal_filename_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename_prefix());
  }

  // uint32 capture_interval = 1;
  if (this->_internal_capture_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capture_interval());
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // .livekit.ImageFileSuffix filename_suffix = 5;
  if (this->_internal_filename_suffix() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_filename_suffix());
  }

  // .livekit.ImageCodec image_codec = 6;
  if (this->_internal_image_codec() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_image_codec());
  }

  // bool disable_manifest = 7;
  if (this->_internal_disable_manifest() != 0) {
    total_size += 1 + 1;
  }

  switch (output_case()) {
    // .livekit.S3Upload s3 = 8;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 9;
    case kGcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 10;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 11;
    case kAliOSS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageOutput::GetClassData() const { return &_class_data_; }


void ImageOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageOutput*>(&to_msg);
  auto& from = static_cast<const ImageOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ImageOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename_prefix().empty()) {
    _this->_internal_set_filename_prefix(from._internal_filename_prefix());
  }
  if (from._internal_capture_interval() != 0) {
    _this->_internal_set_capture_interval(from._internal_capture_interval());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_filename_suffix() != 0) {
    _this->_internal_set_filename_suffix(from._internal_filename_suffix());
  }
  if (from._internal_image_codec() != 0) {
    _this->_internal_set_image_codec(from._internal_image_codec());
  }
  if (from._internal_disable_manifest() != 0) {
    _this->_internal_set_disable_manifest(from._internal_disable_manifest());
  }
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageOutput::CopyFrom(const ImageOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ImageOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageOutput::IsInitialized() const {
  return true;
}

void ImageOutput::InternalSwap(ImageOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_prefix_, lhs_arena,
      &other->_impl_.filename_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.disable_manifest_)
      + sizeof(ImageOutput::_impl_.disable_manifest_)
      - PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.capture_interval_)>(
          reinterpret_cast<char*>(&_impl_.capture_interval_),
          reinterpret_cast<char*>(&other->_impl_.capture_interval_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[8]);
}

// ===================================================================

S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse() {}
S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void S3Upload_MetadataEntry_DoNotUse::MergeFrom(const S3Upload_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata S3Upload_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[9]);
}

// ===================================================================

class S3Upload::_Internal {
 public:
  static const ::livekit::ProxyConfig& proxy(const S3Upload* msg);
};

const ::livekit::ProxyConfig&
S3Upload::_Internal::proxy(const S3Upload* msg) {
  return *msg->_impl_.proxy_;
}
S3Upload::S3Upload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &S3Upload::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.S3Upload)
}
S3Upload::S3Upload(const S3Upload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S3Upload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.access_key_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.tagging_){}
    , decltype(_impl_.content_disposition_){}
    , decltype(_impl_.session_token_){}
    , decltype(_impl_.proxy_){nullptr}
    , decltype(_impl_.force_path_style_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_key().empty()) {
    _this->_impl_.access_key_.Set(from._internal_access_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint().empty()) {
    _this->_impl_.endpoint_.Set(from._internal_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tagging_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagging_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagging().empty()) {
    _this->_impl_.tagging_.Set(from._internal_tagging(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_disposition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_disposition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_disposition().empty()) {
    _this->_impl_.content_disposition_.Set(from._internal_content_disposition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_token().empty()) {
    _this->_impl_.session_token_.Set(from._internal_session_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_proxy()) {
    _this->_impl_.proxy_ = new ::livekit::ProxyConfig(*from._impl_.proxy_);
  }
  _this->_impl_.force_path_style_ = from._impl_.force_path_style_;
  // @@protoc_insertion_point(copy_constructor:livekit.S3Upload)
}

inline void S3Upload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.access_key_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.tagging_){}
    , decltype(_impl_.content_disposition_){}
    , decltype(_impl_.session_token_){}
    , decltype(_impl_.proxy_){nullptr}
    , decltype(_impl_.force_path_style_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tagging_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagging_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_disposition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_disposition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S3Upload::~S3Upload() {
  // @@protoc_insertion_point(destructor:livekit.S3Upload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void S3Upload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.access_key_.Destroy();
  _impl_.secret_.Destroy();
  _impl_.region_.Destroy();
  _impl_.endpoint_.Destroy();
  _impl_.bucket_.Destroy();
  _impl_.tagging_.Destroy();
  _impl_.content_disposition_.Destroy();
  _impl_.session_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proxy_;
}

void S3Upload::ArenaDtor(void* object) {
  S3Upload* _this = reinterpret_cast< S3Upload* >(object);
  _this->_impl_.metadata_.Destruct();
}
void S3Upload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S3Upload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.S3Upload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.access_key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.endpoint_.ClearToEmpty();
  _impl_.bucket_.ClearToEmpty();
  _impl_.tagging_.ClearToEmpty();
  _impl_.content_disposition_.ClearToEmpty();
  _impl_.session_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.proxy_ != nullptr) {
    delete _impl_.proxy_;
  }
  _impl_.proxy_ = nullptr;
  _impl_.force_path_style_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S3Upload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string access_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_access_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.access_key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.secret"));
        } else
          goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.region"));
        } else
          goto handle_unusual;
        continue;
      // string endpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.endpoint"));
        } else
          goto handle_unusual;
        continue;
      // string bucket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.bucket"));
        } else
          goto handle_unusual;
        continue;
      // bool force_path_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.force_path_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string tagging = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_tagging();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.tagging"));
        } else
          goto handle_unusual;
        continue;
      // string content_disposition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_content_disposition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.content_disposition"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ProxyConfig proxy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_token = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_session_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.S3Upload.session_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S3Upload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.S3Upload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string access_key = 1;
  if (!this->_internal_access_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key().data(), static_cast<int>(this->_internal_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.access_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_access_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // string endpoint = 4;
  if (!this->_internal_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.endpoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_endpoint(), target);
  }

  // string bucket = 5;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.bucket");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bucket(), target);
  }

  // bool force_path_style = 6;
  if (this->_internal_force_path_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_force_path_style(), target);
  }

  // map<string, string> metadata = 7;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = S3Upload_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.S3Upload.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.S3Upload.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string tagging = 8;
  if (!this->_internal_tagging().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagging().data(), static_cast<int>(this->_internal_tagging().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.tagging");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tagging(), target);
  }

  // string content_disposition = 9;
  if (!this->_internal_content_disposition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_disposition().data(), static_cast<int>(this->_internal_content_disposition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.content_disposition");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_content_disposition(), target);
  }

  // .livekit.ProxyConfig proxy = 10;
  if (this->_internal_has_proxy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::proxy(this),
        _Internal::proxy(this).GetCachedSize(), target, stream);
  }

  // string session_token = 11;
  if (!this->_internal_session_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_token().data(), static_cast<int>(this->_internal_session_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.S3Upload.session_token");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_session_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.S3Upload)
  return target;
}

size_t S3Upload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.S3Upload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += S3Upload_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string access_key = 1;
  if (!this->_internal_access_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string endpoint = 4;
  if (!this->_internal_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string bucket = 5;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string tagging = 8;
  if (!this->_internal_tagging().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagging());
  }

  // string content_disposition = 9;
  if (!this->_internal_content_disposition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_disposition());
  }

  // string session_token = 11;
  if (!this->_internal_session_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_token());
  }

  // .livekit.ProxyConfig proxy = 10;
  if (this->_internal_has_proxy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxy_);
  }

  // bool force_path_style = 6;
  if (this->_internal_force_path_style() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S3Upload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S3Upload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S3Upload::GetClassData() const { return &_class_data_; }


void S3Upload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S3Upload*>(&to_msg);
  auto& from = static_cast<const S3Upload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.S3Upload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_access_key().empty()) {
    _this->_internal_set_access_key(from._internal_access_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_endpoint().empty()) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_tagging().empty()) {
    _this->_internal_set_tagging(from._internal_tagging());
  }
  if (!from._internal_content_disposition().empty()) {
    _this->_internal_set_content_disposition(from._internal_content_disposition());
  }
  if (!from._internal_session_token().empty()) {
    _this->_internal_set_session_token(from._internal_session_token());
  }
  if (from._internal_has_proxy()) {
    _this->_internal_mutable_proxy()->::livekit::ProxyConfig::MergeFrom(
        from._internal_proxy());
  }
  if (from._internal_force_path_style() != 0) {
    _this->_internal_set_force_path_style(from._internal_force_path_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S3Upload::CopyFrom(const S3Upload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.S3Upload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S3Upload::IsInitialized() const {
  return true;
}

void S3Upload::InternalSwap(S3Upload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_key_, lhs_arena,
      &other->_impl_.access_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endpoint_, lhs_arena,
      &other->_impl_.endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tagging_, lhs_arena,
      &other->_impl_.tagging_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_disposition_, lhs_arena,
      &other->_impl_.content_disposition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_token_, lhs_arena,
      &other->_impl_.session_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.force_path_style_)
      + sizeof(S3Upload::_impl_.force_path_style_)
      - PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.proxy_)>(
          reinterpret_cast<char*>(&_impl_.proxy_),
          reinterpret_cast<char*>(&other->_impl_.proxy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S3Upload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[10]);
}

// ===================================================================

class GCPUpload::_Internal {
 public:
  static const ::livekit::ProxyConfig& proxy(const GCPUpload* msg);
};

const ::livekit::ProxyConfig&
GCPUpload::_Internal::proxy(const GCPUpload* msg) {
  return *msg->_impl_.proxy_;
}
GCPUpload::GCPUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.GCPUpload)
}
GCPUpload::GCPUpload(const GCPUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPUpload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.credentials_){}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.proxy_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.credentials_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credentials_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_credentials().empty()) {
    _this->_impl_.credentials_.Set(from._internal_credentials(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_proxy()) {
    _this->_impl_.proxy_ = new ::livekit::ProxyConfig(*from._impl_.proxy_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.GCPUpload)
}

inline void GCPUpload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.credentials_){}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.proxy_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.credentials_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credentials_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCPUpload::~GCPUpload() {
  // @@protoc_insertion_point(destructor:livekit.GCPUpload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.credentials_.Destroy();
  _impl_.bucket_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proxy_;
}

void GCPUpload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.GCPUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.credentials_.ClearToEmpty();
  _impl_.bucket_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.proxy_ != nullptr) {
    delete _impl_.proxy_;
  }
  _impl_.proxy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPUpload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string credentials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_credentials();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.GCPUpload.credentials"));
        } else
          goto handle_unusual;
        continue;
      // string bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.GCPUpload.bucket"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ProxyConfig proxy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.GCPUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string credentials = 1;
  if (!this->_internal_credentials().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credentials().data(), static_cast<int>(this->_internal_credentials().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.GCPUpload.credentials");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_credentials(), target);
  }

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.GCPUpload.bucket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket(), target);
  }

  // .livekit.ProxyConfig proxy = 3;
  if (this->_internal_has_proxy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proxy(this),
        _Internal::proxy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.GCPUpload)
  return target;
}

size_t GCPUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.GCPUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string credentials = 1;
  if (!this->_internal_credentials().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credentials());
  }

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // .livekit.ProxyConfig proxy = 3;
  if (this->_internal_has_proxy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxy_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPUpload::GetClassData() const { return &_class_data_; }


void GCPUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPUpload*>(&to_msg);
  auto& from = static_cast<const GCPUpload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.GCPUpload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_credentials().empty()) {
    _this->_internal_set_credentials(from._internal_credentials());
  }
  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (from._internal_has_proxy()) {
    _this->_internal_mutable_proxy()->::livekit::ProxyConfig::MergeFrom(
        from._internal_proxy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPUpload::CopyFrom(const GCPUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.GCPUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPUpload::IsInitialized() const {
  return true;
}

void GCPUpload::InternalSwap(GCPUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.credentials_, lhs_arena,
      &other->_impl_.credentials_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  swap(_impl_.proxy_, other->_impl_.proxy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPUpload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[11]);
}

// ===================================================================

class AzureBlobUpload::_Internal {
 public:
};

AzureBlobUpload::AzureBlobUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.AzureBlobUpload)
}
AzureBlobUpload::AzureBlobUpload(const AzureBlobUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AzureBlobUpload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_name_){}
    , decltype(_impl_.account_key_){}
    , decltype(_impl_.container_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_name().empty()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_key().empty()) {
    _this->_impl_.account_key_.Set(from._internal_account_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.container_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.container_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_container_name().empty()) {
    _this->_impl_.container_name_.Set(from._internal_container_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.AzureBlobUpload)
}

inline void AzureBlobUpload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_name_){}
    , decltype(_impl_.account_key_){}
    , decltype(_impl_.container_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.container_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.container_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AzureBlobUpload::~AzureBlobUpload() {
  // @@protoc_insertion_point(destructor:livekit.AzureBlobUpload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AzureBlobUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_name_.Destroy();
  _impl_.account_key_.Destroy();
  _impl_.container_name_.Destroy();
}

void AzureBlobUpload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AzureBlobUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AzureBlobUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_name_.ClearToEmpty();
  _impl_.account_key_.ClearToEmpty();
  _impl_.container_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AzureBlobUpload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AzureBlobUpload.account_name"));
        } else
          goto handle_unusual;
        continue;
      // string account_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AzureBlobUpload.account_key"));
        } else
          goto handle_unusual;
        continue;
      // string container_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_container_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AzureBlobUpload.container_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AzureBlobUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AzureBlobUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_name = 1;
  if (!this->_internal_account_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AzureBlobUpload.account_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_name(), target);
  }

  // string account_key = 2;
  if (!this->_internal_account_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_key().data(), static_cast<int>(this->_internal_account_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AzureBlobUpload.account_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_key(), target);
  }

  // string container_name = 3;
  if (!this->_internal_container_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_name().data(), static_cast<int>(this->_internal_container_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AzureBlobUpload.container_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_container_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AzureBlobUpload)
  return target;
}

size_t AzureBlobUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AzureBlobUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_name = 1;
  if (!this->_internal_account_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_name());
  }

  // string account_key = 2;
  if (!this->_internal_account_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_key());
  }

  // string container_name = 3;
  if (!this->_internal_container_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AzureBlobUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AzureBlobUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AzureBlobUpload::GetClassData() const { return &_class_data_; }


void AzureBlobUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AzureBlobUpload*>(&to_msg);
  auto& from = static_cast<const AzureBlobUpload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AzureBlobUpload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_name().empty()) {
    _this->_internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_account_key().empty()) {
    _this->_internal_set_account_key(from._internal_account_key());
  }
  if (!from._internal_container_name().empty()) {
    _this->_internal_set_container_name(from._internal_container_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AzureBlobUpload::CopyFrom(const AzureBlobUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AzureBlobUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AzureBlobUpload::IsInitialized() const {
  return true;
}

void AzureBlobUpload::InternalSwap(AzureBlobUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_name_, lhs_arena,
      &other->_impl_.account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_key_, lhs_arena,
      &other->_impl_.account_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.container_name_, lhs_arena,
      &other->_impl_.container_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AzureBlobUpload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[12]);
}

// ===================================================================

class AliOSSUpload::_Internal {
 public:
};

AliOSSUpload::AliOSSUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.AliOSSUpload)
}
AliOSSUpload::AliOSSUpload(const AliOSSUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AliOSSUpload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.access_key_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.bucket_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_key().empty()) {
    _this->_impl_.access_key_.Set(from._internal_access_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint().empty()) {
    _this->_impl_.endpoint_.Set(from._internal_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.AliOSSUpload)
}

inline void AliOSSUpload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.access_key_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.bucket_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AliOSSUpload::~AliOSSUpload() {
  // @@protoc_insertion_point(destructor:livekit.AliOSSUpload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AliOSSUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.access_key_.Destroy();
  _impl_.secret_.Destroy();
  _impl_.region_.Destroy();
  _impl_.endpoint_.Destroy();
  _impl_.bucket_.Destroy();
}

void AliOSSUpload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AliOSSUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AliOSSUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.endpoint_.ClearToEmpty();
  _impl_.bucket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AliOSSUpload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string access_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_access_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AliOSSUpload.access_key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AliOSSUpload.secret"));
        } else
          goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AliOSSUpload.region"));
        } else
          goto handle_unusual;
        continue;
      // string endpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AliOSSUpload.endpoint"));
        } else
          goto handle_unusual;
        continue;
      // string bucket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AliOSSUpload.bucket"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AliOSSUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AliOSSUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string access_key = 1;
  if (!this->_internal_access_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key().data(), static_cast<int>(this->_internal_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AliOSSUpload.access_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_access_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AliOSSUpload.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AliOSSUpload.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // string endpoint = 4;
  if (!this->_internal_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AliOSSUpload.endpoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_endpoint(), target);
  }

  // string bucket = 5;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AliOSSUpload.bucket");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AliOSSUpload)
  return target;
}

size_t AliOSSUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AliOSSUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string access_key = 1;
  if (!this->_internal_access_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string endpoint = 4;
  if (!this->_internal_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string bucket = 5;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AliOSSUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AliOSSUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AliOSSUpload::GetClassData() const { return &_class_data_; }


void AliOSSUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AliOSSUpload*>(&to_msg);
  auto& from = static_cast<const AliOSSUpload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AliOSSUpload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_access_key().empty()) {
    _this->_internal_set_access_key(from._internal_access_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_endpoint().empty()) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AliOSSUpload::CopyFrom(const AliOSSUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AliOSSUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliOSSUpload::IsInitialized() const {
  return true;
}

void AliOSSUpload::InternalSwap(AliOSSUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_key_, lhs_arena,
      &other->_impl_.access_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endpoint_, lhs_arena,
      &other->_impl_.endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AliOSSUpload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[13]);
}

// ===================================================================

class ProxyConfig::_Internal {
 public:
};

ProxyConfig::ProxyConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ProxyConfig)
}
ProxyConfig::ProxyConfig(const ProxyConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProxyConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ProxyConfig)
}

inline void ProxyConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProxyConfig::~ProxyConfig() {
  // @@protoc_insertion_point(destructor:livekit.ProxyConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProxyConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void ProxyConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProxyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ProxyConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ProxyConfig.url"));
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ProxyConfig.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ProxyConfig.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProxyConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ProxyConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ProxyConfig.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ProxyConfig.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ProxyConfig.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ProxyConfig)
  return target;
}

size_t ProxyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ProxyConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProxyConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProxyConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProxyConfig::GetClassData() const { return &_class_data_; }


void ProxyConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProxyConfig*>(&to_msg);
  auto& from = static_cast<const ProxyConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ProxyConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyConfig::CopyFrom(const ProxyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ProxyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyConfig::IsInitialized() const {
  return true;
}

void ProxyConfig::InternalSwap(ProxyConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[14]);
}

// ===================================================================

class StreamOutput::_Internal {
 public:
};

StreamOutput::StreamOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamOutput)
}
StreamOutput::StreamOutput(const StreamOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.urls_){from._impl_.urls_}
    , decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.protocol_ = from._impl_.protocol_;
  // @@protoc_insertion_point(copy_constructor:livekit.StreamOutput)
}

inline void StreamOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.urls_){arena}
    , decltype(_impl_.protocol_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOutput::~StreamOutput() {
  // @@protoc_insertion_point(destructor:livekit.StreamOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.urls_.~RepeatedPtrField();
}

void StreamOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.urls_.Clear();
  _impl_.protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.StreamProtocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::livekit::StreamProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.StreamOutput.urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.StreamProtocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // repeated string urls = 2;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamOutput.urls");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamOutput)
  return target;
}

size_t StreamOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.urls_.size());
  for (int i = 0, n = _impl_.urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.urls_.Get(i));
  }

  // .livekit.StreamProtocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOutput::GetClassData() const { return &_class_data_; }


void StreamOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOutput*>(&to_msg);
  auto& from = static_cast<const StreamOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.urls_.MergeFrom(from._impl_.urls_);
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOutput::CopyFrom(const StreamOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOutput::IsInitialized() const {
  return true;
}

void StreamOutput::InternalSwap(StreamOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.urls_.InternalSwap(&other->_impl_.urls_);
  swap(_impl_.protocol_, other->_impl_.protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[15]);
}

// ===================================================================

class EncodingOptions::_Internal {
 public:
};

EncodingOptions::EncodingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.EncodingOptions)
}
EncodingOptions::EncodingOptions(const EncodingOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncodingOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.framerate_){}
    , decltype(_impl_.audio_codec_){}
    , decltype(_impl_.audio_bitrate_){}
    , decltype(_impl_.audio_frequency_){}
    , decltype(_impl_.video_codec_){}
    , decltype(_impl_.key_frame_interval_){}
    , decltype(_impl_.video_bitrate_){}
    , decltype(_impl_.audio_quality_){}
    , decltype(_impl_.video_quality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.video_quality_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.video_quality_));
  // @@protoc_insertion_point(copy_constructor:livekit.EncodingOptions)
}

inline void EncodingOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.framerate_){0}
    , decltype(_impl_.audio_codec_){0}
    , decltype(_impl_.audio_bitrate_){0}
    , decltype(_impl_.audio_frequency_){0}
    , decltype(_impl_.video_codec_){0}
    , decltype(_impl_.key_frame_interval_){0}
    , decltype(_impl_.video_bitrate_){0}
    , decltype(_impl_.audio_quality_){0}
    , decltype(_impl_.video_quality_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncodingOptions::~EncodingOptions() {
  // @@protoc_insertion_point(destructor:livekit.EncodingOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncodingOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EncodingOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncodingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EncodingOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.video_quality_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.video_quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncodingOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 framerate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AudioCodec audio_codec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audio_codec(static_cast<::livekit::AudioCodec>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 audio_bitrate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.audio_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 audio_frequency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.audio_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.VideoCodec video_codec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_video_codec(static_cast<::livekit::VideoCodec>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 video_bitrate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.video_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double key_frame_interval = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.key_frame_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 audio_quality = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.audio_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 video_quality = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.video_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncodingOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EncodingOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 depth = 3;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  // int32 framerate = 4;
  if (this->_internal_framerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_framerate(), target);
  }

  // .livekit.AudioCodec audio_codec = 5;
  if (this->_internal_audio_codec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_audio_codec(), target);
  }

  // int32 audio_bitrate = 6;
  if (this->_internal_audio_bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_audio_bitrate(), target);
  }

  // int32 audio_frequency = 7;
  if (this->_internal_audio_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_audio_frequency(), target);
  }

  // .livekit.VideoCodec video_codec = 8;
  if (this->_internal_video_codec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_video_codec(), target);
  }

  // int32 video_bitrate = 9;
  if (this->_internal_video_bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_video_bitrate(), target);
  }

  // double key_frame_interval = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_key_frame_interval = this->_internal_key_frame_interval();
  uint64_t raw_key_frame_interval;
  memcpy(&raw_key_frame_interval, &tmp_key_frame_interval, sizeof(tmp_key_frame_interval));
  if (raw_key_frame_interval != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_key_frame_interval(), target);
  }

  // int32 audio_quality = 11;
  if (this->_internal_audio_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_audio_quality(), target);
  }

  // int32 video_quality = 12;
  if (this->_internal_video_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_video_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EncodingOptions)
  return target;
}

size_t EncodingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.EncodingOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 depth = 3;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // int32 framerate = 4;
  if (this->_internal_framerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_framerate());
  }

  // .livekit.AudioCodec audio_codec = 5;
  if (this->_internal_audio_codec() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_audio_codec());
  }

  // int32 audio_bitrate = 6;
  if (this->_internal_audio_bitrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_audio_bitrate());
  }

  // int32 audio_frequency = 7;
  if (this->_internal_audio_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_audio_frequency());
  }

  // .livekit.VideoCodec video_codec = 8;
  if (this->_internal_video_codec() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_video_codec());
  }

  // double key_frame_interval = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_key_frame_interval = this->_internal_key_frame_interval();
  uint64_t raw_key_frame_interval;
  memcpy(&raw_key_frame_interval, &tmp_key_frame_interval, sizeof(tmp_key_frame_interval));
  if (raw_key_frame_interval != 0) {
    total_size += 1 + 8;
  }

  // int32 video_bitrate = 9;
  if (this->_internal_video_bitrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_video_bitrate());
  }

  // int32 audio_quality = 11;
  if (this->_internal_audio_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_audio_quality());
  }

  // int32 video_quality = 12;
  if (this->_internal_video_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_video_quality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncodingOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncodingOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncodingOptions::GetClassData() const { return &_class_data_; }


void EncodingOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncodingOptions*>(&to_msg);
  auto& from = static_cast<const EncodingOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EncodingOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_framerate() != 0) {
    _this->_internal_set_framerate(from._internal_framerate());
  }
  if (from._internal_audio_codec() != 0) {
    _this->_internal_set_audio_codec(from._internal_audio_codec());
  }
  if (from._internal_audio_bitrate() != 0) {
    _this->_internal_set_audio_bitrate(from._internal_audio_bitrate());
  }
  if (from._internal_audio_frequency() != 0) {
    _this->_internal_set_audio_frequency(from._internal_audio_frequency());
  }
  if (from._internal_video_codec() != 0) {
    _this->_internal_set_video_codec(from._internal_video_codec());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_key_frame_interval = from._internal_key_frame_interval();
  uint64_t raw_key_frame_interval;
  memcpy(&raw_key_frame_interval, &tmp_key_frame_interval, sizeof(tmp_key_frame_interval));
  if (raw_key_frame_interval != 0) {
    _this->_internal_set_key_frame_interval(from._internal_key_frame_interval());
  }
  if (from._internal_video_bitrate() != 0) {
    _this->_internal_set_video_bitrate(from._internal_video_bitrate());
  }
  if (from._internal_audio_quality() != 0) {
    _this->_internal_set_audio_quality(from._internal_audio_quality());
  }
  if (from._internal_video_quality() != 0) {
    _this->_internal_set_video_quality(from._internal_video_quality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncodingOptions::CopyFrom(const EncodingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EncodingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingOptions::IsInitialized() const {
  return true;
}

void EncodingOptions::InternalSwap(EncodingOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_quality_)
      + sizeof(EncodingOptions::_impl_.video_quality_)
      - PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncodingOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[16]);
}

// ===================================================================

class UpdateLayoutRequest::_Internal {
 public:
};

UpdateLayoutRequest::UpdateLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateLayoutRequest)
}
UpdateLayoutRequest::UpdateLayoutRequest(const UpdateLayoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateLayoutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.egress_id_){}
    , decltype(_impl_.layout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_egress_id().empty()) {
    _this->_impl_.egress_id_.Set(from._internal_egress_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.layout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_layout().empty()) {
    _this->_impl_.layout_.Set(from._internal_layout(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateLayoutRequest)
}

inline void UpdateLayoutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.egress_id_){}
    , decltype(_impl_.layout_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateLayoutRequest::~UpdateLayoutRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateLayoutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateLayoutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.egress_id_.Destroy();
  _impl_.layout_.Destroy();
}

void UpdateLayoutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateLayoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateLayoutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.egress_id_.ClearToEmpty();
  _impl_.layout_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLayoutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string egress_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_egress_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateLayoutRequest.egress_id"));
        } else
          goto handle_unusual;
        continue;
      // string layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_layout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateLayoutRequest.layout"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateLayoutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateLayoutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_id().data(), static_cast<int>(this->_internal_egress_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateLayoutRequest.egress_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_egress_id(), target);
  }

  // string layout = 2;
  if (!this->_internal_layout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layout().data(), static_cast<int>(this->_internal_layout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateLayoutRequest.layout");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateLayoutRequest)
  return target;
}

size_t UpdateLayoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateLayoutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress_id());
  }

  // string layout = 2;
  if (!this->_internal_layout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateLayoutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateLayoutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateLayoutRequest::GetClassData() const { return &_class_data_; }


void UpdateLayoutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateLayoutRequest*>(&to_msg);
  auto& from = static_cast<const UpdateLayoutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateLayoutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_egress_id().empty()) {
    _this->_internal_set_egress_id(from._internal_egress_id());
  }
  if (!from._internal_layout().empty()) {
    _this->_internal_set_layout(from._internal_layout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLayoutRequest::CopyFrom(const UpdateLayoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateLayoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLayoutRequest::IsInitialized() const {
  return true;
}

void UpdateLayoutRequest::InternalSwap(UpdateLayoutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.egress_id_, lhs_arena,
      &other->_impl_.egress_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layout_, lhs_arena,
      &other->_impl_.layout_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLayoutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[17]);
}

// ===================================================================

class UpdateStreamRequest::_Internal {
 public:
};

UpdateStreamRequest::UpdateStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateStreamRequest)
}
UpdateStreamRequest::UpdateStreamRequest(const UpdateStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateStreamRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.add_output_urls_){from._impl_.add_output_urls_}
    , decltype(_impl_.remove_output_urls_){from._impl_.remove_output_urls_}
    , decltype(_impl_.egress_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_egress_id().empty()) {
    _this->_impl_.egress_id_.Set(from._internal_egress_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateStreamRequest)
}

inline void UpdateStreamRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.add_output_urls_){arena}
    , decltype(_impl_.remove_output_urls_){arena}
    , decltype(_impl_.egress_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateStreamRequest::~UpdateStreamRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateStreamRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.add_output_urls_.~RepeatedPtrField();
  _impl_.remove_output_urls_.~RepeatedPtrField();
  _impl_.egress_id_.Destroy();
}

void UpdateStreamRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateStreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.add_output_urls_.Clear();
  _impl_.remove_output_urls_.Clear();
  _impl_.egress_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStreamRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string egress_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_egress_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateStreamRequest.egress_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string add_output_urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_add_output_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateStreamRequest.add_output_urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string remove_output_urls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_remove_output_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateStreamRequest.remove_output_urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateStreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateStreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_id().data(), static_cast<int>(this->_internal_egress_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateStreamRequest.egress_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_egress_id(), target);
  }

  // repeated string add_output_urls = 2;
  for (int i = 0, n = this->_internal_add_output_urls_size(); i < n; i++) {
    const auto& s = this->_internal_add_output_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateStreamRequest.add_output_urls");
    target = stream->WriteString(2, s, target);
  }

  // repeated string remove_output_urls = 3;
  for (int i = 0, n = this->_internal_remove_output_urls_size(); i < n; i++) {
    const auto& s = this->_internal_remove_output_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateStreamRequest.remove_output_urls");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateStreamRequest)
  return target;
}

size_t UpdateStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateStreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string add_output_urls = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.add_output_urls_.size());
  for (int i = 0, n = _impl_.add_output_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.add_output_urls_.Get(i));
  }

  // repeated string remove_output_urls = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.remove_output_urls_.size());
  for (int i = 0, n = _impl_.remove_output_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.remove_output_urls_.Get(i));
  }

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateStreamRequest::GetClassData() const { return &_class_data_; }


void UpdateStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateStreamRequest*>(&to_msg);
  auto& from = static_cast<const UpdateStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateStreamRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.add_output_urls_.MergeFrom(from._impl_.add_output_urls_);
  _this->_impl_.remove_output_urls_.MergeFrom(from._impl_.remove_output_urls_);
  if (!from._internal_egress_id().empty()) {
    _this->_internal_set_egress_id(from._internal_egress_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateStreamRequest::CopyFrom(const UpdateStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStreamRequest::IsInitialized() const {
  return true;
}

void UpdateStreamRequest::InternalSwap(UpdateStreamRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.add_output_urls_.InternalSwap(&other->_impl_.add_output_urls_);
  _impl_.remove_output_urls_.InternalSwap(&other->_impl_.remove_output_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.egress_id_, lhs_arena,
      &other->_impl_.egress_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[18]);
}

// ===================================================================

class ListEgressRequest::_Internal {
 public:
};

ListEgressRequest::ListEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListEgressRequest)
}
ListEgressRequest::ListEgressRequest(const ListEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.egress_id_){}
    , decltype(_impl_.active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_egress_id().empty()) {
    _this->_impl_.egress_id_.Set(from._internal_egress_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.active_ = from._impl_.active_;
  // @@protoc_insertion_point(copy_constructor:livekit.ListEgressRequest)
}

inline void ListEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.egress_id_){}
    , decltype(_impl_.active_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListEgressRequest::~ListEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  _impl_.egress_id_.Destroy();
}

void ListEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.egress_id_.ClearToEmpty();
  _impl_.active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ListEgressRequest.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string egress_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_egress_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ListEgressRequest.egress_id"));
        } else
          goto handle_unusual;
        continue;
      // bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListEgressRequest.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // string egress_id = 2;
  if (!this->_internal_egress_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_id().data(), static_cast<int>(this->_internal_egress_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListEgressRequest.egress_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_egress_id(), target);
  }

  // bool active = 3;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListEgressRequest)
  return target;
}

size_t ListEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string egress_id = 2;
  if (!this->_internal_egress_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress_id());
  }

  // bool active = 3;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEgressRequest::GetClassData() const { return &_class_data_; }


void ListEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEgressRequest*>(&to_msg);
  auto& from = static_cast<const ListEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_egress_id().empty()) {
    _this->_internal_set_egress_id(from._internal_egress_id());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEgressRequest::CopyFrom(const ListEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEgressRequest::IsInitialized() const {
  return true;
}

void ListEgressRequest::InternalSwap(ListEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.egress_id_, lhs_arena,
      &other->_impl_.egress_id_, rhs_arena
  );
  swap(_impl_.active_, other->_impl_.active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[19]);
}

// ===================================================================

class ListEgressResponse::_Internal {
 public:
};

ListEgressResponse::ListEgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListEgressResponse)
}
ListEgressResponse::ListEgressResponse(const ListEgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEgressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListEgressResponse)
}

inline void ListEgressResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListEgressResponse::~ListEgressResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListEgressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListEgressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListEgressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEgressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.EgressInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListEgressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListEgressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.EgressInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListEgressResponse)
  return target;
}

size_t ListEgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListEgressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.EgressInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEgressResponse::GetClassData() const { return &_class_data_; }


void ListEgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEgressResponse*>(&to_msg);
  auto& from = static_cast<const ListEgressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListEgressResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEgressResponse::CopyFrom(const ListEgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListEgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEgressResponse::IsInitialized() const {
  return true;
}

void ListEgressResponse::InternalSwap(ListEgressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEgressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[20]);
}

// ===================================================================

class StopEgressRequest::_Internal {
 public:
};

StopEgressRequest::StopEgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.StopEgressRequest)
}
StopEgressRequest::StopEgressRequest(const StopEgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopEgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.egress_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_egress_id().empty()) {
    _this->_impl_.egress_id_.Set(from._internal_egress_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.StopEgressRequest)
}

inline void StopEgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.egress_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopEgressRequest::~StopEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.StopEgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopEgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.egress_id_.Destroy();
}

void StopEgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StopEgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.egress_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopEgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string egress_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_egress_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.StopEgressRequest.egress_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopEgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StopEgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_id().data(), static_cast<int>(this->_internal_egress_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StopEgressRequest.egress_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_egress_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StopEgressRequest)
  return target;
}

size_t StopEgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StopEgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopEgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopEgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopEgressRequest::GetClassData() const { return &_class_data_; }


void StopEgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopEgressRequest*>(&to_msg);
  auto& from = static_cast<const StopEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StopEgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_egress_id().empty()) {
    _this->_internal_set_egress_id(from._internal_egress_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopEgressRequest::CopyFrom(const StopEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StopEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopEgressRequest::IsInitialized() const {
  return true;
}

void StopEgressRequest::InternalSwap(StopEgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.egress_id_, lhs_arena,
      &other->_impl_.egress_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopEgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[21]);
}

// ===================================================================

class EgressInfo::_Internal {
 public:
  static const ::livekit::RoomCompositeEgressRequest& room_composite(const EgressInfo* msg);
  static const ::livekit::WebEgressRequest& web(const EgressInfo* msg);
  static const ::livekit::ParticipantEgressRequest& participant(const EgressInfo* msg);
  static const ::livekit::TrackCompositeEgressRequest& track_composite(const EgressInfo* msg);
  static const ::livekit::TrackEgressRequest& track(const EgressInfo* msg);
  static const ::livekit::StreamInfoList& stream(const EgressInfo* msg);
  static const ::livekit::FileInfo& file(const EgressInfo* msg);
  static const ::livekit::SegmentsInfo& segments(const EgressInfo* msg);
};

const ::livekit::RoomCompositeEgressRequest&
EgressInfo::_Internal::room_composite(const EgressInfo* msg) {
  return *msg->_impl_.request_.room_composite_;
}
const ::livekit::WebEgressRequest&
EgressInfo::_Internal::web(const EgressInfo* msg) {
  return *msg->_impl_.request_.web_;
}
const ::livekit::ParticipantEgressRequest&
EgressInfo::_Internal::participant(const EgressInfo* msg) {
  return *msg->_impl_.request_.participant_;
}
const ::livekit::TrackCompositeEgressRequest&
EgressInfo::_Internal::track_composite(const EgressInfo* msg) {
  return *msg->_impl_.request_.track_composite_;
}
const ::livekit::TrackEgressRequest&
EgressInfo::_Internal::track(const EgressInfo* msg) {
  return *msg->_impl_.request_.track_;
}
const ::livekit::StreamInfoList&
EgressInfo::_Internal::stream(const EgressInfo* msg) {
  return *msg->_impl_.result_.stream_;
}
const ::livekit::FileInfo&
EgressInfo::_Internal::file(const EgressInfo* msg) {
  return *msg->_impl_.result_.file_;
}
const ::livekit::SegmentsInfo&
EgressInfo::_Internal::segments(const EgressInfo* msg) {
  return *msg->_impl_.result_.segments_;
}
void EgressInfo::set_allocated_room_composite(::livekit::RoomCompositeEgressRequest* room_composite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (room_composite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_composite);
    if (message_arena != submessage_arena) {
      room_composite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_composite, submessage_arena);
    }
    set_has_room_composite();
    _impl_.request_.room_composite_ = room_composite;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.room_composite)
}
void EgressInfo::set_allocated_web(::livekit::WebEgressRequest* web) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (web) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(web);
    if (message_arena != submessage_arena) {
      web = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web, submessage_arena);
    }
    set_has_web();
    _impl_.request_.web_ = web;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.web)
}
void EgressInfo::set_allocated_participant(::livekit::ParticipantEgressRequest* participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant);
    if (message_arena != submessage_arena) {
      participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant, submessage_arena);
    }
    set_has_participant();
    _impl_.request_.participant_ = participant;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.participant)
}
void EgressInfo::set_allocated_track_composite(::livekit::TrackCompositeEgressRequest* track_composite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (track_composite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_composite);
    if (message_arena != submessage_arena) {
      track_composite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_composite, submessage_arena);
    }
    set_has_track_composite();
    _impl_.request_.track_composite_ = track_composite;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.track_composite)
}
void EgressInfo::set_allocated_track(::livekit::TrackEgressRequest* track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track);
    if (message_arena != submessage_arena) {
      track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track, submessage_arena);
    }
    set_has_track();
    _impl_.request_.track_ = track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.track)
}
void EgressInfo::set_allocated_stream(::livekit::StreamInfoList* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.result_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.stream)
}
void EgressInfo::set_allocated_file(::livekit::FileInfo* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.result_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.file)
}
void EgressInfo::set_allocated_segments(::livekit::SegmentsInfo* segments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (segments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segments);
    if (message_arena != submessage_arena) {
      segments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.result_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.segments)
}
EgressInfo::EgressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.EgressInfo)
}
EgressInfo::EgressInfo(const EgressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EgressInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_results_){from._impl_.stream_results_}
    , decltype(_impl_.file_results_){from._impl_.file_results_}
    , decltype(_impl_.segment_results_){from._impl_.segment_results_}
    , decltype(_impl_.image_results_){from._impl_.image_results_}
    , decltype(_impl_.egress_id_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.manifest_location_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.ended_at_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.updated_at_){}
    , decltype(_impl_.backup_storage_used_){}
    , decltype(_impl_.source_type_){}
    , decltype(_impl_.request_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_egress_id().empty()) {
    _this->_impl_.egress_id_.Set(from._internal_egress_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manifest_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manifest_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manifest_location().empty()) {
    _this->_impl_.manifest_location_.Set(from._internal_manifest_location(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.started_at_, &from._impl_.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_type_) -
    reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.source_type_));
  clear_has_request();
  switch (from.request_case()) {
    case kRoomComposite: {
      _this->_internal_mutable_room_composite()->::livekit::RoomCompositeEgressRequest::MergeFrom(
          from._internal_room_composite());
      break;
    }
    case kWeb: {
      _this->_internal_mutable_web()->::livekit::WebEgressRequest::MergeFrom(
          from._internal_web());
      break;
    }
    case kParticipant: {
      _this->_internal_mutable_participant()->::livekit::ParticipantEgressRequest::MergeFrom(
          from._internal_participant());
      break;
    }
    case kTrackComposite: {
      _this->_internal_mutable_track_composite()->::livekit::TrackCompositeEgressRequest::MergeFrom(
          from._internal_track_composite());
      break;
    }
    case kTrack: {
      _this->_internal_mutable_track()->::livekit::TrackEgressRequest::MergeFrom(
          from._internal_track());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  clear_has_result();
  switch (from.result_case()) {
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamInfoList::MergeFrom(
          from._internal_stream());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::livekit::FileInfo::MergeFrom(
          from._internal_file());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentsInfo::MergeFrom(
          from._internal_segments());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.EgressInfo)
}

inline void EgressInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_results_){arena}
    , decltype(_impl_.file_results_){arena}
    , decltype(_impl_.segment_results_){arena}
    , decltype(_impl_.image_results_){arena}
    , decltype(_impl_.egress_id_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.room_name_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.manifest_location_){}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.updated_at_){int64_t{0}}
    , decltype(_impl_.backup_storage_used_){false}
    , decltype(_impl_.source_type_){0}
    , decltype(_impl_.request_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.egress_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.egress_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manifest_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manifest_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_request();
  clear_has_result();
}

EgressInfo::~EgressInfo() {
  // @@protoc_insertion_point(destructor:livekit.EgressInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EgressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_results_.~RepeatedPtrField();
  _impl_.file_results_.~RepeatedPtrField();
  _impl_.segment_results_.~RepeatedPtrField();
  _impl_.image_results_.~RepeatedPtrField();
  _impl_.egress_id_.Destroy();
  _impl_.room_id_.Destroy();
  _impl_.error_.Destroy();
  _impl_.room_name_.Destroy();
  _impl_.details_.Destroy();
  _impl_.manifest_location_.Destroy();
  if (has_request()) {
    clear_request();
  }
  if (has_result()) {
    clear_result();
  }
}

void EgressInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EgressInfo::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:livekit.EgressInfo)
  switch (request_case()) {
    case kRoomComposite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.room_composite_;
      }
      break;
    }
    case kWeb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.web_;
      }
      break;
    }
    case kParticipant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.participant_;
      }
      break;
    }
    case kTrackComposite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.track_composite_;
      }
      break;
    }
    case kTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.track_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}

void EgressInfo::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:livekit.EgressInfo)
  switch (result_case()) {
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.stream_;
      }
      break;
    }
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.file_;
      }
      break;
    }
    case kSegments: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.segments_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = RESULT_NOT_SET;
}


void EgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EgressInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_results_.Clear();
  _impl_.file_results_.Clear();
  _impl_.segment_results_.Clear();
  _impl_.image_results_.Clear();
  _impl_.egress_id_.ClearToEmpty();
  _impl_.room_id_.ClearToEmpty();
  _impl_.error_.ClearToEmpty();
  _impl_.room_name_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.manifest_location_.ClearToEmpty();
  ::memset(&_impl_.started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.source_type_) -
      reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.source_type_));
  clear_request();
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EgressInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string egress_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_egress_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EgressInfo.egress_id"));
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EgressInfo.room_id"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EgressStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::livekit::EgressStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomCompositeEgressRequest room_composite = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_composite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackCompositeEgressRequest track_composite = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_composite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackEgressRequest track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamInfoList stream = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.FileInfo file = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EgressInfo.error"));
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SegmentsInfo segments = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_segments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EgressInfo.room_name"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.WebEgressRequest web = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_web(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.StreamInfo stream_results = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.FileInfo file_results = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_file_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SegmentsInfo segment_results = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_segment_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 updated_at = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantEgressRequest participant = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ImagesInfo image_results = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_image_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string details = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EgressInfo.details"));
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string manifest_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_manifest_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EgressInfo.manifest_location"));
        } else
          goto handle_unusual;
        continue;
      // bool backup_storage_used = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.backup_storage_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EgressSourceType source_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::livekit::EgressSourceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EgressInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EgressInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_id().data(), static_cast<int>(this->_internal_egress_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EgressInfo.egress_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_egress_id(), target);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EgressInfo.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // .livekit.EgressStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // .livekit.RoomCompositeEgressRequest room_composite = 4;
  if (_internal_has_room_composite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::room_composite(this),
        _Internal::room_composite(this).GetCachedSize(), target, stream);
  }

  // .livekit.TrackCompositeEgressRequest track_composite = 5;
  if (_internal_has_track_composite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::track_composite(this),
        _Internal::track_composite(this).GetCachedSize(), target, stream);
  }

  // .livekit.TrackEgressRequest track = 6;
  if (_internal_has_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  // .livekit.StreamInfoList stream = 7 [deprecated = true];
  if (_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .livekit.FileInfo file = 8 [deprecated = true];
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // string error = 9;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EgressInfo.error");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_error(), target);
  }

  // int64 started_at = 10;
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_started_at(), target);
  }

  // int64 ended_at = 11;
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_ended_at(), target);
  }

  // .livekit.SegmentsInfo segments = 12 [deprecated = true];
  if (_internal_has_segments()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::segments(this),
        _Internal::segments(this).GetCachedSize(), target, stream);
  }

  // string room_name = 13;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EgressInfo.room_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_room_name(), target);
  }

  // .livekit.WebEgressRequest web = 14;
  if (_internal_has_web()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::web(this),
        _Internal::web(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.StreamInfo stream_results = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.FileInfo file_results = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SegmentsInfo segment_results = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 updated_at = 18;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_updated_at(), target);
  }

  // .livekit.ParticipantEgressRequest participant = 19;
  if (_internal_has_participant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.ImagesInfo image_results = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string details = 21;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EgressInfo.details");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_details(), target);
  }

  // int32 error_code = 22;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_error_code(), target);
  }

  // string manifest_location = 23;
  if (!this->_internal_manifest_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manifest_location().data(), static_cast<int>(this->_internal_manifest_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EgressInfo.manifest_location");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_manifest_location(), target);
  }

  // bool backup_storage_used = 25;
  if (this->_internal_backup_storage_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_backup_storage_used(), target);
  }

  // .livekit.EgressSourceType source_type = 26;
  if (this->_internal_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EgressInfo)
  return target;
}

size_t EgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.EgressInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.StreamInfo stream_results = 15;
  total_size += 1UL * this->_internal_stream_results_size();
  for (const auto& msg : this->_impl_.stream_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.FileInfo file_results = 16;
  total_size += 2UL * this->_internal_file_results_size();
  for (const auto& msg : this->_impl_.file_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SegmentsInfo segment_results = 17;
  total_size += 2UL * this->_internal_segment_results_size();
  for (const auto& msg : this->_impl_.segment_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ImagesInfo image_results = 20;
  total_size += 2UL * this->_internal_image_results_size();
  for (const auto& msg : this->_impl_.image_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string egress_id = 1;
  if (!this->_internal_egress_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress_id());
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string error = 9;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // string room_name = 13;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string details = 21;
  if (!this->_internal_details().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // string manifest_location = 23;
  if (!this->_internal_manifest_location().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manifest_location());
  }

  // int64 started_at = 10;
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // int64 ended_at = 11;
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  // .livekit.EgressStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 error_code = 22;
  if (this->_internal_error_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  // int64 updated_at = 18;
  if (this->_internal_updated_at() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_updated_at());
  }

  // bool backup_storage_used = 25;
  if (this->_internal_backup_storage_used() != 0) {
    total_size += 2 + 1;
  }

  // .livekit.EgressSourceType source_type = 26;
  if (this->_internal_source_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  switch (request_case()) {
    // .livekit.RoomCompositeEgressRequest room_composite = 4;
    case kRoomComposite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.room_composite_);
      break;
    }
    // .livekit.WebEgressRequest web = 14;
    case kWeb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.web_);
      break;
    }
    // .livekit.ParticipantEgressRequest participant = 19;
    case kParticipant: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.participant_);
      break;
    }
    // .livekit.TrackCompositeEgressRequest track_composite = 5;
    case kTrackComposite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.track_composite_);
      break;
    }
    // .livekit.TrackEgressRequest track = 6;
    case kTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.track_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  switch (result_case()) {
    // .livekit.StreamInfoList stream = 7 [deprecated = true];
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.stream_);
      break;
    }
    // .livekit.FileInfo file = 8 [deprecated = true];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.file_);
      break;
    }
    // .livekit.SegmentsInfo segments = 12 [deprecated = true];
    case kSegments: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.segments_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EgressInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EgressInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EgressInfo::GetClassData() const { return &_class_data_; }


void EgressInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EgressInfo*>(&to_msg);
  auto& from = static_cast<const EgressInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EgressInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_results_.MergeFrom(from._impl_.stream_results_);
  _this->_impl_.file_results_.MergeFrom(from._impl_.file_results_);
  _this->_impl_.segment_results_.MergeFrom(from._impl_.segment_results_);
  _this->_impl_.image_results_.MergeFrom(from._impl_.image_results_);
  if (!from._internal_egress_id().empty()) {
    _this->_internal_set_egress_id(from._internal_egress_id());
  }
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (!from._internal_manifest_location().empty()) {
    _this->_internal_set_manifest_location(from._internal_manifest_location());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_backup_storage_used() != 0) {
    _this->_internal_set_backup_storage_used(from._internal_backup_storage_used());
  }
  if (from._internal_source_type() != 0) {
    _this->_internal_set_source_type(from._internal_source_type());
  }
  switch (from.request_case()) {
    case kRoomComposite: {
      _this->_internal_mutable_room_composite()->::livekit::RoomCompositeEgressRequest::MergeFrom(
          from._internal_room_composite());
      break;
    }
    case kWeb: {
      _this->_internal_mutable_web()->::livekit::WebEgressRequest::MergeFrom(
          from._internal_web());
      break;
    }
    case kParticipant: {
      _this->_internal_mutable_participant()->::livekit::ParticipantEgressRequest::MergeFrom(
          from._internal_participant());
      break;
    }
    case kTrackComposite: {
      _this->_internal_mutable_track_composite()->::livekit::TrackCompositeEgressRequest::MergeFrom(
          from._internal_track_composite());
      break;
    }
    case kTrack: {
      _this->_internal_mutable_track()->::livekit::TrackEgressRequest::MergeFrom(
          from._internal_track());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  switch (from.result_case()) {
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::StreamInfoList::MergeFrom(
          from._internal_stream());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::livekit::FileInfo::MergeFrom(
          from._internal_file());
      break;
    }
    case kSegments: {
      _this->_internal_mutable_segments()->::livekit::SegmentsInfo::MergeFrom(
          from._internal_segments());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EgressInfo::CopyFrom(const EgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgressInfo::IsInitialized() const {
  return true;
}

void EgressInfo::InternalSwap(EgressInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_results_.InternalSwap(&other->_impl_.stream_results_);
  _impl_.file_results_.InternalSwap(&other->_impl_.file_results_);
  _impl_.segment_results_.InternalSwap(&other->_impl_.segment_results_);
  _impl_.image_results_.InternalSwap(&other->_impl_.image_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.egress_id_, lhs_arena,
      &other->_impl_.egress_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manifest_location_, lhs_arena,
      &other->_impl_.manifest_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.source_type_)
      + sizeof(EgressInfo::_impl_.source_type_)
      - PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EgressInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[22]);
}

// ===================================================================

class StreamInfoList::_Internal {
 public:
};

StreamInfoList::StreamInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamInfoList)
}
StreamInfoList::StreamInfoList(const StreamInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.StreamInfoList)
}

inline void StreamInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamInfoList::~StreamInfoList() {
  // @@protoc_insertion_point(destructor:livekit.StreamInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void StreamInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.StreamInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.StreamInfo info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamInfoList)
  return target;
}

size_t StreamInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.StreamInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_impl_.info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInfoList::GetClassData() const { return &_class_data_; }


void StreamInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamInfoList*>(&to_msg);
  auto& from = static_cast<const StreamInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInfoList::CopyFrom(const StreamInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfoList::IsInitialized() const {
  return true;
}

void StreamInfoList::InternalSwap(StreamInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[23]);
}

// ===================================================================

class StreamInfo::_Internal {
 public:
};

StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.ended_at_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.started_at_, &from._impl_.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:livekit.StreamInfo)
}

inline void StreamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , decltype(_impl_.duration_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:livekit.StreamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.error_.Destroy();
}

void StreamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.error_.ClearToEmpty();
  ::memset(&_impl_.started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.StreamInfo.url"));
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamInfo.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::livekit::StreamInfo_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.StreamInfo.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamInfo.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // int64 started_at = 2;
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_started_at(), target);
  }

  // int64 ended_at = 3;
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ended_at(), target);
  }

  // int64 duration = 4;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_duration(), target);
  }

  // .livekit.StreamInfo.Status status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // string error = 6;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamInfo.error");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string error = 6;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int64 started_at = 2;
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // int64 ended_at = 3;
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  // int64 duration = 4;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  // .livekit.StreamInfo.Status status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInfo::GetClassData() const { return &_class_data_; }


void StreamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamInfo*>(&to_msg);
  auto& from = static_cast<const StreamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.status_)
      + sizeof(StreamInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[24]);
}

// ===================================================================

class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.ended_at_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.started_at_, &from._impl_.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:livekit.FileInfo)
}

inline void FileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.duration_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:livekit.FileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.location_.Destroy();
}

void FileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  ::memset(&_impl_.started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.FileInfo.filename"));
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.FileInfo.location"));
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.FileInfo.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // int64 started_at = 2;
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_started_at(), target);
  }

  // int64 ended_at = 3;
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ended_at(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  // string location = 5;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.FileInfo.location");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location(), target);
  }

  // int64 duration = 6;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.FileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string location = 5;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // int64 started_at = 2;
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // int64 ended_at = 3;
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 duration = 6;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileInfo::GetClassData() const { return &_class_data_; }


void FileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileInfo*>(&to_msg);
  auto& from = static_cast<const FileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.FileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.duration_)
      + sizeof(FileInfo::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[25]);
}

// ===================================================================

class SegmentsInfo::_Internal {
 public:
};

SegmentsInfo::SegmentsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SegmentsInfo)
}
SegmentsInfo::SegmentsInfo(const SegmentsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playlist_name_){}
    , decltype(_impl_.playlist_location_){}
    , decltype(_impl_.live_playlist_name_){}
    , decltype(_impl_.live_playlist_location_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.segment_count_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.ended_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playlist_name().empty()) {
    _this->_impl_.playlist_name_.Set(from._internal_playlist_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playlist_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlist_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playlist_location().empty()) {
    _this->_impl_.playlist_location_.Set(from._internal_playlist_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.live_playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.live_playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_live_playlist_name().empty()) {
    _this->_impl_.live_playlist_name_.Set(from._internal_live_playlist_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.live_playlist_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.live_playlist_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_live_playlist_location().empty()) {
    _this->_impl_.live_playlist_location_.Set(from._internal_live_playlist_location(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ended_at_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.ended_at_));
  // @@protoc_insertion_point(copy_constructor:livekit.SegmentsInfo)
}

inline void SegmentsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playlist_name_){}
    , decltype(_impl_.playlist_location_){}
    , decltype(_impl_.live_playlist_name_){}
    , decltype(_impl_.live_playlist_location_){}
    , decltype(_impl_.duration_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.segment_count_){int64_t{0}}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playlist_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlist_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.live_playlist_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.live_playlist_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.live_playlist_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.live_playlist_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentsInfo::~SegmentsInfo() {
  // @@protoc_insertion_point(destructor:livekit.SegmentsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playlist_name_.Destroy();
  _impl_.playlist_location_.Destroy();
  _impl_.live_playlist_name_.Destroy();
  _impl_.live_playlist_location_.Destroy();
}

void SegmentsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SegmentsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playlist_name_.ClearToEmpty();
  _impl_.playlist_location_.ClearToEmpty();
  _impl_.live_playlist_name_.ClearToEmpty();
  _impl_.live_playlist_location_.ClearToEmpty();
  ::memset(&_impl_.duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ended_at_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.ended_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playlist_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playlist_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentsInfo.playlist_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playlist_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_playlist_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentsInfo.playlist_location"));
        } else
          goto handle_unusual;
        continue;
      // int64 segment_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.segment_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string live_playlist_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_live_playlist_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentsInfo.live_playlist_name"));
        } else
          goto handle_unusual;
        continue;
      // string live_playlist_location = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_live_playlist_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SegmentsInfo.live_playlist_location"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SegmentsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playlist_name = 1;
  if (!this->_internal_playlist_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playlist_name().data(), static_cast<int>(this->_internal_playlist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentsInfo.playlist_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playlist_name(), target);
  }

  // int64 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // string playlist_location = 4;
  if (!this->_internal_playlist_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playlist_location().data(), static_cast<int>(this->_internal_playlist_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentsInfo.playlist_location");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_playlist_location(), target);
  }

  // int64 segment_count = 5;
  if (this->_internal_segment_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_segment_count(), target);
  }

  // int64 started_at = 6;
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_started_at(), target);
  }

  // int64 ended_at = 7;
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_ended_at(), target);
  }

  // string live_playlist_name = 8;
  if (!this->_internal_live_playlist_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_live_playlist_name().data(), static_cast<int>(this->_internal_live_playlist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentsInfo.live_playlist_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_live_playlist_name(), target);
  }

  // string live_playlist_location = 9;
  if (!this->_internal_live_playlist_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_live_playlist_location().data(), static_cast<int>(this->_internal_live_playlist_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SegmentsInfo.live_playlist_location");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_live_playlist_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SegmentsInfo)
  return target;
}

size_t SegmentsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SegmentsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playlist_name = 1;
  if (!this->_internal_playlist_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playlist_name());
  }

  // string playlist_location = 4;
  if (!this->_internal_playlist_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playlist_location());
  }

  // string live_playlist_name = 8;
  if (!this->_internal_live_playlist_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_live_playlist_name());
  }

  // string live_playlist_location = 9;
  if (!this->_internal_live_playlist_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_live_playlist_location());
  }

  // int64 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 segment_count = 5;
  if (this->_internal_segment_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_count());
  }

  // int64 started_at = 6;
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // int64 ended_at = 7;
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentsInfo::GetClassData() const { return &_class_data_; }


void SegmentsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentsInfo*>(&to_msg);
  auto& from = static_cast<const SegmentsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SegmentsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playlist_name().empty()) {
    _this->_internal_set_playlist_name(from._internal_playlist_name());
  }
  if (!from._internal_playlist_location().empty()) {
    _this->_internal_set_playlist_location(from._internal_playlist_location());
  }
  if (!from._internal_live_playlist_name().empty()) {
    _this->_internal_set_live_playlist_name(from._internal_live_playlist_name());
  }
  if (!from._internal_live_playlist_location().empty()) {
    _this->_internal_set_live_playlist_location(from._internal_live_playlist_location());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_segment_count() != 0) {
    _this->_internal_set_segment_count(from._internal_segment_count());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentsInfo::CopyFrom(const SegmentsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SegmentsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentsInfo::IsInitialized() const {
  return true;
}

void SegmentsInfo::InternalSwap(SegmentsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playlist_name_, lhs_arena,
      &other->_impl_.playlist_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playlist_location_, lhs_arena,
      &other->_impl_.playlist_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.live_playlist_name_, lhs_arena,
      &other->_impl_.live_playlist_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.live_playlist_location_, lhs_arena,
      &other->_impl_.live_playlist_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.ended_at_)
      + sizeof(SegmentsInfo::_impl_.ended_at_)
      - PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[26]);
}

// ===================================================================

class ImagesInfo::_Internal {
 public:
};

ImagesInfo::ImagesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ImagesInfo)
}
ImagesInfo::ImagesInfo(const ImagesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_prefix_){}
    , decltype(_impl_.image_count_){}
    , decltype(_impl_.started_at_){}
    , decltype(_impl_.ended_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename_prefix().empty()) {
    _this->_impl_.filename_prefix_.Set(from._internal_filename_prefix(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.image_count_, &from._impl_.image_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ended_at_) -
    reinterpret_cast<char*>(&_impl_.image_count_)) + sizeof(_impl_.ended_at_));
  // @@protoc_insertion_point(copy_constructor:livekit.ImagesInfo)
}

inline void ImagesInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_prefix_){}
    , decltype(_impl_.image_count_){int64_t{0}}
    , decltype(_impl_.started_at_){int64_t{0}}
    , decltype(_impl_.ended_at_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImagesInfo::~ImagesInfo() {
  // @@protoc_insertion_point(destructor:livekit.ImagesInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_prefix_.Destroy();
}

void ImagesInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ImagesInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_prefix_.ClearToEmpty();
  ::memset(&_impl_.image_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ended_at_) -
      reinterpret_cast<char*>(&_impl_.image_count_)) + sizeof(_impl_.ended_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 image_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.image_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 started_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ended_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ended_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filename_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ImagesInfo.filename_prefix"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ImagesInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 image_count = 1;
  if (this->_internal_image_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_image_count(), target);
  }

  // int64 started_at = 2;
  if (this->_internal_started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_started_at(), target);
  }

  // int64 ended_at = 3;
  if (this->_internal_ended_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ended_at(), target);
  }

  // string filename_prefix = 4;
  if (!this->_internal_filename_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename_prefix().data(), static_cast<int>(this->_internal_filename_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ImagesInfo.filename_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ImagesInfo)
  return target;
}

size_t ImagesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ImagesInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename_prefix = 4;
  if (!this->_internal_filename_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename_prefix());
  }

  // int64 image_count = 1;
  if (this->_internal_image_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_image_count());
  }

  // int64 started_at = 2;
  if (this->_internal_started_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_started_at());
  }

  // int64 ended_at = 3;
  if (this->_internal_ended_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ended_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesInfo::GetClassData() const { return &_class_data_; }


void ImagesInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesInfo*>(&to_msg);
  auto& from = static_cast<const ImagesInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ImagesInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename_prefix().empty()) {
    _this->_internal_set_filename_prefix(from._internal_filename_prefix());
  }
  if (from._internal_image_count() != 0) {
    _this->_internal_set_image_count(from._internal_image_count());
  }
  if (from._internal_started_at() != 0) {
    _this->_internal_set_started_at(from._internal_started_at());
  }
  if (from._internal_ended_at() != 0) {
    _this->_internal_set_ended_at(from._internal_ended_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesInfo::CopyFrom(const ImagesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ImagesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesInfo::IsInitialized() const {
  return true;
}

void ImagesInfo::InternalSwap(ImagesInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_prefix_, lhs_arena,
      &other->_impl_.filename_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.ended_at_)
      + sizeof(ImagesInfo::_impl_.ended_at_)
      - PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.image_count_)>(
          reinterpret_cast<char*>(&_impl_.image_count_),
          reinterpret_cast<char*>(&other->_impl_.image_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[27]);
}

// ===================================================================

class AutoParticipantEgress::_Internal {
 public:
  static const ::livekit::EncodingOptions& advanced(const AutoParticipantEgress* msg);
};

const ::livekit::EncodingOptions&
AutoParticipantEgress::_Internal::advanced(const AutoParticipantEgress* msg) {
  return *msg->_impl_.options_.advanced_;
}
void AutoParticipantEgress::set_allocated_advanced(::livekit::EncodingOptions* advanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (advanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advanced);
    if (message_arena != submessage_arena) {
      advanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoParticipantEgress.advanced)
}
AutoParticipantEgress::AutoParticipantEgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.AutoParticipantEgress)
}
AutoParticipantEgress::AutoParticipantEgress(const AutoParticipantEgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoParticipantEgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){from._impl_.file_outputs_}
    , decltype(_impl_.segment_outputs_){from._impl_.segment_outputs_}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_options();
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.AutoParticipantEgress)
}

inline void AutoParticipantEgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_outputs_){arena}
    , decltype(_impl_.segment_outputs_){arena}
    , decltype(_impl_.options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_options();
}

AutoParticipantEgress::~AutoParticipantEgress() {
  // @@protoc_insertion_point(destructor:livekit.AutoParticipantEgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoParticipantEgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_outputs_.~RepeatedPtrField();
  _impl_.segment_outputs_.~RepeatedPtrField();
  if (has_options()) {
    clear_options();
  }
}

void AutoParticipantEgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoParticipantEgress::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.AutoParticipantEgress)
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.options_.advanced_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONS_NOT_SET;
}


void AutoParticipantEgress::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AutoParticipantEgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  clear_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoParticipantEgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.EncodingOptionsPreset preset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preset(static_cast<::livekit::EncodingOptionsPreset>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.EncodingOptions advanced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.EncodedFileOutput file_outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoParticipantEgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AutoParticipantEgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.EncodingOptionsPreset preset = 1;
  if (_internal_has_preset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_preset(), target);
  }

  // .livekit.EncodingOptions advanced = 2;
  if (_internal_has_advanced()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::advanced(this),
        _Internal::advanced(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AutoParticipantEgress)
  return target;
}

size_t AutoParticipantEgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AutoParticipantEgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.EncodedFileOutput file_outputs = 3;
  total_size += 1UL * this->_internal_file_outputs_size();
  for (const auto& msg : this->_impl_.file_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
  total_size += 1UL * this->_internal_segment_outputs_size();
  for (const auto& msg : this->_impl_.segment_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (options_case()) {
    // .livekit.EncodingOptionsPreset preset = 1;
    case kPreset: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 2;
    case kAdvanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoParticipantEgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoParticipantEgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoParticipantEgress::GetClassData() const { return &_class_data_; }


void AutoParticipantEgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoParticipantEgress*>(&to_msg);
  auto& from = static_cast<const AutoParticipantEgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AutoParticipantEgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_outputs_.MergeFrom(from._impl_.file_outputs_);
  _this->_impl_.segment_outputs_.MergeFrom(from._impl_.segment_outputs_);
  switch (from.options_case()) {
    case kPreset: {
      _this->_internal_set_preset(from._internal_preset());
      break;
    }
    case kAdvanced: {
      _this->_internal_mutable_advanced()->::livekit::EncodingOptions::MergeFrom(
          from._internal_advanced());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoParticipantEgress::CopyFrom(const AutoParticipantEgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AutoParticipantEgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoParticipantEgress::IsInitialized() const {
  return true;
}

void AutoParticipantEgress::InternalSwap(AutoParticipantEgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoParticipantEgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[28]);
}

// ===================================================================

class AutoTrackEgress::_Internal {
 public:
  static const ::livekit::S3Upload& s3(const AutoTrackEgress* msg);
  static const ::livekit::GCPUpload& gcp(const AutoTrackEgress* msg);
  static const ::livekit::AzureBlobUpload& azure(const AutoTrackEgress* msg);
  static const ::livekit::AliOSSUpload& alioss(const AutoTrackEgress* msg);
};

const ::livekit::S3Upload&
AutoTrackEgress::_Internal::s3(const AutoTrackEgress* msg) {
  return *msg->_impl_.output_.s3_;
}
const ::livekit::GCPUpload&
AutoTrackEgress::_Internal::gcp(const AutoTrackEgress* msg) {
  return *msg->_impl_.output_.gcp_;
}
const ::livekit::AzureBlobUpload&
AutoTrackEgress::_Internal::azure(const AutoTrackEgress* msg) {
  return *msg->_impl_.output_.azure_;
}
const ::livekit::AliOSSUpload&
AutoTrackEgress::_Internal::alioss(const AutoTrackEgress* msg) {
  return *msg->_impl_.output_.alioss_;
}
void AutoTrackEgress::set_allocated_s3(::livekit::S3Upload* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.s3)
}
void AutoTrackEgress::set_allocated_gcp(::livekit::GCPUpload* gcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (gcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gcp);
    if (message_arena != submessage_arena) {
      gcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.gcp)
}
void AutoTrackEgress::set_allocated_azure(::livekit::AzureBlobUpload* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.azure)
}
void AutoTrackEgress::set_allocated_alioss(::livekit::AliOSSUpload* alioss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output();
  if (alioss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alioss);
    if (message_arena != submessage_arena) {
      alioss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.aliOSS)
}
AutoTrackEgress::AutoTrackEgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.AutoTrackEgress)
}
AutoTrackEgress::AutoTrackEgress(const AutoTrackEgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoTrackEgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.disable_manifest_){}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
  clear_has_output();
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.AutoTrackEgress)
}

inline void AutoTrackEgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.disable_manifest_){false}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_output();
}

AutoTrackEgress::~AutoTrackEgress() {
  // @@protoc_insertion_point(destructor:livekit.AutoTrackEgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoTrackEgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  if (has_output()) {
    clear_output();
  }
}

void AutoTrackEgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoTrackEgress::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.AutoTrackEgress)
  switch (output_case()) {
    case kS3: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.s3_;
      }
      break;
    }
    case kGcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.gcp_;
      }
      break;
    }
    case kAzure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.azure_;
      }
      break;
    }
    case kAliOSS: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.output_.alioss_;
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


void AutoTrackEgress::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AutoTrackEgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _impl_.disable_manifest_ = false;
  clear_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoTrackEgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filepath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AutoTrackEgress.filepath"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.S3Upload s3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.GCPUpload gcp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AzureBlobUpload azure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_manifest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.disable_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AliOSSUpload aliOSS = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_alioss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoTrackEgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AutoTrackEgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AutoTrackEgress.filepath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // .livekit.S3Upload s3 = 2;
  if (_internal_has_s3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::s3(this),
        _Internal::s3(this).GetCachedSize(), target, stream);
  }

  // .livekit.GCPUpload gcp = 3;
  if (_internal_has_gcp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gcp(this),
        _Internal::gcp(this).GetCachedSize(), target, stream);
  }

  // .livekit.AzureBlobUpload azure = 4;
  if (_internal_has_azure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::azure(this),
        _Internal::azure(this).GetCachedSize(), target, stream);
  }

  // bool disable_manifest = 5;
  if (this->_internal_disable_manifest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_disable_manifest(), target);
  }

  // .livekit.AliOSSUpload aliOSS = 6;
  if (_internal_has_alioss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::alioss(this),
        _Internal::alioss(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AutoTrackEgress)
  return target;
}

size_t AutoTrackEgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AutoTrackEgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // bool disable_manifest = 5;
  if (this->_internal_disable_manifest() != 0) {
    total_size += 1 + 1;
  }

  switch (output_case()) {
    // .livekit.S3Upload s3 = 2;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 3;
    case kGcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 4;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 6;
    case kAliOSS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoTrackEgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoTrackEgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoTrackEgress::GetClassData() const { return &_class_data_; }


void AutoTrackEgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoTrackEgress*>(&to_msg);
  auto& from = static_cast<const AutoTrackEgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AutoTrackEgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (from._internal_disable_manifest() != 0) {
    _this->_internal_set_disable_manifest(from._internal_disable_manifest());
  }
  switch (from.output_case()) {
    case kS3: {
      _this->_internal_mutable_s3()->::livekit::S3Upload::MergeFrom(
          from._internal_s3());
      break;
    }
    case kGcp: {
      _this->_internal_mutable_gcp()->::livekit::GCPUpload::MergeFrom(
          from._internal_gcp());
      break;
    }
    case kAzure: {
      _this->_internal_mutable_azure()->::livekit::AzureBlobUpload::MergeFrom(
          from._internal_azure());
      break;
    }
    case kAliOSS: {
      _this->_internal_mutable_alioss()->::livekit::AliOSSUpload::MergeFrom(
          from._internal_alioss());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoTrackEgress::CopyFrom(const AutoTrackEgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AutoTrackEgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoTrackEgress::IsInitialized() const {
  return true;
}

void AutoTrackEgress::InternalSwap(AutoTrackEgress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  swap(_impl_.disable_manifest_, other->_impl_.disable_manifest_);
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoTrackEgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fegress_2eproto_getter, &descriptor_table_livekit_5fegress_2eproto_once,
      file_level_metadata_livekit_5fegress_2eproto[29]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::RoomCompositeEgressRequest*
Arena::CreateMaybeMessage< ::livekit::RoomCompositeEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomCompositeEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::WebEgressRequest*
Arena::CreateMaybeMessage< ::livekit::WebEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::WebEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantEgressRequest*
Arena::CreateMaybeMessage< ::livekit::ParticipantEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackCompositeEgressRequest*
Arena::CreateMaybeMessage< ::livekit::TrackCompositeEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackCompositeEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackEgressRequest*
Arena::CreateMaybeMessage< ::livekit::TrackEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::EncodedFileOutput*
Arena::CreateMaybeMessage< ::livekit::EncodedFileOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::EncodedFileOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SegmentedFileOutput*
Arena::CreateMaybeMessage< ::livekit::SegmentedFileOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SegmentedFileOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DirectFileOutput*
Arena::CreateMaybeMessage< ::livekit::DirectFileOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DirectFileOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ImageOutput*
Arena::CreateMaybeMessage< ::livekit::ImageOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ImageOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::S3Upload_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::S3Upload_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::S3Upload_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::S3Upload*
Arena::CreateMaybeMessage< ::livekit::S3Upload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::S3Upload >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::GCPUpload*
Arena::CreateMaybeMessage< ::livekit::GCPUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::GCPUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AzureBlobUpload*
Arena::CreateMaybeMessage< ::livekit::AzureBlobUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AzureBlobUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AliOSSUpload*
Arena::CreateMaybeMessage< ::livekit::AliOSSUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AliOSSUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ProxyConfig*
Arena::CreateMaybeMessage< ::livekit::ProxyConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ProxyConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamOutput*
Arena::CreateMaybeMessage< ::livekit::StreamOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::EncodingOptions*
Arena::CreateMaybeMessage< ::livekit::EncodingOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::EncodingOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateLayoutRequest*
Arena::CreateMaybeMessage< ::livekit::UpdateLayoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateLayoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateStreamRequest*
Arena::CreateMaybeMessage< ::livekit::UpdateStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListEgressRequest*
Arena::CreateMaybeMessage< ::livekit::ListEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListEgressResponse*
Arena::CreateMaybeMessage< ::livekit::ListEgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListEgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StopEgressRequest*
Arena::CreateMaybeMessage< ::livekit::StopEgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StopEgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::EgressInfo*
Arena::CreateMaybeMessage< ::livekit::EgressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::EgressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamInfoList*
Arena::CreateMaybeMessage< ::livekit::StreamInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamInfo*
Arena::CreateMaybeMessage< ::livekit::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::FileInfo*
Arena::CreateMaybeMessage< ::livekit::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SegmentsInfo*
Arena::CreateMaybeMessage< ::livekit::SegmentsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SegmentsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ImagesInfo*
Arena::CreateMaybeMessage< ::livekit::ImagesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ImagesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AutoParticipantEgress*
Arena::CreateMaybeMessage< ::livekit::AutoParticipantEgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AutoParticipantEgress >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AutoTrackEgress*
Arena::CreateMaybeMessage< ::livekit::AutoTrackEgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AutoTrackEgress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
