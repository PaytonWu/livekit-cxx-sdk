// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ffi.proto

#include "ffi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
namespace proto {
PROTOBUF_CONSTEXPR FfiRequest::FfiRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FfiRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FfiRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FfiRequestDefaultTypeInternal() {}
  union {
    FfiRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FfiRequestDefaultTypeInternal _FfiRequest_default_instance_;
PROTOBUF_CONSTEXPR FfiResponse::FfiResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FfiResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FfiResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FfiResponseDefaultTypeInternal() {}
  union {
    FfiResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FfiResponseDefaultTypeInternal _FfiResponse_default_instance_;
PROTOBUF_CONSTEXPR FfiEvent::FfiEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FfiEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FfiEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FfiEventDefaultTypeInternal() {}
  union {
    FfiEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FfiEventDefaultTypeInternal _FfiEvent_default_instance_;
PROTOBUF_CONSTEXPR DisposeRequest::DisposeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_)*/false} {}
struct DisposeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisposeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisposeRequestDefaultTypeInternal() {}
  union {
    DisposeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisposeRequestDefaultTypeInternal _DisposeRequest_default_instance_;
PROTOBUF_CONSTEXPR DisposeResponse::DisposeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct DisposeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisposeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisposeResponseDefaultTypeInternal() {}
  union {
    DisposeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisposeResponseDefaultTypeInternal _DisposeResponse_default_instance_;
PROTOBUF_CONSTEXPR DisposeCallback::DisposeCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct DisposeCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisposeCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisposeCallbackDefaultTypeInternal() {}
  union {
    DisposeCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisposeCallbackDefaultTypeInternal _DisposeCallback_default_instance_;
PROTOBUF_CONSTEXPR LogRecord::LogRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.line_)*/0u} {}
struct LogRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRecordDefaultTypeInternal() {}
  union {
    LogRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRecordDefaultTypeInternal _LogRecord_default_instance_;
PROTOBUF_CONSTEXPR LogBatch::LogBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogBatchDefaultTypeInternal() {}
  union {
    LogBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogBatchDefaultTypeInternal _LogBatch_default_instance_;
PROTOBUF_CONSTEXPR Panic::Panic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PanicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PanicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PanicDefaultTypeInternal() {}
  union {
    Panic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PanicDefaultTypeInternal _Panic_default_instance_;
}  // namespace proto
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_ffi_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ffi_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ffi_2eproto = nullptr;

const uint32_t TableStruct_ffi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::FfiEvent, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeRequest, _impl_.async_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisposeCallback, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_.module_path_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_.file_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogRecord, _impl_.message_),
  4,
  0,
  1,
  2,
  5,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LogBatch, _impl_.records_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Panic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Panic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Panic, _impl_.message_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::proto::FfiRequest)},
  { 58, -1, -1, sizeof(::livekit::proto::FfiResponse)},
  { 115, -1, -1, sizeof(::livekit::proto::FfiEvent)},
  { 148, 155, -1, sizeof(::livekit::proto::DisposeRequest)},
  { 156, 163, -1, sizeof(::livekit::proto::DisposeResponse)},
  { 164, 171, -1, sizeof(::livekit::proto::DisposeCallback)},
  { 172, 184, -1, sizeof(::livekit::proto::LogRecord)},
  { 190, -1, -1, sizeof(::livekit::proto::LogBatch)},
  { 197, 204, -1, sizeof(::livekit::proto::Panic)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::proto::_FfiRequest_default_instance_._instance,
  &::livekit::proto::_FfiResponse_default_instance_._instance,
  &::livekit::proto::_FfiEvent_default_instance_._instance,
  &::livekit::proto::_DisposeRequest_default_instance_._instance,
  &::livekit::proto::_DisposeResponse_default_instance_._instance,
  &::livekit::proto::_DisposeCallback_default_instance_._instance,
  &::livekit::proto::_LogRecord_default_instance_._instance,
  &::livekit::proto::_LogBatch_default_instance_._instance,
  &::livekit::proto::_Panic_default_instance_._instance,
};

const char descriptor_table_protodef_ffi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tffi.proto\022\rlivekit.proto\032\ne2ee.proto\032\013"
  "track.proto\032\027track_publication.proto\032\nro"
  "om.proto\032\021video_frame.proto\032\021audio_frame"
  ".proto\032\trpc.proto\"\305\034\n\nFfiRequest\0220\n\007disp"
  "ose\030\002 \001(\0132\035.livekit.proto.DisposeRequest"
  "H\000\0220\n\007connect\030\003 \001(\0132\035.livekit.proto.Conn"
  "ectRequestH\000\0226\n\ndisconnect\030\004 \001(\0132 .livek"
  "it.proto.DisconnectRequestH\000\022;\n\rpublish_"
  "track\030\005 \001(\0132\".livekit.proto.PublishTrack"
  "RequestH\000\022\?\n\017unpublish_track\030\006 \001(\0132$.liv"
  "ekit.proto.UnpublishTrackRequestH\000\0229\n\014pu"
  "blish_data\030\007 \001(\0132!.livekit.proto.Publish"
  "DataRequestH\000\022=\n\016set_subscribed\030\010 \001(\0132#."
  "livekit.proto.SetSubscribedRequestH\000\022D\n\022"
  "set_local_metadata\030\t \001(\0132&.livekit.proto"
  ".SetLocalMetadataRequestH\000\022<\n\016set_local_"
  "name\030\n \001(\0132\".livekit.proto.SetLocalNameR"
  "equestH\000\022H\n\024set_local_attributes\030\013 \001(\0132("
  ".livekit.proto.SetLocalAttributesRequest"
  "H\000\022B\n\021get_session_stats\030\014 \001(\0132%.livekit."
  "proto.GetSessionStatsRequestH\000\022K\n\025publis"
  "h_transcription\030\r \001(\0132*.livekit.proto.Pu"
  "blishTranscriptionRequestH\000\022@\n\020publish_s"
  "ip_dtmf\030\016 \001(\0132$.livekit.proto.PublishSip"
  "DtmfRequestH\000\022D\n\022create_video_track\030\017 \001("
  "\0132&.livekit.proto.CreateVideoTrackReques"
  "tH\000\022D\n\022create_audio_track\030\020 \001(\0132&.liveki"
  "t.proto.CreateAudioTrackRequestH\000\022@\n\020loc"
  "al_track_mute\030\021 \001(\0132$.livekit.proto.Loca"
  "lTrackMuteRequestH\000\022F\n\023enable_remote_tra"
  "ck\030\022 \001(\0132\'.livekit.proto.EnableRemoteTra"
  "ckRequestH\000\0223\n\tget_stats\030\023 \001(\0132\036.livekit"
  ".proto.GetStatsRequestH\000\022c\n\"set_track_su"
  "bscription_permissions\0300 \001(\01325.livekit.p"
  "roto.SetTrackSubscriptionPermissionsRequ"
  "estH\000\022@\n\020new_video_stream\030\024 \001(\0132$.liveki"
  "t.proto.NewVideoStreamRequestH\000\022@\n\020new_v"
  "ideo_source\030\025 \001(\0132$.livekit.proto.NewVid"
  "eoSourceRequestH\000\022F\n\023capture_video_frame"
  "\030\026 \001(\0132\'.livekit.proto.CaptureVideoFrame"
  "RequestH\000\022;\n\rvideo_convert\030\027 \001(\0132\".livek"
  "it.proto.VideoConvertRequestH\000\022Y\n\035video_"
  "stream_from_participant\030\030 \001(\01320.livekit."
  "proto.VideoStreamFromParticipantRequestH"
  "\000\022@\n\020new_audio_stream\030\031 \001(\0132$.livekit.pr"
  "oto.NewAudioStreamRequestH\000\022@\n\020new_audio"
  "_source\030\032 \001(\0132$.livekit.proto.NewAudioSo"
  "urceRequestH\000\022F\n\023capture_audio_frame\030\033 \001"
  "(\0132\'.livekit.proto.CaptureAudioFrameRequ"
  "estH\000\022D\n\022clear_audio_buffer\030\034 \001(\0132&.live"
  "kit.proto.ClearAudioBufferRequestH\000\022F\n\023n"
  "ew_audio_resampler\030\035 \001(\0132\'.livekit.proto"
  ".NewAudioResamplerRequestH\000\022D\n\022remix_and"
  "_resample\030\036 \001(\0132&.livekit.proto.RemixAnd"
  "ResampleRequestH\000\022*\n\004e2ee\030\037 \001(\0132\032.liveki"
  "t.proto.E2eeRequestH\000\022Y\n\035audio_stream_fr"
  "om_participant\030  \001(\01320.livekit.proto.Aud"
  "ioStreamFromParticipantRequestH\000\022B\n\021new_"
  "sox_resampler\030! \001(\0132%.livekit.proto.NewS"
  "oxResamplerRequestH\000\022D\n\022push_sox_resampl"
  "er\030\" \001(\0132&.livekit.proto.PushSoxResample"
  "rRequestH\000\022F\n\023flush_sox_resampler\030# \001(\0132"
  "\'.livekit.proto.FlushSoxResamplerRequest"
  "H\000\022B\n\021send_chat_message\030$ \001(\0132%.livekit."
  "proto.SendChatMessageRequestH\000\022B\n\021edit_c"
  "hat_message\030% \001(\0132%.livekit.proto.EditCh"
  "atMessageRequestH\000\0227\n\013perform_rpc\030& \001(\0132"
  " .livekit.proto.PerformRpcRequestH\000\022F\n\023r"
  "egister_rpc_method\030\' \001(\0132\'.livekit.proto"
  ".RegisterRpcMethodRequestH\000\022J\n\025unregiste"
  "r_rpc_method\030( \001(\0132).livekit.proto.Unreg"
  "isterRpcMethodRequestH\000\022[\n\036rpc_method_in"
  "vocation_response\030) \001(\01321.livekit.proto."
  "RpcMethodInvocationResponseRequestH\000\022]\n\037"
  "enable_remote_track_publication\030* \001(\01322."
  "livekit.proto.EnableRemoteTrackPublicati"
  "onRequestH\000\022p\n)update_remote_track_publi"
  "cation_dimension\030+ \001(\0132;.livekit.proto.U"
  "pdateRemoteTrackPublicationDimensionRequ"
  "estH\000\022D\n\022send_stream_header\030, \001(\0132&.live"
  "kit.proto.SendStreamHeaderRequestH\000\022B\n\021s"
  "end_stream_chunk\030- \001(\0132%.livekit.proto.S"
  "endStreamChunkRequestH\000\022F\n\023send_stream_t"
  "railer\030. \001(\0132\'.livekit.proto.SendStreamT"
  "railerRequestH\000\022x\n.set_data_channel_buff"
  "ered_amount_low_threshold\030/ \001(\0132>.liveki"
  "t.proto.SetDataChannelBufferedAmountLowT"
  "hresholdRequestH\000\022O\n\030load_audio_filter_p"
  "lugin\0301 \001(\0132+.livekit.proto.LoadAudioFil"
  "terPluginRequestH\000\022/\n\007new_apm\0302 \001(\0132\034.li"
  "vekit.proto.NewApmRequestH\000\022D\n\022apm_proce"
  "ss_stream\0303 \001(\0132&.livekit.proto.ApmProce"
  "ssStreamRequestH\000\022S\n\032apm_process_reverse"
  "_stream\0304 \001(\0132-.livekit.proto.ApmProcess"
  "ReverseStreamRequestH\000B\t\n\007message\"\264\034\n\013Ff"
  "iResponse\0221\n\007dispose\030\002 \001(\0132\036.livekit.pro"
  "to.DisposeResponseH\000\0221\n\007connect\030\003 \001(\0132\036."
  "livekit.proto.ConnectResponseH\000\0227\n\ndisco"
  "nnect\030\004 \001(\0132!.livekit.proto.DisconnectRe"
  "sponseH\000\022<\n\rpublish_track\030\005 \001(\0132#.liveki"
  "t.proto.PublishTrackResponseH\000\022@\n\017unpubl"
  "ish_track\030\006 \001(\0132%.livekit.proto.Unpublis"
  "hTrackResponseH\000\022:\n\014publish_data\030\007 \001(\0132\""
  ".livekit.proto.PublishDataResponseH\000\022>\n\016"
  "set_subscribed\030\010 \001(\0132$.livekit.proto.Set"
  "SubscribedResponseH\000\022E\n\022set_local_metada"
  "ta\030\t \001(\0132\'.livekit.proto.SetLocalMetadat"
  "aResponseH\000\022=\n\016set_local_name\030\n \001(\0132#.li"
  "vekit.proto.SetLocalNameResponseH\000\022I\n\024se"
  "t_local_attributes\030\013 \001(\0132).livekit.proto"
  ".SetLocalAttributesResponseH\000\022C\n\021get_ses"
  "sion_stats\030\014 \001(\0132&.livekit.proto.GetSess"
  "ionStatsResponseH\000\022L\n\025publish_transcript"
  "ion\030\r \001(\0132+.livekit.proto.PublishTranscr"
  "iptionResponseH\000\022A\n\020publish_sip_dtmf\030\016 \001"
  "(\0132%.livekit.proto.PublishSipDtmfRespons"
  "eH\000\022E\n\022create_video_track\030\017 \001(\0132\'.liveki"
  "t.proto.CreateVideoTrackResponseH\000\022E\n\022cr"
  "eate_audio_track\030\020 \001(\0132\'.livekit.proto.C"
  "reateAudioTrackResponseH\000\022A\n\020local_track"
  "_mute\030\021 \001(\0132%.livekit.proto.LocalTrackMu"
  "teResponseH\000\022G\n\023enable_remote_track\030\022 \001("
  "\0132(.livekit.proto.EnableRemoteTrackRespo"
  "nseH\000\0224\n\tget_stats\030\023 \001(\0132\037.livekit.proto"
  ".GetStatsResponseH\000\022d\n\"set_track_subscri"
  "ption_permissions\030/ \001(\01326.livekit.proto."
  "SetTrackSubscriptionPermissionsResponseH"
  "\000\022A\n\020new_video_stream\030\024 \001(\0132%.livekit.pr"
  "oto.NewVideoStreamResponseH\000\022A\n\020new_vide"
  "o_source\030\025 \001(\0132%.livekit.proto.NewVideoS"
  "ourceResponseH\000\022G\n\023capture_video_frame\030\026"
  " \001(\0132(.livekit.proto.CaptureVideoFrameRe"
  "sponseH\000\022<\n\rvideo_convert\030\027 \001(\0132#.liveki"
  "t.proto.VideoConvertResponseH\000\022Z\n\035video_"
  "stream_from_participant\030\030 \001(\01321.livekit."
  "proto.VideoStreamFromParticipantResponse"
  "H\000\022A\n\020new_audio_stream\030\031 \001(\0132%.livekit.p"
  "roto.NewAudioStreamResponseH\000\022A\n\020new_aud"
  "io_source\030\032 \001(\0132%.livekit.proto.NewAudio"
  "SourceResponseH\000\022G\n\023capture_audio_frame\030"
  "\033 \001(\0132(.livekit.proto.CaptureAudioFrameR"
  "esponseH\000\022E\n\022clear_audio_buffer\030\034 \001(\0132\'."
  "livekit.proto.ClearAudioBufferResponseH\000"
  "\022G\n\023new_audio_resampler\030\035 \001(\0132(.livekit."
  "proto.NewAudioResamplerResponseH\000\022E\n\022rem"
  "ix_and_resample\030\036 \001(\0132\'.livekit.proto.Re"
  "mixAndResampleResponseH\000\022Z\n\035audio_stream"
  "_from_participant\030\037 \001(\01321.livekit.proto."
  "AudioStreamFromParticipantResponseH\000\022+\n\004"
  "e2ee\030  \001(\0132\033.livekit.proto.E2eeResponseH"
  "\000\022C\n\021new_sox_resampler\030! \001(\0132&.livekit.p"
  "roto.NewSoxResamplerResponseH\000\022E\n\022push_s"
  "ox_resampler\030\" \001(\0132\'.livekit.proto.PushS"
  "oxResamplerResponseH\000\022G\n\023flush_sox_resam"
  "pler\030# \001(\0132(.livekit.proto.FlushSoxResam"
  "plerResponseH\000\022C\n\021send_chat_message\030$ \001("
  "\0132&.livekit.proto.SendChatMessageRespons"
  "eH\000\0228\n\013perform_rpc\030% \001(\0132!.livekit.proto"
  ".PerformRpcResponseH\000\022G\n\023register_rpc_me"
  "thod\030& \001(\0132(.livekit.proto.RegisterRpcMe"
  "thodResponseH\000\022K\n\025unregister_rpc_method\030"
  "\' \001(\0132*.livekit.proto.UnregisterRpcMetho"
  "dResponseH\000\022\\\n\036rpc_method_invocation_res"
  "ponse\030( \001(\01322.livekit.proto.RpcMethodInv"
  "ocationResponseResponseH\000\022^\n\037enable_remo"
  "te_track_publication\030) \001(\01323.livekit.pro"
  "to.EnableRemoteTrackPublicationResponseH"
  "\000\022q\n)update_remote_track_publication_dim"
  "ension\030* \001(\0132<.livekit.proto.UpdateRemot"
  "eTrackPublicationDimensionResponseH\000\022E\n\022"
  "send_stream_header\030+ \001(\0132\'.livekit.proto"
  ".SendStreamHeaderResponseH\000\022C\n\021send_stre"
  "am_chunk\030, \001(\0132&.livekit.proto.SendStrea"
  "mChunkResponseH\000\022G\n\023send_stream_trailer\030"
  "- \001(\0132(.livekit.proto.SendStreamTrailerR"
  "esponseH\000\022y\n.set_data_channel_buffered_a"
  "mount_low_threshold\030. \001(\0132\?.livekit.prot"
  "o.SetDataChannelBufferedAmountLowThresho"
  "ldResponseH\000\022P\n\030load_audio_filter_plugin"
  "\0300 \001(\0132,.livekit.proto.LoadAudioFilterPl"
  "uginResponseH\000\0220\n\007new_apm\0301 \001(\0132\035.liveki"
  "t.proto.NewApmResponseH\000\022E\n\022apm_process_"
  "stream\0302 \001(\0132\'.livekit.proto.ApmProcessS"
  "treamResponseH\000\022T\n\032apm_process_reverse_s"
  "tream\0303 \001(\0132..livekit.proto.ApmProcessRe"
  "verseStreamResponseH\000B\t\n\007message\"\337\014\n\010Ffi"
  "Event\022.\n\nroom_event\030\001 \001(\0132\030.livekit.prot"
  "o.RoomEventH\000\0220\n\013track_event\030\002 \001(\0132\031.liv"
  "ekit.proto.TrackEventH\000\022=\n\022video_stream_"
  "event\030\003 \001(\0132\037.livekit.proto.VideoStreamE"
  "ventH\000\022=\n\022audio_stream_event\030\004 \001(\0132\037.liv"
  "ekit.proto.AudioStreamEventH\000\0221\n\007connect"
  "\030\005 \001(\0132\036.livekit.proto.ConnectCallbackH\000"
  "\0227\n\ndisconnect\030\007 \001(\0132!.livekit.proto.Dis"
  "connectCallbackH\000\0221\n\007dispose\030\010 \001(\0132\036.liv"
  "ekit.proto.DisposeCallbackH\000\022<\n\rpublish_"
  "track\030\t \001(\0132#.livekit.proto.PublishTrack"
  "CallbackH\000\022@\n\017unpublish_track\030\n \001(\0132%.li"
  "vekit.proto.UnpublishTrackCallbackH\000\022:\n\014"
  "publish_data\030\013 \001(\0132\".livekit.proto.Publi"
  "shDataCallbackH\000\022L\n\025publish_transcriptio"
  "n\030\014 \001(\0132+.livekit.proto.PublishTranscrip"
  "tionCallbackH\000\022G\n\023capture_audio_frame\030\r "
  "\001(\0132(.livekit.proto.CaptureAudioFrameCal"
  "lbackH\000\022E\n\022set_local_metadata\030\016 \001(\0132\'.li"
  "vekit.proto.SetLocalMetadataCallbackH\000\022="
  "\n\016set_local_name\030\017 \001(\0132#.livekit.proto.S"
  "etLocalNameCallbackH\000\022I\n\024set_local_attri"
  "butes\030\020 \001(\0132).livekit.proto.SetLocalAttr"
  "ibutesCallbackH\000\0224\n\tget_stats\030\021 \001(\0132\037.li"
  "vekit.proto.GetStatsCallbackH\000\022\'\n\004logs\030\022"
  " \001(\0132\027.livekit.proto.LogBatchH\000\022C\n\021get_s"
  "ession_stats\030\023 \001(\0132&.livekit.proto.GetSe"
  "ssionStatsCallbackH\000\022%\n\005panic\030\024 \001(\0132\024.li"
  "vekit.proto.PanicH\000\022A\n\020publish_sip_dtmf\030"
  "\025 \001(\0132%.livekit.proto.PublishSipDtmfCall"
  "backH\000\022>\n\014chat_message\030\026 \001(\0132&.livekit.p"
  "roto.SendChatMessageCallbackH\000\0228\n\013perfor"
  "m_rpc\030\027 \001(\0132!.livekit.proto.PerformRpcCa"
  "llbackH\000\022H\n\025rpc_method_invocation\030\030 \001(\0132"
  "\'.livekit.proto.RpcMethodInvocationEvent"
  "H\000\022E\n\022send_stream_header\030\031 \001(\0132\'.livekit"
  ".proto.SendStreamHeaderCallbackH\000\022C\n\021sen"
  "d_stream_chunk\030\032 \001(\0132&.livekit.proto.Sen"
  "dStreamChunkCallbackH\000\022G\n\023send_stream_tr"
  "ailer\030\033 \001(\0132(.livekit.proto.SendStreamTr"
  "ailerCallbackH\000B\t\n\007message\"\037\n\016DisposeReq"
  "uest\022\r\n\005async\030\001 \002(\010\"#\n\017DisposeResponse\022\020"
  "\n\010async_id\030\001 \001(\004\"#\n\017DisposeCallback\022\020\n\010a"
  "sync_id\030\001 \002(\004\"\205\001\n\tLogRecord\022&\n\005level\030\001 \002"
  "(\0162\027.livekit.proto.LogLevel\022\016\n\006target\030\002 "
  "\002(\t\022\023\n\013module_path\030\003 \001(\t\022\014\n\004file\030\004 \001(\t\022\014"
  "\n\004line\030\005 \001(\r\022\017\n\007message\030\006 \002(\t\"5\n\010LogBatc"
  "h\022)\n\007records\030\001 \003(\0132\030.livekit.proto.LogRe"
  "cord\"\030\n\005Panic\022\017\n\007message\030\001 \002(\t*S\n\010LogLev"
  "el\022\r\n\tLOG_ERROR\020\000\022\014\n\010LOG_WARN\020\001\022\014\n\010LOG_I"
  "NFO\020\002\022\r\n\tLOG_DEBUG\020\003\022\r\n\tLOG_TRACE\020\004B\020\252\002\r"
  "LiveKit.Proto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ffi_2eproto_deps[7] = {
  &::descriptor_table_audio_5fframe_2eproto,
  &::descriptor_table_e2ee_2eproto,
  &::descriptor_table_room_2eproto,
  &::descriptor_table_rpc_2eproto,
  &::descriptor_table_track_2eproto,
  &::descriptor_table_track_5fpublication_2eproto,
  &::descriptor_table_video_5fframe_2eproto,
};
static ::_pbi::once_flag descriptor_table_ffi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ffi_2eproto = {
    false, false, 9493, descriptor_table_protodef_ffi_2eproto,
    "ffi.proto",
    &descriptor_table_ffi_2eproto_once, descriptor_table_ffi_2eproto_deps, 7, 9,
    schemas, file_default_instances, TableStruct_ffi_2eproto::offsets,
    file_level_metadata_ffi_2eproto, file_level_enum_descriptors_ffi_2eproto,
    file_level_service_descriptors_ffi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ffi_2eproto_getter() {
  return &descriptor_table_ffi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ffi_2eproto(&descriptor_table_ffi_2eproto);
namespace livekit {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ffi_2eproto);
  return file_level_enum_descriptors_ffi_2eproto[0];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FfiRequest::_Internal {
 public:
  static const ::livekit::proto::DisposeRequest& dispose(const FfiRequest* msg);
  static const ::livekit::proto::ConnectRequest& connect(const FfiRequest* msg);
  static const ::livekit::proto::DisconnectRequest& disconnect(const FfiRequest* msg);
  static const ::livekit::proto::PublishTrackRequest& publish_track(const FfiRequest* msg);
  static const ::livekit::proto::UnpublishTrackRequest& unpublish_track(const FfiRequest* msg);
  static const ::livekit::proto::PublishDataRequest& publish_data(const FfiRequest* msg);
  static const ::livekit::proto::SetSubscribedRequest& set_subscribed(const FfiRequest* msg);
  static const ::livekit::proto::SetLocalMetadataRequest& set_local_metadata(const FfiRequest* msg);
  static const ::livekit::proto::SetLocalNameRequest& set_local_name(const FfiRequest* msg);
  static const ::livekit::proto::SetLocalAttributesRequest& set_local_attributes(const FfiRequest* msg);
  static const ::livekit::proto::GetSessionStatsRequest& get_session_stats(const FfiRequest* msg);
  static const ::livekit::proto::PublishTranscriptionRequest& publish_transcription(const FfiRequest* msg);
  static const ::livekit::proto::PublishSipDtmfRequest& publish_sip_dtmf(const FfiRequest* msg);
  static const ::livekit::proto::CreateVideoTrackRequest& create_video_track(const FfiRequest* msg);
  static const ::livekit::proto::CreateAudioTrackRequest& create_audio_track(const FfiRequest* msg);
  static const ::livekit::proto::LocalTrackMuteRequest& local_track_mute(const FfiRequest* msg);
  static const ::livekit::proto::EnableRemoteTrackRequest& enable_remote_track(const FfiRequest* msg);
  static const ::livekit::proto::GetStatsRequest& get_stats(const FfiRequest* msg);
  static const ::livekit::proto::SetTrackSubscriptionPermissionsRequest& set_track_subscription_permissions(const FfiRequest* msg);
  static const ::livekit::proto::NewVideoStreamRequest& new_video_stream(const FfiRequest* msg);
  static const ::livekit::proto::NewVideoSourceRequest& new_video_source(const FfiRequest* msg);
  static const ::livekit::proto::CaptureVideoFrameRequest& capture_video_frame(const FfiRequest* msg);
  static const ::livekit::proto::VideoConvertRequest& video_convert(const FfiRequest* msg);
  static const ::livekit::proto::VideoStreamFromParticipantRequest& video_stream_from_participant(const FfiRequest* msg);
  static const ::livekit::proto::NewAudioStreamRequest& new_audio_stream(const FfiRequest* msg);
  static const ::livekit::proto::NewAudioSourceRequest& new_audio_source(const FfiRequest* msg);
  static const ::livekit::proto::CaptureAudioFrameRequest& capture_audio_frame(const FfiRequest* msg);
  static const ::livekit::proto::ClearAudioBufferRequest& clear_audio_buffer(const FfiRequest* msg);
  static const ::livekit::proto::NewAudioResamplerRequest& new_audio_resampler(const FfiRequest* msg);
  static const ::livekit::proto::RemixAndResampleRequest& remix_and_resample(const FfiRequest* msg);
  static const ::livekit::proto::E2eeRequest& e2ee(const FfiRequest* msg);
  static const ::livekit::proto::AudioStreamFromParticipantRequest& audio_stream_from_participant(const FfiRequest* msg);
  static const ::livekit::proto::NewSoxResamplerRequest& new_sox_resampler(const FfiRequest* msg);
  static const ::livekit::proto::PushSoxResamplerRequest& push_sox_resampler(const FfiRequest* msg);
  static const ::livekit::proto::FlushSoxResamplerRequest& flush_sox_resampler(const FfiRequest* msg);
  static const ::livekit::proto::SendChatMessageRequest& send_chat_message(const FfiRequest* msg);
  static const ::livekit::proto::EditChatMessageRequest& edit_chat_message(const FfiRequest* msg);
  static const ::livekit::proto::PerformRpcRequest& perform_rpc(const FfiRequest* msg);
  static const ::livekit::proto::RegisterRpcMethodRequest& register_rpc_method(const FfiRequest* msg);
  static const ::livekit::proto::UnregisterRpcMethodRequest& unregister_rpc_method(const FfiRequest* msg);
  static const ::livekit::proto::RpcMethodInvocationResponseRequest& rpc_method_invocation_response(const FfiRequest* msg);
  static const ::livekit::proto::EnableRemoteTrackPublicationRequest& enable_remote_track_publication(const FfiRequest* msg);
  static const ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest& update_remote_track_publication_dimension(const FfiRequest* msg);
  static const ::livekit::proto::SendStreamHeaderRequest& send_stream_header(const FfiRequest* msg);
  static const ::livekit::proto::SendStreamChunkRequest& send_stream_chunk(const FfiRequest* msg);
  static const ::livekit::proto::SendStreamTrailerRequest& send_stream_trailer(const FfiRequest* msg);
  static const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest& set_data_channel_buffered_amount_low_threshold(const FfiRequest* msg);
  static const ::livekit::proto::LoadAudioFilterPluginRequest& load_audio_filter_plugin(const FfiRequest* msg);
  static const ::livekit::proto::NewApmRequest& new_apm(const FfiRequest* msg);
  static const ::livekit::proto::ApmProcessStreamRequest& apm_process_stream(const FfiRequest* msg);
  static const ::livekit::proto::ApmProcessReverseStreamRequest& apm_process_reverse_stream(const FfiRequest* msg);
};

const ::livekit::proto::DisposeRequest&
FfiRequest::_Internal::dispose(const FfiRequest* msg) {
  return *msg->_impl_.message_.dispose_;
}
const ::livekit::proto::ConnectRequest&
FfiRequest::_Internal::connect(const FfiRequest* msg) {
  return *msg->_impl_.message_.connect_;
}
const ::livekit::proto::DisconnectRequest&
FfiRequest::_Internal::disconnect(const FfiRequest* msg) {
  return *msg->_impl_.message_.disconnect_;
}
const ::livekit::proto::PublishTrackRequest&
FfiRequest::_Internal::publish_track(const FfiRequest* msg) {
  return *msg->_impl_.message_.publish_track_;
}
const ::livekit::proto::UnpublishTrackRequest&
FfiRequest::_Internal::unpublish_track(const FfiRequest* msg) {
  return *msg->_impl_.message_.unpublish_track_;
}
const ::livekit::proto::PublishDataRequest&
FfiRequest::_Internal::publish_data(const FfiRequest* msg) {
  return *msg->_impl_.message_.publish_data_;
}
const ::livekit::proto::SetSubscribedRequest&
FfiRequest::_Internal::set_subscribed(const FfiRequest* msg) {
  return *msg->_impl_.message_.set_subscribed_;
}
const ::livekit::proto::SetLocalMetadataRequest&
FfiRequest::_Internal::set_local_metadata(const FfiRequest* msg) {
  return *msg->_impl_.message_.set_local_metadata_;
}
const ::livekit::proto::SetLocalNameRequest&
FfiRequest::_Internal::set_local_name(const FfiRequest* msg) {
  return *msg->_impl_.message_.set_local_name_;
}
const ::livekit::proto::SetLocalAttributesRequest&
FfiRequest::_Internal::set_local_attributes(const FfiRequest* msg) {
  return *msg->_impl_.message_.set_local_attributes_;
}
const ::livekit::proto::GetSessionStatsRequest&
FfiRequest::_Internal::get_session_stats(const FfiRequest* msg) {
  return *msg->_impl_.message_.get_session_stats_;
}
const ::livekit::proto::PublishTranscriptionRequest&
FfiRequest::_Internal::publish_transcription(const FfiRequest* msg) {
  return *msg->_impl_.message_.publish_transcription_;
}
const ::livekit::proto::PublishSipDtmfRequest&
FfiRequest::_Internal::publish_sip_dtmf(const FfiRequest* msg) {
  return *msg->_impl_.message_.publish_sip_dtmf_;
}
const ::livekit::proto::CreateVideoTrackRequest&
FfiRequest::_Internal::create_video_track(const FfiRequest* msg) {
  return *msg->_impl_.message_.create_video_track_;
}
const ::livekit::proto::CreateAudioTrackRequest&
FfiRequest::_Internal::create_audio_track(const FfiRequest* msg) {
  return *msg->_impl_.message_.create_audio_track_;
}
const ::livekit::proto::LocalTrackMuteRequest&
FfiRequest::_Internal::local_track_mute(const FfiRequest* msg) {
  return *msg->_impl_.message_.local_track_mute_;
}
const ::livekit::proto::EnableRemoteTrackRequest&
FfiRequest::_Internal::enable_remote_track(const FfiRequest* msg) {
  return *msg->_impl_.message_.enable_remote_track_;
}
const ::livekit::proto::GetStatsRequest&
FfiRequest::_Internal::get_stats(const FfiRequest* msg) {
  return *msg->_impl_.message_.get_stats_;
}
const ::livekit::proto::SetTrackSubscriptionPermissionsRequest&
FfiRequest::_Internal::set_track_subscription_permissions(const FfiRequest* msg) {
  return *msg->_impl_.message_.set_track_subscription_permissions_;
}
const ::livekit::proto::NewVideoStreamRequest&
FfiRequest::_Internal::new_video_stream(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_video_stream_;
}
const ::livekit::proto::NewVideoSourceRequest&
FfiRequest::_Internal::new_video_source(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_video_source_;
}
const ::livekit::proto::CaptureVideoFrameRequest&
FfiRequest::_Internal::capture_video_frame(const FfiRequest* msg) {
  return *msg->_impl_.message_.capture_video_frame_;
}
const ::livekit::proto::VideoConvertRequest&
FfiRequest::_Internal::video_convert(const FfiRequest* msg) {
  return *msg->_impl_.message_.video_convert_;
}
const ::livekit::proto::VideoStreamFromParticipantRequest&
FfiRequest::_Internal::video_stream_from_participant(const FfiRequest* msg) {
  return *msg->_impl_.message_.video_stream_from_participant_;
}
const ::livekit::proto::NewAudioStreamRequest&
FfiRequest::_Internal::new_audio_stream(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_audio_stream_;
}
const ::livekit::proto::NewAudioSourceRequest&
FfiRequest::_Internal::new_audio_source(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_audio_source_;
}
const ::livekit::proto::CaptureAudioFrameRequest&
FfiRequest::_Internal::capture_audio_frame(const FfiRequest* msg) {
  return *msg->_impl_.message_.capture_audio_frame_;
}
const ::livekit::proto::ClearAudioBufferRequest&
FfiRequest::_Internal::clear_audio_buffer(const FfiRequest* msg) {
  return *msg->_impl_.message_.clear_audio_buffer_;
}
const ::livekit::proto::NewAudioResamplerRequest&
FfiRequest::_Internal::new_audio_resampler(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_audio_resampler_;
}
const ::livekit::proto::RemixAndResampleRequest&
FfiRequest::_Internal::remix_and_resample(const FfiRequest* msg) {
  return *msg->_impl_.message_.remix_and_resample_;
}
const ::livekit::proto::E2eeRequest&
FfiRequest::_Internal::e2ee(const FfiRequest* msg) {
  return *msg->_impl_.message_.e2ee_;
}
const ::livekit::proto::AudioStreamFromParticipantRequest&
FfiRequest::_Internal::audio_stream_from_participant(const FfiRequest* msg) {
  return *msg->_impl_.message_.audio_stream_from_participant_;
}
const ::livekit::proto::NewSoxResamplerRequest&
FfiRequest::_Internal::new_sox_resampler(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_sox_resampler_;
}
const ::livekit::proto::PushSoxResamplerRequest&
FfiRequest::_Internal::push_sox_resampler(const FfiRequest* msg) {
  return *msg->_impl_.message_.push_sox_resampler_;
}
const ::livekit::proto::FlushSoxResamplerRequest&
FfiRequest::_Internal::flush_sox_resampler(const FfiRequest* msg) {
  return *msg->_impl_.message_.flush_sox_resampler_;
}
const ::livekit::proto::SendChatMessageRequest&
FfiRequest::_Internal::send_chat_message(const FfiRequest* msg) {
  return *msg->_impl_.message_.send_chat_message_;
}
const ::livekit::proto::EditChatMessageRequest&
FfiRequest::_Internal::edit_chat_message(const FfiRequest* msg) {
  return *msg->_impl_.message_.edit_chat_message_;
}
const ::livekit::proto::PerformRpcRequest&
FfiRequest::_Internal::perform_rpc(const FfiRequest* msg) {
  return *msg->_impl_.message_.perform_rpc_;
}
const ::livekit::proto::RegisterRpcMethodRequest&
FfiRequest::_Internal::register_rpc_method(const FfiRequest* msg) {
  return *msg->_impl_.message_.register_rpc_method_;
}
const ::livekit::proto::UnregisterRpcMethodRequest&
FfiRequest::_Internal::unregister_rpc_method(const FfiRequest* msg) {
  return *msg->_impl_.message_.unregister_rpc_method_;
}
const ::livekit::proto::RpcMethodInvocationResponseRequest&
FfiRequest::_Internal::rpc_method_invocation_response(const FfiRequest* msg) {
  return *msg->_impl_.message_.rpc_method_invocation_response_;
}
const ::livekit::proto::EnableRemoteTrackPublicationRequest&
FfiRequest::_Internal::enable_remote_track_publication(const FfiRequest* msg) {
  return *msg->_impl_.message_.enable_remote_track_publication_;
}
const ::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest&
FfiRequest::_Internal::update_remote_track_publication_dimension(const FfiRequest* msg) {
  return *msg->_impl_.message_.update_remote_track_publication_dimension_;
}
const ::livekit::proto::SendStreamHeaderRequest&
FfiRequest::_Internal::send_stream_header(const FfiRequest* msg) {
  return *msg->_impl_.message_.send_stream_header_;
}
const ::livekit::proto::SendStreamChunkRequest&
FfiRequest::_Internal::send_stream_chunk(const FfiRequest* msg) {
  return *msg->_impl_.message_.send_stream_chunk_;
}
const ::livekit::proto::SendStreamTrailerRequest&
FfiRequest::_Internal::send_stream_trailer(const FfiRequest* msg) {
  return *msg->_impl_.message_.send_stream_trailer_;
}
const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest&
FfiRequest::_Internal::set_data_channel_buffered_amount_low_threshold(const FfiRequest* msg) {
  return *msg->_impl_.message_.set_data_channel_buffered_amount_low_threshold_;
}
const ::livekit::proto::LoadAudioFilterPluginRequest&
FfiRequest::_Internal::load_audio_filter_plugin(const FfiRequest* msg) {
  return *msg->_impl_.message_.load_audio_filter_plugin_;
}
const ::livekit::proto::NewApmRequest&
FfiRequest::_Internal::new_apm(const FfiRequest* msg) {
  return *msg->_impl_.message_.new_apm_;
}
const ::livekit::proto::ApmProcessStreamRequest&
FfiRequest::_Internal::apm_process_stream(const FfiRequest* msg) {
  return *msg->_impl_.message_.apm_process_stream_;
}
const ::livekit::proto::ApmProcessReverseStreamRequest&
FfiRequest::_Internal::apm_process_reverse_stream(const FfiRequest* msg) {
  return *msg->_impl_.message_.apm_process_reverse_stream_;
}
void FfiRequest::set_allocated_dispose(::livekit::proto::DisposeRequest* dispose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (dispose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dispose);
    if (message_arena != submessage_arena) {
      dispose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispose, submessage_arena);
    }
    set_has_dispose();
    _impl_.message_.dispose_ = dispose;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.dispose)
}
void FfiRequest::set_allocated_connect(::livekit::proto::ConnectRequest* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connect));
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.connect)
}
void FfiRequest::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.connect_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_disconnect(::livekit::proto::DisconnectRequest* disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disconnect));
    if (message_arena != submessage_arena) {
      disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    _impl_.message_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.disconnect)
}
void FfiRequest::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.disconnect_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_publish_track(::livekit::proto::PublishTrackRequest* publish_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_track));
    if (message_arena != submessage_arena) {
      publish_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_track, submessage_arena);
    }
    set_has_publish_track();
    _impl_.message_.publish_track_ = publish_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.publish_track)
}
void FfiRequest::clear_publish_track() {
  if (_internal_has_publish_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_track_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_unpublish_track(::livekit::proto::UnpublishTrackRequest* unpublish_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (unpublish_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unpublish_track));
    if (message_arena != submessage_arena) {
      unpublish_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unpublish_track, submessage_arena);
    }
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = unpublish_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.unpublish_track)
}
void FfiRequest::clear_unpublish_track() {
  if (_internal_has_unpublish_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.unpublish_track_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_publish_data(::livekit::proto::PublishDataRequest* publish_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_data));
    if (message_arena != submessage_arena) {
      publish_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_data, submessage_arena);
    }
    set_has_publish_data();
    _impl_.message_.publish_data_ = publish_data;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.publish_data)
}
void FfiRequest::clear_publish_data() {
  if (_internal_has_publish_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_data_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_set_subscribed(::livekit::proto::SetSubscribedRequest* set_subscribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_subscribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_subscribed));
    if (message_arena != submessage_arena) {
      set_subscribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_subscribed, submessage_arena);
    }
    set_has_set_subscribed();
    _impl_.message_.set_subscribed_ = set_subscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.set_subscribed)
}
void FfiRequest::clear_set_subscribed() {
  if (_internal_has_set_subscribed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_subscribed_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataRequest* set_local_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_metadata));
    if (message_arena != submessage_arena) {
      set_local_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_metadata, submessage_arena);
    }
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = set_local_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.set_local_metadata)
}
void FfiRequest::clear_set_local_metadata() {
  if (_internal_has_set_local_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_metadata_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_set_local_name(::livekit::proto::SetLocalNameRequest* set_local_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_name));
    if (message_arena != submessage_arena) {
      set_local_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_name, submessage_arena);
    }
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = set_local_name;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.set_local_name)
}
void FfiRequest::clear_set_local_name() {
  if (_internal_has_set_local_name()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_name_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesRequest* set_local_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_attributes));
    if (message_arena != submessage_arena) {
      set_local_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_attributes, submessage_arena);
    }
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = set_local_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.set_local_attributes)
}
void FfiRequest::clear_set_local_attributes() {
  if (_internal_has_set_local_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_attributes_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_get_session_stats(::livekit::proto::GetSessionStatsRequest* get_session_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (get_session_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_session_stats));
    if (message_arena != submessage_arena) {
      get_session_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_session_stats, submessage_arena);
    }
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = get_session_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.get_session_stats)
}
void FfiRequest::clear_get_session_stats() {
  if (_internal_has_get_session_stats()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.get_session_stats_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionRequest* publish_transcription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_transcription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_transcription));
    if (message_arena != submessage_arena) {
      publish_transcription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_transcription, submessage_arena);
    }
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = publish_transcription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.publish_transcription)
}
void FfiRequest::clear_publish_transcription() {
  if (_internal_has_publish_transcription()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_transcription_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfRequest* publish_sip_dtmf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_sip_dtmf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_sip_dtmf));
    if (message_arena != submessage_arena) {
      publish_sip_dtmf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_sip_dtmf, submessage_arena);
    }
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = publish_sip_dtmf;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.publish_sip_dtmf)
}
void FfiRequest::clear_publish_sip_dtmf() {
  if (_internal_has_publish_sip_dtmf()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_sip_dtmf_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_create_video_track(::livekit::proto::CreateVideoTrackRequest* create_video_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (create_video_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_video_track));
    if (message_arena != submessage_arena) {
      create_video_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_video_track, submessage_arena);
    }
    set_has_create_video_track();
    _impl_.message_.create_video_track_ = create_video_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.create_video_track)
}
void FfiRequest::clear_create_video_track() {
  if (_internal_has_create_video_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.create_video_track_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_create_audio_track(::livekit::proto::CreateAudioTrackRequest* create_audio_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (create_audio_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_audio_track));
    if (message_arena != submessage_arena) {
      create_audio_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_audio_track, submessage_arena);
    }
    set_has_create_audio_track();
    _impl_.message_.create_audio_track_ = create_audio_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.create_audio_track)
}
void FfiRequest::clear_create_audio_track() {
  if (_internal_has_create_audio_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.create_audio_track_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_local_track_mute(::livekit::proto::LocalTrackMuteRequest* local_track_mute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (local_track_mute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_track_mute));
    if (message_arena != submessage_arena) {
      local_track_mute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_track_mute, submessage_arena);
    }
    set_has_local_track_mute();
    _impl_.message_.local_track_mute_ = local_track_mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.local_track_mute)
}
void FfiRequest::clear_local_track_mute() {
  if (_internal_has_local_track_mute()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.local_track_mute_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_enable_remote_track(::livekit::proto::EnableRemoteTrackRequest* enable_remote_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (enable_remote_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_remote_track));
    if (message_arena != submessage_arena) {
      enable_remote_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_remote_track, submessage_arena);
    }
    set_has_enable_remote_track();
    _impl_.message_.enable_remote_track_ = enable_remote_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.enable_remote_track)
}
void FfiRequest::clear_enable_remote_track() {
  if (_internal_has_enable_remote_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.enable_remote_track_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_get_stats(::livekit::proto::GetStatsRequest* get_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (get_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_stats));
    if (message_arena != submessage_arena) {
      get_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_stats, submessage_arena);
    }
    set_has_get_stats();
    _impl_.message_.get_stats_ = get_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.get_stats)
}
void FfiRequest::clear_get_stats() {
  if (_internal_has_get_stats()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.get_stats_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_set_track_subscription_permissions(::livekit::proto::SetTrackSubscriptionPermissionsRequest* set_track_subscription_permissions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_track_subscription_permissions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_track_subscription_permissions));
    if (message_arena != submessage_arena) {
      set_track_subscription_permissions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_track_subscription_permissions, submessage_arena);
    }
    set_has_set_track_subscription_permissions();
    _impl_.message_.set_track_subscription_permissions_ = set_track_subscription_permissions;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.set_track_subscription_permissions)
}
void FfiRequest::clear_set_track_subscription_permissions() {
  if (_internal_has_set_track_subscription_permissions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_track_subscription_permissions_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_video_stream(::livekit::proto::NewVideoStreamRequest* new_video_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_video_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_video_stream));
    if (message_arena != submessage_arena) {
      new_video_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_video_stream, submessage_arena);
    }
    set_has_new_video_stream();
    _impl_.message_.new_video_stream_ = new_video_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_video_stream)
}
void FfiRequest::clear_new_video_stream() {
  if (_internal_has_new_video_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_video_stream_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_video_source(::livekit::proto::NewVideoSourceRequest* new_video_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_video_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_video_source));
    if (message_arena != submessage_arena) {
      new_video_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_video_source, submessage_arena);
    }
    set_has_new_video_source();
    _impl_.message_.new_video_source_ = new_video_source;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_video_source)
}
void FfiRequest::clear_new_video_source() {
  if (_internal_has_new_video_source()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_video_source_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_capture_video_frame(::livekit::proto::CaptureVideoFrameRequest* capture_video_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (capture_video_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_video_frame));
    if (message_arena != submessage_arena) {
      capture_video_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_video_frame, submessage_arena);
    }
    set_has_capture_video_frame();
    _impl_.message_.capture_video_frame_ = capture_video_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.capture_video_frame)
}
void FfiRequest::clear_capture_video_frame() {
  if (_internal_has_capture_video_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.capture_video_frame_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_video_convert(::livekit::proto::VideoConvertRequest* video_convert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (video_convert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_convert));
    if (message_arena != submessage_arena) {
      video_convert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_convert, submessage_arena);
    }
    set_has_video_convert();
    _impl_.message_.video_convert_ = video_convert;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.video_convert)
}
void FfiRequest::clear_video_convert() {
  if (_internal_has_video_convert()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.video_convert_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_video_stream_from_participant(::livekit::proto::VideoStreamFromParticipantRequest* video_stream_from_participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (video_stream_from_participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_stream_from_participant));
    if (message_arena != submessage_arena) {
      video_stream_from_participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_from_participant, submessage_arena);
    }
    set_has_video_stream_from_participant();
    _impl_.message_.video_stream_from_participant_ = video_stream_from_participant;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.video_stream_from_participant)
}
void FfiRequest::clear_video_stream_from_participant() {
  if (_internal_has_video_stream_from_participant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.video_stream_from_participant_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_audio_stream(::livekit::proto::NewAudioStreamRequest* new_audio_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_audio_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_audio_stream));
    if (message_arena != submessage_arena) {
      new_audio_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_audio_stream, submessage_arena);
    }
    set_has_new_audio_stream();
    _impl_.message_.new_audio_stream_ = new_audio_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_audio_stream)
}
void FfiRequest::clear_new_audio_stream() {
  if (_internal_has_new_audio_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_audio_stream_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_audio_source(::livekit::proto::NewAudioSourceRequest* new_audio_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_audio_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_audio_source));
    if (message_arena != submessage_arena) {
      new_audio_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_audio_source, submessage_arena);
    }
    set_has_new_audio_source();
    _impl_.message_.new_audio_source_ = new_audio_source;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_audio_source)
}
void FfiRequest::clear_new_audio_source() {
  if (_internal_has_new_audio_source()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_audio_source_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameRequest* capture_audio_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (capture_audio_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_audio_frame));
    if (message_arena != submessage_arena) {
      capture_audio_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_audio_frame, submessage_arena);
    }
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = capture_audio_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.capture_audio_frame)
}
void FfiRequest::clear_capture_audio_frame() {
  if (_internal_has_capture_audio_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.capture_audio_frame_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_clear_audio_buffer(::livekit::proto::ClearAudioBufferRequest* clear_audio_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (clear_audio_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_audio_buffer));
    if (message_arena != submessage_arena) {
      clear_audio_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_audio_buffer, submessage_arena);
    }
    set_has_clear_audio_buffer();
    _impl_.message_.clear_audio_buffer_ = clear_audio_buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.clear_audio_buffer)
}
void FfiRequest::clear_clear_audio_buffer() {
  if (_internal_has_clear_audio_buffer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.clear_audio_buffer_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_audio_resampler(::livekit::proto::NewAudioResamplerRequest* new_audio_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_audio_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_audio_resampler));
    if (message_arena != submessage_arena) {
      new_audio_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_audio_resampler, submessage_arena);
    }
    set_has_new_audio_resampler();
    _impl_.message_.new_audio_resampler_ = new_audio_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_audio_resampler)
}
void FfiRequest::clear_new_audio_resampler() {
  if (_internal_has_new_audio_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_audio_resampler_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_remix_and_resample(::livekit::proto::RemixAndResampleRequest* remix_and_resample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (remix_and_resample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remix_and_resample));
    if (message_arena != submessage_arena) {
      remix_and_resample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remix_and_resample, submessage_arena);
    }
    set_has_remix_and_resample();
    _impl_.message_.remix_and_resample_ = remix_and_resample;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.remix_and_resample)
}
void FfiRequest::clear_remix_and_resample() {
  if (_internal_has_remix_and_resample()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.remix_and_resample_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_e2ee(::livekit::proto::E2eeRequest* e2ee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (e2ee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2ee));
    if (message_arena != submessage_arena) {
      e2ee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e2ee, submessage_arena);
    }
    set_has_e2ee();
    _impl_.message_.e2ee_ = e2ee;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.e2ee)
}
void FfiRequest::clear_e2ee() {
  if (_internal_has_e2ee()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.e2ee_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_audio_stream_from_participant(::livekit::proto::AudioStreamFromParticipantRequest* audio_stream_from_participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (audio_stream_from_participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_stream_from_participant));
    if (message_arena != submessage_arena) {
      audio_stream_from_participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_stream_from_participant, submessage_arena);
    }
    set_has_audio_stream_from_participant();
    _impl_.message_.audio_stream_from_participant_ = audio_stream_from_participant;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.audio_stream_from_participant)
}
void FfiRequest::clear_audio_stream_from_participant() {
  if (_internal_has_audio_stream_from_participant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.audio_stream_from_participant_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_sox_resampler(::livekit::proto::NewSoxResamplerRequest* new_sox_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_sox_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_sox_resampler));
    if (message_arena != submessage_arena) {
      new_sox_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_sox_resampler, submessage_arena);
    }
    set_has_new_sox_resampler();
    _impl_.message_.new_sox_resampler_ = new_sox_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_sox_resampler)
}
void FfiRequest::clear_new_sox_resampler() {
  if (_internal_has_new_sox_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_sox_resampler_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_push_sox_resampler(::livekit::proto::PushSoxResamplerRequest* push_sox_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (push_sox_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(push_sox_resampler));
    if (message_arena != submessage_arena) {
      push_sox_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_sox_resampler, submessage_arena);
    }
    set_has_push_sox_resampler();
    _impl_.message_.push_sox_resampler_ = push_sox_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.push_sox_resampler)
}
void FfiRequest::clear_push_sox_resampler() {
  if (_internal_has_push_sox_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.push_sox_resampler_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_flush_sox_resampler(::livekit::proto::FlushSoxResamplerRequest* flush_sox_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (flush_sox_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flush_sox_resampler));
    if (message_arena != submessage_arena) {
      flush_sox_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush_sox_resampler, submessage_arena);
    }
    set_has_flush_sox_resampler();
    _impl_.message_.flush_sox_resampler_ = flush_sox_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.flush_sox_resampler)
}
void FfiRequest::clear_flush_sox_resampler() {
  if (_internal_has_flush_sox_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.flush_sox_resampler_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_send_chat_message(::livekit::proto::SendChatMessageRequest* send_chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_chat_message));
    if (message_arena != submessage_arena) {
      send_chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_chat_message, submessage_arena);
    }
    set_has_send_chat_message();
    _impl_.message_.send_chat_message_ = send_chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.send_chat_message)
}
void FfiRequest::clear_send_chat_message() {
  if (_internal_has_send_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_chat_message_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_edit_chat_message(::livekit::proto::EditChatMessageRequest* edit_chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (edit_chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edit_chat_message));
    if (message_arena != submessage_arena) {
      edit_chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit_chat_message, submessage_arena);
    }
    set_has_edit_chat_message();
    _impl_.message_.edit_chat_message_ = edit_chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.edit_chat_message)
}
void FfiRequest::clear_edit_chat_message() {
  if (_internal_has_edit_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.edit_chat_message_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_perform_rpc(::livekit::proto::PerformRpcRequest* perform_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (perform_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_rpc));
    if (message_arena != submessage_arena) {
      perform_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_rpc, submessage_arena);
    }
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = perform_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.perform_rpc)
}
void FfiRequest::clear_perform_rpc() {
  if (_internal_has_perform_rpc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.perform_rpc_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_register_rpc_method(::livekit::proto::RegisterRpcMethodRequest* register_rpc_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (register_rpc_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_rpc_method));
    if (message_arena != submessage_arena) {
      register_rpc_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_rpc_method, submessage_arena);
    }
    set_has_register_rpc_method();
    _impl_.message_.register_rpc_method_ = register_rpc_method;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.register_rpc_method)
}
void FfiRequest::clear_register_rpc_method() {
  if (_internal_has_register_rpc_method()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.register_rpc_method_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_unregister_rpc_method(::livekit::proto::UnregisterRpcMethodRequest* unregister_rpc_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (unregister_rpc_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unregister_rpc_method));
    if (message_arena != submessage_arena) {
      unregister_rpc_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unregister_rpc_method, submessage_arena);
    }
    set_has_unregister_rpc_method();
    _impl_.message_.unregister_rpc_method_ = unregister_rpc_method;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.unregister_rpc_method)
}
void FfiRequest::clear_unregister_rpc_method() {
  if (_internal_has_unregister_rpc_method()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.unregister_rpc_method_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_rpc_method_invocation_response(::livekit::proto::RpcMethodInvocationResponseRequest* rpc_method_invocation_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (rpc_method_invocation_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc_method_invocation_response));
    if (message_arena != submessage_arena) {
      rpc_method_invocation_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_method_invocation_response, submessage_arena);
    }
    set_has_rpc_method_invocation_response();
    _impl_.message_.rpc_method_invocation_response_ = rpc_method_invocation_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.rpc_method_invocation_response)
}
void FfiRequest::clear_rpc_method_invocation_response() {
  if (_internal_has_rpc_method_invocation_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rpc_method_invocation_response_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_enable_remote_track_publication(::livekit::proto::EnableRemoteTrackPublicationRequest* enable_remote_track_publication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (enable_remote_track_publication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_remote_track_publication));
    if (message_arena != submessage_arena) {
      enable_remote_track_publication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_remote_track_publication, submessage_arena);
    }
    set_has_enable_remote_track_publication();
    _impl_.message_.enable_remote_track_publication_ = enable_remote_track_publication;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.enable_remote_track_publication)
}
void FfiRequest::clear_enable_remote_track_publication() {
  if (_internal_has_enable_remote_track_publication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.enable_remote_track_publication_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_update_remote_track_publication_dimension(::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest* update_remote_track_publication_dimension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_remote_track_publication_dimension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_remote_track_publication_dimension));
    if (message_arena != submessage_arena) {
      update_remote_track_publication_dimension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_remote_track_publication_dimension, submessage_arena);
    }
    set_has_update_remote_track_publication_dimension();
    _impl_.message_.update_remote_track_publication_dimension_ = update_remote_track_publication_dimension;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.update_remote_track_publication_dimension)
}
void FfiRequest::clear_update_remote_track_publication_dimension() {
  if (_internal_has_update_remote_track_publication_dimension()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.update_remote_track_publication_dimension_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderRequest* send_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_header));
    if (message_arena != submessage_arena) {
      send_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_header, submessage_arena);
    }
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = send_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.send_stream_header)
}
void FfiRequest::clear_send_stream_header() {
  if (_internal_has_send_stream_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_header_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkRequest* send_stream_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_chunk));
    if (message_arena != submessage_arena) {
      send_stream_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_chunk, submessage_arena);
    }
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = send_stream_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.send_stream_chunk)
}
void FfiRequest::clear_send_stream_chunk() {
  if (_internal_has_send_stream_chunk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_chunk_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerRequest* send_stream_trailer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_trailer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_trailer));
    if (message_arena != submessage_arena) {
      send_stream_trailer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_trailer, submessage_arena);
    }
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = send_stream_trailer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.send_stream_trailer)
}
void FfiRequest::clear_send_stream_trailer() {
  if (_internal_has_send_stream_trailer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_trailer_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_set_data_channel_buffered_amount_low_threshold(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest* set_data_channel_buffered_amount_low_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_data_channel_buffered_amount_low_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_data_channel_buffered_amount_low_threshold));
    if (message_arena != submessage_arena) {
      set_data_channel_buffered_amount_low_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_data_channel_buffered_amount_low_threshold, submessage_arena);
    }
    set_has_set_data_channel_buffered_amount_low_threshold();
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = set_data_channel_buffered_amount_low_threshold;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.set_data_channel_buffered_amount_low_threshold)
}
void FfiRequest::clear_set_data_channel_buffered_amount_low_threshold() {
  if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_load_audio_filter_plugin(::livekit::proto::LoadAudioFilterPluginRequest* load_audio_filter_plugin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (load_audio_filter_plugin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_audio_filter_plugin));
    if (message_arena != submessage_arena) {
      load_audio_filter_plugin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_audio_filter_plugin, submessage_arena);
    }
    set_has_load_audio_filter_plugin();
    _impl_.message_.load_audio_filter_plugin_ = load_audio_filter_plugin;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.load_audio_filter_plugin)
}
void FfiRequest::clear_load_audio_filter_plugin() {
  if (_internal_has_load_audio_filter_plugin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.load_audio_filter_plugin_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_new_apm(::livekit::proto::NewApmRequest* new_apm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_apm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_apm));
    if (message_arena != submessage_arena) {
      new_apm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_apm, submessage_arena);
    }
    set_has_new_apm();
    _impl_.message_.new_apm_ = new_apm;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.new_apm)
}
void FfiRequest::clear_new_apm() {
  if (_internal_has_new_apm()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_apm_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_apm_process_stream(::livekit::proto::ApmProcessStreamRequest* apm_process_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (apm_process_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apm_process_stream));
    if (message_arena != submessage_arena) {
      apm_process_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apm_process_stream, submessage_arena);
    }
    set_has_apm_process_stream();
    _impl_.message_.apm_process_stream_ = apm_process_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.apm_process_stream)
}
void FfiRequest::clear_apm_process_stream() {
  if (_internal_has_apm_process_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.apm_process_stream_;
    }
    clear_has_message();
  }
}
void FfiRequest::set_allocated_apm_process_reverse_stream(::livekit::proto::ApmProcessReverseStreamRequest* apm_process_reverse_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (apm_process_reverse_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apm_process_reverse_stream));
    if (message_arena != submessage_arena) {
      apm_process_reverse_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apm_process_reverse_stream, submessage_arena);
    }
    set_has_apm_process_reverse_stream();
    _impl_.message_.apm_process_reverse_stream_ = apm_process_reverse_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiRequest.apm_process_reverse_stream)
}
void FfiRequest::clear_apm_process_reverse_stream() {
  if (_internal_has_apm_process_reverse_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.apm_process_reverse_stream_;
    }
    clear_has_message();
  }
}
FfiRequest::FfiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.FfiRequest)
}
FfiRequest::FfiRequest(const FfiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FfiRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kDispose: {
      _this->_internal_mutable_dispose()->::livekit::proto::DisposeRequest::MergeFrom(
          from._internal_dispose());
      break;
    }
    case kConnect: {
      _this->_internal_mutable_connect()->::livekit::proto::ConnectRequest::MergeFrom(
          from._internal_connect());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::livekit::proto::DisconnectRequest::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kPublishTrack: {
      _this->_internal_mutable_publish_track()->::livekit::proto::PublishTrackRequest::MergeFrom(
          from._internal_publish_track());
      break;
    }
    case kUnpublishTrack: {
      _this->_internal_mutable_unpublish_track()->::livekit::proto::UnpublishTrackRequest::MergeFrom(
          from._internal_unpublish_track());
      break;
    }
    case kPublishData: {
      _this->_internal_mutable_publish_data()->::livekit::proto::PublishDataRequest::MergeFrom(
          from._internal_publish_data());
      break;
    }
    case kSetSubscribed: {
      _this->_internal_mutable_set_subscribed()->::livekit::proto::SetSubscribedRequest::MergeFrom(
          from._internal_set_subscribed());
      break;
    }
    case kSetLocalMetadata: {
      _this->_internal_mutable_set_local_metadata()->::livekit::proto::SetLocalMetadataRequest::MergeFrom(
          from._internal_set_local_metadata());
      break;
    }
    case kSetLocalName: {
      _this->_internal_mutable_set_local_name()->::livekit::proto::SetLocalNameRequest::MergeFrom(
          from._internal_set_local_name());
      break;
    }
    case kSetLocalAttributes: {
      _this->_internal_mutable_set_local_attributes()->::livekit::proto::SetLocalAttributesRequest::MergeFrom(
          from._internal_set_local_attributes());
      break;
    }
    case kGetSessionStats: {
      _this->_internal_mutable_get_session_stats()->::livekit::proto::GetSessionStatsRequest::MergeFrom(
          from._internal_get_session_stats());
      break;
    }
    case kPublishTranscription: {
      _this->_internal_mutable_publish_transcription()->::livekit::proto::PublishTranscriptionRequest::MergeFrom(
          from._internal_publish_transcription());
      break;
    }
    case kPublishSipDtmf: {
      _this->_internal_mutable_publish_sip_dtmf()->::livekit::proto::PublishSipDtmfRequest::MergeFrom(
          from._internal_publish_sip_dtmf());
      break;
    }
    case kCreateVideoTrack: {
      _this->_internal_mutable_create_video_track()->::livekit::proto::CreateVideoTrackRequest::MergeFrom(
          from._internal_create_video_track());
      break;
    }
    case kCreateAudioTrack: {
      _this->_internal_mutable_create_audio_track()->::livekit::proto::CreateAudioTrackRequest::MergeFrom(
          from._internal_create_audio_track());
      break;
    }
    case kLocalTrackMute: {
      _this->_internal_mutable_local_track_mute()->::livekit::proto::LocalTrackMuteRequest::MergeFrom(
          from._internal_local_track_mute());
      break;
    }
    case kEnableRemoteTrack: {
      _this->_internal_mutable_enable_remote_track()->::livekit::proto::EnableRemoteTrackRequest::MergeFrom(
          from._internal_enable_remote_track());
      break;
    }
    case kGetStats: {
      _this->_internal_mutable_get_stats()->::livekit::proto::GetStatsRequest::MergeFrom(
          from._internal_get_stats());
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      _this->_internal_mutable_set_track_subscription_permissions()->::livekit::proto::SetTrackSubscriptionPermissionsRequest::MergeFrom(
          from._internal_set_track_subscription_permissions());
      break;
    }
    case kNewVideoStream: {
      _this->_internal_mutable_new_video_stream()->::livekit::proto::NewVideoStreamRequest::MergeFrom(
          from._internal_new_video_stream());
      break;
    }
    case kNewVideoSource: {
      _this->_internal_mutable_new_video_source()->::livekit::proto::NewVideoSourceRequest::MergeFrom(
          from._internal_new_video_source());
      break;
    }
    case kCaptureVideoFrame: {
      _this->_internal_mutable_capture_video_frame()->::livekit::proto::CaptureVideoFrameRequest::MergeFrom(
          from._internal_capture_video_frame());
      break;
    }
    case kVideoConvert: {
      _this->_internal_mutable_video_convert()->::livekit::proto::VideoConvertRequest::MergeFrom(
          from._internal_video_convert());
      break;
    }
    case kVideoStreamFromParticipant: {
      _this->_internal_mutable_video_stream_from_participant()->::livekit::proto::VideoStreamFromParticipantRequest::MergeFrom(
          from._internal_video_stream_from_participant());
      break;
    }
    case kNewAudioStream: {
      _this->_internal_mutable_new_audio_stream()->::livekit::proto::NewAudioStreamRequest::MergeFrom(
          from._internal_new_audio_stream());
      break;
    }
    case kNewAudioSource: {
      _this->_internal_mutable_new_audio_source()->::livekit::proto::NewAudioSourceRequest::MergeFrom(
          from._internal_new_audio_source());
      break;
    }
    case kCaptureAudioFrame: {
      _this->_internal_mutable_capture_audio_frame()->::livekit::proto::CaptureAudioFrameRequest::MergeFrom(
          from._internal_capture_audio_frame());
      break;
    }
    case kClearAudioBuffer: {
      _this->_internal_mutable_clear_audio_buffer()->::livekit::proto::ClearAudioBufferRequest::MergeFrom(
          from._internal_clear_audio_buffer());
      break;
    }
    case kNewAudioResampler: {
      _this->_internal_mutable_new_audio_resampler()->::livekit::proto::NewAudioResamplerRequest::MergeFrom(
          from._internal_new_audio_resampler());
      break;
    }
    case kRemixAndResample: {
      _this->_internal_mutable_remix_and_resample()->::livekit::proto::RemixAndResampleRequest::MergeFrom(
          from._internal_remix_and_resample());
      break;
    }
    case kE2Ee: {
      _this->_internal_mutable_e2ee()->::livekit::proto::E2eeRequest::MergeFrom(
          from._internal_e2ee());
      break;
    }
    case kAudioStreamFromParticipant: {
      _this->_internal_mutable_audio_stream_from_participant()->::livekit::proto::AudioStreamFromParticipantRequest::MergeFrom(
          from._internal_audio_stream_from_participant());
      break;
    }
    case kNewSoxResampler: {
      _this->_internal_mutable_new_sox_resampler()->::livekit::proto::NewSoxResamplerRequest::MergeFrom(
          from._internal_new_sox_resampler());
      break;
    }
    case kPushSoxResampler: {
      _this->_internal_mutable_push_sox_resampler()->::livekit::proto::PushSoxResamplerRequest::MergeFrom(
          from._internal_push_sox_resampler());
      break;
    }
    case kFlushSoxResampler: {
      _this->_internal_mutable_flush_sox_resampler()->::livekit::proto::FlushSoxResamplerRequest::MergeFrom(
          from._internal_flush_sox_resampler());
      break;
    }
    case kSendChatMessage: {
      _this->_internal_mutable_send_chat_message()->::livekit::proto::SendChatMessageRequest::MergeFrom(
          from._internal_send_chat_message());
      break;
    }
    case kEditChatMessage: {
      _this->_internal_mutable_edit_chat_message()->::livekit::proto::EditChatMessageRequest::MergeFrom(
          from._internal_edit_chat_message());
      break;
    }
    case kPerformRpc: {
      _this->_internal_mutable_perform_rpc()->::livekit::proto::PerformRpcRequest::MergeFrom(
          from._internal_perform_rpc());
      break;
    }
    case kRegisterRpcMethod: {
      _this->_internal_mutable_register_rpc_method()->::livekit::proto::RegisterRpcMethodRequest::MergeFrom(
          from._internal_register_rpc_method());
      break;
    }
    case kUnregisterRpcMethod: {
      _this->_internal_mutable_unregister_rpc_method()->::livekit::proto::UnregisterRpcMethodRequest::MergeFrom(
          from._internal_unregister_rpc_method());
      break;
    }
    case kRpcMethodInvocationResponse: {
      _this->_internal_mutable_rpc_method_invocation_response()->::livekit::proto::RpcMethodInvocationResponseRequest::MergeFrom(
          from._internal_rpc_method_invocation_response());
      break;
    }
    case kEnableRemoteTrackPublication: {
      _this->_internal_mutable_enable_remote_track_publication()->::livekit::proto::EnableRemoteTrackPublicationRequest::MergeFrom(
          from._internal_enable_remote_track_publication());
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      _this->_internal_mutable_update_remote_track_publication_dimension()->::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest::MergeFrom(
          from._internal_update_remote_track_publication_dimension());
      break;
    }
    case kSendStreamHeader: {
      _this->_internal_mutable_send_stream_header()->::livekit::proto::SendStreamHeaderRequest::MergeFrom(
          from._internal_send_stream_header());
      break;
    }
    case kSendStreamChunk: {
      _this->_internal_mutable_send_stream_chunk()->::livekit::proto::SendStreamChunkRequest::MergeFrom(
          from._internal_send_stream_chunk());
      break;
    }
    case kSendStreamTrailer: {
      _this->_internal_mutable_send_stream_trailer()->::livekit::proto::SendStreamTrailerRequest::MergeFrom(
          from._internal_send_stream_trailer());
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      _this->_internal_mutable_set_data_channel_buffered_amount_low_threshold()->::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest::MergeFrom(
          from._internal_set_data_channel_buffered_amount_low_threshold());
      break;
    }
    case kLoadAudioFilterPlugin: {
      _this->_internal_mutable_load_audio_filter_plugin()->::livekit::proto::LoadAudioFilterPluginRequest::MergeFrom(
          from._internal_load_audio_filter_plugin());
      break;
    }
    case kNewApm: {
      _this->_internal_mutable_new_apm()->::livekit::proto::NewApmRequest::MergeFrom(
          from._internal_new_apm());
      break;
    }
    case kApmProcessStream: {
      _this->_internal_mutable_apm_process_stream()->::livekit::proto::ApmProcessStreamRequest::MergeFrom(
          from._internal_apm_process_stream());
      break;
    }
    case kApmProcessReverseStream: {
      _this->_internal_mutable_apm_process_reverse_stream()->::livekit::proto::ApmProcessReverseStreamRequest::MergeFrom(
          from._internal_apm_process_reverse_stream());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.FfiRequest)
}

inline void FfiRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

FfiRequest::~FfiRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.FfiRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FfiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void FfiRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FfiRequest::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.FfiRequest)
  switch (message_case()) {
    case kDispose: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.dispose_;
      }
      break;
    }
    case kConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connect_;
      }
      break;
    }
    case kDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.disconnect_;
      }
      break;
    }
    case kPublishTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_track_;
      }
      break;
    }
    case kUnpublishTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.unpublish_track_;
      }
      break;
    }
    case kPublishData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_data_;
      }
      break;
    }
    case kSetSubscribed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_subscribed_;
      }
      break;
    }
    case kSetLocalMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_metadata_;
      }
      break;
    }
    case kSetLocalName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_name_;
      }
      break;
    }
    case kSetLocalAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_attributes_;
      }
      break;
    }
    case kGetSessionStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.get_session_stats_;
      }
      break;
    }
    case kPublishTranscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_transcription_;
      }
      break;
    }
    case kPublishSipDtmf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_sip_dtmf_;
      }
      break;
    }
    case kCreateVideoTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.create_video_track_;
      }
      break;
    }
    case kCreateAudioTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.create_audio_track_;
      }
      break;
    }
    case kLocalTrackMute: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.local_track_mute_;
      }
      break;
    }
    case kEnableRemoteTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.enable_remote_track_;
      }
      break;
    }
    case kGetStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.get_stats_;
      }
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_track_subscription_permissions_;
      }
      break;
    }
    case kNewVideoStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_video_stream_;
      }
      break;
    }
    case kNewVideoSource: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_video_source_;
      }
      break;
    }
    case kCaptureVideoFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.capture_video_frame_;
      }
      break;
    }
    case kVideoConvert: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.video_convert_;
      }
      break;
    }
    case kVideoStreamFromParticipant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.video_stream_from_participant_;
      }
      break;
    }
    case kNewAudioStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_audio_stream_;
      }
      break;
    }
    case kNewAudioSource: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_audio_source_;
      }
      break;
    }
    case kCaptureAudioFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.capture_audio_frame_;
      }
      break;
    }
    case kClearAudioBuffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.clear_audio_buffer_;
      }
      break;
    }
    case kNewAudioResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_audio_resampler_;
      }
      break;
    }
    case kRemixAndResample: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.remix_and_resample_;
      }
      break;
    }
    case kE2Ee: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.e2ee_;
      }
      break;
    }
    case kAudioStreamFromParticipant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.audio_stream_from_participant_;
      }
      break;
    }
    case kNewSoxResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_sox_resampler_;
      }
      break;
    }
    case kPushSoxResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.push_sox_resampler_;
      }
      break;
    }
    case kFlushSoxResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.flush_sox_resampler_;
      }
      break;
    }
    case kSendChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_chat_message_;
      }
      break;
    }
    case kEditChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.edit_chat_message_;
      }
      break;
    }
    case kPerformRpc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.perform_rpc_;
      }
      break;
    }
    case kRegisterRpcMethod: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.register_rpc_method_;
      }
      break;
    }
    case kUnregisterRpcMethod: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.unregister_rpc_method_;
      }
      break;
    }
    case kRpcMethodInvocationResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.rpc_method_invocation_response_;
      }
      break;
    }
    case kEnableRemoteTrackPublication: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.enable_remote_track_publication_;
      }
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_remote_track_publication_dimension_;
      }
      break;
    }
    case kSendStreamHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_header_;
      }
      break;
    }
    case kSendStreamChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_chunk_;
      }
      break;
    }
    case kSendStreamTrailer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_trailer_;
      }
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
      }
      break;
    }
    case kLoadAudioFilterPlugin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.load_audio_filter_plugin_;
      }
      break;
    }
    case kNewApm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_apm_;
      }
      break;
    }
    case kApmProcessStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.apm_process_stream_;
      }
      break;
    }
    case kApmProcessReverseStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.apm_process_reverse_stream_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void FfiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.FfiRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FfiRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.proto.DisposeRequest dispose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ConnectRequest connect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DisconnectRequest disconnect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishTrackRequest publish_track = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UnpublishTrackRequest unpublish_track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unpublish_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishDataRequest publish_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetSubscribedRequest set_subscribed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_subscribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalNameRequest set_local_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetSessionStatsRequest get_session_stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_session_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_transcription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_sip_dtmf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CreateVideoTrackRequest create_video_track = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_video_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_audio_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LocalTrackMuteRequest local_track_mute = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_track_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.EnableRemoteTrackRequest enable_remote_track = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_remote_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetStatsRequest get_stats = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewVideoStreamRequest new_video_stream = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_video_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewVideoSourceRequest new_video_source = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_video_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CaptureVideoFrameRequest capture_video_frame = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_video_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.VideoConvertRequest video_convert = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_convert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.VideoStreamFromParticipantRequest video_stream_from_participant = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_stream_from_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewAudioStreamRequest new_audio_stream = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_audio_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewAudioSourceRequest new_audio_source = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_audio_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_audio_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ClearAudioBufferRequest clear_audio_buffer = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_audio_buffer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewAudioResamplerRequest new_audio_resampler = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_audio_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RemixAndResampleRequest remix_and_resample = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_remix_and_resample(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.E2eeRequest e2ee = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2ee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.AudioStreamFromParticipantRequest audio_stream_from_participant = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_stream_from_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewSoxResamplerRequest new_sox_resampler = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sox_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PushSoxResamplerRequest push_sox_resampler = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_sox_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.FlushSoxResamplerRequest flush_sox_resampler = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush_sox_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendChatMessageRequest send_chat_message = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.EditChatMessageRequest edit_chat_message = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_edit_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PerformRpcRequest perform_rpc = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_rpc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RegisterRpcMethodRequest register_rpc_method = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_rpc_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UnregisterRpcMethodRequest unregister_rpc_method = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unregister_rpc_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RpcMethodInvocationResponseRequest rpc_method_invocation_response = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_method_invocation_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.EnableRemoteTrackPublicationRequest enable_remote_track_publication = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_remote_track_publication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UpdateRemoteTrackPublicationDimensionRequest update_remote_track_publication_dimension = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_remote_track_publication_dimension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamHeaderRequest send_stream_header = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamChunkRequest send_stream_chunk = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamTrailerRequest send_stream_trailer = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_trailer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest set_data_channel_buffered_amount_low_threshold = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_data_channel_buffered_amount_low_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetTrackSubscriptionPermissionsRequest set_track_subscription_permissions = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_track_subscription_permissions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LoadAudioFilterPluginRequest load_audio_filter_plugin = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_audio_filter_plugin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewApmRequest new_apm = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_apm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ApmProcessStreamRequest apm_process_stream = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_apm_process_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ApmProcessReverseStreamRequest apm_process_reverse_stream = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_apm_process_reverse_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FfiRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.FfiRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (message_case()) {
    case kDispose: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::dispose(this),
          _Internal::dispose(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::connect(this),
          _Internal::connect(this).GetCachedSize(), target, stream);
      break;
    }
    case kDisconnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::disconnect(this),
          _Internal::disconnect(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::publish_track(this),
          _Internal::publish_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnpublishTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::unpublish_track(this),
          _Internal::unpublish_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::publish_data(this),
          _Internal::publish_data(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetSubscribed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::set_subscribed(this),
          _Internal::set_subscribed(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::set_local_metadata(this),
          _Internal::set_local_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::set_local_name(this),
          _Internal::set_local_name(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalAttributes: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::set_local_attributes(this),
          _Internal::set_local_attributes(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetSessionStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::get_session_stats(this),
          _Internal::get_session_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishTranscription: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::publish_transcription(this),
          _Internal::publish_transcription(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishSipDtmf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::publish_sip_dtmf(this),
          _Internal::publish_sip_dtmf(this).GetCachedSize(), target, stream);
      break;
    }
    case kCreateVideoTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::create_video_track(this),
          _Internal::create_video_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kCreateAudioTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::create_audio_track(this),
          _Internal::create_audio_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocalTrackMute: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::local_track_mute(this),
          _Internal::local_track_mute(this).GetCachedSize(), target, stream);
      break;
    }
    case kEnableRemoteTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::enable_remote_track(this),
          _Internal::enable_remote_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::get_stats(this),
          _Internal::get_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewVideoStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::new_video_stream(this),
          _Internal::new_video_stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewVideoSource: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::new_video_source(this),
          _Internal::new_video_source(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureVideoFrame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::capture_video_frame(this),
          _Internal::capture_video_frame(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoConvert: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::video_convert(this),
          _Internal::video_convert(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoStreamFromParticipant: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::video_stream_from_participant(this),
          _Internal::video_stream_from_participant(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewAudioStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::new_audio_stream(this),
          _Internal::new_audio_stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewAudioSource: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::new_audio_source(this),
          _Internal::new_audio_source(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureAudioFrame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::capture_audio_frame(this),
          _Internal::capture_audio_frame(this).GetCachedSize(), target, stream);
      break;
    }
    case kClearAudioBuffer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::clear_audio_buffer(this),
          _Internal::clear_audio_buffer(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewAudioResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::new_audio_resampler(this),
          _Internal::new_audio_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kRemixAndResample: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::remix_and_resample(this),
          _Internal::remix_and_resample(this).GetCachedSize(), target, stream);
      break;
    }
    case kE2Ee: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, _Internal::e2ee(this),
          _Internal::e2ee(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioStreamFromParticipant: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, _Internal::audio_stream_from_participant(this),
          _Internal::audio_stream_from_participant(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewSoxResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::new_sox_resampler(this),
          _Internal::new_sox_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kPushSoxResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, _Internal::push_sox_resampler(this),
          _Internal::push_sox_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kFlushSoxResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, _Internal::flush_sox_resampler(this),
          _Internal::flush_sox_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendChatMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, _Internal::send_chat_message(this),
          _Internal::send_chat_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kEditChatMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, _Internal::edit_chat_message(this),
          _Internal::edit_chat_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kPerformRpc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, _Internal::perform_rpc(this),
          _Internal::perform_rpc(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegisterRpcMethod: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, _Internal::register_rpc_method(this),
          _Internal::register_rpc_method(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnregisterRpcMethod: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, _Internal::unregister_rpc_method(this),
          _Internal::unregister_rpc_method(this).GetCachedSize(), target, stream);
      break;
    }
    case kRpcMethodInvocationResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, _Internal::rpc_method_invocation_response(this),
          _Internal::rpc_method_invocation_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kEnableRemoteTrackPublication: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, _Internal::enable_remote_track_publication(this),
          _Internal::enable_remote_track_publication(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, _Internal::update_remote_track_publication_dimension(this),
          _Internal::update_remote_track_publication_dimension(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, _Internal::send_stream_header(this),
          _Internal::send_stream_header(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamChunk: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, _Internal::send_stream_chunk(this),
          _Internal::send_stream_chunk(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamTrailer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(46, _Internal::send_stream_trailer(this),
          _Internal::send_stream_trailer(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, _Internal::set_data_channel_buffered_amount_low_threshold(this),
          _Internal::set_data_channel_buffered_amount_low_threshold(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, _Internal::set_track_subscription_permissions(this),
          _Internal::set_track_subscription_permissions(this).GetCachedSize(), target, stream);
      break;
    }
    case kLoadAudioFilterPlugin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, _Internal::load_audio_filter_plugin(this),
          _Internal::load_audio_filter_plugin(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewApm: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, _Internal::new_apm(this),
          _Internal::new_apm(this).GetCachedSize(), target, stream);
      break;
    }
    case kApmProcessStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(51, _Internal::apm_process_stream(this),
          _Internal::apm_process_stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kApmProcessReverseStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(52, _Internal::apm_process_reverse_stream(this),
          _Internal::apm_process_reverse_stream(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.FfiRequest)
  return target;
}

size_t FfiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.FfiRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.proto.DisposeRequest dispose = 2;
    case kDispose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.dispose_);
      break;
    }
    // .livekit.proto.ConnectRequest connect = 3;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connect_);
      break;
    }
    // .livekit.proto.DisconnectRequest disconnect = 4;
    case kDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.disconnect_);
      break;
    }
    // .livekit.proto.PublishTrackRequest publish_track = 5;
    case kPublishTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_track_);
      break;
    }
    // .livekit.proto.UnpublishTrackRequest unpublish_track = 6;
    case kUnpublishTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.unpublish_track_);
      break;
    }
    // .livekit.proto.PublishDataRequest publish_data = 7;
    case kPublishData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_data_);
      break;
    }
    // .livekit.proto.SetSubscribedRequest set_subscribed = 8;
    case kSetSubscribed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_subscribed_);
      break;
    }
    // .livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
    case kSetLocalMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_metadata_);
      break;
    }
    // .livekit.proto.SetLocalNameRequest set_local_name = 10;
    case kSetLocalName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_name_);
      break;
    }
    // .livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
    case kSetLocalAttributes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_attributes_);
      break;
    }
    // .livekit.proto.GetSessionStatsRequest get_session_stats = 12;
    case kGetSessionStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.get_session_stats_);
      break;
    }
    // .livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
    case kPublishTranscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_transcription_);
      break;
    }
    // .livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
    case kPublishSipDtmf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_sip_dtmf_);
      break;
    }
    // .livekit.proto.CreateVideoTrackRequest create_video_track = 15;
    case kCreateVideoTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.create_video_track_);
      break;
    }
    // .livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
    case kCreateAudioTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.create_audio_track_);
      break;
    }
    // .livekit.proto.LocalTrackMuteRequest local_track_mute = 17;
    case kLocalTrackMute: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.local_track_mute_);
      break;
    }
    // .livekit.proto.EnableRemoteTrackRequest enable_remote_track = 18;
    case kEnableRemoteTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.enable_remote_track_);
      break;
    }
    // .livekit.proto.GetStatsRequest get_stats = 19;
    case kGetStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.get_stats_);
      break;
    }
    // .livekit.proto.SetTrackSubscriptionPermissionsRequest set_track_subscription_permissions = 48;
    case kSetTrackSubscriptionPermissions: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_track_subscription_permissions_);
      break;
    }
    // .livekit.proto.NewVideoStreamRequest new_video_stream = 20;
    case kNewVideoStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_video_stream_);
      break;
    }
    // .livekit.proto.NewVideoSourceRequest new_video_source = 21;
    case kNewVideoSource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_video_source_);
      break;
    }
    // .livekit.proto.CaptureVideoFrameRequest capture_video_frame = 22;
    case kCaptureVideoFrame: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.capture_video_frame_);
      break;
    }
    // .livekit.proto.VideoConvertRequest video_convert = 23;
    case kVideoConvert: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.video_convert_);
      break;
    }
    // .livekit.proto.VideoStreamFromParticipantRequest video_stream_from_participant = 24;
    case kVideoStreamFromParticipant: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.video_stream_from_participant_);
      break;
    }
    // .livekit.proto.NewAudioStreamRequest new_audio_stream = 25;
    case kNewAudioStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_audio_stream_);
      break;
    }
    // .livekit.proto.NewAudioSourceRequest new_audio_source = 26;
    case kNewAudioSource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_audio_source_);
      break;
    }
    // .livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 27;
    case kCaptureAudioFrame: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.capture_audio_frame_);
      break;
    }
    // .livekit.proto.ClearAudioBufferRequest clear_audio_buffer = 28;
    case kClearAudioBuffer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.clear_audio_buffer_);
      break;
    }
    // .livekit.proto.NewAudioResamplerRequest new_audio_resampler = 29;
    case kNewAudioResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_audio_resampler_);
      break;
    }
    // .livekit.proto.RemixAndResampleRequest remix_and_resample = 30;
    case kRemixAndResample: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.remix_and_resample_);
      break;
    }
    // .livekit.proto.E2eeRequest e2ee = 31;
    case kE2Ee: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.e2ee_);
      break;
    }
    // .livekit.proto.AudioStreamFromParticipantRequest audio_stream_from_participant = 32;
    case kAudioStreamFromParticipant: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.audio_stream_from_participant_);
      break;
    }
    // .livekit.proto.NewSoxResamplerRequest new_sox_resampler = 33;
    case kNewSoxResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_sox_resampler_);
      break;
    }
    // .livekit.proto.PushSoxResamplerRequest push_sox_resampler = 34;
    case kPushSoxResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.push_sox_resampler_);
      break;
    }
    // .livekit.proto.FlushSoxResamplerRequest flush_sox_resampler = 35;
    case kFlushSoxResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.flush_sox_resampler_);
      break;
    }
    // .livekit.proto.SendChatMessageRequest send_chat_message = 36;
    case kSendChatMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_chat_message_);
      break;
    }
    // .livekit.proto.EditChatMessageRequest edit_chat_message = 37;
    case kEditChatMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.edit_chat_message_);
      break;
    }
    // .livekit.proto.PerformRpcRequest perform_rpc = 38;
    case kPerformRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.perform_rpc_);
      break;
    }
    // .livekit.proto.RegisterRpcMethodRequest register_rpc_method = 39;
    case kRegisterRpcMethod: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.register_rpc_method_);
      break;
    }
    // .livekit.proto.UnregisterRpcMethodRequest unregister_rpc_method = 40;
    case kUnregisterRpcMethod: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.unregister_rpc_method_);
      break;
    }
    // .livekit.proto.RpcMethodInvocationResponseRequest rpc_method_invocation_response = 41;
    case kRpcMethodInvocationResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.rpc_method_invocation_response_);
      break;
    }
    // .livekit.proto.EnableRemoteTrackPublicationRequest enable_remote_track_publication = 42;
    case kEnableRemoteTrackPublication: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.enable_remote_track_publication_);
      break;
    }
    // .livekit.proto.UpdateRemoteTrackPublicationDimensionRequest update_remote_track_publication_dimension = 43;
    case kUpdateRemoteTrackPublicationDimension: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_remote_track_publication_dimension_);
      break;
    }
    // .livekit.proto.SendStreamHeaderRequest send_stream_header = 44;
    case kSendStreamHeader: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_header_);
      break;
    }
    // .livekit.proto.SendStreamChunkRequest send_stream_chunk = 45;
    case kSendStreamChunk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_chunk_);
      break;
    }
    // .livekit.proto.SendStreamTrailerRequest send_stream_trailer = 46;
    case kSendStreamTrailer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_trailer_);
      break;
    }
    // .livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest set_data_channel_buffered_amount_low_threshold = 47;
    case kSetDataChannelBufferedAmountLowThreshold: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_data_channel_buffered_amount_low_threshold_);
      break;
    }
    // .livekit.proto.LoadAudioFilterPluginRequest load_audio_filter_plugin = 49;
    case kLoadAudioFilterPlugin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.load_audio_filter_plugin_);
      break;
    }
    // .livekit.proto.NewApmRequest new_apm = 50;
    case kNewApm: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_apm_);
      break;
    }
    // .livekit.proto.ApmProcessStreamRequest apm_process_stream = 51;
    case kApmProcessStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.apm_process_stream_);
      break;
    }
    // .livekit.proto.ApmProcessReverseStreamRequest apm_process_reverse_stream = 52;
    case kApmProcessReverseStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.apm_process_reverse_stream_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FfiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FfiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FfiRequest::GetClassData() const { return &_class_data_; }


void FfiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FfiRequest*>(&to_msg);
  auto& from = static_cast<const FfiRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.FfiRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kDispose: {
      _this->_internal_mutable_dispose()->::livekit::proto::DisposeRequest::MergeFrom(
          from._internal_dispose());
      break;
    }
    case kConnect: {
      _this->_internal_mutable_connect()->::livekit::proto::ConnectRequest::MergeFrom(
          from._internal_connect());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::livekit::proto::DisconnectRequest::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kPublishTrack: {
      _this->_internal_mutable_publish_track()->::livekit::proto::PublishTrackRequest::MergeFrom(
          from._internal_publish_track());
      break;
    }
    case kUnpublishTrack: {
      _this->_internal_mutable_unpublish_track()->::livekit::proto::UnpublishTrackRequest::MergeFrom(
          from._internal_unpublish_track());
      break;
    }
    case kPublishData: {
      _this->_internal_mutable_publish_data()->::livekit::proto::PublishDataRequest::MergeFrom(
          from._internal_publish_data());
      break;
    }
    case kSetSubscribed: {
      _this->_internal_mutable_set_subscribed()->::livekit::proto::SetSubscribedRequest::MergeFrom(
          from._internal_set_subscribed());
      break;
    }
    case kSetLocalMetadata: {
      _this->_internal_mutable_set_local_metadata()->::livekit::proto::SetLocalMetadataRequest::MergeFrom(
          from._internal_set_local_metadata());
      break;
    }
    case kSetLocalName: {
      _this->_internal_mutable_set_local_name()->::livekit::proto::SetLocalNameRequest::MergeFrom(
          from._internal_set_local_name());
      break;
    }
    case kSetLocalAttributes: {
      _this->_internal_mutable_set_local_attributes()->::livekit::proto::SetLocalAttributesRequest::MergeFrom(
          from._internal_set_local_attributes());
      break;
    }
    case kGetSessionStats: {
      _this->_internal_mutable_get_session_stats()->::livekit::proto::GetSessionStatsRequest::MergeFrom(
          from._internal_get_session_stats());
      break;
    }
    case kPublishTranscription: {
      _this->_internal_mutable_publish_transcription()->::livekit::proto::PublishTranscriptionRequest::MergeFrom(
          from._internal_publish_transcription());
      break;
    }
    case kPublishSipDtmf: {
      _this->_internal_mutable_publish_sip_dtmf()->::livekit::proto::PublishSipDtmfRequest::MergeFrom(
          from._internal_publish_sip_dtmf());
      break;
    }
    case kCreateVideoTrack: {
      _this->_internal_mutable_create_video_track()->::livekit::proto::CreateVideoTrackRequest::MergeFrom(
          from._internal_create_video_track());
      break;
    }
    case kCreateAudioTrack: {
      _this->_internal_mutable_create_audio_track()->::livekit::proto::CreateAudioTrackRequest::MergeFrom(
          from._internal_create_audio_track());
      break;
    }
    case kLocalTrackMute: {
      _this->_internal_mutable_local_track_mute()->::livekit::proto::LocalTrackMuteRequest::MergeFrom(
          from._internal_local_track_mute());
      break;
    }
    case kEnableRemoteTrack: {
      _this->_internal_mutable_enable_remote_track()->::livekit::proto::EnableRemoteTrackRequest::MergeFrom(
          from._internal_enable_remote_track());
      break;
    }
    case kGetStats: {
      _this->_internal_mutable_get_stats()->::livekit::proto::GetStatsRequest::MergeFrom(
          from._internal_get_stats());
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      _this->_internal_mutable_set_track_subscription_permissions()->::livekit::proto::SetTrackSubscriptionPermissionsRequest::MergeFrom(
          from._internal_set_track_subscription_permissions());
      break;
    }
    case kNewVideoStream: {
      _this->_internal_mutable_new_video_stream()->::livekit::proto::NewVideoStreamRequest::MergeFrom(
          from._internal_new_video_stream());
      break;
    }
    case kNewVideoSource: {
      _this->_internal_mutable_new_video_source()->::livekit::proto::NewVideoSourceRequest::MergeFrom(
          from._internal_new_video_source());
      break;
    }
    case kCaptureVideoFrame: {
      _this->_internal_mutable_capture_video_frame()->::livekit::proto::CaptureVideoFrameRequest::MergeFrom(
          from._internal_capture_video_frame());
      break;
    }
    case kVideoConvert: {
      _this->_internal_mutable_video_convert()->::livekit::proto::VideoConvertRequest::MergeFrom(
          from._internal_video_convert());
      break;
    }
    case kVideoStreamFromParticipant: {
      _this->_internal_mutable_video_stream_from_participant()->::livekit::proto::VideoStreamFromParticipantRequest::MergeFrom(
          from._internal_video_stream_from_participant());
      break;
    }
    case kNewAudioStream: {
      _this->_internal_mutable_new_audio_stream()->::livekit::proto::NewAudioStreamRequest::MergeFrom(
          from._internal_new_audio_stream());
      break;
    }
    case kNewAudioSource: {
      _this->_internal_mutable_new_audio_source()->::livekit::proto::NewAudioSourceRequest::MergeFrom(
          from._internal_new_audio_source());
      break;
    }
    case kCaptureAudioFrame: {
      _this->_internal_mutable_capture_audio_frame()->::livekit::proto::CaptureAudioFrameRequest::MergeFrom(
          from._internal_capture_audio_frame());
      break;
    }
    case kClearAudioBuffer: {
      _this->_internal_mutable_clear_audio_buffer()->::livekit::proto::ClearAudioBufferRequest::MergeFrom(
          from._internal_clear_audio_buffer());
      break;
    }
    case kNewAudioResampler: {
      _this->_internal_mutable_new_audio_resampler()->::livekit::proto::NewAudioResamplerRequest::MergeFrom(
          from._internal_new_audio_resampler());
      break;
    }
    case kRemixAndResample: {
      _this->_internal_mutable_remix_and_resample()->::livekit::proto::RemixAndResampleRequest::MergeFrom(
          from._internal_remix_and_resample());
      break;
    }
    case kE2Ee: {
      _this->_internal_mutable_e2ee()->::livekit::proto::E2eeRequest::MergeFrom(
          from._internal_e2ee());
      break;
    }
    case kAudioStreamFromParticipant: {
      _this->_internal_mutable_audio_stream_from_participant()->::livekit::proto::AudioStreamFromParticipantRequest::MergeFrom(
          from._internal_audio_stream_from_participant());
      break;
    }
    case kNewSoxResampler: {
      _this->_internal_mutable_new_sox_resampler()->::livekit::proto::NewSoxResamplerRequest::MergeFrom(
          from._internal_new_sox_resampler());
      break;
    }
    case kPushSoxResampler: {
      _this->_internal_mutable_push_sox_resampler()->::livekit::proto::PushSoxResamplerRequest::MergeFrom(
          from._internal_push_sox_resampler());
      break;
    }
    case kFlushSoxResampler: {
      _this->_internal_mutable_flush_sox_resampler()->::livekit::proto::FlushSoxResamplerRequest::MergeFrom(
          from._internal_flush_sox_resampler());
      break;
    }
    case kSendChatMessage: {
      _this->_internal_mutable_send_chat_message()->::livekit::proto::SendChatMessageRequest::MergeFrom(
          from._internal_send_chat_message());
      break;
    }
    case kEditChatMessage: {
      _this->_internal_mutable_edit_chat_message()->::livekit::proto::EditChatMessageRequest::MergeFrom(
          from._internal_edit_chat_message());
      break;
    }
    case kPerformRpc: {
      _this->_internal_mutable_perform_rpc()->::livekit::proto::PerformRpcRequest::MergeFrom(
          from._internal_perform_rpc());
      break;
    }
    case kRegisterRpcMethod: {
      _this->_internal_mutable_register_rpc_method()->::livekit::proto::RegisterRpcMethodRequest::MergeFrom(
          from._internal_register_rpc_method());
      break;
    }
    case kUnregisterRpcMethod: {
      _this->_internal_mutable_unregister_rpc_method()->::livekit::proto::UnregisterRpcMethodRequest::MergeFrom(
          from._internal_unregister_rpc_method());
      break;
    }
    case kRpcMethodInvocationResponse: {
      _this->_internal_mutable_rpc_method_invocation_response()->::livekit::proto::RpcMethodInvocationResponseRequest::MergeFrom(
          from._internal_rpc_method_invocation_response());
      break;
    }
    case kEnableRemoteTrackPublication: {
      _this->_internal_mutable_enable_remote_track_publication()->::livekit::proto::EnableRemoteTrackPublicationRequest::MergeFrom(
          from._internal_enable_remote_track_publication());
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      _this->_internal_mutable_update_remote_track_publication_dimension()->::livekit::proto::UpdateRemoteTrackPublicationDimensionRequest::MergeFrom(
          from._internal_update_remote_track_publication_dimension());
      break;
    }
    case kSendStreamHeader: {
      _this->_internal_mutable_send_stream_header()->::livekit::proto::SendStreamHeaderRequest::MergeFrom(
          from._internal_send_stream_header());
      break;
    }
    case kSendStreamChunk: {
      _this->_internal_mutable_send_stream_chunk()->::livekit::proto::SendStreamChunkRequest::MergeFrom(
          from._internal_send_stream_chunk());
      break;
    }
    case kSendStreamTrailer: {
      _this->_internal_mutable_send_stream_trailer()->::livekit::proto::SendStreamTrailerRequest::MergeFrom(
          from._internal_send_stream_trailer());
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      _this->_internal_mutable_set_data_channel_buffered_amount_low_threshold()->::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest::MergeFrom(
          from._internal_set_data_channel_buffered_amount_low_threshold());
      break;
    }
    case kLoadAudioFilterPlugin: {
      _this->_internal_mutable_load_audio_filter_plugin()->::livekit::proto::LoadAudioFilterPluginRequest::MergeFrom(
          from._internal_load_audio_filter_plugin());
      break;
    }
    case kNewApm: {
      _this->_internal_mutable_new_apm()->::livekit::proto::NewApmRequest::MergeFrom(
          from._internal_new_apm());
      break;
    }
    case kApmProcessStream: {
      _this->_internal_mutable_apm_process_stream()->::livekit::proto::ApmProcessStreamRequest::MergeFrom(
          from._internal_apm_process_stream());
      break;
    }
    case kApmProcessReverseStream: {
      _this->_internal_mutable_apm_process_reverse_stream()->::livekit::proto::ApmProcessReverseStreamRequest::MergeFrom(
          from._internal_apm_process_reverse_stream());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FfiRequest::CopyFrom(const FfiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.FfiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FfiRequest::IsInitialized() const {
  switch (message_case()) {
    case kDispose: {
      if (_internal_has_dispose()) {
        if (!_impl_.message_.dispose_->IsInitialized()) return false;
      }
      break;
    }
    case kConnect: {
      if (_internal_has_connect()) {
        if (!_impl_.message_.connect_->IsInitialized()) return false;
      }
      break;
    }
    case kDisconnect: {
      if (_internal_has_disconnect()) {
        if (!_impl_.message_.disconnect_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishTrack: {
      if (_internal_has_publish_track()) {
        if (!_impl_.message_.publish_track_->IsInitialized()) return false;
      }
      break;
    }
    case kUnpublishTrack: {
      if (_internal_has_unpublish_track()) {
        if (!_impl_.message_.unpublish_track_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishData: {
      if (_internal_has_publish_data()) {
        if (!_impl_.message_.publish_data_->IsInitialized()) return false;
      }
      break;
    }
    case kSetSubscribed: {
      if (_internal_has_set_subscribed()) {
        if (!_impl_.message_.set_subscribed_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalMetadata: {
      if (_internal_has_set_local_metadata()) {
        if (!_impl_.message_.set_local_metadata_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalName: {
      if (_internal_has_set_local_name()) {
        if (!_impl_.message_.set_local_name_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalAttributes: {
      if (_internal_has_set_local_attributes()) {
        if (!_impl_.message_.set_local_attributes_->IsInitialized()) return false;
      }
      break;
    }
    case kGetSessionStats: {
      if (_internal_has_get_session_stats()) {
        if (!_impl_.message_.get_session_stats_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishTranscription: {
      if (_internal_has_publish_transcription()) {
        if (!_impl_.message_.publish_transcription_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishSipDtmf: {
      if (_internal_has_publish_sip_dtmf()) {
        if (!_impl_.message_.publish_sip_dtmf_->IsInitialized()) return false;
      }
      break;
    }
    case kCreateVideoTrack: {
      if (_internal_has_create_video_track()) {
        if (!_impl_.message_.create_video_track_->IsInitialized()) return false;
      }
      break;
    }
    case kCreateAudioTrack: {
      if (_internal_has_create_audio_track()) {
        if (!_impl_.message_.create_audio_track_->IsInitialized()) return false;
      }
      break;
    }
    case kLocalTrackMute: {
      if (_internal_has_local_track_mute()) {
        if (!_impl_.message_.local_track_mute_->IsInitialized()) return false;
      }
      break;
    }
    case kEnableRemoteTrack: {
      if (_internal_has_enable_remote_track()) {
        if (!_impl_.message_.enable_remote_track_->IsInitialized()) return false;
      }
      break;
    }
    case kGetStats: {
      if (_internal_has_get_stats()) {
        if (!_impl_.message_.get_stats_->IsInitialized()) return false;
      }
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      if (_internal_has_set_track_subscription_permissions()) {
        if (!_impl_.message_.set_track_subscription_permissions_->IsInitialized()) return false;
      }
      break;
    }
    case kNewVideoStream: {
      if (_internal_has_new_video_stream()) {
        if (!_impl_.message_.new_video_stream_->IsInitialized()) return false;
      }
      break;
    }
    case kNewVideoSource: {
      if (_internal_has_new_video_source()) {
        if (!_impl_.message_.new_video_source_->IsInitialized()) return false;
      }
      break;
    }
    case kCaptureVideoFrame: {
      if (_internal_has_capture_video_frame()) {
        if (!_impl_.message_.capture_video_frame_->IsInitialized()) return false;
      }
      break;
    }
    case kVideoConvert: {
      if (_internal_has_video_convert()) {
        if (!_impl_.message_.video_convert_->IsInitialized()) return false;
      }
      break;
    }
    case kVideoStreamFromParticipant: {
      if (_internal_has_video_stream_from_participant()) {
        if (!_impl_.message_.video_stream_from_participant_->IsInitialized()) return false;
      }
      break;
    }
    case kNewAudioStream: {
      if (_internal_has_new_audio_stream()) {
        if (!_impl_.message_.new_audio_stream_->IsInitialized()) return false;
      }
      break;
    }
    case kNewAudioSource: {
      if (_internal_has_new_audio_source()) {
        if (!_impl_.message_.new_audio_source_->IsInitialized()) return false;
      }
      break;
    }
    case kCaptureAudioFrame: {
      if (_internal_has_capture_audio_frame()) {
        if (!_impl_.message_.capture_audio_frame_->IsInitialized()) return false;
      }
      break;
    }
    case kClearAudioBuffer: {
      if (_internal_has_clear_audio_buffer()) {
        if (!_impl_.message_.clear_audio_buffer_->IsInitialized()) return false;
      }
      break;
    }
    case kNewAudioResampler: {
      break;
    }
    case kRemixAndResample: {
      if (_internal_has_remix_and_resample()) {
        if (!_impl_.message_.remix_and_resample_->IsInitialized()) return false;
      }
      break;
    }
    case kE2Ee: {
      if (_internal_has_e2ee()) {
        if (!_impl_.message_.e2ee_->IsInitialized()) return false;
      }
      break;
    }
    case kAudioStreamFromParticipant: {
      if (_internal_has_audio_stream_from_participant()) {
        if (!_impl_.message_.audio_stream_from_participant_->IsInitialized()) return false;
      }
      break;
    }
    case kNewSoxResampler: {
      if (_internal_has_new_sox_resampler()) {
        if (!_impl_.message_.new_sox_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kPushSoxResampler: {
      if (_internal_has_push_sox_resampler()) {
        if (!_impl_.message_.push_sox_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kFlushSoxResampler: {
      if (_internal_has_flush_sox_resampler()) {
        if (!_impl_.message_.flush_sox_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kSendChatMessage: {
      if (_internal_has_send_chat_message()) {
        if (!_impl_.message_.send_chat_message_->IsInitialized()) return false;
      }
      break;
    }
    case kEditChatMessage: {
      if (_internal_has_edit_chat_message()) {
        if (!_impl_.message_.edit_chat_message_->IsInitialized()) return false;
      }
      break;
    }
    case kPerformRpc: {
      if (_internal_has_perform_rpc()) {
        if (!_impl_.message_.perform_rpc_->IsInitialized()) return false;
      }
      break;
    }
    case kRegisterRpcMethod: {
      if (_internal_has_register_rpc_method()) {
        if (!_impl_.message_.register_rpc_method_->IsInitialized()) return false;
      }
      break;
    }
    case kUnregisterRpcMethod: {
      if (_internal_has_unregister_rpc_method()) {
        if (!_impl_.message_.unregister_rpc_method_->IsInitialized()) return false;
      }
      break;
    }
    case kRpcMethodInvocationResponse: {
      if (_internal_has_rpc_method_invocation_response()) {
        if (!_impl_.message_.rpc_method_invocation_response_->IsInitialized()) return false;
      }
      break;
    }
    case kEnableRemoteTrackPublication: {
      if (_internal_has_enable_remote_track_publication()) {
        if (!_impl_.message_.enable_remote_track_publication_->IsInitialized()) return false;
      }
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      if (_internal_has_update_remote_track_publication_dimension()) {
        if (!_impl_.message_.update_remote_track_publication_dimension_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamHeader: {
      if (_internal_has_send_stream_header()) {
        if (!_impl_.message_.send_stream_header_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamChunk: {
      if (_internal_has_send_stream_chunk()) {
        if (!_impl_.message_.send_stream_chunk_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamTrailer: {
      if (_internal_has_send_stream_trailer()) {
        if (!_impl_.message_.send_stream_trailer_->IsInitialized()) return false;
      }
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
        if (!_impl_.message_.set_data_channel_buffered_amount_low_threshold_->IsInitialized()) return false;
      }
      break;
    }
    case kLoadAudioFilterPlugin: {
      if (_internal_has_load_audio_filter_plugin()) {
        if (!_impl_.message_.load_audio_filter_plugin_->IsInitialized()) return false;
      }
      break;
    }
    case kNewApm: {
      if (_internal_has_new_apm()) {
        if (!_impl_.message_.new_apm_->IsInitialized()) return false;
      }
      break;
    }
    case kApmProcessStream: {
      if (_internal_has_apm_process_stream()) {
        if (!_impl_.message_.apm_process_stream_->IsInitialized()) return false;
      }
      break;
    }
    case kApmProcessReverseStream: {
      if (_internal_has_apm_process_reverse_stream()) {
        if (!_impl_.message_.apm_process_reverse_stream_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void FfiRequest::InternalSwap(FfiRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FfiRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[0]);
}

// ===================================================================

class FfiResponse::_Internal {
 public:
  static const ::livekit::proto::DisposeResponse& dispose(const FfiResponse* msg);
  static const ::livekit::proto::ConnectResponse& connect(const FfiResponse* msg);
  static const ::livekit::proto::DisconnectResponse& disconnect(const FfiResponse* msg);
  static const ::livekit::proto::PublishTrackResponse& publish_track(const FfiResponse* msg);
  static const ::livekit::proto::UnpublishTrackResponse& unpublish_track(const FfiResponse* msg);
  static const ::livekit::proto::PublishDataResponse& publish_data(const FfiResponse* msg);
  static const ::livekit::proto::SetSubscribedResponse& set_subscribed(const FfiResponse* msg);
  static const ::livekit::proto::SetLocalMetadataResponse& set_local_metadata(const FfiResponse* msg);
  static const ::livekit::proto::SetLocalNameResponse& set_local_name(const FfiResponse* msg);
  static const ::livekit::proto::SetLocalAttributesResponse& set_local_attributes(const FfiResponse* msg);
  static const ::livekit::proto::GetSessionStatsResponse& get_session_stats(const FfiResponse* msg);
  static const ::livekit::proto::PublishTranscriptionResponse& publish_transcription(const FfiResponse* msg);
  static const ::livekit::proto::PublishSipDtmfResponse& publish_sip_dtmf(const FfiResponse* msg);
  static const ::livekit::proto::CreateVideoTrackResponse& create_video_track(const FfiResponse* msg);
  static const ::livekit::proto::CreateAudioTrackResponse& create_audio_track(const FfiResponse* msg);
  static const ::livekit::proto::LocalTrackMuteResponse& local_track_mute(const FfiResponse* msg);
  static const ::livekit::proto::EnableRemoteTrackResponse& enable_remote_track(const FfiResponse* msg);
  static const ::livekit::proto::GetStatsResponse& get_stats(const FfiResponse* msg);
  static const ::livekit::proto::SetTrackSubscriptionPermissionsResponse& set_track_subscription_permissions(const FfiResponse* msg);
  static const ::livekit::proto::NewVideoStreamResponse& new_video_stream(const FfiResponse* msg);
  static const ::livekit::proto::NewVideoSourceResponse& new_video_source(const FfiResponse* msg);
  static const ::livekit::proto::CaptureVideoFrameResponse& capture_video_frame(const FfiResponse* msg);
  static const ::livekit::proto::VideoConvertResponse& video_convert(const FfiResponse* msg);
  static const ::livekit::proto::VideoStreamFromParticipantResponse& video_stream_from_participant(const FfiResponse* msg);
  static const ::livekit::proto::NewAudioStreamResponse& new_audio_stream(const FfiResponse* msg);
  static const ::livekit::proto::NewAudioSourceResponse& new_audio_source(const FfiResponse* msg);
  static const ::livekit::proto::CaptureAudioFrameResponse& capture_audio_frame(const FfiResponse* msg);
  static const ::livekit::proto::ClearAudioBufferResponse& clear_audio_buffer(const FfiResponse* msg);
  static const ::livekit::proto::NewAudioResamplerResponse& new_audio_resampler(const FfiResponse* msg);
  static const ::livekit::proto::RemixAndResampleResponse& remix_and_resample(const FfiResponse* msg);
  static const ::livekit::proto::AudioStreamFromParticipantResponse& audio_stream_from_participant(const FfiResponse* msg);
  static const ::livekit::proto::E2eeResponse& e2ee(const FfiResponse* msg);
  static const ::livekit::proto::NewSoxResamplerResponse& new_sox_resampler(const FfiResponse* msg);
  static const ::livekit::proto::PushSoxResamplerResponse& push_sox_resampler(const FfiResponse* msg);
  static const ::livekit::proto::FlushSoxResamplerResponse& flush_sox_resampler(const FfiResponse* msg);
  static const ::livekit::proto::SendChatMessageResponse& send_chat_message(const FfiResponse* msg);
  static const ::livekit::proto::PerformRpcResponse& perform_rpc(const FfiResponse* msg);
  static const ::livekit::proto::RegisterRpcMethodResponse& register_rpc_method(const FfiResponse* msg);
  static const ::livekit::proto::UnregisterRpcMethodResponse& unregister_rpc_method(const FfiResponse* msg);
  static const ::livekit::proto::RpcMethodInvocationResponseResponse& rpc_method_invocation_response(const FfiResponse* msg);
  static const ::livekit::proto::EnableRemoteTrackPublicationResponse& enable_remote_track_publication(const FfiResponse* msg);
  static const ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse& update_remote_track_publication_dimension(const FfiResponse* msg);
  static const ::livekit::proto::SendStreamHeaderResponse& send_stream_header(const FfiResponse* msg);
  static const ::livekit::proto::SendStreamChunkResponse& send_stream_chunk(const FfiResponse* msg);
  static const ::livekit::proto::SendStreamTrailerResponse& send_stream_trailer(const FfiResponse* msg);
  static const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse& set_data_channel_buffered_amount_low_threshold(const FfiResponse* msg);
  static const ::livekit::proto::LoadAudioFilterPluginResponse& load_audio_filter_plugin(const FfiResponse* msg);
  static const ::livekit::proto::NewApmResponse& new_apm(const FfiResponse* msg);
  static const ::livekit::proto::ApmProcessStreamResponse& apm_process_stream(const FfiResponse* msg);
  static const ::livekit::proto::ApmProcessReverseStreamResponse& apm_process_reverse_stream(const FfiResponse* msg);
};

const ::livekit::proto::DisposeResponse&
FfiResponse::_Internal::dispose(const FfiResponse* msg) {
  return *msg->_impl_.message_.dispose_;
}
const ::livekit::proto::ConnectResponse&
FfiResponse::_Internal::connect(const FfiResponse* msg) {
  return *msg->_impl_.message_.connect_;
}
const ::livekit::proto::DisconnectResponse&
FfiResponse::_Internal::disconnect(const FfiResponse* msg) {
  return *msg->_impl_.message_.disconnect_;
}
const ::livekit::proto::PublishTrackResponse&
FfiResponse::_Internal::publish_track(const FfiResponse* msg) {
  return *msg->_impl_.message_.publish_track_;
}
const ::livekit::proto::UnpublishTrackResponse&
FfiResponse::_Internal::unpublish_track(const FfiResponse* msg) {
  return *msg->_impl_.message_.unpublish_track_;
}
const ::livekit::proto::PublishDataResponse&
FfiResponse::_Internal::publish_data(const FfiResponse* msg) {
  return *msg->_impl_.message_.publish_data_;
}
const ::livekit::proto::SetSubscribedResponse&
FfiResponse::_Internal::set_subscribed(const FfiResponse* msg) {
  return *msg->_impl_.message_.set_subscribed_;
}
const ::livekit::proto::SetLocalMetadataResponse&
FfiResponse::_Internal::set_local_metadata(const FfiResponse* msg) {
  return *msg->_impl_.message_.set_local_metadata_;
}
const ::livekit::proto::SetLocalNameResponse&
FfiResponse::_Internal::set_local_name(const FfiResponse* msg) {
  return *msg->_impl_.message_.set_local_name_;
}
const ::livekit::proto::SetLocalAttributesResponse&
FfiResponse::_Internal::set_local_attributes(const FfiResponse* msg) {
  return *msg->_impl_.message_.set_local_attributes_;
}
const ::livekit::proto::GetSessionStatsResponse&
FfiResponse::_Internal::get_session_stats(const FfiResponse* msg) {
  return *msg->_impl_.message_.get_session_stats_;
}
const ::livekit::proto::PublishTranscriptionResponse&
FfiResponse::_Internal::publish_transcription(const FfiResponse* msg) {
  return *msg->_impl_.message_.publish_transcription_;
}
const ::livekit::proto::PublishSipDtmfResponse&
FfiResponse::_Internal::publish_sip_dtmf(const FfiResponse* msg) {
  return *msg->_impl_.message_.publish_sip_dtmf_;
}
const ::livekit::proto::CreateVideoTrackResponse&
FfiResponse::_Internal::create_video_track(const FfiResponse* msg) {
  return *msg->_impl_.message_.create_video_track_;
}
const ::livekit::proto::CreateAudioTrackResponse&
FfiResponse::_Internal::create_audio_track(const FfiResponse* msg) {
  return *msg->_impl_.message_.create_audio_track_;
}
const ::livekit::proto::LocalTrackMuteResponse&
FfiResponse::_Internal::local_track_mute(const FfiResponse* msg) {
  return *msg->_impl_.message_.local_track_mute_;
}
const ::livekit::proto::EnableRemoteTrackResponse&
FfiResponse::_Internal::enable_remote_track(const FfiResponse* msg) {
  return *msg->_impl_.message_.enable_remote_track_;
}
const ::livekit::proto::GetStatsResponse&
FfiResponse::_Internal::get_stats(const FfiResponse* msg) {
  return *msg->_impl_.message_.get_stats_;
}
const ::livekit::proto::SetTrackSubscriptionPermissionsResponse&
FfiResponse::_Internal::set_track_subscription_permissions(const FfiResponse* msg) {
  return *msg->_impl_.message_.set_track_subscription_permissions_;
}
const ::livekit::proto::NewVideoStreamResponse&
FfiResponse::_Internal::new_video_stream(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_video_stream_;
}
const ::livekit::proto::NewVideoSourceResponse&
FfiResponse::_Internal::new_video_source(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_video_source_;
}
const ::livekit::proto::CaptureVideoFrameResponse&
FfiResponse::_Internal::capture_video_frame(const FfiResponse* msg) {
  return *msg->_impl_.message_.capture_video_frame_;
}
const ::livekit::proto::VideoConvertResponse&
FfiResponse::_Internal::video_convert(const FfiResponse* msg) {
  return *msg->_impl_.message_.video_convert_;
}
const ::livekit::proto::VideoStreamFromParticipantResponse&
FfiResponse::_Internal::video_stream_from_participant(const FfiResponse* msg) {
  return *msg->_impl_.message_.video_stream_from_participant_;
}
const ::livekit::proto::NewAudioStreamResponse&
FfiResponse::_Internal::new_audio_stream(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_audio_stream_;
}
const ::livekit::proto::NewAudioSourceResponse&
FfiResponse::_Internal::new_audio_source(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_audio_source_;
}
const ::livekit::proto::CaptureAudioFrameResponse&
FfiResponse::_Internal::capture_audio_frame(const FfiResponse* msg) {
  return *msg->_impl_.message_.capture_audio_frame_;
}
const ::livekit::proto::ClearAudioBufferResponse&
FfiResponse::_Internal::clear_audio_buffer(const FfiResponse* msg) {
  return *msg->_impl_.message_.clear_audio_buffer_;
}
const ::livekit::proto::NewAudioResamplerResponse&
FfiResponse::_Internal::new_audio_resampler(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_audio_resampler_;
}
const ::livekit::proto::RemixAndResampleResponse&
FfiResponse::_Internal::remix_and_resample(const FfiResponse* msg) {
  return *msg->_impl_.message_.remix_and_resample_;
}
const ::livekit::proto::AudioStreamFromParticipantResponse&
FfiResponse::_Internal::audio_stream_from_participant(const FfiResponse* msg) {
  return *msg->_impl_.message_.audio_stream_from_participant_;
}
const ::livekit::proto::E2eeResponse&
FfiResponse::_Internal::e2ee(const FfiResponse* msg) {
  return *msg->_impl_.message_.e2ee_;
}
const ::livekit::proto::NewSoxResamplerResponse&
FfiResponse::_Internal::new_sox_resampler(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_sox_resampler_;
}
const ::livekit::proto::PushSoxResamplerResponse&
FfiResponse::_Internal::push_sox_resampler(const FfiResponse* msg) {
  return *msg->_impl_.message_.push_sox_resampler_;
}
const ::livekit::proto::FlushSoxResamplerResponse&
FfiResponse::_Internal::flush_sox_resampler(const FfiResponse* msg) {
  return *msg->_impl_.message_.flush_sox_resampler_;
}
const ::livekit::proto::SendChatMessageResponse&
FfiResponse::_Internal::send_chat_message(const FfiResponse* msg) {
  return *msg->_impl_.message_.send_chat_message_;
}
const ::livekit::proto::PerformRpcResponse&
FfiResponse::_Internal::perform_rpc(const FfiResponse* msg) {
  return *msg->_impl_.message_.perform_rpc_;
}
const ::livekit::proto::RegisterRpcMethodResponse&
FfiResponse::_Internal::register_rpc_method(const FfiResponse* msg) {
  return *msg->_impl_.message_.register_rpc_method_;
}
const ::livekit::proto::UnregisterRpcMethodResponse&
FfiResponse::_Internal::unregister_rpc_method(const FfiResponse* msg) {
  return *msg->_impl_.message_.unregister_rpc_method_;
}
const ::livekit::proto::RpcMethodInvocationResponseResponse&
FfiResponse::_Internal::rpc_method_invocation_response(const FfiResponse* msg) {
  return *msg->_impl_.message_.rpc_method_invocation_response_;
}
const ::livekit::proto::EnableRemoteTrackPublicationResponse&
FfiResponse::_Internal::enable_remote_track_publication(const FfiResponse* msg) {
  return *msg->_impl_.message_.enable_remote_track_publication_;
}
const ::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse&
FfiResponse::_Internal::update_remote_track_publication_dimension(const FfiResponse* msg) {
  return *msg->_impl_.message_.update_remote_track_publication_dimension_;
}
const ::livekit::proto::SendStreamHeaderResponse&
FfiResponse::_Internal::send_stream_header(const FfiResponse* msg) {
  return *msg->_impl_.message_.send_stream_header_;
}
const ::livekit::proto::SendStreamChunkResponse&
FfiResponse::_Internal::send_stream_chunk(const FfiResponse* msg) {
  return *msg->_impl_.message_.send_stream_chunk_;
}
const ::livekit::proto::SendStreamTrailerResponse&
FfiResponse::_Internal::send_stream_trailer(const FfiResponse* msg) {
  return *msg->_impl_.message_.send_stream_trailer_;
}
const ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse&
FfiResponse::_Internal::set_data_channel_buffered_amount_low_threshold(const FfiResponse* msg) {
  return *msg->_impl_.message_.set_data_channel_buffered_amount_low_threshold_;
}
const ::livekit::proto::LoadAudioFilterPluginResponse&
FfiResponse::_Internal::load_audio_filter_plugin(const FfiResponse* msg) {
  return *msg->_impl_.message_.load_audio_filter_plugin_;
}
const ::livekit::proto::NewApmResponse&
FfiResponse::_Internal::new_apm(const FfiResponse* msg) {
  return *msg->_impl_.message_.new_apm_;
}
const ::livekit::proto::ApmProcessStreamResponse&
FfiResponse::_Internal::apm_process_stream(const FfiResponse* msg) {
  return *msg->_impl_.message_.apm_process_stream_;
}
const ::livekit::proto::ApmProcessReverseStreamResponse&
FfiResponse::_Internal::apm_process_reverse_stream(const FfiResponse* msg) {
  return *msg->_impl_.message_.apm_process_reverse_stream_;
}
void FfiResponse::set_allocated_dispose(::livekit::proto::DisposeResponse* dispose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (dispose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dispose);
    if (message_arena != submessage_arena) {
      dispose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispose, submessage_arena);
    }
    set_has_dispose();
    _impl_.message_.dispose_ = dispose;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.dispose)
}
void FfiResponse::set_allocated_connect(::livekit::proto::ConnectResponse* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connect));
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.connect)
}
void FfiResponse::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.connect_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_disconnect(::livekit::proto::DisconnectResponse* disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disconnect));
    if (message_arena != submessage_arena) {
      disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    _impl_.message_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.disconnect)
}
void FfiResponse::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.disconnect_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_publish_track(::livekit::proto::PublishTrackResponse* publish_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_track));
    if (message_arena != submessage_arena) {
      publish_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_track, submessage_arena);
    }
    set_has_publish_track();
    _impl_.message_.publish_track_ = publish_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.publish_track)
}
void FfiResponse::clear_publish_track() {
  if (_internal_has_publish_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_track_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_unpublish_track(::livekit::proto::UnpublishTrackResponse* unpublish_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (unpublish_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unpublish_track));
    if (message_arena != submessage_arena) {
      unpublish_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unpublish_track, submessage_arena);
    }
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = unpublish_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.unpublish_track)
}
void FfiResponse::clear_unpublish_track() {
  if (_internal_has_unpublish_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.unpublish_track_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_publish_data(::livekit::proto::PublishDataResponse* publish_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_data));
    if (message_arena != submessage_arena) {
      publish_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_data, submessage_arena);
    }
    set_has_publish_data();
    _impl_.message_.publish_data_ = publish_data;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.publish_data)
}
void FfiResponse::clear_publish_data() {
  if (_internal_has_publish_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_data_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_set_subscribed(::livekit::proto::SetSubscribedResponse* set_subscribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_subscribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_subscribed));
    if (message_arena != submessage_arena) {
      set_subscribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_subscribed, submessage_arena);
    }
    set_has_set_subscribed();
    _impl_.message_.set_subscribed_ = set_subscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.set_subscribed)
}
void FfiResponse::clear_set_subscribed() {
  if (_internal_has_set_subscribed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_subscribed_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataResponse* set_local_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_metadata));
    if (message_arena != submessage_arena) {
      set_local_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_metadata, submessage_arena);
    }
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = set_local_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.set_local_metadata)
}
void FfiResponse::clear_set_local_metadata() {
  if (_internal_has_set_local_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_metadata_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_set_local_name(::livekit::proto::SetLocalNameResponse* set_local_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_name));
    if (message_arena != submessage_arena) {
      set_local_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_name, submessage_arena);
    }
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = set_local_name;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.set_local_name)
}
void FfiResponse::clear_set_local_name() {
  if (_internal_has_set_local_name()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_name_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesResponse* set_local_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_attributes));
    if (message_arena != submessage_arena) {
      set_local_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_attributes, submessage_arena);
    }
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = set_local_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.set_local_attributes)
}
void FfiResponse::clear_set_local_attributes() {
  if (_internal_has_set_local_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_attributes_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_get_session_stats(::livekit::proto::GetSessionStatsResponse* get_session_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (get_session_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_session_stats));
    if (message_arena != submessage_arena) {
      get_session_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_session_stats, submessage_arena);
    }
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = get_session_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.get_session_stats)
}
void FfiResponse::clear_get_session_stats() {
  if (_internal_has_get_session_stats()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.get_session_stats_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionResponse* publish_transcription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_transcription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_transcription));
    if (message_arena != submessage_arena) {
      publish_transcription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_transcription, submessage_arena);
    }
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = publish_transcription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.publish_transcription)
}
void FfiResponse::clear_publish_transcription() {
  if (_internal_has_publish_transcription()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_transcription_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfResponse* publish_sip_dtmf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_sip_dtmf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_sip_dtmf));
    if (message_arena != submessage_arena) {
      publish_sip_dtmf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_sip_dtmf, submessage_arena);
    }
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = publish_sip_dtmf;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.publish_sip_dtmf)
}
void FfiResponse::clear_publish_sip_dtmf() {
  if (_internal_has_publish_sip_dtmf()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_sip_dtmf_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_create_video_track(::livekit::proto::CreateVideoTrackResponse* create_video_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (create_video_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_video_track));
    if (message_arena != submessage_arena) {
      create_video_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_video_track, submessage_arena);
    }
    set_has_create_video_track();
    _impl_.message_.create_video_track_ = create_video_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.create_video_track)
}
void FfiResponse::clear_create_video_track() {
  if (_internal_has_create_video_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.create_video_track_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_create_audio_track(::livekit::proto::CreateAudioTrackResponse* create_audio_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (create_audio_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_audio_track));
    if (message_arena != submessage_arena) {
      create_audio_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_audio_track, submessage_arena);
    }
    set_has_create_audio_track();
    _impl_.message_.create_audio_track_ = create_audio_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.create_audio_track)
}
void FfiResponse::clear_create_audio_track() {
  if (_internal_has_create_audio_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.create_audio_track_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_local_track_mute(::livekit::proto::LocalTrackMuteResponse* local_track_mute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (local_track_mute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_track_mute));
    if (message_arena != submessage_arena) {
      local_track_mute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_track_mute, submessage_arena);
    }
    set_has_local_track_mute();
    _impl_.message_.local_track_mute_ = local_track_mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.local_track_mute)
}
void FfiResponse::clear_local_track_mute() {
  if (_internal_has_local_track_mute()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.local_track_mute_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_enable_remote_track(::livekit::proto::EnableRemoteTrackResponse* enable_remote_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (enable_remote_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_remote_track));
    if (message_arena != submessage_arena) {
      enable_remote_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_remote_track, submessage_arena);
    }
    set_has_enable_remote_track();
    _impl_.message_.enable_remote_track_ = enable_remote_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.enable_remote_track)
}
void FfiResponse::clear_enable_remote_track() {
  if (_internal_has_enable_remote_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.enable_remote_track_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_get_stats(::livekit::proto::GetStatsResponse* get_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (get_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_stats));
    if (message_arena != submessage_arena) {
      get_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_stats, submessage_arena);
    }
    set_has_get_stats();
    _impl_.message_.get_stats_ = get_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.get_stats)
}
void FfiResponse::clear_get_stats() {
  if (_internal_has_get_stats()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.get_stats_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_set_track_subscription_permissions(::livekit::proto::SetTrackSubscriptionPermissionsResponse* set_track_subscription_permissions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_track_subscription_permissions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_track_subscription_permissions));
    if (message_arena != submessage_arena) {
      set_track_subscription_permissions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_track_subscription_permissions, submessage_arena);
    }
    set_has_set_track_subscription_permissions();
    _impl_.message_.set_track_subscription_permissions_ = set_track_subscription_permissions;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.set_track_subscription_permissions)
}
void FfiResponse::clear_set_track_subscription_permissions() {
  if (_internal_has_set_track_subscription_permissions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_track_subscription_permissions_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_video_stream(::livekit::proto::NewVideoStreamResponse* new_video_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_video_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_video_stream));
    if (message_arena != submessage_arena) {
      new_video_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_video_stream, submessage_arena);
    }
    set_has_new_video_stream();
    _impl_.message_.new_video_stream_ = new_video_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_video_stream)
}
void FfiResponse::clear_new_video_stream() {
  if (_internal_has_new_video_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_video_stream_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_video_source(::livekit::proto::NewVideoSourceResponse* new_video_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_video_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_video_source));
    if (message_arena != submessage_arena) {
      new_video_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_video_source, submessage_arena);
    }
    set_has_new_video_source();
    _impl_.message_.new_video_source_ = new_video_source;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_video_source)
}
void FfiResponse::clear_new_video_source() {
  if (_internal_has_new_video_source()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_video_source_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_capture_video_frame(::livekit::proto::CaptureVideoFrameResponse* capture_video_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (capture_video_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_video_frame));
    if (message_arena != submessage_arena) {
      capture_video_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_video_frame, submessage_arena);
    }
    set_has_capture_video_frame();
    _impl_.message_.capture_video_frame_ = capture_video_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.capture_video_frame)
}
void FfiResponse::clear_capture_video_frame() {
  if (_internal_has_capture_video_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.capture_video_frame_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_video_convert(::livekit::proto::VideoConvertResponse* video_convert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (video_convert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_convert));
    if (message_arena != submessage_arena) {
      video_convert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_convert, submessage_arena);
    }
    set_has_video_convert();
    _impl_.message_.video_convert_ = video_convert;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.video_convert)
}
void FfiResponse::clear_video_convert() {
  if (_internal_has_video_convert()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.video_convert_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_video_stream_from_participant(::livekit::proto::VideoStreamFromParticipantResponse* video_stream_from_participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (video_stream_from_participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_stream_from_participant));
    if (message_arena != submessage_arena) {
      video_stream_from_participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_from_participant, submessage_arena);
    }
    set_has_video_stream_from_participant();
    _impl_.message_.video_stream_from_participant_ = video_stream_from_participant;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.video_stream_from_participant)
}
void FfiResponse::clear_video_stream_from_participant() {
  if (_internal_has_video_stream_from_participant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.video_stream_from_participant_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_audio_stream(::livekit::proto::NewAudioStreamResponse* new_audio_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_audio_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_audio_stream));
    if (message_arena != submessage_arena) {
      new_audio_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_audio_stream, submessage_arena);
    }
    set_has_new_audio_stream();
    _impl_.message_.new_audio_stream_ = new_audio_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_audio_stream)
}
void FfiResponse::clear_new_audio_stream() {
  if (_internal_has_new_audio_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_audio_stream_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_audio_source(::livekit::proto::NewAudioSourceResponse* new_audio_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_audio_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_audio_source));
    if (message_arena != submessage_arena) {
      new_audio_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_audio_source, submessage_arena);
    }
    set_has_new_audio_source();
    _impl_.message_.new_audio_source_ = new_audio_source;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_audio_source)
}
void FfiResponse::clear_new_audio_source() {
  if (_internal_has_new_audio_source()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_audio_source_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameResponse* capture_audio_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (capture_audio_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_audio_frame));
    if (message_arena != submessage_arena) {
      capture_audio_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_audio_frame, submessage_arena);
    }
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = capture_audio_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.capture_audio_frame)
}
void FfiResponse::clear_capture_audio_frame() {
  if (_internal_has_capture_audio_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.capture_audio_frame_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_clear_audio_buffer(::livekit::proto::ClearAudioBufferResponse* clear_audio_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (clear_audio_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_audio_buffer));
    if (message_arena != submessage_arena) {
      clear_audio_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_audio_buffer, submessage_arena);
    }
    set_has_clear_audio_buffer();
    _impl_.message_.clear_audio_buffer_ = clear_audio_buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.clear_audio_buffer)
}
void FfiResponse::clear_clear_audio_buffer() {
  if (_internal_has_clear_audio_buffer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.clear_audio_buffer_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_audio_resampler(::livekit::proto::NewAudioResamplerResponse* new_audio_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_audio_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_audio_resampler));
    if (message_arena != submessage_arena) {
      new_audio_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_audio_resampler, submessage_arena);
    }
    set_has_new_audio_resampler();
    _impl_.message_.new_audio_resampler_ = new_audio_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_audio_resampler)
}
void FfiResponse::clear_new_audio_resampler() {
  if (_internal_has_new_audio_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_audio_resampler_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_remix_and_resample(::livekit::proto::RemixAndResampleResponse* remix_and_resample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (remix_and_resample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remix_and_resample));
    if (message_arena != submessage_arena) {
      remix_and_resample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remix_and_resample, submessage_arena);
    }
    set_has_remix_and_resample();
    _impl_.message_.remix_and_resample_ = remix_and_resample;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.remix_and_resample)
}
void FfiResponse::clear_remix_and_resample() {
  if (_internal_has_remix_and_resample()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.remix_and_resample_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_audio_stream_from_participant(::livekit::proto::AudioStreamFromParticipantResponse* audio_stream_from_participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (audio_stream_from_participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_stream_from_participant));
    if (message_arena != submessage_arena) {
      audio_stream_from_participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_stream_from_participant, submessage_arena);
    }
    set_has_audio_stream_from_participant();
    _impl_.message_.audio_stream_from_participant_ = audio_stream_from_participant;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.audio_stream_from_participant)
}
void FfiResponse::clear_audio_stream_from_participant() {
  if (_internal_has_audio_stream_from_participant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.audio_stream_from_participant_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_e2ee(::livekit::proto::E2eeResponse* e2ee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (e2ee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2ee));
    if (message_arena != submessage_arena) {
      e2ee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e2ee, submessage_arena);
    }
    set_has_e2ee();
    _impl_.message_.e2ee_ = e2ee;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.e2ee)
}
void FfiResponse::clear_e2ee() {
  if (_internal_has_e2ee()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.e2ee_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_sox_resampler(::livekit::proto::NewSoxResamplerResponse* new_sox_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_sox_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_sox_resampler));
    if (message_arena != submessage_arena) {
      new_sox_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_sox_resampler, submessage_arena);
    }
    set_has_new_sox_resampler();
    _impl_.message_.new_sox_resampler_ = new_sox_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_sox_resampler)
}
void FfiResponse::clear_new_sox_resampler() {
  if (_internal_has_new_sox_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_sox_resampler_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_push_sox_resampler(::livekit::proto::PushSoxResamplerResponse* push_sox_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (push_sox_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(push_sox_resampler));
    if (message_arena != submessage_arena) {
      push_sox_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_sox_resampler, submessage_arena);
    }
    set_has_push_sox_resampler();
    _impl_.message_.push_sox_resampler_ = push_sox_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.push_sox_resampler)
}
void FfiResponse::clear_push_sox_resampler() {
  if (_internal_has_push_sox_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.push_sox_resampler_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_flush_sox_resampler(::livekit::proto::FlushSoxResamplerResponse* flush_sox_resampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (flush_sox_resampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flush_sox_resampler));
    if (message_arena != submessage_arena) {
      flush_sox_resampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush_sox_resampler, submessage_arena);
    }
    set_has_flush_sox_resampler();
    _impl_.message_.flush_sox_resampler_ = flush_sox_resampler;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.flush_sox_resampler)
}
void FfiResponse::clear_flush_sox_resampler() {
  if (_internal_has_flush_sox_resampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.flush_sox_resampler_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_send_chat_message(::livekit::proto::SendChatMessageResponse* send_chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_chat_message));
    if (message_arena != submessage_arena) {
      send_chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_chat_message, submessage_arena);
    }
    set_has_send_chat_message();
    _impl_.message_.send_chat_message_ = send_chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.send_chat_message)
}
void FfiResponse::clear_send_chat_message() {
  if (_internal_has_send_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_chat_message_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_perform_rpc(::livekit::proto::PerformRpcResponse* perform_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (perform_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_rpc));
    if (message_arena != submessage_arena) {
      perform_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_rpc, submessage_arena);
    }
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = perform_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.perform_rpc)
}
void FfiResponse::clear_perform_rpc() {
  if (_internal_has_perform_rpc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.perform_rpc_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_register_rpc_method(::livekit::proto::RegisterRpcMethodResponse* register_rpc_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (register_rpc_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_rpc_method));
    if (message_arena != submessage_arena) {
      register_rpc_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_rpc_method, submessage_arena);
    }
    set_has_register_rpc_method();
    _impl_.message_.register_rpc_method_ = register_rpc_method;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.register_rpc_method)
}
void FfiResponse::clear_register_rpc_method() {
  if (_internal_has_register_rpc_method()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.register_rpc_method_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_unregister_rpc_method(::livekit::proto::UnregisterRpcMethodResponse* unregister_rpc_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (unregister_rpc_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unregister_rpc_method));
    if (message_arena != submessage_arena) {
      unregister_rpc_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unregister_rpc_method, submessage_arena);
    }
    set_has_unregister_rpc_method();
    _impl_.message_.unregister_rpc_method_ = unregister_rpc_method;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.unregister_rpc_method)
}
void FfiResponse::clear_unregister_rpc_method() {
  if (_internal_has_unregister_rpc_method()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.unregister_rpc_method_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_rpc_method_invocation_response(::livekit::proto::RpcMethodInvocationResponseResponse* rpc_method_invocation_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (rpc_method_invocation_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc_method_invocation_response));
    if (message_arena != submessage_arena) {
      rpc_method_invocation_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_method_invocation_response, submessage_arena);
    }
    set_has_rpc_method_invocation_response();
    _impl_.message_.rpc_method_invocation_response_ = rpc_method_invocation_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.rpc_method_invocation_response)
}
void FfiResponse::clear_rpc_method_invocation_response() {
  if (_internal_has_rpc_method_invocation_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rpc_method_invocation_response_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_enable_remote_track_publication(::livekit::proto::EnableRemoteTrackPublicationResponse* enable_remote_track_publication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (enable_remote_track_publication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_remote_track_publication));
    if (message_arena != submessage_arena) {
      enable_remote_track_publication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_remote_track_publication, submessage_arena);
    }
    set_has_enable_remote_track_publication();
    _impl_.message_.enable_remote_track_publication_ = enable_remote_track_publication;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.enable_remote_track_publication)
}
void FfiResponse::clear_enable_remote_track_publication() {
  if (_internal_has_enable_remote_track_publication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.enable_remote_track_publication_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_update_remote_track_publication_dimension(::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse* update_remote_track_publication_dimension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_remote_track_publication_dimension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_remote_track_publication_dimension));
    if (message_arena != submessage_arena) {
      update_remote_track_publication_dimension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_remote_track_publication_dimension, submessage_arena);
    }
    set_has_update_remote_track_publication_dimension();
    _impl_.message_.update_remote_track_publication_dimension_ = update_remote_track_publication_dimension;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.update_remote_track_publication_dimension)
}
void FfiResponse::clear_update_remote_track_publication_dimension() {
  if (_internal_has_update_remote_track_publication_dimension()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.update_remote_track_publication_dimension_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderResponse* send_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_header));
    if (message_arena != submessage_arena) {
      send_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_header, submessage_arena);
    }
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = send_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.send_stream_header)
}
void FfiResponse::clear_send_stream_header() {
  if (_internal_has_send_stream_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_header_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkResponse* send_stream_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_chunk));
    if (message_arena != submessage_arena) {
      send_stream_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_chunk, submessage_arena);
    }
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = send_stream_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.send_stream_chunk)
}
void FfiResponse::clear_send_stream_chunk() {
  if (_internal_has_send_stream_chunk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_chunk_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerResponse* send_stream_trailer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_trailer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_trailer));
    if (message_arena != submessage_arena) {
      send_stream_trailer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_trailer, submessage_arena);
    }
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = send_stream_trailer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.send_stream_trailer)
}
void FfiResponse::clear_send_stream_trailer() {
  if (_internal_has_send_stream_trailer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_trailer_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_set_data_channel_buffered_amount_low_threshold(::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse* set_data_channel_buffered_amount_low_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_data_channel_buffered_amount_low_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_data_channel_buffered_amount_low_threshold));
    if (message_arena != submessage_arena) {
      set_data_channel_buffered_amount_low_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_data_channel_buffered_amount_low_threshold, submessage_arena);
    }
    set_has_set_data_channel_buffered_amount_low_threshold();
    _impl_.message_.set_data_channel_buffered_amount_low_threshold_ = set_data_channel_buffered_amount_low_threshold;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.set_data_channel_buffered_amount_low_threshold)
}
void FfiResponse::clear_set_data_channel_buffered_amount_low_threshold() {
  if (_internal_has_set_data_channel_buffered_amount_low_threshold()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_load_audio_filter_plugin(::livekit::proto::LoadAudioFilterPluginResponse* load_audio_filter_plugin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (load_audio_filter_plugin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_audio_filter_plugin));
    if (message_arena != submessage_arena) {
      load_audio_filter_plugin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_audio_filter_plugin, submessage_arena);
    }
    set_has_load_audio_filter_plugin();
    _impl_.message_.load_audio_filter_plugin_ = load_audio_filter_plugin;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.load_audio_filter_plugin)
}
void FfiResponse::clear_load_audio_filter_plugin() {
  if (_internal_has_load_audio_filter_plugin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.load_audio_filter_plugin_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_new_apm(::livekit::proto::NewApmResponse* new_apm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (new_apm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_apm));
    if (message_arena != submessage_arena) {
      new_apm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_apm, submessage_arena);
    }
    set_has_new_apm();
    _impl_.message_.new_apm_ = new_apm;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.new_apm)
}
void FfiResponse::clear_new_apm() {
  if (_internal_has_new_apm()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.new_apm_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_apm_process_stream(::livekit::proto::ApmProcessStreamResponse* apm_process_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (apm_process_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apm_process_stream));
    if (message_arena != submessage_arena) {
      apm_process_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apm_process_stream, submessage_arena);
    }
    set_has_apm_process_stream();
    _impl_.message_.apm_process_stream_ = apm_process_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.apm_process_stream)
}
void FfiResponse::clear_apm_process_stream() {
  if (_internal_has_apm_process_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.apm_process_stream_;
    }
    clear_has_message();
  }
}
void FfiResponse::set_allocated_apm_process_reverse_stream(::livekit::proto::ApmProcessReverseStreamResponse* apm_process_reverse_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (apm_process_reverse_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apm_process_reverse_stream));
    if (message_arena != submessage_arena) {
      apm_process_reverse_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apm_process_reverse_stream, submessage_arena);
    }
    set_has_apm_process_reverse_stream();
    _impl_.message_.apm_process_reverse_stream_ = apm_process_reverse_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiResponse.apm_process_reverse_stream)
}
void FfiResponse::clear_apm_process_reverse_stream() {
  if (_internal_has_apm_process_reverse_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.apm_process_reverse_stream_;
    }
    clear_has_message();
  }
}
FfiResponse::FfiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.FfiResponse)
}
FfiResponse::FfiResponse(const FfiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FfiResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kDispose: {
      _this->_internal_mutable_dispose()->::livekit::proto::DisposeResponse::MergeFrom(
          from._internal_dispose());
      break;
    }
    case kConnect: {
      _this->_internal_mutable_connect()->::livekit::proto::ConnectResponse::MergeFrom(
          from._internal_connect());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::livekit::proto::DisconnectResponse::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kPublishTrack: {
      _this->_internal_mutable_publish_track()->::livekit::proto::PublishTrackResponse::MergeFrom(
          from._internal_publish_track());
      break;
    }
    case kUnpublishTrack: {
      _this->_internal_mutable_unpublish_track()->::livekit::proto::UnpublishTrackResponse::MergeFrom(
          from._internal_unpublish_track());
      break;
    }
    case kPublishData: {
      _this->_internal_mutable_publish_data()->::livekit::proto::PublishDataResponse::MergeFrom(
          from._internal_publish_data());
      break;
    }
    case kSetSubscribed: {
      _this->_internal_mutable_set_subscribed()->::livekit::proto::SetSubscribedResponse::MergeFrom(
          from._internal_set_subscribed());
      break;
    }
    case kSetLocalMetadata: {
      _this->_internal_mutable_set_local_metadata()->::livekit::proto::SetLocalMetadataResponse::MergeFrom(
          from._internal_set_local_metadata());
      break;
    }
    case kSetLocalName: {
      _this->_internal_mutable_set_local_name()->::livekit::proto::SetLocalNameResponse::MergeFrom(
          from._internal_set_local_name());
      break;
    }
    case kSetLocalAttributes: {
      _this->_internal_mutable_set_local_attributes()->::livekit::proto::SetLocalAttributesResponse::MergeFrom(
          from._internal_set_local_attributes());
      break;
    }
    case kGetSessionStats: {
      _this->_internal_mutable_get_session_stats()->::livekit::proto::GetSessionStatsResponse::MergeFrom(
          from._internal_get_session_stats());
      break;
    }
    case kPublishTranscription: {
      _this->_internal_mutable_publish_transcription()->::livekit::proto::PublishTranscriptionResponse::MergeFrom(
          from._internal_publish_transcription());
      break;
    }
    case kPublishSipDtmf: {
      _this->_internal_mutable_publish_sip_dtmf()->::livekit::proto::PublishSipDtmfResponse::MergeFrom(
          from._internal_publish_sip_dtmf());
      break;
    }
    case kCreateVideoTrack: {
      _this->_internal_mutable_create_video_track()->::livekit::proto::CreateVideoTrackResponse::MergeFrom(
          from._internal_create_video_track());
      break;
    }
    case kCreateAudioTrack: {
      _this->_internal_mutable_create_audio_track()->::livekit::proto::CreateAudioTrackResponse::MergeFrom(
          from._internal_create_audio_track());
      break;
    }
    case kLocalTrackMute: {
      _this->_internal_mutable_local_track_mute()->::livekit::proto::LocalTrackMuteResponse::MergeFrom(
          from._internal_local_track_mute());
      break;
    }
    case kEnableRemoteTrack: {
      _this->_internal_mutable_enable_remote_track()->::livekit::proto::EnableRemoteTrackResponse::MergeFrom(
          from._internal_enable_remote_track());
      break;
    }
    case kGetStats: {
      _this->_internal_mutable_get_stats()->::livekit::proto::GetStatsResponse::MergeFrom(
          from._internal_get_stats());
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      _this->_internal_mutable_set_track_subscription_permissions()->::livekit::proto::SetTrackSubscriptionPermissionsResponse::MergeFrom(
          from._internal_set_track_subscription_permissions());
      break;
    }
    case kNewVideoStream: {
      _this->_internal_mutable_new_video_stream()->::livekit::proto::NewVideoStreamResponse::MergeFrom(
          from._internal_new_video_stream());
      break;
    }
    case kNewVideoSource: {
      _this->_internal_mutable_new_video_source()->::livekit::proto::NewVideoSourceResponse::MergeFrom(
          from._internal_new_video_source());
      break;
    }
    case kCaptureVideoFrame: {
      _this->_internal_mutable_capture_video_frame()->::livekit::proto::CaptureVideoFrameResponse::MergeFrom(
          from._internal_capture_video_frame());
      break;
    }
    case kVideoConvert: {
      _this->_internal_mutable_video_convert()->::livekit::proto::VideoConvertResponse::MergeFrom(
          from._internal_video_convert());
      break;
    }
    case kVideoStreamFromParticipant: {
      _this->_internal_mutable_video_stream_from_participant()->::livekit::proto::VideoStreamFromParticipantResponse::MergeFrom(
          from._internal_video_stream_from_participant());
      break;
    }
    case kNewAudioStream: {
      _this->_internal_mutable_new_audio_stream()->::livekit::proto::NewAudioStreamResponse::MergeFrom(
          from._internal_new_audio_stream());
      break;
    }
    case kNewAudioSource: {
      _this->_internal_mutable_new_audio_source()->::livekit::proto::NewAudioSourceResponse::MergeFrom(
          from._internal_new_audio_source());
      break;
    }
    case kCaptureAudioFrame: {
      _this->_internal_mutable_capture_audio_frame()->::livekit::proto::CaptureAudioFrameResponse::MergeFrom(
          from._internal_capture_audio_frame());
      break;
    }
    case kClearAudioBuffer: {
      _this->_internal_mutable_clear_audio_buffer()->::livekit::proto::ClearAudioBufferResponse::MergeFrom(
          from._internal_clear_audio_buffer());
      break;
    }
    case kNewAudioResampler: {
      _this->_internal_mutable_new_audio_resampler()->::livekit::proto::NewAudioResamplerResponse::MergeFrom(
          from._internal_new_audio_resampler());
      break;
    }
    case kRemixAndResample: {
      _this->_internal_mutable_remix_and_resample()->::livekit::proto::RemixAndResampleResponse::MergeFrom(
          from._internal_remix_and_resample());
      break;
    }
    case kAudioStreamFromParticipant: {
      _this->_internal_mutable_audio_stream_from_participant()->::livekit::proto::AudioStreamFromParticipantResponse::MergeFrom(
          from._internal_audio_stream_from_participant());
      break;
    }
    case kE2Ee: {
      _this->_internal_mutable_e2ee()->::livekit::proto::E2eeResponse::MergeFrom(
          from._internal_e2ee());
      break;
    }
    case kNewSoxResampler: {
      _this->_internal_mutable_new_sox_resampler()->::livekit::proto::NewSoxResamplerResponse::MergeFrom(
          from._internal_new_sox_resampler());
      break;
    }
    case kPushSoxResampler: {
      _this->_internal_mutable_push_sox_resampler()->::livekit::proto::PushSoxResamplerResponse::MergeFrom(
          from._internal_push_sox_resampler());
      break;
    }
    case kFlushSoxResampler: {
      _this->_internal_mutable_flush_sox_resampler()->::livekit::proto::FlushSoxResamplerResponse::MergeFrom(
          from._internal_flush_sox_resampler());
      break;
    }
    case kSendChatMessage: {
      _this->_internal_mutable_send_chat_message()->::livekit::proto::SendChatMessageResponse::MergeFrom(
          from._internal_send_chat_message());
      break;
    }
    case kPerformRpc: {
      _this->_internal_mutable_perform_rpc()->::livekit::proto::PerformRpcResponse::MergeFrom(
          from._internal_perform_rpc());
      break;
    }
    case kRegisterRpcMethod: {
      _this->_internal_mutable_register_rpc_method()->::livekit::proto::RegisterRpcMethodResponse::MergeFrom(
          from._internal_register_rpc_method());
      break;
    }
    case kUnregisterRpcMethod: {
      _this->_internal_mutable_unregister_rpc_method()->::livekit::proto::UnregisterRpcMethodResponse::MergeFrom(
          from._internal_unregister_rpc_method());
      break;
    }
    case kRpcMethodInvocationResponse: {
      _this->_internal_mutable_rpc_method_invocation_response()->::livekit::proto::RpcMethodInvocationResponseResponse::MergeFrom(
          from._internal_rpc_method_invocation_response());
      break;
    }
    case kEnableRemoteTrackPublication: {
      _this->_internal_mutable_enable_remote_track_publication()->::livekit::proto::EnableRemoteTrackPublicationResponse::MergeFrom(
          from._internal_enable_remote_track_publication());
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      _this->_internal_mutable_update_remote_track_publication_dimension()->::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse::MergeFrom(
          from._internal_update_remote_track_publication_dimension());
      break;
    }
    case kSendStreamHeader: {
      _this->_internal_mutable_send_stream_header()->::livekit::proto::SendStreamHeaderResponse::MergeFrom(
          from._internal_send_stream_header());
      break;
    }
    case kSendStreamChunk: {
      _this->_internal_mutable_send_stream_chunk()->::livekit::proto::SendStreamChunkResponse::MergeFrom(
          from._internal_send_stream_chunk());
      break;
    }
    case kSendStreamTrailer: {
      _this->_internal_mutable_send_stream_trailer()->::livekit::proto::SendStreamTrailerResponse::MergeFrom(
          from._internal_send_stream_trailer());
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      _this->_internal_mutable_set_data_channel_buffered_amount_low_threshold()->::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse::MergeFrom(
          from._internal_set_data_channel_buffered_amount_low_threshold());
      break;
    }
    case kLoadAudioFilterPlugin: {
      _this->_internal_mutable_load_audio_filter_plugin()->::livekit::proto::LoadAudioFilterPluginResponse::MergeFrom(
          from._internal_load_audio_filter_plugin());
      break;
    }
    case kNewApm: {
      _this->_internal_mutable_new_apm()->::livekit::proto::NewApmResponse::MergeFrom(
          from._internal_new_apm());
      break;
    }
    case kApmProcessStream: {
      _this->_internal_mutable_apm_process_stream()->::livekit::proto::ApmProcessStreamResponse::MergeFrom(
          from._internal_apm_process_stream());
      break;
    }
    case kApmProcessReverseStream: {
      _this->_internal_mutable_apm_process_reverse_stream()->::livekit::proto::ApmProcessReverseStreamResponse::MergeFrom(
          from._internal_apm_process_reverse_stream());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.FfiResponse)
}

inline void FfiResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

FfiResponse::~FfiResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.FfiResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FfiResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void FfiResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FfiResponse::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.FfiResponse)
  switch (message_case()) {
    case kDispose: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.dispose_;
      }
      break;
    }
    case kConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connect_;
      }
      break;
    }
    case kDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.disconnect_;
      }
      break;
    }
    case kPublishTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_track_;
      }
      break;
    }
    case kUnpublishTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.unpublish_track_;
      }
      break;
    }
    case kPublishData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_data_;
      }
      break;
    }
    case kSetSubscribed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_subscribed_;
      }
      break;
    }
    case kSetLocalMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_metadata_;
      }
      break;
    }
    case kSetLocalName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_name_;
      }
      break;
    }
    case kSetLocalAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_attributes_;
      }
      break;
    }
    case kGetSessionStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.get_session_stats_;
      }
      break;
    }
    case kPublishTranscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_transcription_;
      }
      break;
    }
    case kPublishSipDtmf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_sip_dtmf_;
      }
      break;
    }
    case kCreateVideoTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.create_video_track_;
      }
      break;
    }
    case kCreateAudioTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.create_audio_track_;
      }
      break;
    }
    case kLocalTrackMute: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.local_track_mute_;
      }
      break;
    }
    case kEnableRemoteTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.enable_remote_track_;
      }
      break;
    }
    case kGetStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.get_stats_;
      }
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_track_subscription_permissions_;
      }
      break;
    }
    case kNewVideoStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_video_stream_;
      }
      break;
    }
    case kNewVideoSource: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_video_source_;
      }
      break;
    }
    case kCaptureVideoFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.capture_video_frame_;
      }
      break;
    }
    case kVideoConvert: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.video_convert_;
      }
      break;
    }
    case kVideoStreamFromParticipant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.video_stream_from_participant_;
      }
      break;
    }
    case kNewAudioStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_audio_stream_;
      }
      break;
    }
    case kNewAudioSource: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_audio_source_;
      }
      break;
    }
    case kCaptureAudioFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.capture_audio_frame_;
      }
      break;
    }
    case kClearAudioBuffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.clear_audio_buffer_;
      }
      break;
    }
    case kNewAudioResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_audio_resampler_;
      }
      break;
    }
    case kRemixAndResample: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.remix_and_resample_;
      }
      break;
    }
    case kAudioStreamFromParticipant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.audio_stream_from_participant_;
      }
      break;
    }
    case kE2Ee: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.e2ee_;
      }
      break;
    }
    case kNewSoxResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_sox_resampler_;
      }
      break;
    }
    case kPushSoxResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.push_sox_resampler_;
      }
      break;
    }
    case kFlushSoxResampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.flush_sox_resampler_;
      }
      break;
    }
    case kSendChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_chat_message_;
      }
      break;
    }
    case kPerformRpc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.perform_rpc_;
      }
      break;
    }
    case kRegisterRpcMethod: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.register_rpc_method_;
      }
      break;
    }
    case kUnregisterRpcMethod: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.unregister_rpc_method_;
      }
      break;
    }
    case kRpcMethodInvocationResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.rpc_method_invocation_response_;
      }
      break;
    }
    case kEnableRemoteTrackPublication: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.enable_remote_track_publication_;
      }
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_remote_track_publication_dimension_;
      }
      break;
    }
    case kSendStreamHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_header_;
      }
      break;
    }
    case kSendStreamChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_chunk_;
      }
      break;
    }
    case kSendStreamTrailer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_trailer_;
      }
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_data_channel_buffered_amount_low_threshold_;
      }
      break;
    }
    case kLoadAudioFilterPlugin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.load_audio_filter_plugin_;
      }
      break;
    }
    case kNewApm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.new_apm_;
      }
      break;
    }
    case kApmProcessStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.apm_process_stream_;
      }
      break;
    }
    case kApmProcessReverseStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.apm_process_reverse_stream_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void FfiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.FfiResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FfiResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.proto.DisposeResponse dispose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ConnectResponse connect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DisconnectResponse disconnect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishTrackResponse publish_track = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UnpublishTrackResponse unpublish_track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unpublish_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishDataResponse publish_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetSubscribedResponse set_subscribed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_subscribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalNameResponse set_local_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetSessionStatsResponse get_session_stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_session_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_transcription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_sip_dtmf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CreateVideoTrackResponse create_video_track = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_video_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_audio_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LocalTrackMuteResponse local_track_mute = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_track_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.EnableRemoteTrackResponse enable_remote_track = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_remote_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetStatsResponse get_stats = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewVideoStreamResponse new_video_stream = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_video_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewVideoSourceResponse new_video_source = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_video_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CaptureVideoFrameResponse capture_video_frame = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_video_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.VideoConvertResponse video_convert = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_convert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.VideoStreamFromParticipantResponse video_stream_from_participant = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_stream_from_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewAudioStreamResponse new_audio_stream = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_audio_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewAudioSourceResponse new_audio_source = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_audio_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_audio_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ClearAudioBufferResponse clear_audio_buffer = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_audio_buffer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewAudioResamplerResponse new_audio_resampler = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_audio_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RemixAndResampleResponse remix_and_resample = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_remix_and_resample(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.AudioStreamFromParticipantResponse audio_stream_from_participant = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_stream_from_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.E2eeResponse e2ee = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2ee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewSoxResamplerResponse new_sox_resampler = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sox_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PushSoxResamplerResponse push_sox_resampler = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_sox_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.FlushSoxResamplerResponse flush_sox_resampler = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush_sox_resampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendChatMessageResponse send_chat_message = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PerformRpcResponse perform_rpc = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_rpc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RegisterRpcMethodResponse register_rpc_method = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_rpc_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UnregisterRpcMethodResponse unregister_rpc_method = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unregister_rpc_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RpcMethodInvocationResponseResponse rpc_method_invocation_response = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_method_invocation_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.EnableRemoteTrackPublicationResponse enable_remote_track_publication = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_remote_track_publication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UpdateRemoteTrackPublicationDimensionResponse update_remote_track_publication_dimension = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_remote_track_publication_dimension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamHeaderResponse send_stream_header = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamChunkResponse send_stream_chunk = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamTrailerResponse send_stream_trailer = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_trailer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse set_data_channel_buffered_amount_low_threshold = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_data_channel_buffered_amount_low_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetTrackSubscriptionPermissionsResponse set_track_subscription_permissions = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_track_subscription_permissions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LoadAudioFilterPluginResponse load_audio_filter_plugin = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_audio_filter_plugin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.NewApmResponse new_apm = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_apm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ApmProcessStreamResponse apm_process_stream = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_apm_process_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ApmProcessReverseStreamResponse apm_process_reverse_stream = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_apm_process_reverse_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FfiResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.FfiResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (message_case()) {
    case kDispose: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::dispose(this),
          _Internal::dispose(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::connect(this),
          _Internal::connect(this).GetCachedSize(), target, stream);
      break;
    }
    case kDisconnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::disconnect(this),
          _Internal::disconnect(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::publish_track(this),
          _Internal::publish_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnpublishTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::unpublish_track(this),
          _Internal::unpublish_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::publish_data(this),
          _Internal::publish_data(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetSubscribed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::set_subscribed(this),
          _Internal::set_subscribed(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::set_local_metadata(this),
          _Internal::set_local_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::set_local_name(this),
          _Internal::set_local_name(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalAttributes: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::set_local_attributes(this),
          _Internal::set_local_attributes(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetSessionStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::get_session_stats(this),
          _Internal::get_session_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishTranscription: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::publish_transcription(this),
          _Internal::publish_transcription(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishSipDtmf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::publish_sip_dtmf(this),
          _Internal::publish_sip_dtmf(this).GetCachedSize(), target, stream);
      break;
    }
    case kCreateVideoTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::create_video_track(this),
          _Internal::create_video_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kCreateAudioTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::create_audio_track(this),
          _Internal::create_audio_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocalTrackMute: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::local_track_mute(this),
          _Internal::local_track_mute(this).GetCachedSize(), target, stream);
      break;
    }
    case kEnableRemoteTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::enable_remote_track(this),
          _Internal::enable_remote_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::get_stats(this),
          _Internal::get_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewVideoStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::new_video_stream(this),
          _Internal::new_video_stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewVideoSource: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::new_video_source(this),
          _Internal::new_video_source(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureVideoFrame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::capture_video_frame(this),
          _Internal::capture_video_frame(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoConvert: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::video_convert(this),
          _Internal::video_convert(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoStreamFromParticipant: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::video_stream_from_participant(this),
          _Internal::video_stream_from_participant(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewAudioStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::new_audio_stream(this),
          _Internal::new_audio_stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewAudioSource: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::new_audio_source(this),
          _Internal::new_audio_source(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureAudioFrame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::capture_audio_frame(this),
          _Internal::capture_audio_frame(this).GetCachedSize(), target, stream);
      break;
    }
    case kClearAudioBuffer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::clear_audio_buffer(this),
          _Internal::clear_audio_buffer(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewAudioResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::new_audio_resampler(this),
          _Internal::new_audio_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kRemixAndResample: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::remix_and_resample(this),
          _Internal::remix_and_resample(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioStreamFromParticipant: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, _Internal::audio_stream_from_participant(this),
          _Internal::audio_stream_from_participant(this).GetCachedSize(), target, stream);
      break;
    }
    case kE2Ee: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, _Internal::e2ee(this),
          _Internal::e2ee(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewSoxResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::new_sox_resampler(this),
          _Internal::new_sox_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kPushSoxResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, _Internal::push_sox_resampler(this),
          _Internal::push_sox_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kFlushSoxResampler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, _Internal::flush_sox_resampler(this),
          _Internal::flush_sox_resampler(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendChatMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, _Internal::send_chat_message(this),
          _Internal::send_chat_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kPerformRpc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, _Internal::perform_rpc(this),
          _Internal::perform_rpc(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegisterRpcMethod: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, _Internal::register_rpc_method(this),
          _Internal::register_rpc_method(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnregisterRpcMethod: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, _Internal::unregister_rpc_method(this),
          _Internal::unregister_rpc_method(this).GetCachedSize(), target, stream);
      break;
    }
    case kRpcMethodInvocationResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, _Internal::rpc_method_invocation_response(this),
          _Internal::rpc_method_invocation_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kEnableRemoteTrackPublication: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, _Internal::enable_remote_track_publication(this),
          _Internal::enable_remote_track_publication(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, _Internal::update_remote_track_publication_dimension(this),
          _Internal::update_remote_track_publication_dimension(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, _Internal::send_stream_header(this),
          _Internal::send_stream_header(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamChunk: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, _Internal::send_stream_chunk(this),
          _Internal::send_stream_chunk(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamTrailer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, _Internal::send_stream_trailer(this),
          _Internal::send_stream_trailer(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(46, _Internal::set_data_channel_buffered_amount_low_threshold(this),
          _Internal::set_data_channel_buffered_amount_low_threshold(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, _Internal::set_track_subscription_permissions(this),
          _Internal::set_track_subscription_permissions(this).GetCachedSize(), target, stream);
      break;
    }
    case kLoadAudioFilterPlugin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, _Internal::load_audio_filter_plugin(this),
          _Internal::load_audio_filter_plugin(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewApm: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, _Internal::new_apm(this),
          _Internal::new_apm(this).GetCachedSize(), target, stream);
      break;
    }
    case kApmProcessStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, _Internal::apm_process_stream(this),
          _Internal::apm_process_stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kApmProcessReverseStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(51, _Internal::apm_process_reverse_stream(this),
          _Internal::apm_process_reverse_stream(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.FfiResponse)
  return target;
}

size_t FfiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.FfiResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.proto.DisposeResponse dispose = 2;
    case kDispose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.dispose_);
      break;
    }
    // .livekit.proto.ConnectResponse connect = 3;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connect_);
      break;
    }
    // .livekit.proto.DisconnectResponse disconnect = 4;
    case kDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.disconnect_);
      break;
    }
    // .livekit.proto.PublishTrackResponse publish_track = 5;
    case kPublishTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_track_);
      break;
    }
    // .livekit.proto.UnpublishTrackResponse unpublish_track = 6;
    case kUnpublishTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.unpublish_track_);
      break;
    }
    // .livekit.proto.PublishDataResponse publish_data = 7;
    case kPublishData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_data_);
      break;
    }
    // .livekit.proto.SetSubscribedResponse set_subscribed = 8;
    case kSetSubscribed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_subscribed_);
      break;
    }
    // .livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
    case kSetLocalMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_metadata_);
      break;
    }
    // .livekit.proto.SetLocalNameResponse set_local_name = 10;
    case kSetLocalName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_name_);
      break;
    }
    // .livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
    case kSetLocalAttributes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_attributes_);
      break;
    }
    // .livekit.proto.GetSessionStatsResponse get_session_stats = 12;
    case kGetSessionStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.get_session_stats_);
      break;
    }
    // .livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
    case kPublishTranscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_transcription_);
      break;
    }
    // .livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
    case kPublishSipDtmf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_sip_dtmf_);
      break;
    }
    // .livekit.proto.CreateVideoTrackResponse create_video_track = 15;
    case kCreateVideoTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.create_video_track_);
      break;
    }
    // .livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
    case kCreateAudioTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.create_audio_track_);
      break;
    }
    // .livekit.proto.LocalTrackMuteResponse local_track_mute = 17;
    case kLocalTrackMute: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.local_track_mute_);
      break;
    }
    // .livekit.proto.EnableRemoteTrackResponse enable_remote_track = 18;
    case kEnableRemoteTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.enable_remote_track_);
      break;
    }
    // .livekit.proto.GetStatsResponse get_stats = 19;
    case kGetStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.get_stats_);
      break;
    }
    // .livekit.proto.SetTrackSubscriptionPermissionsResponse set_track_subscription_permissions = 47;
    case kSetTrackSubscriptionPermissions: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_track_subscription_permissions_);
      break;
    }
    // .livekit.proto.NewVideoStreamResponse new_video_stream = 20;
    case kNewVideoStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_video_stream_);
      break;
    }
    // .livekit.proto.NewVideoSourceResponse new_video_source = 21;
    case kNewVideoSource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_video_source_);
      break;
    }
    // .livekit.proto.CaptureVideoFrameResponse capture_video_frame = 22;
    case kCaptureVideoFrame: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.capture_video_frame_);
      break;
    }
    // .livekit.proto.VideoConvertResponse video_convert = 23;
    case kVideoConvert: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.video_convert_);
      break;
    }
    // .livekit.proto.VideoStreamFromParticipantResponse video_stream_from_participant = 24;
    case kVideoStreamFromParticipant: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.video_stream_from_participant_);
      break;
    }
    // .livekit.proto.NewAudioStreamResponse new_audio_stream = 25;
    case kNewAudioStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_audio_stream_);
      break;
    }
    // .livekit.proto.NewAudioSourceResponse new_audio_source = 26;
    case kNewAudioSource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_audio_source_);
      break;
    }
    // .livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 27;
    case kCaptureAudioFrame: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.capture_audio_frame_);
      break;
    }
    // .livekit.proto.ClearAudioBufferResponse clear_audio_buffer = 28;
    case kClearAudioBuffer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.clear_audio_buffer_);
      break;
    }
    // .livekit.proto.NewAudioResamplerResponse new_audio_resampler = 29;
    case kNewAudioResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_audio_resampler_);
      break;
    }
    // .livekit.proto.RemixAndResampleResponse remix_and_resample = 30;
    case kRemixAndResample: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.remix_and_resample_);
      break;
    }
    // .livekit.proto.AudioStreamFromParticipantResponse audio_stream_from_participant = 31;
    case kAudioStreamFromParticipant: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.audio_stream_from_participant_);
      break;
    }
    // .livekit.proto.E2eeResponse e2ee = 32;
    case kE2Ee: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.e2ee_);
      break;
    }
    // .livekit.proto.NewSoxResamplerResponse new_sox_resampler = 33;
    case kNewSoxResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_sox_resampler_);
      break;
    }
    // .livekit.proto.PushSoxResamplerResponse push_sox_resampler = 34;
    case kPushSoxResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.push_sox_resampler_);
      break;
    }
    // .livekit.proto.FlushSoxResamplerResponse flush_sox_resampler = 35;
    case kFlushSoxResampler: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.flush_sox_resampler_);
      break;
    }
    // .livekit.proto.SendChatMessageResponse send_chat_message = 36;
    case kSendChatMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_chat_message_);
      break;
    }
    // .livekit.proto.PerformRpcResponse perform_rpc = 37;
    case kPerformRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.perform_rpc_);
      break;
    }
    // .livekit.proto.RegisterRpcMethodResponse register_rpc_method = 38;
    case kRegisterRpcMethod: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.register_rpc_method_);
      break;
    }
    // .livekit.proto.UnregisterRpcMethodResponse unregister_rpc_method = 39;
    case kUnregisterRpcMethod: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.unregister_rpc_method_);
      break;
    }
    // .livekit.proto.RpcMethodInvocationResponseResponse rpc_method_invocation_response = 40;
    case kRpcMethodInvocationResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.rpc_method_invocation_response_);
      break;
    }
    // .livekit.proto.EnableRemoteTrackPublicationResponse enable_remote_track_publication = 41;
    case kEnableRemoteTrackPublication: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.enable_remote_track_publication_);
      break;
    }
    // .livekit.proto.UpdateRemoteTrackPublicationDimensionResponse update_remote_track_publication_dimension = 42;
    case kUpdateRemoteTrackPublicationDimension: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_remote_track_publication_dimension_);
      break;
    }
    // .livekit.proto.SendStreamHeaderResponse send_stream_header = 43;
    case kSendStreamHeader: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_header_);
      break;
    }
    // .livekit.proto.SendStreamChunkResponse send_stream_chunk = 44;
    case kSendStreamChunk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_chunk_);
      break;
    }
    // .livekit.proto.SendStreamTrailerResponse send_stream_trailer = 45;
    case kSendStreamTrailer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_trailer_);
      break;
    }
    // .livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse set_data_channel_buffered_amount_low_threshold = 46;
    case kSetDataChannelBufferedAmountLowThreshold: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_data_channel_buffered_amount_low_threshold_);
      break;
    }
    // .livekit.proto.LoadAudioFilterPluginResponse load_audio_filter_plugin = 48;
    case kLoadAudioFilterPlugin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.load_audio_filter_plugin_);
      break;
    }
    // .livekit.proto.NewApmResponse new_apm = 49;
    case kNewApm: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.new_apm_);
      break;
    }
    // .livekit.proto.ApmProcessStreamResponse apm_process_stream = 50;
    case kApmProcessStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.apm_process_stream_);
      break;
    }
    // .livekit.proto.ApmProcessReverseStreamResponse apm_process_reverse_stream = 51;
    case kApmProcessReverseStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.apm_process_reverse_stream_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FfiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FfiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FfiResponse::GetClassData() const { return &_class_data_; }


void FfiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FfiResponse*>(&to_msg);
  auto& from = static_cast<const FfiResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.FfiResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kDispose: {
      _this->_internal_mutable_dispose()->::livekit::proto::DisposeResponse::MergeFrom(
          from._internal_dispose());
      break;
    }
    case kConnect: {
      _this->_internal_mutable_connect()->::livekit::proto::ConnectResponse::MergeFrom(
          from._internal_connect());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::livekit::proto::DisconnectResponse::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kPublishTrack: {
      _this->_internal_mutable_publish_track()->::livekit::proto::PublishTrackResponse::MergeFrom(
          from._internal_publish_track());
      break;
    }
    case kUnpublishTrack: {
      _this->_internal_mutable_unpublish_track()->::livekit::proto::UnpublishTrackResponse::MergeFrom(
          from._internal_unpublish_track());
      break;
    }
    case kPublishData: {
      _this->_internal_mutable_publish_data()->::livekit::proto::PublishDataResponse::MergeFrom(
          from._internal_publish_data());
      break;
    }
    case kSetSubscribed: {
      _this->_internal_mutable_set_subscribed()->::livekit::proto::SetSubscribedResponse::MergeFrom(
          from._internal_set_subscribed());
      break;
    }
    case kSetLocalMetadata: {
      _this->_internal_mutable_set_local_metadata()->::livekit::proto::SetLocalMetadataResponse::MergeFrom(
          from._internal_set_local_metadata());
      break;
    }
    case kSetLocalName: {
      _this->_internal_mutable_set_local_name()->::livekit::proto::SetLocalNameResponse::MergeFrom(
          from._internal_set_local_name());
      break;
    }
    case kSetLocalAttributes: {
      _this->_internal_mutable_set_local_attributes()->::livekit::proto::SetLocalAttributesResponse::MergeFrom(
          from._internal_set_local_attributes());
      break;
    }
    case kGetSessionStats: {
      _this->_internal_mutable_get_session_stats()->::livekit::proto::GetSessionStatsResponse::MergeFrom(
          from._internal_get_session_stats());
      break;
    }
    case kPublishTranscription: {
      _this->_internal_mutable_publish_transcription()->::livekit::proto::PublishTranscriptionResponse::MergeFrom(
          from._internal_publish_transcription());
      break;
    }
    case kPublishSipDtmf: {
      _this->_internal_mutable_publish_sip_dtmf()->::livekit::proto::PublishSipDtmfResponse::MergeFrom(
          from._internal_publish_sip_dtmf());
      break;
    }
    case kCreateVideoTrack: {
      _this->_internal_mutable_create_video_track()->::livekit::proto::CreateVideoTrackResponse::MergeFrom(
          from._internal_create_video_track());
      break;
    }
    case kCreateAudioTrack: {
      _this->_internal_mutable_create_audio_track()->::livekit::proto::CreateAudioTrackResponse::MergeFrom(
          from._internal_create_audio_track());
      break;
    }
    case kLocalTrackMute: {
      _this->_internal_mutable_local_track_mute()->::livekit::proto::LocalTrackMuteResponse::MergeFrom(
          from._internal_local_track_mute());
      break;
    }
    case kEnableRemoteTrack: {
      _this->_internal_mutable_enable_remote_track()->::livekit::proto::EnableRemoteTrackResponse::MergeFrom(
          from._internal_enable_remote_track());
      break;
    }
    case kGetStats: {
      _this->_internal_mutable_get_stats()->::livekit::proto::GetStatsResponse::MergeFrom(
          from._internal_get_stats());
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      _this->_internal_mutable_set_track_subscription_permissions()->::livekit::proto::SetTrackSubscriptionPermissionsResponse::MergeFrom(
          from._internal_set_track_subscription_permissions());
      break;
    }
    case kNewVideoStream: {
      _this->_internal_mutable_new_video_stream()->::livekit::proto::NewVideoStreamResponse::MergeFrom(
          from._internal_new_video_stream());
      break;
    }
    case kNewVideoSource: {
      _this->_internal_mutable_new_video_source()->::livekit::proto::NewVideoSourceResponse::MergeFrom(
          from._internal_new_video_source());
      break;
    }
    case kCaptureVideoFrame: {
      _this->_internal_mutable_capture_video_frame()->::livekit::proto::CaptureVideoFrameResponse::MergeFrom(
          from._internal_capture_video_frame());
      break;
    }
    case kVideoConvert: {
      _this->_internal_mutable_video_convert()->::livekit::proto::VideoConvertResponse::MergeFrom(
          from._internal_video_convert());
      break;
    }
    case kVideoStreamFromParticipant: {
      _this->_internal_mutable_video_stream_from_participant()->::livekit::proto::VideoStreamFromParticipantResponse::MergeFrom(
          from._internal_video_stream_from_participant());
      break;
    }
    case kNewAudioStream: {
      _this->_internal_mutable_new_audio_stream()->::livekit::proto::NewAudioStreamResponse::MergeFrom(
          from._internal_new_audio_stream());
      break;
    }
    case kNewAudioSource: {
      _this->_internal_mutable_new_audio_source()->::livekit::proto::NewAudioSourceResponse::MergeFrom(
          from._internal_new_audio_source());
      break;
    }
    case kCaptureAudioFrame: {
      _this->_internal_mutable_capture_audio_frame()->::livekit::proto::CaptureAudioFrameResponse::MergeFrom(
          from._internal_capture_audio_frame());
      break;
    }
    case kClearAudioBuffer: {
      _this->_internal_mutable_clear_audio_buffer()->::livekit::proto::ClearAudioBufferResponse::MergeFrom(
          from._internal_clear_audio_buffer());
      break;
    }
    case kNewAudioResampler: {
      _this->_internal_mutable_new_audio_resampler()->::livekit::proto::NewAudioResamplerResponse::MergeFrom(
          from._internal_new_audio_resampler());
      break;
    }
    case kRemixAndResample: {
      _this->_internal_mutable_remix_and_resample()->::livekit::proto::RemixAndResampleResponse::MergeFrom(
          from._internal_remix_and_resample());
      break;
    }
    case kAudioStreamFromParticipant: {
      _this->_internal_mutable_audio_stream_from_participant()->::livekit::proto::AudioStreamFromParticipantResponse::MergeFrom(
          from._internal_audio_stream_from_participant());
      break;
    }
    case kE2Ee: {
      _this->_internal_mutable_e2ee()->::livekit::proto::E2eeResponse::MergeFrom(
          from._internal_e2ee());
      break;
    }
    case kNewSoxResampler: {
      _this->_internal_mutable_new_sox_resampler()->::livekit::proto::NewSoxResamplerResponse::MergeFrom(
          from._internal_new_sox_resampler());
      break;
    }
    case kPushSoxResampler: {
      _this->_internal_mutable_push_sox_resampler()->::livekit::proto::PushSoxResamplerResponse::MergeFrom(
          from._internal_push_sox_resampler());
      break;
    }
    case kFlushSoxResampler: {
      _this->_internal_mutable_flush_sox_resampler()->::livekit::proto::FlushSoxResamplerResponse::MergeFrom(
          from._internal_flush_sox_resampler());
      break;
    }
    case kSendChatMessage: {
      _this->_internal_mutable_send_chat_message()->::livekit::proto::SendChatMessageResponse::MergeFrom(
          from._internal_send_chat_message());
      break;
    }
    case kPerformRpc: {
      _this->_internal_mutable_perform_rpc()->::livekit::proto::PerformRpcResponse::MergeFrom(
          from._internal_perform_rpc());
      break;
    }
    case kRegisterRpcMethod: {
      _this->_internal_mutable_register_rpc_method()->::livekit::proto::RegisterRpcMethodResponse::MergeFrom(
          from._internal_register_rpc_method());
      break;
    }
    case kUnregisterRpcMethod: {
      _this->_internal_mutable_unregister_rpc_method()->::livekit::proto::UnregisterRpcMethodResponse::MergeFrom(
          from._internal_unregister_rpc_method());
      break;
    }
    case kRpcMethodInvocationResponse: {
      _this->_internal_mutable_rpc_method_invocation_response()->::livekit::proto::RpcMethodInvocationResponseResponse::MergeFrom(
          from._internal_rpc_method_invocation_response());
      break;
    }
    case kEnableRemoteTrackPublication: {
      _this->_internal_mutable_enable_remote_track_publication()->::livekit::proto::EnableRemoteTrackPublicationResponse::MergeFrom(
          from._internal_enable_remote_track_publication());
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      _this->_internal_mutable_update_remote_track_publication_dimension()->::livekit::proto::UpdateRemoteTrackPublicationDimensionResponse::MergeFrom(
          from._internal_update_remote_track_publication_dimension());
      break;
    }
    case kSendStreamHeader: {
      _this->_internal_mutable_send_stream_header()->::livekit::proto::SendStreamHeaderResponse::MergeFrom(
          from._internal_send_stream_header());
      break;
    }
    case kSendStreamChunk: {
      _this->_internal_mutable_send_stream_chunk()->::livekit::proto::SendStreamChunkResponse::MergeFrom(
          from._internal_send_stream_chunk());
      break;
    }
    case kSendStreamTrailer: {
      _this->_internal_mutable_send_stream_trailer()->::livekit::proto::SendStreamTrailerResponse::MergeFrom(
          from._internal_send_stream_trailer());
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      _this->_internal_mutable_set_data_channel_buffered_amount_low_threshold()->::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse::MergeFrom(
          from._internal_set_data_channel_buffered_amount_low_threshold());
      break;
    }
    case kLoadAudioFilterPlugin: {
      _this->_internal_mutable_load_audio_filter_plugin()->::livekit::proto::LoadAudioFilterPluginResponse::MergeFrom(
          from._internal_load_audio_filter_plugin());
      break;
    }
    case kNewApm: {
      _this->_internal_mutable_new_apm()->::livekit::proto::NewApmResponse::MergeFrom(
          from._internal_new_apm());
      break;
    }
    case kApmProcessStream: {
      _this->_internal_mutable_apm_process_stream()->::livekit::proto::ApmProcessStreamResponse::MergeFrom(
          from._internal_apm_process_stream());
      break;
    }
    case kApmProcessReverseStream: {
      _this->_internal_mutable_apm_process_reverse_stream()->::livekit::proto::ApmProcessReverseStreamResponse::MergeFrom(
          from._internal_apm_process_reverse_stream());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FfiResponse::CopyFrom(const FfiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.FfiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FfiResponse::IsInitialized() const {
  switch (message_case()) {
    case kDispose: {
      break;
    }
    case kConnect: {
      if (_internal_has_connect()) {
        if (!_impl_.message_.connect_->IsInitialized()) return false;
      }
      break;
    }
    case kDisconnect: {
      if (_internal_has_disconnect()) {
        if (!_impl_.message_.disconnect_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishTrack: {
      if (_internal_has_publish_track()) {
        if (!_impl_.message_.publish_track_->IsInitialized()) return false;
      }
      break;
    }
    case kUnpublishTrack: {
      if (_internal_has_unpublish_track()) {
        if (!_impl_.message_.unpublish_track_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishData: {
      if (_internal_has_publish_data()) {
        if (!_impl_.message_.publish_data_->IsInitialized()) return false;
      }
      break;
    }
    case kSetSubscribed: {
      break;
    }
    case kSetLocalMetadata: {
      if (_internal_has_set_local_metadata()) {
        if (!_impl_.message_.set_local_metadata_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalName: {
      if (_internal_has_set_local_name()) {
        if (!_impl_.message_.set_local_name_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalAttributes: {
      if (_internal_has_set_local_attributes()) {
        if (!_impl_.message_.set_local_attributes_->IsInitialized()) return false;
      }
      break;
    }
    case kGetSessionStats: {
      if (_internal_has_get_session_stats()) {
        if (!_impl_.message_.get_session_stats_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishTranscription: {
      if (_internal_has_publish_transcription()) {
        if (!_impl_.message_.publish_transcription_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishSipDtmf: {
      if (_internal_has_publish_sip_dtmf()) {
        if (!_impl_.message_.publish_sip_dtmf_->IsInitialized()) return false;
      }
      break;
    }
    case kCreateVideoTrack: {
      if (_internal_has_create_video_track()) {
        if (!_impl_.message_.create_video_track_->IsInitialized()) return false;
      }
      break;
    }
    case kCreateAudioTrack: {
      if (_internal_has_create_audio_track()) {
        if (!_impl_.message_.create_audio_track_->IsInitialized()) return false;
      }
      break;
    }
    case kLocalTrackMute: {
      if (_internal_has_local_track_mute()) {
        if (!_impl_.message_.local_track_mute_->IsInitialized()) return false;
      }
      break;
    }
    case kEnableRemoteTrack: {
      if (_internal_has_enable_remote_track()) {
        if (!_impl_.message_.enable_remote_track_->IsInitialized()) return false;
      }
      break;
    }
    case kGetStats: {
      if (_internal_has_get_stats()) {
        if (!_impl_.message_.get_stats_->IsInitialized()) return false;
      }
      break;
    }
    case kSetTrackSubscriptionPermissions: {
      break;
    }
    case kNewVideoStream: {
      if (_internal_has_new_video_stream()) {
        if (!_impl_.message_.new_video_stream_->IsInitialized()) return false;
      }
      break;
    }
    case kNewVideoSource: {
      if (_internal_has_new_video_source()) {
        if (!_impl_.message_.new_video_source_->IsInitialized()) return false;
      }
      break;
    }
    case kCaptureVideoFrame: {
      break;
    }
    case kVideoConvert: {
      if (_internal_has_video_convert()) {
        if (!_impl_.message_.video_convert_->IsInitialized()) return false;
      }
      break;
    }
    case kVideoStreamFromParticipant: {
      if (_internal_has_video_stream_from_participant()) {
        if (!_impl_.message_.video_stream_from_participant_->IsInitialized()) return false;
      }
      break;
    }
    case kNewAudioStream: {
      if (_internal_has_new_audio_stream()) {
        if (!_impl_.message_.new_audio_stream_->IsInitialized()) return false;
      }
      break;
    }
    case kNewAudioSource: {
      if (_internal_has_new_audio_source()) {
        if (!_impl_.message_.new_audio_source_->IsInitialized()) return false;
      }
      break;
    }
    case kCaptureAudioFrame: {
      if (_internal_has_capture_audio_frame()) {
        if (!_impl_.message_.capture_audio_frame_->IsInitialized()) return false;
      }
      break;
    }
    case kClearAudioBuffer: {
      break;
    }
    case kNewAudioResampler: {
      if (_internal_has_new_audio_resampler()) {
        if (!_impl_.message_.new_audio_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kRemixAndResample: {
      if (_internal_has_remix_and_resample()) {
        if (!_impl_.message_.remix_and_resample_->IsInitialized()) return false;
      }
      break;
    }
    case kAudioStreamFromParticipant: {
      if (_internal_has_audio_stream_from_participant()) {
        if (!_impl_.message_.audio_stream_from_participant_->IsInitialized()) return false;
      }
      break;
    }
    case kE2Ee: {
      if (_internal_has_e2ee()) {
        if (!_impl_.message_.e2ee_->IsInitialized()) return false;
      }
      break;
    }
    case kNewSoxResampler: {
      if (_internal_has_new_sox_resampler()) {
        if (!_impl_.message_.new_sox_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kPushSoxResampler: {
      if (_internal_has_push_sox_resampler()) {
        if (!_impl_.message_.push_sox_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kFlushSoxResampler: {
      if (_internal_has_flush_sox_resampler()) {
        if (!_impl_.message_.flush_sox_resampler_->IsInitialized()) return false;
      }
      break;
    }
    case kSendChatMessage: {
      if (_internal_has_send_chat_message()) {
        if (!_impl_.message_.send_chat_message_->IsInitialized()) return false;
      }
      break;
    }
    case kPerformRpc: {
      if (_internal_has_perform_rpc()) {
        if (!_impl_.message_.perform_rpc_->IsInitialized()) return false;
      }
      break;
    }
    case kRegisterRpcMethod: {
      break;
    }
    case kUnregisterRpcMethod: {
      break;
    }
    case kRpcMethodInvocationResponse: {
      break;
    }
    case kEnableRemoteTrackPublication: {
      break;
    }
    case kUpdateRemoteTrackPublicationDimension: {
      break;
    }
    case kSendStreamHeader: {
      if (_internal_has_send_stream_header()) {
        if (!_impl_.message_.send_stream_header_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamChunk: {
      if (_internal_has_send_stream_chunk()) {
        if (!_impl_.message_.send_stream_chunk_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamTrailer: {
      if (_internal_has_send_stream_trailer()) {
        if (!_impl_.message_.send_stream_trailer_->IsInitialized()) return false;
      }
      break;
    }
    case kSetDataChannelBufferedAmountLowThreshold: {
      break;
    }
    case kLoadAudioFilterPlugin: {
      break;
    }
    case kNewApm: {
      if (_internal_has_new_apm()) {
        if (!_impl_.message_.new_apm_->IsInitialized()) return false;
      }
      break;
    }
    case kApmProcessStream: {
      break;
    }
    case kApmProcessReverseStream: {
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void FfiResponse::InternalSwap(FfiResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FfiResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[1]);
}

// ===================================================================

class FfiEvent::_Internal {
 public:
  static const ::livekit::proto::RoomEvent& room_event(const FfiEvent* msg);
  static const ::livekit::proto::TrackEvent& track_event(const FfiEvent* msg);
  static const ::livekit::proto::VideoStreamEvent& video_stream_event(const FfiEvent* msg);
  static const ::livekit::proto::AudioStreamEvent& audio_stream_event(const FfiEvent* msg);
  static const ::livekit::proto::ConnectCallback& connect(const FfiEvent* msg);
  static const ::livekit::proto::DisconnectCallback& disconnect(const FfiEvent* msg);
  static const ::livekit::proto::DisposeCallback& dispose(const FfiEvent* msg);
  static const ::livekit::proto::PublishTrackCallback& publish_track(const FfiEvent* msg);
  static const ::livekit::proto::UnpublishTrackCallback& unpublish_track(const FfiEvent* msg);
  static const ::livekit::proto::PublishDataCallback& publish_data(const FfiEvent* msg);
  static const ::livekit::proto::PublishTranscriptionCallback& publish_transcription(const FfiEvent* msg);
  static const ::livekit::proto::CaptureAudioFrameCallback& capture_audio_frame(const FfiEvent* msg);
  static const ::livekit::proto::SetLocalMetadataCallback& set_local_metadata(const FfiEvent* msg);
  static const ::livekit::proto::SetLocalNameCallback& set_local_name(const FfiEvent* msg);
  static const ::livekit::proto::SetLocalAttributesCallback& set_local_attributes(const FfiEvent* msg);
  static const ::livekit::proto::GetStatsCallback& get_stats(const FfiEvent* msg);
  static const ::livekit::proto::LogBatch& logs(const FfiEvent* msg);
  static const ::livekit::proto::GetSessionStatsCallback& get_session_stats(const FfiEvent* msg);
  static const ::livekit::proto::Panic& panic(const FfiEvent* msg);
  static const ::livekit::proto::PublishSipDtmfCallback& publish_sip_dtmf(const FfiEvent* msg);
  static const ::livekit::proto::SendChatMessageCallback& chat_message(const FfiEvent* msg);
  static const ::livekit::proto::PerformRpcCallback& perform_rpc(const FfiEvent* msg);
  static const ::livekit::proto::RpcMethodInvocationEvent& rpc_method_invocation(const FfiEvent* msg);
  static const ::livekit::proto::SendStreamHeaderCallback& send_stream_header(const FfiEvent* msg);
  static const ::livekit::proto::SendStreamChunkCallback& send_stream_chunk(const FfiEvent* msg);
  static const ::livekit::proto::SendStreamTrailerCallback& send_stream_trailer(const FfiEvent* msg);
};

const ::livekit::proto::RoomEvent&
FfiEvent::_Internal::room_event(const FfiEvent* msg) {
  return *msg->_impl_.message_.room_event_;
}
const ::livekit::proto::TrackEvent&
FfiEvent::_Internal::track_event(const FfiEvent* msg) {
  return *msg->_impl_.message_.track_event_;
}
const ::livekit::proto::VideoStreamEvent&
FfiEvent::_Internal::video_stream_event(const FfiEvent* msg) {
  return *msg->_impl_.message_.video_stream_event_;
}
const ::livekit::proto::AudioStreamEvent&
FfiEvent::_Internal::audio_stream_event(const FfiEvent* msg) {
  return *msg->_impl_.message_.audio_stream_event_;
}
const ::livekit::proto::ConnectCallback&
FfiEvent::_Internal::connect(const FfiEvent* msg) {
  return *msg->_impl_.message_.connect_;
}
const ::livekit::proto::DisconnectCallback&
FfiEvent::_Internal::disconnect(const FfiEvent* msg) {
  return *msg->_impl_.message_.disconnect_;
}
const ::livekit::proto::DisposeCallback&
FfiEvent::_Internal::dispose(const FfiEvent* msg) {
  return *msg->_impl_.message_.dispose_;
}
const ::livekit::proto::PublishTrackCallback&
FfiEvent::_Internal::publish_track(const FfiEvent* msg) {
  return *msg->_impl_.message_.publish_track_;
}
const ::livekit::proto::UnpublishTrackCallback&
FfiEvent::_Internal::unpublish_track(const FfiEvent* msg) {
  return *msg->_impl_.message_.unpublish_track_;
}
const ::livekit::proto::PublishDataCallback&
FfiEvent::_Internal::publish_data(const FfiEvent* msg) {
  return *msg->_impl_.message_.publish_data_;
}
const ::livekit::proto::PublishTranscriptionCallback&
FfiEvent::_Internal::publish_transcription(const FfiEvent* msg) {
  return *msg->_impl_.message_.publish_transcription_;
}
const ::livekit::proto::CaptureAudioFrameCallback&
FfiEvent::_Internal::capture_audio_frame(const FfiEvent* msg) {
  return *msg->_impl_.message_.capture_audio_frame_;
}
const ::livekit::proto::SetLocalMetadataCallback&
FfiEvent::_Internal::set_local_metadata(const FfiEvent* msg) {
  return *msg->_impl_.message_.set_local_metadata_;
}
const ::livekit::proto::SetLocalNameCallback&
FfiEvent::_Internal::set_local_name(const FfiEvent* msg) {
  return *msg->_impl_.message_.set_local_name_;
}
const ::livekit::proto::SetLocalAttributesCallback&
FfiEvent::_Internal::set_local_attributes(const FfiEvent* msg) {
  return *msg->_impl_.message_.set_local_attributes_;
}
const ::livekit::proto::GetStatsCallback&
FfiEvent::_Internal::get_stats(const FfiEvent* msg) {
  return *msg->_impl_.message_.get_stats_;
}
const ::livekit::proto::LogBatch&
FfiEvent::_Internal::logs(const FfiEvent* msg) {
  return *msg->_impl_.message_.logs_;
}
const ::livekit::proto::GetSessionStatsCallback&
FfiEvent::_Internal::get_session_stats(const FfiEvent* msg) {
  return *msg->_impl_.message_.get_session_stats_;
}
const ::livekit::proto::Panic&
FfiEvent::_Internal::panic(const FfiEvent* msg) {
  return *msg->_impl_.message_.panic_;
}
const ::livekit::proto::PublishSipDtmfCallback&
FfiEvent::_Internal::publish_sip_dtmf(const FfiEvent* msg) {
  return *msg->_impl_.message_.publish_sip_dtmf_;
}
const ::livekit::proto::SendChatMessageCallback&
FfiEvent::_Internal::chat_message(const FfiEvent* msg) {
  return *msg->_impl_.message_.chat_message_;
}
const ::livekit::proto::PerformRpcCallback&
FfiEvent::_Internal::perform_rpc(const FfiEvent* msg) {
  return *msg->_impl_.message_.perform_rpc_;
}
const ::livekit::proto::RpcMethodInvocationEvent&
FfiEvent::_Internal::rpc_method_invocation(const FfiEvent* msg) {
  return *msg->_impl_.message_.rpc_method_invocation_;
}
const ::livekit::proto::SendStreamHeaderCallback&
FfiEvent::_Internal::send_stream_header(const FfiEvent* msg) {
  return *msg->_impl_.message_.send_stream_header_;
}
const ::livekit::proto::SendStreamChunkCallback&
FfiEvent::_Internal::send_stream_chunk(const FfiEvent* msg) {
  return *msg->_impl_.message_.send_stream_chunk_;
}
const ::livekit::proto::SendStreamTrailerCallback&
FfiEvent::_Internal::send_stream_trailer(const FfiEvent* msg) {
  return *msg->_impl_.message_.send_stream_trailer_;
}
void FfiEvent::set_allocated_room_event(::livekit::proto::RoomEvent* room_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (room_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_event));
    if (message_arena != submessage_arena) {
      room_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_event, submessage_arena);
    }
    set_has_room_event();
    _impl_.message_.room_event_ = room_event;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.room_event)
}
void FfiEvent::clear_room_event() {
  if (_internal_has_room_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.room_event_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_track_event(::livekit::proto::TrackEvent* track_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event));
    if (message_arena != submessage_arena) {
      track_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event, submessage_arena);
    }
    set_has_track_event();
    _impl_.message_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.track_event)
}
void FfiEvent::clear_track_event() {
  if (_internal_has_track_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.track_event_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_video_stream_event(::livekit::proto::VideoStreamEvent* video_stream_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (video_stream_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_stream_event));
    if (message_arena != submessage_arena) {
      video_stream_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_event, submessage_arena);
    }
    set_has_video_stream_event();
    _impl_.message_.video_stream_event_ = video_stream_event;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.video_stream_event)
}
void FfiEvent::clear_video_stream_event() {
  if (_internal_has_video_stream_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.video_stream_event_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_audio_stream_event(::livekit::proto::AudioStreamEvent* audio_stream_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (audio_stream_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_stream_event));
    if (message_arena != submessage_arena) {
      audio_stream_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_stream_event, submessage_arena);
    }
    set_has_audio_stream_event();
    _impl_.message_.audio_stream_event_ = audio_stream_event;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.audio_stream_event)
}
void FfiEvent::clear_audio_stream_event() {
  if (_internal_has_audio_stream_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.audio_stream_event_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_connect(::livekit::proto::ConnectCallback* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connect));
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.connect)
}
void FfiEvent::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.connect_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_disconnect(::livekit::proto::DisconnectCallback* disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disconnect));
    if (message_arena != submessage_arena) {
      disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    _impl_.message_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.disconnect)
}
void FfiEvent::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.disconnect_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_dispose(::livekit::proto::DisposeCallback* dispose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (dispose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dispose);
    if (message_arena != submessage_arena) {
      dispose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispose, submessage_arena);
    }
    set_has_dispose();
    _impl_.message_.dispose_ = dispose;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.dispose)
}
void FfiEvent::set_allocated_publish_track(::livekit::proto::PublishTrackCallback* publish_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_track));
    if (message_arena != submessage_arena) {
      publish_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_track, submessage_arena);
    }
    set_has_publish_track();
    _impl_.message_.publish_track_ = publish_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.publish_track)
}
void FfiEvent::clear_publish_track() {
  if (_internal_has_publish_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_track_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_unpublish_track(::livekit::proto::UnpublishTrackCallback* unpublish_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (unpublish_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unpublish_track));
    if (message_arena != submessage_arena) {
      unpublish_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unpublish_track, submessage_arena);
    }
    set_has_unpublish_track();
    _impl_.message_.unpublish_track_ = unpublish_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.unpublish_track)
}
void FfiEvent::clear_unpublish_track() {
  if (_internal_has_unpublish_track()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.unpublish_track_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_publish_data(::livekit::proto::PublishDataCallback* publish_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_data));
    if (message_arena != submessage_arena) {
      publish_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_data, submessage_arena);
    }
    set_has_publish_data();
    _impl_.message_.publish_data_ = publish_data;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.publish_data)
}
void FfiEvent::clear_publish_data() {
  if (_internal_has_publish_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_data_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_publish_transcription(::livekit::proto::PublishTranscriptionCallback* publish_transcription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_transcription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_transcription));
    if (message_arena != submessage_arena) {
      publish_transcription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_transcription, submessage_arena);
    }
    set_has_publish_transcription();
    _impl_.message_.publish_transcription_ = publish_transcription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.publish_transcription)
}
void FfiEvent::clear_publish_transcription() {
  if (_internal_has_publish_transcription()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_transcription_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_capture_audio_frame(::livekit::proto::CaptureAudioFrameCallback* capture_audio_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (capture_audio_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_audio_frame));
    if (message_arena != submessage_arena) {
      capture_audio_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_audio_frame, submessage_arena);
    }
    set_has_capture_audio_frame();
    _impl_.message_.capture_audio_frame_ = capture_audio_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.capture_audio_frame)
}
void FfiEvent::clear_capture_audio_frame() {
  if (_internal_has_capture_audio_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.capture_audio_frame_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_set_local_metadata(::livekit::proto::SetLocalMetadataCallback* set_local_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_metadata));
    if (message_arena != submessage_arena) {
      set_local_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_metadata, submessage_arena);
    }
    set_has_set_local_metadata();
    _impl_.message_.set_local_metadata_ = set_local_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.set_local_metadata)
}
void FfiEvent::clear_set_local_metadata() {
  if (_internal_has_set_local_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_metadata_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_set_local_name(::livekit::proto::SetLocalNameCallback* set_local_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_name));
    if (message_arena != submessage_arena) {
      set_local_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_name, submessage_arena);
    }
    set_has_set_local_name();
    _impl_.message_.set_local_name_ = set_local_name;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.set_local_name)
}
void FfiEvent::clear_set_local_name() {
  if (_internal_has_set_local_name()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_name_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_set_local_attributes(::livekit::proto::SetLocalAttributesCallback* set_local_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (set_local_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_local_attributes));
    if (message_arena != submessage_arena) {
      set_local_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_local_attributes, submessage_arena);
    }
    set_has_set_local_attributes();
    _impl_.message_.set_local_attributes_ = set_local_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.set_local_attributes)
}
void FfiEvent::clear_set_local_attributes() {
  if (_internal_has_set_local_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.set_local_attributes_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_get_stats(::livekit::proto::GetStatsCallback* get_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (get_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_stats));
    if (message_arena != submessage_arena) {
      get_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_stats, submessage_arena);
    }
    set_has_get_stats();
    _impl_.message_.get_stats_ = get_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.get_stats)
}
void FfiEvent::clear_get_stats() {
  if (_internal_has_get_stats()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.get_stats_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_logs(::livekit::proto::LogBatch* logs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (logs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logs);
    if (message_arena != submessage_arena) {
      logs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logs, submessage_arena);
    }
    set_has_logs();
    _impl_.message_.logs_ = logs;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.logs)
}
void FfiEvent::set_allocated_get_session_stats(::livekit::proto::GetSessionStatsCallback* get_session_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (get_session_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_session_stats));
    if (message_arena != submessage_arena) {
      get_session_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_session_stats, submessage_arena);
    }
    set_has_get_session_stats();
    _impl_.message_.get_session_stats_ = get_session_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.get_session_stats)
}
void FfiEvent::clear_get_session_stats() {
  if (_internal_has_get_session_stats()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.get_session_stats_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_panic(::livekit::proto::Panic* panic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (panic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(panic);
    if (message_arena != submessage_arena) {
      panic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panic, submessage_arena);
    }
    set_has_panic();
    _impl_.message_.panic_ = panic;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.panic)
}
void FfiEvent::set_allocated_publish_sip_dtmf(::livekit::proto::PublishSipDtmfCallback* publish_sip_dtmf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publish_sip_dtmf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_sip_dtmf));
    if (message_arena != submessage_arena) {
      publish_sip_dtmf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_sip_dtmf, submessage_arena);
    }
    set_has_publish_sip_dtmf();
    _impl_.message_.publish_sip_dtmf_ = publish_sip_dtmf;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.publish_sip_dtmf)
}
void FfiEvent::clear_publish_sip_dtmf() {
  if (_internal_has_publish_sip_dtmf()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publish_sip_dtmf_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_chat_message(::livekit::proto::SendChatMessageCallback* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_message));
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    _impl_.message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.chat_message)
}
void FfiEvent::clear_chat_message() {
  if (_internal_has_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.chat_message_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_perform_rpc(::livekit::proto::PerformRpcCallback* perform_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (perform_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perform_rpc));
    if (message_arena != submessage_arena) {
      perform_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_rpc, submessage_arena);
    }
    set_has_perform_rpc();
    _impl_.message_.perform_rpc_ = perform_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.perform_rpc)
}
void FfiEvent::clear_perform_rpc() {
  if (_internal_has_perform_rpc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.perform_rpc_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_rpc_method_invocation(::livekit::proto::RpcMethodInvocationEvent* rpc_method_invocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (rpc_method_invocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc_method_invocation));
    if (message_arena != submessage_arena) {
      rpc_method_invocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_method_invocation, submessage_arena);
    }
    set_has_rpc_method_invocation();
    _impl_.message_.rpc_method_invocation_ = rpc_method_invocation;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.rpc_method_invocation)
}
void FfiEvent::clear_rpc_method_invocation() {
  if (_internal_has_rpc_method_invocation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rpc_method_invocation_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_send_stream_header(::livekit::proto::SendStreamHeaderCallback* send_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_header));
    if (message_arena != submessage_arena) {
      send_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_header, submessage_arena);
    }
    set_has_send_stream_header();
    _impl_.message_.send_stream_header_ = send_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.send_stream_header)
}
void FfiEvent::clear_send_stream_header() {
  if (_internal_has_send_stream_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_header_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_send_stream_chunk(::livekit::proto::SendStreamChunkCallback* send_stream_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_chunk));
    if (message_arena != submessage_arena) {
      send_stream_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_chunk, submessage_arena);
    }
    set_has_send_stream_chunk();
    _impl_.message_.send_stream_chunk_ = send_stream_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.send_stream_chunk)
}
void FfiEvent::clear_send_stream_chunk() {
  if (_internal_has_send_stream_chunk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_chunk_;
    }
    clear_has_message();
  }
}
void FfiEvent::set_allocated_send_stream_trailer(::livekit::proto::SendStreamTrailerCallback* send_stream_trailer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_stream_trailer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_stream_trailer));
    if (message_arena != submessage_arena) {
      send_stream_trailer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_stream_trailer, submessage_arena);
    }
    set_has_send_stream_trailer();
    _impl_.message_.send_stream_trailer_ = send_stream_trailer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.FfiEvent.send_stream_trailer)
}
void FfiEvent::clear_send_stream_trailer() {
  if (_internal_has_send_stream_trailer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_stream_trailer_;
    }
    clear_has_message();
  }
}
FfiEvent::FfiEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.FfiEvent)
}
FfiEvent::FfiEvent(const FfiEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FfiEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRoomEvent: {
      _this->_internal_mutable_room_event()->::livekit::proto::RoomEvent::MergeFrom(
          from._internal_room_event());
      break;
    }
    case kTrackEvent: {
      _this->_internal_mutable_track_event()->::livekit::proto::TrackEvent::MergeFrom(
          from._internal_track_event());
      break;
    }
    case kVideoStreamEvent: {
      _this->_internal_mutable_video_stream_event()->::livekit::proto::VideoStreamEvent::MergeFrom(
          from._internal_video_stream_event());
      break;
    }
    case kAudioStreamEvent: {
      _this->_internal_mutable_audio_stream_event()->::livekit::proto::AudioStreamEvent::MergeFrom(
          from._internal_audio_stream_event());
      break;
    }
    case kConnect: {
      _this->_internal_mutable_connect()->::livekit::proto::ConnectCallback::MergeFrom(
          from._internal_connect());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::livekit::proto::DisconnectCallback::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kDispose: {
      _this->_internal_mutable_dispose()->::livekit::proto::DisposeCallback::MergeFrom(
          from._internal_dispose());
      break;
    }
    case kPublishTrack: {
      _this->_internal_mutable_publish_track()->::livekit::proto::PublishTrackCallback::MergeFrom(
          from._internal_publish_track());
      break;
    }
    case kUnpublishTrack: {
      _this->_internal_mutable_unpublish_track()->::livekit::proto::UnpublishTrackCallback::MergeFrom(
          from._internal_unpublish_track());
      break;
    }
    case kPublishData: {
      _this->_internal_mutable_publish_data()->::livekit::proto::PublishDataCallback::MergeFrom(
          from._internal_publish_data());
      break;
    }
    case kPublishTranscription: {
      _this->_internal_mutable_publish_transcription()->::livekit::proto::PublishTranscriptionCallback::MergeFrom(
          from._internal_publish_transcription());
      break;
    }
    case kCaptureAudioFrame: {
      _this->_internal_mutable_capture_audio_frame()->::livekit::proto::CaptureAudioFrameCallback::MergeFrom(
          from._internal_capture_audio_frame());
      break;
    }
    case kSetLocalMetadata: {
      _this->_internal_mutable_set_local_metadata()->::livekit::proto::SetLocalMetadataCallback::MergeFrom(
          from._internal_set_local_metadata());
      break;
    }
    case kSetLocalName: {
      _this->_internal_mutable_set_local_name()->::livekit::proto::SetLocalNameCallback::MergeFrom(
          from._internal_set_local_name());
      break;
    }
    case kSetLocalAttributes: {
      _this->_internal_mutable_set_local_attributes()->::livekit::proto::SetLocalAttributesCallback::MergeFrom(
          from._internal_set_local_attributes());
      break;
    }
    case kGetStats: {
      _this->_internal_mutable_get_stats()->::livekit::proto::GetStatsCallback::MergeFrom(
          from._internal_get_stats());
      break;
    }
    case kLogs: {
      _this->_internal_mutable_logs()->::livekit::proto::LogBatch::MergeFrom(
          from._internal_logs());
      break;
    }
    case kGetSessionStats: {
      _this->_internal_mutable_get_session_stats()->::livekit::proto::GetSessionStatsCallback::MergeFrom(
          from._internal_get_session_stats());
      break;
    }
    case kPanic: {
      _this->_internal_mutable_panic()->::livekit::proto::Panic::MergeFrom(
          from._internal_panic());
      break;
    }
    case kPublishSipDtmf: {
      _this->_internal_mutable_publish_sip_dtmf()->::livekit::proto::PublishSipDtmfCallback::MergeFrom(
          from._internal_publish_sip_dtmf());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::proto::SendChatMessageCallback::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kPerformRpc: {
      _this->_internal_mutable_perform_rpc()->::livekit::proto::PerformRpcCallback::MergeFrom(
          from._internal_perform_rpc());
      break;
    }
    case kRpcMethodInvocation: {
      _this->_internal_mutable_rpc_method_invocation()->::livekit::proto::RpcMethodInvocationEvent::MergeFrom(
          from._internal_rpc_method_invocation());
      break;
    }
    case kSendStreamHeader: {
      _this->_internal_mutable_send_stream_header()->::livekit::proto::SendStreamHeaderCallback::MergeFrom(
          from._internal_send_stream_header());
      break;
    }
    case kSendStreamChunk: {
      _this->_internal_mutable_send_stream_chunk()->::livekit::proto::SendStreamChunkCallback::MergeFrom(
          from._internal_send_stream_chunk());
      break;
    }
    case kSendStreamTrailer: {
      _this->_internal_mutable_send_stream_trailer()->::livekit::proto::SendStreamTrailerCallback::MergeFrom(
          from._internal_send_stream_trailer());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.FfiEvent)
}

inline void FfiEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

FfiEvent::~FfiEvent() {
  // @@protoc_insertion_point(destructor:livekit.proto.FfiEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FfiEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void FfiEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FfiEvent::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.FfiEvent)
  switch (message_case()) {
    case kRoomEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.room_event_;
      }
      break;
    }
    case kTrackEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_event_;
      }
      break;
    }
    case kVideoStreamEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.video_stream_event_;
      }
      break;
    }
    case kAudioStreamEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.audio_stream_event_;
      }
      break;
    }
    case kConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connect_;
      }
      break;
    }
    case kDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.disconnect_;
      }
      break;
    }
    case kDispose: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.dispose_;
      }
      break;
    }
    case kPublishTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_track_;
      }
      break;
    }
    case kUnpublishTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.unpublish_track_;
      }
      break;
    }
    case kPublishData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_data_;
      }
      break;
    }
    case kPublishTranscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_transcription_;
      }
      break;
    }
    case kCaptureAudioFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.capture_audio_frame_;
      }
      break;
    }
    case kSetLocalMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_metadata_;
      }
      break;
    }
    case kSetLocalName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_name_;
      }
      break;
    }
    case kSetLocalAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.set_local_attributes_;
      }
      break;
    }
    case kGetStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.get_stats_;
      }
      break;
    }
    case kLogs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.logs_;
      }
      break;
    }
    case kGetSessionStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.get_session_stats_;
      }
      break;
    }
    case kPanic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.panic_;
      }
      break;
    }
    case kPublishSipDtmf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publish_sip_dtmf_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.chat_message_;
      }
      break;
    }
    case kPerformRpc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.perform_rpc_;
      }
      break;
    }
    case kRpcMethodInvocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.rpc_method_invocation_;
      }
      break;
    }
    case kSendStreamHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_header_;
      }
      break;
    }
    case kSendStreamChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_chunk_;
      }
      break;
    }
    case kSendStreamTrailer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_stream_trailer_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void FfiEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.FfiEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FfiEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.proto.RoomEvent room_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackEvent track_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.VideoStreamEvent video_stream_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_stream_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.AudioStreamEvent audio_stream_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_stream_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ConnectCallback connect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DisconnectCallback disconnect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DisposeCallback dispose = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishTrackCallback publish_track = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UnpublishTrackCallback unpublish_track = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unpublish_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishDataCallback publish_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_transcription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_audio_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalNameCallback set_local_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_local_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetStatsCallback get_stats = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LogBatch logs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_logs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetSessionStatsCallback get_session_stats = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_session_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.Panic panic = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_panic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_sip_dtmf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendChatMessageCallback chat_message = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.PerformRpcCallback perform_rpc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_rpc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RpcMethodInvocationEvent rpc_method_invocation = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_method_invocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamHeaderCallback send_stream_header = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamChunkCallback send_stream_chunk = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SendStreamTrailerCallback send_stream_trailer = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_stream_trailer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FfiEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.FfiEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (message_case()) {
    case kRoomEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::room_event(this),
          _Internal::room_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::track_event(this),
          _Internal::track_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoStreamEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::video_stream_event(this),
          _Internal::video_stream_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioStreamEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::audio_stream_event(this),
          _Internal::audio_stream_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::connect(this),
          _Internal::connect(this).GetCachedSize(), target, stream);
      break;
    }
    case kDisconnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::disconnect(this),
          _Internal::disconnect(this).GetCachedSize(), target, stream);
      break;
    }
    case kDispose: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::dispose(this),
          _Internal::dispose(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::publish_track(this),
          _Internal::publish_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnpublishTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::unpublish_track(this),
          _Internal::unpublish_track(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::publish_data(this),
          _Internal::publish_data(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishTranscription: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::publish_transcription(this),
          _Internal::publish_transcription(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureAudioFrame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::capture_audio_frame(this),
          _Internal::capture_audio_frame(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::set_local_metadata(this),
          _Internal::set_local_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::set_local_name(this),
          _Internal::set_local_name(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLocalAttributes: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::set_local_attributes(this),
          _Internal::set_local_attributes(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::get_stats(this),
          _Internal::get_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kLogs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::logs(this),
          _Internal::logs(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetSessionStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::get_session_stats(this),
          _Internal::get_session_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kPanic: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::panic(this),
          _Internal::panic(this).GetCachedSize(), target, stream);
      break;
    }
    case kPublishSipDtmf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::publish_sip_dtmf(this),
          _Internal::publish_sip_dtmf(this).GetCachedSize(), target, stream);
      break;
    }
    case kChatMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::chat_message(this),
          _Internal::chat_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kPerformRpc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::perform_rpc(this),
          _Internal::perform_rpc(this).GetCachedSize(), target, stream);
      break;
    }
    case kRpcMethodInvocation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::rpc_method_invocation(this),
          _Internal::rpc_method_invocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::send_stream_header(this),
          _Internal::send_stream_header(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamChunk: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::send_stream_chunk(this),
          _Internal::send_stream_chunk(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendStreamTrailer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::send_stream_trailer(this),
          _Internal::send_stream_trailer(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.FfiEvent)
  return target;
}

size_t FfiEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.FfiEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.proto.RoomEvent room_event = 1;
    case kRoomEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.room_event_);
      break;
    }
    // .livekit.proto.TrackEvent track_event = 2;
    case kTrackEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_event_);
      break;
    }
    // .livekit.proto.VideoStreamEvent video_stream_event = 3;
    case kVideoStreamEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.video_stream_event_);
      break;
    }
    // .livekit.proto.AudioStreamEvent audio_stream_event = 4;
    case kAudioStreamEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.audio_stream_event_);
      break;
    }
    // .livekit.proto.ConnectCallback connect = 5;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connect_);
      break;
    }
    // .livekit.proto.DisconnectCallback disconnect = 7;
    case kDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.disconnect_);
      break;
    }
    // .livekit.proto.DisposeCallback dispose = 8;
    case kDispose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.dispose_);
      break;
    }
    // .livekit.proto.PublishTrackCallback publish_track = 9;
    case kPublishTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_track_);
      break;
    }
    // .livekit.proto.UnpublishTrackCallback unpublish_track = 10;
    case kUnpublishTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.unpublish_track_);
      break;
    }
    // .livekit.proto.PublishDataCallback publish_data = 11;
    case kPublishData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_data_);
      break;
    }
    // .livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
    case kPublishTranscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_transcription_);
      break;
    }
    // .livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
    case kCaptureAudioFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.capture_audio_frame_);
      break;
    }
    // .livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
    case kSetLocalMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_metadata_);
      break;
    }
    // .livekit.proto.SetLocalNameCallback set_local_name = 15;
    case kSetLocalName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_name_);
      break;
    }
    // .livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
    case kSetLocalAttributes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.set_local_attributes_);
      break;
    }
    // .livekit.proto.GetStatsCallback get_stats = 17;
    case kGetStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.get_stats_);
      break;
    }
    // .livekit.proto.LogBatch logs = 18;
    case kLogs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.logs_);
      break;
    }
    // .livekit.proto.GetSessionStatsCallback get_session_stats = 19;
    case kGetSessionStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.get_session_stats_);
      break;
    }
    // .livekit.proto.Panic panic = 20;
    case kPanic: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.panic_);
      break;
    }
    // .livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
    case kPublishSipDtmf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publish_sip_dtmf_);
      break;
    }
    // .livekit.proto.SendChatMessageCallback chat_message = 22;
    case kChatMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.chat_message_);
      break;
    }
    // .livekit.proto.PerformRpcCallback perform_rpc = 23;
    case kPerformRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.perform_rpc_);
      break;
    }
    // .livekit.proto.RpcMethodInvocationEvent rpc_method_invocation = 24;
    case kRpcMethodInvocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.rpc_method_invocation_);
      break;
    }
    // .livekit.proto.SendStreamHeaderCallback send_stream_header = 25;
    case kSendStreamHeader: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_header_);
      break;
    }
    // .livekit.proto.SendStreamChunkCallback send_stream_chunk = 26;
    case kSendStreamChunk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_chunk_);
      break;
    }
    // .livekit.proto.SendStreamTrailerCallback send_stream_trailer = 27;
    case kSendStreamTrailer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_stream_trailer_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FfiEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FfiEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FfiEvent::GetClassData() const { return &_class_data_; }


void FfiEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FfiEvent*>(&to_msg);
  auto& from = static_cast<const FfiEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.FfiEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRoomEvent: {
      _this->_internal_mutable_room_event()->::livekit::proto::RoomEvent::MergeFrom(
          from._internal_room_event());
      break;
    }
    case kTrackEvent: {
      _this->_internal_mutable_track_event()->::livekit::proto::TrackEvent::MergeFrom(
          from._internal_track_event());
      break;
    }
    case kVideoStreamEvent: {
      _this->_internal_mutable_video_stream_event()->::livekit::proto::VideoStreamEvent::MergeFrom(
          from._internal_video_stream_event());
      break;
    }
    case kAudioStreamEvent: {
      _this->_internal_mutable_audio_stream_event()->::livekit::proto::AudioStreamEvent::MergeFrom(
          from._internal_audio_stream_event());
      break;
    }
    case kConnect: {
      _this->_internal_mutable_connect()->::livekit::proto::ConnectCallback::MergeFrom(
          from._internal_connect());
      break;
    }
    case kDisconnect: {
      _this->_internal_mutable_disconnect()->::livekit::proto::DisconnectCallback::MergeFrom(
          from._internal_disconnect());
      break;
    }
    case kDispose: {
      _this->_internal_mutable_dispose()->::livekit::proto::DisposeCallback::MergeFrom(
          from._internal_dispose());
      break;
    }
    case kPublishTrack: {
      _this->_internal_mutable_publish_track()->::livekit::proto::PublishTrackCallback::MergeFrom(
          from._internal_publish_track());
      break;
    }
    case kUnpublishTrack: {
      _this->_internal_mutable_unpublish_track()->::livekit::proto::UnpublishTrackCallback::MergeFrom(
          from._internal_unpublish_track());
      break;
    }
    case kPublishData: {
      _this->_internal_mutable_publish_data()->::livekit::proto::PublishDataCallback::MergeFrom(
          from._internal_publish_data());
      break;
    }
    case kPublishTranscription: {
      _this->_internal_mutable_publish_transcription()->::livekit::proto::PublishTranscriptionCallback::MergeFrom(
          from._internal_publish_transcription());
      break;
    }
    case kCaptureAudioFrame: {
      _this->_internal_mutable_capture_audio_frame()->::livekit::proto::CaptureAudioFrameCallback::MergeFrom(
          from._internal_capture_audio_frame());
      break;
    }
    case kSetLocalMetadata: {
      _this->_internal_mutable_set_local_metadata()->::livekit::proto::SetLocalMetadataCallback::MergeFrom(
          from._internal_set_local_metadata());
      break;
    }
    case kSetLocalName: {
      _this->_internal_mutable_set_local_name()->::livekit::proto::SetLocalNameCallback::MergeFrom(
          from._internal_set_local_name());
      break;
    }
    case kSetLocalAttributes: {
      _this->_internal_mutable_set_local_attributes()->::livekit::proto::SetLocalAttributesCallback::MergeFrom(
          from._internal_set_local_attributes());
      break;
    }
    case kGetStats: {
      _this->_internal_mutable_get_stats()->::livekit::proto::GetStatsCallback::MergeFrom(
          from._internal_get_stats());
      break;
    }
    case kLogs: {
      _this->_internal_mutable_logs()->::livekit::proto::LogBatch::MergeFrom(
          from._internal_logs());
      break;
    }
    case kGetSessionStats: {
      _this->_internal_mutable_get_session_stats()->::livekit::proto::GetSessionStatsCallback::MergeFrom(
          from._internal_get_session_stats());
      break;
    }
    case kPanic: {
      _this->_internal_mutable_panic()->::livekit::proto::Panic::MergeFrom(
          from._internal_panic());
      break;
    }
    case kPublishSipDtmf: {
      _this->_internal_mutable_publish_sip_dtmf()->::livekit::proto::PublishSipDtmfCallback::MergeFrom(
          from._internal_publish_sip_dtmf());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::proto::SendChatMessageCallback::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kPerformRpc: {
      _this->_internal_mutable_perform_rpc()->::livekit::proto::PerformRpcCallback::MergeFrom(
          from._internal_perform_rpc());
      break;
    }
    case kRpcMethodInvocation: {
      _this->_internal_mutable_rpc_method_invocation()->::livekit::proto::RpcMethodInvocationEvent::MergeFrom(
          from._internal_rpc_method_invocation());
      break;
    }
    case kSendStreamHeader: {
      _this->_internal_mutable_send_stream_header()->::livekit::proto::SendStreamHeaderCallback::MergeFrom(
          from._internal_send_stream_header());
      break;
    }
    case kSendStreamChunk: {
      _this->_internal_mutable_send_stream_chunk()->::livekit::proto::SendStreamChunkCallback::MergeFrom(
          from._internal_send_stream_chunk());
      break;
    }
    case kSendStreamTrailer: {
      _this->_internal_mutable_send_stream_trailer()->::livekit::proto::SendStreamTrailerCallback::MergeFrom(
          from._internal_send_stream_trailer());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FfiEvent::CopyFrom(const FfiEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.FfiEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FfiEvent::IsInitialized() const {
  switch (message_case()) {
    case kRoomEvent: {
      if (_internal_has_room_event()) {
        if (!_impl_.message_.room_event_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackEvent: {
      break;
    }
    case kVideoStreamEvent: {
      if (_internal_has_video_stream_event()) {
        if (!_impl_.message_.video_stream_event_->IsInitialized()) return false;
      }
      break;
    }
    case kAudioStreamEvent: {
      if (_internal_has_audio_stream_event()) {
        if (!_impl_.message_.audio_stream_event_->IsInitialized()) return false;
      }
      break;
    }
    case kConnect: {
      if (_internal_has_connect()) {
        if (!_impl_.message_.connect_->IsInitialized()) return false;
      }
      break;
    }
    case kDisconnect: {
      if (_internal_has_disconnect()) {
        if (!_impl_.message_.disconnect_->IsInitialized()) return false;
      }
      break;
    }
    case kDispose: {
      if (_internal_has_dispose()) {
        if (!_impl_.message_.dispose_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishTrack: {
      if (_internal_has_publish_track()) {
        if (!_impl_.message_.publish_track_->IsInitialized()) return false;
      }
      break;
    }
    case kUnpublishTrack: {
      if (_internal_has_unpublish_track()) {
        if (!_impl_.message_.unpublish_track_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishData: {
      if (_internal_has_publish_data()) {
        if (!_impl_.message_.publish_data_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishTranscription: {
      if (_internal_has_publish_transcription()) {
        if (!_impl_.message_.publish_transcription_->IsInitialized()) return false;
      }
      break;
    }
    case kCaptureAudioFrame: {
      if (_internal_has_capture_audio_frame()) {
        if (!_impl_.message_.capture_audio_frame_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalMetadata: {
      if (_internal_has_set_local_metadata()) {
        if (!_impl_.message_.set_local_metadata_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalName: {
      if (_internal_has_set_local_name()) {
        if (!_impl_.message_.set_local_name_->IsInitialized()) return false;
      }
      break;
    }
    case kSetLocalAttributes: {
      if (_internal_has_set_local_attributes()) {
        if (!_impl_.message_.set_local_attributes_->IsInitialized()) return false;
      }
      break;
    }
    case kGetStats: {
      if (_internal_has_get_stats()) {
        if (!_impl_.message_.get_stats_->IsInitialized()) return false;
      }
      break;
    }
    case kLogs: {
      if (_internal_has_logs()) {
        if (!_impl_.message_.logs_->IsInitialized()) return false;
      }
      break;
    }
    case kGetSessionStats: {
      if (_internal_has_get_session_stats()) {
        if (!_impl_.message_.get_session_stats_->IsInitialized()) return false;
      }
      break;
    }
    case kPanic: {
      if (_internal_has_panic()) {
        if (!_impl_.message_.panic_->IsInitialized()) return false;
      }
      break;
    }
    case kPublishSipDtmf: {
      if (_internal_has_publish_sip_dtmf()) {
        if (!_impl_.message_.publish_sip_dtmf_->IsInitialized()) return false;
      }
      break;
    }
    case kChatMessage: {
      if (_internal_has_chat_message()) {
        if (!_impl_.message_.chat_message_->IsInitialized()) return false;
      }
      break;
    }
    case kPerformRpc: {
      if (_internal_has_perform_rpc()) {
        if (!_impl_.message_.perform_rpc_->IsInitialized()) return false;
      }
      break;
    }
    case kRpcMethodInvocation: {
      if (_internal_has_rpc_method_invocation()) {
        if (!_impl_.message_.rpc_method_invocation_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamHeader: {
      if (_internal_has_send_stream_header()) {
        if (!_impl_.message_.send_stream_header_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamChunk: {
      if (_internal_has_send_stream_chunk()) {
        if (!_impl_.message_.send_stream_chunk_->IsInitialized()) return false;
      }
      break;
    }
    case kSendStreamTrailer: {
      if (_internal_has_send_stream_trailer()) {
        if (!_impl_.message_.send_stream_trailer_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void FfiEvent::InternalSwap(FfiEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FfiEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[2]);
}

// ===================================================================

class DisposeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DisposeRequest>()._impl_._has_bits_);
  static void set_has_async(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DisposeRequest::DisposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DisposeRequest)
}
DisposeRequest::DisposeRequest(const DisposeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisposeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_ = from._impl_.async_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DisposeRequest)
}

inline void DisposeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_){false}
  };
}

DisposeRequest::~DisposeRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.DisposeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisposeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisposeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisposeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DisposeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisposeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool async = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async(&has_bits);
          _impl_.async_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisposeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DisposeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool async = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_async(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DisposeRequest)
  return target;
}

size_t DisposeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DisposeRequest)
  size_t total_size = 0;

  // required bool async = 1;
  if (_internal_has_async()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisposeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisposeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisposeRequest::GetClassData() const { return &_class_data_; }


void DisposeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisposeRequest*>(&to_msg);
  auto& from = static_cast<const DisposeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DisposeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async()) {
    _this->_internal_set_async(from._internal_async());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisposeRequest::CopyFrom(const DisposeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DisposeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisposeRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DisposeRequest::InternalSwap(DisposeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_, other->_impl_.async_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisposeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[3]);
}

// ===================================================================

class DisposeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DisposeResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisposeResponse::DisposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DisposeResponse)
}
DisposeResponse::DisposeResponse(const DisposeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisposeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DisposeResponse)
}

inline void DisposeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

DisposeResponse::~DisposeResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.DisposeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisposeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisposeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisposeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DisposeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisposeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisposeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DisposeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DisposeResponse)
  return target;
}

size_t DisposeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DisposeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 async_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisposeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisposeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisposeResponse::GetClassData() const { return &_class_data_; }


void DisposeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisposeResponse*>(&to_msg);
  auto& from = static_cast<const DisposeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DisposeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisposeResponse::CopyFrom(const DisposeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DisposeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisposeResponse::IsInitialized() const {
  return true;
}

void DisposeResponse::InternalSwap(DisposeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisposeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[4]);
}

// ===================================================================

class DisposeCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<DisposeCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DisposeCallback::DisposeCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DisposeCallback)
}
DisposeCallback::DisposeCallback(const DisposeCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisposeCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DisposeCallback)
}

inline void DisposeCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

DisposeCallback::~DisposeCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.DisposeCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisposeCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisposeCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisposeCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DisposeCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisposeCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisposeCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DisposeCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DisposeCallback)
  return target;
}

size_t DisposeCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DisposeCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisposeCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisposeCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisposeCallback::GetClassData() const { return &_class_data_; }


void DisposeCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisposeCallback*>(&to_msg);
  auto& from = static_cast<const DisposeCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DisposeCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisposeCallback::CopyFrom(const DisposeCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DisposeCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisposeCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DisposeCallback::InternalSwap(DisposeCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisposeCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[5]);
}

// ===================================================================

class LogRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRecord>()._impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_module_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

LogRecord::LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LogRecord)
}
LogRecord::LogRecord(const LogRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){}
    , decltype(_impl_.module_path_){}
    , decltype(_impl_.file_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.line_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  _impl_.module_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_path()) {
    _this->_impl_.module_path_.Set(from._internal_module_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file()) {
    _this->_impl_.file_.Set(from._internal_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.line_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.line_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LogRecord)
}

inline void LogRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){}
    , decltype(_impl_.module_path_){}
    , decltype(_impl_.file_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.line_){0u}
  };
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:livekit.proto.LogRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_.Destroy();
  _impl_.module_path_.Destroy();
  _impl_.file_.Destroy();
  _impl_.message_.Destroy();
}

void LogRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LogRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.module_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.line_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.line_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.LogLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::LogLevel_IsValid(val))) {
            _internal_set_level(static_cast<::livekit::proto::LogLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LogRecord.target");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string module_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_module_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LogRecord.module_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LogRecord.file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_line(&has_bits);
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LogRecord.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LogRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.LogLevel level = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // required string target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LogRecord.target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target(), target);
  }

  // optional string module_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module_path().data(), static_cast<int>(this->_internal_module_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LogRecord.module_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_module_path(), target);
  }

  // optional string file = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LogRecord.file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file(), target);
  }

  // optional uint32 line = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_line(), target);
  }

  // required string message = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LogRecord.message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LogRecord)
  return target;
}

size_t LogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.LogRecord)
  size_t total_size = 0;

  if (_internal_has_target()) {
    // required string target = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (_internal_has_message()) {
    // required string message = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_level()) {
    // required .livekit.proto.LogLevel level = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return total_size;
}
size_t LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LogRecord)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string target = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());

    // required string message = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required .livekit.proto.LogLevel level = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string module_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module_path());
    }

    // optional string file = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file());
    }

  }
  // optional uint32 line = 5;
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRecord::GetClassData() const { return &_class_data_; }


void LogRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogRecord*>(&to_msg);
  auto& from = static_cast<const LogRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LogRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_module_path(from._internal_module_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_file(from._internal_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.line_ = from._impl_.line_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LogRecord::InternalSwap(LogRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_path_, lhs_arena,
      &other->_impl_.module_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_, lhs_arena,
      &other->_impl_.file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.line_)
      + sizeof(LogRecord::_impl_.line_)
      - PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[6]);
}

// ===================================================================

class LogBatch::_Internal {
 public:
};

LogBatch::LogBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LogBatch)
}
LogBatch::LogBatch(const LogBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LogBatch)
}

inline void LogBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogBatch::~LogBatch() {
  // @@protoc_insertion_point(destructor:livekit.proto.LogBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
}

void LogBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LogBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.proto.LogRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LogBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.proto.LogRecord records = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LogBatch)
  return target;
}

size_t LogBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LogBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.LogRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogBatch::GetClassData() const { return &_class_data_; }


void LogBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogBatch*>(&to_msg);
  auto& from = static_cast<const LogBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LogBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogBatch::CopyFrom(const LogBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LogBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogBatch::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.records_))
    return false;
  return true;
}

void LogBatch::InternalSwap(LogBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[7]);
}

// ===================================================================

class Panic::_Internal {
 public:
  using HasBits = decltype(std::declval<Panic>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Panic::Panic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.Panic)
}
Panic::Panic(const Panic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Panic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.Panic)
}

inline void Panic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Panic::~Panic() {
  // @@protoc_insertion_point(destructor:livekit.proto.Panic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Panic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Panic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Panic::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.Panic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Panic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.Panic.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Panic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.Panic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.Panic.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.Panic)
  return target;
}

size_t Panic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.Panic)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Panic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Panic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Panic::GetClassData() const { return &_class_data_; }


void Panic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Panic*>(&to_msg);
  auto& from = static_cast<const Panic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.Panic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Panic::CopyFrom(const Panic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.Panic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panic::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Panic::InternalSwap(Panic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Panic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ffi_2eproto_getter, &descriptor_table_ffi_2eproto_once,
      file_level_metadata_ffi_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::proto::FfiRequest*
Arena::CreateMaybeMessage< ::livekit::proto::FfiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::FfiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::FfiResponse*
Arena::CreateMaybeMessage< ::livekit::proto::FfiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::FfiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::FfiEvent*
Arena::CreateMaybeMessage< ::livekit::proto::FfiEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::FfiEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DisposeRequest*
Arena::CreateMaybeMessage< ::livekit::proto::DisposeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DisposeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DisposeResponse*
Arena::CreateMaybeMessage< ::livekit::proto::DisposeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DisposeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DisposeCallback*
Arena::CreateMaybeMessage< ::livekit::proto::DisposeCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DisposeCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LogRecord*
Arena::CreateMaybeMessage< ::livekit::proto::LogRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LogRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LogBatch*
Arena::CreateMaybeMessage< ::livekit::proto::LogBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LogBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::Panic*
Arena::CreateMaybeMessage< ::livekit::proto::Panic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::Panic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
