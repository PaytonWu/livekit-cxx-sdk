// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_models.proto

#include "livekit_models.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR Pagination::Pagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.after_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationDefaultTypeInternal _Pagination_default_instance_;
PROTOBUF_CONSTEXPR Room::Room(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_codecs_)*/{}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.turn_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.empty_timeout_)*/0u
  , /*decltype(_impl_.max_participants_)*/0u
  , /*decltype(_impl_.creation_time_)*/int64_t{0}
  , /*decltype(_impl_.num_participants_)*/0u
  , /*decltype(_impl_.active_recording_)*/false
  , /*decltype(_impl_.num_publishers_)*/0u
  , /*decltype(_impl_.departure_timeout_)*/0u
  , /*decltype(_impl_.creation_time_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;
PROTOBUF_CONSTEXPR Codec::Codec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fmtp_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodecDefaultTypeInternal() {}
  union {
    Codec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodecDefaultTypeInternal _Codec_default_instance_;
PROTOBUF_CONSTEXPR PlayoutDelay::PlayoutDelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.min_)*/0u
  , /*decltype(_impl_.max_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayoutDelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayoutDelayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayoutDelayDefaultTypeInternal() {}
  union {
    PlayoutDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayoutDelayDefaultTypeInternal _PlayoutDelay_default_instance_;
PROTOBUF_CONSTEXPR ParticipantPermission::ParticipantPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.can_publish_sources_)*/{}
  , /*decltype(_impl_._can_publish_sources_cached_byte_size_)*/{0}
  , /*decltype(_impl_.can_subscribe_)*/false
  , /*decltype(_impl_.can_publish_)*/false
  , /*decltype(_impl_.can_publish_data_)*/false
  , /*decltype(_impl_.hidden_)*/false
  , /*decltype(_impl_.recorder_)*/false
  , /*decltype(_impl_.can_update_metadata_)*/false
  , /*decltype(_impl_.agent_)*/false
  , /*decltype(_impl_.can_subscribe_metrics_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantPermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantPermissionDefaultTypeInternal() {}
  union {
    ParticipantPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantPermissionDefaultTypeInternal _ParticipantPermission_default_instance_;
PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ParticipantInfo_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal _ParticipantInfo_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ParticipantInfo::ParticipantInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tracks_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.joined_at_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.is_publisher_)*/false
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.joined_at_ms_)*/int64_t{0}
  , /*decltype(_impl_.disconnect_reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantInfoDefaultTypeInternal() {}
  union {
    ParticipantInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;
PROTOBUF_CONSTEXPR Encryption::Encryption(
    ::_pbi::ConstantInitialized) {}
struct EncryptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionDefaultTypeInternal() {}
  union {
    Encryption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionDefaultTypeInternal _Encryption_default_instance_;
PROTOBUF_CONSTEXPR SimulcastCodecInfo::SimulcastCodecInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimulcastCodecInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulcastCodecInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulcastCodecInfoDefaultTypeInternal() {}
  union {
    SimulcastCodecInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulcastCodecInfoDefaultTypeInternal _SimulcastCodecInfo_default_instance_;
PROTOBUF_CONSTEXPR TrackInfo::TrackInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.codecs_)*/{}
  , /*decltype(_impl_.audio_features_)*/{}
  , /*decltype(_impl_._audio_features_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.muted_)*/false
  , /*decltype(_impl_.simulcast_)*/false
  , /*decltype(_impl_.disable_dtx_)*/false
  , /*decltype(_impl_.stereo_)*/false
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.disable_red_)*/false
  , /*decltype(_impl_.encryption_)*/0
  , /*decltype(_impl_.backup_codec_policy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackInfoDefaultTypeInternal() {}
  union {
    TrackInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackInfoDefaultTypeInternal _TrackInfo_default_instance_;
PROTOBUF_CONSTEXPR VideoLayer::VideoLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.bitrate_)*/0u
  , /*decltype(_impl_.ssrc_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoLayerDefaultTypeInternal() {}
  union {
    VideoLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoLayerDefaultTypeInternal _VideoLayer_default_instance_;
PROTOBUF_CONSTEXPR DataPacket::DataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacketDefaultTypeInternal() {}
  union {
    DataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacketDefaultTypeInternal _DataPacket_default_instance_;
PROTOBUF_CONSTEXPR ActiveSpeakerUpdate::ActiveSpeakerUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speakers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActiveSpeakerUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActiveSpeakerUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActiveSpeakerUpdateDefaultTypeInternal() {}
  union {
    ActiveSpeakerUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActiveSpeakerUpdateDefaultTypeInternal _ActiveSpeakerUpdate_default_instance_;
PROTOBUF_CONSTEXPR SpeakerInfo::SpeakerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.active_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpeakerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeakerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeakerInfoDefaultTypeInternal() {}
  union {
    SpeakerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeakerInfoDefaultTypeInternal _SpeakerInfo_default_instance_;
PROTOBUF_CONSTEXPR UserPacket::UserPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_sids_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.participant_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_)*/uint64_t{0u}} {}
struct UserPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserPacketDefaultTypeInternal() {}
  union {
    UserPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserPacketDefaultTypeInternal _UserPacket_default_instance_;
PROTOBUF_CONSTEXPR SipDTMF::SipDTMF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.digit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SipDTMFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SipDTMFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SipDTMFDefaultTypeInternal() {}
  union {
    SipDTMF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SipDTMFDefaultTypeInternal _SipDTMF_default_instance_;
PROTOBUF_CONSTEXPR Transcription::Transcription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.transcribed_participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TranscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranscriptionDefaultTypeInternal() {}
  union {
    Transcription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranscriptionDefaultTypeInternal _Transcription_default_instance_;
PROTOBUF_CONSTEXPR TranscriptionSegment::TranscriptionSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_)*/uint64_t{0u}
  , /*decltype(_impl_.final_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TranscriptionSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranscriptionSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranscriptionSegmentDefaultTypeInternal() {}
  union {
    TranscriptionSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranscriptionSegmentDefaultTypeInternal _TranscriptionSegment_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.edit_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.generated_)*/false} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR RpcRequest::RpcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_timeout_ms_)*/0u
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestDefaultTypeInternal() {}
  union {
    RpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
PROTOBUF_CONSTEXPR RpcAck::RpcAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcAckDefaultTypeInternal() {}
  union {
    RpcAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcAckDefaultTypeInternal _RpcAck_default_instance_;
PROTOBUF_CONSTEXPR RpcResponse::RpcResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseDefaultTypeInternal() {}
  union {
    RpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
PROTOBUF_CONSTEXPR RpcError::RpcError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcErrorDefaultTypeInternal() {}
  union {
    RpcError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcErrorDefaultTypeInternal _RpcError_default_instance_;
PROTOBUF_CONSTEXPR ParticipantTracks::ParticipantTracks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sids_)*/{}
  , /*decltype(_impl_.participant_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantTracksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantTracksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantTracksDefaultTypeInternal() {}
  union {
    ParticipantTracks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantTracksDefaultTypeInternal _ParticipantTracks_default_instance_;
PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.edition_)*/0
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.agent_protocol_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientInfo::ClientInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.browser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.browser_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.other_sdks_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdk_)*/0
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientConfiguration::ClientConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.video_)*/nullptr
  , /*decltype(_impl_.screen_)*/nullptr
  , /*decltype(_impl_.disabled_codecs_)*/nullptr
  , /*decltype(_impl_.resume_connection_)*/0
  , /*decltype(_impl_.force_relay_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConfigurationDefaultTypeInternal() {}
  union {
    ClientConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConfigurationDefaultTypeInternal _ClientConfiguration_default_instance_;
PROTOBUF_CONSTEXPR VideoConfiguration::VideoConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hardware_encoder_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoConfigurationDefaultTypeInternal() {}
  union {
    VideoConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoConfigurationDefaultTypeInternal _VideoConfiguration_default_instance_;
PROTOBUF_CONSTEXPR DisabledCodecs::DisabledCodecs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.codecs_)*/{}
  , /*decltype(_impl_.publish_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisabledCodecsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisabledCodecsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisabledCodecsDefaultTypeInternal() {}
  union {
    DisabledCodecs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisabledCodecsDefaultTypeInternal _DisabledCodecs_default_instance_;
PROTOBUF_CONSTEXPR RTPDrift::RTPDrift(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.start_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.end_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.rtp_clock_ticks_)*/uint64_t{0u}
  , /*decltype(_impl_.drift_samples_)*/int64_t{0}
  , /*decltype(_impl_.drift_ms_)*/0
  , /*decltype(_impl_.clock_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RTPDriftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPDriftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPDriftDefaultTypeInternal() {}
  union {
    RTPDrift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPDriftDefaultTypeInternal _RTPDrift_default_instance_;
PROTOBUF_CONSTEXPR RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RTPStats_GapHistogramEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal _RTPStats_GapHistogramEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RTPStats::RTPStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gap_histogram_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.last_pli_)*/nullptr
  , /*decltype(_impl_.last_fir_)*/nullptr
  , /*decltype(_impl_.last_key_frame_)*/nullptr
  , /*decltype(_impl_.last_layer_lock_pli_)*/nullptr
  , /*decltype(_impl_.packet_drift_)*/nullptr
  , /*decltype(_impl_.ntp_report_drift_)*/nullptr
  , /*decltype(_impl_.rebased_report_drift_)*/nullptr
  , /*decltype(_impl_.received_report_drift_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.packet_rate_)*/0
  , /*decltype(_impl_.bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_)*/0u
  , /*decltype(_impl_.packets_lost_)*/0u
  , /*decltype(_impl_.bitrate_)*/0
  , /*decltype(_impl_.packet_loss_rate_)*/0
  , /*decltype(_impl_.packet_loss_percentage_)*/0
  , /*decltype(_impl_.packets_duplicate_)*/0u
  , /*decltype(_impl_.packet_duplicate_rate_)*/0
  , /*decltype(_impl_.bytes_duplicate_)*/uint64_t{0u}
  , /*decltype(_impl_.bitrate_duplicate_)*/0
  , /*decltype(_impl_.packet_padding_rate_)*/0
  , /*decltype(_impl_.bytes_padding_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_padding_)*/0u
  , /*decltype(_impl_.packets_out_of_order_)*/0u
  , /*decltype(_impl_.bitrate_padding_)*/0
  , /*decltype(_impl_.frame_rate_)*/0
  , /*decltype(_impl_.jitter_current_)*/0
  , /*decltype(_impl_.frames_)*/0u
  , /*decltype(_impl_.nacks_)*/0u
  , /*decltype(_impl_.jitter_max_)*/0
  , /*decltype(_impl_.nack_misses_)*/0u
  , /*decltype(_impl_.plis_)*/0u
  , /*decltype(_impl_.firs_)*/0u
  , /*decltype(_impl_.rtt_current_)*/0u
  , /*decltype(_impl_.rtt_max_)*/0u
  , /*decltype(_impl_.key_frames_)*/0u
  , /*decltype(_impl_.layer_lock_plis_)*/0u
  , /*decltype(_impl_.nack_acks_)*/0u
  , /*decltype(_impl_.header_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.header_bytes_duplicate_)*/uint64_t{0u}
  , /*decltype(_impl_.header_bytes_padding_)*/uint64_t{0u}
  , /*decltype(_impl_.nack_repeated_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RTPStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPStatsDefaultTypeInternal() {}
  union {
    RTPStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPStatsDefaultTypeInternal _RTPStats_default_instance_;
PROTOBUF_CONSTEXPR RTCPSenderReportState::RTCPSenderReportState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rtp_timestamp_ext_)*/uint64_t{0u}
  , /*decltype(_impl_.ntp_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.rtp_timestamp_)*/0u
  , /*decltype(_impl_.packets_)*/0u
  , /*decltype(_impl_.at_)*/int64_t{0}
  , /*decltype(_impl_.at_adjusted_)*/int64_t{0}
  , /*decltype(_impl_.octets_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RTCPSenderReportStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTCPSenderReportStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTCPSenderReportStateDefaultTypeInternal() {}
  union {
    RTCPSenderReportState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTCPSenderReportStateDefaultTypeInternal _RTCPSenderReportState_default_instance_;
PROTOBUF_CONSTEXPR RTPForwarderState::RTPForwarderState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_report_state_)*/{}
  , /*decltype(_impl_.rtp_munger_)*/nullptr
  , /*decltype(_impl_.started_)*/false
  , /*decltype(_impl_.reference_layer_spatial_)*/0
  , /*decltype(_impl_.pre_start_time_)*/int64_t{0}
  , /*decltype(_impl_.ext_first_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.dummy_start_timestamp_offset_)*/uint64_t{0u}
  , /*decltype(_impl_.codec_munger_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RTPForwarderStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPForwarderStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPForwarderStateDefaultTypeInternal() {}
  union {
    RTPForwarderState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPForwarderStateDefaultTypeInternal _RTPForwarderState_default_instance_;
PROTOBUF_CONSTEXPR RTPMungerState::RTPMungerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ext_last_sequence_number_)*/uint64_t{0u}
  , /*decltype(_impl_.ext_second_last_sequence_number_)*/uint64_t{0u}
  , /*decltype(_impl_.ext_last_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.ext_second_last_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.last_marker_)*/false
  , /*decltype(_impl_.second_last_marker_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RTPMungerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPMungerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPMungerStateDefaultTypeInternal() {}
  union {
    RTPMungerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPMungerStateDefaultTypeInternal _RTPMungerState_default_instance_;
PROTOBUF_CONSTEXPR VP8MungerState::VP8MungerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ext_last_picture_id_)*/0
  , /*decltype(_impl_.last_tl0_pic_idx_)*/0u
  , /*decltype(_impl_.picture_id_used_)*/false
  , /*decltype(_impl_.tl0_pic_idx_used_)*/false
  , /*decltype(_impl_.tid_used_)*/false
  , /*decltype(_impl_.key_idx_used_)*/false
  , /*decltype(_impl_.last_key_idx_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VP8MungerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VP8MungerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VP8MungerStateDefaultTypeInternal() {}
  union {
    VP8MungerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VP8MungerStateDefaultTypeInternal _VP8MungerState_default_instance_;
PROTOBUF_CONSTEXPR TimedVersion::TimedVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unix_micro_)*/int64_t{0}
  , /*decltype(_impl_.ticks_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimedVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedVersionDefaultTypeInternal() {}
  union {
    TimedVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedVersionDefaultTypeInternal _TimedVersion_default_instance_;
PROTOBUF_CONSTEXPR DataStream_TextHeader::DataStream_TextHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attached_stream_ids_)*/{}
  , /*decltype(_impl_.reply_to_stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_type_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.generated_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataStream_TextHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_TextHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_TextHeaderDefaultTypeInternal() {}
  union {
    DataStream_TextHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_TextHeaderDefaultTypeInternal _DataStream_TextHeader_default_instance_;
PROTOBUF_CONSTEXPR DataStream_ByteHeader::DataStream_ByteHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataStream_ByteHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_ByteHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_ByteHeaderDefaultTypeInternal() {}
  union {
    DataStream_ByteHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_ByteHeaderDefaultTypeInternal _DataStream_ByteHeader_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataStream_Header_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Header_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Header::DataStream_Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.total_length_)*/uint64_t{0u}
  , /*decltype(_impl_.encryption_type_)*/0
  , /*decltype(_impl_.content_header_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataStream_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_HeaderDefaultTypeInternal() {}
  union {
    DataStream_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_HeaderDefaultTypeInternal _DataStream_Header_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Chunk::DataStream_Chunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_index_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0} {}
struct DataStream_ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_ChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_ChunkDefaultTypeInternal() {}
  union {
    DataStream_Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_ChunkDefaultTypeInternal _DataStream_Chunk_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataStream_Trailer_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Trailer::DataStream_Trailer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataStream_TrailerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_TrailerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_TrailerDefaultTypeInternal() {}
  union {
    DataStream_Trailer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_TrailerDefaultTypeInternal _DataStream_Trailer_default_instance_;
PROTOBUF_CONSTEXPR DataStream::DataStream(
    ::_pbi::ConstantInitialized) {}
struct DataStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStreamDefaultTypeInternal() {}
  union {
    DataStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStreamDefaultTypeInternal _DataStream_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5fmodels_2eproto[45];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_livekit_5fmodels_2eproto[20];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5fmodels_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fmodels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _impl_.after_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.empty_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.departure_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.max_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.creation_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.creation_time_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.turn_password_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.enabled_codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.num_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.num_publishers_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.active_recording_),
  PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Codec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Codec, _impl_.mime_),
  PROTOBUF_FIELD_OFFSET(::livekit::Codec, _impl_.fmtp_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_.max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_publish_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_publish_data_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_publish_sources_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.hidden_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.recorder_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_update_metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.agent_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_subscribe_metrics_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.tracks_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.joined_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.joined_at_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.is_publisher_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.disconnect_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Encryption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.cid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.muted_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.simulcast_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.disable_dtx_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.layers_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.stereo_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.disable_red_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.encryption_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.audio_features_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.backup_codec_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.ssrc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.destination_identities_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ActiveSpeakerUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ActiveSpeakerUpdate, _impl_.speakers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.destination_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.nonce_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _impl_.digit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_.transcribed_participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_.track_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.final_),
  PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.edit_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.generated_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.response_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcAck, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_.request_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _impl_.participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _impl_.track_sids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.edition_),
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.debug_info_),
  PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.agent_protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.sdk_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.os_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.os_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.device_model_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.browser_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.browser_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.other_sdks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.video_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.screen_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.resume_connection_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.disabled_codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.force_relay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, _impl_.hardware_encoder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DisabledCodecs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DisabledCodecs, _impl_.codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::DisabledCodecs, _impl_.publish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.rtp_clock_ticks_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.drift_samples_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.drift_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.clock_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bytes_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.header_bytes_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_lost_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_loss_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_loss_percentage_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_duplicate_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bytes_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.header_bytes_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bitrate_duplicate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_padding_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bytes_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.header_bytes_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bitrate_padding_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_out_of_order_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.frames_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.frame_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.jitter_current_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.jitter_max_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.gap_histogram_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nacks_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nack_acks_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nack_misses_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nack_repeated_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.plis_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_pli_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.firs_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_fir_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.rtt_current_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.rtt_max_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.key_frames_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_key_frame_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.layer_lock_plis_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_layer_lock_pli_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_drift_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.ntp_report_drift_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.rebased_report_drift_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.received_report_drift_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.rtp_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.rtp_timestamp_ext_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.ntp_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.at_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.at_adjusted_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.packets_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.octets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.started_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.reference_layer_spatial_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.pre_start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.ext_first_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.dummy_start_timestamp_offset_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.rtp_munger_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.sender_report_state_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.codec_munger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_last_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_second_last_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_last_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_second_last_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.last_marker_),
  PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.second_last_marker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.ext_last_picture_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.picture_id_used_),
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.last_tl0_pic_idx_),
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.tl0_pic_idx_used_),
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.tid_used_),
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.last_key_idx_),
  PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.key_idx_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _impl_.unix_micro_),
  PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _impl_.ticks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.operation_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.reply_to_stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.attached_stream_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.generated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_ByteHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_ByteHeader, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.total_length_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.encryption_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.attributes_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.content_header_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.chunk_index_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.iv_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::Pagination)},
  { 8, -1, -1, sizeof(::livekit::Room)},
  { 28, -1, -1, sizeof(::livekit::Codec)},
  { 36, -1, -1, sizeof(::livekit::PlayoutDelay)},
  { 45, -1, -1, sizeof(::livekit::ParticipantPermission)},
  { 60, 68, -1, sizeof(::livekit::ParticipantInfo_AttributesEntry_DoNotUse)},
  { 70, -1, -1, sizeof(::livekit::ParticipantInfo)},
  { 91, -1, -1, sizeof(::livekit::Encryption)},
  { 97, -1, -1, sizeof(::livekit::SimulcastCodecInfo)},
  { 107, -1, -1, sizeof(::livekit::TrackInfo)},
  { 133, -1, -1, sizeof(::livekit::VideoLayer)},
  { 144, -1, -1, sizeof(::livekit::DataPacket)},
  { 166, -1, -1, sizeof(::livekit::ActiveSpeakerUpdate)},
  { 173, -1, -1, sizeof(::livekit::SpeakerInfo)},
  { 182, 198, -1, sizeof(::livekit::UserPacket)},
  { 208, -1, -1, sizeof(::livekit::SipDTMF)},
  { 216, -1, -1, sizeof(::livekit::Transcription)},
  { 225, -1, -1, sizeof(::livekit::TranscriptionSegment)},
  { 237, 249, -1, sizeof(::livekit::ChatMessage)},
  { 255, -1, -1, sizeof(::livekit::RpcRequest)},
  { 266, -1, -1, sizeof(::livekit::RpcAck)},
  { 273, -1, -1, sizeof(::livekit::RpcResponse)},
  { 283, -1, -1, sizeof(::livekit::RpcError)},
  { 292, -1, -1, sizeof(::livekit::ParticipantTracks)},
  { 300, -1, -1, sizeof(::livekit::ServerInfo)},
  { 313, -1, -1, sizeof(::livekit::ClientInfo)},
  { 330, -1, -1, sizeof(::livekit::ClientConfiguration)},
  { 341, -1, -1, sizeof(::livekit::VideoConfiguration)},
  { 348, -1, -1, sizeof(::livekit::DisabledCodecs)},
  { 356, -1, -1, sizeof(::livekit::RTPDrift)},
  { 371, 379, -1, sizeof(::livekit::RTPStats_GapHistogramEntry_DoNotUse)},
  { 381, -1, -1, sizeof(::livekit::RTPStats)},
  { 432, -1, -1, sizeof(::livekit::RTCPSenderReportState)},
  { 445, -1, -1, sizeof(::livekit::RTPForwarderState)},
  { 460, -1, -1, sizeof(::livekit::RTPMungerState)},
  { 472, -1, -1, sizeof(::livekit::VP8MungerState)},
  { 485, -1, -1, sizeof(::livekit::TimedVersion)},
  { 493, -1, -1, sizeof(::livekit::DataStream_TextHeader)},
  { 504, -1, -1, sizeof(::livekit::DataStream_ByteHeader)},
  { 511, 519, -1, sizeof(::livekit::DataStream_Header_AttributesEntry_DoNotUse)},
  { 521, 537, -1, sizeof(::livekit::DataStream_Header)},
  { 546, 557, -1, sizeof(::livekit::DataStream_Chunk)},
  { 562, 570, -1, sizeof(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse)},
  { 572, -1, -1, sizeof(::livekit::DataStream_Trailer)},
  { 581, -1, -1, sizeof(::livekit::DataStream)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_Pagination_default_instance_._instance,
  &::livekit::_Room_default_instance_._instance,
  &::livekit::_Codec_default_instance_._instance,
  &::livekit::_PlayoutDelay_default_instance_._instance,
  &::livekit::_ParticipantPermission_default_instance_._instance,
  &::livekit::_ParticipantInfo_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_ParticipantInfo_default_instance_._instance,
  &::livekit::_Encryption_default_instance_._instance,
  &::livekit::_SimulcastCodecInfo_default_instance_._instance,
  &::livekit::_TrackInfo_default_instance_._instance,
  &::livekit::_VideoLayer_default_instance_._instance,
  &::livekit::_DataPacket_default_instance_._instance,
  &::livekit::_ActiveSpeakerUpdate_default_instance_._instance,
  &::livekit::_SpeakerInfo_default_instance_._instance,
  &::livekit::_UserPacket_default_instance_._instance,
  &::livekit::_SipDTMF_default_instance_._instance,
  &::livekit::_Transcription_default_instance_._instance,
  &::livekit::_TranscriptionSegment_default_instance_._instance,
  &::livekit::_ChatMessage_default_instance_._instance,
  &::livekit::_RpcRequest_default_instance_._instance,
  &::livekit::_RpcAck_default_instance_._instance,
  &::livekit::_RpcResponse_default_instance_._instance,
  &::livekit::_RpcError_default_instance_._instance,
  &::livekit::_ParticipantTracks_default_instance_._instance,
  &::livekit::_ServerInfo_default_instance_._instance,
  &::livekit::_ClientInfo_default_instance_._instance,
  &::livekit::_ClientConfiguration_default_instance_._instance,
  &::livekit::_VideoConfiguration_default_instance_._instance,
  &::livekit::_DisabledCodecs_default_instance_._instance,
  &::livekit::_RTPDrift_default_instance_._instance,
  &::livekit::_RTPStats_GapHistogramEntry_DoNotUse_default_instance_._instance,
  &::livekit::_RTPStats_default_instance_._instance,
  &::livekit::_RTCPSenderReportState_default_instance_._instance,
  &::livekit::_RTPForwarderState_default_instance_._instance,
  &::livekit::_RTPMungerState_default_instance_._instance,
  &::livekit::_VP8MungerState_default_instance_._instance,
  &::livekit::_TimedVersion_default_instance_._instance,
  &::livekit::_DataStream_TextHeader_default_instance_._instance,
  &::livekit::_DataStream_ByteHeader_default_instance_._instance,
  &::livekit::_DataStream_Header_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_DataStream_Header_default_instance_._instance,
  &::livekit::_DataStream_Chunk_default_instance_._instance,
  &::livekit::_DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_DataStream_Trailer_default_instance_._instance,
  &::livekit::_DataStream_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5fmodels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024livekit_models.proto\022\007livekit\032\037google/"
  "protobuf/timestamp.proto\032\025livekit_metric"
  "s.proto\"-\n\nPagination\022\020\n\010after_id\030\001 \001(\t\022"
  "\r\n\005limit\030\002 \001(\005\"\343\002\n\004Room\022\013\n\003sid\030\001 \001(\t\022\014\n\004"
  "name\030\002 \001(\t\022\025\n\rempty_timeout\030\003 \001(\r\022\031\n\021dep"
  "arture_timeout\030\016 \001(\r\022\030\n\020max_participants"
  "\030\004 \001(\r\022\025\n\rcreation_time\030\005 \001(\003\022\030\n\020creatio"
  "n_time_ms\030\017 \001(\003\022\025\n\rturn_password\030\006 \001(\t\022&"
  "\n\016enabled_codecs\030\007 \003(\0132\016.livekit.Codec\022\020"
  "\n\010metadata\030\010 \001(\t\022\030\n\020num_participants\030\t \001"
  "(\r\022\026\n\016num_publishers\030\013 \001(\r\022\030\n\020active_rec"
  "ording\030\n \001(\010\022&\n\007version\030\r \001(\0132\025.livekit."
  "TimedVersion\"(\n\005Codec\022\014\n\004mime\030\001 \001(\t\022\021\n\tf"
  "mtp_line\030\002 \001(\t\"9\n\014PlayoutDelay\022\017\n\007enable"
  "d\030\001 \001(\010\022\013\n\003min\030\002 \001(\r\022\013\n\003max\030\003 \001(\r\"\205\002\n\025Pa"
  "rticipantPermission\022\025\n\rcan_subscribe\030\001 \001"
  "(\010\022\023\n\013can_publish\030\002 \001(\010\022\030\n\020can_publish_d"
  "ata\030\003 \001(\010\0221\n\023can_publish_sources\030\t \003(\0162\024"
  ".livekit.TrackSource\022\016\n\006hidden\030\007 \001(\010\022\024\n\010"
  "recorder\030\010 \001(\010B\002\030\001\022\033\n\023can_update_metadat"
  "a\030\n \001(\010\022\021\n\005agent\030\013 \001(\010B\002\030\001\022\035\n\025can_subscr"
  "ibe_metrics\030\014 \001(\010\"\216\005\n\017ParticipantInfo\022\013\n"
  "\003sid\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022-\n\005state\030\003 "
  "\001(\0162\036.livekit.ParticipantInfo.State\022\"\n\006t"
  "racks\030\004 \003(\0132\022.livekit.TrackInfo\022\020\n\010metad"
  "ata\030\005 \001(\t\022\021\n\tjoined_at\030\006 \001(\003\022\024\n\014joined_a"
  "t_ms\030\021 \001(\003\022\014\n\004name\030\t \001(\t\022\017\n\007version\030\n \001("
  "\r\0222\n\npermission\030\013 \001(\0132\036.livekit.Particip"
  "antPermission\022\016\n\006region\030\014 \001(\t\022\024\n\014is_publ"
  "isher\030\r \001(\010\022+\n\004kind\030\016 \001(\0162\035.livekit.Part"
  "icipantInfo.Kind\022<\n\nattributes\030\017 \003(\0132(.l"
  "ivekit.ParticipantInfo.AttributesEntry\0224"
  "\n\021disconnect_reason\030\020 \001(\0162\031.livekit.Disc"
  "onnectReason\0321\n\017AttributesEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\">\n\005State\022\013\n\007JOIN"
  "ING\020\000\022\n\n\006JOINED\020\001\022\n\n\006ACTIVE\020\002\022\020\n\014DISCONN"
  "ECTED\020\003\"A\n\004Kind\022\014\n\010STANDARD\020\000\022\013\n\007INGRESS"
  "\020\001\022\n\n\006EGRESS\020\002\022\007\n\003SIP\020\003\022\t\n\005AGENT\020\004\"3\n\nEn"
  "cryption\"%\n\004Type\022\010\n\004NONE\020\000\022\007\n\003GCM\020\001\022\n\n\006C"
  "USTOM\020\002\"f\n\022SimulcastCodecInfo\022\021\n\tmime_ty"
  "pe\030\001 \001(\t\022\013\n\003mid\030\002 \001(\t\022\013\n\003cid\030\003 \001(\t\022#\n\006la"
  "yers\030\004 \003(\0132\023.livekit.VideoLayer\"\256\004\n\tTrac"
  "kInfo\022\013\n\003sid\030\001 \001(\t\022 \n\004type\030\002 \001(\0162\022.livek"
  "it.TrackType\022\014\n\004name\030\003 \001(\t\022\r\n\005muted\030\004 \001("
  "\010\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030\006 \001(\r\022\021\n\tsimu"
  "lcast\030\007 \001(\010\022\023\n\013disable_dtx\030\010 \001(\010\022$\n\006sour"
  "ce\030\t \001(\0162\024.livekit.TrackSource\022#\n\006layers"
  "\030\n \003(\0132\023.livekit.VideoLayer\022\021\n\tmime_type"
  "\030\013 \001(\t\022\013\n\003mid\030\014 \001(\t\022+\n\006codecs\030\r \003(\0132\033.li"
  "vekit.SimulcastCodecInfo\022\016\n\006stereo\030\016 \001(\010"
  "\022\023\n\013disable_red\030\017 \001(\010\022,\n\nencryption\030\020 \001("
  "\0162\030.livekit.Encryption.Type\022\016\n\006stream\030\021 "
  "\001(\t\022&\n\007version\030\022 \001(\0132\025.livekit.TimedVers"
  "ion\0222\n\016audio_features\030\023 \003(\0162\032.livekit.Au"
  "dioTrackFeature\0227\n\023backup_codec_policy\030\024"
  " \001(\0162\032.livekit.BackupCodecPolicy\"r\n\nVide"
  "oLayer\022&\n\007quality\030\001 \001(\0162\025.livekit.VideoQ"
  "uality\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\017\n"
  "\007bitrate\030\004 \001(\r\022\014\n\004ssrc\030\005 \001(\r\"\306\005\n\nDataPac"
  "ket\022*\n\004kind\030\001 \001(\0162\030.livekit.DataPacket.K"
  "indB\002\030\001\022\034\n\024participant_identity\030\004 \001(\t\022\036\n"
  "\026destination_identities\030\005 \003(\t\022#\n\004user\030\002 "
  "\001(\0132\023.livekit.UserPacketH\000\0223\n\007speaker\030\003 "
  "\001(\0132\034.livekit.ActiveSpeakerUpdateB\002\030\001H\000\022"
  "$\n\010sip_dtmf\030\006 \001(\0132\020.livekit.SipDTMFH\000\022/\n"
  "\rtranscription\030\007 \001(\0132\026.livekit.Transcrip"
  "tionH\000\022(\n\007metrics\030\010 \001(\0132\025.livekit.Metric"
  "sBatchH\000\022,\n\014chat_message\030\t \001(\0132\024.livekit"
  ".ChatMessageH\000\022*\n\013rpc_request\030\n \001(\0132\023.li"
  "vekit.RpcRequestH\000\022\"\n\007rpc_ack\030\013 \001(\0132\017.li"
  "vekit.RpcAckH\000\022,\n\014rpc_response\030\014 \001(\0132\024.l"
  "ivekit.RpcResponseH\000\0223\n\rstream_header\030\r "
  "\001(\0132\032.livekit.DataStream.HeaderH\000\0221\n\014str"
  "eam_chunk\030\016 \001(\0132\031.livekit.DataStream.Chu"
  "nkH\000\0225\n\016stream_trailer\030\017 \001(\0132\033.livekit.D"
  "ataStream.TrailerH\000\"\037\n\004Kind\022\014\n\010RELIABLE\020"
  "\000\022\t\n\005LOSSY\020\001B\007\n\005value\"=\n\023ActiveSpeakerUp"
  "date\022&\n\010speakers\030\001 \003(\0132\024.livekit.Speaker"
  "Info\"9\n\013SpeakerInfo\022\013\n\003sid\030\001 \001(\t\022\r\n\005leve"
  "l\030\002 \001(\002\022\016\n\006active\030\003 \001(\010\"\257\002\n\nUserPacket\022\033"
  "\n\017participant_sid\030\001 \001(\tB\002\030\001\022 \n\024participa"
  "nt_identity\030\005 \001(\tB\002\030\001\022\017\n\007payload\030\002 \001(\014\022\034"
  "\n\020destination_sids\030\003 \003(\tB\002\030\001\022\"\n\026destinat"
  "ion_identities\030\006 \003(\tB\002\030\001\022\022\n\005topic\030\004 \001(\tH"
  "\000\210\001\001\022\017\n\002id\030\010 \001(\tH\001\210\001\001\022\027\n\nstart_time\030\t \001("
  "\004H\002\210\001\001\022\025\n\010end_time\030\n \001(\004H\003\210\001\001\022\r\n\005nonce\030\013"
  " \001(\014B\010\n\006_topicB\005\n\003_idB\r\n\013_start_timeB\013\n\t"
  "_end_time\"&\n\007SipDTMF\022\014\n\004code\030\003 \001(\r\022\r\n\005di"
  "git\030\004 \001(\t\"|\n\rTranscription\022(\n transcribe"
  "d_participant_identity\030\002 \001(\t\022\020\n\010track_id"
  "\030\003 \001(\t\022/\n\010segments\030\004 \003(\0132\035.livekit.Trans"
  "criptionSegment\"w\n\024TranscriptionSegment\022"
  "\n\n\002id\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022\022\n\nstart_time\030"
  "\003 \001(\004\022\020\n\010end_time\030\004 \001(\004\022\r\n\005final\030\005 \001(\010\022\020"
  "\n\010language\030\006 \001(\t\"\221\001\n\013ChatMessage\022\n\n\002id\030\001"
  " \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\033\n\016edit_timestam"
  "p\030\003 \001(\003H\000\210\001\001\022\017\n\007message\030\004 \001(\t\022\017\n\007deleted"
  "\030\005 \001(\010\022\021\n\tgenerated\030\006 \001(\010B\021\n\017_edit_times"
  "tamp\"g\n\nRpcRequest\022\n\n\002id\030\001 \001(\t\022\016\n\006method"
  "\030\002 \001(\t\022\017\n\007payload\030\003 \001(\t\022\033\n\023response_time"
  "out_ms\030\004 \001(\r\022\017\n\007version\030\005 \001(\r\"\034\n\006RpcAck\022"
  "\022\n\nrequest_id\030\001 \001(\t\"a\n\013RpcResponse\022\022\n\nre"
  "quest_id\030\001 \001(\t\022\021\n\007payload\030\002 \001(\tH\000\022\"\n\005err"
  "or\030\003 \001(\0132\021.livekit.RpcErrorH\000B\007\n\005value\"7"
  "\n\010RpcError\022\014\n\004code\030\001 \001(\r\022\017\n\007message\030\002 \001("
  "\t\022\014\n\004data\030\003 \001(\t\"@\n\021ParticipantTracks\022\027\n\017"
  "participant_sid\030\001 \001(\t\022\022\n\ntrack_sids\030\002 \003("
  "\t\"\316\001\n\nServerInfo\022,\n\007edition\030\001 \001(\0162\033.live"
  "kit.ServerInfo.Edition\022\017\n\007version\030\002 \001(\t\022"
  "\020\n\010protocol\030\003 \001(\005\022\016\n\006region\030\004 \001(\t\022\017\n\007nod"
  "e_id\030\005 \001(\t\022\022\n\ndebug_info\030\006 \001(\t\022\026\n\016agent_"
  "protocol\030\007 \001(\005\"\"\n\007Edition\022\014\n\010Standard\020\000\022"
  "\t\n\005Cloud\020\001\"\212\003\n\nClientInfo\022$\n\003sdk\030\001 \001(\0162\027"
  ".livekit.ClientInfo.SDK\022\017\n\007version\030\002 \001(\t"
  "\022\020\n\010protocol\030\003 \001(\005\022\n\n\002os\030\004 \001(\t\022\022\n\nos_ver"
  "sion\030\005 \001(\t\022\024\n\014device_model\030\006 \001(\t\022\017\n\007brow"
  "ser\030\007 \001(\t\022\027\n\017browser_version\030\010 \001(\t\022\017\n\007ad"
  "dress\030\t \001(\t\022\017\n\007network\030\n \001(\t\022\022\n\nother_sd"
  "ks\030\013 \001(\t\"\234\001\n\003SDK\022\013\n\007UNKNOWN\020\000\022\006\n\002JS\020\001\022\t\n"
  "\005SWIFT\020\002\022\013\n\007ANDROID\020\003\022\013\n\007FLUTTER\020\004\022\006\n\002GO"
  "\020\005\022\t\n\005UNITY\020\006\022\020\n\014REACT_NATIVE\020\007\022\010\n\004RUST\020"
  "\010\022\n\n\006PYTHON\020\t\022\007\n\003CPP\020\n\022\r\n\tUNITY_WEB\020\013\022\010\n"
  "\004NODE\020\014\"\214\002\n\023ClientConfiguration\022*\n\005video"
  "\030\001 \001(\0132\033.livekit.VideoConfiguration\022+\n\006s"
  "creen\030\002 \001(\0132\033.livekit.VideoConfiguration"
  "\0227\n\021resume_connection\030\003 \001(\0162\034.livekit.Cl"
  "ientConfigSetting\0220\n\017disabled_codecs\030\004 \001"
  "(\0132\027.livekit.DisabledCodecs\0221\n\013force_rel"
  "ay\030\005 \001(\0162\034.livekit.ClientConfigSetting\"L"
  "\n\022VideoConfiguration\0226\n\020hardware_encoder"
  "\030\001 \001(\0162\034.livekit.ClientConfigSetting\"Q\n\016"
  "DisabledCodecs\022\036\n\006codecs\030\001 \003(\0132\016.livekit"
  ".Codec\022\037\n\007publish\030\002 \003(\0132\016.livekit.Codec\""
  "\200\002\n\010RTPDrift\022.\n\nstart_time\030\001 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022,\n\010end_time\030\002 \001(\0132\032"
  ".google.protobuf.Timestamp\022\020\n\010duration\030\003"
  " \001(\001\022\027\n\017start_timestamp\030\004 \001(\004\022\025\n\rend_tim"
  "estamp\030\005 \001(\004\022\027\n\017rtp_clock_ticks\030\006 \001(\004\022\025\n"
  "\rdrift_samples\030\007 \001(\003\022\020\n\010drift_ms\030\010 \001(\001\022\022"
  "\n\nclock_rate\030\t \001(\001\"\326\n\n\010RTPStats\022.\n\nstart"
  "_time\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
  ",\n\010end_time\030\002 \001(\0132\032.google.protobuf.Time"
  "stamp\022\020\n\010duration\030\003 \001(\001\022\017\n\007packets\030\004 \001(\r"
  "\022\023\n\013packet_rate\030\005 \001(\001\022\r\n\005bytes\030\006 \001(\004\022\024\n\014"
  "header_bytes\030\' \001(\004\022\017\n\007bitrate\030\007 \001(\001\022\024\n\014p"
  "ackets_lost\030\010 \001(\r\022\030\n\020packet_loss_rate\030\t "
  "\001(\001\022\036\n\026packet_loss_percentage\030\n \001(\002\022\031\n\021p"
  "ackets_duplicate\030\013 \001(\r\022\035\n\025packet_duplica"
  "te_rate\030\014 \001(\001\022\027\n\017bytes_duplicate\030\r \001(\004\022\036"
  "\n\026header_bytes_duplicate\030( \001(\004\022\031\n\021bitrat"
  "e_duplicate\030\016 \001(\001\022\027\n\017packets_padding\030\017 \001"
  "(\r\022\033\n\023packet_padding_rate\030\020 \001(\001\022\025\n\rbytes"
  "_padding\030\021 \001(\004\022\034\n\024header_bytes_padding\030)"
  " \001(\004\022\027\n\017bitrate_padding\030\022 \001(\001\022\034\n\024packets"
  "_out_of_order\030\023 \001(\r\022\016\n\006frames\030\024 \001(\r\022\022\n\nf"
  "rame_rate\030\025 \001(\001\022\026\n\016jitter_current\030\026 \001(\001\022"
  "\022\n\njitter_max\030\027 \001(\001\022:\n\rgap_histogram\030\030 \003"
  "(\0132#.livekit.RTPStats.GapHistogramEntry\022"
  "\r\n\005nacks\030\031 \001(\r\022\021\n\tnack_acks\030% \001(\r\022\023\n\013nac"
  "k_misses\030\032 \001(\r\022\025\n\rnack_repeated\030& \001(\r\022\014\n"
  "\004plis\030\033 \001(\r\022,\n\010last_pli\030\034 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\014\n\004firs\030\035 \001(\r\022,\n\010last_"
  "fir\030\036 \001(\0132\032.google.protobuf.Timestamp\022\023\n"
  "\013rtt_current\030\037 \001(\r\022\017\n\007rtt_max\030  \001(\r\022\022\n\nk"
  "ey_frames\030! \001(\r\0222\n\016last_key_frame\030\" \001(\0132"
  "\032.google.protobuf.Timestamp\022\027\n\017layer_loc"
  "k_plis\030# \001(\r\0227\n\023last_layer_lock_pli\030$ \001("
  "\0132\032.google.protobuf.Timestamp\022\'\n\014packet_"
  "drift\030, \001(\0132\021.livekit.RTPDrift\022+\n\020ntp_re"
  "port_drift\030- \001(\0132\021.livekit.RTPDrift\022/\n\024r"
  "ebased_report_drift\030. \001(\0132\021.livekit.RTPD"
  "rift\0220\n\025received_report_drift\030/ \001(\0132\021.li"
  "vekit.RTPDrift\0323\n\021GapHistogramEntry\022\013\n\003k"
  "ey\030\001 \001(\005\022\r\n\005value\030\002 \001(\r:\0028\001\"\242\001\n\025RTCPSend"
  "erReportState\022\025\n\rrtp_timestamp\030\001 \001(\r\022\031\n\021"
  "rtp_timestamp_ext\030\002 \001(\004\022\025\n\rntp_timestamp"
  "\030\003 \001(\004\022\n\n\002at\030\004 \001(\003\022\023\n\013at_adjusted\030\005 \001(\003\022"
  "\017\n\007packets\030\006 \001(\r\022\016\n\006octets\030\007 \001(\004\"\311\002\n\021RTP"
  "ForwarderState\022\017\n\007started\030\001 \001(\010\022\037\n\027refer"
  "ence_layer_spatial\030\002 \001(\005\022\026\n\016pre_start_ti"
  "me\030\003 \001(\003\022\033\n\023ext_first_timestamp\030\004 \001(\004\022$\n"
  "\034dummy_start_timestamp_offset\030\005 \001(\004\022+\n\nr"
  "tp_munger\030\006 \001(\0132\027.livekit.RTPMungerState"
  "\022-\n\nvp8_munger\030\007 \001(\0132\027.livekit.VP8Munger"
  "StateH\000\022;\n\023sender_report_state\030\010 \003(\0132\036.l"
  "ivekit.RTCPSenderReportStateB\016\n\014codec_mu"
  "nger\"\313\001\n\016RTPMungerState\022 \n\030ext_last_sequ"
  "ence_number\030\001 \001(\004\022\'\n\037ext_second_last_seq"
  "uence_number\030\002 \001(\004\022\032\n\022ext_last_timestamp"
  "\030\003 \001(\004\022!\n\031ext_second_last_timestamp\030\004 \001("
  "\004\022\023\n\013last_marker\030\005 \001(\010\022\032\n\022second_last_ma"
  "rker\030\006 \001(\010\"\270\001\n\016VP8MungerState\022\033\n\023ext_las"
  "t_picture_id\030\001 \001(\005\022\027\n\017picture_id_used\030\002 "
  "\001(\010\022\030\n\020last_tl0_pic_idx\030\003 \001(\r\022\030\n\020tl0_pic"
  "_idx_used\030\004 \001(\010\022\020\n\010tid_used\030\005 \001(\010\022\024\n\014las"
  "t_key_idx\030\006 \001(\r\022\024\n\014key_idx_used\030\007 \001(\010\"1\n"
  "\014TimedVersion\022\022\n\nunix_micro\030\001 \001(\003\022\r\n\005tic"
  "ks\030\002 \001(\005\"\305\007\n\nDataStream\032\244\001\n\nTextHeader\0229"
  "\n\016operation_type\030\001 \001(\0162!.livekit.DataStr"
  "eam.OperationType\022\017\n\007version\030\002 \001(\005\022\032\n\022re"
  "ply_to_stream_id\030\003 \001(\t\022\033\n\023attached_strea"
  "m_ids\030\004 \003(\t\022\021\n\tgenerated\030\005 \001(\010\032\032\n\nByteHe"
  "ader\022\014\n\004name\030\001 \001(\t\032\242\003\n\006Header\022\021\n\tstream_"
  "id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\r\n\005topic\030\003 \001"
  "(\t\022\021\n\tmime_type\030\004 \001(\t\022\031\n\014total_length\030\005 "
  "\001(\004H\001\210\001\001\0221\n\017encryption_type\030\007 \001(\0162\030.live"
  "kit.Encryption.Type\022>\n\nattributes\030\010 \003(\0132"
  "*.livekit.DataStream.Header.AttributesEn"
  "try\0225\n\013text_header\030\t \001(\0132\036.livekit.DataS"
  "tream.TextHeaderH\000\0225\n\013byte_header\030\n \001(\0132"
  "\036.livekit.DataStream.ByteHeaderH\000\0321\n\017Att"
  "ributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  ":\0028\001B\020\n\016content_headerB\017\n\r_total_length\032"
  "i\n\005Chunk\022\021\n\tstream_id\030\001 \001(\t\022\023\n\013chunk_ind"
  "ex\030\002 \001(\004\022\017\n\007content\030\003 \001(\014\022\017\n\007version\030\004 \001"
  "(\005\022\017\n\002iv\030\005 \001(\014H\000\210\001\001B\005\n\003_iv\032\240\001\n\007Trailer\022\021"
  "\n\tstream_id\030\001 \001(\t\022\016\n\006reason\030\002 \001(\t\022\?\n\natt"
  "ributes\030\003 \003(\0132+.livekit.DataStream.Trail"
  "er.AttributesEntry\0321\n\017AttributesEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"A\n\rOperati"
  "onType\022\n\n\006CREATE\020\000\022\n\n\006UPDATE\020\001\022\n\n\006DELETE"
  "\020\002\022\014\n\010REACTION\020\003*/\n\nAudioCodec\022\016\n\nDEFAUL"
  "T_AC\020\000\022\010\n\004OPUS\020\001\022\007\n\003AAC\020\002*V\n\nVideoCodec\022"
  "\016\n\nDEFAULT_VC\020\000\022\021\n\rH264_BASELINE\020\001\022\r\n\tH2"
  "64_MAIN\020\002\022\r\n\tH264_HIGH\020\003\022\007\n\003VP8\020\004*)\n\nIma"
  "geCodec\022\016\n\nIC_DEFAULT\020\000\022\013\n\007IC_JPEG\020\001*2\n\021"
  "BackupCodecPolicy\022\016\n\nREGRESSION\020\000\022\r\n\tSIM"
  "ULCAST\020\001*+\n\tTrackType\022\t\n\005AUDIO\020\000\022\t\n\005VIDE"
  "O\020\001\022\010\n\004DATA\020\002*`\n\013TrackSource\022\013\n\007UNKNOWN\020"
  "\000\022\n\n\006CAMERA\020\001\022\016\n\nMICROPHONE\020\002\022\020\n\014SCREEN_"
  "SHARE\020\003\022\026\n\022SCREEN_SHARE_AUDIO\020\004*6\n\014Video"
  "Quality\022\007\n\003LOW\020\000\022\n\n\006MEDIUM\020\001\022\010\n\004HIGH\020\002\022\007"
  "\n\003OFF\020\003*@\n\021ConnectionQuality\022\010\n\004POOR\020\000\022\010"
  "\n\004GOOD\020\001\022\r\n\tEXCELLENT\020\002\022\010\n\004LOST\020\003*;\n\023Cli"
  "entConfigSetting\022\t\n\005UNSET\020\000\022\014\n\010DISABLED\020"
  "\001\022\013\n\007ENABLED\020\002*\254\002\n\020DisconnectReason\022\022\n\016U"
  "NKNOWN_REASON\020\000\022\024\n\020CLIENT_INITIATED\020\001\022\026\n"
  "\022DUPLICATE_IDENTITY\020\002\022\023\n\017SERVER_SHUTDOWN"
  "\020\003\022\027\n\023PARTICIPANT_REMOVED\020\004\022\020\n\014ROOM_DELE"
  "TED\020\005\022\022\n\016STATE_MISMATCH\020\006\022\020\n\014JOIN_FAILUR"
  "E\020\007\022\r\n\tMIGRATION\020\010\022\020\n\014SIGNAL_CLOSE\020\t\022\017\n\013"
  "ROOM_CLOSED\020\n\022\024\n\020USER_UNAVAILABLE\020\013\022\021\n\rU"
  "SER_REJECTED\020\014\022\025\n\021SIP_TRUNK_FAILURE\020\r*\211\001"
  "\n\017ReconnectReason\022\016\n\nRR_UNKNOWN\020\000\022\032\n\026RR_"
  "SIGNAL_DISCONNECTED\020\001\022\027\n\023RR_PUBLISHER_FA"
  "ILED\020\002\022\030\n\024RR_SUBSCRIBER_FAILED\020\003\022\027\n\023RR_S"
  "WITCH_CANDIDATE\020\004*T\n\021SubscriptionError\022\016"
  "\n\nSE_UNKNOWN\020\000\022\030\n\024SE_CODEC_UNSUPPORTED\020\001"
  "\022\025\n\021SE_TRACK_NOTFOUND\020\002*\243\001\n\021AudioTrackFe"
  "ature\022\r\n\tTF_STEREO\020\000\022\r\n\tTF_NO_DTX\020\001\022\030\n\024T"
  "F_AUTO_GAIN_CONTROL\020\002\022\030\n\024TF_ECHO_CANCELL"
  "ATION\020\003\022\030\n\024TF_NOISE_SUPPRESSION\020\004\022\"\n\036TF_"
  "ENHANCED_NOISE_CANCELLATION\020\005BFZ#github."
  "com/livekit/protocol/livekit\252\002\rLiveKit.P"
  "roto\352\002\016LiveKit::Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5fmodels_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_livekit_5fmetrics_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5fmodels_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5fmodels_2eproto = {
    false, false, 10189, descriptor_table_protodef_livekit_5fmodels_2eproto,
    "livekit_models.proto",
    &descriptor_table_livekit_5fmodels_2eproto_once, descriptor_table_livekit_5fmodels_2eproto_deps, 2, 45,
    schemas, file_default_instances, TableStruct_livekit_5fmodels_2eproto::offsets,
    file_level_metadata_livekit_5fmodels_2eproto, file_level_enum_descriptors_livekit_5fmodels_2eproto,
    file_level_service_descriptors_livekit_5fmodels_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5fmodels_2eproto_getter() {
  return &descriptor_table_livekit_5fmodels_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5fmodels_2eproto(&descriptor_table_livekit_5fmodels_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantInfo_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[0];
}
bool ParticipantInfo_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantInfo_State ParticipantInfo::JOINING;
constexpr ParticipantInfo_State ParticipantInfo::JOINED;
constexpr ParticipantInfo_State ParticipantInfo::ACTIVE;
constexpr ParticipantInfo_State ParticipantInfo::DISCONNECTED;
constexpr ParticipantInfo_State ParticipantInfo::State_MIN;
constexpr ParticipantInfo_State ParticipantInfo::State_MAX;
constexpr int ParticipantInfo::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantInfo_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[1];
}
bool ParticipantInfo_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantInfo_Kind ParticipantInfo::STANDARD;
constexpr ParticipantInfo_Kind ParticipantInfo::INGRESS;
constexpr ParticipantInfo_Kind ParticipantInfo::EGRESS;
constexpr ParticipantInfo_Kind ParticipantInfo::SIP;
constexpr ParticipantInfo_Kind ParticipantInfo::AGENT;
constexpr ParticipantInfo_Kind ParticipantInfo::Kind_MIN;
constexpr ParticipantInfo_Kind ParticipantInfo::Kind_MAX;
constexpr int ParticipantInfo::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encryption_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[2];
}
bool Encryption_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Encryption_Type Encryption::NONE;
constexpr Encryption_Type Encryption::GCM;
constexpr Encryption_Type Encryption::CUSTOM;
constexpr Encryption_Type Encryption::Type_MIN;
constexpr Encryption_Type Encryption::Type_MAX;
constexpr int Encryption::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPacket_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[3];
}
bool DataPacket_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataPacket_Kind DataPacket::RELIABLE;
constexpr DataPacket_Kind DataPacket::LOSSY;
constexpr DataPacket_Kind DataPacket::Kind_MIN;
constexpr DataPacket_Kind DataPacket::Kind_MAX;
constexpr int DataPacket::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerInfo_Edition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[4];
}
bool ServerInfo_Edition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerInfo_Edition ServerInfo::Standard;
constexpr ServerInfo_Edition ServerInfo::Cloud;
constexpr ServerInfo_Edition ServerInfo::Edition_MIN;
constexpr ServerInfo_Edition ServerInfo::Edition_MAX;
constexpr int ServerInfo::Edition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientInfo_SDK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[5];
}
bool ClientInfo_SDK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientInfo_SDK ClientInfo::UNKNOWN;
constexpr ClientInfo_SDK ClientInfo::JS;
constexpr ClientInfo_SDK ClientInfo::SWIFT;
constexpr ClientInfo_SDK ClientInfo::ANDROID;
constexpr ClientInfo_SDK ClientInfo::FLUTTER;
constexpr ClientInfo_SDK ClientInfo::GO;
constexpr ClientInfo_SDK ClientInfo::UNITY;
constexpr ClientInfo_SDK ClientInfo::REACT_NATIVE;
constexpr ClientInfo_SDK ClientInfo::RUST;
constexpr ClientInfo_SDK ClientInfo::PYTHON;
constexpr ClientInfo_SDK ClientInfo::CPP;
constexpr ClientInfo_SDK ClientInfo::UNITY_WEB;
constexpr ClientInfo_SDK ClientInfo::NODE;
constexpr ClientInfo_SDK ClientInfo::SDK_MIN;
constexpr ClientInfo_SDK ClientInfo::SDK_MAX;
constexpr int ClientInfo::SDK_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataStream_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[6];
}
bool DataStream_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataStream_OperationType DataStream::CREATE;
constexpr DataStream_OperationType DataStream::UPDATE;
constexpr DataStream_OperationType DataStream::DELETE;
constexpr DataStream_OperationType DataStream::REACTION;
constexpr DataStream_OperationType DataStream::OperationType_MIN;
constexpr DataStream_OperationType DataStream::OperationType_MAX;
constexpr int DataStream::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioCodec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[7];
}
bool AudioCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoCodec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[8];
}
bool VideoCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageCodec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[9];
}
bool ImageCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackupCodecPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[10];
}
bool BackupCodecPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[11];
}
bool TrackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[12];
}
bool TrackSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[13];
}
bool VideoQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[14];
}
bool ConnectionQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientConfigSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[15];
}
bool ClientConfigSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisconnectReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[16];
}
bool DisconnectReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReconnectReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[17];
}
bool ReconnectReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[18];
}
bool SubscriptionError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioTrackFeature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[19];
}
bool AudioTrackFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.after_id_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.after_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.after_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_after_id().empty()) {
    _this->_impl_.after_id_.Set(from._internal_after_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:livekit.Pagination)
}

inline void Pagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.after_id_){}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.after_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.after_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:livekit.Pagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.after_id_.Destroy();
}

void Pagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Pagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.after_id_.ClearToEmpty();
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string after_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_after_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Pagination.after_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Pagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string after_id = 1;
  if (!this->_internal_after_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_after_id().data(), static_cast<int>(this->_internal_after_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Pagination.after_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_after_id(), target);
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Pagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string after_id = 1;
  if (!this->_internal_after_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_after_id());
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }


void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pagination*>(&to_msg);
  auto& from = static_cast<const Pagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Pagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_after_id().empty()) {
    _this->_internal_set_after_id(from._internal_after_id());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.after_id_, lhs_arena,
      &other->_impl_.after_id_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[0]);
}

// ===================================================================

class Room::_Internal {
 public:
  static const ::livekit::TimedVersion& version(const Room* msg);
};

const ::livekit::TimedVersion&
Room::_Internal::version(const Room* msg) {
  return *msg->_impl_.version_;
}
Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Room* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_codecs_){from._impl_.enabled_codecs_}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.turn_password_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.empty_timeout_){}
    , decltype(_impl_.max_participants_){}
    , decltype(_impl_.creation_time_){}
    , decltype(_impl_.num_participants_){}
    , decltype(_impl_.active_recording_){}
    , decltype(_impl_.num_publishers_){}
    , decltype(_impl_.departure_timeout_){}
    , decltype(_impl_.creation_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.turn_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.turn_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_turn_password().empty()) {
    _this->_impl_.turn_password_.Set(from._internal_turn_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::livekit::TimedVersion(*from._impl_.version_);
  }
  ::memcpy(&_impl_.empty_timeout_, &from._impl_.empty_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creation_time_ms_) -
    reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.creation_time_ms_));
  // @@protoc_insertion_point(copy_constructor:livekit.Room)
}

inline void Room::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_codecs_){arena}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.turn_password_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.empty_timeout_){0u}
    , decltype(_impl_.max_participants_){0u}
    , decltype(_impl_.creation_time_){int64_t{0}}
    , decltype(_impl_.num_participants_){0u}
    , decltype(_impl_.active_recording_){false}
    , decltype(_impl_.num_publishers_){0u}
    , decltype(_impl_.departure_timeout_){0u}
    , decltype(_impl_.creation_time_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.turn_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.turn_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:livekit.Room)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enabled_codecs_.~RepeatedPtrField();
  _impl_.sid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.turn_password_.Destroy();
  _impl_.metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
}

void Room::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_codecs_.Clear();
  _impl_.sid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.turn_password_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  ::memset(&_impl_.empty_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.creation_time_ms_) -
      reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.creation_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Room.sid"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Room.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 empty_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empty_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_participants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 creation_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string turn_password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_turn_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Room.turn_password"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.Codec enabled_codecs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enabled_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Room.metadata"));
        } else
          goto handle_unusual;
        continue;
      // uint32 num_participants = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.num_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active_recording = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.active_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_publishers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.num_publishers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TimedVersion version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 departure_timeout = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.departure_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 creation_time_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.creation_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 empty_timeout = 3;
  if (this->_internal_empty_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empty_timeout(), target);
  }

  // uint32 max_participants = 4;
  if (this->_internal_max_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_participants(), target);
  }

  // int64 creation_time = 5;
  if (this->_internal_creation_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_creation_time(), target);
  }

  // string turn_password = 6;
  if (!this->_internal_turn_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_turn_password().data(), static_cast<int>(this->_internal_turn_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.turn_password");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_turn_password(), target);
  }

  // repeated .livekit.Codec enabled_codecs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enabled_codecs_size()); i < n; i++) {
    const auto& repfield = this->_internal_enabled_codecs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string metadata = 8;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Room.metadata");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // uint32 num_participants = 9;
  if (this->_internal_num_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_participants(), target);
  }

  // bool active_recording = 10;
  if (this->_internal_active_recording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_active_recording(), target);
  }

  // uint32 num_publishers = 11;
  if (this->_internal_num_publishers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_num_publishers(), target);
  }

  // .livekit.TimedVersion version = 13;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // uint32 departure_timeout = 14;
  if (this->_internal_departure_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_departure_timeout(), target);
  }

  // int64 creation_time_ms = 15;
  if (this->_internal_creation_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_creation_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.Codec enabled_codecs = 7;
  total_size += 1UL * this->_internal_enabled_codecs_size();
  for (const auto& msg : this->_impl_.enabled_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string turn_password = 6;
  if (!this->_internal_turn_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_turn_password());
  }

  // string metadata = 8;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .livekit.TimedVersion version = 13;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // uint32 empty_timeout = 3;
  if (this->_internal_empty_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empty_timeout());
  }

  // uint32 max_participants = 4;
  if (this->_internal_max_participants() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_participants());
  }

  // int64 creation_time = 5;
  if (this->_internal_creation_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time());
  }

  // uint32 num_participants = 9;
  if (this->_internal_num_participants() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_participants());
  }

  // bool active_recording = 10;
  if (this->_internal_active_recording() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_publishers = 11;
  if (this->_internal_num_publishers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_publishers());
  }

  // uint32 departure_timeout = 14;
  if (this->_internal_departure_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_departure_timeout());
  }

  // int64 creation_time_ms = 15;
  if (this->_internal_creation_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room::GetClassData() const { return &_class_data_; }


void Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Room)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enabled_codecs_.MergeFrom(from._impl_.enabled_codecs_);
  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_turn_password().empty()) {
    _this->_internal_set_turn_password(from._internal_turn_password());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::livekit::TimedVersion::MergeFrom(
        from._internal_version());
  }
  if (from._internal_empty_timeout() != 0) {
    _this->_internal_set_empty_timeout(from._internal_empty_timeout());
  }
  if (from._internal_max_participants() != 0) {
    _this->_internal_set_max_participants(from._internal_max_participants());
  }
  if (from._internal_creation_time() != 0) {
    _this->_internal_set_creation_time(from._internal_creation_time());
  }
  if (from._internal_num_participants() != 0) {
    _this->_internal_set_num_participants(from._internal_num_participants());
  }
  if (from._internal_active_recording() != 0) {
    _this->_internal_set_active_recording(from._internal_active_recording());
  }
  if (from._internal_num_publishers() != 0) {
    _this->_internal_set_num_publishers(from._internal_num_publishers());
  }
  if (from._internal_departure_timeout() != 0) {
    _this->_internal_set_departure_timeout(from._internal_departure_timeout());
  }
  if (from._internal_creation_time_ms() != 0) {
    _this->_internal_set_creation_time_ms(from._internal_creation_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enabled_codecs_.InternalSwap(&other->_impl_.enabled_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.turn_password_, lhs_arena,
      &other->_impl_.turn_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, _impl_.creation_time_ms_)
      + sizeof(Room::_impl_.creation_time_ms_)
      - PROTOBUF_FIELD_OFFSET(Room, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[1]);
}

// ===================================================================

class Codec::_Internal {
 public:
};

Codec::Codec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Codec)
}
Codec::Codec(const Codec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Codec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mime_){}
    , decltype(_impl_.fmtp_line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime().empty()) {
    _this->_impl_.mime_.Set(from._internal_mime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fmtp_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fmtp_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fmtp_line().empty()) {
    _this->_impl_.fmtp_line_.Set(from._internal_fmtp_line(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.Codec)
}

inline void Codec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mime_){}
    , decltype(_impl_.fmtp_line_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fmtp_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fmtp_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Codec::~Codec() {
  // @@protoc_insertion_point(destructor:livekit.Codec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Codec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mime_.Destroy();
  _impl_.fmtp_line_.Destroy();
}

void Codec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Codec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mime_.ClearToEmpty();
  _impl_.fmtp_line_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Codec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Codec.mime"));
        } else
          goto handle_unusual;
        continue;
      // string fmtp_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fmtp_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Codec.fmtp_line"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Codec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Codec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime = 1;
  if (!this->_internal_mime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime().data(), static_cast<int>(this->_internal_mime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Codec.mime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime(), target);
  }

  // string fmtp_line = 2;
  if (!this->_internal_fmtp_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fmtp_line().data(), static_cast<int>(this->_internal_fmtp_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Codec.fmtp_line");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fmtp_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Codec)
  return target;
}

size_t Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Codec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mime = 1;
  if (!this->_internal_mime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime());
  }

  // string fmtp_line = 2;
  if (!this->_internal_fmtp_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fmtp_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Codec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Codec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Codec::GetClassData() const { return &_class_data_; }


void Codec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Codec*>(&to_msg);
  auto& from = static_cast<const Codec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Codec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mime().empty()) {
    _this->_internal_set_mime(from._internal_mime());
  }
  if (!from._internal_fmtp_line().empty()) {
    _this->_internal_set_fmtp_line(from._internal_fmtp_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Codec::CopyFrom(const Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Codec::IsInitialized() const {
  return true;
}

void Codec::InternalSwap(Codec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_, lhs_arena,
      &other->_impl_.mime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fmtp_line_, lhs_arena,
      &other->_impl_.fmtp_line_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Codec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[2]);
}

// ===================================================================

class PlayoutDelay::_Internal {
 public:
};

PlayoutDelay::PlayoutDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.PlayoutDelay)
}
PlayoutDelay::PlayoutDelay(const PlayoutDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayoutDelay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:livekit.PlayoutDelay)
}

inline void PlayoutDelay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){false}
    , decltype(_impl_.min_){0u}
    , decltype(_impl_.max_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayoutDelay::~PlayoutDelay() {
  // @@protoc_insertion_point(destructor:livekit.PlayoutDelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayoutDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayoutDelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayoutDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.PlayoutDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayoutDelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayoutDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.PlayoutDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 min = 2;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // uint32 max = 3;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.PlayoutDelay)
  return target;
}

size_t PlayoutDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.PlayoutDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 min = 2;
  if (this->_internal_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
  }

  // uint32 max = 3;
  if (this->_internal_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayoutDelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayoutDelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayoutDelay::GetClassData() const { return &_class_data_; }


void PlayoutDelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayoutDelay*>(&to_msg);
  auto& from = static_cast<const PlayoutDelay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.PlayoutDelay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_min() != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayoutDelay::CopyFrom(const PlayoutDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.PlayoutDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayoutDelay::IsInitialized() const {
  return true;
}

void PlayoutDelay::InternalSwap(PlayoutDelay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.max_)
      + sizeof(PlayoutDelay::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayoutDelay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[3]);
}

// ===================================================================

class ParticipantPermission::_Internal {
 public:
};

ParticipantPermission::ParticipantPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantPermission)
}
ParticipantPermission::ParticipantPermission(const ParticipantPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.can_publish_sources_){from._impl_.can_publish_sources_}
    , /*decltype(_impl_._can_publish_sources_cached_byte_size_)*/{0}
    , decltype(_impl_.can_subscribe_){}
    , decltype(_impl_.can_publish_){}
    , decltype(_impl_.can_publish_data_){}
    , decltype(_impl_.hidden_){}
    , decltype(_impl_.recorder_){}
    , decltype(_impl_.can_update_metadata_){}
    , decltype(_impl_.agent_){}
    , decltype(_impl_.can_subscribe_metrics_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.can_subscribe_, &from._impl_.can_subscribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.can_subscribe_metrics_) -
    reinterpret_cast<char*>(&_impl_.can_subscribe_)) + sizeof(_impl_.can_subscribe_metrics_));
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantPermission)
}

inline void ParticipantPermission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.can_publish_sources_){arena}
    , /*decltype(_impl_._can_publish_sources_cached_byte_size_)*/{0}
    , decltype(_impl_.can_subscribe_){false}
    , decltype(_impl_.can_publish_){false}
    , decltype(_impl_.can_publish_data_){false}
    , decltype(_impl_.hidden_){false}
    , decltype(_impl_.recorder_){false}
    , decltype(_impl_.can_update_metadata_){false}
    , decltype(_impl_.agent_){false}
    , decltype(_impl_.can_subscribe_metrics_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParticipantPermission::~ParticipantPermission() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.can_publish_sources_.~RepeatedField();
}

void ParticipantPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.can_publish_sources_.Clear();
  ::memset(&_impl_.can_subscribe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.can_subscribe_metrics_) -
      reinterpret_cast<char*>(&_impl_.can_subscribe_)) + sizeof(_impl_.can_subscribe_metrics_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.can_subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_publish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.can_publish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_publish_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.can_publish_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hidden = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recorder = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.recorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackSource can_publish_sources = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_can_publish_sources(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_can_publish_sources(static_cast<::livekit::TrackSource>(val));
        } else
          goto handle_unusual;
        continue;
      // bool can_update_metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.can_update_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool agent = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_subscribe_metrics = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.can_subscribe_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_subscribe = 1;
  if (this->_internal_can_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_can_subscribe(), target);
  }

  // bool can_publish = 2;
  if (this->_internal_can_publish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_publish(), target);
  }

  // bool can_publish_data = 3;
  if (this->_internal_can_publish_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_can_publish_data(), target);
  }

  // bool hidden = 7;
  if (this->_internal_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_hidden(), target);
  }

  // bool recorder = 8 [deprecated = true];
  if (this->_internal_recorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_recorder(), target);
  }

  // repeated .livekit.TrackSource can_publish_sources = 9;
  {
    int byte_size = _impl_._can_publish_sources_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, _impl_.can_publish_sources_, byte_size, target);
    }
  }

  // bool can_update_metadata = 10;
  if (this->_internal_can_update_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_can_update_metadata(), target);
  }

  // bool agent = 11 [deprecated = true];
  if (this->_internal_agent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_agent(), target);
  }

  // bool can_subscribe_metrics = 12;
  if (this->_internal_can_subscribe_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_can_subscribe_metrics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantPermission)
  return target;
}

size_t ParticipantPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackSource can_publish_sources = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_can_publish_sources_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_can_publish_sources(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._can_publish_sources_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool can_subscribe = 1;
  if (this->_internal_can_subscribe() != 0) {
    total_size += 1 + 1;
  }

  // bool can_publish = 2;
  if (this->_internal_can_publish() != 0) {
    total_size += 1 + 1;
  }

  // bool can_publish_data = 3;
  if (this->_internal_can_publish_data() != 0) {
    total_size += 1 + 1;
  }

  // bool hidden = 7;
  if (this->_internal_hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool recorder = 8 [deprecated = true];
  if (this->_internal_recorder() != 0) {
    total_size += 1 + 1;
  }

  // bool can_update_metadata = 10;
  if (this->_internal_can_update_metadata() != 0) {
    total_size += 1 + 1;
  }

  // bool agent = 11 [deprecated = true];
  if (this->_internal_agent() != 0) {
    total_size += 1 + 1;
  }

  // bool can_subscribe_metrics = 12;
  if (this->_internal_can_subscribe_metrics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantPermission::GetClassData() const { return &_class_data_; }


void ParticipantPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantPermission*>(&to_msg);
  auto& from = static_cast<const ParticipantPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantPermission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.can_publish_sources_.MergeFrom(from._impl_.can_publish_sources_);
  if (from._internal_can_subscribe() != 0) {
    _this->_internal_set_can_subscribe(from._internal_can_subscribe());
  }
  if (from._internal_can_publish() != 0) {
    _this->_internal_set_can_publish(from._internal_can_publish());
  }
  if (from._internal_can_publish_data() != 0) {
    _this->_internal_set_can_publish_data(from._internal_can_publish_data());
  }
  if (from._internal_hidden() != 0) {
    _this->_internal_set_hidden(from._internal_hidden());
  }
  if (from._internal_recorder() != 0) {
    _this->_internal_set_recorder(from._internal_recorder());
  }
  if (from._internal_can_update_metadata() != 0) {
    _this->_internal_set_can_update_metadata(from._internal_can_update_metadata());
  }
  if (from._internal_agent() != 0) {
    _this->_internal_set_agent(from._internal_agent());
  }
  if (from._internal_can_subscribe_metrics() != 0) {
    _this->_internal_set_can_subscribe_metrics(from._internal_can_subscribe_metrics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantPermission::CopyFrom(const ParticipantPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantPermission::IsInitialized() const {
  return true;
}

void ParticipantPermission::InternalSwap(ParticipantPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.can_publish_sources_.InternalSwap(&other->_impl_.can_publish_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_metrics_)
      + sizeof(ParticipantPermission::_impl_.can_subscribe_metrics_)
      - PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_)>(
          reinterpret_cast<char*>(&_impl_.can_subscribe_),
          reinterpret_cast<char*>(&other->_impl_.can_subscribe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[4]);
}

// ===================================================================

ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse() {}
ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ParticipantInfo_AttributesEntry_DoNotUse::MergeFrom(const ParticipantInfo_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ParticipantInfo_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[5]);
}

// ===================================================================

class ParticipantInfo::_Internal {
 public:
  static const ::livekit::ParticipantPermission& permission(const ParticipantInfo* msg);
};

const ::livekit::ParticipantPermission&
ParticipantInfo::_Internal::permission(const ParticipantInfo* msg) {
  return *msg->_impl_.permission_;
}
ParticipantInfo::ParticipantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ParticipantInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantInfo)
}
ParticipantInfo::ParticipantInfo(const ParticipantInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tracks_){from._impl_.tracks_}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.joined_at_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.is_publisher_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.joined_at_ms_){}
    , decltype(_impl_.disconnect_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::livekit::ParticipantPermission(*from._impl_.permission_);
  }
  ::memcpy(&_impl_.joined_at_, &from._impl_.joined_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
    reinterpret_cast<char*>(&_impl_.joined_at_)) + sizeof(_impl_.disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantInfo)
}

inline void ParticipantInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tracks_){arena}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.joined_at_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.is_publisher_){false}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.joined_at_ms_){int64_t{0}}
    , decltype(_impl_.disconnect_reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantInfo::~ParticipantInfo() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ParticipantInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tracks_.~RepeatedPtrField();
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.sid_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.name_.Destroy();
  _impl_.region_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void ParticipantInfo::ArenaDtor(void* object) {
  ParticipantInfo* _this = reinterpret_cast< ParticipantInfo* >(object);
  _this->_impl_.attributes_.Destruct();
}
void ParticipantInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracks_.Clear();
  _impl_.attributes_.Clear();
  _impl_.sid_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  ::memset(&_impl_.joined_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
      reinterpret_cast<char*>(&_impl_.joined_at_)) + sizeof(_impl_.disconnect_reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantInfo.sid"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantInfo.identity"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::livekit::ParticipantInfo_State>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackInfo tracks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantInfo.metadata"));
        } else
          goto handle_unusual;
        continue;
      // int64 joined_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.joined_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantPermission permission = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantInfo.region"));
        } else
          goto handle_unusual;
        continue;
      // bool is_publisher = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_publisher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo.Kind kind = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::livekit::ParticipantInfo_Kind>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.DisconnectReason disconnect_reason = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_disconnect_reason(static_cast<::livekit::DisconnectReason>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 joined_at_ms = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.joined_at_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // .livekit.ParticipantInfo.State state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // repeated .livekit.TrackInfo tracks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  // int64 joined_at = 6;
  if (this->_internal_joined_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_joined_at(), target);
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // uint32 version = 10;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_version(), target);
  }

  // .livekit.ParticipantPermission permission = 11;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // string region = 12;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantInfo.region");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_region(), target);
  }

  // bool is_publisher = 13;
  if (this->_internal_is_publisher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_publisher(), target);
  }

  // .livekit.ParticipantInfo.Kind kind = 14;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_kind(), target);
  }

  // map<string, string> attributes = 15;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ParticipantInfo_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.ParticipantInfo.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.ParticipantInfo.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .livekit.DisconnectReason disconnect_reason = 16;
  if (this->_internal_disconnect_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_disconnect_reason(), target);
  }

  // int64 joined_at_ms = 17;
  if (this->_internal_joined_at_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_joined_at_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantInfo)
  return target;
}

size_t ParticipantInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackInfo tracks = 4;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->_impl_.tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> attributes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += ParticipantInfo_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string region = 12;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // .livekit.ParticipantPermission permission = 11;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  // int64 joined_at = 6;
  if (this->_internal_joined_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_joined_at());
  }

  // .livekit.ParticipantInfo.State state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 version = 10;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // bool is_publisher = 13;
  if (this->_internal_is_publisher() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.ParticipantInfo.Kind kind = 14;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // int64 joined_at_ms = 17;
  if (this->_internal_joined_at_ms() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_joined_at_ms());
  }

  // .livekit.DisconnectReason disconnect_reason = 16;
  if (this->_internal_disconnect_reason() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantInfo::GetClassData() const { return &_class_data_; }


void ParticipantInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantInfo*>(&to_msg);
  auto& from = static_cast<const ParticipantInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tracks_.MergeFrom(from._impl_.tracks_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::livekit::ParticipantPermission::MergeFrom(
        from._internal_permission());
  }
  if (from._internal_joined_at() != 0) {
    _this->_internal_set_joined_at(from._internal_joined_at());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_is_publisher() != 0) {
    _this->_internal_set_is_publisher(from._internal_is_publisher());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (from._internal_joined_at_ms() != 0) {
    _this->_internal_set_joined_at_ms(from._internal_joined_at_ms());
  }
  if (from._internal_disconnect_reason() != 0) {
    _this->_internal_set_disconnect_reason(from._internal_disconnect_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantInfo::CopyFrom(const ParticipantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantInfo::IsInitialized() const {
  return true;
}

void ParticipantInfo::InternalSwap(ParticipantInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tracks_.InternalSwap(&other->_impl_.tracks_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.disconnect_reason_)
      + sizeof(ParticipantInfo::_impl_.disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[6]);
}

// ===================================================================

class Encryption::_Internal {
 public:
};

Encryption::Encryption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.Encryption)
}
Encryption::Encryption(const Encryption& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Encryption* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.Encryption)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Encryption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Encryption::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Encryption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[7]);
}

// ===================================================================

class SimulcastCodecInfo::_Internal {
 public:
};

SimulcastCodecInfo::SimulcastCodecInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulcastCodecInfo)
}
SimulcastCodecInfo::SimulcastCodecInfo(const SimulcastCodecInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulcastCodecInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.cid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mid().empty()) {
    _this->_impl_.mid_.Set(from._internal_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    _this->_impl_.cid_.Set(from._internal_cid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SimulcastCodecInfo)
}

inline void SimulcastCodecInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){arena}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.cid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimulcastCodecInfo::~SimulcastCodecInfo() {
  // @@protoc_insertion_point(destructor:livekit.SimulcastCodecInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulcastCodecInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
  _impl_.mime_type_.Destroy();
  _impl_.mid_.Destroy();
  _impl_.cid_.Destroy();
}

void SimulcastCodecInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulcastCodecInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulcastCodecInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.mid_.ClearToEmpty();
  _impl_.cid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulcastCodecInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SimulcastCodecInfo.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SimulcastCodecInfo.mid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SimulcastCodecInfo.cid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulcastCodecInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulcastCodecInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodecInfo.mime_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // string mid = 2;
  if (!this->_internal_mid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodecInfo.mid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mid(), target);
  }

  // string cid = 3;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodecInfo.cid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cid(), target);
  }

  // repeated .livekit.VideoLayer layers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulcastCodecInfo)
  return target;
}

size_t SimulcastCodecInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SimulcastCodecInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 4;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mime_type = 1;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string mid = 2;
  if (!this->_internal_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  // string cid = 3;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulcastCodecInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulcastCodecInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulcastCodecInfo::GetClassData() const { return &_class_data_; }


void SimulcastCodecInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulcastCodecInfo*>(&to_msg);
  auto& from = static_cast<const SimulcastCodecInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulcastCodecInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layers_.MergeFrom(from._impl_.layers_);
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_mid().empty()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  if (!from._internal_cid().empty()) {
    _this->_internal_set_cid(from._internal_cid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulcastCodecInfo::CopyFrom(const SimulcastCodecInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulcastCodecInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulcastCodecInfo::IsInitialized() const {
  return true;
}

void SimulcastCodecInfo::InternalSwap(SimulcastCodecInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mid_, lhs_arena,
      &other->_impl_.mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cid_, lhs_arena,
      &other->_impl_.cid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulcastCodecInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[8]);
}

// ===================================================================

class TrackInfo::_Internal {
 public:
  static const ::livekit::TimedVersion& version(const TrackInfo* msg);
};

const ::livekit::TimedVersion&
TrackInfo::_Internal::version(const TrackInfo* msg) {
  return *msg->_impl_.version_;
}
TrackInfo::TrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackInfo)
}
TrackInfo::TrackInfo(const TrackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.codecs_){from._impl_.codecs_}
    , decltype(_impl_.audio_features_){from._impl_.audio_features_}
    , /*decltype(_impl_._audio_features_cached_byte_size_)*/{0}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.muted_){}
    , decltype(_impl_.simulcast_){}
    , decltype(_impl_.disable_dtx_){}
    , decltype(_impl_.stereo_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.disable_red_){}
    , decltype(_impl_.encryption_){}
    , decltype(_impl_.backup_codec_policy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mid().empty()) {
    _this->_impl_.mid_.Set(from._internal_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream().empty()) {
    _this->_impl_.stream_.Set(from._internal_stream(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::livekit::TimedVersion(*from._impl_.version_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.backup_codec_policy_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.backup_codec_policy_));
  // @@protoc_insertion_point(copy_constructor:livekit.TrackInfo)
}

inline void TrackInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){arena}
    , decltype(_impl_.codecs_){arena}
    , decltype(_impl_.audio_features_){arena}
    , /*decltype(_impl_._audio_features_cached_byte_size_)*/{0}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.muted_){false}
    , decltype(_impl_.simulcast_){false}
    , decltype(_impl_.disable_dtx_){false}
    , decltype(_impl_.stereo_){false}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.disable_red_){false}
    , decltype(_impl_.encryption_){0}
    , decltype(_impl_.backup_codec_policy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackInfo::~TrackInfo() {
  // @@protoc_insertion_point(destructor:livekit.TrackInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
  _impl_.codecs_.~RepeatedPtrField();
  _impl_.audio_features_.~RepeatedField();
  _impl_.sid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.mid_.Destroy();
  _impl_.stream_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
}

void TrackInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.codecs_.Clear();
  _impl_.audio_features_.Clear();
  _impl_.sid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.mid_.ClearToEmpty();
  _impl_.stream_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.backup_codec_policy_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.backup_codec_policy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackInfo.sid"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::TrackType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // bool muted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool simulcast = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.simulcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_dtx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.disable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackSource source = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::livekit::TrackSource>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackInfo.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string mid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackInfo.mid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SimulcastCodecInfo codecs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool stereo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.stereo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_red = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.disable_red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.Encryption.Type encryption = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::livekit::Encryption_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string stream = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackInfo.stream"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.TimedVersion version = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.AudioTrackFeature audio_features = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_audio_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_audio_features(static_cast<::livekit::AudioTrackFeature>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.BackupCodecPolicy backup_codec_policy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_backup_codec_policy(static_cast<::livekit::BackupCodecPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // .livekit.TrackType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bool muted = 4;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_muted(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // bool simulcast = 7;
  if (this->_internal_simulcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_simulcast(), target);
  }

  // bool disable_dtx = 8;
  if (this->_internal_disable_dtx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_dtx(), target);
  }

  // .livekit.TrackSource source = 9;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_source(), target);
  }

  // repeated .livekit.VideoLayer layers = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string mime_type = 11;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.mime_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mime_type(), target);
  }

  // string mid = 12;
  if (!this->_internal_mid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.mid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_mid(), target);
  }

  // repeated .livekit.SimulcastCodecInfo codecs = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_codecs_size()); i < n; i++) {
    const auto& repfield = this->_internal_codecs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool stereo = 14;
  if (this->_internal_stereo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_stereo(), target);
  }

  // bool disable_red = 15;
  if (this->_internal_disable_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_disable_red(), target);
  }

  // .livekit.Encryption.Type encryption = 16;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_encryption(), target);
  }

  // string stream = 17;
  if (!this->_internal_stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackInfo.stream");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_stream(), target);
  }

  // .livekit.TimedVersion version = 18;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.AudioTrackFeature audio_features = 19;
  {
    int byte_size = _impl_._audio_features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          19, _impl_.audio_features_, byte_size, target);
    }
  }

  // .livekit.BackupCodecPolicy backup_codec_policy = 20;
  if (this->_internal_backup_codec_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_backup_codec_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackInfo)
  return target;
}

size_t TrackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 10;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SimulcastCodecInfo codecs = 13;
  total_size += 1UL * this->_internal_codecs_size();
  for (const auto& msg : this->_impl_.codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.AudioTrackFeature audio_features = 19;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_audio_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_audio_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._audio_features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mime_type = 11;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string mid = 12;
  if (!this->_internal_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  // string stream = 17;
  if (!this->_internal_stream().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // .livekit.TimedVersion version = 18;
  if (this->_internal_has_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // .livekit.TrackType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // bool muted = 4;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  // bool simulcast = 7;
  if (this->_internal_simulcast() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_dtx = 8;
  if (this->_internal_disable_dtx() != 0) {
    total_size += 1 + 1;
  }

  // bool stereo = 14;
  if (this->_internal_stereo() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.TrackSource source = 9;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // bool disable_red = 15;
  if (this->_internal_disable_red() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.Encryption.Type encryption = 16;
  if (this->_internal_encryption() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  // .livekit.BackupCodecPolicy backup_codec_policy = 20;
  if (this->_internal_backup_codec_policy() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_backup_codec_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackInfo::GetClassData() const { return &_class_data_; }


void TrackInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackInfo*>(&to_msg);
  auto& from = static_cast<const TrackInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layers_.MergeFrom(from._impl_.layers_);
  _this->_impl_.codecs_.MergeFrom(from._impl_.codecs_);
  _this->_impl_.audio_features_.MergeFrom(from._impl_.audio_features_);
  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_mid().empty()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  if (!from._internal_stream().empty()) {
    _this->_internal_set_stream(from._internal_stream());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::livekit::TimedVersion::MergeFrom(
        from._internal_version());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_muted() != 0) {
    _this->_internal_set_muted(from._internal_muted());
  }
  if (from._internal_simulcast() != 0) {
    _this->_internal_set_simulcast(from._internal_simulcast());
  }
  if (from._internal_disable_dtx() != 0) {
    _this->_internal_set_disable_dtx(from._internal_disable_dtx());
  }
  if (from._internal_stereo() != 0) {
    _this->_internal_set_stereo(from._internal_stereo());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_disable_red() != 0) {
    _this->_internal_set_disable_red(from._internal_disable_red());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  if (from._internal_backup_codec_policy() != 0) {
    _this->_internal_set_backup_codec_policy(from._internal_backup_codec_policy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackInfo::CopyFrom(const TrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackInfo::IsInitialized() const {
  return true;
}

void TrackInfo::InternalSwap(TrackInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.codecs_.InternalSwap(&other->_impl_.codecs_);
  _impl_.audio_features_.InternalSwap(&other->_impl_.audio_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mid_, lhs_arena,
      &other->_impl_.mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_, lhs_arena,
      &other->_impl_.stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.backup_codec_policy_)
      + sizeof(TrackInfo::_impl_.backup_codec_policy_)
      - PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[9]);
}

// ===================================================================

class VideoLayer::_Internal {
 public:
};

VideoLayer::VideoLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.VideoLayer)
}
VideoLayer::VideoLayer(const VideoLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.bitrate_){}
    , decltype(_impl_.ssrc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ssrc_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.ssrc_));
  // @@protoc_insertion_point(copy_constructor:livekit.VideoLayer)
}

inline void VideoLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.bitrate_){0u}
    , decltype(_impl_.ssrc_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoLayer::~VideoLayer() {
  // @@protoc_insertion_point(destructor:livekit.VideoLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VideoLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ssrc_) -
      reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.ssrc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.VideoQuality quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::VideoQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bitrate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ssrc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VideoLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_quality(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // uint32 bitrate = 4;
  if (this->_internal_bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bitrate(), target);
  }

  // uint32 ssrc = 5;
  if (this->_internal_ssrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ssrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VideoLayer)
  return target;
}

size_t VideoLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.VideoLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 bitrate = 4;
  if (this->_internal_bitrate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bitrate());
  }

  // uint32 ssrc = 5;
  if (this->_internal_ssrc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ssrc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoLayer::GetClassData() const { return &_class_data_; }


void VideoLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoLayer*>(&to_msg);
  auto& from = static_cast<const VideoLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.VideoLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_bitrate() != 0) {
    _this->_internal_set_bitrate(from._internal_bitrate());
  }
  if (from._internal_ssrc() != 0) {
    _this->_internal_set_ssrc(from._internal_ssrc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoLayer::CopyFrom(const VideoLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VideoLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoLayer::IsInitialized() const {
  return true;
}

void VideoLayer::InternalSwap(VideoLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.ssrc_)
      + sizeof(VideoLayer::_impl_.ssrc_)
      - PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[10]);
}

// ===================================================================

class DataPacket::_Internal {
 public:
  static const ::livekit::UserPacket& user(const DataPacket* msg);
  static const ::livekit::ActiveSpeakerUpdate& speaker(const DataPacket* msg);
  static const ::livekit::SipDTMF& sip_dtmf(const DataPacket* msg);
  static const ::livekit::Transcription& transcription(const DataPacket* msg);
  static const ::livekit::MetricsBatch& metrics(const DataPacket* msg);
  static const ::livekit::ChatMessage& chat_message(const DataPacket* msg);
  static const ::livekit::RpcRequest& rpc_request(const DataPacket* msg);
  static const ::livekit::RpcAck& rpc_ack(const DataPacket* msg);
  static const ::livekit::RpcResponse& rpc_response(const DataPacket* msg);
  static const ::livekit::DataStream_Header& stream_header(const DataPacket* msg);
  static const ::livekit::DataStream_Chunk& stream_chunk(const DataPacket* msg);
  static const ::livekit::DataStream_Trailer& stream_trailer(const DataPacket* msg);
};

const ::livekit::UserPacket&
DataPacket::_Internal::user(const DataPacket* msg) {
  return *msg->_impl_.value_.user_;
}
const ::livekit::ActiveSpeakerUpdate&
DataPacket::_Internal::speaker(const DataPacket* msg) {
  return *msg->_impl_.value_.speaker_;
}
const ::livekit::SipDTMF&
DataPacket::_Internal::sip_dtmf(const DataPacket* msg) {
  return *msg->_impl_.value_.sip_dtmf_;
}
const ::livekit::Transcription&
DataPacket::_Internal::transcription(const DataPacket* msg) {
  return *msg->_impl_.value_.transcription_;
}
const ::livekit::MetricsBatch&
DataPacket::_Internal::metrics(const DataPacket* msg) {
  return *msg->_impl_.value_.metrics_;
}
const ::livekit::ChatMessage&
DataPacket::_Internal::chat_message(const DataPacket* msg) {
  return *msg->_impl_.value_.chat_message_;
}
const ::livekit::RpcRequest&
DataPacket::_Internal::rpc_request(const DataPacket* msg) {
  return *msg->_impl_.value_.rpc_request_;
}
const ::livekit::RpcAck&
DataPacket::_Internal::rpc_ack(const DataPacket* msg) {
  return *msg->_impl_.value_.rpc_ack_;
}
const ::livekit::RpcResponse&
DataPacket::_Internal::rpc_response(const DataPacket* msg) {
  return *msg->_impl_.value_.rpc_response_;
}
const ::livekit::DataStream_Header&
DataPacket::_Internal::stream_header(const DataPacket* msg) {
  return *msg->_impl_.value_.stream_header_;
}
const ::livekit::DataStream_Chunk&
DataPacket::_Internal::stream_chunk(const DataPacket* msg) {
  return *msg->_impl_.value_.stream_chunk_;
}
const ::livekit::DataStream_Trailer&
DataPacket::_Internal::stream_trailer(const DataPacket* msg) {
  return *msg->_impl_.value_.stream_trailer_;
}
void DataPacket::set_allocated_user(::livekit::UserPacket* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    _impl_.value_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.user)
}
void DataPacket::set_allocated_speaker(::livekit::ActiveSpeakerUpdate* speaker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (speaker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speaker);
    if (message_arena != submessage_arena) {
      speaker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speaker, submessage_arena);
    }
    set_has_speaker();
    _impl_.value_.speaker_ = speaker;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.speaker)
}
void DataPacket::set_allocated_sip_dtmf(::livekit::SipDTMF* sip_dtmf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sip_dtmf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sip_dtmf);
    if (message_arena != submessage_arena) {
      sip_dtmf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sip_dtmf, submessage_arena);
    }
    set_has_sip_dtmf();
    _impl_.value_.sip_dtmf_ = sip_dtmf;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.sip_dtmf)
}
void DataPacket::set_allocated_transcription(::livekit::Transcription* transcription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (transcription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transcription);
    if (message_arena != submessage_arena) {
      transcription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcription, submessage_arena);
    }
    set_has_transcription();
    _impl_.value_.transcription_ = transcription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.transcription)
}
void DataPacket::set_allocated_metrics(::livekit::MetricsBatch* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics));
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    set_has_metrics();
    _impl_.value_.metrics_ = metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.metrics)
}
void DataPacket::clear_metrics() {
  if (_internal_has_metrics()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.metrics_;
    }
    clear_has_value();
  }
}
void DataPacket::set_allocated_chat_message(::livekit::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    _impl_.value_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.chat_message)
}
void DataPacket::set_allocated_rpc_request(::livekit::RpcRequest* rpc_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (rpc_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rpc_request);
    if (message_arena != submessage_arena) {
      rpc_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_request, submessage_arena);
    }
    set_has_rpc_request();
    _impl_.value_.rpc_request_ = rpc_request;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.rpc_request)
}
void DataPacket::set_allocated_rpc_ack(::livekit::RpcAck* rpc_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (rpc_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rpc_ack);
    if (message_arena != submessage_arena) {
      rpc_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_ack, submessage_arena);
    }
    set_has_rpc_ack();
    _impl_.value_.rpc_ack_ = rpc_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.rpc_ack)
}
void DataPacket::set_allocated_rpc_response(::livekit::RpcResponse* rpc_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (rpc_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rpc_response);
    if (message_arena != submessage_arena) {
      rpc_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_response, submessage_arena);
    }
    set_has_rpc_response();
    _impl_.value_.rpc_response_ = rpc_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.rpc_response)
}
void DataPacket::set_allocated_stream_header(::livekit::DataStream_Header* stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_header);
    if (message_arena != submessage_arena) {
      stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_header, submessage_arena);
    }
    set_has_stream_header();
    _impl_.value_.stream_header_ = stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.stream_header)
}
void DataPacket::set_allocated_stream_chunk(::livekit::DataStream_Chunk* stream_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (stream_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_chunk);
    if (message_arena != submessage_arena) {
      stream_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_chunk, submessage_arena);
    }
    set_has_stream_chunk();
    _impl_.value_.stream_chunk_ = stream_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.stream_chunk)
}
void DataPacket::set_allocated_stream_trailer(::livekit::DataStream_Trailer* stream_trailer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (stream_trailer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_trailer);
    if (message_arena != submessage_arena) {
      stream_trailer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_trailer, submessage_arena);
    }
    set_has_stream_trailer();
    _impl_.value_.stream_trailer_ = stream_trailer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.stream_trailer)
}
DataPacket::DataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DataPacket)
}
DataPacket::DataPacket(const DataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  clear_has_value();
  switch (from.value_case()) {
    case kUser: {
      _this->_internal_mutable_user()->::livekit::UserPacket::MergeFrom(
          from._internal_user());
      break;
    }
    case kSpeaker: {
      _this->_internal_mutable_speaker()->::livekit::ActiveSpeakerUpdate::MergeFrom(
          from._internal_speaker());
      break;
    }
    case kSipDtmf: {
      _this->_internal_mutable_sip_dtmf()->::livekit::SipDTMF::MergeFrom(
          from._internal_sip_dtmf());
      break;
    }
    case kTranscription: {
      _this->_internal_mutable_transcription()->::livekit::Transcription::MergeFrom(
          from._internal_transcription());
      break;
    }
    case kMetrics: {
      _this->_internal_mutable_metrics()->::livekit::MetricsBatch::MergeFrom(
          from._internal_metrics());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::ChatMessage::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kRpcRequest: {
      _this->_internal_mutable_rpc_request()->::livekit::RpcRequest::MergeFrom(
          from._internal_rpc_request());
      break;
    }
    case kRpcAck: {
      _this->_internal_mutable_rpc_ack()->::livekit::RpcAck::MergeFrom(
          from._internal_rpc_ack());
      break;
    }
    case kRpcResponse: {
      _this->_internal_mutable_rpc_response()->::livekit::RpcResponse::MergeFrom(
          from._internal_rpc_response());
      break;
    }
    case kStreamHeader: {
      _this->_internal_mutable_stream_header()->::livekit::DataStream_Header::MergeFrom(
          from._internal_stream_header());
      break;
    }
    case kStreamChunk: {
      _this->_internal_mutable_stream_chunk()->::livekit::DataStream_Chunk::MergeFrom(
          from._internal_stream_chunk());
      break;
    }
    case kStreamTrailer: {
      _this->_internal_mutable_stream_trailer()->::livekit::DataStream_Trailer::MergeFrom(
          from._internal_stream_trailer());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DataPacket)
}

inline void DataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:livekit.DataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.participant_identity_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void DataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataPacket::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DataPacket)
  switch (value_case()) {
    case kUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.user_;
      }
      break;
    }
    case kSpeaker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.speaker_;
      }
      break;
    }
    case kSipDtmf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sip_dtmf_;
      }
      break;
    }
    case kTranscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.transcription_;
      }
      break;
    }
    case kMetrics: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.metrics_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.chat_message_;
      }
      break;
    }
    case kRpcRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.rpc_request_;
      }
      break;
    }
    case kRpcAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.rpc_ack_;
      }
      break;
    }
    case kRpcResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.rpc_response_;
      }
      break;
    }
    case kStreamHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.stream_header_;
      }
      break;
    }
    case kStreamChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.stream_chunk_;
      }
      break;
    }
    case kStreamTrailer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.stream_trailer_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void DataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.kind_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::livekit::DataPacket_Kind>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.UserPacket user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speaker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataPacket.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.DataPacket.destination_identities"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SipDTMF sip_dtmf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sip_dtmf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.Transcription transcription = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transcription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.MetricsBatch metrics = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ChatMessage chat_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RpcRequest rpc_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RpcAck rpc_ack = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RpcResponse rpc_response = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DataStream.Header stream_header = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DataStream.Chunk stream_chunk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DataStream.Trailer stream_trailer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_trailer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // .livekit.UserPacket user = 2;
  if (_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
  if (_internal_has_speaker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::speaker(this),
        _Internal::speaker(this).GetCachedSize(), target, stream);
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataPacket.participant_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant_identity(), target);
  }

  // repeated string destination_identities = 5;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataPacket.destination_identities");
    target = stream->WriteString(5, s, target);
  }

  // .livekit.SipDTMF sip_dtmf = 6;
  if (_internal_has_sip_dtmf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sip_dtmf(this),
        _Internal::sip_dtmf(this).GetCachedSize(), target, stream);
  }

  // .livekit.Transcription transcription = 7;
  if (_internal_has_transcription()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::transcription(this),
        _Internal::transcription(this).GetCachedSize(), target, stream);
  }

  // .livekit.MetricsBatch metrics = 8;
  if (_internal_has_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::metrics(this),
        _Internal::metrics(this).GetCachedSize(), target, stream);
  }

  // .livekit.ChatMessage chat_message = 9;
  if (_internal_has_chat_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  // .livekit.RpcRequest rpc_request = 10;
  if (_internal_has_rpc_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::rpc_request(this),
        _Internal::rpc_request(this).GetCachedSize(), target, stream);
  }

  // .livekit.RpcAck rpc_ack = 11;
  if (_internal_has_rpc_ack()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::rpc_ack(this),
        _Internal::rpc_ack(this).GetCachedSize(), target, stream);
  }

  // .livekit.RpcResponse rpc_response = 12;
  if (_internal_has_rpc_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::rpc_response(this),
        _Internal::rpc_response(this).GetCachedSize(), target, stream);
  }

  // .livekit.DataStream.Header stream_header = 13;
  if (_internal_has_stream_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::stream_header(this),
        _Internal::stream_header(this).GetCachedSize(), target, stream);
  }

  // .livekit.DataStream.Chunk stream_chunk = 14;
  if (_internal_has_stream_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::stream_chunk(this),
        _Internal::stream_chunk(this).GetCachedSize(), target, stream);
  }

  // .livekit.DataStream.Trailer stream_trailer = 15;
  if (_internal_has_stream_trailer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::stream_trailer(this),
        _Internal::stream_trailer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataPacket)
  return target;
}

size_t DataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (value_case()) {
    // .livekit.UserPacket user = 2;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.user_);
      break;
    }
    // .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
    case kSpeaker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.speaker_);
      break;
    }
    // .livekit.SipDTMF sip_dtmf = 6;
    case kSipDtmf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sip_dtmf_);
      break;
    }
    // .livekit.Transcription transcription = 7;
    case kTranscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.transcription_);
      break;
    }
    // .livekit.MetricsBatch metrics = 8;
    case kMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.metrics_);
      break;
    }
    // .livekit.ChatMessage chat_message = 9;
    case kChatMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.chat_message_);
      break;
    }
    // .livekit.RpcRequest rpc_request = 10;
    case kRpcRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.rpc_request_);
      break;
    }
    // .livekit.RpcAck rpc_ack = 11;
    case kRpcAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.rpc_ack_);
      break;
    }
    // .livekit.RpcResponse rpc_response = 12;
    case kRpcResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.rpc_response_);
      break;
    }
    // .livekit.DataStream.Header stream_header = 13;
    case kStreamHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.stream_header_);
      break;
    }
    // .livekit.DataStream.Chunk stream_chunk = 14;
    case kStreamChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.stream_chunk_);
      break;
    }
    // .livekit.DataStream.Trailer stream_trailer = 15;
    case kStreamTrailer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.stream_trailer_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPacket::GetClassData() const { return &_class_data_; }


void DataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataPacket*>(&to_msg);
  auto& from = static_cast<const DataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  switch (from.value_case()) {
    case kUser: {
      _this->_internal_mutable_user()->::livekit::UserPacket::MergeFrom(
          from._internal_user());
      break;
    }
    case kSpeaker: {
      _this->_internal_mutable_speaker()->::livekit::ActiveSpeakerUpdate::MergeFrom(
          from._internal_speaker());
      break;
    }
    case kSipDtmf: {
      _this->_internal_mutable_sip_dtmf()->::livekit::SipDTMF::MergeFrom(
          from._internal_sip_dtmf());
      break;
    }
    case kTranscription: {
      _this->_internal_mutable_transcription()->::livekit::Transcription::MergeFrom(
          from._internal_transcription());
      break;
    }
    case kMetrics: {
      _this->_internal_mutable_metrics()->::livekit::MetricsBatch::MergeFrom(
          from._internal_metrics());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::ChatMessage::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kRpcRequest: {
      _this->_internal_mutable_rpc_request()->::livekit::RpcRequest::MergeFrom(
          from._internal_rpc_request());
      break;
    }
    case kRpcAck: {
      _this->_internal_mutable_rpc_ack()->::livekit::RpcAck::MergeFrom(
          from._internal_rpc_ack());
      break;
    }
    case kRpcResponse: {
      _this->_internal_mutable_rpc_response()->::livekit::RpcResponse::MergeFrom(
          from._internal_rpc_response());
      break;
    }
    case kStreamHeader: {
      _this->_internal_mutable_stream_header()->::livekit::DataStream_Header::MergeFrom(
          from._internal_stream_header());
      break;
    }
    case kStreamChunk: {
      _this->_internal_mutable_stream_chunk()->::livekit::DataStream_Chunk::MergeFrom(
          from._internal_stream_chunk());
      break;
    }
    case kStreamTrailer: {
      _this->_internal_mutable_stream_trailer()->::livekit::DataStream_Trailer::MergeFrom(
          from._internal_stream_trailer());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacket::CopyFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPacket::IsInitialized() const {
  return true;
}

void DataPacket::InternalSwap(DataPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[11]);
}

// ===================================================================

class ActiveSpeakerUpdate::_Internal {
 public:
};

ActiveSpeakerUpdate::ActiveSpeakerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ActiveSpeakerUpdate)
}
ActiveSpeakerUpdate::ActiveSpeakerUpdate(const ActiveSpeakerUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActiveSpeakerUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speakers_){from._impl_.speakers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ActiveSpeakerUpdate)
}

inline void ActiveSpeakerUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speakers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActiveSpeakerUpdate::~ActiveSpeakerUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ActiveSpeakerUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActiveSpeakerUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speakers_.~RepeatedPtrField();
}

void ActiveSpeakerUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActiveSpeakerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ActiveSpeakerUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speakers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveSpeakerUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SpeakerInfo speakers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speakers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActiveSpeakerUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ActiveSpeakerUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speakers_size()); i < n; i++) {
    const auto& repfield = this->_internal_speakers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ActiveSpeakerUpdate)
  return target;
}

size_t ActiveSpeakerUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ActiveSpeakerUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  total_size += 1UL * this->_internal_speakers_size();
  for (const auto& msg : this->_impl_.speakers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActiveSpeakerUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActiveSpeakerUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActiveSpeakerUpdate::GetClassData() const { return &_class_data_; }


void ActiveSpeakerUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActiveSpeakerUpdate*>(&to_msg);
  auto& from = static_cast<const ActiveSpeakerUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ActiveSpeakerUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.speakers_.MergeFrom(from._impl_.speakers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActiveSpeakerUpdate::CopyFrom(const ActiveSpeakerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ActiveSpeakerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveSpeakerUpdate::IsInitialized() const {
  return true;
}

void ActiveSpeakerUpdate::InternalSwap(ActiveSpeakerUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speakers_.InternalSwap(&other->_impl_.speakers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveSpeakerUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[12]);
}

// ===================================================================

class SpeakerInfo::_Internal {
 public:
};

SpeakerInfo::SpeakerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SpeakerInfo)
}
SpeakerInfo::SpeakerInfo(const SpeakerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpeakerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:livekit.SpeakerInfo)
}

inline void SpeakerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sid_){}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.active_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpeakerInfo::~SpeakerInfo() {
  // @@protoc_insertion_point(destructor:livekit.SpeakerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeakerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sid_.Destroy();
}

void SpeakerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeakerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SpeakerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sid_.ClearToEmpty();
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.active_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeakerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SpeakerInfo.sid"));
        } else
          goto handle_unusual;
        continue;
      // float level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeakerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SpeakerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SpeakerInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // float level = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = this->_internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_level(), target);
  }

  // bool active = 3;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SpeakerInfo)
  return target;
}

size_t SpeakerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SpeakerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // float level = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = this->_internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    total_size += 1 + 4;
  }

  // bool active = 3;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeakerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpeakerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeakerInfo::GetClassData() const { return &_class_data_; }


void SpeakerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpeakerInfo*>(&to_msg);
  auto& from = static_cast<const SpeakerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SpeakerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_level = from._internal_level();
  uint32_t raw_level;
  memcpy(&raw_level, &tmp_level, sizeof(tmp_level));
  if (raw_level != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakerInfo::CopyFrom(const SpeakerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SpeakerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerInfo::IsInitialized() const {
  return true;
}

void SpeakerInfo::InternalSwap(SpeakerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.active_)
      + sizeof(SpeakerInfo::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeakerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[13]);
}

// ===================================================================

class UserPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<UserPacket>()._impl_._has_bits_);
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UserPacket::UserPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UserPacket)
}
UserPacket::UserPacket(const UserPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_sids_){from._impl_.destination_sids_}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.participant_sid_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    _this->_impl_.participant_sid_.Set(from._internal_participant_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:livekit.UserPacket)
}

inline void UserPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_sids_){arena}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.participant_sid_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.start_time_){uint64_t{0u}}
    , decltype(_impl_.end_time_){uint64_t{0u}}
  };
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserPacket::~UserPacket() {
  // @@protoc_insertion_point(destructor:livekit.UserPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_sids_.~RepeatedPtrField();
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.participant_sid_.Destroy();
  _impl_.payload_.Destroy();
  _impl_.topic_.Destroy();
  _impl_.participant_identity_.Destroy();
  _impl_.id_.Destroy();
  _impl_.nonce_.Destroy();
}

void UserPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UserPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_sids_.Clear();
  _impl_.destination_identities_.Clear();
  _impl_.participant_sid_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  _impl_.participant_identity_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.nonce_.ClearToEmpty();
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UserPacket.participant_sid"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_sids = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UserPacket.destination_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UserPacket.topic"));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UserPacket.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UserPacket.destination_identities"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UserPacket.id"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 end_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UserPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1 [deprecated = true];
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // repeated string destination_sids = 3 [deprecated = true];
  for (int i = 0, n = this->_internal_destination_sids_size(); i < n; i++) {
    const auto& s = this->_internal_destination_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.destination_sids");
    target = stream->WriteString(3, s, target);
  }

  // optional string topic = 4;
  if (_internal_has_topic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.topic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_topic(), target);
  }

  // string participant_identity = 5 [deprecated = true];
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.participant_identity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_participant_identity(), target);
  }

  // repeated string destination_identities = 6 [deprecated = true];
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.destination_identities");
    target = stream->WriteString(6, s, target);
  }

  // optional string id = 8;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UserPacket.id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_id(), target);
  }

  // optional uint64 start_time = 9;
  if (_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_start_time(), target);
  }

  // optional uint64 end_time = 10;
  if (_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_end_time(), target);
  }

  // bytes nonce = 11;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UserPacket)
  return target;
}

size_t UserPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UserPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_sids = 3 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_sids_.size());
  for (int i = 0, n = _impl_.destination_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_sids_.Get(i));
  }

  // repeated string destination_identities = 6 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  // string participant_sid = 1 [deprecated = true];
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // optional string topic = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string participant_identity = 5 [deprecated = true];
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // optional string id = 8;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes nonce = 11;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint64 start_time = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time());
    }

    // optional uint64 end_time = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPacket::GetClassData() const { return &_class_data_; }


void UserPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserPacket*>(&to_msg);
  auto& from = static_cast<const UserPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UserPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_sids_.MergeFrom(from._impl_.destination_sids_);
  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  if (!from._internal_participant_sid().empty()) {
    _this->_internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_topic()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPacket::CopyFrom(const UserPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UserPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPacket::IsInitialized() const {
  return true;
}

void UserPacket::InternalSwap(UserPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_sids_.InternalSwap(&other->_impl_.destination_sids_);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_sid_, lhs_arena,
      &other->_impl_.participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.end_time_)
      + sizeof(UserPacket::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[14]);
}

// ===================================================================

class SipDTMF::_Internal {
 public:
};

SipDTMF::SipDTMF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SipDTMF)
}
SipDTMF::SipDTMF(const SipDTMF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SipDTMF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.digit_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_digit().empty()) {
    _this->_impl_.digit_.Set(from._internal_digit(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:livekit.SipDTMF)
}

inline void SipDTMF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.digit_){}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.digit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SipDTMF::~SipDTMF() {
  // @@protoc_insertion_point(destructor:livekit.SipDTMF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SipDTMF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digit_.Destroy();
}

void SipDTMF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SipDTMF::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SipDTMF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.digit_.ClearToEmpty();
  _impl_.code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SipDTMF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string digit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_digit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SipDTMF.digit"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SipDTMF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SipDTMF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_code(), target);
  }

  // string digit = 4;
  if (!this->_internal_digit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_digit().data(), static_cast<int>(this->_internal_digit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SipDTMF.digit");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_digit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SipDTMF)
  return target;
}

size_t SipDTMF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SipDTMF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string digit = 4;
  if (!this->_internal_digit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_digit());
  }

  // uint32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SipDTMF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SipDTMF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SipDTMF::GetClassData() const { return &_class_data_; }


void SipDTMF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SipDTMF*>(&to_msg);
  auto& from = static_cast<const SipDTMF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SipDTMF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_digit().empty()) {
    _this->_internal_set_digit(from._internal_digit());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SipDTMF::CopyFrom(const SipDTMF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SipDTMF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SipDTMF::IsInitialized() const {
  return true;
}

void SipDTMF::InternalSwap(SipDTMF* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digit_, lhs_arena,
      &other->_impl_.digit_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SipDTMF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[15]);
}

// ===================================================================

class Transcription::_Internal {
 public:
};

Transcription::Transcription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Transcription)
}
Transcription::Transcription(const Transcription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transcription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.transcribed_participant_identity_){}
    , decltype(_impl_.track_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transcribed_participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transcribed_participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transcribed_participant_identity().empty()) {
    _this->_impl_.transcribed_participant_identity_.Set(from._internal_transcribed_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_id().empty()) {
    _this->_impl_.track_id_.Set(from._internal_track_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.Transcription)
}

inline void Transcription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , decltype(_impl_.transcribed_participant_identity_){}
    , decltype(_impl_.track_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transcribed_participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transcribed_participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transcription::~Transcription() {
  // @@protoc_insertion_point(destructor:livekit.Transcription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transcription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
  _impl_.transcribed_participant_identity_.Destroy();
  _impl_.track_id_.Destroy();
}

void Transcription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transcription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Transcription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  _impl_.transcribed_participant_identity_.ClearToEmpty();
  _impl_.track_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transcription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transcribed_participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transcribed_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Transcription.transcribed_participant_identity"));
        } else
          goto handle_unusual;
        continue;
      // string track_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_track_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.Transcription.track_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TranscriptionSegment segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transcription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Transcription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcribed_participant_identity = 2;
  if (!this->_internal_transcribed_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcribed_participant_identity().data(), static_cast<int>(this->_internal_transcribed_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Transcription.transcribed_participant_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transcribed_participant_identity(), target);
  }

  // string track_id = 3;
  if (!this->_internal_track_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.Transcription.track_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_track_id(), target);
  }

  // repeated .livekit.TranscriptionSegment segments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Transcription)
  return target;
}

size_t Transcription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Transcription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TranscriptionSegment segments = 4;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transcribed_participant_identity = 2;
  if (!this->_internal_transcribed_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcribed_participant_identity());
  }

  // string track_id = 3;
  if (!this->_internal_track_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transcription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transcription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transcription::GetClassData() const { return &_class_data_; }


void Transcription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transcription*>(&to_msg);
  auto& from = static_cast<const Transcription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Transcription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  if (!from._internal_transcribed_participant_identity().empty()) {
    _this->_internal_set_transcribed_participant_identity(from._internal_transcribed_participant_identity());
  }
  if (!from._internal_track_id().empty()) {
    _this->_internal_set_track_id(from._internal_track_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transcription::CopyFrom(const Transcription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Transcription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transcription::IsInitialized() const {
  return true;
}

void Transcription::InternalSwap(Transcription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transcribed_participant_identity_, lhs_arena,
      &other->_impl_.transcribed_participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_id_, lhs_arena,
      &other->_impl_.track_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transcription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[16]);
}

// ===================================================================

class TranscriptionSegment::_Internal {
 public:
};

TranscriptionSegment::TranscriptionSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TranscriptionSegment)
}
TranscriptionSegment::TranscriptionSegment(const TranscriptionSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TranscriptionSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.final_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.final_));
  // @@protoc_insertion_point(copy_constructor:livekit.TranscriptionSegment)
}

inline void TranscriptionSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.start_time_){uint64_t{0u}}
    , decltype(_impl_.end_time_){uint64_t{0u}}
    , decltype(_impl_.final_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TranscriptionSegment::~TranscriptionSegment() {
  // @@protoc_insertion_point(destructor:livekit.TranscriptionSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranscriptionSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
}

void TranscriptionSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranscriptionSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TranscriptionSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.final_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscriptionSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TranscriptionSegment.id"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TranscriptionSegment.text"));
        } else
          goto handle_unusual;
        continue;
      // uint64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool final = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TranscriptionSegment.language"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranscriptionSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TranscriptionSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TranscriptionSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TranscriptionSegment.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // uint64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_time(), target);
  }

  // uint64 end_time = 4;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end_time(), target);
  }

  // bool final = 5;
  if (this->_internal_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_final(), target);
  }

  // string language = 6;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TranscriptionSegment.language");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TranscriptionSegment)
  return target;
}

size_t TranscriptionSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TranscriptionSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string language = 6;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // uint64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time());
  }

  // uint64 end_time = 4;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time());
  }

  // bool final = 5;
  if (this->_internal_final() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscriptionSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TranscriptionSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscriptionSegment::GetClassData() const { return &_class_data_; }


void TranscriptionSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TranscriptionSegment*>(&to_msg);
  auto& from = static_cast<const TranscriptionSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TranscriptionSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_final() != 0) {
    _this->_internal_set_final(from._internal_final());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscriptionSegment::CopyFrom(const TranscriptionSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TranscriptionSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptionSegment::IsInitialized() const {
  return true;
}

void TranscriptionSegment::InternalSwap(TranscriptionSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.final_)
      + sizeof(TranscriptionSegment::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptionSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[17]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessage>()._impl_._has_bits_);
  static void set_has_edit_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.edit_timestamp_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.generated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.generated_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.generated_));
  // @@protoc_insertion_point(copy_constructor:livekit.ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.edit_timestamp_){int64_t{0}}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.generated_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:livekit.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.message_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _impl_.edit_timestamp_ = int64_t{0};
  ::memset(&_impl_.deleted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.generated_) -
      reinterpret_cast<char*>(&_impl_.deleted_)) + sizeof(_impl_.generated_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ChatMessage.id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 edit_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_edit_timestamp(&has_bits);
          _impl_.edit_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ChatMessage.message"));
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool generated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ChatMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // optional int64 edit_timestamp = 3;
  if (_internal_has_edit_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_edit_timestamp(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ChatMessage.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // bool deleted = 5;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_deleted(), target);
  }

  // bool generated = 6;
  if (this->_internal_generated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_generated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // optional int64 edit_timestamp = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_edit_timestamp());
  }

  // bool deleted = 5;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  // bool generated = 6;
  if (this->_internal_generated() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_has_edit_timestamp()) {
    _this->_internal_set_edit_timestamp(from._internal_edit_timestamp());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  if (from._internal_generated() != 0) {
    _this->_internal_set_generated(from._internal_generated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.generated_)
      + sizeof(ChatMessage::_impl_.generated_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[18]);
}

// ===================================================================

class RpcRequest::_Internal {
 public:
};

RpcRequest::RpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcRequest)
}
RpcRequest::RpcRequest(const RpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.response_timeout_ms_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.response_timeout_ms_, &from._impl_.response_timeout_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.response_timeout_ms_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:livekit.RpcRequest)
}

inline void RpcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.response_timeout_ms_){0u}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:livekit.RpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.method_.Destroy();
  _impl_.payload_.Destroy();
}

void RpcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  ::memset(&_impl_.response_timeout_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.response_timeout_ms_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcRequest.payload"));
        } else
          goto handle_unusual;
        continue;
      // uint32 response_timeout_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.response_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcRequest.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // string payload = 3;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcRequest.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // uint32 response_timeout_ms = 4;
  if (this->_internal_response_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_response_timeout_ms(), target);
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcRequest)
  return target;
}

size_t RpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  // uint32 response_timeout_ms = 4;
  if (this->_internal_response_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_timeout_ms());
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequest::GetClassData() const { return &_class_data_; }


void RpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcRequest*>(&to_msg);
  auto& from = static_cast<const RpcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_response_timeout_ms() != 0) {
    _this->_internal_set_response_timeout_ms(from._internal_response_timeout_ms());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequest::IsInitialized() const {
  return true;
}

void RpcRequest::InternalSwap(RpcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.version_)
      + sizeof(RpcRequest::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.response_timeout_ms_)>(
          reinterpret_cast<char*>(&_impl_.response_timeout_ms_),
          reinterpret_cast<char*>(&other->_impl_.response_timeout_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[19]);
}

// ===================================================================

class RpcAck::_Internal {
 public:
};

RpcAck::RpcAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcAck)
}
RpcAck::RpcAck(const RpcAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RpcAck)
}

inline void RpcAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcAck::~RpcAck() {
  // @@protoc_insertion_point(destructor:livekit.RpcAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
}

void RpcAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcAck::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcAck.request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcAck.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcAck)
  return target;
}

size_t RpcAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RpcAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcAck::GetClassData() const { return &_class_data_; }


void RpcAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcAck*>(&to_msg);
  auto& from = static_cast<const RpcAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcAck::CopyFrom(const RpcAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcAck::IsInitialized() const {
  return true;
}

void RpcAck::InternalSwap(RpcAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[20]);
}

// ===================================================================

class RpcResponse::_Internal {
 public:
  static const ::livekit::RpcError& error(const RpcResponse* msg);
};

const ::livekit::RpcError&
RpcResponse::_Internal::error(const RpcResponse* msg) {
  return *msg->_impl_.value_.error_;
}
void RpcResponse::set_allocated_error(::livekit::RpcError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.value_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcResponse.error)
}
RpcResponse::RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcResponse)
}
RpcResponse::RpcResponse(const RpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kPayload: {
      _this->_internal_set_payload(from._internal_payload());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::livekit::RpcError::MergeFrom(
          from._internal_error());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RpcResponse)
}

inline void RpcResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

RpcResponse::~RpcResponse() {
  // @@protoc_insertion_point(destructor:livekit.RpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void RpcResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResponse::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RpcResponse)
  switch (value_case()) {
    case kPayload: {
      _impl_.value_.payload_.Destroy();
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.error_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void RpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcResponse.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcResponse.payload"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.RpcError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string payload = 2;
  if (_internal_has_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcResponse.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // .livekit.RpcError error = 3;
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcResponse)
  return target;
}

size_t RpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  switch (value_case()) {
    // string payload = 2;
    case kPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload());
      break;
    }
    // .livekit.RpcError error = 3;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.error_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponse::GetClassData() const { return &_class_data_; }


void RpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcResponse*>(&to_msg);
  auto& from = static_cast<const RpcResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  switch (from.value_case()) {
    case kPayload: {
      _this->_internal_set_payload(from._internal_payload());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::livekit::RpcError::MergeFrom(
          from._internal_error());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponse::CopyFrom(const RpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponse::IsInitialized() const {
  return true;
}

void RpcResponse::InternalSwap(RpcResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[21]);
}

// ===================================================================

class RpcError::_Internal {
 public:
};

RpcError::RpcError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcError)
}
RpcError::RpcError(const RpcError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:livekit.RpcError)
}

inline void RpcError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcError::~RpcError() {
  // @@protoc_insertion_point(destructor:livekit.RpcError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.data_.Destroy();
}

void RpcError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcError::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcError.message"));
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RpcError.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RpcError.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcError)
  return target;
}

size_t RpcError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RpcError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcError::GetClassData() const { return &_class_data_; }


void RpcError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcError*>(&to_msg);
  auto& from = static_cast<const RpcError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcError::CopyFrom(const RpcError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcError::IsInitialized() const {
  return true;
}

void RpcError::InternalSwap(RpcError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[22]);
}

// ===================================================================

class ParticipantTracks::_Internal {
 public:
};

ParticipantTracks::ParticipantTracks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantTracks)
}
ParticipantTracks::ParticipantTracks(const ParticipantTracks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantTracks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){from._impl_.track_sids_}
    , decltype(_impl_.participant_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    _this->_impl_.participant_sid_.Set(from._internal_participant_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantTracks)
}

inline void ParticipantTracks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){arena}
    , decltype(_impl_.participant_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantTracks::~ParticipantTracks() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantTracks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantTracks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sids_.~RepeatedPtrField();
  _impl_.participant_sid_.Destroy();
}

void ParticipantTracks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantTracks::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantTracks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  _impl_.participant_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantTracks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantTracks.participant_sid"));
        } else
          goto handle_unusual;
        continue;
      // repeated string track_sids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ParticipantTracks.track_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantTracks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantTracks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantTracks.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // repeated string track_sids = 2;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ParticipantTracks.track_sids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantTracks)
  return target;
}

size_t ParticipantTracks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantTracks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.track_sids_.size());
  for (int i = 0, n = _impl_.track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.track_sids_.Get(i));
  }

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantTracks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantTracks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantTracks::GetClassData() const { return &_class_data_; }


void ParticipantTracks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantTracks*>(&to_msg);
  auto& from = static_cast<const ParticipantTracks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantTracks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.track_sids_.MergeFrom(from._impl_.track_sids_);
  if (!from._internal_participant_sid().empty()) {
    _this->_internal_set_participant_sid(from._internal_participant_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantTracks::CopyFrom(const ParticipantTracks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantTracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantTracks::IsInitialized() const {
  return true;
}

void ParticipantTracks::InternalSwap(ParticipantTracks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_sid_, lhs_arena,
      &other->_impl_.participant_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantTracks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[23]);
}

// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.debug_info_){}
    , decltype(_impl_.edition_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.agent_protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.debug_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_debug_info().empty()) {
    _this->_impl_.debug_info_.Set(from._internal_debug_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.edition_, &from._impl_.edition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.agent_protocol_) -
    reinterpret_cast<char*>(&_impl_.edition_)) + sizeof(_impl_.agent_protocol_));
  // @@protoc_insertion_point(copy_constructor:livekit.ServerInfo)
}

inline void ServerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.debug_info_){}
    , decltype(_impl_.edition_){0}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.agent_protocol_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.debug_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:livekit.ServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.region_.Destroy();
  _impl_.node_id_.Destroy();
  _impl_.debug_info_.Destroy();
}

void ServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.node_id_.ClearToEmpty();
  _impl_.debug_info_.ClearToEmpty();
  ::memset(&_impl_.edition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.agent_protocol_) -
      reinterpret_cast<char*>(&_impl_.edition_)) + sizeof(_impl_.agent_protocol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.ServerInfo.Edition edition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edition(static_cast<::livekit::ServerInfo_Edition>(val));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ServerInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ServerInfo.region"));
        } else
          goto handle_unusual;
        continue;
      // string node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ServerInfo.node_id"));
        } else
          goto handle_unusual;
        continue;
      // string debug_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_debug_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ServerInfo.debug_info"));
        } else
          goto handle_unusual;
        continue;
      // int32 agent_protocol = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.agent_protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.ServerInfo.Edition edition = 1;
  if (this->_internal_edition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_edition(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ServerInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int32 protocol = 3;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_protocol(), target);
  }

  // string region = 4;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ServerInfo.region");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_region(), target);
  }

  // string node_id = 5;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ServerInfo.node_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_node_id(), target);
  }

  // string debug_info = 6;
  if (!this->_internal_debug_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_debug_info().data(), static_cast<int>(this->_internal_debug_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ServerInfo.debug_info");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_debug_info(), target);
  }

  // int32 agent_protocol = 7;
  if (this->_internal_agent_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_agent_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string region = 4;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string node_id = 5;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string debug_info = 6;
  if (!this->_internal_debug_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_debug_info());
  }

  // .livekit.ServerInfo.Edition edition = 1;
  if (this->_internal_edition() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_edition());
  }

  // int32 protocol = 3;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // int32 agent_protocol = 7;
  if (this->_internal_agent_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_agent_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfo::GetClassData() const { return &_class_data_; }


void ServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ServerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_debug_info().empty()) {
    _this->_internal_set_debug_info(from._internal_debug_info());
  }
  if (from._internal_edition() != 0) {
    _this->_internal_set_edition(from._internal_edition());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_agent_protocol() != 0) {
    _this->_internal_set_agent_protocol(from._internal_agent_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.debug_info_, lhs_arena,
      &other->_impl_.debug_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.agent_protocol_)
      + sizeof(ServerInfo::_impl_.agent_protocol_)
      - PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.edition_)>(
          reinterpret_cast<char*>(&_impl_.edition_),
          reinterpret_cast<char*>(&other->_impl_.edition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[24]);
}

// ===================================================================

class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.os_version_){}
    , decltype(_impl_.device_model_){}
    , decltype(_impl_.browser_){}
    , decltype(_impl_.browser_version_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.other_sdks_){}
    , decltype(_impl_.sdk_){}
    , decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    _this->_impl_.os_.Set(from._internal_os(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_version().empty()) {
    _this->_impl_.os_version_.Set(from._internal_os_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_model().empty()) {
    _this->_impl_.device_model_.Set(from._internal_device_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.browser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_browser().empty()) {
    _this->_impl_.browser_.Set(from._internal_browser(), 
      _this->GetArenaForAllocation());
  }
  _impl_.browser_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browser_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_browser_version().empty()) {
    _this->_impl_.browser_version_.Set(from._internal_browser_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  _impl_.other_sdks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.other_sdks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_other_sdks().empty()) {
    _this->_impl_.other_sdks_.Set(from._internal_other_sdks(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sdk_, &from._impl_.sdk_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.protocol_) -
    reinterpret_cast<char*>(&_impl_.sdk_)) + sizeof(_impl_.protocol_));
  // @@protoc_insertion_point(copy_constructor:livekit.ClientInfo)
}

inline void ClientInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.os_version_){}
    , decltype(_impl_.device_model_){}
    , decltype(_impl_.browser_){}
    , decltype(_impl_.browser_version_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.other_sdks_){}
    , decltype(_impl_.sdk_){0}
    , decltype(_impl_.protocol_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.browser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.browser_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browser_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.other_sdks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.other_sdks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:livekit.ClientInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.os_.Destroy();
  _impl_.os_version_.Destroy();
  _impl_.device_model_.Destroy();
  _impl_.browser_.Destroy();
  _impl_.browser_version_.Destroy();
  _impl_.address_.Destroy();
  _impl_.network_.Destroy();
  _impl_.other_sdks_.Destroy();
}

void ClientInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.os_.ClearToEmpty();
  _impl_.os_version_.ClearToEmpty();
  _impl_.device_model_.ClearToEmpty();
  _impl_.browser_.ClearToEmpty();
  _impl_.browser_version_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _impl_.other_sdks_.ClearToEmpty();
  ::memset(&_impl_.sdk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.protocol_) -
      reinterpret_cast<char*>(&_impl_.sdk_)) + sizeof(_impl_.protocol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.ClientInfo.SDK sdk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sdk(static_cast<::livekit::ClientInfo_SDK>(val));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.os"));
        } else
          goto handle_unusual;
        continue;
      // string os_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_os_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.os_version"));
        } else
          goto handle_unusual;
        continue;
      // string device_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.device_model"));
        } else
          goto handle_unusual;
        continue;
      // string browser = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_browser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.browser"));
        } else
          goto handle_unusual;
        continue;
      // string browser_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_browser_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.browser_version"));
        } else
          goto handle_unusual;
        continue;
      // string address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.address"));
        } else
          goto handle_unusual;
        continue;
      // string network = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.network"));
        } else
          goto handle_unusual;
        continue;
      // string other_sdks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_other_sdks();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ClientInfo.other_sdks"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.ClientInfo.SDK sdk = 1;
  if (this->_internal_sdk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sdk(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int32 protocol = 3;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_protocol(), target);
  }

  // string os = 4;
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.os");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_os(), target);
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.os_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_os_version(), target);
  }

  // string device_model = 6;
  if (!this->_internal_device_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_model().data(), static_cast<int>(this->_internal_device_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.device_model");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_model(), target);
  }

  // string browser = 7;
  if (!this->_internal_browser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_browser().data(), static_cast<int>(this->_internal_browser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.browser");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_browser(), target);
  }

  // string browser_version = 8;
  if (!this->_internal_browser_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_browser_version().data(), static_cast<int>(this->_internal_browser_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.browser_version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_browser_version(), target);
  }

  // string address = 9;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_address(), target);
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.network");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_network(), target);
  }

  // string other_sdks = 11;
  if (!this->_internal_other_sdks().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other_sdks().data(), static_cast<int>(this->_internal_other_sdks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ClientInfo.other_sdks");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_other_sdks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string os = 4;
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_version());
  }

  // string device_model = 6;
  if (!this->_internal_device_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_model());
  }

  // string browser = 7;
  if (!this->_internal_browser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_browser());
  }

  // string browser_version = 8;
  if (!this->_internal_browser_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_browser_version());
  }

  // string address = 9;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string other_sdks = 11;
  if (!this->_internal_other_sdks().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_other_sdks());
  }

  // .livekit.ClientInfo.SDK sdk = 1;
  if (this->_internal_sdk() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sdk());
  }

  // int32 protocol = 3;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientInfo::GetClassData() const { return &_class_data_; }


void ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientInfo*>(&to_msg);
  auto& from = static_cast<const ClientInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ClientInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_os().empty()) {
    _this->_internal_set_os(from._internal_os());
  }
  if (!from._internal_os_version().empty()) {
    _this->_internal_set_os_version(from._internal_os_version());
  }
  if (!from._internal_device_model().empty()) {
    _this->_internal_set_device_model(from._internal_device_model());
  }
  if (!from._internal_browser().empty()) {
    _this->_internal_set_browser(from._internal_browser());
  }
  if (!from._internal_browser_version().empty()) {
    _this->_internal_set_browser_version(from._internal_browser_version());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_other_sdks().empty()) {
    _this->_internal_set_other_sdks(from._internal_other_sdks());
  }
  if (from._internal_sdk() != 0) {
    _this->_internal_set_sdk(from._internal_sdk());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_, lhs_arena,
      &other->_impl_.os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_version_, lhs_arena,
      &other->_impl_.os_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_model_, lhs_arena,
      &other->_impl_.device_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browser_, lhs_arena,
      &other->_impl_.browser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browser_version_, lhs_arena,
      &other->_impl_.browser_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.other_sdks_, lhs_arena,
      &other->_impl_.other_sdks_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.protocol_)
      + sizeof(ClientInfo::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.sdk_)>(
          reinterpret_cast<char*>(&_impl_.sdk_),
          reinterpret_cast<char*>(&other->_impl_.sdk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[25]);
}

// ===================================================================

class ClientConfiguration::_Internal {
 public:
  static const ::livekit::VideoConfiguration& video(const ClientConfiguration* msg);
  static const ::livekit::VideoConfiguration& screen(const ClientConfiguration* msg);
  static const ::livekit::DisabledCodecs& disabled_codecs(const ClientConfiguration* msg);
};

const ::livekit::VideoConfiguration&
ClientConfiguration::_Internal::video(const ClientConfiguration* msg) {
  return *msg->_impl_.video_;
}
const ::livekit::VideoConfiguration&
ClientConfiguration::_Internal::screen(const ClientConfiguration* msg) {
  return *msg->_impl_.screen_;
}
const ::livekit::DisabledCodecs&
ClientConfiguration::_Internal::disabled_codecs(const ClientConfiguration* msg) {
  return *msg->_impl_.disabled_codecs_;
}
ClientConfiguration::ClientConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ClientConfiguration)
}
ClientConfiguration::ClientConfiguration(const ClientConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.video_){nullptr}
    , decltype(_impl_.screen_){nullptr}
    , decltype(_impl_.disabled_codecs_){nullptr}
    , decltype(_impl_.resume_connection_){}
    , decltype(_impl_.force_relay_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_video()) {
    _this->_impl_.video_ = new ::livekit::VideoConfiguration(*from._impl_.video_);
  }
  if (from._internal_has_screen()) {
    _this->_impl_.screen_ = new ::livekit::VideoConfiguration(*from._impl_.screen_);
  }
  if (from._internal_has_disabled_codecs()) {
    _this->_impl_.disabled_codecs_ = new ::livekit::DisabledCodecs(*from._impl_.disabled_codecs_);
  }
  ::memcpy(&_impl_.resume_connection_, &from._impl_.resume_connection_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_relay_) -
    reinterpret_cast<char*>(&_impl_.resume_connection_)) + sizeof(_impl_.force_relay_));
  // @@protoc_insertion_point(copy_constructor:livekit.ClientConfiguration)
}

inline void ClientConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.video_){nullptr}
    , decltype(_impl_.screen_){nullptr}
    , decltype(_impl_.disabled_codecs_){nullptr}
    , decltype(_impl_.resume_connection_){0}
    , decltype(_impl_.force_relay_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientConfiguration::~ClientConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.ClientConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.video_;
  if (this != internal_default_instance()) delete _impl_.screen_;
  if (this != internal_default_instance()) delete _impl_.disabled_codecs_;
}

void ClientConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ClientConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.screen_ != nullptr) {
    delete _impl_.screen_;
  }
  _impl_.screen_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.disabled_codecs_ != nullptr) {
    delete _impl_.disabled_codecs_;
  }
  _impl_.disabled_codecs_ = nullptr;
  ::memset(&_impl_.resume_connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.force_relay_) -
      reinterpret_cast<char*>(&_impl_.resume_connection_)) + sizeof(_impl_.force_relay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.VideoConfiguration video = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.VideoConfiguration screen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ClientConfigSetting resume_connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resume_connection(static_cast<::livekit::ClientConfigSetting>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.DisabledCodecs disabled_codecs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled_codecs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ClientConfigSetting force_relay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_force_relay(static_cast<::livekit::ClientConfigSetting>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ClientConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.VideoConfiguration video = 1;
  if (this->_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // .livekit.VideoConfiguration screen = 2;
  if (this->_internal_has_screen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::screen(this),
        _Internal::screen(this).GetCachedSize(), target, stream);
  }

  // .livekit.ClientConfigSetting resume_connection = 3;
  if (this->_internal_resume_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resume_connection(), target);
  }

  // .livekit.DisabledCodecs disabled_codecs = 4;
  if (this->_internal_has_disabled_codecs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::disabled_codecs(this),
        _Internal::disabled_codecs(this).GetCachedSize(), target, stream);
  }

  // .livekit.ClientConfigSetting force_relay = 5;
  if (this->_internal_force_relay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_force_relay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ClientConfiguration)
  return target;
}

size_t ClientConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ClientConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.VideoConfiguration video = 1;
  if (this->_internal_has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);
  }

  // .livekit.VideoConfiguration screen = 2;
  if (this->_internal_has_screen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.screen_);
  }

  // .livekit.DisabledCodecs disabled_codecs = 4;
  if (this->_internal_has_disabled_codecs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.disabled_codecs_);
  }

  // .livekit.ClientConfigSetting resume_connection = 3;
  if (this->_internal_resume_connection() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resume_connection());
  }

  // .livekit.ClientConfigSetting force_relay = 5;
  if (this->_internal_force_relay() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_force_relay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientConfiguration::GetClassData() const { return &_class_data_; }


void ClientConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientConfiguration*>(&to_msg);
  auto& from = static_cast<const ClientConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ClientConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_video()) {
    _this->_internal_mutable_video()->::livekit::VideoConfiguration::MergeFrom(
        from._internal_video());
  }
  if (from._internal_has_screen()) {
    _this->_internal_mutable_screen()->::livekit::VideoConfiguration::MergeFrom(
        from._internal_screen());
  }
  if (from._internal_has_disabled_codecs()) {
    _this->_internal_mutable_disabled_codecs()->::livekit::DisabledCodecs::MergeFrom(
        from._internal_disabled_codecs());
  }
  if (from._internal_resume_connection() != 0) {
    _this->_internal_set_resume_connection(from._internal_resume_connection());
  }
  if (from._internal_force_relay() != 0) {
    _this->_internal_set_force_relay(from._internal_force_relay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConfiguration::CopyFrom(const ClientConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ClientConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfiguration::IsInitialized() const {
  return true;
}

void ClientConfiguration::InternalSwap(ClientConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.force_relay_)
      + sizeof(ClientConfiguration::_impl_.force_relay_)
      - PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.video_)>(
          reinterpret_cast<char*>(&_impl_.video_),
          reinterpret_cast<char*>(&other->_impl_.video_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[26]);
}

// ===================================================================

class VideoConfiguration::_Internal {
 public:
};

VideoConfiguration::VideoConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.VideoConfiguration)
}
VideoConfiguration::VideoConfiguration(const VideoConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hardware_encoder_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hardware_encoder_ = from._impl_.hardware_encoder_;
  // @@protoc_insertion_point(copy_constructor:livekit.VideoConfiguration)
}

inline void VideoConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hardware_encoder_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoConfiguration::~VideoConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.VideoConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VideoConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hardware_encoder_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.ClientConfigSetting hardware_encoder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hardware_encoder(static_cast<::livekit::ClientConfigSetting>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VideoConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.ClientConfigSetting hardware_encoder = 1;
  if (this->_internal_hardware_encoder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hardware_encoder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VideoConfiguration)
  return target;
}

size_t VideoConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.VideoConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.ClientConfigSetting hardware_encoder = 1;
  if (this->_internal_hardware_encoder() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hardware_encoder());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoConfiguration::GetClassData() const { return &_class_data_; }


void VideoConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoConfiguration*>(&to_msg);
  auto& from = static_cast<const VideoConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.VideoConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hardware_encoder() != 0) {
    _this->_internal_set_hardware_encoder(from._internal_hardware_encoder());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoConfiguration::CopyFrom(const VideoConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VideoConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoConfiguration::IsInitialized() const {
  return true;
}

void VideoConfiguration::InternalSwap(VideoConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.hardware_encoder_, other->_impl_.hardware_encoder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[27]);
}

// ===================================================================

class DisabledCodecs::_Internal {
 public:
};

DisabledCodecs::DisabledCodecs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DisabledCodecs)
}
DisabledCodecs::DisabledCodecs(const DisabledCodecs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisabledCodecs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.codecs_){from._impl_.codecs_}
    , decltype(_impl_.publish_){from._impl_.publish_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.DisabledCodecs)
}

inline void DisabledCodecs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.codecs_){arena}
    , decltype(_impl_.publish_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DisabledCodecs::~DisabledCodecs() {
  // @@protoc_insertion_point(destructor:livekit.DisabledCodecs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisabledCodecs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.codecs_.~RepeatedPtrField();
  _impl_.publish_.~RepeatedPtrField();
}

void DisabledCodecs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisabledCodecs::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DisabledCodecs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.codecs_.Clear();
  _impl_.publish_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisabledCodecs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.Codec codecs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.Codec publish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisabledCodecs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DisabledCodecs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.Codec codecs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_codecs_size()); i < n; i++) {
    const auto& repfield = this->_internal_codecs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.Codec publish = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publish_size()); i < n; i++) {
    const auto& repfield = this->_internal_publish(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DisabledCodecs)
  return target;
}

size_t DisabledCodecs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DisabledCodecs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.Codec codecs = 1;
  total_size += 1UL * this->_internal_codecs_size();
  for (const auto& msg : this->_impl_.codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.Codec publish = 2;
  total_size += 1UL * this->_internal_publish_size();
  for (const auto& msg : this->_impl_.publish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisabledCodecs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisabledCodecs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisabledCodecs::GetClassData() const { return &_class_data_; }


void DisabledCodecs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisabledCodecs*>(&to_msg);
  auto& from = static_cast<const DisabledCodecs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DisabledCodecs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.codecs_.MergeFrom(from._impl_.codecs_);
  _this->_impl_.publish_.MergeFrom(from._impl_.publish_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisabledCodecs::CopyFrom(const DisabledCodecs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DisabledCodecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisabledCodecs::IsInitialized() const {
  return true;
}

void DisabledCodecs::InternalSwap(DisabledCodecs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.codecs_.InternalSwap(&other->_impl_.codecs_);
  _impl_.publish_.InternalSwap(&other->_impl_.publish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisabledCodecs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[28]);
}

// ===================================================================

class RTPDrift::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const RTPDrift* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const RTPDrift* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPDrift::_Internal::start_time(const RTPDrift* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPDrift::_Internal::end_time(const RTPDrift* msg) {
  return *msg->_impl_.end_time_;
}
void RTPDrift::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void RTPDrift::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
RTPDrift::RTPDrift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPDrift)
}
RTPDrift::RTPDrift(const RTPDrift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTPDrift* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.end_timestamp_){}
    , decltype(_impl_.rtp_clock_ticks_){}
    , decltype(_impl_.drift_samples_){}
    , decltype(_impl_.drift_ms_){}
    , decltype(_impl_.clock_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clock_rate_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.clock_rate_));
  // @@protoc_insertion_point(copy_constructor:livekit.RTPDrift)
}

inline void RTPDrift::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.start_timestamp_){uint64_t{0u}}
    , decltype(_impl_.end_timestamp_){uint64_t{0u}}
    , decltype(_impl_.rtp_clock_ticks_){uint64_t{0u}}
    , decltype(_impl_.drift_samples_){int64_t{0}}
    , decltype(_impl_.drift_ms_){0}
    , decltype(_impl_.clock_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RTPDrift::~RTPDrift() {
  // @@protoc_insertion_point(destructor:livekit.RTPDrift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTPDrift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void RTPDrift::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTPDrift::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPDrift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  ::memset(&_impl_.duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clock_rate_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.clock_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTPDrift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 start_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rtp_clock_ticks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rtp_clock_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 drift_samples = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.drift_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double drift_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.drift_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double clock_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.clock_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTPDrift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPDrift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // double duration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // uint64 start_timestamp = 4;
  if (this->_internal_start_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_start_timestamp(), target);
  }

  // uint64 end_timestamp = 5;
  if (this->_internal_end_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_end_timestamp(), target);
  }

  // uint64 rtp_clock_ticks = 6;
  if (this->_internal_rtp_clock_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rtp_clock_ticks(), target);
  }

  // int64 drift_samples = 7;
  if (this->_internal_drift_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_drift_samples(), target);
  }

  // double drift_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift_ms = this->_internal_drift_ms();
  uint64_t raw_drift_ms;
  memcpy(&raw_drift_ms, &tmp_drift_ms, sizeof(tmp_drift_ms));
  if (raw_drift_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_drift_ms(), target);
  }

  // double clock_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_clock_rate = this->_internal_clock_rate();
  uint64_t raw_clock_rate;
  memcpy(&raw_clock_rate, &tmp_clock_rate, sizeof(tmp_clock_rate));
  if (raw_clock_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_clock_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPDrift)
  return target;
}

size_t RTPDrift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RTPDrift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // double duration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 8;
  }

  // uint64 start_timestamp = 4;
  if (this->_internal_start_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_timestamp());
  }

  // uint64 end_timestamp = 5;
  if (this->_internal_end_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_timestamp());
  }

  // uint64 rtp_clock_ticks = 6;
  if (this->_internal_rtp_clock_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rtp_clock_ticks());
  }

  // int64 drift_samples = 7;
  if (this->_internal_drift_samples() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_drift_samples());
  }

  // double drift_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift_ms = this->_internal_drift_ms();
  uint64_t raw_drift_ms;
  memcpy(&raw_drift_ms, &tmp_drift_ms, sizeof(tmp_drift_ms));
  if (raw_drift_ms != 0) {
    total_size += 1 + 8;
  }

  // double clock_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_clock_rate = this->_internal_clock_rate();
  uint64_t raw_clock_rate;
  memcpy(&raw_clock_rate, &tmp_clock_rate, sizeof(tmp_clock_rate));
  if (raw_clock_rate != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTPDrift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTPDrift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTPDrift::GetClassData() const { return &_class_data_; }


void RTPDrift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTPDrift*>(&to_msg);
  auto& from = static_cast<const RTPDrift&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPDrift)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = from._internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_start_timestamp() != 0) {
    _this->_internal_set_start_timestamp(from._internal_start_timestamp());
  }
  if (from._internal_end_timestamp() != 0) {
    _this->_internal_set_end_timestamp(from._internal_end_timestamp());
  }
  if (from._internal_rtp_clock_ticks() != 0) {
    _this->_internal_set_rtp_clock_ticks(from._internal_rtp_clock_ticks());
  }
  if (from._internal_drift_samples() != 0) {
    _this->_internal_set_drift_samples(from._internal_drift_samples());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift_ms = from._internal_drift_ms();
  uint64_t raw_drift_ms;
  memcpy(&raw_drift_ms, &tmp_drift_ms, sizeof(tmp_drift_ms));
  if (raw_drift_ms != 0) {
    _this->_internal_set_drift_ms(from._internal_drift_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_clock_rate = from._internal_clock_rate();
  uint64_t raw_clock_rate;
  memcpy(&raw_clock_rate, &tmp_clock_rate, sizeof(tmp_clock_rate));
  if (raw_clock_rate != 0) {
    _this->_internal_set_clock_rate(from._internal_clock_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTPDrift::CopyFrom(const RTPDrift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPDrift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTPDrift::IsInitialized() const {
  return true;
}

void RTPDrift::InternalSwap(RTPDrift* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.clock_rate_)
      + sizeof(RTPDrift::_impl_.clock_rate_)
      - PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTPDrift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[29]);
}

// ===================================================================

RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse() {}
RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RTPStats_GapHistogramEntry_DoNotUse::MergeFrom(const RTPStats_GapHistogramEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RTPStats_GapHistogramEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[30]);
}

// ===================================================================

class RTPStats::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_pli(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_fir(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_key_frame(const RTPStats* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_layer_lock_pli(const RTPStats* msg);
  static const ::livekit::RTPDrift& packet_drift(const RTPStats* msg);
  static const ::livekit::RTPDrift& ntp_report_drift(const RTPStats* msg);
  static const ::livekit::RTPDrift& rebased_report_drift(const RTPStats* msg);
  static const ::livekit::RTPDrift& received_report_drift(const RTPStats* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::start_time(const RTPStats* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::end_time(const RTPStats* msg) {
  return *msg->_impl_.end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_pli(const RTPStats* msg) {
  return *msg->_impl_.last_pli_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_fir(const RTPStats* msg) {
  return *msg->_impl_.last_fir_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_key_frame(const RTPStats* msg) {
  return *msg->_impl_.last_key_frame_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RTPStats::_Internal::last_layer_lock_pli(const RTPStats* msg) {
  return *msg->_impl_.last_layer_lock_pli_;
}
const ::livekit::RTPDrift&
RTPStats::_Internal::packet_drift(const RTPStats* msg) {
  return *msg->_impl_.packet_drift_;
}
const ::livekit::RTPDrift&
RTPStats::_Internal::ntp_report_drift(const RTPStats* msg) {
  return *msg->_impl_.ntp_report_drift_;
}
const ::livekit::RTPDrift&
RTPStats::_Internal::rebased_report_drift(const RTPStats* msg) {
  return *msg->_impl_.rebased_report_drift_;
}
const ::livekit::RTPDrift&
RTPStats::_Internal::received_report_drift(const RTPStats* msg) {
  return *msg->_impl_.received_report_drift_;
}
void RTPStats::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void RTPStats::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
void RTPStats::clear_last_pli() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_pli_ != nullptr) {
    delete _impl_.last_pli_;
  }
  _impl_.last_pli_ = nullptr;
}
void RTPStats::clear_last_fir() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_fir_ != nullptr) {
    delete _impl_.last_fir_;
  }
  _impl_.last_fir_ = nullptr;
}
void RTPStats::clear_last_key_frame() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_key_frame_ != nullptr) {
    delete _impl_.last_key_frame_;
  }
  _impl_.last_key_frame_ = nullptr;
}
void RTPStats::clear_last_layer_lock_pli() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_layer_lock_pli_ != nullptr) {
    delete _impl_.last_layer_lock_pli_;
  }
  _impl_.last_layer_lock_pli_ = nullptr;
}
RTPStats::RTPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RTPStats::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.RTPStats)
}
RTPStats::RTPStats(const RTPStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTPStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.gap_histogram_)*/{}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.last_pli_){nullptr}
    , decltype(_impl_.last_fir_){nullptr}
    , decltype(_impl_.last_key_frame_){nullptr}
    , decltype(_impl_.last_layer_lock_pli_){nullptr}
    , decltype(_impl_.packet_drift_){nullptr}
    , decltype(_impl_.ntp_report_drift_){nullptr}
    , decltype(_impl_.rebased_report_drift_){nullptr}
    , decltype(_impl_.received_report_drift_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.packet_rate_){}
    , decltype(_impl_.bytes_){}
    , decltype(_impl_.packets_){}
    , decltype(_impl_.packets_lost_){}
    , decltype(_impl_.bitrate_){}
    , decltype(_impl_.packet_loss_rate_){}
    , decltype(_impl_.packet_loss_percentage_){}
    , decltype(_impl_.packets_duplicate_){}
    , decltype(_impl_.packet_duplicate_rate_){}
    , decltype(_impl_.bytes_duplicate_){}
    , decltype(_impl_.bitrate_duplicate_){}
    , decltype(_impl_.packet_padding_rate_){}
    , decltype(_impl_.bytes_padding_){}
    , decltype(_impl_.packets_padding_){}
    , decltype(_impl_.packets_out_of_order_){}
    , decltype(_impl_.bitrate_padding_){}
    , decltype(_impl_.frame_rate_){}
    , decltype(_impl_.jitter_current_){}
    , decltype(_impl_.frames_){}
    , decltype(_impl_.nacks_){}
    , decltype(_impl_.jitter_max_){}
    , decltype(_impl_.nack_misses_){}
    , decltype(_impl_.plis_){}
    , decltype(_impl_.firs_){}
    , decltype(_impl_.rtt_current_){}
    , decltype(_impl_.rtt_max_){}
    , decltype(_impl_.key_frames_){}
    , decltype(_impl_.layer_lock_plis_){}
    , decltype(_impl_.nack_acks_){}
    , decltype(_impl_.header_bytes_){}
    , decltype(_impl_.header_bytes_duplicate_){}
    , decltype(_impl_.header_bytes_padding_){}
    , decltype(_impl_.nack_repeated_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gap_histogram_.MergeFrom(from._impl_.gap_histogram_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  if (from._internal_has_last_pli()) {
    _this->_impl_.last_pli_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_pli_);
  }
  if (from._internal_has_last_fir()) {
    _this->_impl_.last_fir_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_fir_);
  }
  if (from._internal_has_last_key_frame()) {
    _this->_impl_.last_key_frame_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_key_frame_);
  }
  if (from._internal_has_last_layer_lock_pli()) {
    _this->_impl_.last_layer_lock_pli_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_layer_lock_pli_);
  }
  if (from._internal_has_packet_drift()) {
    _this->_impl_.packet_drift_ = new ::livekit::RTPDrift(*from._impl_.packet_drift_);
  }
  if (from._internal_has_ntp_report_drift()) {
    _this->_impl_.ntp_report_drift_ = new ::livekit::RTPDrift(*from._impl_.ntp_report_drift_);
  }
  if (from._internal_has_rebased_report_drift()) {
    _this->_impl_.rebased_report_drift_ = new ::livekit::RTPDrift(*from._impl_.rebased_report_drift_);
  }
  if (from._internal_has_received_report_drift()) {
    _this->_impl_.received_report_drift_ = new ::livekit::RTPDrift(*from._impl_.received_report_drift_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nack_repeated_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.nack_repeated_));
  // @@protoc_insertion_point(copy_constructor:livekit.RTPStats)
}

inline void RTPStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.gap_histogram_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.last_pli_){nullptr}
    , decltype(_impl_.last_fir_){nullptr}
    , decltype(_impl_.last_key_frame_){nullptr}
    , decltype(_impl_.last_layer_lock_pli_){nullptr}
    , decltype(_impl_.packet_drift_){nullptr}
    , decltype(_impl_.ntp_report_drift_){nullptr}
    , decltype(_impl_.rebased_report_drift_){nullptr}
    , decltype(_impl_.received_report_drift_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.packet_rate_){0}
    , decltype(_impl_.bytes_){uint64_t{0u}}
    , decltype(_impl_.packets_){0u}
    , decltype(_impl_.packets_lost_){0u}
    , decltype(_impl_.bitrate_){0}
    , decltype(_impl_.packet_loss_rate_){0}
    , decltype(_impl_.packet_loss_percentage_){0}
    , decltype(_impl_.packets_duplicate_){0u}
    , decltype(_impl_.packet_duplicate_rate_){0}
    , decltype(_impl_.bytes_duplicate_){uint64_t{0u}}
    , decltype(_impl_.bitrate_duplicate_){0}
    , decltype(_impl_.packet_padding_rate_){0}
    , decltype(_impl_.bytes_padding_){uint64_t{0u}}
    , decltype(_impl_.packets_padding_){0u}
    , decltype(_impl_.packets_out_of_order_){0u}
    , decltype(_impl_.bitrate_padding_){0}
    , decltype(_impl_.frame_rate_){0}
    , decltype(_impl_.jitter_current_){0}
    , decltype(_impl_.frames_){0u}
    , decltype(_impl_.nacks_){0u}
    , decltype(_impl_.jitter_max_){0}
    , decltype(_impl_.nack_misses_){0u}
    , decltype(_impl_.plis_){0u}
    , decltype(_impl_.firs_){0u}
    , decltype(_impl_.rtt_current_){0u}
    , decltype(_impl_.rtt_max_){0u}
    , decltype(_impl_.key_frames_){0u}
    , decltype(_impl_.layer_lock_plis_){0u}
    , decltype(_impl_.nack_acks_){0u}
    , decltype(_impl_.header_bytes_){uint64_t{0u}}
    , decltype(_impl_.header_bytes_duplicate_){uint64_t{0u}}
    , decltype(_impl_.header_bytes_padding_){uint64_t{0u}}
    , decltype(_impl_.nack_repeated_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RTPStats::~RTPStats() {
  // @@protoc_insertion_point(destructor:livekit.RTPStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RTPStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gap_histogram_.Destruct();
  _impl_.gap_histogram_.~MapField();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
  if (this != internal_default_instance()) delete _impl_.last_pli_;
  if (this != internal_default_instance()) delete _impl_.last_fir_;
  if (this != internal_default_instance()) delete _impl_.last_key_frame_;
  if (this != internal_default_instance()) delete _impl_.last_layer_lock_pli_;
  if (this != internal_default_instance()) delete _impl_.packet_drift_;
  if (this != internal_default_instance()) delete _impl_.ntp_report_drift_;
  if (this != internal_default_instance()) delete _impl_.rebased_report_drift_;
  if (this != internal_default_instance()) delete _impl_.received_report_drift_;
}

void RTPStats::ArenaDtor(void* object) {
  RTPStats* _this = reinterpret_cast< RTPStats* >(object);
  _this->_impl_.gap_histogram_.Destruct();
}
void RTPStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTPStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gap_histogram_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_pli_ != nullptr) {
    delete _impl_.last_pli_;
  }
  _impl_.last_pli_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_fir_ != nullptr) {
    delete _impl_.last_fir_;
  }
  _impl_.last_fir_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_key_frame_ != nullptr) {
    delete _impl_.last_key_frame_;
  }
  _impl_.last_key_frame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_layer_lock_pli_ != nullptr) {
    delete _impl_.last_layer_lock_pli_;
  }
  _impl_.last_layer_lock_pli_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.packet_drift_ != nullptr) {
    delete _impl_.packet_drift_;
  }
  _impl_.packet_drift_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ntp_report_drift_ != nullptr) {
    delete _impl_.ntp_report_drift_;
  }
  _impl_.ntp_report_drift_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rebased_report_drift_ != nullptr) {
    delete _impl_.rebased_report_drift_;
  }
  _impl_.rebased_report_drift_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.received_report_drift_ != nullptr) {
    delete _impl_.received_report_drift_;
  }
  _impl_.received_report_drift_ = nullptr;
  ::memset(&_impl_.duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nack_repeated_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.nack_repeated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTPStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.packet_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bitrate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_lost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.packets_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_loss_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.packet_loss_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float packet_loss_percentage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.packet_loss_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_duplicate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.packets_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_duplicate_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.packet_duplicate_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_duplicate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.bytes_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bitrate_duplicate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.bitrate_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_padding = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.packets_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_padding_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.packet_padding_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_padding = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.bytes_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bitrate_padding = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.bitrate_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets_out_of_order = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.packets_out_of_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frames = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double frame_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jitter_current = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.jitter_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jitter_max = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.jitter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint32> gap_histogram = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.gap_histogram_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 nacks = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.nacks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nack_misses = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.nack_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 plis = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.plis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_pli = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_pli(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 firs = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.firs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_fir = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_fir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt_current = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.rtt_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt_max = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.rtt_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 key_frames = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_key_frame = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_key_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 layer_lock_plis = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.layer_lock_plis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_layer_lock_pli = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_layer_lock_pli(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nack_acks = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.nack_acks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nack_repeated = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.nack_repeated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 header_bytes = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.header_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 header_bytes_duplicate = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.header_bytes_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 header_bytes_padding = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.header_bytes_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RTPDrift packet_drift = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_drift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RTPDrift ntp_report_drift = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntp_report_drift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RTPDrift rebased_report_drift = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_rebased_report_drift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RTPDrift received_report_drift = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_report_drift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTPStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // double duration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // uint32 packets = 4;
  if (this->_internal_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packets(), target);
  }

  // double packet_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_rate = this->_internal_packet_rate();
  uint64_t raw_packet_rate;
  memcpy(&raw_packet_rate, &tmp_packet_rate, sizeof(tmp_packet_rate));
  if (raw_packet_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_packet_rate(), target);
  }

  // uint64 bytes = 6;
  if (this->_internal_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes(), target);
  }

  // double bitrate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate = this->_internal_bitrate();
  uint64_t raw_bitrate;
  memcpy(&raw_bitrate, &tmp_bitrate, sizeof(tmp_bitrate));
  if (raw_bitrate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_bitrate(), target);
  }

  // uint32 packets_lost = 8;
  if (this->_internal_packets_lost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_packets_lost(), target);
  }

  // double packet_loss_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_loss_rate = this->_internal_packet_loss_rate();
  uint64_t raw_packet_loss_rate;
  memcpy(&raw_packet_loss_rate, &tmp_packet_loss_rate, sizeof(tmp_packet_loss_rate));
  if (raw_packet_loss_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_packet_loss_rate(), target);
  }

  // float packet_loss_percentage = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_packet_loss_percentage = this->_internal_packet_loss_percentage();
  uint32_t raw_packet_loss_percentage;
  memcpy(&raw_packet_loss_percentage, &tmp_packet_loss_percentage, sizeof(tmp_packet_loss_percentage));
  if (raw_packet_loss_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_packet_loss_percentage(), target);
  }

  // uint32 packets_duplicate = 11;
  if (this->_internal_packets_duplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_packets_duplicate(), target);
  }

  // double packet_duplicate_rate = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_duplicate_rate = this->_internal_packet_duplicate_rate();
  uint64_t raw_packet_duplicate_rate;
  memcpy(&raw_packet_duplicate_rate, &tmp_packet_duplicate_rate, sizeof(tmp_packet_duplicate_rate));
  if (raw_packet_duplicate_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_packet_duplicate_rate(), target);
  }

  // uint64 bytes_duplicate = 13;
  if (this->_internal_bytes_duplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_bytes_duplicate(), target);
  }

  // double bitrate_duplicate = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_duplicate = this->_internal_bitrate_duplicate();
  uint64_t raw_bitrate_duplicate;
  memcpy(&raw_bitrate_duplicate, &tmp_bitrate_duplicate, sizeof(tmp_bitrate_duplicate));
  if (raw_bitrate_duplicate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_bitrate_duplicate(), target);
  }

  // uint32 packets_padding = 15;
  if (this->_internal_packets_padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_packets_padding(), target);
  }

  // double packet_padding_rate = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_padding_rate = this->_internal_packet_padding_rate();
  uint64_t raw_packet_padding_rate;
  memcpy(&raw_packet_padding_rate, &tmp_packet_padding_rate, sizeof(tmp_packet_padding_rate));
  if (raw_packet_padding_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_packet_padding_rate(), target);
  }

  // uint64 bytes_padding = 17;
  if (this->_internal_bytes_padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_bytes_padding(), target);
  }

  // double bitrate_padding = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_padding = this->_internal_bitrate_padding();
  uint64_t raw_bitrate_padding;
  memcpy(&raw_bitrate_padding, &tmp_bitrate_padding, sizeof(tmp_bitrate_padding));
  if (raw_bitrate_padding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_bitrate_padding(), target);
  }

  // uint32 packets_out_of_order = 19;
  if (this->_internal_packets_out_of_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_packets_out_of_order(), target);
  }

  // uint32 frames = 20;
  if (this->_internal_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_frames(), target);
  }

  // double frame_rate = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frame_rate = this->_internal_frame_rate();
  uint64_t raw_frame_rate;
  memcpy(&raw_frame_rate, &tmp_frame_rate, sizeof(tmp_frame_rate));
  if (raw_frame_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_frame_rate(), target);
  }

  // double jitter_current = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_current = this->_internal_jitter_current();
  uint64_t raw_jitter_current;
  memcpy(&raw_jitter_current, &tmp_jitter_current, sizeof(tmp_jitter_current));
  if (raw_jitter_current != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_jitter_current(), target);
  }

  // double jitter_max = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_max = this->_internal_jitter_max();
  uint64_t raw_jitter_max;
  memcpy(&raw_jitter_max, &tmp_jitter_max, sizeof(tmp_jitter_max));
  if (raw_jitter_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_jitter_max(), target);
  }

  // map<int32, uint32> gap_histogram = 24;
  if (!this->_internal_gap_histogram().empty()) {
    using MapType = ::_pb::Map<int32_t, uint32_t>;
    using WireHelper = RTPStats_GapHistogramEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_gap_histogram();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(24, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(24, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 nacks = 25;
  if (this->_internal_nacks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_nacks(), target);
  }

  // uint32 nack_misses = 26;
  if (this->_internal_nack_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_nack_misses(), target);
  }

  // uint32 plis = 27;
  if (this->_internal_plis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_plis(), target);
  }

  // .google.protobuf.Timestamp last_pli = 28;
  if (this->_internal_has_last_pli()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::last_pli(this),
        _Internal::last_pli(this).GetCachedSize(), target, stream);
  }

  // uint32 firs = 29;
  if (this->_internal_firs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_firs(), target);
  }

  // .google.protobuf.Timestamp last_fir = 30;
  if (this->_internal_has_last_fir()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::last_fir(this),
        _Internal::last_fir(this).GetCachedSize(), target, stream);
  }

  // uint32 rtt_current = 31;
  if (this->_internal_rtt_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_rtt_current(), target);
  }

  // uint32 rtt_max = 32;
  if (this->_internal_rtt_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_rtt_max(), target);
  }

  // uint32 key_frames = 33;
  if (this->_internal_key_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_key_frames(), target);
  }

  // .google.protobuf.Timestamp last_key_frame = 34;
  if (this->_internal_has_last_key_frame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::last_key_frame(this),
        _Internal::last_key_frame(this).GetCachedSize(), target, stream);
  }

  // uint32 layer_lock_plis = 35;
  if (this->_internal_layer_lock_plis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_layer_lock_plis(), target);
  }

  // .google.protobuf.Timestamp last_layer_lock_pli = 36;
  if (this->_internal_has_last_layer_lock_pli()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::last_layer_lock_pli(this),
        _Internal::last_layer_lock_pli(this).GetCachedSize(), target, stream);
  }

  // uint32 nack_acks = 37;
  if (this->_internal_nack_acks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_nack_acks(), target);
  }

  // uint32 nack_repeated = 38;
  if (this->_internal_nack_repeated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_nack_repeated(), target);
  }

  // uint64 header_bytes = 39;
  if (this->_internal_header_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(39, this->_internal_header_bytes(), target);
  }

  // uint64 header_bytes_duplicate = 40;
  if (this->_internal_header_bytes_duplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(40, this->_internal_header_bytes_duplicate(), target);
  }

  // uint64 header_bytes_padding = 41;
  if (this->_internal_header_bytes_padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(41, this->_internal_header_bytes_padding(), target);
  }

  // .livekit.RTPDrift packet_drift = 44;
  if (this->_internal_has_packet_drift()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::packet_drift(this),
        _Internal::packet_drift(this).GetCachedSize(), target, stream);
  }

  // .livekit.RTPDrift ntp_report_drift = 45;
  if (this->_internal_has_ntp_report_drift()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::ntp_report_drift(this),
        _Internal::ntp_report_drift(this).GetCachedSize(), target, stream);
  }

  // .livekit.RTPDrift rebased_report_drift = 46;
  if (this->_internal_has_rebased_report_drift()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::rebased_report_drift(this),
        _Internal::rebased_report_drift(this).GetCachedSize(), target, stream);
  }

  // .livekit.RTPDrift received_report_drift = 47;
  if (this->_internal_has_received_report_drift()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::received_report_drift(this),
        _Internal::received_report_drift(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPStats)
  return target;
}

size_t RTPStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RTPStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, uint32> gap_histogram = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gap_histogram_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >::const_iterator
      it = this->_internal_gap_histogram().begin();
      it != this->_internal_gap_histogram().end(); ++it) {
    total_size += RTPStats_GapHistogramEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // .google.protobuf.Timestamp last_pli = 28;
  if (this->_internal_has_last_pli()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_pli_);
  }

  // .google.protobuf.Timestamp last_fir = 30;
  if (this->_internal_has_last_fir()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_fir_);
  }

  // .google.protobuf.Timestamp last_key_frame = 34;
  if (this->_internal_has_last_key_frame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_key_frame_);
  }

  // .google.protobuf.Timestamp last_layer_lock_pli = 36;
  if (this->_internal_has_last_layer_lock_pli()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_layer_lock_pli_);
  }

  // .livekit.RTPDrift packet_drift = 44;
  if (this->_internal_has_packet_drift()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_drift_);
  }

  // .livekit.RTPDrift ntp_report_drift = 45;
  if (this->_internal_has_ntp_report_drift()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ntp_report_drift_);
  }

  // .livekit.RTPDrift rebased_report_drift = 46;
  if (this->_internal_has_rebased_report_drift()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rebased_report_drift_);
  }

  // .livekit.RTPDrift received_report_drift = 47;
  if (this->_internal_has_received_report_drift()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.received_report_drift_);
  }

  // double duration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 8;
  }

  // double packet_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_rate = this->_internal_packet_rate();
  uint64_t raw_packet_rate;
  memcpy(&raw_packet_rate, &tmp_packet_rate, sizeof(tmp_packet_rate));
  if (raw_packet_rate != 0) {
    total_size += 1 + 8;
  }

  // uint64 bytes = 6;
  if (this->_internal_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes());
  }

  // uint32 packets = 4;
  if (this->_internal_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packets());
  }

  // uint32 packets_lost = 8;
  if (this->_internal_packets_lost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packets_lost());
  }

  // double bitrate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate = this->_internal_bitrate();
  uint64_t raw_bitrate;
  memcpy(&raw_bitrate, &tmp_bitrate, sizeof(tmp_bitrate));
  if (raw_bitrate != 0) {
    total_size += 1 + 8;
  }

  // double packet_loss_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_loss_rate = this->_internal_packet_loss_rate();
  uint64_t raw_packet_loss_rate;
  memcpy(&raw_packet_loss_rate, &tmp_packet_loss_rate, sizeof(tmp_packet_loss_rate));
  if (raw_packet_loss_rate != 0) {
    total_size += 1 + 8;
  }

  // float packet_loss_percentage = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_packet_loss_percentage = this->_internal_packet_loss_percentage();
  uint32_t raw_packet_loss_percentage;
  memcpy(&raw_packet_loss_percentage, &tmp_packet_loss_percentage, sizeof(tmp_packet_loss_percentage));
  if (raw_packet_loss_percentage != 0) {
    total_size += 1 + 4;
  }

  // uint32 packets_duplicate = 11;
  if (this->_internal_packets_duplicate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packets_duplicate());
  }

  // double packet_duplicate_rate = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_duplicate_rate = this->_internal_packet_duplicate_rate();
  uint64_t raw_packet_duplicate_rate;
  memcpy(&raw_packet_duplicate_rate, &tmp_packet_duplicate_rate, sizeof(tmp_packet_duplicate_rate));
  if (raw_packet_duplicate_rate != 0) {
    total_size += 1 + 8;
  }

  // uint64 bytes_duplicate = 13;
  if (this->_internal_bytes_duplicate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_duplicate());
  }

  // double bitrate_duplicate = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_duplicate = this->_internal_bitrate_duplicate();
  uint64_t raw_bitrate_duplicate;
  memcpy(&raw_bitrate_duplicate, &tmp_bitrate_duplicate, sizeof(tmp_bitrate_duplicate));
  if (raw_bitrate_duplicate != 0) {
    total_size += 1 + 8;
  }

  // double packet_padding_rate = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_padding_rate = this->_internal_packet_padding_rate();
  uint64_t raw_packet_padding_rate;
  memcpy(&raw_packet_padding_rate, &tmp_packet_padding_rate, sizeof(tmp_packet_padding_rate));
  if (raw_packet_padding_rate != 0) {
    total_size += 2 + 8;
  }

  // uint64 bytes_padding = 17;
  if (this->_internal_bytes_padding() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_padding());
  }

  // uint32 packets_padding = 15;
  if (this->_internal_packets_padding() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packets_padding());
  }

  // uint32 packets_out_of_order = 19;
  if (this->_internal_packets_out_of_order() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_packets_out_of_order());
  }

  // double bitrate_padding = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_padding = this->_internal_bitrate_padding();
  uint64_t raw_bitrate_padding;
  memcpy(&raw_bitrate_padding, &tmp_bitrate_padding, sizeof(tmp_bitrate_padding));
  if (raw_bitrate_padding != 0) {
    total_size += 2 + 8;
  }

  // double frame_rate = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frame_rate = this->_internal_frame_rate();
  uint64_t raw_frame_rate;
  memcpy(&raw_frame_rate, &tmp_frame_rate, sizeof(tmp_frame_rate));
  if (raw_frame_rate != 0) {
    total_size += 2 + 8;
  }

  // double jitter_current = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_current = this->_internal_jitter_current();
  uint64_t raw_jitter_current;
  memcpy(&raw_jitter_current, &tmp_jitter_current, sizeof(tmp_jitter_current));
  if (raw_jitter_current != 0) {
    total_size += 2 + 8;
  }

  // uint32 frames = 20;
  if (this->_internal_frames() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_frames());
  }

  // uint32 nacks = 25;
  if (this->_internal_nacks() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nacks());
  }

  // double jitter_max = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_max = this->_internal_jitter_max();
  uint64_t raw_jitter_max;
  memcpy(&raw_jitter_max, &tmp_jitter_max, sizeof(tmp_jitter_max));
  if (raw_jitter_max != 0) {
    total_size += 2 + 8;
  }

  // uint32 nack_misses = 26;
  if (this->_internal_nack_misses() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_misses());
  }

  // uint32 plis = 27;
  if (this->_internal_plis() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_plis());
  }

  // uint32 firs = 29;
  if (this->_internal_firs() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_firs());
  }

  // uint32 rtt_current = 31;
  if (this->_internal_rtt_current() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rtt_current());
  }

  // uint32 rtt_max = 32;
  if (this->_internal_rtt_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rtt_max());
  }

  // uint32 key_frames = 33;
  if (this->_internal_key_frames() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_key_frames());
  }

  // uint32 layer_lock_plis = 35;
  if (this->_internal_layer_lock_plis() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_layer_lock_plis());
  }

  // uint32 nack_acks = 37;
  if (this->_internal_nack_acks() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_acks());
  }

  // uint64 header_bytes = 39;
  if (this->_internal_header_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_header_bytes());
  }

  // uint64 header_bytes_duplicate = 40;
  if (this->_internal_header_bytes_duplicate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_header_bytes_duplicate());
  }

  // uint64 header_bytes_padding = 41;
  if (this->_internal_header_bytes_padding() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_header_bytes_padding());
  }

  // uint32 nack_repeated = 38;
  if (this->_internal_nack_repeated() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_repeated());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTPStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTPStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTPStats::GetClassData() const { return &_class_data_; }


void RTPStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTPStats*>(&to_msg);
  auto& from = static_cast<const RTPStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gap_histogram_.MergeFrom(from._impl_.gap_histogram_);
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_has_last_pli()) {
    _this->_internal_mutable_last_pli()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_pli());
  }
  if (from._internal_has_last_fir()) {
    _this->_internal_mutable_last_fir()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_fir());
  }
  if (from._internal_has_last_key_frame()) {
    _this->_internal_mutable_last_key_frame()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_key_frame());
  }
  if (from._internal_has_last_layer_lock_pli()) {
    _this->_internal_mutable_last_layer_lock_pli()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_layer_lock_pli());
  }
  if (from._internal_has_packet_drift()) {
    _this->_internal_mutable_packet_drift()->::livekit::RTPDrift::MergeFrom(
        from._internal_packet_drift());
  }
  if (from._internal_has_ntp_report_drift()) {
    _this->_internal_mutable_ntp_report_drift()->::livekit::RTPDrift::MergeFrom(
        from._internal_ntp_report_drift());
  }
  if (from._internal_has_rebased_report_drift()) {
    _this->_internal_mutable_rebased_report_drift()->::livekit::RTPDrift::MergeFrom(
        from._internal_rebased_report_drift());
  }
  if (from._internal_has_received_report_drift()) {
    _this->_internal_mutable_received_report_drift()->::livekit::RTPDrift::MergeFrom(
        from._internal_received_report_drift());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = from._internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_rate = from._internal_packet_rate();
  uint64_t raw_packet_rate;
  memcpy(&raw_packet_rate, &tmp_packet_rate, sizeof(tmp_packet_rate));
  if (raw_packet_rate != 0) {
    _this->_internal_set_packet_rate(from._internal_packet_rate());
  }
  if (from._internal_bytes() != 0) {
    _this->_internal_set_bytes(from._internal_bytes());
  }
  if (from._internal_packets() != 0) {
    _this->_internal_set_packets(from._internal_packets());
  }
  if (from._internal_packets_lost() != 0) {
    _this->_internal_set_packets_lost(from._internal_packets_lost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate = from._internal_bitrate();
  uint64_t raw_bitrate;
  memcpy(&raw_bitrate, &tmp_bitrate, sizeof(tmp_bitrate));
  if (raw_bitrate != 0) {
    _this->_internal_set_bitrate(from._internal_bitrate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_loss_rate = from._internal_packet_loss_rate();
  uint64_t raw_packet_loss_rate;
  memcpy(&raw_packet_loss_rate, &tmp_packet_loss_rate, sizeof(tmp_packet_loss_rate));
  if (raw_packet_loss_rate != 0) {
    _this->_internal_set_packet_loss_rate(from._internal_packet_loss_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_packet_loss_percentage = from._internal_packet_loss_percentage();
  uint32_t raw_packet_loss_percentage;
  memcpy(&raw_packet_loss_percentage, &tmp_packet_loss_percentage, sizeof(tmp_packet_loss_percentage));
  if (raw_packet_loss_percentage != 0) {
    _this->_internal_set_packet_loss_percentage(from._internal_packet_loss_percentage());
  }
  if (from._internal_packets_duplicate() != 0) {
    _this->_internal_set_packets_duplicate(from._internal_packets_duplicate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_duplicate_rate = from._internal_packet_duplicate_rate();
  uint64_t raw_packet_duplicate_rate;
  memcpy(&raw_packet_duplicate_rate, &tmp_packet_duplicate_rate, sizeof(tmp_packet_duplicate_rate));
  if (raw_packet_duplicate_rate != 0) {
    _this->_internal_set_packet_duplicate_rate(from._internal_packet_duplicate_rate());
  }
  if (from._internal_bytes_duplicate() != 0) {
    _this->_internal_set_bytes_duplicate(from._internal_bytes_duplicate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_duplicate = from._internal_bitrate_duplicate();
  uint64_t raw_bitrate_duplicate;
  memcpy(&raw_bitrate_duplicate, &tmp_bitrate_duplicate, sizeof(tmp_bitrate_duplicate));
  if (raw_bitrate_duplicate != 0) {
    _this->_internal_set_bitrate_duplicate(from._internal_bitrate_duplicate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_padding_rate = from._internal_packet_padding_rate();
  uint64_t raw_packet_padding_rate;
  memcpy(&raw_packet_padding_rate, &tmp_packet_padding_rate, sizeof(tmp_packet_padding_rate));
  if (raw_packet_padding_rate != 0) {
    _this->_internal_set_packet_padding_rate(from._internal_packet_padding_rate());
  }
  if (from._internal_bytes_padding() != 0) {
    _this->_internal_set_bytes_padding(from._internal_bytes_padding());
  }
  if (from._internal_packets_padding() != 0) {
    _this->_internal_set_packets_padding(from._internal_packets_padding());
  }
  if (from._internal_packets_out_of_order() != 0) {
    _this->_internal_set_packets_out_of_order(from._internal_packets_out_of_order());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bitrate_padding = from._internal_bitrate_padding();
  uint64_t raw_bitrate_padding;
  memcpy(&raw_bitrate_padding, &tmp_bitrate_padding, sizeof(tmp_bitrate_padding));
  if (raw_bitrate_padding != 0) {
    _this->_internal_set_bitrate_padding(from._internal_bitrate_padding());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frame_rate = from._internal_frame_rate();
  uint64_t raw_frame_rate;
  memcpy(&raw_frame_rate, &tmp_frame_rate, sizeof(tmp_frame_rate));
  if (raw_frame_rate != 0) {
    _this->_internal_set_frame_rate(from._internal_frame_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_current = from._internal_jitter_current();
  uint64_t raw_jitter_current;
  memcpy(&raw_jitter_current, &tmp_jitter_current, sizeof(tmp_jitter_current));
  if (raw_jitter_current != 0) {
    _this->_internal_set_jitter_current(from._internal_jitter_current());
  }
  if (from._internal_frames() != 0) {
    _this->_internal_set_frames(from._internal_frames());
  }
  if (from._internal_nacks() != 0) {
    _this->_internal_set_nacks(from._internal_nacks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jitter_max = from._internal_jitter_max();
  uint64_t raw_jitter_max;
  memcpy(&raw_jitter_max, &tmp_jitter_max, sizeof(tmp_jitter_max));
  if (raw_jitter_max != 0) {
    _this->_internal_set_jitter_max(from._internal_jitter_max());
  }
  if (from._internal_nack_misses() != 0) {
    _this->_internal_set_nack_misses(from._internal_nack_misses());
  }
  if (from._internal_plis() != 0) {
    _this->_internal_set_plis(from._internal_plis());
  }
  if (from._internal_firs() != 0) {
    _this->_internal_set_firs(from._internal_firs());
  }
  if (from._internal_rtt_current() != 0) {
    _this->_internal_set_rtt_current(from._internal_rtt_current());
  }
  if (from._internal_rtt_max() != 0) {
    _this->_internal_set_rtt_max(from._internal_rtt_max());
  }
  if (from._internal_key_frames() != 0) {
    _this->_internal_set_key_frames(from._internal_key_frames());
  }
  if (from._internal_layer_lock_plis() != 0) {
    _this->_internal_set_layer_lock_plis(from._internal_layer_lock_plis());
  }
  if (from._internal_nack_acks() != 0) {
    _this->_internal_set_nack_acks(from._internal_nack_acks());
  }
  if (from._internal_header_bytes() != 0) {
    _this->_internal_set_header_bytes(from._internal_header_bytes());
  }
  if (from._internal_header_bytes_duplicate() != 0) {
    _this->_internal_set_header_bytes_duplicate(from._internal_header_bytes_duplicate());
  }
  if (from._internal_header_bytes_padding() != 0) {
    _this->_internal_set_header_bytes_padding(from._internal_header_bytes_padding());
  }
  if (from._internal_nack_repeated() != 0) {
    _this->_internal_set_nack_repeated(from._internal_nack_repeated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTPStats::CopyFrom(const RTPStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTPStats::IsInitialized() const {
  return true;
}

void RTPStats::InternalSwap(RTPStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gap_histogram_.InternalSwap(&other->_impl_.gap_histogram_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nack_repeated_)
      + sizeof(RTPStats::_impl_.nack_repeated_)
      - PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTPStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[31]);
}

// ===================================================================

class RTCPSenderReportState::_Internal {
 public:
};

RTCPSenderReportState::RTCPSenderReportState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RTCPSenderReportState)
}
RTCPSenderReportState::RTCPSenderReportState(const RTCPSenderReportState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTCPSenderReportState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rtp_timestamp_ext_){}
    , decltype(_impl_.ntp_timestamp_){}
    , decltype(_impl_.rtp_timestamp_){}
    , decltype(_impl_.packets_){}
    , decltype(_impl_.at_){}
    , decltype(_impl_.at_adjusted_){}
    , decltype(_impl_.octets_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rtp_timestamp_ext_, &from._impl_.rtp_timestamp_ext_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.octets_) -
    reinterpret_cast<char*>(&_impl_.rtp_timestamp_ext_)) + sizeof(_impl_.octets_));
  // @@protoc_insertion_point(copy_constructor:livekit.RTCPSenderReportState)
}

inline void RTCPSenderReportState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rtp_timestamp_ext_){uint64_t{0u}}
    , decltype(_impl_.ntp_timestamp_){uint64_t{0u}}
    , decltype(_impl_.rtp_timestamp_){0u}
    , decltype(_impl_.packets_){0u}
    , decltype(_impl_.at_){int64_t{0}}
    , decltype(_impl_.at_adjusted_){int64_t{0}}
    , decltype(_impl_.octets_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RTCPSenderReportState::~RTCPSenderReportState() {
  // @@protoc_insertion_point(destructor:livekit.RTCPSenderReportState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTCPSenderReportState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RTCPSenderReportState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTCPSenderReportState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTCPSenderReportState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rtp_timestamp_ext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.octets_) -
      reinterpret_cast<char*>(&_impl_.rtp_timestamp_ext_)) + sizeof(_impl_.octets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTCPSenderReportState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rtp_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rtp_timestamp_ext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rtp_timestamp_ext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ntp_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ntp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 at_adjusted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.at_adjusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packets = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 octets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTCPSenderReportState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTCPSenderReportState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rtp_timestamp = 1;
  if (this->_internal_rtp_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rtp_timestamp(), target);
  }

  // uint64 rtp_timestamp_ext = 2;
  if (this->_internal_rtp_timestamp_ext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rtp_timestamp_ext(), target);
  }

  // uint64 ntp_timestamp = 3;
  if (this->_internal_ntp_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ntp_timestamp(), target);
  }

  // int64 at = 4;
  if (this->_internal_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_at(), target);
  }

  // int64 at_adjusted = 5;
  if (this->_internal_at_adjusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_at_adjusted(), target);
  }

  // uint32 packets = 6;
  if (this->_internal_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_packets(), target);
  }

  // uint64 octets = 7;
  if (this->_internal_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_octets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTCPSenderReportState)
  return target;
}

size_t RTCPSenderReportState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RTCPSenderReportState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rtp_timestamp_ext = 2;
  if (this->_internal_rtp_timestamp_ext() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rtp_timestamp_ext());
  }

  // uint64 ntp_timestamp = 3;
  if (this->_internal_ntp_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ntp_timestamp());
  }

  // uint32 rtp_timestamp = 1;
  if (this->_internal_rtp_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtp_timestamp());
  }

  // uint32 packets = 6;
  if (this->_internal_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packets());
  }

  // int64 at = 4;
  if (this->_internal_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_at());
  }

  // int64 at_adjusted = 5;
  if (this->_internal_at_adjusted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_at_adjusted());
  }

  // uint64 octets = 7;
  if (this->_internal_octets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_octets());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTCPSenderReportState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTCPSenderReportState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTCPSenderReportState::GetClassData() const { return &_class_data_; }


void RTCPSenderReportState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTCPSenderReportState*>(&to_msg);
  auto& from = static_cast<const RTCPSenderReportState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTCPSenderReportState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rtp_timestamp_ext() != 0) {
    _this->_internal_set_rtp_timestamp_ext(from._internal_rtp_timestamp_ext());
  }
  if (from._internal_ntp_timestamp() != 0) {
    _this->_internal_set_ntp_timestamp(from._internal_ntp_timestamp());
  }
  if (from._internal_rtp_timestamp() != 0) {
    _this->_internal_set_rtp_timestamp(from._internal_rtp_timestamp());
  }
  if (from._internal_packets() != 0) {
    _this->_internal_set_packets(from._internal_packets());
  }
  if (from._internal_at() != 0) {
    _this->_internal_set_at(from._internal_at());
  }
  if (from._internal_at_adjusted() != 0) {
    _this->_internal_set_at_adjusted(from._internal_at_adjusted());
  }
  if (from._internal_octets() != 0) {
    _this->_internal_set_octets(from._internal_octets());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTCPSenderReportState::CopyFrom(const RTCPSenderReportState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTCPSenderReportState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCPSenderReportState::IsInitialized() const {
  return true;
}

void RTCPSenderReportState::InternalSwap(RTCPSenderReportState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.octets_)
      + sizeof(RTCPSenderReportState::_impl_.octets_)
      - PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.rtp_timestamp_ext_)>(
          reinterpret_cast<char*>(&_impl_.rtp_timestamp_ext_),
          reinterpret_cast<char*>(&other->_impl_.rtp_timestamp_ext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTCPSenderReportState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[32]);
}

// ===================================================================

class RTPForwarderState::_Internal {
 public:
  static const ::livekit::RTPMungerState& rtp_munger(const RTPForwarderState* msg);
  static const ::livekit::VP8MungerState& vp8_munger(const RTPForwarderState* msg);
};

const ::livekit::RTPMungerState&
RTPForwarderState::_Internal::rtp_munger(const RTPForwarderState* msg) {
  return *msg->_impl_.rtp_munger_;
}
const ::livekit::VP8MungerState&
RTPForwarderState::_Internal::vp8_munger(const RTPForwarderState* msg) {
  return *msg->_impl_.codec_munger_.vp8_munger_;
}
void RTPForwarderState::set_allocated_vp8_munger(::livekit::VP8MungerState* vp8_munger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_codec_munger();
  if (vp8_munger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vp8_munger);
    if (message_arena != submessage_arena) {
      vp8_munger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vp8_munger, submessage_arena);
    }
    set_has_vp8_munger();
    _impl_.codec_munger_.vp8_munger_ = vp8_munger;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPForwarderState.vp8_munger)
}
RTPForwarderState::RTPForwarderState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPForwarderState)
}
RTPForwarderState::RTPForwarderState(const RTPForwarderState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTPForwarderState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_report_state_){from._impl_.sender_report_state_}
    , decltype(_impl_.rtp_munger_){nullptr}
    , decltype(_impl_.started_){}
    , decltype(_impl_.reference_layer_spatial_){}
    , decltype(_impl_.pre_start_time_){}
    , decltype(_impl_.ext_first_timestamp_){}
    , decltype(_impl_.dummy_start_timestamp_offset_){}
    , decltype(_impl_.codec_munger_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtp_munger()) {
    _this->_impl_.rtp_munger_ = new ::livekit::RTPMungerState(*from._impl_.rtp_munger_);
  }
  ::memcpy(&_impl_.started_, &from._impl_.started_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dummy_start_timestamp_offset_) -
    reinterpret_cast<char*>(&_impl_.started_)) + sizeof(_impl_.dummy_start_timestamp_offset_));
  clear_has_codec_munger();
  switch (from.codec_munger_case()) {
    case kVp8Munger: {
      _this->_internal_mutable_vp8_munger()->::livekit::VP8MungerState::MergeFrom(
          from._internal_vp8_munger());
      break;
    }
    case CODEC_MUNGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RTPForwarderState)
}

inline void RTPForwarderState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_report_state_){arena}
    , decltype(_impl_.rtp_munger_){nullptr}
    , decltype(_impl_.started_){false}
    , decltype(_impl_.reference_layer_spatial_){0}
    , decltype(_impl_.pre_start_time_){int64_t{0}}
    , decltype(_impl_.ext_first_timestamp_){uint64_t{0u}}
    , decltype(_impl_.dummy_start_timestamp_offset_){uint64_t{0u}}
    , decltype(_impl_.codec_munger_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_codec_munger();
}

RTPForwarderState::~RTPForwarderState() {
  // @@protoc_insertion_point(destructor:livekit.RTPForwarderState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTPForwarderState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_report_state_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.rtp_munger_;
  if (has_codec_munger()) {
    clear_codec_munger();
  }
}

void RTPForwarderState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTPForwarderState::clear_codec_munger() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RTPForwarderState)
  switch (codec_munger_case()) {
    case kVp8Munger: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.codec_munger_.vp8_munger_;
      }
      break;
    }
    case CODEC_MUNGER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CODEC_MUNGER_NOT_SET;
}


void RTPForwarderState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPForwarderState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_report_state_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.rtp_munger_ != nullptr) {
    delete _impl_.rtp_munger_;
  }
  _impl_.rtp_munger_ = nullptr;
  ::memset(&_impl_.started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dummy_start_timestamp_offset_) -
      reinterpret_cast<char*>(&_impl_.started_)) + sizeof(_impl_.dummy_start_timestamp_offset_));
  clear_codec_munger();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTPForwarderState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool started = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reference_layer_spatial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reference_layer_spatial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pre_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pre_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ext_first_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ext_first_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dummy_start_timestamp_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dummy_start_timestamp_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RTPMungerState rtp_munger = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtp_munger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.VP8MungerState vp8_munger = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vp8_munger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sender_report_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTPForwarderState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPForwarderState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool started = 1;
  if (this->_internal_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_started(), target);
  }

  // int32 reference_layer_spatial = 2;
  if (this->_internal_reference_layer_spatial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reference_layer_spatial(), target);
  }

  // int64 pre_start_time = 3;
  if (this->_internal_pre_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_pre_start_time(), target);
  }

  // uint64 ext_first_timestamp = 4;
  if (this->_internal_ext_first_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ext_first_timestamp(), target);
  }

  // uint64 dummy_start_timestamp_offset = 5;
  if (this->_internal_dummy_start_timestamp_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_dummy_start_timestamp_offset(), target);
  }

  // .livekit.RTPMungerState rtp_munger = 6;
  if (this->_internal_has_rtp_munger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::rtp_munger(this),
        _Internal::rtp_munger(this).GetCachedSize(), target, stream);
  }

  // .livekit.VP8MungerState vp8_munger = 7;
  if (_internal_has_vp8_munger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vp8_munger(this),
        _Internal::vp8_munger(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sender_report_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_sender_report_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPForwarderState)
  return target;
}

size_t RTPForwarderState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RTPForwarderState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
  total_size += 1UL * this->_internal_sender_report_state_size();
  for (const auto& msg : this->_impl_.sender_report_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .livekit.RTPMungerState rtp_munger = 6;
  if (this->_internal_has_rtp_munger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtp_munger_);
  }

  // bool started = 1;
  if (this->_internal_started() != 0) {
    total_size += 1 + 1;
  }

  // int32 reference_layer_spatial = 2;
  if (this->_internal_reference_layer_spatial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reference_layer_spatial());
  }

  // int64 pre_start_time = 3;
  if (this->_internal_pre_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pre_start_time());
  }

  // uint64 ext_first_timestamp = 4;
  if (this->_internal_ext_first_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ext_first_timestamp());
  }

  // uint64 dummy_start_timestamp_offset = 5;
  if (this->_internal_dummy_start_timestamp_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dummy_start_timestamp_offset());
  }

  switch (codec_munger_case()) {
    // .livekit.VP8MungerState vp8_munger = 7;
    case kVp8Munger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.codec_munger_.vp8_munger_);
      break;
    }
    case CODEC_MUNGER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTPForwarderState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTPForwarderState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTPForwarderState::GetClassData() const { return &_class_data_; }


void RTPForwarderState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTPForwarderState*>(&to_msg);
  auto& from = static_cast<const RTPForwarderState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPForwarderState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sender_report_state_.MergeFrom(from._impl_.sender_report_state_);
  if (from._internal_has_rtp_munger()) {
    _this->_internal_mutable_rtp_munger()->::livekit::RTPMungerState::MergeFrom(
        from._internal_rtp_munger());
  }
  if (from._internal_started() != 0) {
    _this->_internal_set_started(from._internal_started());
  }
  if (from._internal_reference_layer_spatial() != 0) {
    _this->_internal_set_reference_layer_spatial(from._internal_reference_layer_spatial());
  }
  if (from._internal_pre_start_time() != 0) {
    _this->_internal_set_pre_start_time(from._internal_pre_start_time());
  }
  if (from._internal_ext_first_timestamp() != 0) {
    _this->_internal_set_ext_first_timestamp(from._internal_ext_first_timestamp());
  }
  if (from._internal_dummy_start_timestamp_offset() != 0) {
    _this->_internal_set_dummy_start_timestamp_offset(from._internal_dummy_start_timestamp_offset());
  }
  switch (from.codec_munger_case()) {
    case kVp8Munger: {
      _this->_internal_mutable_vp8_munger()->::livekit::VP8MungerState::MergeFrom(
          from._internal_vp8_munger());
      break;
    }
    case CODEC_MUNGER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTPForwarderState::CopyFrom(const RTPForwarderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPForwarderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTPForwarderState::IsInitialized() const {
  return true;
}

void RTPForwarderState::InternalSwap(RTPForwarderState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sender_report_state_.InternalSwap(&other->_impl_.sender_report_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.dummy_start_timestamp_offset_)
      + sizeof(RTPForwarderState::_impl_.dummy_start_timestamp_offset_)
      - PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.rtp_munger_)>(
          reinterpret_cast<char*>(&_impl_.rtp_munger_),
          reinterpret_cast<char*>(&other->_impl_.rtp_munger_));
  swap(_impl_.codec_munger_, other->_impl_.codec_munger_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTPForwarderState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[33]);
}

// ===================================================================

class RTPMungerState::_Internal {
 public:
};

RTPMungerState::RTPMungerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPMungerState)
}
RTPMungerState::RTPMungerState(const RTPMungerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTPMungerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ext_last_sequence_number_){}
    , decltype(_impl_.ext_second_last_sequence_number_){}
    , decltype(_impl_.ext_last_timestamp_){}
    , decltype(_impl_.ext_second_last_timestamp_){}
    , decltype(_impl_.last_marker_){}
    , decltype(_impl_.second_last_marker_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ext_last_sequence_number_, &from._impl_.ext_last_sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_last_marker_) -
    reinterpret_cast<char*>(&_impl_.ext_last_sequence_number_)) + sizeof(_impl_.second_last_marker_));
  // @@protoc_insertion_point(copy_constructor:livekit.RTPMungerState)
}

inline void RTPMungerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ext_last_sequence_number_){uint64_t{0u}}
    , decltype(_impl_.ext_second_last_sequence_number_){uint64_t{0u}}
    , decltype(_impl_.ext_last_timestamp_){uint64_t{0u}}
    , decltype(_impl_.ext_second_last_timestamp_){uint64_t{0u}}
    , decltype(_impl_.last_marker_){false}
    , decltype(_impl_.second_last_marker_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RTPMungerState::~RTPMungerState() {
  // @@protoc_insertion_point(destructor:livekit.RTPMungerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTPMungerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RTPMungerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTPMungerState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPMungerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ext_last_sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.second_last_marker_) -
      reinterpret_cast<char*>(&_impl_.ext_last_sequence_number_)) + sizeof(_impl_.second_last_marker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTPMungerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ext_last_sequence_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ext_last_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ext_second_last_sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ext_second_last_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ext_last_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ext_last_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ext_second_last_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ext_second_last_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool last_marker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.last_marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool second_last_marker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.second_last_marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTPMungerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPMungerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ext_last_sequence_number = 1;
  if (this->_internal_ext_last_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ext_last_sequence_number(), target);
  }

  // uint64 ext_second_last_sequence_number = 2;
  if (this->_internal_ext_second_last_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ext_second_last_sequence_number(), target);
  }

  // uint64 ext_last_timestamp = 3;
  if (this->_internal_ext_last_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ext_last_timestamp(), target);
  }

  // uint64 ext_second_last_timestamp = 4;
  if (this->_internal_ext_second_last_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ext_second_last_timestamp(), target);
  }

  // bool last_marker = 5;
  if (this->_internal_last_marker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_last_marker(), target);
  }

  // bool second_last_marker = 6;
  if (this->_internal_second_last_marker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_second_last_marker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPMungerState)
  return target;
}

size_t RTPMungerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RTPMungerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ext_last_sequence_number = 1;
  if (this->_internal_ext_last_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ext_last_sequence_number());
  }

  // uint64 ext_second_last_sequence_number = 2;
  if (this->_internal_ext_second_last_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ext_second_last_sequence_number());
  }

  // uint64 ext_last_timestamp = 3;
  if (this->_internal_ext_last_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ext_last_timestamp());
  }

  // uint64 ext_second_last_timestamp = 4;
  if (this->_internal_ext_second_last_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ext_second_last_timestamp());
  }

  // bool last_marker = 5;
  if (this->_internal_last_marker() != 0) {
    total_size += 1 + 1;
  }

  // bool second_last_marker = 6;
  if (this->_internal_second_last_marker() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTPMungerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTPMungerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTPMungerState::GetClassData() const { return &_class_data_; }


void RTPMungerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTPMungerState*>(&to_msg);
  auto& from = static_cast<const RTPMungerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPMungerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ext_last_sequence_number() != 0) {
    _this->_internal_set_ext_last_sequence_number(from._internal_ext_last_sequence_number());
  }
  if (from._internal_ext_second_last_sequence_number() != 0) {
    _this->_internal_set_ext_second_last_sequence_number(from._internal_ext_second_last_sequence_number());
  }
  if (from._internal_ext_last_timestamp() != 0) {
    _this->_internal_set_ext_last_timestamp(from._internal_ext_last_timestamp());
  }
  if (from._internal_ext_second_last_timestamp() != 0) {
    _this->_internal_set_ext_second_last_timestamp(from._internal_ext_second_last_timestamp());
  }
  if (from._internal_last_marker() != 0) {
    _this->_internal_set_last_marker(from._internal_last_marker());
  }
  if (from._internal_second_last_marker() != 0) {
    _this->_internal_set_second_last_marker(from._internal_second_last_marker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTPMungerState::CopyFrom(const RTPMungerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPMungerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTPMungerState::IsInitialized() const {
  return true;
}

void RTPMungerState::InternalSwap(RTPMungerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.second_last_marker_)
      + sizeof(RTPMungerState::_impl_.second_last_marker_)
      - PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_last_sequence_number_)>(
          reinterpret_cast<char*>(&_impl_.ext_last_sequence_number_),
          reinterpret_cast<char*>(&other->_impl_.ext_last_sequence_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTPMungerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[34]);
}

// ===================================================================

class VP8MungerState::_Internal {
 public:
};

VP8MungerState::VP8MungerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.VP8MungerState)
}
VP8MungerState::VP8MungerState(const VP8MungerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VP8MungerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ext_last_picture_id_){}
    , decltype(_impl_.last_tl0_pic_idx_){}
    , decltype(_impl_.picture_id_used_){}
    , decltype(_impl_.tl0_pic_idx_used_){}
    , decltype(_impl_.tid_used_){}
    , decltype(_impl_.key_idx_used_){}
    , decltype(_impl_.last_key_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ext_last_picture_id_, &from._impl_.ext_last_picture_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_key_idx_) -
    reinterpret_cast<char*>(&_impl_.ext_last_picture_id_)) + sizeof(_impl_.last_key_idx_));
  // @@protoc_insertion_point(copy_constructor:livekit.VP8MungerState)
}

inline void VP8MungerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ext_last_picture_id_){0}
    , decltype(_impl_.last_tl0_pic_idx_){0u}
    , decltype(_impl_.picture_id_used_){false}
    , decltype(_impl_.tl0_pic_idx_used_){false}
    , decltype(_impl_.tid_used_){false}
    , decltype(_impl_.key_idx_used_){false}
    , decltype(_impl_.last_key_idx_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VP8MungerState::~VP8MungerState() {
  // @@protoc_insertion_point(destructor:livekit.VP8MungerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VP8MungerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VP8MungerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VP8MungerState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VP8MungerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ext_last_picture_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_key_idx_) -
      reinterpret_cast<char*>(&_impl_.ext_last_picture_id_)) + sizeof(_impl_.last_key_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VP8MungerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ext_last_picture_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ext_last_picture_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool picture_id_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.picture_id_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_tl0_pic_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_tl0_pic_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tl0_pic_idx_used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tl0_pic_idx_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tid_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tid_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_key_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.last_key_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool key_idx_used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.key_idx_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VP8MungerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VP8MungerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ext_last_picture_id = 1;
  if (this->_internal_ext_last_picture_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ext_last_picture_id(), target);
  }

  // bool picture_id_used = 2;
  if (this->_internal_picture_id_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_picture_id_used(), target);
  }

  // uint32 last_tl0_pic_idx = 3;
  if (this->_internal_last_tl0_pic_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_tl0_pic_idx(), target);
  }

  // bool tl0_pic_idx_used = 4;
  if (this->_internal_tl0_pic_idx_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_tl0_pic_idx_used(), target);
  }

  // bool tid_used = 5;
  if (this->_internal_tid_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_tid_used(), target);
  }

  // uint32 last_key_idx = 6;
  if (this->_internal_last_key_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_key_idx(), target);
  }

  // bool key_idx_used = 7;
  if (this->_internal_key_idx_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_key_idx_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VP8MungerState)
  return target;
}

size_t VP8MungerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.VP8MungerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ext_last_picture_id = 1;
  if (this->_internal_ext_last_picture_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ext_last_picture_id());
  }

  // uint32 last_tl0_pic_idx = 3;
  if (this->_internal_last_tl0_pic_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_tl0_pic_idx());
  }

  // bool picture_id_used = 2;
  if (this->_internal_picture_id_used() != 0) {
    total_size += 1 + 1;
  }

  // bool tl0_pic_idx_used = 4;
  if (this->_internal_tl0_pic_idx_used() != 0) {
    total_size += 1 + 1;
  }

  // bool tid_used = 5;
  if (this->_internal_tid_used() != 0) {
    total_size += 1 + 1;
  }

  // bool key_idx_used = 7;
  if (this->_internal_key_idx_used() != 0) {
    total_size += 1 + 1;
  }

  // uint32 last_key_idx = 6;
  if (this->_internal_last_key_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_key_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VP8MungerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VP8MungerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VP8MungerState::GetClassData() const { return &_class_data_; }


void VP8MungerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VP8MungerState*>(&to_msg);
  auto& from = static_cast<const VP8MungerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.VP8MungerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ext_last_picture_id() != 0) {
    _this->_internal_set_ext_last_picture_id(from._internal_ext_last_picture_id());
  }
  if (from._internal_last_tl0_pic_idx() != 0) {
    _this->_internal_set_last_tl0_pic_idx(from._internal_last_tl0_pic_idx());
  }
  if (from._internal_picture_id_used() != 0) {
    _this->_internal_set_picture_id_used(from._internal_picture_id_used());
  }
  if (from._internal_tl0_pic_idx_used() != 0) {
    _this->_internal_set_tl0_pic_idx_used(from._internal_tl0_pic_idx_used());
  }
  if (from._internal_tid_used() != 0) {
    _this->_internal_set_tid_used(from._internal_tid_used());
  }
  if (from._internal_key_idx_used() != 0) {
    _this->_internal_set_key_idx_used(from._internal_key_idx_used());
  }
  if (from._internal_last_key_idx() != 0) {
    _this->_internal_set_last_key_idx(from._internal_last_key_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VP8MungerState::CopyFrom(const VP8MungerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VP8MungerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VP8MungerState::IsInitialized() const {
  return true;
}

void VP8MungerState::InternalSwap(VP8MungerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.last_key_idx_)
      + sizeof(VP8MungerState::_impl_.last_key_idx_)
      - PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.ext_last_picture_id_)>(
          reinterpret_cast<char*>(&_impl_.ext_last_picture_id_),
          reinterpret_cast<char*>(&other->_impl_.ext_last_picture_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VP8MungerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[35]);
}

// ===================================================================

class TimedVersion::_Internal {
 public:
};

TimedVersion::TimedVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TimedVersion)
}
TimedVersion::TimedVersion(const TimedVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimedVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unix_micro_){}
    , decltype(_impl_.ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unix_micro_, &from._impl_.unix_micro_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ticks_) -
    reinterpret_cast<char*>(&_impl_.unix_micro_)) + sizeof(_impl_.ticks_));
  // @@protoc_insertion_point(copy_constructor:livekit.TimedVersion)
}

inline void TimedVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unix_micro_){int64_t{0}}
    , decltype(_impl_.ticks_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimedVersion::~TimedVersion() {
  // @@protoc_insertion_point(destructor:livekit.TimedVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimedVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimedVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimedVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TimedVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.unix_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ticks_) -
      reinterpret_cast<char*>(&_impl_.unix_micro_)) + sizeof(_impl_.ticks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 unix_micro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.unix_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimedVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TimedVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 unix_micro = 1;
  if (this->_internal_unix_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unix_micro(), target);
  }

  // int32 ticks = 2;
  if (this->_internal_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TimedVersion)
  return target;
}

size_t TimedVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TimedVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 unix_micro = 1;
  if (this->_internal_unix_micro() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_micro());
  }

  // int32 ticks = 2;
  if (this->_internal_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimedVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimedVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimedVersion::GetClassData() const { return &_class_data_; }


void TimedVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimedVersion*>(&to_msg);
  auto& from = static_cast<const TimedVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TimedVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unix_micro() != 0) {
    _this->_internal_set_unix_micro(from._internal_unix_micro());
  }
  if (from._internal_ticks() != 0) {
    _this->_internal_set_ticks(from._internal_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimedVersion::CopyFrom(const TimedVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TimedVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedVersion::IsInitialized() const {
  return true;
}

void TimedVersion::InternalSwap(TimedVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.ticks_)
      + sizeof(TimedVersion::_impl_.ticks_)
      - PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.unix_micro_)>(
          reinterpret_cast<char*>(&_impl_.unix_micro_),
          reinterpret_cast<char*>(&other->_impl_.unix_micro_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[36]);
}

// ===================================================================

class DataStream_TextHeader::_Internal {
 public:
};

DataStream_TextHeader::DataStream_TextHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.TextHeader)
}
DataStream_TextHeader::DataStream_TextHeader(const DataStream_TextHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_TextHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attached_stream_ids_){from._impl_.attached_stream_ids_}
    , decltype(_impl_.reply_to_stream_id_){}
    , decltype(_impl_.operation_type_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.generated_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reply_to_stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_to_stream_id().empty()) {
    _this->_impl_.reply_to_stream_id_.Set(from._internal_reply_to_stream_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.operation_type_, &from._impl_.operation_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.generated_) -
    reinterpret_cast<char*>(&_impl_.operation_type_)) + sizeof(_impl_.generated_));
  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.TextHeader)
}

inline void DataStream_TextHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attached_stream_ids_){arena}
    , decltype(_impl_.reply_to_stream_id_){}
    , decltype(_impl_.operation_type_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.generated_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reply_to_stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_TextHeader::~DataStream_TextHeader() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.TextHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStream_TextHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attached_stream_ids_.~RepeatedPtrField();
  _impl_.reply_to_stream_id_.Destroy();
}

void DataStream_TextHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_TextHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.TextHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attached_stream_ids_.Clear();
  _impl_.reply_to_stream_id_.ClearToEmpty();
  ::memset(&_impl_.operation_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.generated_) -
      reinterpret_cast<char*>(&_impl_.operation_type_)) + sizeof(_impl_.generated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_TextHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.DataStream.OperationType operation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation_type(static_cast<::livekit::DataStream_OperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reply_to_stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reply_to_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.TextHeader.reply_to_stream_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string attached_stream_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attached_stream_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.TextHeader.attached_stream_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool generated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_TextHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.TextHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.DataStream.OperationType operation_type = 1;
  if (this->_internal_operation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation_type(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // string reply_to_stream_id = 3;
  if (!this->_internal_reply_to_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_stream_id().data(), static_cast<int>(this->_internal_reply_to_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.TextHeader.reply_to_stream_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reply_to_stream_id(), target);
  }

  // repeated string attached_stream_ids = 4;
  for (int i = 0, n = this->_internal_attached_stream_ids_size(); i < n; i++) {
    const auto& s = this->_internal_attached_stream_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.TextHeader.attached_stream_ids");
    target = stream->WriteString(4, s, target);
  }

  // bool generated = 5;
  if (this->_internal_generated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_generated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.TextHeader)
  return target;
}

size_t DataStream_TextHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.TextHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attached_stream_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attached_stream_ids_.size());
  for (int i = 0, n = _impl_.attached_stream_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attached_stream_ids_.Get(i));
  }

  // string reply_to_stream_id = 3;
  if (!this->_internal_reply_to_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_stream_id());
  }

  // .livekit.DataStream.OperationType operation_type = 1;
  if (this->_internal_operation_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_type());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // bool generated = 5;
  if (this->_internal_generated() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_TextHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_TextHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_TextHeader::GetClassData() const { return &_class_data_; }


void DataStream_TextHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_TextHeader*>(&to_msg);
  auto& from = static_cast<const DataStream_TextHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.TextHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attached_stream_ids_.MergeFrom(from._impl_.attached_stream_ids_);
  if (!from._internal_reply_to_stream_id().empty()) {
    _this->_internal_set_reply_to_stream_id(from._internal_reply_to_stream_id());
  }
  if (from._internal_operation_type() != 0) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_generated() != 0) {
    _this->_internal_set_generated(from._internal_generated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_TextHeader::CopyFrom(const DataStream_TextHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.TextHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_TextHeader::IsInitialized() const {
  return true;
}

void DataStream_TextHeader::InternalSwap(DataStream_TextHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attached_stream_ids_.InternalSwap(&other->_impl_.attached_stream_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_stream_id_, lhs_arena,
      &other->_impl_.reply_to_stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.generated_)
      + sizeof(DataStream_TextHeader::_impl_.generated_)
      - PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.operation_type_)>(
          reinterpret_cast<char*>(&_impl_.operation_type_),
          reinterpret_cast<char*>(&other->_impl_.operation_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_TextHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[37]);
}

// ===================================================================

class DataStream_ByteHeader::_Internal {
 public:
};

DataStream_ByteHeader::DataStream_ByteHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.ByteHeader)
}
DataStream_ByteHeader::DataStream_ByteHeader(const DataStream_ByteHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_ByteHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.ByteHeader)
}

inline void DataStream_ByteHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_ByteHeader::~DataStream_ByteHeader() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.ByteHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStream_ByteHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DataStream_ByteHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_ByteHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.ByteHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_ByteHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.ByteHeader.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_ByteHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.ByteHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.ByteHeader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.ByteHeader)
  return target;
}

size_t DataStream_ByteHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.ByteHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_ByteHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_ByteHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_ByteHeader::GetClassData() const { return &_class_data_; }


void DataStream_ByteHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_ByteHeader*>(&to_msg);
  auto& from = static_cast<const DataStream_ByteHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.ByteHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_ByteHeader::CopyFrom(const DataStream_ByteHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.ByteHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_ByteHeader::IsInitialized() const {
  return true;
}

void DataStream_ByteHeader::InternalSwap(DataStream_ByteHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_ByteHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[38]);
}

// ===================================================================

DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse() {}
DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataStream_Header_AttributesEntry_DoNotUse::MergeFrom(const DataStream_Header_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Header_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[39]);
}

// ===================================================================

class DataStream_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_Header>()._impl_._has_bits_);
  static void set_has_total_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::DataStream_TextHeader& text_header(const DataStream_Header* msg);
  static const ::livekit::DataStream_ByteHeader& byte_header(const DataStream_Header* msg);
};

const ::livekit::DataStream_TextHeader&
DataStream_Header::_Internal::text_header(const DataStream_Header* msg) {
  return *msg->_impl_.content_header_.text_header_;
}
const ::livekit::DataStream_ByteHeader&
DataStream_Header::_Internal::byte_header(const DataStream_Header* msg) {
  return *msg->_impl_.content_header_.byte_header_;
}
void DataStream_Header::set_allocated_text_header(::livekit::DataStream_TextHeader* text_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content_header();
  if (text_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text_header);
    if (message_arena != submessage_arena) {
      text_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_header, submessage_arena);
    }
    set_has_text_header();
    _impl_.content_header_.text_header_ = text_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.text_header)
}
void DataStream_Header::set_allocated_byte_header(::livekit::DataStream_ByteHeader* byte_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content_header();
  if (byte_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(byte_header);
    if (message_arena != submessage_arena) {
      byte_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, byte_header, submessage_arena);
    }
    set_has_byte_header();
    _impl_.content_header_.byte_header_ = byte_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.byte_header)
}
DataStream_Header::DataStream_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DataStream_Header::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.Header)
}
DataStream_Header::DataStream_Header(const DataStream_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.total_length_){}
    , decltype(_impl_.encryption_type_){}
    , decltype(_impl_.content_header_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encryption_type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.encryption_type_));
  clear_has_content_header();
  switch (from.content_header_case()) {
    case kTextHeader: {
      _this->_internal_mutable_text_header()->::livekit::DataStream_TextHeader::MergeFrom(
          from._internal_text_header());
      break;
    }
    case kByteHeader: {
      _this->_internal_mutable_byte_header()->::livekit::DataStream_ByteHeader::MergeFrom(
          from._internal_byte_header());
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.Header)
}

inline void DataStream_Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.total_length_){uint64_t{0u}}
    , decltype(_impl_.encryption_type_){0}
    , decltype(_impl_.content_header_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_content_header();
}

DataStream_Header::~DataStream_Header() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DataStream_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.stream_id_.Destroy();
  _impl_.topic_.Destroy();
  _impl_.mime_type_.Destroy();
  if (has_content_header()) {
    clear_content_header();
  }
}

void DataStream_Header::ArenaDtor(void* object) {
  DataStream_Header* _this = reinterpret_cast< DataStream_Header* >(object);
  _this->_impl_.attributes_.Destruct();
}
void DataStream_Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_Header::clear_content_header() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DataStream.Header)
  switch (content_header_case()) {
    case kTextHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_header_.text_header_;
      }
      break;
    }
    case kByteHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_header_.byte_header_;
      }
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_HEADER_NOT_SET;
}


void DataStream_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.topic_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _impl_.total_length_ = uint64_t{0u};
  _impl_.encryption_type_ = 0;
  clear_content_header();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.Header.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.Header.topic"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.Header.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_total_length(&has_bits);
          _impl_.total_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.Encryption.Type encryption_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption_type(static_cast<::livekit::Encryption_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.DataStream.TextHeader text_header = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DataStream.ByteHeader byte_header = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_byte_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.Header.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string topic = 3;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.Header.topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_topic(), target);
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.Header.mime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mime_type(), target);
  }

  // optional uint64 total_length = 5;
  if (_internal_has_total_length()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_total_length(), target);
  }

  // .livekit.Encryption.Type encryption_type = 7;
  if (this->_internal_encryption_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_encryption_type(), target);
  }

  // map<string, string> attributes = 8;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DataStream_Header_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.DataStream.Header.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.DataStream.Header.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .livekit.DataStream.TextHeader text_header = 9;
  if (_internal_has_text_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::text_header(this),
        _Internal::text_header(this).GetCachedSize(), target, stream);
  }

  // .livekit.DataStream.ByteHeader byte_header = 10;
  if (_internal_has_byte_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::byte_header(this),
        _Internal::byte_header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.Header)
  return target;
}

size_t DataStream_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += DataStream_Header_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string topic = 3;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // optional uint64 total_length = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_length());
  }

  // .livekit.Encryption.Type encryption_type = 7;
  if (this->_internal_encryption_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption_type());
  }

  switch (content_header_case()) {
    // .livekit.DataStream.TextHeader text_header = 9;
    case kTextHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_header_.text_header_);
      break;
    }
    // .livekit.DataStream.ByteHeader byte_header = 10;
    case kByteHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_header_.byte_header_);
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_Header::GetClassData() const { return &_class_data_; }


void DataStream_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_Header*>(&to_msg);
  auto& from = static_cast<const DataStream_Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_has_total_length()) {
    _this->_internal_set_total_length(from._internal_total_length());
  }
  if (from._internal_encryption_type() != 0) {
    _this->_internal_set_encryption_type(from._internal_encryption_type());
  }
  switch (from.content_header_case()) {
    case kTextHeader: {
      _this->_internal_mutable_text_header()->::livekit::DataStream_TextHeader::MergeFrom(
          from._internal_text_header());
      break;
    }
    case kByteHeader: {
      _this->_internal_mutable_byte_header()->::livekit::DataStream_ByteHeader::MergeFrom(
          from._internal_byte_header());
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Header::CopyFrom(const DataStream_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_Header::IsInitialized() const {
  return true;
}

void DataStream_Header::InternalSwap(DataStream_Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.encryption_type_)
      + sizeof(DataStream_Header::_impl_.encryption_type_)
      - PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.content_header_, other->_impl_.content_header_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[40]);
}

// ===================================================================

class DataStream_Chunk::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_Chunk>()._impl_._has_bits_);
  static void set_has_iv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataStream_Chunk::DataStream_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.Chunk)
}
DataStream_Chunk::DataStream_Chunk(const DataStream_Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_Chunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.chunk_index_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_iv()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chunk_index_, &from._impl_.chunk_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.chunk_index_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.Chunk)
}

inline void DataStream_Chunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.chunk_index_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_Chunk::~DataStream_Chunk() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.Chunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStream_Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.iv_.Destroy();
}

void DataStream_Chunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.iv_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.chunk_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.chunk_index_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_Chunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.Chunk.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 chunk_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chunk_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes iv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.Chunk.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // uint64 chunk_index = 2;
  if (this->_internal_chunk_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chunk_index(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  // optional bytes iv = 5;
  if (_internal_has_iv()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.Chunk)
  return target;
}

size_t DataStream_Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // optional bytes iv = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // uint64 chunk_index = 2;
  if (this->_internal_chunk_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chunk_index());
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_Chunk::GetClassData() const { return &_class_data_; }


void DataStream_Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_Chunk*>(&to_msg);
  auto& from = static_cast<const DataStream_Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.Chunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_iv()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (from._internal_chunk_index() != 0) {
    _this->_internal_set_chunk_index(from._internal_chunk_index());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Chunk::CopyFrom(const DataStream_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_Chunk::IsInitialized() const {
  return true;
}

void DataStream_Chunk::InternalSwap(DataStream_Chunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.version_)
      + sizeof(DataStream_Chunk::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.chunk_index_)>(
          reinterpret_cast<char*>(&_impl_.chunk_index_),
          reinterpret_cast<char*>(&other->_impl_.chunk_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Chunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[41]);
}

// ===================================================================

DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse() {}
DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataStream_Trailer_AttributesEntry_DoNotUse::MergeFrom(const DataStream_Trailer_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Trailer_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[42]);
}

// ===================================================================

class DataStream_Trailer::_Internal {
 public:
};

DataStream_Trailer::DataStream_Trailer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DataStream_Trailer::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.Trailer)
}
DataStream_Trailer::DataStream_Trailer(const DataStream_Trailer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_Trailer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.Trailer)
}

inline void DataStream_Trailer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_Trailer::~DataStream_Trailer() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.Trailer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DataStream_Trailer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.stream_id_.Destroy();
  _impl_.reason_.Destroy();
}

void DataStream_Trailer::ArenaDtor(void* object) {
  DataStream_Trailer* _this = reinterpret_cast< DataStream_Trailer* >(object);
  _this->_impl_.attributes_.Destruct();
}
void DataStream_Trailer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_Trailer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.Trailer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_Trailer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.Trailer.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataStream.Trailer.reason"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_Trailer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.Trailer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.Trailer.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataStream.Trailer.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // map<string, string> attributes = 3;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DataStream_Trailer_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.DataStream.Trailer.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.DataStream.Trailer.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.Trailer)
  return target;
}

size_t DataStream_Trailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.Trailer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += DataStream_Trailer_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_Trailer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_Trailer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_Trailer::GetClassData() const { return &_class_data_; }


void DataStream_Trailer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_Trailer*>(&to_msg);
  auto& from = static_cast<const DataStream_Trailer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.Trailer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Trailer::CopyFrom(const DataStream_Trailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.Trailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_Trailer::IsInitialized() const {
  return true;
}

void DataStream_Trailer::InternalSwap(DataStream_Trailer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Trailer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[43]);
}

// ===================================================================

class DataStream::_Internal {
 public:
};

DataStream::DataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream)
}
DataStream::DataStream(const DataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DataStream* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.DataStream)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DataStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmodels_2eproto_getter, &descriptor_table_livekit_5fmodels_2eproto_once,
      file_level_metadata_livekit_5fmodels_2eproto[44]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::Pagination*
Arena::CreateMaybeMessage< ::livekit::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Room*
Arena::CreateMaybeMessage< ::livekit::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Room >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Codec*
Arena::CreateMaybeMessage< ::livekit::Codec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::PlayoutDelay*
Arena::CreateMaybeMessage< ::livekit::PlayoutDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::PlayoutDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantPermission*
Arena::CreateMaybeMessage< ::livekit::ParticipantPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantInfo_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::ParticipantInfo_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantInfo_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantInfo*
Arena::CreateMaybeMessage< ::livekit::ParticipantInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Encryption*
Arena::CreateMaybeMessage< ::livekit::Encryption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Encryption >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SimulcastCodecInfo*
Arena::CreateMaybeMessage< ::livekit::SimulcastCodecInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SimulcastCodecInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackInfo*
Arena::CreateMaybeMessage< ::livekit::TrackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::VideoLayer*
Arena::CreateMaybeMessage< ::livekit::VideoLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::VideoLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataPacket*
Arena::CreateMaybeMessage< ::livekit::DataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ActiveSpeakerUpdate*
Arena::CreateMaybeMessage< ::livekit::ActiveSpeakerUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ActiveSpeakerUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SpeakerInfo*
Arena::CreateMaybeMessage< ::livekit::SpeakerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SpeakerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UserPacket*
Arena::CreateMaybeMessage< ::livekit::UserPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UserPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SipDTMF*
Arena::CreateMaybeMessage< ::livekit::SipDTMF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SipDTMF >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Transcription*
Arena::CreateMaybeMessage< ::livekit::Transcription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Transcription >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TranscriptionSegment*
Arena::CreateMaybeMessage< ::livekit::TranscriptionSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TranscriptionSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ChatMessage*
Arena::CreateMaybeMessage< ::livekit::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RpcRequest*
Arena::CreateMaybeMessage< ::livekit::RpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RpcAck*
Arena::CreateMaybeMessage< ::livekit::RpcAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RpcAck >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RpcResponse*
Arena::CreateMaybeMessage< ::livekit::RpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RpcError*
Arena::CreateMaybeMessage< ::livekit::RpcError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RpcError >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantTracks*
Arena::CreateMaybeMessage< ::livekit::ParticipantTracks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantTracks >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ServerInfo*
Arena::CreateMaybeMessage< ::livekit::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ClientInfo*
Arena::CreateMaybeMessage< ::livekit::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ClientConfiguration*
Arena::CreateMaybeMessage< ::livekit::ClientConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ClientConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::VideoConfiguration*
Arena::CreateMaybeMessage< ::livekit::VideoConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::VideoConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DisabledCodecs*
Arena::CreateMaybeMessage< ::livekit::DisabledCodecs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DisabledCodecs >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPDrift*
Arena::CreateMaybeMessage< ::livekit::RTPDrift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPDrift >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPStats_GapHistogramEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::RTPStats_GapHistogramEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPStats_GapHistogramEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPStats*
Arena::CreateMaybeMessage< ::livekit::RTPStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTCPSenderReportState*
Arena::CreateMaybeMessage< ::livekit::RTCPSenderReportState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTCPSenderReportState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPForwarderState*
Arena::CreateMaybeMessage< ::livekit::RTPForwarderState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPForwarderState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RTPMungerState*
Arena::CreateMaybeMessage< ::livekit::RTPMungerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RTPMungerState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::VP8MungerState*
Arena::CreateMaybeMessage< ::livekit::VP8MungerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::VP8MungerState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TimedVersion*
Arena::CreateMaybeMessage< ::livekit::TimedVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TimedVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_TextHeader*
Arena::CreateMaybeMessage< ::livekit::DataStream_TextHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_TextHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_ByteHeader*
Arena::CreateMaybeMessage< ::livekit::DataStream_ByteHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_ByteHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_Header_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::DataStream_Header_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_Header_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_Header*
Arena::CreateMaybeMessage< ::livekit::DataStream_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_Chunk*
Arena::CreateMaybeMessage< ::livekit::DataStream_Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_Trailer_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::DataStream_Trailer_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_Trailer_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream_Trailer*
Arena::CreateMaybeMessage< ::livekit::DataStream_Trailer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream_Trailer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataStream*
Arena::CreateMaybeMessage< ::livekit::DataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataStream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
