// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#include "stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
namespace proto {
PROTOBUF_CONSTEXPR RtcStats_Codec::RtcStats_Codec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.codec_)*/nullptr} {}
struct RtcStats_CodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_CodecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_CodecDefaultTypeInternal() {}
  union {
    RtcStats_Codec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_CodecDefaultTypeInternal _RtcStats_Codec_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_InboundRtp::RtcStats_InboundRtp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.received_)*/nullptr
  , /*decltype(_impl_.inbound_)*/nullptr} {}
struct RtcStats_InboundRtpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_InboundRtpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_InboundRtpDefaultTypeInternal() {}
  union {
    RtcStats_InboundRtp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_InboundRtpDefaultTypeInternal _RtcStats_InboundRtp_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_OutboundRtp::RtcStats_OutboundRtp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.sent_)*/nullptr
  , /*decltype(_impl_.outbound_)*/nullptr} {}
struct RtcStats_OutboundRtpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_OutboundRtpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_OutboundRtpDefaultTypeInternal() {}
  union {
    RtcStats_OutboundRtp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_OutboundRtpDefaultTypeInternal _RtcStats_OutboundRtp_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_RemoteInboundRtp::RtcStats_RemoteInboundRtp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.received_)*/nullptr
  , /*decltype(_impl_.remote_inbound_)*/nullptr} {}
struct RtcStats_RemoteInboundRtpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_RemoteInboundRtpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_RemoteInboundRtpDefaultTypeInternal() {}
  union {
    RtcStats_RemoteInboundRtp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_RemoteInboundRtpDefaultTypeInternal _RtcStats_RemoteInboundRtp_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_RemoteOutboundRtp::RtcStats_RemoteOutboundRtp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.sent_)*/nullptr
  , /*decltype(_impl_.remote_outbound_)*/nullptr} {}
struct RtcStats_RemoteOutboundRtpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_RemoteOutboundRtpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_RemoteOutboundRtpDefaultTypeInternal() {}
  union {
    RtcStats_RemoteOutboundRtp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_RemoteOutboundRtpDefaultTypeInternal _RtcStats_RemoteOutboundRtp_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_MediaSource::RtcStats_MediaSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.audio_)*/nullptr
  , /*decltype(_impl_.video_)*/nullptr} {}
struct RtcStats_MediaSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_MediaSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_MediaSourceDefaultTypeInternal() {}
  union {
    RtcStats_MediaSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_MediaSourceDefaultTypeInternal _RtcStats_MediaSource_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_MediaPlayout::RtcStats_MediaPlayout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.audio_playout_)*/nullptr} {}
struct RtcStats_MediaPlayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_MediaPlayoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_MediaPlayoutDefaultTypeInternal() {}
  union {
    RtcStats_MediaPlayout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_MediaPlayoutDefaultTypeInternal _RtcStats_MediaPlayout_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_PeerConnection::RtcStats_PeerConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.pc_)*/nullptr} {}
struct RtcStats_PeerConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_PeerConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_PeerConnectionDefaultTypeInternal() {}
  union {
    RtcStats_PeerConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_PeerConnectionDefaultTypeInternal _RtcStats_PeerConnection_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_DataChannel::RtcStats_DataChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.dc_)*/nullptr} {}
struct RtcStats_DataChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_DataChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_DataChannelDefaultTypeInternal() {}
  union {
    RtcStats_DataChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_DataChannelDefaultTypeInternal _RtcStats_DataChannel_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_Transport::RtcStats_Transport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.transport_)*/nullptr} {}
struct RtcStats_TransportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_TransportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_TransportDefaultTypeInternal() {}
  union {
    RtcStats_Transport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_TransportDefaultTypeInternal _RtcStats_Transport_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_CandidatePair::RtcStats_CandidatePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.candidate_pair_)*/nullptr} {}
struct RtcStats_CandidatePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_CandidatePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_CandidatePairDefaultTypeInternal() {}
  union {
    RtcStats_CandidatePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_CandidatePairDefaultTypeInternal _RtcStats_CandidatePair_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_LocalCandidate::RtcStats_LocalCandidate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.candidate_)*/nullptr} {}
struct RtcStats_LocalCandidateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_LocalCandidateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_LocalCandidateDefaultTypeInternal() {}
  union {
    RtcStats_LocalCandidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_LocalCandidateDefaultTypeInternal _RtcStats_LocalCandidate_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_RemoteCandidate::RtcStats_RemoteCandidate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.candidate_)*/nullptr} {}
struct RtcStats_RemoteCandidateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_RemoteCandidateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_RemoteCandidateDefaultTypeInternal() {}
  union {
    RtcStats_RemoteCandidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_RemoteCandidateDefaultTypeInternal _RtcStats_RemoteCandidate_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_Certificate::RtcStats_Certificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.certificate_)*/nullptr} {}
struct RtcStats_CertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_CertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_CertificateDefaultTypeInternal() {}
  union {
    RtcStats_Certificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_CertificateDefaultTypeInternal _RtcStats_Certificate_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_Stream::RtcStats_Stream(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtc_)*/nullptr
  , /*decltype(_impl_.stream_)*/nullptr} {}
struct RtcStats_StreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_StreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_StreamDefaultTypeInternal() {}
  union {
    RtcStats_Stream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_StreamDefaultTypeInternal _RtcStats_Stream_default_instance_;
PROTOBUF_CONSTEXPR RtcStats_Track::RtcStats_Track(
    ::_pbi::ConstantInitialized) {}
struct RtcStats_TrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStats_TrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStats_TrackDefaultTypeInternal() {}
  union {
    RtcStats_Track _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStats_TrackDefaultTypeInternal _RtcStats_Track_default_instance_;
PROTOBUF_CONSTEXPR RtcStats::RtcStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RtcStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStatsDefaultTypeInternal() {}
  union {
    RtcStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStatsDefaultTypeInternal _RtcStats_default_instance_;
PROTOBUF_CONSTEXPR RtcStatsData::RtcStatsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct RtcStatsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcStatsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcStatsDataDefaultTypeInternal() {}
  union {
    RtcStatsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcStatsDataDefaultTypeInternal _RtcStatsData_default_instance_;
PROTOBUF_CONSTEXPR CodecStats::CodecStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transport_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdp_fmtp_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_type_)*/0u
  , /*decltype(_impl_.clock_rate_)*/0u
  , /*decltype(_impl_.channels_)*/0u} {}
struct CodecStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodecStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodecStatsDefaultTypeInternal() {}
  union {
    CodecStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodecStatsDefaultTypeInternal _CodecStats_default_instance_;
PROTOBUF_CONSTEXPR RtpStreamStats::RtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transport_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.codec_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ssrc_)*/0u} {}
struct RtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtpStreamStatsDefaultTypeInternal() {}
  union {
    RtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtpStreamStatsDefaultTypeInternal _RtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR ReceivedRtpStreamStats::ReceivedRtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packets_received_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_lost_)*/int64_t{0}
  , /*decltype(_impl_.jitter_)*/0} {}
struct ReceivedRtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceivedRtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceivedRtpStreamStatsDefaultTypeInternal() {}
  union {
    ReceivedRtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceivedRtpStreamStatsDefaultTypeInternal _ReceivedRtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR InboundRtpStreamStats::InboundRtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decoder_implementation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playout_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frames_decoded_)*/0u
  , /*decltype(_impl_.key_frames_decoded_)*/0u
  , /*decltype(_impl_.frames_rendered_)*/0u
  , /*decltype(_impl_.frames_dropped_)*/0u
  , /*decltype(_impl_.frame_width_)*/0u
  , /*decltype(_impl_.frame_height_)*/0u
  , /*decltype(_impl_.frames_per_second_)*/0
  , /*decltype(_impl_.qp_sum_)*/uint64_t{0u}
  , /*decltype(_impl_.total_decode_time_)*/0
  , /*decltype(_impl_.total_inter_frame_delay_)*/0
  , /*decltype(_impl_.total_squared_inter_frame_delay_)*/0
  , /*decltype(_impl_.total_pause_duration_)*/0
  , /*decltype(_impl_.pause_count_)*/0u
  , /*decltype(_impl_.freeze_count_)*/0u
  , /*decltype(_impl_.total_freeze_duration_)*/0
  , /*decltype(_impl_.last_packet_received_timestamp_)*/0
  , /*decltype(_impl_.header_bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_discarded_)*/uint64_t{0u}
  , /*decltype(_impl_.fec_bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.fec_packets_received_)*/uint64_t{0u}
  , /*decltype(_impl_.fec_packets_discarded_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.nack_count_)*/0u
  , /*decltype(_impl_.fir_count_)*/0u
  , /*decltype(_impl_.total_processing_delay_)*/0
  , /*decltype(_impl_.estimated_playout_timestamp_)*/0
  , /*decltype(_impl_.jitter_buffer_delay_)*/0
  , /*decltype(_impl_.jitter_buffer_target_delay_)*/0
  , /*decltype(_impl_.jitter_buffer_emitted_count_)*/uint64_t{0u}
  , /*decltype(_impl_.jitter_buffer_minimum_delay_)*/0
  , /*decltype(_impl_.total_samples_received_)*/uint64_t{0u}
  , /*decltype(_impl_.concealed_samples_)*/uint64_t{0u}
  , /*decltype(_impl_.silent_concealed_samples_)*/uint64_t{0u}
  , /*decltype(_impl_.pli_count_)*/0u
  , /*decltype(_impl_.power_efficient_decoder_)*/false
  , /*decltype(_impl_.concealment_events_)*/uint64_t{0u}
  , /*decltype(_impl_.inserted_samples_for_deceleration_)*/uint64_t{0u}
  , /*decltype(_impl_.removed_samples_for_acceleration_)*/uint64_t{0u}
  , /*decltype(_impl_.audio_level_)*/0
  , /*decltype(_impl_.total_audio_energy_)*/0
  , /*decltype(_impl_.total_samples_duration_)*/0
  , /*decltype(_impl_.frames_received_)*/uint64_t{0u}
  , /*decltype(_impl_.frames_assembled_from_multiple_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.total_assembly_time_)*/0
  , /*decltype(_impl_.retransmitted_packets_received_)*/uint64_t{0u}
  , /*decltype(_impl_.retransmitted_bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.rtx_ssrc_)*/0u
  , /*decltype(_impl_.fec_ssrc_)*/0u} {}
struct InboundRtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InboundRtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InboundRtpStreamStatsDefaultTypeInternal() {}
  union {
    InboundRtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InboundRtpStreamStatsDefaultTypeInternal _InboundRtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR SentRtpStreamStats::SentRtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packets_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_sent_)*/uint64_t{0u}} {}
struct SentRtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SentRtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SentRtpStreamStatsDefaultTypeInternal() {}
  union {
    SentRtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SentRtpStreamStatsDefaultTypeInternal _SentRtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUseDefaultTypeInternal _OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OutboundRtpStreamStats::OutboundRtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quality_limitation_durations_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_source_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encoder_implementation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scalability_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.retransmitted_packets_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.retransmitted_bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.target_bitrate_)*/0
  , /*decltype(_impl_.rtx_ssrc_)*/0u
  , /*decltype(_impl_.frame_width_)*/0u
  , /*decltype(_impl_.total_encoded_bytes_target_)*/uint64_t{0u}
  , /*decltype(_impl_.frames_per_second_)*/0
  , /*decltype(_impl_.frame_height_)*/0u
  , /*decltype(_impl_.frames_sent_)*/0u
  , /*decltype(_impl_.huge_frames_sent_)*/0u
  , /*decltype(_impl_.frames_encoded_)*/0u
  , /*decltype(_impl_.qp_sum_)*/uint64_t{0u}
  , /*decltype(_impl_.total_encode_time_)*/0
  , /*decltype(_impl_.key_frames_encoded_)*/0u
  , /*decltype(_impl_.quality_limitation_reason_)*/0
  , /*decltype(_impl_.total_packet_send_delay_)*/0
  , /*decltype(_impl_.quality_limitation_resolution_changes_)*/0u
  , /*decltype(_impl_.nack_count_)*/0u
  , /*decltype(_impl_.fir_count_)*/0u
  , /*decltype(_impl_.pli_count_)*/0u
  , /*decltype(_impl_.power_efficient_encoder_)*/false
  , /*decltype(_impl_.active_)*/false} {}
struct OutboundRtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutboundRtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutboundRtpStreamStatsDefaultTypeInternal() {}
  union {
    OutboundRtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutboundRtpStreamStatsDefaultTypeInternal _OutboundRtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR RemoteInboundRtpStreamStats::RemoteInboundRtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.round_trip_time_)*/0
  , /*decltype(_impl_.total_round_trip_time_)*/0
  , /*decltype(_impl_.fraction_lost_)*/0
  , /*decltype(_impl_.round_trip_time_measurements_)*/uint64_t{0u}} {}
struct RemoteInboundRtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteInboundRtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteInboundRtpStreamStatsDefaultTypeInternal() {}
  union {
    RemoteInboundRtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteInboundRtpStreamStatsDefaultTypeInternal _RemoteInboundRtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR RemoteOutboundRtpStreamStats::RemoteOutboundRtpStreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_timestamp_)*/0
  , /*decltype(_impl_.reports_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.round_trip_time_)*/0
  , /*decltype(_impl_.total_round_trip_time_)*/0
  , /*decltype(_impl_.round_trip_time_measurements_)*/uint64_t{0u}} {}
struct RemoteOutboundRtpStreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteOutboundRtpStreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteOutboundRtpStreamStatsDefaultTypeInternal() {}
  union {
    RemoteOutboundRtpStreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteOutboundRtpStreamStatsDefaultTypeInternal _RemoteOutboundRtpStreamStats_default_instance_;
PROTOBUF_CONSTEXPR MediaSourceStats::MediaSourceStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MediaSourceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaSourceStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaSourceStatsDefaultTypeInternal() {}
  union {
    MediaSourceStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaSourceStatsDefaultTypeInternal _MediaSourceStats_default_instance_;
PROTOBUF_CONSTEXPR AudioSourceStats::AudioSourceStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audio_level_)*/0
  , /*decltype(_impl_.total_audio_energy_)*/0
  , /*decltype(_impl_.total_samples_duration_)*/0
  , /*decltype(_impl_.echo_return_loss_)*/0
  , /*decltype(_impl_.echo_return_loss_enhancement_)*/0
  , /*decltype(_impl_.dropped_samples_duration_)*/0
  , /*decltype(_impl_.total_capture_delay_)*/0
  , /*decltype(_impl_.total_samples_captured_)*/uint64_t{0u}
  , /*decltype(_impl_.dropped_samples_events_)*/0u} {}
struct AudioSourceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioSourceStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioSourceStatsDefaultTypeInternal() {}
  union {
    AudioSourceStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioSourceStatsDefaultTypeInternal _AudioSourceStats_default_instance_;
PROTOBUF_CONSTEXPR VideoSourceStats::VideoSourceStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.frames_per_second_)*/0
  , /*decltype(_impl_.frames_)*/0u} {}
struct VideoSourceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSourceStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSourceStatsDefaultTypeInternal() {}
  union {
    VideoSourceStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSourceStatsDefaultTypeInternal _VideoSourceStats_default_instance_;
PROTOBUF_CONSTEXPR AudioPlayoutStats::AudioPlayoutStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.synthesized_samples_duration_)*/0
  , /*decltype(_impl_.total_samples_duration_)*/0
  , /*decltype(_impl_.total_playout_delay_)*/0
  , /*decltype(_impl_.total_samples_count_)*/uint64_t{0u}
  , /*decltype(_impl_.synthesized_samples_events_)*/0u} {}
struct AudioPlayoutStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioPlayoutStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioPlayoutStatsDefaultTypeInternal() {}
  union {
    AudioPlayoutStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioPlayoutStatsDefaultTypeInternal _AudioPlayoutStats_default_instance_;
PROTOBUF_CONSTEXPR PeerConnectionStats::PeerConnectionStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_channels_opened_)*/0u
  , /*decltype(_impl_.data_channels_closed_)*/0u} {}
struct PeerConnectionStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionStatsDefaultTypeInternal() {}
  union {
    PeerConnectionStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionStatsDefaultTypeInternal _PeerConnectionStats_default_instance_;
PROTOBUF_CONSTEXPR DataChannelStats::DataChannelStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_channel_identifier_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.messages_sent_)*/0u
  , /*decltype(_impl_.messages_received_)*/0u
  , /*decltype(_impl_.bytes_received_)*/uint64_t{0u}} {}
struct DataChannelStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChannelStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChannelStatsDefaultTypeInternal() {}
  union {
    DataChannelStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChannelStatsDefaultTypeInternal _DataChannelStats_default_instance_;
PROTOBUF_CONSTEXPR TransportStats::TransportStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ice_local_username_fragment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selected_candidate_pair_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_certificate_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_certificate_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tls_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtls_cipher_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srtp_cipher_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packets_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_received_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.ice_role_)*/0
  , /*decltype(_impl_.dtls_state_)*/0
  , /*decltype(_impl_.ice_state_)*/0
  , /*decltype(_impl_.dtls_role_)*/0
  , /*decltype(_impl_.selected_candidate_pair_changes_)*/0u} {}
struct TransportStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportStatsDefaultTypeInternal() {}
  union {
    TransportStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportStatsDefaultTypeInternal _TransportStats_default_instance_;
PROTOBUF_CONSTEXPR CandidatePairStats::CandidatePairStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transport_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_candidate_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_candidate_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.nominated_)*/false
  , /*decltype(_impl_.packets_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_received_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.last_packet_sent_timestamp_)*/0
  , /*decltype(_impl_.last_packet_received_timestamp_)*/0
  , /*decltype(_impl_.total_round_trip_time_)*/0
  , /*decltype(_impl_.current_round_trip_time_)*/0
  , /*decltype(_impl_.available_outgoing_bitrate_)*/0
  , /*decltype(_impl_.available_incoming_bitrate_)*/0
  , /*decltype(_impl_.requests_received_)*/uint64_t{0u}
  , /*decltype(_impl_.requests_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.responses_received_)*/uint64_t{0u}
  , /*decltype(_impl_.responses_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.consent_requests_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_discarded_on_send_)*/uint64_t{0u}
  , /*decltype(_impl_.packets_discarded_on_send_)*/0u} {}
struct CandidatePairStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandidatePairStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandidatePairStatsDefaultTypeInternal() {}
  union {
    CandidatePairStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandidatePairStatsDefaultTypeInternal _CandidatePairStats_default_instance_;
PROTOBUF_CONSTEXPR IceCandidateStats::IceCandidateStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transport_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.foundation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.related_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_fragment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.candidate_type_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.relay_protocol_)*/0
  , /*decltype(_impl_.related_port_)*/0
  , /*decltype(_impl_.tcp_type_)*/0} {}
struct IceCandidateStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IceCandidateStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IceCandidateStatsDefaultTypeInternal() {}
  union {
    IceCandidateStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IceCandidateStatsDefaultTypeInternal _IceCandidateStats_default_instance_;
PROTOBUF_CONSTEXPR CertificateStats::CertificateStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fingerprint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fingerprint_algorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base64_certificate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuer_certificate_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CertificateStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertificateStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertificateStatsDefaultTypeInternal() {}
  union {
    CertificateStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertificateStatsDefaultTypeInternal _CertificateStats_default_instance_;
PROTOBUF_CONSTEXPR StreamStats::StreamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StreamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStatsDefaultTypeInternal() {}
  union {
    StreamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStatsDefaultTypeInternal _StreamStats_default_instance_;
}  // namespace proto
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_stats_2eproto[38];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_stats_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stats_2eproto = nullptr;

const uint32_t TableStruct_stats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Codec, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Codec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Codec, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Codec, _impl_.codec_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_InboundRtp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_InboundRtp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_InboundRtp, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_InboundRtp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_InboundRtp, _impl_.received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_InboundRtp, _impl_.inbound_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_OutboundRtp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_OutboundRtp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_OutboundRtp, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_OutboundRtp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_OutboundRtp, _impl_.sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_OutboundRtp, _impl_.outbound_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteInboundRtp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteInboundRtp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteInboundRtp, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteInboundRtp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteInboundRtp, _impl_.received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteInboundRtp, _impl_.remote_inbound_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteOutboundRtp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteOutboundRtp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteOutboundRtp, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteOutboundRtp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteOutboundRtp, _impl_.sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteOutboundRtp, _impl_.remote_outbound_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaSource, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaSource, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaSource, _impl_.audio_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaSource, _impl_.video_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaPlayout, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaPlayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaPlayout, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_MediaPlayout, _impl_.audio_playout_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_PeerConnection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_PeerConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_PeerConnection, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_PeerConnection, _impl_.pc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_DataChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_DataChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_DataChannel, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_DataChannel, _impl_.dc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Transport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Transport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Transport, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Transport, _impl_.transport_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_CandidatePair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_CandidatePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_CandidatePair, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_CandidatePair, _impl_.candidate_pair_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_LocalCandidate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_LocalCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_LocalCandidate, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_LocalCandidate, _impl_.candidate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteCandidate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteCandidate, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_RemoteCandidate, _impl_.candidate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Certificate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Certificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Certificate, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Certificate, _impl_.certificate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Stream, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Stream, _impl_.rtc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Stream, _impl_.stream_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats_Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStats, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStatsData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStatsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStatsData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcStatsData, _impl_.timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_.payload_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_.transport_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_.clock_rate_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CodecStats, _impl_.sdp_fmtp_line_),
  3,
  0,
  1,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtpStreamStats, _impl_.ssrc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtpStreamStats, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtpStreamStats, _impl_.transport_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtpStreamStats, _impl_.codec_id_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ReceivedRtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ReceivedRtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ReceivedRtpStreamStats, _impl_.packets_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ReceivedRtpStreamStats, _impl_.packets_lost_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ReceivedRtpStreamStats, _impl_.jitter_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.track_identifier_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frames_decoded_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.key_frames_decoded_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frames_rendered_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frames_dropped_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frame_width_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frame_height_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frames_per_second_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.qp_sum_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_decode_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_inter_frame_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_squared_inter_frame_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.pause_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_pause_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.freeze_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_freeze_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.last_packet_received_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.header_bytes_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.packets_discarded_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.fec_bytes_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.fec_packets_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.fec_packets_discarded_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.bytes_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.nack_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.fir_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.pli_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_processing_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.estimated_playout_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.jitter_buffer_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.jitter_buffer_target_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.jitter_buffer_emitted_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.jitter_buffer_minimum_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_samples_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.concealed_samples_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.silent_concealed_samples_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.concealment_events_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.inserted_samples_for_deceleration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.removed_samples_for_acceleration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.audio_level_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_audio_energy_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_samples_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frames_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.decoder_implementation_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.playout_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.power_efficient_decoder_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.frames_assembled_from_multiple_packets_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.total_assembly_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.retransmitted_packets_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.retransmitted_bytes_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.rtx_ssrc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::InboundRtpStreamStats, _impl_.fec_ssrc_),
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  17,
  16,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  38,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  3,
  4,
  39,
  47,
  48,
  49,
  50,
  51,
  52,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SentRtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SentRtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SentRtpStreamStats, _impl_.packets_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SentRtpStreamStats, _impl_.bytes_sent_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.media_source_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.rid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.header_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.retransmitted_packets_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.retransmitted_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.rtx_ssrc_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.target_bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.total_encoded_bytes_target_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.frame_width_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.frame_height_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.frames_per_second_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.frames_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.huge_frames_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.frames_encoded_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.key_frames_encoded_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.qp_sum_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.total_encode_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.total_packet_send_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.quality_limitation_reason_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.quality_limitation_durations_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.quality_limitation_resolution_changes_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.nack_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.fir_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.pli_count_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.encoder_implementation_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.power_efficient_encoder_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OutboundRtpStreamStats, _impl_.scalability_mode_),
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  10,
  9,
  12,
  11,
  14,
  13,
  15,
  16,
  17,
  20,
  18,
  19,
  22,
  21,
  ~0u,
  23,
  24,
  25,
  26,
  4,
  27,
  28,
  5,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _impl_.local_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _impl_.round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _impl_.total_round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _impl_.fraction_lost_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteInboundRtpStreamStats, _impl_.round_trip_time_measurements_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_.local_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_.remote_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_.reports_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_.round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_.total_round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RemoteOutboundRtpStreamStats, _impl_.round_trip_time_measurements_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::MediaSourceStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::MediaSourceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::MediaSourceStats, _impl_.track_identifier_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::MediaSourceStats, _impl_.kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.audio_level_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.total_audio_energy_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.total_samples_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.echo_return_loss_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.echo_return_loss_enhancement_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.dropped_samples_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.dropped_samples_events_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.total_capture_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioSourceStats, _impl_.total_samples_captured_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoSourceStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoSourceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoSourceStats, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoSourceStats, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoSourceStats, _impl_.frames_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoSourceStats, _impl_.frames_per_second_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_.synthesized_samples_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_.synthesized_samples_events_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_.total_samples_duration_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_.total_playout_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioPlayoutStats, _impl_.total_samples_count_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PeerConnectionStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PeerConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PeerConnectionStats, _impl_.data_channels_opened_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PeerConnectionStats, _impl_.data_channels_closed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.data_channel_identifier_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.messages_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.messages_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelStats, _impl_.bytes_received_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.packets_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.packets_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.bytes_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.ice_role_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.ice_local_username_fragment_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.dtls_state_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.ice_state_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.selected_candidate_pair_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.local_certificate_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.remote_certificate_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.tls_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.dtls_cipher_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.dtls_role_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.srtp_cipher_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TransportStats, _impl_.selected_candidate_pair_changes_),
  7,
  8,
  9,
  10,
  11,
  0,
  12,
  13,
  1,
  2,
  3,
  4,
  5,
  14,
  6,
  15,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.transport_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.local_candidate_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.remote_candidate_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.nominated_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.packets_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.packets_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.bytes_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.last_packet_sent_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.last_packet_received_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.total_round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.current_round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.available_outgoing_bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.available_incoming_bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.requests_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.requests_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.responses_received_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.responses_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.consent_requests_sent_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.packets_discarded_on_send_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CandidatePairStats, _impl_.bytes_discarded_on_send_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  21,
  20,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.transport_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.candidate_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.relay_protocol_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.foundation_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.related_address_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.related_port_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.username_fragment_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceCandidateStats, _impl_.tcp_type_),
  0,
  1,
  7,
  2,
  8,
  9,
  3,
  10,
  4,
  5,
  11,
  6,
  12,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CertificateStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CertificateStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CertificateStats, _impl_.fingerprint_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CertificateStats, _impl_.fingerprint_algorithm_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CertificateStats, _impl_.base64_certificate_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CertificateStats, _impl_.issuer_certificate_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::StreamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::StreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::StreamStats, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::StreamStats, _impl_.stream_identifier_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::livekit::proto::RtcStats_Codec)},
  { 10, 20, -1, sizeof(::livekit::proto::RtcStats_InboundRtp)},
  { 24, 34, -1, sizeof(::livekit::proto::RtcStats_OutboundRtp)},
  { 38, 48, -1, sizeof(::livekit::proto::RtcStats_RemoteInboundRtp)},
  { 52, 62, -1, sizeof(::livekit::proto::RtcStats_RemoteOutboundRtp)},
  { 66, 76, -1, sizeof(::livekit::proto::RtcStats_MediaSource)},
  { 80, 88, -1, sizeof(::livekit::proto::RtcStats_MediaPlayout)},
  { 90, 98, -1, sizeof(::livekit::proto::RtcStats_PeerConnection)},
  { 100, 108, -1, sizeof(::livekit::proto::RtcStats_DataChannel)},
  { 110, 118, -1, sizeof(::livekit::proto::RtcStats_Transport)},
  { 120, 128, -1, sizeof(::livekit::proto::RtcStats_CandidatePair)},
  { 130, 138, -1, sizeof(::livekit::proto::RtcStats_LocalCandidate)},
  { 140, 148, -1, sizeof(::livekit::proto::RtcStats_RemoteCandidate)},
  { 150, 158, -1, sizeof(::livekit::proto::RtcStats_Certificate)},
  { 160, 168, -1, sizeof(::livekit::proto::RtcStats_Stream)},
  { 170, -1, -1, sizeof(::livekit::proto::RtcStats_Track)},
  { 176, -1, -1, sizeof(::livekit::proto::RtcStats)},
  { 199, 207, -1, sizeof(::livekit::proto::RtcStatsData)},
  { 209, 221, -1, sizeof(::livekit::proto::CodecStats)},
  { 227, 237, -1, sizeof(::livekit::proto::RtpStreamStats)},
  { 241, 250, -1, sizeof(::livekit::proto::ReceivedRtpStreamStats)},
  { 253, 312, -1, sizeof(::livekit::proto::InboundRtpStreamStats)},
  { 365, 373, -1, sizeof(::livekit::proto::SentRtpStreamStats)},
  { 375, 383, -1, sizeof(::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse)},
  { 385, 421, -1, sizeof(::livekit::proto::OutboundRtpStreamStats)},
  { 451, 462, -1, sizeof(::livekit::proto::RemoteInboundRtpStreamStats)},
  { 467, 479, -1, sizeof(::livekit::proto::RemoteOutboundRtpStreamStats)},
  { 485, 493, -1, sizeof(::livekit::proto::MediaSourceStats)},
  { 495, 510, -1, sizeof(::livekit::proto::AudioSourceStats)},
  { 519, 529, -1, sizeof(::livekit::proto::VideoSourceStats)},
  { 533, 545, -1, sizeof(::livekit::proto::AudioPlayoutStats)},
  { 551, 559, -1, sizeof(::livekit::proto::PeerConnectionStats)},
  { 561, 575, -1, sizeof(::livekit::proto::DataChannelStats)},
  { 583, 605, -1, sizeof(::livekit::proto::TransportStats)},
  { 621, 649, -1, sizeof(::livekit::proto::CandidatePairStats)},
  { 671, 690, -1, sizeof(::livekit::proto::IceCandidateStats)},
  { 703, 713, -1, sizeof(::livekit::proto::CertificateStats)},
  { 717, 725, -1, sizeof(::livekit::proto::StreamStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::proto::_RtcStats_Codec_default_instance_._instance,
  &::livekit::proto::_RtcStats_InboundRtp_default_instance_._instance,
  &::livekit::proto::_RtcStats_OutboundRtp_default_instance_._instance,
  &::livekit::proto::_RtcStats_RemoteInboundRtp_default_instance_._instance,
  &::livekit::proto::_RtcStats_RemoteOutboundRtp_default_instance_._instance,
  &::livekit::proto::_RtcStats_MediaSource_default_instance_._instance,
  &::livekit::proto::_RtcStats_MediaPlayout_default_instance_._instance,
  &::livekit::proto::_RtcStats_PeerConnection_default_instance_._instance,
  &::livekit::proto::_RtcStats_DataChannel_default_instance_._instance,
  &::livekit::proto::_RtcStats_Transport_default_instance_._instance,
  &::livekit::proto::_RtcStats_CandidatePair_default_instance_._instance,
  &::livekit::proto::_RtcStats_LocalCandidate_default_instance_._instance,
  &::livekit::proto::_RtcStats_RemoteCandidate_default_instance_._instance,
  &::livekit::proto::_RtcStats_Certificate_default_instance_._instance,
  &::livekit::proto::_RtcStats_Stream_default_instance_._instance,
  &::livekit::proto::_RtcStats_Track_default_instance_._instance,
  &::livekit::proto::_RtcStats_default_instance_._instance,
  &::livekit::proto::_RtcStatsData_default_instance_._instance,
  &::livekit::proto::_CodecStats_default_instance_._instance,
  &::livekit::proto::_RtpStreamStats_default_instance_._instance,
  &::livekit::proto::_ReceivedRtpStreamStats_default_instance_._instance,
  &::livekit::proto::_InboundRtpStreamStats_default_instance_._instance,
  &::livekit::proto::_SentRtpStreamStats_default_instance_._instance,
  &::livekit::proto::_OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse_default_instance_._instance,
  &::livekit::proto::_OutboundRtpStreamStats_default_instance_._instance,
  &::livekit::proto::_RemoteInboundRtpStreamStats_default_instance_._instance,
  &::livekit::proto::_RemoteOutboundRtpStreamStats_default_instance_._instance,
  &::livekit::proto::_MediaSourceStats_default_instance_._instance,
  &::livekit::proto::_AudioSourceStats_default_instance_._instance,
  &::livekit::proto::_VideoSourceStats_default_instance_._instance,
  &::livekit::proto::_AudioPlayoutStats_default_instance_._instance,
  &::livekit::proto::_PeerConnectionStats_default_instance_._instance,
  &::livekit::proto::_DataChannelStats_default_instance_._instance,
  &::livekit::proto::_TransportStats_default_instance_._instance,
  &::livekit::proto::_CandidatePairStats_default_instance_._instance,
  &::livekit::proto::_IceCandidateStats_default_instance_._instance,
  &::livekit::proto::_CertificateStats_default_instance_._instance,
  &::livekit::proto::_StreamStats_default_instance_._instance,
};

const char descriptor_table_protodef_stats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013stats.proto\022\rlivekit.proto\"\353\030\n\010RtcStat"
  "s\022.\n\005codec\030\003 \001(\0132\035.livekit.proto.RtcStat"
  "s.CodecH\000\0229\n\013inbound_rtp\030\004 \001(\0132\".livekit"
  ".proto.RtcStats.InboundRtpH\000\022;\n\014outbound"
  "_rtp\030\005 \001(\0132#.livekit.proto.RtcStats.Outb"
  "oundRtpH\000\022F\n\022remote_inbound_rtp\030\006 \001(\0132(."
  "livekit.proto.RtcStats.RemoteInboundRtpH"
  "\000\022H\n\023remote_outbound_rtp\030\007 \001(\0132).livekit"
  ".proto.RtcStats.RemoteOutboundRtpH\000\022;\n\014m"
  "edia_source\030\010 \001(\0132#.livekit.proto.RtcSta"
  "ts.MediaSourceH\000\022=\n\rmedia_playout\030\t \001(\0132"
  "$.livekit.proto.RtcStats.MediaPlayoutH\000\022"
  "A\n\017peer_connection\030\n \001(\0132&.livekit.proto"
  ".RtcStats.PeerConnectionH\000\022;\n\014data_chann"
  "el\030\013 \001(\0132#.livekit.proto.RtcStats.DataCh"
  "annelH\000\0226\n\ttransport\030\014 \001(\0132!.livekit.pro"
  "to.RtcStats.TransportH\000\022\?\n\016candidate_pai"
  "r\030\r \001(\0132%.livekit.proto.RtcStats.Candida"
  "tePairH\000\022A\n\017local_candidate\030\016 \001(\0132&.live"
  "kit.proto.RtcStats.LocalCandidateH\000\022C\n\020r"
  "emote_candidate\030\017 \001(\0132\'.livekit.proto.Rt"
  "cStats.RemoteCandidateH\000\022:\n\013certificate\030"
  "\020 \001(\0132#.livekit.proto.RtcStats.Certifica"
  "teH\000\0220\n\006stream\030\021 \001(\0132\036.livekit.proto.Rtc"
  "Stats.StreamH\000\022.\n\005track\030\022 \001(\0132\035.livekit."
  "proto.RtcStats.TrackH\000\032[\n\005Codec\022(\n\003rtc\030\001"
  " \002(\0132\033.livekit.proto.RtcStatsData\022(\n\005cod"
  "ec\030\002 \002(\0132\031.livekit.proto.CodecStats\032\325\001\n\n"
  "InboundRtp\022(\n\003rtc\030\001 \002(\0132\033.livekit.proto."
  "RtcStatsData\022-\n\006stream\030\002 \002(\0132\035.livekit.p"
  "roto.RtpStreamStats\0227\n\010received\030\003 \002(\0132%."
  "livekit.proto.ReceivedRtpStreamStats\0225\n\007"
  "inbound\030\004 \002(\0132$.livekit.proto.InboundRtp"
  "StreamStats\032\320\001\n\013OutboundRtp\022(\n\003rtc\030\001 \002(\013"
  "2\033.livekit.proto.RtcStatsData\022-\n\006stream\030"
  "\002 \002(\0132\035.livekit.proto.RtpStreamStats\022/\n\004"
  "sent\030\003 \002(\0132!.livekit.proto.SentRtpStream"
  "Stats\0227\n\010outbound\030\004 \002(\0132%.livekit.proto."
  "OutboundRtpStreamStats\032\350\001\n\020RemoteInbound"
  "Rtp\022(\n\003rtc\030\001 \002(\0132\033.livekit.proto.RtcStat"
  "sData\022-\n\006stream\030\002 \002(\0132\035.livekit.proto.Rt"
  "pStreamStats\0227\n\010received\030\003 \002(\0132%.livekit"
  ".proto.ReceivedRtpStreamStats\022B\n\016remote_"
  "inbound\030\004 \002(\0132*.livekit.proto.RemoteInbo"
  "undRtpStreamStats\032\343\001\n\021RemoteOutboundRtp\022"
  "(\n\003rtc\030\001 \002(\0132\033.livekit.proto.RtcStatsDat"
  "a\022-\n\006stream\030\002 \002(\0132\035.livekit.proto.RtpStr"
  "eamStats\022/\n\004sent\030\003 \002(\0132!.livekit.proto.S"
  "entRtpStreamStats\022D\n\017remote_outbound\030\004 \002"
  "(\0132+.livekit.proto.RemoteOutboundRtpStre"
  "amStats\032\310\001\n\013MediaSource\022(\n\003rtc\030\001 \002(\0132\033.l"
  "ivekit.proto.RtcStatsData\022/\n\006source\030\002 \002("
  "\0132\037.livekit.proto.MediaSourceStats\022.\n\005au"
  "dio\030\003 \002(\0132\037.livekit.proto.AudioSourceSta"
  "ts\022.\n\005video\030\004 \002(\0132\037.livekit.proto.VideoS"
  "ourceStats\032q\n\014MediaPlayout\022(\n\003rtc\030\001 \002(\0132"
  "\033.livekit.proto.RtcStatsData\0227\n\raudio_pl"
  "ayout\030\002 \002(\0132 .livekit.proto.AudioPlayout"
  "Stats\032j\n\016PeerConnection\022(\n\003rtc\030\001 \002(\0132\033.l"
  "ivekit.proto.RtcStatsData\022.\n\002pc\030\002 \002(\0132\"."
  "livekit.proto.PeerConnectionStats\032d\n\013Dat"
  "aChannel\022(\n\003rtc\030\001 \002(\0132\033.livekit.proto.Rt"
  "cStatsData\022+\n\002dc\030\002 \002(\0132\037.livekit.proto.D"
  "ataChannelStats\032g\n\tTransport\022(\n\003rtc\030\001 \002("
  "\0132\033.livekit.proto.RtcStatsData\0220\n\ttransp"
  "ort\030\002 \002(\0132\035.livekit.proto.TransportStats"
  "\032t\n\rCandidatePair\022(\n\003rtc\030\001 \002(\0132\033.livekit"
  ".proto.RtcStatsData\0229\n\016candidate_pair\030\002 "
  "\002(\0132!.livekit.proto.CandidatePairStats\032o"
  "\n\016LocalCandidate\022(\n\003rtc\030\001 \002(\0132\033.livekit."
  "proto.RtcStatsData\0223\n\tcandidate\030\002 \002(\0132 ."
  "livekit.proto.IceCandidateStats\032p\n\017Remot"
  "eCandidate\022(\n\003rtc\030\001 \002(\0132\033.livekit.proto."
  "RtcStatsData\0223\n\tcandidate\030\002 \002(\0132 .liveki"
  "t.proto.IceCandidateStats\032m\n\013Certificate"
  "\022(\n\003rtc\030\001 \002(\0132\033.livekit.proto.RtcStatsDa"
  "ta\0224\n\013certificate\030\002 \002(\0132\037.livekit.proto."
  "CertificateStats\032^\n\006Stream\022(\n\003rtc\030\001 \002(\0132"
  "\033.livekit.proto.RtcStatsData\022*\n\006stream\030\002"
  " \002(\0132\032.livekit.proto.StreamStats\032\007\n\005Trac"
  "kB\007\n\005stats\"-\n\014RtcStatsData\022\n\n\002id\030\001 \002(\t\022\021"
  "\n\ttimestamp\030\002 \002(\003\"\210\001\n\nCodecStats\022\024\n\014payl"
  "oad_type\030\001 \002(\r\022\024\n\014transport_id\030\002 \002(\t\022\021\n\t"
  "mime_type\030\003 \002(\t\022\022\n\nclock_rate\030\004 \002(\r\022\020\n\010c"
  "hannels\030\005 \002(\r\022\025\n\rsdp_fmtp_line\030\006 \002(\t\"T\n\016"
  "RtpStreamStats\022\014\n\004ssrc\030\001 \002(\r\022\014\n\004kind\030\002 \002"
  "(\t\022\024\n\014transport_id\030\003 \002(\t\022\020\n\010codec_id\030\004 \002"
  "(\t\"X\n\026ReceivedRtpStreamStats\022\030\n\020packets_"
  "received\030\001 \002(\004\022\024\n\014packets_lost\030\002 \002(\003\022\016\n\006"
  "jitter\030\003 \002(\001\"\202\014\n\025InboundRtpStreamStats\022\030"
  "\n\020track_identifier\030\001 \002(\t\022\013\n\003mid\030\002 \002(\t\022\021\n"
  "\tremote_id\030\003 \002(\t\022\026\n\016frames_decoded\030\004 \002(\r"
  "\022\032\n\022key_frames_decoded\030\005 \002(\r\022\027\n\017frames_r"
  "endered\030\006 \002(\r\022\026\n\016frames_dropped\030\007 \002(\r\022\023\n"
  "\013frame_width\030\010 \002(\r\022\024\n\014frame_height\030\t \002(\r"
  "\022\031\n\021frames_per_second\030\n \002(\001\022\016\n\006qp_sum\030\013 "
  "\002(\004\022\031\n\021total_decode_time\030\014 \002(\001\022\037\n\027total_"
  "inter_frame_delay\030\r \002(\001\022\'\n\037total_squared"
  "_inter_frame_delay\030\016 \002(\001\022\023\n\013pause_count\030"
  "\017 \002(\r\022\034\n\024total_pause_duration\030\020 \002(\001\022\024\n\014f"
  "reeze_count\030\021 \002(\r\022\035\n\025total_freeze_durati"
  "on\030\022 \002(\001\022&\n\036last_packet_received_timesta"
  "mp\030\023 \002(\001\022\035\n\025header_bytes_received\030\024 \002(\004\022"
  "\031\n\021packets_discarded\030\025 \002(\004\022\032\n\022fec_bytes_"
  "received\030\026 \002(\004\022\034\n\024fec_packets_received\030\027"
  " \002(\004\022\035\n\025fec_packets_discarded\030\030 \002(\004\022\026\n\016b"
  "ytes_received\030\031 \002(\004\022\022\n\nnack_count\030\032 \002(\r\022"
  "\021\n\tfir_count\030\033 \002(\r\022\021\n\tpli_count\030\034 \002(\r\022\036\n"
  "\026total_processing_delay\030\035 \002(\001\022#\n\033estimat"
  "ed_playout_timestamp\030\036 \002(\001\022\033\n\023jitter_buf"
  "fer_delay\030\037 \002(\001\022\"\n\032jitter_buffer_target_"
  "delay\030  \002(\001\022#\n\033jitter_buffer_emitted_cou"
  "nt\030! \002(\004\022#\n\033jitter_buffer_minimum_delay\030"
  "\" \002(\001\022\036\n\026total_samples_received\030# \002(\004\022\031\n"
  "\021concealed_samples\030$ \002(\004\022 \n\030silent_conce"
  "aled_samples\030% \002(\004\022\032\n\022concealment_events"
  "\030& \002(\004\022)\n!inserted_samples_for_decelerat"
  "ion\030\' \002(\004\022(\n removed_samples_for_acceler"
  "ation\030( \002(\004\022\023\n\013audio_level\030) \002(\001\022\032\n\022tota"
  "l_audio_energy\030* \002(\001\022\036\n\026total_samples_du"
  "ration\030+ \002(\001\022\027\n\017frames_received\030, \002(\004\022\036\n"
  "\026decoder_implementation\030- \002(\t\022\022\n\nplayout"
  "_id\030. \002(\t\022\037\n\027power_efficient_decoder\030/ \002"
  "(\010\022.\n&frames_assembled_from_multiple_pac"
  "kets\0300 \002(\004\022\033\n\023total_assembly_time\0301 \002(\001\022"
  "&\n\036retransmitted_packets_received\0302 \002(\004\022"
  "$\n\034retransmitted_bytes_received\0303 \002(\004\022\020\n"
  "\010rtx_ssrc\0304 \002(\r\022\020\n\010fec_ssrc\0305 \002(\r\">\n\022Sen"
  "tRtpStreamStats\022\024\n\014packets_sent\030\001 \002(\004\022\022\n"
  "\nbytes_sent\030\002 \002(\004\"\321\007\n\026OutboundRtpStreamS"
  "tats\022\013\n\003mid\030\001 \002(\t\022\027\n\017media_source_id\030\002 \002"
  "(\t\022\021\n\tremote_id\030\003 \002(\t\022\013\n\003rid\030\004 \002(\t\022\031\n\021he"
  "ader_bytes_sent\030\005 \002(\004\022\"\n\032retransmitted_p"
  "ackets_sent\030\006 \002(\004\022 \n\030retransmitted_bytes"
  "_sent\030\007 \002(\004\022\020\n\010rtx_ssrc\030\010 \002(\r\022\026\n\016target_"
  "bitrate\030\t \002(\001\022\"\n\032total_encoded_bytes_tar"
  "get\030\n \002(\004\022\023\n\013frame_width\030\013 \002(\r\022\024\n\014frame_"
  "height\030\014 \002(\r\022\031\n\021frames_per_second\030\r \002(\001\022"
  "\023\n\013frames_sent\030\016 \002(\r\022\030\n\020huge_frames_sent"
  "\030\017 \002(\r\022\026\n\016frames_encoded\030\020 \002(\r\022\032\n\022key_fr"
  "ames_encoded\030\021 \002(\r\022\016\n\006qp_sum\030\022 \002(\004\022\031\n\021to"
  "tal_encode_time\030\023 \002(\001\022\037\n\027total_packet_se"
  "nd_delay\030\024 \002(\001\022I\n\031quality_limitation_rea"
  "son\030\025 \002(\0162&.livekit.proto.QualityLimitat"
  "ionReason\022k\n\034quality_limitation_duration"
  "s\030\026 \003(\0132E.livekit.proto.OutboundRtpStrea"
  "mStats.QualityLimitationDurationsEntry\022-"
  "\n%quality_limitation_resolution_changes\030"
  "\027 \002(\r\022\022\n\nnack_count\030\030 \002(\r\022\021\n\tfir_count\030\031"
  " \002(\r\022\021\n\tpli_count\030\032 \002(\r\022\036\n\026encoder_imple"
  "mentation\030\033 \002(\t\022\037\n\027power_efficient_encod"
  "er\030\034 \002(\010\022\016\n\006active\030\035 \002(\010\022\030\n\020scalability_"
  "mode\030\036 \002(\t\032A\n\037QualityLimitationDurations"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\244\001"
  "\n\033RemoteInboundRtpStreamStats\022\020\n\010local_i"
  "d\030\001 \002(\t\022\027\n\017round_trip_time\030\002 \002(\001\022\035\n\025tota"
  "l_round_trip_time\030\003 \002(\001\022\025\n\rfraction_lost"
  "\030\004 \002(\001\022$\n\034round_trip_time_measurements\030\005"
  " \002(\004\"\276\001\n\034RemoteOutboundRtpStreamStats\022\020\n"
  "\010local_id\030\001 \002(\t\022\030\n\020remote_timestamp\030\002 \002("
  "\001\022\024\n\014reports_sent\030\003 \002(\004\022\027\n\017round_trip_ti"
  "me\030\004 \002(\001\022\035\n\025total_round_trip_time\030\005 \002(\001\022"
  "$\n\034round_trip_time_measurements\030\006 \002(\004\":\n"
  "\020MediaSourceStats\022\030\n\020track_identifier\030\001 "
  "\002(\t\022\014\n\004kind\030\002 \002(\t\"\242\002\n\020AudioSourceStats\022\023"
  "\n\013audio_level\030\001 \002(\001\022\032\n\022total_audio_energ"
  "y\030\002 \002(\001\022\036\n\026total_samples_duration\030\003 \002(\001\022"
  "\030\n\020echo_return_loss\030\004 \002(\001\022$\n\034echo_return"
  "_loss_enhancement\030\005 \002(\001\022 \n\030dropped_sampl"
  "es_duration\030\006 \002(\001\022\036\n\026dropped_samples_eve"
  "nts\030\007 \002(\r\022\033\n\023total_capture_delay\030\010 \002(\001\022\036"
  "\n\026total_samples_captured\030\t \002(\004\"\\\n\020VideoS"
  "ourceStats\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002("
  "\r\022\016\n\006frames\030\003 \002(\r\022\031\n\021frames_per_second\030\004"
  " \002(\001\"\305\001\n\021AudioPlayoutStats\022\014\n\004kind\030\001 \002(\t"
  "\022$\n\034synthesized_samples_duration\030\002 \002(\001\022\""
  "\n\032synthesized_samples_events\030\003 \002(\r\022\036\n\026to"
  "tal_samples_duration\030\004 \002(\001\022\033\n\023total_play"
  "out_delay\030\005 \002(\001\022\033\n\023total_samples_count\030\006"
  " \002(\004\"Q\n\023PeerConnectionStats\022\034\n\024data_chan"
  "nels_opened\030\001 \002(\r\022\034\n\024data_channels_close"
  "d\030\002 \002(\r\"\342\001\n\020DataChannelStats\022\r\n\005label\030\001 "
  "\002(\t\022\020\n\010protocol\030\002 \002(\t\022\037\n\027data_channel_id"
  "entifier\030\003 \002(\005\022.\n\005state\030\004 \001(\0162\037.livekit."
  "proto.DataChannelState\022\025\n\rmessages_sent\030"
  "\005 \002(\r\022\022\n\nbytes_sent\030\006 \002(\004\022\031\n\021messages_re"
  "ceived\030\007 \002(\r\022\026\n\016bytes_received\030\010 \002(\004\"\234\004\n"
  "\016TransportStats\022\024\n\014packets_sent\030\001 \002(\004\022\030\n"
  "\020packets_received\030\002 \002(\004\022\022\n\nbytes_sent\030\003 "
  "\002(\004\022\026\n\016bytes_received\030\004 \002(\004\022(\n\010ice_role\030"
  "\005 \002(\0162\026.livekit.proto.IceRole\022#\n\033ice_loc"
  "al_username_fragment\030\006 \002(\t\0225\n\ndtls_state"
  "\030\007 \001(\0162!.livekit.proto.DtlsTransportStat"
  "e\0223\n\tice_state\030\010 \001(\0162 .livekit.proto.Ice"
  "TransportState\022\"\n\032selected_candidate_pai"
  "r_id\030\t \002(\t\022\034\n\024local_certificate_id\030\n \002(\t"
  "\022\035\n\025remote_certificate_id\030\013 \002(\t\022\023\n\013tls_v"
  "ersion\030\014 \002(\t\022\023\n\013dtls_cipher\030\r \002(\t\022*\n\tdtl"
  "s_role\030\016 \002(\0162\027.livekit.proto.DtlsRole\022\023\n"
  "\013srtp_cipher\030\017 \002(\t\022\'\n\037selected_candidate"
  "_pair_changes\030\020 \002(\r\"\244\005\n\022CandidatePairSta"
  "ts\022\024\n\014transport_id\030\001 \002(\t\022\032\n\022local_candid"
  "ate_id\030\002 \002(\t\022\033\n\023remote_candidate_id\030\003 \002("
  "\t\0223\n\005state\030\004 \001(\0162$.livekit.proto.IceCand"
  "idatePairState\022\021\n\tnominated\030\005 \002(\010\022\024\n\014pac"
  "kets_sent\030\006 \002(\004\022\030\n\020packets_received\030\007 \002("
  "\004\022\022\n\nbytes_sent\030\010 \002(\004\022\026\n\016bytes_received\030"
  "\t \002(\004\022\"\n\032last_packet_sent_timestamp\030\n \002("
  "\001\022&\n\036last_packet_received_timestamp\030\013 \002("
  "\001\022\035\n\025total_round_trip_time\030\014 \002(\001\022\037\n\027curr"
  "ent_round_trip_time\030\r \002(\001\022\"\n\032available_o"
  "utgoing_bitrate\030\016 \002(\001\022\"\n\032available_incom"
  "ing_bitrate\030\017 \002(\001\022\031\n\021requests_received\030\020"
  " \002(\004\022\025\n\rrequests_sent\030\021 \002(\004\022\032\n\022responses"
  "_received\030\022 \002(\004\022\026\n\016responses_sent\030\023 \002(\004\022"
  "\035\n\025consent_requests_sent\030\024 \002(\004\022!\n\031packet"
  "s_discarded_on_send\030\025 \002(\r\022\037\n\027bytes_disca"
  "rded_on_send\030\026 \002(\004\"\211\003\n\021IceCandidateStats"
  "\022\024\n\014transport_id\030\001 \002(\t\022\017\n\007address\030\002 \002(\t\022"
  "\014\n\004port\030\003 \002(\005\022\020\n\010protocol\030\004 \002(\t\0227\n\016candi"
  "date_type\030\005 \001(\0162\037.livekit.proto.IceCandi"
  "dateType\022\020\n\010priority\030\006 \002(\005\022\013\n\003url\030\007 \002(\t\022"
  "A\n\016relay_protocol\030\010 \001(\0162).livekit.proto."
  "IceServerTransportProtocol\022\022\n\nfoundation"
  "\030\t \002(\t\022\027\n\017related_address\030\n \002(\t\022\024\n\014relat"
  "ed_port\030\013 \002(\005\022\031\n\021username_fragment\030\014 \002(\t"
  "\0224\n\010tcp_type\030\r \001(\0162\".livekit.proto.IceTc"
  "pCandidateType\"\201\001\n\020CertificateStats\022\023\n\013f"
  "ingerprint\030\001 \002(\t\022\035\n\025fingerprint_algorith"
  "m\030\002 \002(\t\022\032\n\022base64_certificate\030\003 \002(\t\022\035\n\025i"
  "ssuer_certificate_id\030\004 \002(\t\"4\n\013StreamStat"
  "s\022\n\n\002id\030\001 \002(\t\022\031\n\021stream_identifier\030\002 \002(\t"
  "*Q\n\020DataChannelState\022\021\n\rDC_CONNECTING\020\000\022"
  "\013\n\007DC_OPEN\020\001\022\016\n\nDC_CLOSING\020\002\022\r\n\tDC_CLOSE"
  "D\020\003*r\n\027QualityLimitationReason\022\023\n\017LIMITA"
  "TION_NONE\020\000\022\022\n\016LIMITATION_CPU\020\001\022\030\n\024LIMIT"
  "ATION_BANDWIDTH\020\002\022\024\n\020LIMITATION_OTHER\020\003*"
  "C\n\007IceRole\022\017\n\013ICE_UNKNOWN\020\000\022\023\n\017ICE_CONTR"
  "OLLING\020\001\022\022\n\016ICE_CONTROLLED\020\002*\237\001\n\022DtlsTra"
  "nsportState\022\026\n\022DTLS_TRANSPORT_NEW\020\000\022\035\n\031D"
  "TLS_TRANSPORT_CONNECTING\020\001\022\034\n\030DTLS_TRANS"
  "PORT_CONNECTED\020\002\022\031\n\025DTLS_TRANSPORT_CLOSE"
  "D\020\003\022\031\n\025DTLS_TRANSPORT_FAILED\020\004*\324\001\n\021IceTr"
  "ansportState\022\025\n\021ICE_TRANSPORT_NEW\020\000\022\032\n\026I"
  "CE_TRANSPORT_CHECKING\020\001\022\033\n\027ICE_TRANSPORT"
  "_CONNECTED\020\002\022\033\n\027ICE_TRANSPORT_COMPLETED\020"
  "\003\022\036\n\032ICE_TRANSPORT_DISCONNECTED\020\004\022\030\n\024ICE"
  "_TRANSPORT_FAILED\020\005\022\030\n\024ICE_TRANSPORT_CLO"
  "SED\020\006*>\n\010DtlsRole\022\017\n\013DTLS_CLIENT\020\000\022\017\n\013DT"
  "LS_SERVER\020\001\022\020\n\014DTLS_UNKNOWN\020\002*u\n\025IceCand"
  "idatePairState\022\017\n\013PAIR_FROZEN\020\000\022\020\n\014PAIR_"
  "WAITING\020\001\022\024\n\020PAIR_IN_PROGRESS\020\002\022\017\n\013PAIR_"
  "FAILED\020\003\022\022\n\016PAIR_SUCCEEDED\020\004*=\n\020IceCandi"
  "dateType\022\010\n\004HOST\020\000\022\t\n\005SRFLX\020\001\022\t\n\005PRFLX\020\002"
  "\022\t\n\005RELAY\020\003*U\n\032IceServerTransportProtoco"
  "l\022\021\n\rTRANSPORT_UDP\020\000\022\021\n\rTRANSPORT_TCP\020\001\022"
  "\021\n\rTRANSPORT_TLS\020\002*T\n\023IceTcpCandidateTyp"
  "e\022\024\n\020CANDIDATE_ACTIVE\020\000\022\025\n\021CANDIDATE_PAS"
  "SIVE\020\001\022\020\n\014CANDIDATE_SO\020\002B\020\252\002\rLiveKit.Pro"
  "to"
  ;
static ::_pbi::once_flag descriptor_table_stats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stats_2eproto = {
    false, false, 10362, descriptor_table_protodef_stats_2eproto,
    "stats.proto",
    &descriptor_table_stats_2eproto_once, nullptr, 0, 38,
    schemas, file_default_instances, TableStruct_stats_2eproto::offsets,
    file_level_metadata_stats_2eproto, file_level_enum_descriptors_stats_2eproto,
    file_level_service_descriptors_stats_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stats_2eproto_getter() {
  return &descriptor_table_stats_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stats_2eproto(&descriptor_table_stats_2eproto);
namespace livekit {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChannelState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[0];
}
bool DataChannelState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QualityLimitationReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[1];
}
bool QualityLimitationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[2];
}
bool IceRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DtlsTransportState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[3];
}
bool DtlsTransportState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceTransportState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[4];
}
bool IceTransportState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DtlsRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[5];
}
bool DtlsRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceCandidatePairState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[6];
}
bool IceCandidatePairState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceCandidateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[7];
}
bool IceCandidateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceServerTransportProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[8];
}
bool IceServerTransportProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceTcpCandidateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_2eproto);
  return file_level_enum_descriptors_stats_2eproto[9];
}
bool IceTcpCandidateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RtcStats_Codec::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_Codec>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_Codec* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::CodecStats& codec(const RtcStats_Codec* msg);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_Codec::_Internal::rtc(const RtcStats_Codec* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::CodecStats&
RtcStats_Codec::_Internal::codec(const RtcStats_Codec* msg) {
  return *msg->_impl_.codec_;
}
RtcStats_Codec::RtcStats_Codec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.Codec)
}
RtcStats_Codec::RtcStats_Codec(const RtcStats_Codec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_Codec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.codec_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_codec()) {
    _this->_impl_.codec_ = new ::livekit::proto::CodecStats(*from._impl_.codec_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.Codec)
}

inline void RtcStats_Codec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.codec_){nullptr}
  };
}

RtcStats_Codec::~RtcStats_Codec() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.Codec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_Codec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.codec_;
}

void RtcStats_Codec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.Codec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.codec_ != nullptr);
      _impl_.codec_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_Codec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.CodecStats codec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_codec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_Codec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.Codec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.CodecStats codec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::codec(this),
        _Internal::codec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.Codec)
  return target;
}

size_t RtcStats_Codec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.Codec)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_codec()) {
    // required .livekit.proto.CodecStats codec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.codec_);
  }

  return total_size;
}
size_t RtcStats_Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.Codec)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.CodecStats codec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.codec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_Codec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_Codec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_Codec::GetClassData() const { return &_class_data_; }


void RtcStats_Codec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_Codec*>(&to_msg);
  auto& from = static_cast<const RtcStats_Codec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.Codec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_codec()->::livekit::proto::CodecStats::MergeFrom(
          from._internal_codec());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_Codec::CopyFrom(const RtcStats_Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_Codec::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_codec()) {
    if (!_impl_.codec_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_Codec::InternalSwap(RtcStats_Codec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_Codec, _impl_.codec_)
      + sizeof(RtcStats_Codec::_impl_.codec_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_Codec, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_Codec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[0]);
}

// ===================================================================

class RtcStats_InboundRtp::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_InboundRtp>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_InboundRtp* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RtpStreamStats& stream(const RtcStats_InboundRtp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::ReceivedRtpStreamStats& received(const RtcStats_InboundRtp* msg);
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::InboundRtpStreamStats& inbound(const RtcStats_InboundRtp* msg);
  static void set_has_inbound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_InboundRtp::_Internal::rtc(const RtcStats_InboundRtp* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::RtpStreamStats&
RtcStats_InboundRtp::_Internal::stream(const RtcStats_InboundRtp* msg) {
  return *msg->_impl_.stream_;
}
const ::livekit::proto::ReceivedRtpStreamStats&
RtcStats_InboundRtp::_Internal::received(const RtcStats_InboundRtp* msg) {
  return *msg->_impl_.received_;
}
const ::livekit::proto::InboundRtpStreamStats&
RtcStats_InboundRtp::_Internal::inbound(const RtcStats_InboundRtp* msg) {
  return *msg->_impl_.inbound_;
}
RtcStats_InboundRtp::RtcStats_InboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.InboundRtp)
}
RtcStats_InboundRtp::RtcStats_InboundRtp(const RtcStats_InboundRtp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_InboundRtp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.received_){nullptr}
    , decltype(_impl_.inbound_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::livekit::proto::RtpStreamStats(*from._impl_.stream_);
  }
  if (from._internal_has_received()) {
    _this->_impl_.received_ = new ::livekit::proto::ReceivedRtpStreamStats(*from._impl_.received_);
  }
  if (from._internal_has_inbound()) {
    _this->_impl_.inbound_ = new ::livekit::proto::InboundRtpStreamStats(*from._impl_.inbound_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.InboundRtp)
}

inline void RtcStats_InboundRtp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.received_){nullptr}
    , decltype(_impl_.inbound_){nullptr}
  };
}

RtcStats_InboundRtp::~RtcStats_InboundRtp() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.InboundRtp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_InboundRtp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.stream_;
  if (this != internal_default_instance()) delete _impl_.received_;
  if (this != internal_default_instance()) delete _impl_.inbound_;
}

void RtcStats_InboundRtp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_InboundRtp::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.InboundRtp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.received_ != nullptr);
      _impl_.received_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.inbound_ != nullptr);
      _impl_.inbound_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_InboundRtp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RtpStreamStats stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.ReceivedRtpStreamStats received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.InboundRtpStreamStats inbound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inbound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_InboundRtp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.InboundRtp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RtpStreamStats stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.ReceivedRtpStreamStats received = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::received(this),
        _Internal::received(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.InboundRtpStreamStats inbound = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::inbound(this),
        _Internal::inbound(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.InboundRtp)
  return target;
}

size_t RtcStats_InboundRtp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.InboundRtp)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_stream()) {
    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_received()) {
    // required .livekit.proto.ReceivedRtpStreamStats received = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.received_);
  }

  if (_internal_has_inbound()) {
    // required .livekit.proto.InboundRtpStreamStats inbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inbound_);
  }

  return total_size;
}
size_t RtcStats_InboundRtp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.InboundRtp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required .livekit.proto.ReceivedRtpStreamStats received = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.received_);

    // required .livekit.proto.InboundRtpStreamStats inbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inbound_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_InboundRtp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_InboundRtp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_InboundRtp::GetClassData() const { return &_class_data_; }


void RtcStats_InboundRtp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_InboundRtp*>(&to_msg);
  auto& from = static_cast<const RtcStats_InboundRtp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.InboundRtp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::livekit::proto::RtpStreamStats::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_received()->::livekit::proto::ReceivedRtpStreamStats::MergeFrom(
          from._internal_received());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_inbound()->::livekit::proto::InboundRtpStreamStats::MergeFrom(
          from._internal_inbound());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_InboundRtp::CopyFrom(const RtcStats_InboundRtp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.InboundRtp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_InboundRtp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  if (_internal_has_received()) {
    if (!_impl_.received_->IsInitialized()) return false;
  }
  if (_internal_has_inbound()) {
    if (!_impl_.inbound_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_InboundRtp::InternalSwap(RtcStats_InboundRtp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_InboundRtp, _impl_.inbound_)
      + sizeof(RtcStats_InboundRtp::_impl_.inbound_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_InboundRtp, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_InboundRtp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[1]);
}

// ===================================================================

class RtcStats_OutboundRtp::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_OutboundRtp>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_OutboundRtp* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RtpStreamStats& stream(const RtcStats_OutboundRtp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::SentRtpStreamStats& sent(const RtcStats_OutboundRtp* msg);
  static void set_has_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::OutboundRtpStreamStats& outbound(const RtcStats_OutboundRtp* msg);
  static void set_has_outbound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_OutboundRtp::_Internal::rtc(const RtcStats_OutboundRtp* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::RtpStreamStats&
RtcStats_OutboundRtp::_Internal::stream(const RtcStats_OutboundRtp* msg) {
  return *msg->_impl_.stream_;
}
const ::livekit::proto::SentRtpStreamStats&
RtcStats_OutboundRtp::_Internal::sent(const RtcStats_OutboundRtp* msg) {
  return *msg->_impl_.sent_;
}
const ::livekit::proto::OutboundRtpStreamStats&
RtcStats_OutboundRtp::_Internal::outbound(const RtcStats_OutboundRtp* msg) {
  return *msg->_impl_.outbound_;
}
RtcStats_OutboundRtp::RtcStats_OutboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.OutboundRtp)
}
RtcStats_OutboundRtp::RtcStats_OutboundRtp(const RtcStats_OutboundRtp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_OutboundRtp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.sent_){nullptr}
    , decltype(_impl_.outbound_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::livekit::proto::RtpStreamStats(*from._impl_.stream_);
  }
  if (from._internal_has_sent()) {
    _this->_impl_.sent_ = new ::livekit::proto::SentRtpStreamStats(*from._impl_.sent_);
  }
  if (from._internal_has_outbound()) {
    _this->_impl_.outbound_ = new ::livekit::proto::OutboundRtpStreamStats(*from._impl_.outbound_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.OutboundRtp)
}

inline void RtcStats_OutboundRtp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.sent_){nullptr}
    , decltype(_impl_.outbound_){nullptr}
  };
}

RtcStats_OutboundRtp::~RtcStats_OutboundRtp() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.OutboundRtp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_OutboundRtp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.stream_;
  if (this != internal_default_instance()) delete _impl_.sent_;
  if (this != internal_default_instance()) delete _impl_.outbound_;
}

void RtcStats_OutboundRtp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_OutboundRtp::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.OutboundRtp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sent_ != nullptr);
      _impl_.sent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.outbound_ != nullptr);
      _impl_.outbound_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_OutboundRtp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RtpStreamStats stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.SentRtpStreamStats sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.OutboundRtpStreamStats outbound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_outbound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_OutboundRtp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.OutboundRtp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RtpStreamStats stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.SentRtpStreamStats sent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sent(this),
        _Internal::sent(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.OutboundRtpStreamStats outbound = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::outbound(this),
        _Internal::outbound(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.OutboundRtp)
  return target;
}

size_t RtcStats_OutboundRtp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.OutboundRtp)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_stream()) {
    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_sent()) {
    // required .livekit.proto.SentRtpStreamStats sent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sent_);
  }

  if (_internal_has_outbound()) {
    // required .livekit.proto.OutboundRtpStreamStats outbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outbound_);
  }

  return total_size;
}
size_t RtcStats_OutboundRtp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.OutboundRtp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required .livekit.proto.SentRtpStreamStats sent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sent_);

    // required .livekit.proto.OutboundRtpStreamStats outbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outbound_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_OutboundRtp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_OutboundRtp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_OutboundRtp::GetClassData() const { return &_class_data_; }


void RtcStats_OutboundRtp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_OutboundRtp*>(&to_msg);
  auto& from = static_cast<const RtcStats_OutboundRtp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.OutboundRtp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::livekit::proto::RtpStreamStats::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sent()->::livekit::proto::SentRtpStreamStats::MergeFrom(
          from._internal_sent());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_outbound()->::livekit::proto::OutboundRtpStreamStats::MergeFrom(
          from._internal_outbound());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_OutboundRtp::CopyFrom(const RtcStats_OutboundRtp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.OutboundRtp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_OutboundRtp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  if (_internal_has_sent()) {
    if (!_impl_.sent_->IsInitialized()) return false;
  }
  if (_internal_has_outbound()) {
    if (!_impl_.outbound_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_OutboundRtp::InternalSwap(RtcStats_OutboundRtp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_OutboundRtp, _impl_.outbound_)
      + sizeof(RtcStats_OutboundRtp::_impl_.outbound_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_OutboundRtp, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_OutboundRtp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[2]);
}

// ===================================================================

class RtcStats_RemoteInboundRtp::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_RemoteInboundRtp>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_RemoteInboundRtp* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RtpStreamStats& stream(const RtcStats_RemoteInboundRtp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::ReceivedRtpStreamStats& received(const RtcStats_RemoteInboundRtp* msg);
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::RemoteInboundRtpStreamStats& remote_inbound(const RtcStats_RemoteInboundRtp* msg);
  static void set_has_remote_inbound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_RemoteInboundRtp::_Internal::rtc(const RtcStats_RemoteInboundRtp* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::RtpStreamStats&
RtcStats_RemoteInboundRtp::_Internal::stream(const RtcStats_RemoteInboundRtp* msg) {
  return *msg->_impl_.stream_;
}
const ::livekit::proto::ReceivedRtpStreamStats&
RtcStats_RemoteInboundRtp::_Internal::received(const RtcStats_RemoteInboundRtp* msg) {
  return *msg->_impl_.received_;
}
const ::livekit::proto::RemoteInboundRtpStreamStats&
RtcStats_RemoteInboundRtp::_Internal::remote_inbound(const RtcStats_RemoteInboundRtp* msg) {
  return *msg->_impl_.remote_inbound_;
}
RtcStats_RemoteInboundRtp::RtcStats_RemoteInboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.RemoteInboundRtp)
}
RtcStats_RemoteInboundRtp::RtcStats_RemoteInboundRtp(const RtcStats_RemoteInboundRtp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_RemoteInboundRtp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.received_){nullptr}
    , decltype(_impl_.remote_inbound_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::livekit::proto::RtpStreamStats(*from._impl_.stream_);
  }
  if (from._internal_has_received()) {
    _this->_impl_.received_ = new ::livekit::proto::ReceivedRtpStreamStats(*from._impl_.received_);
  }
  if (from._internal_has_remote_inbound()) {
    _this->_impl_.remote_inbound_ = new ::livekit::proto::RemoteInboundRtpStreamStats(*from._impl_.remote_inbound_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.RemoteInboundRtp)
}

inline void RtcStats_RemoteInboundRtp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.received_){nullptr}
    , decltype(_impl_.remote_inbound_){nullptr}
  };
}

RtcStats_RemoteInboundRtp::~RtcStats_RemoteInboundRtp() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.RemoteInboundRtp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_RemoteInboundRtp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.stream_;
  if (this != internal_default_instance()) delete _impl_.received_;
  if (this != internal_default_instance()) delete _impl_.remote_inbound_;
}

void RtcStats_RemoteInboundRtp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_RemoteInboundRtp::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.RemoteInboundRtp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.received_ != nullptr);
      _impl_.received_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.remote_inbound_ != nullptr);
      _impl_.remote_inbound_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_RemoteInboundRtp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RtpStreamStats stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.ReceivedRtpStreamStats received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_inbound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_RemoteInboundRtp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.RemoteInboundRtp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RtpStreamStats stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.ReceivedRtpStreamStats received = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::received(this),
        _Internal::received(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::remote_inbound(this),
        _Internal::remote_inbound(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.RemoteInboundRtp)
  return target;
}

size_t RtcStats_RemoteInboundRtp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.RemoteInboundRtp)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_stream()) {
    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_received()) {
    // required .livekit.proto.ReceivedRtpStreamStats received = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.received_);
  }

  if (_internal_has_remote_inbound()) {
    // required .livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_inbound_);
  }

  return total_size;
}
size_t RtcStats_RemoteInboundRtp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.RemoteInboundRtp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required .livekit.proto.ReceivedRtpStreamStats received = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.received_);

    // required .livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_inbound_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_RemoteInboundRtp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_RemoteInboundRtp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_RemoteInboundRtp::GetClassData() const { return &_class_data_; }


void RtcStats_RemoteInboundRtp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_RemoteInboundRtp*>(&to_msg);
  auto& from = static_cast<const RtcStats_RemoteInboundRtp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.RemoteInboundRtp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::livekit::proto::RtpStreamStats::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_received()->::livekit::proto::ReceivedRtpStreamStats::MergeFrom(
          from._internal_received());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_remote_inbound()->::livekit::proto::RemoteInboundRtpStreamStats::MergeFrom(
          from._internal_remote_inbound());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_RemoteInboundRtp::CopyFrom(const RtcStats_RemoteInboundRtp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.RemoteInboundRtp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_RemoteInboundRtp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  if (_internal_has_received()) {
    if (!_impl_.received_->IsInitialized()) return false;
  }
  if (_internal_has_remote_inbound()) {
    if (!_impl_.remote_inbound_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_RemoteInboundRtp::InternalSwap(RtcStats_RemoteInboundRtp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_RemoteInboundRtp, _impl_.remote_inbound_)
      + sizeof(RtcStats_RemoteInboundRtp::_impl_.remote_inbound_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_RemoteInboundRtp, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_RemoteInboundRtp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[3]);
}

// ===================================================================

class RtcStats_RemoteOutboundRtp::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_RemoteOutboundRtp>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_RemoteOutboundRtp* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RtpStreamStats& stream(const RtcStats_RemoteOutboundRtp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::SentRtpStreamStats& sent(const RtcStats_RemoteOutboundRtp* msg);
  static void set_has_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::RemoteOutboundRtpStreamStats& remote_outbound(const RtcStats_RemoteOutboundRtp* msg);
  static void set_has_remote_outbound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_RemoteOutboundRtp::_Internal::rtc(const RtcStats_RemoteOutboundRtp* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::RtpStreamStats&
RtcStats_RemoteOutboundRtp::_Internal::stream(const RtcStats_RemoteOutboundRtp* msg) {
  return *msg->_impl_.stream_;
}
const ::livekit::proto::SentRtpStreamStats&
RtcStats_RemoteOutboundRtp::_Internal::sent(const RtcStats_RemoteOutboundRtp* msg) {
  return *msg->_impl_.sent_;
}
const ::livekit::proto::RemoteOutboundRtpStreamStats&
RtcStats_RemoteOutboundRtp::_Internal::remote_outbound(const RtcStats_RemoteOutboundRtp* msg) {
  return *msg->_impl_.remote_outbound_;
}
RtcStats_RemoteOutboundRtp::RtcStats_RemoteOutboundRtp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.RemoteOutboundRtp)
}
RtcStats_RemoteOutboundRtp::RtcStats_RemoteOutboundRtp(const RtcStats_RemoteOutboundRtp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_RemoteOutboundRtp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.sent_){nullptr}
    , decltype(_impl_.remote_outbound_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::livekit::proto::RtpStreamStats(*from._impl_.stream_);
  }
  if (from._internal_has_sent()) {
    _this->_impl_.sent_ = new ::livekit::proto::SentRtpStreamStats(*from._impl_.sent_);
  }
  if (from._internal_has_remote_outbound()) {
    _this->_impl_.remote_outbound_ = new ::livekit::proto::RemoteOutboundRtpStreamStats(*from._impl_.remote_outbound_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.RemoteOutboundRtp)
}

inline void RtcStats_RemoteOutboundRtp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.sent_){nullptr}
    , decltype(_impl_.remote_outbound_){nullptr}
  };
}

RtcStats_RemoteOutboundRtp::~RtcStats_RemoteOutboundRtp() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.RemoteOutboundRtp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_RemoteOutboundRtp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.stream_;
  if (this != internal_default_instance()) delete _impl_.sent_;
  if (this != internal_default_instance()) delete _impl_.remote_outbound_;
}

void RtcStats_RemoteOutboundRtp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_RemoteOutboundRtp::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.RemoteOutboundRtp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sent_ != nullptr);
      _impl_.sent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.remote_outbound_ != nullptr);
      _impl_.remote_outbound_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_RemoteOutboundRtp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RtpStreamStats stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.SentRtpStreamStats sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_outbound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_RemoteOutboundRtp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.RemoteOutboundRtp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RtpStreamStats stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.SentRtpStreamStats sent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sent(this),
        _Internal::sent(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::remote_outbound(this),
        _Internal::remote_outbound(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.RemoteOutboundRtp)
  return target;
}

size_t RtcStats_RemoteOutboundRtp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.RemoteOutboundRtp)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_stream()) {
    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_sent()) {
    // required .livekit.proto.SentRtpStreamStats sent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sent_);
  }

  if (_internal_has_remote_outbound()) {
    // required .livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_outbound_);
  }

  return total_size;
}
size_t RtcStats_RemoteOutboundRtp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.RemoteOutboundRtp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.RtpStreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required .livekit.proto.SentRtpStreamStats sent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sent_);

    // required .livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_outbound_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_RemoteOutboundRtp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_RemoteOutboundRtp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_RemoteOutboundRtp::GetClassData() const { return &_class_data_; }


void RtcStats_RemoteOutboundRtp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_RemoteOutboundRtp*>(&to_msg);
  auto& from = static_cast<const RtcStats_RemoteOutboundRtp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.RemoteOutboundRtp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::livekit::proto::RtpStreamStats::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sent()->::livekit::proto::SentRtpStreamStats::MergeFrom(
          from._internal_sent());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_remote_outbound()->::livekit::proto::RemoteOutboundRtpStreamStats::MergeFrom(
          from._internal_remote_outbound());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_RemoteOutboundRtp::CopyFrom(const RtcStats_RemoteOutboundRtp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.RemoteOutboundRtp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_RemoteOutboundRtp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  if (_internal_has_sent()) {
    if (!_impl_.sent_->IsInitialized()) return false;
  }
  if (_internal_has_remote_outbound()) {
    if (!_impl_.remote_outbound_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_RemoteOutboundRtp::InternalSwap(RtcStats_RemoteOutboundRtp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_RemoteOutboundRtp, _impl_.remote_outbound_)
      + sizeof(RtcStats_RemoteOutboundRtp::_impl_.remote_outbound_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_RemoteOutboundRtp, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_RemoteOutboundRtp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[4]);
}

// ===================================================================

class RtcStats_MediaSource::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_MediaSource>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_MediaSource* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::MediaSourceStats& source(const RtcStats_MediaSource* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::AudioSourceStats& audio(const RtcStats_MediaSource* msg);
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::VideoSourceStats& video(const RtcStats_MediaSource* msg);
  static void set_has_video(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_MediaSource::_Internal::rtc(const RtcStats_MediaSource* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::MediaSourceStats&
RtcStats_MediaSource::_Internal::source(const RtcStats_MediaSource* msg) {
  return *msg->_impl_.source_;
}
const ::livekit::proto::AudioSourceStats&
RtcStats_MediaSource::_Internal::audio(const RtcStats_MediaSource* msg) {
  return *msg->_impl_.audio_;
}
const ::livekit::proto::VideoSourceStats&
RtcStats_MediaSource::_Internal::video(const RtcStats_MediaSource* msg) {
  return *msg->_impl_.video_;
}
RtcStats_MediaSource::RtcStats_MediaSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.MediaSource)
}
RtcStats_MediaSource::RtcStats_MediaSource(const RtcStats_MediaSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_MediaSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.audio_){nullptr}
    , decltype(_impl_.video_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::livekit::proto::MediaSourceStats(*from._impl_.source_);
  }
  if (from._internal_has_audio()) {
    _this->_impl_.audio_ = new ::livekit::proto::AudioSourceStats(*from._impl_.audio_);
  }
  if (from._internal_has_video()) {
    _this->_impl_.video_ = new ::livekit::proto::VideoSourceStats(*from._impl_.video_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.MediaSource)
}

inline void RtcStats_MediaSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.audio_){nullptr}
    , decltype(_impl_.video_){nullptr}
  };
}

RtcStats_MediaSource::~RtcStats_MediaSource() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.MediaSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_MediaSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.audio_;
  if (this != internal_default_instance()) delete _impl_.video_;
}

void RtcStats_MediaSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_MediaSource::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.MediaSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.source_ != nullptr);
      _impl_.source_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.video_ != nullptr);
      _impl_.video_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_MediaSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.MediaSourceStats source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.AudioSourceStats audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.VideoSourceStats video = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_MediaSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.MediaSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.MediaSourceStats source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.AudioSourceStats audio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.VideoSourceStats video = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.MediaSource)
  return target;
}

size_t RtcStats_MediaSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.MediaSource)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_source()) {
    // required .livekit.proto.MediaSourceStats source = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  if (_internal_has_audio()) {
    // required .livekit.proto.AudioSourceStats audio = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_);
  }

  if (_internal_has_video()) {
    // required .livekit.proto.VideoSourceStats video = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);
  }

  return total_size;
}
size_t RtcStats_MediaSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.MediaSource)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.MediaSourceStats source = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);

    // required .livekit.proto.AudioSourceStats audio = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_);

    // required .livekit.proto.VideoSourceStats video = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_MediaSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_MediaSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_MediaSource::GetClassData() const { return &_class_data_; }


void RtcStats_MediaSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_MediaSource*>(&to_msg);
  auto& from = static_cast<const RtcStats_MediaSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.MediaSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_source()->::livekit::proto::MediaSourceStats::MergeFrom(
          from._internal_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_audio()->::livekit::proto::AudioSourceStats::MergeFrom(
          from._internal_audio());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_video()->::livekit::proto::VideoSourceStats::MergeFrom(
          from._internal_video());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_MediaSource::CopyFrom(const RtcStats_MediaSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.MediaSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_MediaSource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_source()) {
    if (!_impl_.source_->IsInitialized()) return false;
  }
  if (_internal_has_audio()) {
    if (!_impl_.audio_->IsInitialized()) return false;
  }
  if (_internal_has_video()) {
    if (!_impl_.video_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_MediaSource::InternalSwap(RtcStats_MediaSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_MediaSource, _impl_.video_)
      + sizeof(RtcStats_MediaSource::_impl_.video_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_MediaSource, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_MediaSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[5]);
}

// ===================================================================

class RtcStats_MediaPlayout::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_MediaPlayout>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_MediaPlayout* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::AudioPlayoutStats& audio_playout(const RtcStats_MediaPlayout* msg);
  static void set_has_audio_playout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_MediaPlayout::_Internal::rtc(const RtcStats_MediaPlayout* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::AudioPlayoutStats&
RtcStats_MediaPlayout::_Internal::audio_playout(const RtcStats_MediaPlayout* msg) {
  return *msg->_impl_.audio_playout_;
}
RtcStats_MediaPlayout::RtcStats_MediaPlayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.MediaPlayout)
}
RtcStats_MediaPlayout::RtcStats_MediaPlayout(const RtcStats_MediaPlayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_MediaPlayout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.audio_playout_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_audio_playout()) {
    _this->_impl_.audio_playout_ = new ::livekit::proto::AudioPlayoutStats(*from._impl_.audio_playout_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.MediaPlayout)
}

inline void RtcStats_MediaPlayout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.audio_playout_){nullptr}
  };
}

RtcStats_MediaPlayout::~RtcStats_MediaPlayout() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.MediaPlayout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_MediaPlayout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.audio_playout_;
}

void RtcStats_MediaPlayout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_MediaPlayout::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.MediaPlayout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.audio_playout_ != nullptr);
      _impl_.audio_playout_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_MediaPlayout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.AudioPlayoutStats audio_playout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_playout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_MediaPlayout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.MediaPlayout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.AudioPlayoutStats audio_playout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::audio_playout(this),
        _Internal::audio_playout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.MediaPlayout)
  return target;
}

size_t RtcStats_MediaPlayout::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.MediaPlayout)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_audio_playout()) {
    // required .livekit.proto.AudioPlayoutStats audio_playout = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_playout_);
  }

  return total_size;
}
size_t RtcStats_MediaPlayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.MediaPlayout)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.AudioPlayoutStats audio_playout = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_playout_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_MediaPlayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_MediaPlayout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_MediaPlayout::GetClassData() const { return &_class_data_; }


void RtcStats_MediaPlayout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_MediaPlayout*>(&to_msg);
  auto& from = static_cast<const RtcStats_MediaPlayout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.MediaPlayout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_audio_playout()->::livekit::proto::AudioPlayoutStats::MergeFrom(
          from._internal_audio_playout());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_MediaPlayout::CopyFrom(const RtcStats_MediaPlayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.MediaPlayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_MediaPlayout::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_audio_playout()) {
    if (!_impl_.audio_playout_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_MediaPlayout::InternalSwap(RtcStats_MediaPlayout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_MediaPlayout, _impl_.audio_playout_)
      + sizeof(RtcStats_MediaPlayout::_impl_.audio_playout_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_MediaPlayout, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_MediaPlayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[6]);
}

// ===================================================================

class RtcStats_PeerConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_PeerConnection>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_PeerConnection* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::PeerConnectionStats& pc(const RtcStats_PeerConnection* msg);
  static void set_has_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_PeerConnection::_Internal::rtc(const RtcStats_PeerConnection* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::PeerConnectionStats&
RtcStats_PeerConnection::_Internal::pc(const RtcStats_PeerConnection* msg) {
  return *msg->_impl_.pc_;
}
RtcStats_PeerConnection::RtcStats_PeerConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.PeerConnection)
}
RtcStats_PeerConnection::RtcStats_PeerConnection(const RtcStats_PeerConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_PeerConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.pc_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_pc()) {
    _this->_impl_.pc_ = new ::livekit::proto::PeerConnectionStats(*from._impl_.pc_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.PeerConnection)
}

inline void RtcStats_PeerConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.pc_){nullptr}
  };
}

RtcStats_PeerConnection::~RtcStats_PeerConnection() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.PeerConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_PeerConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.pc_;
}

void RtcStats_PeerConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_PeerConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.PeerConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pc_ != nullptr);
      _impl_.pc_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_PeerConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.PeerConnectionStats pc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_PeerConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.PeerConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.PeerConnectionStats pc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pc(this),
        _Internal::pc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.PeerConnection)
  return target;
}

size_t RtcStats_PeerConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.PeerConnection)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_pc()) {
    // required .livekit.proto.PeerConnectionStats pc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pc_);
  }

  return total_size;
}
size_t RtcStats_PeerConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.PeerConnection)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.PeerConnectionStats pc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pc_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_PeerConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_PeerConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_PeerConnection::GetClassData() const { return &_class_data_; }


void RtcStats_PeerConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_PeerConnection*>(&to_msg);
  auto& from = static_cast<const RtcStats_PeerConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.PeerConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pc()->::livekit::proto::PeerConnectionStats::MergeFrom(
          from._internal_pc());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_PeerConnection::CopyFrom(const RtcStats_PeerConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.PeerConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_PeerConnection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_pc()) {
    if (!_impl_.pc_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_PeerConnection::InternalSwap(RtcStats_PeerConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_PeerConnection, _impl_.pc_)
      + sizeof(RtcStats_PeerConnection::_impl_.pc_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_PeerConnection, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_PeerConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[7]);
}

// ===================================================================

class RtcStats_DataChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_DataChannel>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_DataChannel* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::DataChannelStats& dc(const RtcStats_DataChannel* msg);
  static void set_has_dc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_DataChannel::_Internal::rtc(const RtcStats_DataChannel* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::DataChannelStats&
RtcStats_DataChannel::_Internal::dc(const RtcStats_DataChannel* msg) {
  return *msg->_impl_.dc_;
}
RtcStats_DataChannel::RtcStats_DataChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.DataChannel)
}
RtcStats_DataChannel::RtcStats_DataChannel(const RtcStats_DataChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_DataChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.dc_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_dc()) {
    _this->_impl_.dc_ = new ::livekit::proto::DataChannelStats(*from._impl_.dc_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.DataChannel)
}

inline void RtcStats_DataChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.dc_){nullptr}
  };
}

RtcStats_DataChannel::~RtcStats_DataChannel() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.DataChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_DataChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.dc_;
}

void RtcStats_DataChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_DataChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.DataChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dc_ != nullptr);
      _impl_.dc_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_DataChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataChannelStats dc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_DataChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.DataChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.DataChannelStats dc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dc(this),
        _Internal::dc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.DataChannel)
  return target;
}

size_t RtcStats_DataChannel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.DataChannel)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_dc()) {
    // required .livekit.proto.DataChannelStats dc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dc_);
  }

  return total_size;
}
size_t RtcStats_DataChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.DataChannel)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.DataChannelStats dc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dc_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_DataChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_DataChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_DataChannel::GetClassData() const { return &_class_data_; }


void RtcStats_DataChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_DataChannel*>(&to_msg);
  auto& from = static_cast<const RtcStats_DataChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.DataChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dc()->::livekit::proto::DataChannelStats::MergeFrom(
          from._internal_dc());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_DataChannel::CopyFrom(const RtcStats_DataChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.DataChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_DataChannel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_dc()) {
    if (!_impl_.dc_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_DataChannel::InternalSwap(RtcStats_DataChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_DataChannel, _impl_.dc_)
      + sizeof(RtcStats_DataChannel::_impl_.dc_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_DataChannel, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_DataChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[8]);
}

// ===================================================================

class RtcStats_Transport::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_Transport>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_Transport* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::TransportStats& transport(const RtcStats_Transport* msg);
  static void set_has_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_Transport::_Internal::rtc(const RtcStats_Transport* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::TransportStats&
RtcStats_Transport::_Internal::transport(const RtcStats_Transport* msg) {
  return *msg->_impl_.transport_;
}
RtcStats_Transport::RtcStats_Transport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.Transport)
}
RtcStats_Transport::RtcStats_Transport(const RtcStats_Transport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_Transport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.transport_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_transport()) {
    _this->_impl_.transport_ = new ::livekit::proto::TransportStats(*from._impl_.transport_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.Transport)
}

inline void RtcStats_Transport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.transport_){nullptr}
  };
}

RtcStats_Transport::~RtcStats_Transport() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.Transport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_Transport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.transport_;
}

void RtcStats_Transport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_Transport::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.Transport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.transport_ != nullptr);
      _impl_.transport_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_Transport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TransportStats transport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_Transport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.Transport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.TransportStats transport = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transport(this),
        _Internal::transport(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.Transport)
  return target;
}

size_t RtcStats_Transport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.Transport)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_transport()) {
    // required .livekit.proto.TransportStats transport = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transport_);
  }

  return total_size;
}
size_t RtcStats_Transport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.Transport)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.TransportStats transport = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transport_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_Transport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_Transport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_Transport::GetClassData() const { return &_class_data_; }


void RtcStats_Transport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_Transport*>(&to_msg);
  auto& from = static_cast<const RtcStats_Transport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.Transport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transport()->::livekit::proto::TransportStats::MergeFrom(
          from._internal_transport());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_Transport::CopyFrom(const RtcStats_Transport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_Transport::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_transport()) {
    if (!_impl_.transport_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_Transport::InternalSwap(RtcStats_Transport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_Transport, _impl_.transport_)
      + sizeof(RtcStats_Transport::_impl_.transport_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_Transport, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_Transport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[9]);
}

// ===================================================================

class RtcStats_CandidatePair::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_CandidatePair>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_CandidatePair* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::CandidatePairStats& candidate_pair(const RtcStats_CandidatePair* msg);
  static void set_has_candidate_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_CandidatePair::_Internal::rtc(const RtcStats_CandidatePair* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::CandidatePairStats&
RtcStats_CandidatePair::_Internal::candidate_pair(const RtcStats_CandidatePair* msg) {
  return *msg->_impl_.candidate_pair_;
}
RtcStats_CandidatePair::RtcStats_CandidatePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.CandidatePair)
}
RtcStats_CandidatePair::RtcStats_CandidatePair(const RtcStats_CandidatePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_CandidatePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.candidate_pair_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_candidate_pair()) {
    _this->_impl_.candidate_pair_ = new ::livekit::proto::CandidatePairStats(*from._impl_.candidate_pair_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.CandidatePair)
}

inline void RtcStats_CandidatePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.candidate_pair_){nullptr}
  };
}

RtcStats_CandidatePair::~RtcStats_CandidatePair() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.CandidatePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_CandidatePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.candidate_pair_;
}

void RtcStats_CandidatePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_CandidatePair::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.CandidatePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.candidate_pair_ != nullptr);
      _impl_.candidate_pair_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_CandidatePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.CandidatePairStats candidate_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_pair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_CandidatePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.CandidatePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.CandidatePairStats candidate_pair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::candidate_pair(this),
        _Internal::candidate_pair(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.CandidatePair)
  return target;
}

size_t RtcStats_CandidatePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.CandidatePair)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_candidate_pair()) {
    // required .livekit.proto.CandidatePairStats candidate_pair = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_pair_);
  }

  return total_size;
}
size_t RtcStats_CandidatePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.CandidatePair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.CandidatePairStats candidate_pair = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_pair_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_CandidatePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_CandidatePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_CandidatePair::GetClassData() const { return &_class_data_; }


void RtcStats_CandidatePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_CandidatePair*>(&to_msg);
  auto& from = static_cast<const RtcStats_CandidatePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.CandidatePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_candidate_pair()->::livekit::proto::CandidatePairStats::MergeFrom(
          from._internal_candidate_pair());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_CandidatePair::CopyFrom(const RtcStats_CandidatePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.CandidatePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_CandidatePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_candidate_pair()) {
    if (!_impl_.candidate_pair_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_CandidatePair::InternalSwap(RtcStats_CandidatePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_CandidatePair, _impl_.candidate_pair_)
      + sizeof(RtcStats_CandidatePair::_impl_.candidate_pair_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_CandidatePair, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_CandidatePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[10]);
}

// ===================================================================

class RtcStats_LocalCandidate::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_LocalCandidate>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_LocalCandidate* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::IceCandidateStats& candidate(const RtcStats_LocalCandidate* msg);
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_LocalCandidate::_Internal::rtc(const RtcStats_LocalCandidate* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::IceCandidateStats&
RtcStats_LocalCandidate::_Internal::candidate(const RtcStats_LocalCandidate* msg) {
  return *msg->_impl_.candidate_;
}
RtcStats_LocalCandidate::RtcStats_LocalCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.LocalCandidate)
}
RtcStats_LocalCandidate::RtcStats_LocalCandidate(const RtcStats_LocalCandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_LocalCandidate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.candidate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_candidate()) {
    _this->_impl_.candidate_ = new ::livekit::proto::IceCandidateStats(*from._impl_.candidate_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.LocalCandidate)
}

inline void RtcStats_LocalCandidate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.candidate_){nullptr}
  };
}

RtcStats_LocalCandidate::~RtcStats_LocalCandidate() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.LocalCandidate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_LocalCandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.candidate_;
}

void RtcStats_LocalCandidate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_LocalCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.LocalCandidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.candidate_ != nullptr);
      _impl_.candidate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_LocalCandidate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.IceCandidateStats candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_LocalCandidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.LocalCandidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.IceCandidateStats candidate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::candidate(this),
        _Internal::candidate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.LocalCandidate)
  return target;
}

size_t RtcStats_LocalCandidate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.LocalCandidate)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_candidate()) {
    // required .livekit.proto.IceCandidateStats candidate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);
  }

  return total_size;
}
size_t RtcStats_LocalCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.LocalCandidate)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.IceCandidateStats candidate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_LocalCandidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_LocalCandidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_LocalCandidate::GetClassData() const { return &_class_data_; }


void RtcStats_LocalCandidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_LocalCandidate*>(&to_msg);
  auto& from = static_cast<const RtcStats_LocalCandidate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.LocalCandidate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_candidate()->::livekit::proto::IceCandidateStats::MergeFrom(
          from._internal_candidate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_LocalCandidate::CopyFrom(const RtcStats_LocalCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.LocalCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_LocalCandidate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_candidate()) {
    if (!_impl_.candidate_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_LocalCandidate::InternalSwap(RtcStats_LocalCandidate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_LocalCandidate, _impl_.candidate_)
      + sizeof(RtcStats_LocalCandidate::_impl_.candidate_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_LocalCandidate, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_LocalCandidate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[11]);
}

// ===================================================================

class RtcStats_RemoteCandidate::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_RemoteCandidate>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_RemoteCandidate* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::IceCandidateStats& candidate(const RtcStats_RemoteCandidate* msg);
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_RemoteCandidate::_Internal::rtc(const RtcStats_RemoteCandidate* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::IceCandidateStats&
RtcStats_RemoteCandidate::_Internal::candidate(const RtcStats_RemoteCandidate* msg) {
  return *msg->_impl_.candidate_;
}
RtcStats_RemoteCandidate::RtcStats_RemoteCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.RemoteCandidate)
}
RtcStats_RemoteCandidate::RtcStats_RemoteCandidate(const RtcStats_RemoteCandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_RemoteCandidate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.candidate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_candidate()) {
    _this->_impl_.candidate_ = new ::livekit::proto::IceCandidateStats(*from._impl_.candidate_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.RemoteCandidate)
}

inline void RtcStats_RemoteCandidate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.candidate_){nullptr}
  };
}

RtcStats_RemoteCandidate::~RtcStats_RemoteCandidate() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.RemoteCandidate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_RemoteCandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.candidate_;
}

void RtcStats_RemoteCandidate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_RemoteCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.RemoteCandidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.candidate_ != nullptr);
      _impl_.candidate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_RemoteCandidate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.IceCandidateStats candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_RemoteCandidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.RemoteCandidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.IceCandidateStats candidate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::candidate(this),
        _Internal::candidate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.RemoteCandidate)
  return target;
}

size_t RtcStats_RemoteCandidate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.RemoteCandidate)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_candidate()) {
    // required .livekit.proto.IceCandidateStats candidate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);
  }

  return total_size;
}
size_t RtcStats_RemoteCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.RemoteCandidate)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.IceCandidateStats candidate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_RemoteCandidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_RemoteCandidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_RemoteCandidate::GetClassData() const { return &_class_data_; }


void RtcStats_RemoteCandidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_RemoteCandidate*>(&to_msg);
  auto& from = static_cast<const RtcStats_RemoteCandidate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.RemoteCandidate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_candidate()->::livekit::proto::IceCandidateStats::MergeFrom(
          from._internal_candidate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_RemoteCandidate::CopyFrom(const RtcStats_RemoteCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.RemoteCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_RemoteCandidate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_candidate()) {
    if (!_impl_.candidate_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_RemoteCandidate::InternalSwap(RtcStats_RemoteCandidate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_RemoteCandidate, _impl_.candidate_)
      + sizeof(RtcStats_RemoteCandidate::_impl_.candidate_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_RemoteCandidate, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_RemoteCandidate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[12]);
}

// ===================================================================

class RtcStats_Certificate::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_Certificate>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_Certificate* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::CertificateStats& certificate(const RtcStats_Certificate* msg);
  static void set_has_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_Certificate::_Internal::rtc(const RtcStats_Certificate* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::CertificateStats&
RtcStats_Certificate::_Internal::certificate(const RtcStats_Certificate* msg) {
  return *msg->_impl_.certificate_;
}
RtcStats_Certificate::RtcStats_Certificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.Certificate)
}
RtcStats_Certificate::RtcStats_Certificate(const RtcStats_Certificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_Certificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.certificate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_certificate()) {
    _this->_impl_.certificate_ = new ::livekit::proto::CertificateStats(*from._impl_.certificate_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.Certificate)
}

inline void RtcStats_Certificate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.certificate_){nullptr}
  };
}

RtcStats_Certificate::~RtcStats_Certificate() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.Certificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_Certificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.certificate_;
}

void RtcStats_Certificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_Certificate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.Certificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.certificate_ != nullptr);
      _impl_.certificate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_Certificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.CertificateStats certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_certificate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_Certificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.Certificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.CertificateStats certificate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::certificate(this),
        _Internal::certificate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.Certificate)
  return target;
}

size_t RtcStats_Certificate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.Certificate)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_certificate()) {
    // required .livekit.proto.CertificateStats certificate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.certificate_);
  }

  return total_size;
}
size_t RtcStats_Certificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.Certificate)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.CertificateStats certificate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.certificate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_Certificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_Certificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_Certificate::GetClassData() const { return &_class_data_; }


void RtcStats_Certificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_Certificate*>(&to_msg);
  auto& from = static_cast<const RtcStats_Certificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.Certificate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_certificate()->::livekit::proto::CertificateStats::MergeFrom(
          from._internal_certificate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_Certificate::CopyFrom(const RtcStats_Certificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_Certificate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_certificate()) {
    if (!_impl_.certificate_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_Certificate::InternalSwap(RtcStats_Certificate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_Certificate, _impl_.certificate_)
      + sizeof(RtcStats_Certificate::_impl_.certificate_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_Certificate, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_Certificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[13]);
}

// ===================================================================

class RtcStats_Stream::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStats_Stream>()._impl_._has_bits_);
  static const ::livekit::proto::RtcStatsData& rtc(const RtcStats_Stream* msg);
  static void set_has_rtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::StreamStats& stream(const RtcStats_Stream* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::RtcStatsData&
RtcStats_Stream::_Internal::rtc(const RtcStats_Stream* msg) {
  return *msg->_impl_.rtc_;
}
const ::livekit::proto::StreamStats&
RtcStats_Stream::_Internal::stream(const RtcStats_Stream* msg) {
  return *msg->_impl_.stream_;
}
RtcStats_Stream::RtcStats_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.Stream)
}
RtcStats_Stream::RtcStats_Stream(const RtcStats_Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats_Stream* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rtc()) {
    _this->_impl_.rtc_ = new ::livekit::proto::RtcStatsData(*from._impl_.rtc_);
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::livekit::proto::StreamStats(*from._impl_.stream_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.Stream)
}

inline void RtcStats_Stream::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtc_){nullptr}
    , decltype(_impl_.stream_){nullptr}
  };
}

RtcStats_Stream::~RtcStats_Stream() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats.Stream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats_Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rtc_;
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void RtcStats_Stream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats_Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats.Stream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rtc_ != nullptr);
      _impl_.rtc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats_Stream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.RtcStatsData rtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.StreamStats stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats_Stream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats.Stream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.RtcStatsData rtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rtc(this),
        _Internal::rtc(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.StreamStats stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats.Stream)
  return target;
}

size_t RtcStats_Stream::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStats.Stream)
  size_t total_size = 0;

  if (_internal_has_rtc()) {
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);
  }

  if (_internal_has_stream()) {
    // required .livekit.proto.StreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  return total_size;
}
size_t RtcStats_Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats.Stream)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.RtcStatsData rtc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtc_);

    // required .livekit.proto.StreamStats stream = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_Stream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats_Stream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_Stream::GetClassData() const { return &_class_data_; }


void RtcStats_Stream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats_Stream*>(&to_msg);
  auto& from = static_cast<const RtcStats_Stream&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats.Stream)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rtc()->::livekit::proto::RtcStatsData::MergeFrom(
          from._internal_rtc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::livekit::proto::StreamStats::MergeFrom(
          from._internal_stream());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats_Stream::CopyFrom(const RtcStats_Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats_Stream::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rtc()) {
    if (!_impl_.rtc_->IsInitialized()) return false;
  }
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void RtcStats_Stream::InternalSwap(RtcStats_Stream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcStats_Stream, _impl_.stream_)
      + sizeof(RtcStats_Stream::_impl_.stream_)
      - PROTOBUF_FIELD_OFFSET(RtcStats_Stream, _impl_.rtc_)>(
          reinterpret_cast<char*>(&_impl_.rtc_),
          reinterpret_cast<char*>(&other->_impl_.rtc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_Stream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[14]);
}

// ===================================================================

class RtcStats_Track::_Internal {
 public:
};

RtcStats_Track::RtcStats_Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats.Track)
}
RtcStats_Track::RtcStats_Track(const RtcStats_Track& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RtcStats_Track* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats.Track)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats_Track::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats_Track::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RtcStats_Track::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[15]);
}

// ===================================================================

class RtcStats::_Internal {
 public:
  static const ::livekit::proto::RtcStats_Codec& codec(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_InboundRtp& inbound_rtp(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_OutboundRtp& outbound_rtp(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_RemoteInboundRtp& remote_inbound_rtp(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_RemoteOutboundRtp& remote_outbound_rtp(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_MediaSource& media_source(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_MediaPlayout& media_playout(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_PeerConnection& peer_connection(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_DataChannel& data_channel(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_Transport& transport(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_CandidatePair& candidate_pair(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_LocalCandidate& local_candidate(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_RemoteCandidate& remote_candidate(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_Certificate& certificate(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_Stream& stream(const RtcStats* msg);
  static const ::livekit::proto::RtcStats_Track& track(const RtcStats* msg);
};

const ::livekit::proto::RtcStats_Codec&
RtcStats::_Internal::codec(const RtcStats* msg) {
  return *msg->_impl_.stats_.codec_;
}
const ::livekit::proto::RtcStats_InboundRtp&
RtcStats::_Internal::inbound_rtp(const RtcStats* msg) {
  return *msg->_impl_.stats_.inbound_rtp_;
}
const ::livekit::proto::RtcStats_OutboundRtp&
RtcStats::_Internal::outbound_rtp(const RtcStats* msg) {
  return *msg->_impl_.stats_.outbound_rtp_;
}
const ::livekit::proto::RtcStats_RemoteInboundRtp&
RtcStats::_Internal::remote_inbound_rtp(const RtcStats* msg) {
  return *msg->_impl_.stats_.remote_inbound_rtp_;
}
const ::livekit::proto::RtcStats_RemoteOutboundRtp&
RtcStats::_Internal::remote_outbound_rtp(const RtcStats* msg) {
  return *msg->_impl_.stats_.remote_outbound_rtp_;
}
const ::livekit::proto::RtcStats_MediaSource&
RtcStats::_Internal::media_source(const RtcStats* msg) {
  return *msg->_impl_.stats_.media_source_;
}
const ::livekit::proto::RtcStats_MediaPlayout&
RtcStats::_Internal::media_playout(const RtcStats* msg) {
  return *msg->_impl_.stats_.media_playout_;
}
const ::livekit::proto::RtcStats_PeerConnection&
RtcStats::_Internal::peer_connection(const RtcStats* msg) {
  return *msg->_impl_.stats_.peer_connection_;
}
const ::livekit::proto::RtcStats_DataChannel&
RtcStats::_Internal::data_channel(const RtcStats* msg) {
  return *msg->_impl_.stats_.data_channel_;
}
const ::livekit::proto::RtcStats_Transport&
RtcStats::_Internal::transport(const RtcStats* msg) {
  return *msg->_impl_.stats_.transport_;
}
const ::livekit::proto::RtcStats_CandidatePair&
RtcStats::_Internal::candidate_pair(const RtcStats* msg) {
  return *msg->_impl_.stats_.candidate_pair_;
}
const ::livekit::proto::RtcStats_LocalCandidate&
RtcStats::_Internal::local_candidate(const RtcStats* msg) {
  return *msg->_impl_.stats_.local_candidate_;
}
const ::livekit::proto::RtcStats_RemoteCandidate&
RtcStats::_Internal::remote_candidate(const RtcStats* msg) {
  return *msg->_impl_.stats_.remote_candidate_;
}
const ::livekit::proto::RtcStats_Certificate&
RtcStats::_Internal::certificate(const RtcStats* msg) {
  return *msg->_impl_.stats_.certificate_;
}
const ::livekit::proto::RtcStats_Stream&
RtcStats::_Internal::stream(const RtcStats* msg) {
  return *msg->_impl_.stats_.stream_;
}
const ::livekit::proto::RtcStats_Track&
RtcStats::_Internal::track(const RtcStats* msg) {
  return *msg->_impl_.stats_.track_;
}
void RtcStats::set_allocated_codec(::livekit::proto::RtcStats_Codec* codec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (codec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(codec);
    if (message_arena != submessage_arena) {
      codec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, codec, submessage_arena);
    }
    set_has_codec();
    _impl_.stats_.codec_ = codec;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.codec)
}
void RtcStats::set_allocated_inbound_rtp(::livekit::proto::RtcStats_InboundRtp* inbound_rtp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (inbound_rtp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inbound_rtp);
    if (message_arena != submessage_arena) {
      inbound_rtp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inbound_rtp, submessage_arena);
    }
    set_has_inbound_rtp();
    _impl_.stats_.inbound_rtp_ = inbound_rtp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.inbound_rtp)
}
void RtcStats::set_allocated_outbound_rtp(::livekit::proto::RtcStats_OutboundRtp* outbound_rtp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (outbound_rtp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outbound_rtp);
    if (message_arena != submessage_arena) {
      outbound_rtp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outbound_rtp, submessage_arena);
    }
    set_has_outbound_rtp();
    _impl_.stats_.outbound_rtp_ = outbound_rtp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.outbound_rtp)
}
void RtcStats::set_allocated_remote_inbound_rtp(::livekit::proto::RtcStats_RemoteInboundRtp* remote_inbound_rtp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (remote_inbound_rtp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remote_inbound_rtp);
    if (message_arena != submessage_arena) {
      remote_inbound_rtp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_inbound_rtp, submessage_arena);
    }
    set_has_remote_inbound_rtp();
    _impl_.stats_.remote_inbound_rtp_ = remote_inbound_rtp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.remote_inbound_rtp)
}
void RtcStats::set_allocated_remote_outbound_rtp(::livekit::proto::RtcStats_RemoteOutboundRtp* remote_outbound_rtp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (remote_outbound_rtp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remote_outbound_rtp);
    if (message_arena != submessage_arena) {
      remote_outbound_rtp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_outbound_rtp, submessage_arena);
    }
    set_has_remote_outbound_rtp();
    _impl_.stats_.remote_outbound_rtp_ = remote_outbound_rtp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.remote_outbound_rtp)
}
void RtcStats::set_allocated_media_source(::livekit::proto::RtcStats_MediaSource* media_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (media_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_source);
    if (message_arena != submessage_arena) {
      media_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_source, submessage_arena);
    }
    set_has_media_source();
    _impl_.stats_.media_source_ = media_source;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.media_source)
}
void RtcStats::set_allocated_media_playout(::livekit::proto::RtcStats_MediaPlayout* media_playout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (media_playout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_playout);
    if (message_arena != submessage_arena) {
      media_playout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_playout, submessage_arena);
    }
    set_has_media_playout();
    _impl_.stats_.media_playout_ = media_playout;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.media_playout)
}
void RtcStats::set_allocated_peer_connection(::livekit::proto::RtcStats_PeerConnection* peer_connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (peer_connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(peer_connection);
    if (message_arena != submessage_arena) {
      peer_connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection, submessage_arena);
    }
    set_has_peer_connection();
    _impl_.stats_.peer_connection_ = peer_connection;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.peer_connection)
}
void RtcStats::set_allocated_data_channel(::livekit::proto::RtcStats_DataChannel* data_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (data_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_channel);
    if (message_arena != submessage_arena) {
      data_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_channel, submessage_arena);
    }
    set_has_data_channel();
    _impl_.stats_.data_channel_ = data_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.data_channel)
}
void RtcStats::set_allocated_transport(::livekit::proto::RtcStats_Transport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    set_has_transport();
    _impl_.stats_.transport_ = transport;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.transport)
}
void RtcStats::set_allocated_candidate_pair(::livekit::proto::RtcStats_CandidatePair* candidate_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (candidate_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candidate_pair);
    if (message_arena != submessage_arena) {
      candidate_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_pair, submessage_arena);
    }
    set_has_candidate_pair();
    _impl_.stats_.candidate_pair_ = candidate_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.candidate_pair)
}
void RtcStats::set_allocated_local_candidate(::livekit::proto::RtcStats_LocalCandidate* local_candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (local_candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_candidate);
    if (message_arena != submessage_arena) {
      local_candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_candidate, submessage_arena);
    }
    set_has_local_candidate();
    _impl_.stats_.local_candidate_ = local_candidate;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.local_candidate)
}
void RtcStats::set_allocated_remote_candidate(::livekit::proto::RtcStats_RemoteCandidate* remote_candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (remote_candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remote_candidate);
    if (message_arena != submessage_arena) {
      remote_candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_candidate, submessage_arena);
    }
    set_has_remote_candidate();
    _impl_.stats_.remote_candidate_ = remote_candidate;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.remote_candidate)
}
void RtcStats::set_allocated_certificate(::livekit::proto::RtcStats_Certificate* certificate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (certificate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(certificate);
    if (message_arena != submessage_arena) {
      certificate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certificate, submessage_arena);
    }
    set_has_certificate();
    _impl_.stats_.certificate_ = certificate;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.certificate)
}
void RtcStats::set_allocated_stream(::livekit::proto::RtcStats_Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.stats_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.stream)
}
void RtcStats::set_allocated_track(::livekit::proto::RtcStats_Track* track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stats();
  if (track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track);
    if (message_arena != submessage_arena) {
      track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track, submessage_arena);
    }
    set_has_track();
    _impl_.stats_.track_ = track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RtcStats.track)
}
RtcStats::RtcStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStats)
}
RtcStats::RtcStats(const RtcStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stats();
  switch (from.stats_case()) {
    case kCodec: {
      _this->_internal_mutable_codec()->::livekit::proto::RtcStats_Codec::MergeFrom(
          from._internal_codec());
      break;
    }
    case kInboundRtp: {
      _this->_internal_mutable_inbound_rtp()->::livekit::proto::RtcStats_InboundRtp::MergeFrom(
          from._internal_inbound_rtp());
      break;
    }
    case kOutboundRtp: {
      _this->_internal_mutable_outbound_rtp()->::livekit::proto::RtcStats_OutboundRtp::MergeFrom(
          from._internal_outbound_rtp());
      break;
    }
    case kRemoteInboundRtp: {
      _this->_internal_mutable_remote_inbound_rtp()->::livekit::proto::RtcStats_RemoteInboundRtp::MergeFrom(
          from._internal_remote_inbound_rtp());
      break;
    }
    case kRemoteOutboundRtp: {
      _this->_internal_mutable_remote_outbound_rtp()->::livekit::proto::RtcStats_RemoteOutboundRtp::MergeFrom(
          from._internal_remote_outbound_rtp());
      break;
    }
    case kMediaSource: {
      _this->_internal_mutable_media_source()->::livekit::proto::RtcStats_MediaSource::MergeFrom(
          from._internal_media_source());
      break;
    }
    case kMediaPlayout: {
      _this->_internal_mutable_media_playout()->::livekit::proto::RtcStats_MediaPlayout::MergeFrom(
          from._internal_media_playout());
      break;
    }
    case kPeerConnection: {
      _this->_internal_mutable_peer_connection()->::livekit::proto::RtcStats_PeerConnection::MergeFrom(
          from._internal_peer_connection());
      break;
    }
    case kDataChannel: {
      _this->_internal_mutable_data_channel()->::livekit::proto::RtcStats_DataChannel::MergeFrom(
          from._internal_data_channel());
      break;
    }
    case kTransport: {
      _this->_internal_mutable_transport()->::livekit::proto::RtcStats_Transport::MergeFrom(
          from._internal_transport());
      break;
    }
    case kCandidatePair: {
      _this->_internal_mutable_candidate_pair()->::livekit::proto::RtcStats_CandidatePair::MergeFrom(
          from._internal_candidate_pair());
      break;
    }
    case kLocalCandidate: {
      _this->_internal_mutable_local_candidate()->::livekit::proto::RtcStats_LocalCandidate::MergeFrom(
          from._internal_local_candidate());
      break;
    }
    case kRemoteCandidate: {
      _this->_internal_mutable_remote_candidate()->::livekit::proto::RtcStats_RemoteCandidate::MergeFrom(
          from._internal_remote_candidate());
      break;
    }
    case kCertificate: {
      _this->_internal_mutable_certificate()->::livekit::proto::RtcStats_Certificate::MergeFrom(
          from._internal_certificate());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::proto::RtcStats_Stream::MergeFrom(
          from._internal_stream());
      break;
    }
    case kTrack: {
      _this->_internal_mutable_track()->::livekit::proto::RtcStats_Track::MergeFrom(
          from._internal_track());
      break;
    }
    case STATS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStats)
}

inline void RtcStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_stats();
}

RtcStats::~RtcStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_stats()) {
    clear_stats();
  }
}

void RtcStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStats::clear_stats() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.RtcStats)
  switch (stats_case()) {
    case kCodec: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.codec_;
      }
      break;
    }
    case kInboundRtp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.inbound_rtp_;
      }
      break;
    }
    case kOutboundRtp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.outbound_rtp_;
      }
      break;
    }
    case kRemoteInboundRtp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.remote_inbound_rtp_;
      }
      break;
    }
    case kRemoteOutboundRtp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.remote_outbound_rtp_;
      }
      break;
    }
    case kMediaSource: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.media_source_;
      }
      break;
    }
    case kMediaPlayout: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.media_playout_;
      }
      break;
    }
    case kPeerConnection: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.peer_connection_;
      }
      break;
    }
    case kDataChannel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.data_channel_;
      }
      break;
    }
    case kTransport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.transport_;
      }
      break;
    }
    case kCandidatePair: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.candidate_pair_;
      }
      break;
    }
    case kLocalCandidate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.local_candidate_;
      }
      break;
    }
    case kRemoteCandidate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.remote_candidate_;
      }
      break;
    }
    case kCertificate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.certificate_;
      }
      break;
    }
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.stream_;
      }
      break;
    }
    case kTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stats_.track_;
      }
      break;
    }
    case STATS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STATS_NOT_SET;
}


void RtcStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stats();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.proto.RtcStats.Codec codec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_codec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.InboundRtp inbound_rtp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inbound_rtp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.OutboundRtp outbound_rtp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_outbound_rtp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.RemoteInboundRtp remote_inbound_rtp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_inbound_rtp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.RemoteOutboundRtp remote_outbound_rtp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_outbound_rtp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.MediaSource media_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.MediaPlayout media_playout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_playout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.PeerConnection peer_connection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.DataChannel data_channel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.Transport transport = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.CandidatePair candidate_pair = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_pair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.LocalCandidate local_candidate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.RemoteCandidate remote_candidate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.Certificate certificate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_certificate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.Stream stream = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RtcStats.Track track = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (stats_case()) {
    case kCodec: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::codec(this),
          _Internal::codec(this).GetCachedSize(), target, stream);
      break;
    }
    case kInboundRtp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::inbound_rtp(this),
          _Internal::inbound_rtp(this).GetCachedSize(), target, stream);
      break;
    }
    case kOutboundRtp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::outbound_rtp(this),
          _Internal::outbound_rtp(this).GetCachedSize(), target, stream);
      break;
    }
    case kRemoteInboundRtp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::remote_inbound_rtp(this),
          _Internal::remote_inbound_rtp(this).GetCachedSize(), target, stream);
      break;
    }
    case kRemoteOutboundRtp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::remote_outbound_rtp(this),
          _Internal::remote_outbound_rtp(this).GetCachedSize(), target, stream);
      break;
    }
    case kMediaSource: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::media_source(this),
          _Internal::media_source(this).GetCachedSize(), target, stream);
      break;
    }
    case kMediaPlayout: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::media_playout(this),
          _Internal::media_playout(this).GetCachedSize(), target, stream);
      break;
    }
    case kPeerConnection: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::peer_connection(this),
          _Internal::peer_connection(this).GetCachedSize(), target, stream);
      break;
    }
    case kDataChannel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::data_channel(this),
          _Internal::data_channel(this).GetCachedSize(), target, stream);
      break;
    }
    case kTransport: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::transport(this),
          _Internal::transport(this).GetCachedSize(), target, stream);
      break;
    }
    case kCandidatePair: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::candidate_pair(this),
          _Internal::candidate_pair(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocalCandidate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::local_candidate(this),
          _Internal::local_candidate(this).GetCachedSize(), target, stream);
      break;
    }
    case kRemoteCandidate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::remote_candidate(this),
          _Internal::remote_candidate(this).GetCachedSize(), target, stream);
      break;
    }
    case kCertificate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::certificate(this),
          _Internal::certificate(this).GetCachedSize(), target, stream);
      break;
    }
    case kStream: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::stream(this),
          _Internal::stream(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrack: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::track(this),
          _Internal::track(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStats)
  return target;
}

size_t RtcStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stats_case()) {
    // .livekit.proto.RtcStats.Codec codec = 3;
    case kCodec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.codec_);
      break;
    }
    // .livekit.proto.RtcStats.InboundRtp inbound_rtp = 4;
    case kInboundRtp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.inbound_rtp_);
      break;
    }
    // .livekit.proto.RtcStats.OutboundRtp outbound_rtp = 5;
    case kOutboundRtp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.outbound_rtp_);
      break;
    }
    // .livekit.proto.RtcStats.RemoteInboundRtp remote_inbound_rtp = 6;
    case kRemoteInboundRtp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.remote_inbound_rtp_);
      break;
    }
    // .livekit.proto.RtcStats.RemoteOutboundRtp remote_outbound_rtp = 7;
    case kRemoteOutboundRtp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.remote_outbound_rtp_);
      break;
    }
    // .livekit.proto.RtcStats.MediaSource media_source = 8;
    case kMediaSource: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.media_source_);
      break;
    }
    // .livekit.proto.RtcStats.MediaPlayout media_playout = 9;
    case kMediaPlayout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.media_playout_);
      break;
    }
    // .livekit.proto.RtcStats.PeerConnection peer_connection = 10;
    case kPeerConnection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.peer_connection_);
      break;
    }
    // .livekit.proto.RtcStats.DataChannel data_channel = 11;
    case kDataChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.data_channel_);
      break;
    }
    // .livekit.proto.RtcStats.Transport transport = 12;
    case kTransport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.transport_);
      break;
    }
    // .livekit.proto.RtcStats.CandidatePair candidate_pair = 13;
    case kCandidatePair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.candidate_pair_);
      break;
    }
    // .livekit.proto.RtcStats.LocalCandidate local_candidate = 14;
    case kLocalCandidate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.local_candidate_);
      break;
    }
    // .livekit.proto.RtcStats.RemoteCandidate remote_candidate = 15;
    case kRemoteCandidate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.remote_candidate_);
      break;
    }
    // .livekit.proto.RtcStats.Certificate certificate = 16;
    case kCertificate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.certificate_);
      break;
    }
    // .livekit.proto.RtcStats.Stream stream = 17;
    case kStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.stream_);
      break;
    }
    // .livekit.proto.RtcStats.Track track = 18;
    case kTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_.track_);
      break;
    }
    case STATS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStats::GetClassData() const { return &_class_data_; }


void RtcStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStats*>(&to_msg);
  auto& from = static_cast<const RtcStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stats_case()) {
    case kCodec: {
      _this->_internal_mutable_codec()->::livekit::proto::RtcStats_Codec::MergeFrom(
          from._internal_codec());
      break;
    }
    case kInboundRtp: {
      _this->_internal_mutable_inbound_rtp()->::livekit::proto::RtcStats_InboundRtp::MergeFrom(
          from._internal_inbound_rtp());
      break;
    }
    case kOutboundRtp: {
      _this->_internal_mutable_outbound_rtp()->::livekit::proto::RtcStats_OutboundRtp::MergeFrom(
          from._internal_outbound_rtp());
      break;
    }
    case kRemoteInboundRtp: {
      _this->_internal_mutable_remote_inbound_rtp()->::livekit::proto::RtcStats_RemoteInboundRtp::MergeFrom(
          from._internal_remote_inbound_rtp());
      break;
    }
    case kRemoteOutboundRtp: {
      _this->_internal_mutable_remote_outbound_rtp()->::livekit::proto::RtcStats_RemoteOutboundRtp::MergeFrom(
          from._internal_remote_outbound_rtp());
      break;
    }
    case kMediaSource: {
      _this->_internal_mutable_media_source()->::livekit::proto::RtcStats_MediaSource::MergeFrom(
          from._internal_media_source());
      break;
    }
    case kMediaPlayout: {
      _this->_internal_mutable_media_playout()->::livekit::proto::RtcStats_MediaPlayout::MergeFrom(
          from._internal_media_playout());
      break;
    }
    case kPeerConnection: {
      _this->_internal_mutable_peer_connection()->::livekit::proto::RtcStats_PeerConnection::MergeFrom(
          from._internal_peer_connection());
      break;
    }
    case kDataChannel: {
      _this->_internal_mutable_data_channel()->::livekit::proto::RtcStats_DataChannel::MergeFrom(
          from._internal_data_channel());
      break;
    }
    case kTransport: {
      _this->_internal_mutable_transport()->::livekit::proto::RtcStats_Transport::MergeFrom(
          from._internal_transport());
      break;
    }
    case kCandidatePair: {
      _this->_internal_mutable_candidate_pair()->::livekit::proto::RtcStats_CandidatePair::MergeFrom(
          from._internal_candidate_pair());
      break;
    }
    case kLocalCandidate: {
      _this->_internal_mutable_local_candidate()->::livekit::proto::RtcStats_LocalCandidate::MergeFrom(
          from._internal_local_candidate());
      break;
    }
    case kRemoteCandidate: {
      _this->_internal_mutable_remote_candidate()->::livekit::proto::RtcStats_RemoteCandidate::MergeFrom(
          from._internal_remote_candidate());
      break;
    }
    case kCertificate: {
      _this->_internal_mutable_certificate()->::livekit::proto::RtcStats_Certificate::MergeFrom(
          from._internal_certificate());
      break;
    }
    case kStream: {
      _this->_internal_mutable_stream()->::livekit::proto::RtcStats_Stream::MergeFrom(
          from._internal_stream());
      break;
    }
    case kTrack: {
      _this->_internal_mutable_track()->::livekit::proto::RtcStats_Track::MergeFrom(
          from._internal_track());
      break;
    }
    case STATS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStats::CopyFrom(const RtcStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStats::IsInitialized() const {
  switch (stats_case()) {
    case kCodec: {
      if (_internal_has_codec()) {
        if (!_impl_.stats_.codec_->IsInitialized()) return false;
      }
      break;
    }
    case kInboundRtp: {
      if (_internal_has_inbound_rtp()) {
        if (!_impl_.stats_.inbound_rtp_->IsInitialized()) return false;
      }
      break;
    }
    case kOutboundRtp: {
      if (_internal_has_outbound_rtp()) {
        if (!_impl_.stats_.outbound_rtp_->IsInitialized()) return false;
      }
      break;
    }
    case kRemoteInboundRtp: {
      if (_internal_has_remote_inbound_rtp()) {
        if (!_impl_.stats_.remote_inbound_rtp_->IsInitialized()) return false;
      }
      break;
    }
    case kRemoteOutboundRtp: {
      if (_internal_has_remote_outbound_rtp()) {
        if (!_impl_.stats_.remote_outbound_rtp_->IsInitialized()) return false;
      }
      break;
    }
    case kMediaSource: {
      if (_internal_has_media_source()) {
        if (!_impl_.stats_.media_source_->IsInitialized()) return false;
      }
      break;
    }
    case kMediaPlayout: {
      if (_internal_has_media_playout()) {
        if (!_impl_.stats_.media_playout_->IsInitialized()) return false;
      }
      break;
    }
    case kPeerConnection: {
      if (_internal_has_peer_connection()) {
        if (!_impl_.stats_.peer_connection_->IsInitialized()) return false;
      }
      break;
    }
    case kDataChannel: {
      if (_internal_has_data_channel()) {
        if (!_impl_.stats_.data_channel_->IsInitialized()) return false;
      }
      break;
    }
    case kTransport: {
      if (_internal_has_transport()) {
        if (!_impl_.stats_.transport_->IsInitialized()) return false;
      }
      break;
    }
    case kCandidatePair: {
      if (_internal_has_candidate_pair()) {
        if (!_impl_.stats_.candidate_pair_->IsInitialized()) return false;
      }
      break;
    }
    case kLocalCandidate: {
      if (_internal_has_local_candidate()) {
        if (!_impl_.stats_.local_candidate_->IsInitialized()) return false;
      }
      break;
    }
    case kRemoteCandidate: {
      if (_internal_has_remote_candidate()) {
        if (!_impl_.stats_.remote_candidate_->IsInitialized()) return false;
      }
      break;
    }
    case kCertificate: {
      if (_internal_has_certificate()) {
        if (!_impl_.stats_.certificate_->IsInitialized()) return false;
      }
      break;
    }
    case kStream: {
      if (_internal_has_stream()) {
        if (!_impl_.stats_.stream_->IsInitialized()) return false;
      }
      break;
    }
    case kTrack: {
      break;
    }
    case STATS_NOT_SET: {
      break;
    }
  }
  return true;
}

void RtcStats::InternalSwap(RtcStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stats_, other->_impl_.stats_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[16]);
}

// ===================================================================

class RtcStatsData::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcStatsData>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RtcStatsData::RtcStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcStatsData)
}
RtcStatsData::RtcStatsData(const RtcStatsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcStatsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcStatsData)
}

inline void RtcStatsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtcStatsData::~RtcStatsData() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcStatsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcStatsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void RtcStatsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcStatsData::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcStatsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcStatsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RtcStatsData.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcStatsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcStatsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RtcStatsData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcStatsData)
  return target;
}

size_t RtcStatsData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtcStatsData)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return total_size;
}
size_t RtcStatsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcStatsData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required int64 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcStatsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcStatsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcStatsData::GetClassData() const { return &_class_data_; }


void RtcStatsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcStatsData*>(&to_msg);
  auto& from = static_cast<const RtcStatsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcStatsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcStatsData::CopyFrom(const RtcStatsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcStatsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcStatsData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RtcStatsData::InternalSwap(RtcStatsData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcStatsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[17]);
}

// ===================================================================

class CodecStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CodecStats>()._impl_._has_bits_);
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transport_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clock_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sdp_fmtp_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

CodecStats::CodecStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CodecStats)
}
CodecStats::CodecStats(const CodecStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CodecStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.sdp_fmtp_line_){}
    , decltype(_impl_.payload_type_){}
    , decltype(_impl_.clock_rate_){}
    , decltype(_impl_.channels_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_transport_id()) {
    _this->_impl_.transport_id_.Set(from._internal_transport_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdp_fmtp_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_fmtp_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdp_fmtp_line()) {
    _this->_impl_.sdp_fmtp_line_.Set(from._internal_sdp_fmtp_line(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.payload_type_, &from._impl_.payload_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channels_) -
    reinterpret_cast<char*>(&_impl_.payload_type_)) + sizeof(_impl_.channels_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CodecStats)
}

inline void CodecStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.sdp_fmtp_line_){}
    , decltype(_impl_.payload_type_){0u}
    , decltype(_impl_.clock_rate_){0u}
    , decltype(_impl_.channels_){0u}
  };
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdp_fmtp_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_fmtp_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CodecStats::~CodecStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.CodecStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CodecStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transport_id_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.sdp_fmtp_line_.Destroy();
}

void CodecStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CodecStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CodecStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.transport_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sdp_fmtp_line_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.payload_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channels_) -
        reinterpret_cast<char*>(&_impl_.payload_type_)) + sizeof(_impl_.channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodecStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 payload_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_payload_type(&has_bits);
          _impl_.payload_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string transport_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transport_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CodecStats.transport_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CodecStats.mime_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 clock_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clock_rate(&has_bits);
          _impl_.clock_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channels(&has_bits);
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string sdp_fmtp_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sdp_fmtp_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CodecStats.sdp_fmtp_line");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CodecStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CodecStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 payload_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_payload_type(), target);
  }

  // required string transport_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transport_id().data(), static_cast<int>(this->_internal_transport_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CodecStats.transport_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transport_id(), target);
  }

  // required string mime_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CodecStats.mime_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  // required uint32 clock_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_clock_rate(), target);
  }

  // required uint32 channels = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channels(), target);
  }

  // required string sdp_fmtp_line = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdp_fmtp_line().data(), static_cast<int>(this->_internal_sdp_fmtp_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CodecStats.sdp_fmtp_line");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sdp_fmtp_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CodecStats)
  return target;
}

size_t CodecStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.CodecStats)
  size_t total_size = 0;

  if (_internal_has_transport_id()) {
    // required string transport_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());
  }

  if (_internal_has_mime_type()) {
    // required string mime_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  if (_internal_has_sdp_fmtp_line()) {
    // required string sdp_fmtp_line = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp_fmtp_line());
  }

  if (_internal_has_payload_type()) {
    // required uint32 payload_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_payload_type());
  }

  if (_internal_has_clock_rate()) {
    // required uint32 clock_rate = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clock_rate());
  }

  if (_internal_has_channels()) {
    // required uint32 channels = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channels());
  }

  return total_size;
}
size_t CodecStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CodecStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string transport_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());

    // required string mime_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

    // required string sdp_fmtp_line = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp_fmtp_line());

    // required uint32 payload_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_payload_type());

    // required uint32 clock_rate = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clock_rate());

    // required uint32 channels = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channels());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CodecStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CodecStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CodecStats::GetClassData() const { return &_class_data_; }


void CodecStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CodecStats*>(&to_msg);
  auto& from = static_cast<const CodecStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CodecStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_transport_id(from._internal_transport_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sdp_fmtp_line(from._internal_sdp_fmtp_line());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.payload_type_ = from._impl_.payload_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.clock_rate_ = from._impl_.clock_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channels_ = from._impl_.channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CodecStats::CopyFrom(const CodecStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CodecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodecStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CodecStats::InternalSwap(CodecStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transport_id_, lhs_arena,
      &other->_impl_.transport_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_fmtp_line_, lhs_arena,
      &other->_impl_.sdp_fmtp_line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CodecStats, _impl_.channels_)
      + sizeof(CodecStats::_impl_.channels_)
      - PROTOBUF_FIELD_OFFSET(CodecStats, _impl_.payload_type_)>(
          reinterpret_cast<char*>(&_impl_.payload_type_),
          reinterpret_cast<char*>(&other->_impl_.payload_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CodecStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[18]);
}

// ===================================================================

class RtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpStreamStats>()._impl_._has_bits_);
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transport_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_codec_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RtpStreamStats::RtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtpStreamStats)
}
RtpStreamStats::RtpStreamStats(const RtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.codec_id_){}
    , decltype(_impl_.ssrc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_transport_id()) {
    _this->_impl_.transport_id_.Set(from._internal_transport_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.codec_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codec_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_codec_id()) {
    _this->_impl_.codec_id_.Set(from._internal_codec_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ssrc_ = from._impl_.ssrc_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtpStreamStats)
}

inline void RtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.codec_id_){}
    , decltype(_impl_.ssrc_){0u}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codec_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codec_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtpStreamStats::~RtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.transport_id_.Destroy();
  _impl_.codec_id_.Destroy();
}

void RtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.transport_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.codec_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ssrc_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 ssrc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ssrc(&has_bits);
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RtpStreamStats.kind");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string transport_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transport_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RtpStreamStats.transport_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string codec_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_codec_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RtpStreamStats.codec_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 ssrc = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ssrc(), target);
  }

  // required string kind = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RtpStreamStats.kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kind(), target);
  }

  // required string transport_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transport_id().data(), static_cast<int>(this->_internal_transport_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RtpStreamStats.transport_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transport_id(), target);
  }

  // required string codec_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_codec_id().data(), static_cast<int>(this->_internal_codec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RtpStreamStats.codec_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_codec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtpStreamStats)
  return target;
}

size_t RtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_kind()) {
    // required string kind = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  if (_internal_has_transport_id()) {
    // required string transport_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());
  }

  if (_internal_has_codec_id()) {
    // required string codec_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec_id());
  }

  if (_internal_has_ssrc()) {
    // required uint32 ssrc = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ssrc());
  }

  return total_size;
}
size_t RtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtpStreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string kind = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());

    // required string transport_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());

    // required string codec_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec_id());

    // required uint32 ssrc = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ssrc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtpStreamStats::GetClassData() const { return &_class_data_; }


void RtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtpStreamStats*>(&to_msg);
  auto& from = static_cast<const RtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_transport_id(from._internal_transport_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_codec_id(from._internal_codec_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ssrc_ = from._impl_.ssrc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtpStreamStats::CopyFrom(const RtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RtpStreamStats::InternalSwap(RtpStreamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transport_id_, lhs_arena,
      &other->_impl_.transport_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codec_id_, lhs_arena,
      &other->_impl_.codec_id_, rhs_arena
  );
  swap(_impl_.ssrc_, other->_impl_.ssrc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[19]);
}

// ===================================================================

class ReceivedRtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceivedRtpStreamStats>()._impl_._has_bits_);
  static void set_has_packets_received(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packets_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ReceivedRtpStreamStats::ReceivedRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ReceivedRtpStreamStats)
}
ReceivedRtpStreamStats::ReceivedRtpStreamStats(const ReceivedRtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReceivedRtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packets_received_){}
    , decltype(_impl_.packets_lost_){}
    , decltype(_impl_.jitter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packets_received_, &from._impl_.packets_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jitter_) -
    reinterpret_cast<char*>(&_impl_.packets_received_)) + sizeof(_impl_.jitter_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ReceivedRtpStreamStats)
}

inline void ReceivedRtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packets_received_){uint64_t{0u}}
    , decltype(_impl_.packets_lost_){int64_t{0}}
    , decltype(_impl_.jitter_){0}
  };
}

ReceivedRtpStreamStats::~ReceivedRtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.ReceivedRtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceivedRtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReceivedRtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReceivedRtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ReceivedRtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.packets_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.jitter_) -
        reinterpret_cast<char*>(&_impl_.packets_received_)) + sizeof(_impl_.jitter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceivedRtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 packets_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packets_received(&has_bits);
          _impl_.packets_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 packets_lost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_packets_lost(&has_bits);
          _impl_.packets_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double jitter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_jitter(&has_bits);
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceivedRtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ReceivedRtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 packets_received = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packets_received(), target);
  }

  // required int64 packets_lost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_packets_lost(), target);
  }

  // required double jitter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_jitter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ReceivedRtpStreamStats)
  return target;
}

size_t ReceivedRtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ReceivedRtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_packets_received()) {
    // required uint64 packets_received = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_received());
  }

  if (_internal_has_packets_lost()) {
    // required int64 packets_lost = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packets_lost());
  }

  if (_internal_has_jitter()) {
    // required double jitter = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ReceivedRtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ReceivedRtpStreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 packets_received = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_received());

    // required int64 packets_lost = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packets_lost());

    // required double jitter = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceivedRtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReceivedRtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceivedRtpStreamStats::GetClassData() const { return &_class_data_; }


void ReceivedRtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReceivedRtpStreamStats*>(&to_msg);
  auto& from = static_cast<const ReceivedRtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ReceivedRtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packets_received_ = from._impl_.packets_received_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.packets_lost_ = from._impl_.packets_lost_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.jitter_ = from._impl_.jitter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceivedRtpStreamStats::CopyFrom(const ReceivedRtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ReceivedRtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedRtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ReceivedRtpStreamStats::InternalSwap(ReceivedRtpStreamStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceivedRtpStreamStats, _impl_.jitter_)
      + sizeof(ReceivedRtpStreamStats::_impl_.jitter_)
      - PROTOBUF_FIELD_OFFSET(ReceivedRtpStreamStats, _impl_.packets_received_)>(
          reinterpret_cast<char*>(&_impl_.packets_received_),
          reinterpret_cast<char*>(&other->_impl_.packets_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedRtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[20]);
}

// ===================================================================

class InboundRtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<InboundRtpStreamStats>()._impl_._has_bits_);
  static void set_has_track_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frames_decoded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_key_frames_decoded(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frames_rendered(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frames_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_frames_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_qp_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_decode_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_inter_frame_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_total_squared_inter_frame_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pause_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_total_pause_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_freeze_count(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_total_freeze_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_last_packet_received_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_header_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_packets_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_fec_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_fec_packets_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fec_packets_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_nack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_fir_count(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_pli_count(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_total_processing_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_estimated_playout_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_jitter_buffer_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_jitter_buffer_target_delay(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_jitter_buffer_emitted_count(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_jitter_buffer_minimum_delay(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_total_samples_received(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_concealed_samples(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_silent_concealed_samples(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_concealment_events(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_inserted_samples_for_deceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_removed_samples_for_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_audio_level(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_total_audio_energy(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_total_samples_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_frames_received(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_decoder_implementation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playout_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_power_efficient_decoder(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_frames_assembled_from_multiple_packets(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_total_assembly_time(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_retransmitted_packets_received(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_retransmitted_bytes_received(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_fec_ssrc(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0xffffffff) ^ 0xffffffff)
       | ((has_bits[1] & 0x001fffff) ^ 0x001fffff)) != 0;
  }
};

InboundRtpStreamStats::InboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.InboundRtpStreamStats)
}
InboundRtpStreamStats::InboundRtpStreamStats(const InboundRtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InboundRtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_identifier_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.decoder_implementation_){}
    , decltype(_impl_.playout_id_){}
    , decltype(_impl_.frames_decoded_){}
    , decltype(_impl_.key_frames_decoded_){}
    , decltype(_impl_.frames_rendered_){}
    , decltype(_impl_.frames_dropped_){}
    , decltype(_impl_.frame_width_){}
    , decltype(_impl_.frame_height_){}
    , decltype(_impl_.frames_per_second_){}
    , decltype(_impl_.qp_sum_){}
    , decltype(_impl_.total_decode_time_){}
    , decltype(_impl_.total_inter_frame_delay_){}
    , decltype(_impl_.total_squared_inter_frame_delay_){}
    , decltype(_impl_.total_pause_duration_){}
    , decltype(_impl_.pause_count_){}
    , decltype(_impl_.freeze_count_){}
    , decltype(_impl_.total_freeze_duration_){}
    , decltype(_impl_.last_packet_received_timestamp_){}
    , decltype(_impl_.header_bytes_received_){}
    , decltype(_impl_.packets_discarded_){}
    , decltype(_impl_.fec_bytes_received_){}
    , decltype(_impl_.fec_packets_received_){}
    , decltype(_impl_.fec_packets_discarded_){}
    , decltype(_impl_.bytes_received_){}
    , decltype(_impl_.nack_count_){}
    , decltype(_impl_.fir_count_){}
    , decltype(_impl_.total_processing_delay_){}
    , decltype(_impl_.estimated_playout_timestamp_){}
    , decltype(_impl_.jitter_buffer_delay_){}
    , decltype(_impl_.jitter_buffer_target_delay_){}
    , decltype(_impl_.jitter_buffer_emitted_count_){}
    , decltype(_impl_.jitter_buffer_minimum_delay_){}
    , decltype(_impl_.total_samples_received_){}
    , decltype(_impl_.concealed_samples_){}
    , decltype(_impl_.silent_concealed_samples_){}
    , decltype(_impl_.pli_count_){}
    , decltype(_impl_.power_efficient_decoder_){}
    , decltype(_impl_.concealment_events_){}
    , decltype(_impl_.inserted_samples_for_deceleration_){}
    , decltype(_impl_.removed_samples_for_acceleration_){}
    , decltype(_impl_.audio_level_){}
    , decltype(_impl_.total_audio_energy_){}
    , decltype(_impl_.total_samples_duration_){}
    , decltype(_impl_.frames_received_){}
    , decltype(_impl_.frames_assembled_from_multiple_packets_){}
    , decltype(_impl_.total_assembly_time_){}
    , decltype(_impl_.retransmitted_packets_received_){}
    , decltype(_impl_.retransmitted_bytes_received_){}
    , decltype(_impl_.rtx_ssrc_){}
    , decltype(_impl_.fec_ssrc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_identifier()) {
    _this->_impl_.track_identifier_.Set(from._internal_track_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mid()) {
    _this->_impl_.mid_.Set(from._internal_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_id()) {
    _this->_impl_.remote_id_.Set(from._internal_remote_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.decoder_implementation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decoder_implementation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decoder_implementation()) {
    _this->_impl_.decoder_implementation_.Set(from._internal_decoder_implementation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playout_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playout_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_playout_id()) {
    _this->_impl_.playout_id_.Set(from._internal_playout_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.frames_decoded_, &from._impl_.frames_decoded_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fec_ssrc_) -
    reinterpret_cast<char*>(&_impl_.frames_decoded_)) + sizeof(_impl_.fec_ssrc_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.InboundRtpStreamStats)
}

inline void InboundRtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_identifier_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.decoder_implementation_){}
    , decltype(_impl_.playout_id_){}
    , decltype(_impl_.frames_decoded_){0u}
    , decltype(_impl_.key_frames_decoded_){0u}
    , decltype(_impl_.frames_rendered_){0u}
    , decltype(_impl_.frames_dropped_){0u}
    , decltype(_impl_.frame_width_){0u}
    , decltype(_impl_.frame_height_){0u}
    , decltype(_impl_.frames_per_second_){0}
    , decltype(_impl_.qp_sum_){uint64_t{0u}}
    , decltype(_impl_.total_decode_time_){0}
    , decltype(_impl_.total_inter_frame_delay_){0}
    , decltype(_impl_.total_squared_inter_frame_delay_){0}
    , decltype(_impl_.total_pause_duration_){0}
    , decltype(_impl_.pause_count_){0u}
    , decltype(_impl_.freeze_count_){0u}
    , decltype(_impl_.total_freeze_duration_){0}
    , decltype(_impl_.last_packet_received_timestamp_){0}
    , decltype(_impl_.header_bytes_received_){uint64_t{0u}}
    , decltype(_impl_.packets_discarded_){uint64_t{0u}}
    , decltype(_impl_.fec_bytes_received_){uint64_t{0u}}
    , decltype(_impl_.fec_packets_received_){uint64_t{0u}}
    , decltype(_impl_.fec_packets_discarded_){uint64_t{0u}}
    , decltype(_impl_.bytes_received_){uint64_t{0u}}
    , decltype(_impl_.nack_count_){0u}
    , decltype(_impl_.fir_count_){0u}
    , decltype(_impl_.total_processing_delay_){0}
    , decltype(_impl_.estimated_playout_timestamp_){0}
    , decltype(_impl_.jitter_buffer_delay_){0}
    , decltype(_impl_.jitter_buffer_target_delay_){0}
    , decltype(_impl_.jitter_buffer_emitted_count_){uint64_t{0u}}
    , decltype(_impl_.jitter_buffer_minimum_delay_){0}
    , decltype(_impl_.total_samples_received_){uint64_t{0u}}
    , decltype(_impl_.concealed_samples_){uint64_t{0u}}
    , decltype(_impl_.silent_concealed_samples_){uint64_t{0u}}
    , decltype(_impl_.pli_count_){0u}
    , decltype(_impl_.power_efficient_decoder_){false}
    , decltype(_impl_.concealment_events_){uint64_t{0u}}
    , decltype(_impl_.inserted_samples_for_deceleration_){uint64_t{0u}}
    , decltype(_impl_.removed_samples_for_acceleration_){uint64_t{0u}}
    , decltype(_impl_.audio_level_){0}
    , decltype(_impl_.total_audio_energy_){0}
    , decltype(_impl_.total_samples_duration_){0}
    , decltype(_impl_.frames_received_){uint64_t{0u}}
    , decltype(_impl_.frames_assembled_from_multiple_packets_){uint64_t{0u}}
    , decltype(_impl_.total_assembly_time_){0}
    , decltype(_impl_.retransmitted_packets_received_){uint64_t{0u}}
    , decltype(_impl_.retransmitted_bytes_received_){uint64_t{0u}}
    , decltype(_impl_.rtx_ssrc_){0u}
    , decltype(_impl_.fec_ssrc_){0u}
  };
  _impl_.track_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decoder_implementation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decoder_implementation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playout_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playout_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InboundRtpStreamStats::~InboundRtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.InboundRtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InboundRtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_identifier_.Destroy();
  _impl_.mid_.Destroy();
  _impl_.remote_id_.Destroy();
  _impl_.decoder_implementation_.Destroy();
  _impl_.playout_id_.Destroy();
}

void InboundRtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InboundRtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.InboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.track_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.remote_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.decoder_implementation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.playout_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.frames_decoded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frames_rendered_) -
        reinterpret_cast<char*>(&_impl_.frames_decoded_)) + sizeof(_impl_.frames_rendered_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.frames_dropped_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_squared_inter_frame_delay_) -
        reinterpret_cast<char*>(&_impl_.frames_dropped_)) + sizeof(_impl_.total_squared_inter_frame_delay_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.total_pause_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fec_bytes_received_) -
        reinterpret_cast<char*>(&_impl_.total_pause_duration_)) + sizeof(_impl_.fec_bytes_received_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.fec_packets_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.jitter_buffer_delay_) -
        reinterpret_cast<char*>(&_impl_.fec_packets_received_)) + sizeof(_impl_.jitter_buffer_delay_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.jitter_buffer_target_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.power_efficient_decoder_) -
        reinterpret_cast<char*>(&_impl_.jitter_buffer_target_delay_)) + sizeof(_impl_.power_efficient_decoder_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.concealment_events_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frames_assembled_from_multiple_packets_) -
        reinterpret_cast<char*>(&_impl_.concealment_events_)) + sizeof(_impl_.frames_assembled_from_multiple_packets_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.total_assembly_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fec_ssrc_) -
        reinterpret_cast<char*>(&_impl_.total_assembly_time_)) + sizeof(_impl_.fec_ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundRtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string track_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.InboundRtpStreamStats.track_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.InboundRtpStreamStats.mid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string remote_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.InboundRtpStreamStats.remote_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 frames_decoded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frames_decoded(&_impl_._has_bits_);
          _impl_.frames_decoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 key_frames_decoded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_key_frames_decoded(&_impl_._has_bits_);
          _impl_.key_frames_decoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frames_rendered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_frames_rendered(&_impl_._has_bits_);
          _impl_.frames_rendered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frames_dropped = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_frames_dropped(&_impl_._has_bits_);
          _impl_.frames_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frame_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_frame_width(&_impl_._has_bits_);
          _impl_.frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frame_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_frame_height(&_impl_._has_bits_);
          _impl_.frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double frames_per_second = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_frames_per_second(&_impl_._has_bits_);
          _impl_.frames_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 qp_sum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_qp_sum(&_impl_._has_bits_);
          _impl_.qp_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_decode_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_total_decode_time(&_impl_._has_bits_);
          _impl_.total_decode_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_inter_frame_delay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_total_inter_frame_delay(&_impl_._has_bits_);
          _impl_.total_inter_frame_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_squared_inter_frame_delay = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_total_squared_inter_frame_delay(&_impl_._has_bits_);
          _impl_.total_squared_inter_frame_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 pause_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_pause_count(&_impl_._has_bits_);
          _impl_.pause_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_pause_duration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_total_pause_duration(&_impl_._has_bits_);
          _impl_.total_pause_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 freeze_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_freeze_count(&_impl_._has_bits_);
          _impl_.freeze_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_freeze_duration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_total_freeze_duration(&_impl_._has_bits_);
          _impl_.total_freeze_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double last_packet_received_timestamp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_last_packet_received_timestamp(&_impl_._has_bits_);
          _impl_.last_packet_received_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 header_bytes_received = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_header_bytes_received(&_impl_._has_bits_);
          _impl_.header_bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 packets_discarded = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_packets_discarded(&_impl_._has_bits_);
          _impl_.packets_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 fec_bytes_received = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_fec_bytes_received(&_impl_._has_bits_);
          _impl_.fec_bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 fec_packets_received = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_fec_packets_received(&_impl_._has_bits_);
          _impl_.fec_packets_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 fec_packets_discarded = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_fec_packets_discarded(&_impl_._has_bits_);
          _impl_.fec_packets_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_received = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_bytes_received(&_impl_._has_bits_);
          _impl_.bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 nack_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_nack_count(&_impl_._has_bits_);
          _impl_.nack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 fir_count = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_fir_count(&_impl_._has_bits_);
          _impl_.fir_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 pli_count = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_pli_count(&_impl_._has_bits_);
          _impl_.pli_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_processing_delay = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_total_processing_delay(&_impl_._has_bits_);
          _impl_.total_processing_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double estimated_playout_timestamp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_estimated_playout_timestamp(&_impl_._has_bits_);
          _impl_.estimated_playout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double jitter_buffer_delay = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_jitter_buffer_delay(&_impl_._has_bits_);
          _impl_.jitter_buffer_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double jitter_buffer_target_delay = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_jitter_buffer_target_delay(&_impl_._has_bits_);
          _impl_.jitter_buffer_target_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 jitter_buffer_emitted_count = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_jitter_buffer_emitted_count(&_impl_._has_bits_);
          _impl_.jitter_buffer_emitted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double jitter_buffer_minimum_delay = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_jitter_buffer_minimum_delay(&_impl_._has_bits_);
          _impl_.jitter_buffer_minimum_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 total_samples_received = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_samples_received(&_impl_._has_bits_);
          _impl_.total_samples_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 concealed_samples = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_concealed_samples(&_impl_._has_bits_);
          _impl_.concealed_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 silent_concealed_samples = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_silent_concealed_samples(&_impl_._has_bits_);
          _impl_.silent_concealed_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 concealment_events = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_concealment_events(&_impl_._has_bits_);
          _impl_.concealment_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 inserted_samples_for_deceleration = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_inserted_samples_for_deceleration(&_impl_._has_bits_);
          _impl_.inserted_samples_for_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 removed_samples_for_acceleration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_removed_samples_for_acceleration(&_impl_._has_bits_);
          _impl_.removed_samples_for_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double audio_level = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_audio_level(&_impl_._has_bits_);
          _impl_.audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_audio_energy = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_total_audio_energy(&_impl_._has_bits_);
          _impl_.total_audio_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_samples_duration = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_total_samples_duration(&_impl_._has_bits_);
          _impl_.total_samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 frames_received = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_frames_received(&_impl_._has_bits_);
          _impl_.frames_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string decoder_implementation = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_decoder_implementation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.InboundRtpStreamStats.decoder_implementation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string playout_id = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_playout_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.InboundRtpStreamStats.playout_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool power_efficient_decoder = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_power_efficient_decoder(&_impl_._has_bits_);
          _impl_.power_efficient_decoder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 frames_assembled_from_multiple_packets = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_frames_assembled_from_multiple_packets(&_impl_._has_bits_);
          _impl_.frames_assembled_from_multiple_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_assembly_time = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_total_assembly_time(&_impl_._has_bits_);
          _impl_.total_assembly_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 retransmitted_packets_received = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_retransmitted_packets_received(&_impl_._has_bits_);
          _impl_.retransmitted_packets_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 retransmitted_bytes_received = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_retransmitted_bytes_received(&_impl_._has_bits_);
          _impl_.retransmitted_bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 rtx_ssrc = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_rtx_ssrc(&_impl_._has_bits_);
          _impl_.rtx_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 fec_ssrc = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_fec_ssrc(&_impl_._has_bits_);
          _impl_.fec_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InboundRtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.InboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string track_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_identifier().data(), static_cast<int>(this->_internal_track_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.InboundRtpStreamStats.track_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_identifier(), target);
  }

  // required string mid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.InboundRtpStreamStats.mid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mid(), target);
  }

  // required string remote_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.InboundRtpStreamStats.remote_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_id(), target);
  }

  // required uint32 frames_decoded = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frames_decoded(), target);
  }

  // required uint32 key_frames_decoded = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_key_frames_decoded(), target);
  }

  // required uint32 frames_rendered = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_frames_rendered(), target);
  }

  // required uint32 frames_dropped = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_frames_dropped(), target);
  }

  // required uint32 frame_width = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_frame_width(), target);
  }

  // required uint32 frame_height = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_frame_height(), target);
  }

  // required double frames_per_second = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_frames_per_second(), target);
  }

  // required uint64 qp_sum = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_qp_sum(), target);
  }

  // required double total_decode_time = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_total_decode_time(), target);
  }

  // required double total_inter_frame_delay = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_total_inter_frame_delay(), target);
  }

  // required double total_squared_inter_frame_delay = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_total_squared_inter_frame_delay(), target);
  }

  // required uint32 pause_count = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_pause_count(), target);
  }

  // required double total_pause_duration = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_total_pause_duration(), target);
  }

  // required uint32 freeze_count = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_freeze_count(), target);
  }

  // required double total_freeze_duration = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_total_freeze_duration(), target);
  }

  // required double last_packet_received_timestamp = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_last_packet_received_timestamp(), target);
  }

  // required uint64 header_bytes_received = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_header_bytes_received(), target);
  }

  // required uint64 packets_discarded = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_packets_discarded(), target);
  }

  // required uint64 fec_bytes_received = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_fec_bytes_received(), target);
  }

  // required uint64 fec_packets_received = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_fec_packets_received(), target);
  }

  // required uint64 fec_packets_discarded = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_fec_packets_discarded(), target);
  }

  // required uint64 bytes_received = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_bytes_received(), target);
  }

  // required uint32 nack_count = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_nack_count(), target);
  }

  // required uint32 fir_count = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_fir_count(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required uint32 pli_count = 28;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_pli_count(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required double total_processing_delay = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_total_processing_delay(), target);
  }

  // required double estimated_playout_timestamp = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_estimated_playout_timestamp(), target);
  }

  // required double jitter_buffer_delay = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_jitter_buffer_delay(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required double jitter_buffer_target_delay = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_jitter_buffer_target_delay(), target);
  }

  // required uint64 jitter_buffer_emitted_count = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_jitter_buffer_emitted_count(), target);
  }

  // required double jitter_buffer_minimum_delay = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_jitter_buffer_minimum_delay(), target);
  }

  // required uint64 total_samples_received = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_total_samples_received(), target);
  }

  // required uint64 concealed_samples = 36;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(36, this->_internal_concealed_samples(), target);
  }

  // required uint64 silent_concealed_samples = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_silent_concealed_samples(), target);
  }

  // required uint64 concealment_events = 38;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(38, this->_internal_concealment_events(), target);
  }

  // required uint64 inserted_samples_for_deceleration = 39;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(39, this->_internal_inserted_samples_for_deceleration(), target);
  }

  // required uint64 removed_samples_for_acceleration = 40;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(40, this->_internal_removed_samples_for_acceleration(), target);
  }

  // required double audio_level = 41;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(41, this->_internal_audio_level(), target);
  }

  // required double total_audio_energy = 42;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_total_audio_energy(), target);
  }

  // required double total_samples_duration = 43;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(43, this->_internal_total_samples_duration(), target);
  }

  // required uint64 frames_received = 44;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(44, this->_internal_frames_received(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string decoder_implementation = 45;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decoder_implementation().data(), static_cast<int>(this->_internal_decoder_implementation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.InboundRtpStreamStats.decoder_implementation");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_decoder_implementation(), target);
  }

  // required string playout_id = 46;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playout_id().data(), static_cast<int>(this->_internal_playout_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.InboundRtpStreamStats.playout_id");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_playout_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required bool power_efficient_decoder = 47;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_power_efficient_decoder(), target);
  }

  // required uint64 frames_assembled_from_multiple_packets = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(48, this->_internal_frames_assembled_from_multiple_packets(), target);
  }

  // required double total_assembly_time = 49;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(49, this->_internal_total_assembly_time(), target);
  }

  // required uint64 retransmitted_packets_received = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(50, this->_internal_retransmitted_packets_received(), target);
  }

  // required uint64 retransmitted_bytes_received = 51;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(51, this->_internal_retransmitted_bytes_received(), target);
  }

  // required uint32 rtx_ssrc = 52;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(52, this->_internal_rtx_ssrc(), target);
  }

  // required uint32 fec_ssrc = 53;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_fec_ssrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.InboundRtpStreamStats)
  return target;
}

size_t InboundRtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.InboundRtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_track_identifier()) {
    // required string track_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_identifier());
  }

  if (_internal_has_mid()) {
    // required string mid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  if (_internal_has_remote_id()) {
    // required string remote_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  if (_internal_has_decoder_implementation()) {
    // required string decoder_implementation = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decoder_implementation());
  }

  if (_internal_has_playout_id()) {
    // required string playout_id = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playout_id());
  }

  if (_internal_has_frames_decoded()) {
    // required uint32 frames_decoded = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_decoded());
  }

  if (_internal_has_key_frames_decoded()) {
    // required uint32 key_frames_decoded = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_frames_decoded());
  }

  if (_internal_has_frames_rendered()) {
    // required uint32 frames_rendered = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_rendered());
  }

  if (_internal_has_frames_dropped()) {
    // required uint32 frames_dropped = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_dropped());
  }

  if (_internal_has_frame_width()) {
    // required uint32 frame_width = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_width());
  }

  if (_internal_has_frame_height()) {
    // required uint32 frame_height = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_height());
  }

  if (_internal_has_frames_per_second()) {
    // required double frames_per_second = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_qp_sum()) {
    // required uint64 qp_sum = 11;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_qp_sum());
  }

  if (_internal_has_total_decode_time()) {
    // required double total_decode_time = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_total_inter_frame_delay()) {
    // required double total_inter_frame_delay = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_total_squared_inter_frame_delay()) {
    // required double total_squared_inter_frame_delay = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_total_pause_duration()) {
    // required double total_pause_duration = 16;
    total_size += 2 + 8;
  }

  if (_internal_has_pause_count()) {
    // required uint32 pause_count = 15;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pause_count());
  }

  if (_internal_has_freeze_count()) {
    // required uint32 freeze_count = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_freeze_count());
  }

  if (_internal_has_total_freeze_duration()) {
    // required double total_freeze_duration = 18;
    total_size += 2 + 8;
  }

  if (_internal_has_last_packet_received_timestamp()) {
    // required double last_packet_received_timestamp = 19;
    total_size += 2 + 8;
  }

  if (_internal_has_header_bytes_received()) {
    // required uint64 header_bytes_received = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_header_bytes_received());
  }

  if (_internal_has_packets_discarded()) {
    // required uint64 packets_discarded = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_packets_discarded());
  }

  if (_internal_has_fec_bytes_received()) {
    // required uint64 fec_bytes_received = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fec_bytes_received());
  }

  if (_internal_has_fec_packets_received()) {
    // required uint64 fec_packets_received = 23;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fec_packets_received());
  }

  if (_internal_has_fec_packets_discarded()) {
    // required uint64 fec_packets_discarded = 24;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fec_packets_discarded());
  }

  if (_internal_has_bytes_received()) {
    // required uint64 bytes_received = 25;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_received());
  }

  if (_internal_has_nack_count()) {
    // required uint32 nack_count = 26;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_count());
  }

  if (_internal_has_fir_count()) {
    // required uint32 fir_count = 27;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fir_count());
  }

  if (_internal_has_total_processing_delay()) {
    // required double total_processing_delay = 29;
    total_size += 2 + 8;
  }

  if (_internal_has_estimated_playout_timestamp()) {
    // required double estimated_playout_timestamp = 30;
    total_size += 2 + 8;
  }

  if (_internal_has_jitter_buffer_delay()) {
    // required double jitter_buffer_delay = 31;
    total_size += 2 + 8;
  }

  if (_internal_has_jitter_buffer_target_delay()) {
    // required double jitter_buffer_target_delay = 32;
    total_size += 2 + 8;
  }

  if (_internal_has_jitter_buffer_emitted_count()) {
    // required uint64 jitter_buffer_emitted_count = 33;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_jitter_buffer_emitted_count());
  }

  if (_internal_has_jitter_buffer_minimum_delay()) {
    // required double jitter_buffer_minimum_delay = 34;
    total_size += 2 + 8;
  }

  if (_internal_has_total_samples_received()) {
    // required uint64 total_samples_received = 35;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_total_samples_received());
  }

  if (_internal_has_concealed_samples()) {
    // required uint64 concealed_samples = 36;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_concealed_samples());
  }

  if (_internal_has_silent_concealed_samples()) {
    // required uint64 silent_concealed_samples = 37;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_silent_concealed_samples());
  }

  if (_internal_has_pli_count()) {
    // required uint32 pli_count = 28;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pli_count());
  }

  if (_internal_has_power_efficient_decoder()) {
    // required bool power_efficient_decoder = 47;
    total_size += 2 + 1;
  }

  if (_internal_has_concealment_events()) {
    // required uint64 concealment_events = 38;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_concealment_events());
  }

  if (_internal_has_inserted_samples_for_deceleration()) {
    // required uint64 inserted_samples_for_deceleration = 39;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_inserted_samples_for_deceleration());
  }

  if (_internal_has_removed_samples_for_acceleration()) {
    // required uint64 removed_samples_for_acceleration = 40;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_removed_samples_for_acceleration());
  }

  if (_internal_has_audio_level()) {
    // required double audio_level = 41;
    total_size += 2 + 8;
  }

  if (_internal_has_total_audio_energy()) {
    // required double total_audio_energy = 42;
    total_size += 2 + 8;
  }

  if (_internal_has_total_samples_duration()) {
    // required double total_samples_duration = 43;
    total_size += 2 + 8;
  }

  if (_internal_has_frames_received()) {
    // required uint64 frames_received = 44;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_frames_received());
  }

  if (_internal_has_frames_assembled_from_multiple_packets()) {
    // required uint64 frames_assembled_from_multiple_packets = 48;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_frames_assembled_from_multiple_packets());
  }

  if (_internal_has_total_assembly_time()) {
    // required double total_assembly_time = 49;
    total_size += 2 + 8;
  }

  if (_internal_has_retransmitted_packets_received()) {
    // required uint64 retransmitted_packets_received = 50;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_retransmitted_packets_received());
  }

  if (_internal_has_retransmitted_bytes_received()) {
    // required uint64 retransmitted_bytes_received = 51;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_retransmitted_bytes_received());
  }

  if (_internal_has_rtx_ssrc()) {
    // required uint32 rtx_ssrc = 52;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rtx_ssrc());
  }

  if (_internal_has_fec_ssrc()) {
    // required uint32 fec_ssrc = 53;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fec_ssrc());
  }

  return total_size;
}
size_t InboundRtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.InboundRtpStreamStats)
  size_t total_size = 0;

  if ((((_impl_._has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_impl_._has_bits_[1] & 0x001fffff) ^ 0x001fffff)) == 0) {  // All required fields are present.
    // required string track_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_identifier());

    // required string mid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());

    // required string remote_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());

    // required string decoder_implementation = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decoder_implementation());

    // required string playout_id = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playout_id());

    // required uint32 frames_decoded = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_decoded());

    // required uint32 key_frames_decoded = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_frames_decoded());

    // required uint32 frames_rendered = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_rendered());

    // required uint32 frames_dropped = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_dropped());

    // required uint32 frame_width = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_width());

    // required uint32 frame_height = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_height());

    // required double frames_per_second = 10;
    total_size += 1 + 8;

    // required uint64 qp_sum = 11;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_qp_sum());

    // required double total_decode_time = 12;
    total_size += 1 + 8;

    // required double total_inter_frame_delay = 13;
    total_size += 1 + 8;

    // required double total_squared_inter_frame_delay = 14;
    total_size += 1 + 8;

    // required double total_pause_duration = 16;
    total_size += 2 + 8;

    // required uint32 pause_count = 15;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pause_count());

    // required uint32 freeze_count = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_freeze_count());

    // required double total_freeze_duration = 18;
    total_size += 2 + 8;

    // required double last_packet_received_timestamp = 19;
    total_size += 2 + 8;

    // required uint64 header_bytes_received = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_header_bytes_received());

    // required uint64 packets_discarded = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_packets_discarded());

    // required uint64 fec_bytes_received = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fec_bytes_received());

    // required uint64 fec_packets_received = 23;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fec_packets_received());

    // required uint64 fec_packets_discarded = 24;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fec_packets_discarded());

    // required uint64 bytes_received = 25;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_received());

    // required uint32 nack_count = 26;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_count());

    // required uint32 fir_count = 27;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fir_count());

    // required double total_processing_delay = 29;
    total_size += 2 + 8;

    // required double estimated_playout_timestamp = 30;
    total_size += 2 + 8;

    // required double jitter_buffer_delay = 31;
    total_size += 2 + 8;

    // required double jitter_buffer_target_delay = 32;
    total_size += 2 + 8;

    // required uint64 jitter_buffer_emitted_count = 33;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_jitter_buffer_emitted_count());

    // required double jitter_buffer_minimum_delay = 34;
    total_size += 2 + 8;

    // required uint64 total_samples_received = 35;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_total_samples_received());

    // required uint64 concealed_samples = 36;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_concealed_samples());

    // required uint64 silent_concealed_samples = 37;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_silent_concealed_samples());

    // required uint32 pli_count = 28;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pli_count());

    // required bool power_efficient_decoder = 47;
    total_size += 2 + 1;

    // required uint64 concealment_events = 38;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_concealment_events());

    // required uint64 inserted_samples_for_deceleration = 39;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_inserted_samples_for_deceleration());

    // required uint64 removed_samples_for_acceleration = 40;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_removed_samples_for_acceleration());

    // required double audio_level = 41;
    total_size += 2 + 8;

    // required double total_audio_energy = 42;
    total_size += 2 + 8;

    // required double total_samples_duration = 43;
    total_size += 2 + 8;

    // required uint64 frames_received = 44;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_frames_received());

    // required uint64 frames_assembled_from_multiple_packets = 48;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_frames_assembled_from_multiple_packets());

    // required double total_assembly_time = 49;
    total_size += 2 + 8;

    // required uint64 retransmitted_packets_received = 50;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_retransmitted_packets_received());

    // required uint64 retransmitted_bytes_received = 51;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_retransmitted_bytes_received());

    // required uint32 rtx_ssrc = 52;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rtx_ssrc());

    // required uint32 fec_ssrc = 53;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fec_ssrc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InboundRtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InboundRtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InboundRtpStreamStats::GetClassData() const { return &_class_data_; }


void InboundRtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InboundRtpStreamStats*>(&to_msg);
  auto& from = static_cast<const InboundRtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.InboundRtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_track_identifier(from._internal_track_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mid(from._internal_mid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_remote_id(from._internal_remote_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_decoder_implementation(from._internal_decoder_implementation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_playout_id(from._internal_playout_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.frames_decoded_ = from._impl_.frames_decoded_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.key_frames_decoded_ = from._impl_.key_frames_decoded_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.frames_rendered_ = from._impl_.frames_rendered_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.frames_dropped_ = from._impl_.frames_dropped_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.frame_width_ = from._impl_.frame_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.frame_height_ = from._impl_.frame_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.frames_per_second_ = from._impl_.frames_per_second_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.qp_sum_ = from._impl_.qp_sum_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.total_decode_time_ = from._impl_.total_decode_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.total_inter_frame_delay_ = from._impl_.total_inter_frame_delay_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.total_squared_inter_frame_delay_ = from._impl_.total_squared_inter_frame_delay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.total_pause_duration_ = from._impl_.total_pause_duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.pause_count_ = from._impl_.pause_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.freeze_count_ = from._impl_.freeze_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.total_freeze_duration_ = from._impl_.total_freeze_duration_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.last_packet_received_timestamp_ = from._impl_.last_packet_received_timestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.header_bytes_received_ = from._impl_.header_bytes_received_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.packets_discarded_ = from._impl_.packets_discarded_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.fec_bytes_received_ = from._impl_.fec_bytes_received_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.fec_packets_received_ = from._impl_.fec_packets_received_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.fec_packets_discarded_ = from._impl_.fec_packets_discarded_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.bytes_received_ = from._impl_.bytes_received_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.nack_count_ = from._impl_.nack_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.fir_count_ = from._impl_.fir_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.total_processing_delay_ = from._impl_.total_processing_delay_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.estimated_playout_timestamp_ = from._impl_.estimated_playout_timestamp_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.jitter_buffer_delay_ = from._impl_.jitter_buffer_delay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.jitter_buffer_target_delay_ = from._impl_.jitter_buffer_target_delay_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.jitter_buffer_emitted_count_ = from._impl_.jitter_buffer_emitted_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.jitter_buffer_minimum_delay_ = from._impl_.jitter_buffer_minimum_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.total_samples_received_ = from._impl_.total_samples_received_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.concealed_samples_ = from._impl_.concealed_samples_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.silent_concealed_samples_ = from._impl_.silent_concealed_samples_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pli_count_ = from._impl_.pli_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.power_efficient_decoder_ = from._impl_.power_efficient_decoder_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.concealment_events_ = from._impl_.concealment_events_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.inserted_samples_for_deceleration_ = from._impl_.inserted_samples_for_deceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.removed_samples_for_acceleration_ = from._impl_.removed_samples_for_acceleration_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.audio_level_ = from._impl_.audio_level_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.total_audio_energy_ = from._impl_.total_audio_energy_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.total_samples_duration_ = from._impl_.total_samples_duration_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.frames_received_ = from._impl_.frames_received_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.frames_assembled_from_multiple_packets_ = from._impl_.frames_assembled_from_multiple_packets_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.total_assembly_time_ = from._impl_.total_assembly_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.retransmitted_packets_received_ = from._impl_.retransmitted_packets_received_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.retransmitted_bytes_received_ = from._impl_.retransmitted_bytes_received_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.rtx_ssrc_ = from._impl_.rtx_ssrc_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.fec_ssrc_ = from._impl_.fec_ssrc_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InboundRtpStreamStats::CopyFrom(const InboundRtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.InboundRtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundRtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InboundRtpStreamStats::InternalSwap(InboundRtpStreamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_identifier_, lhs_arena,
      &other->_impl_.track_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mid_, lhs_arena,
      &other->_impl_.mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_id_, lhs_arena,
      &other->_impl_.remote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decoder_implementation_, lhs_arena,
      &other->_impl_.decoder_implementation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playout_id_, lhs_arena,
      &other->_impl_.playout_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundRtpStreamStats, _impl_.fec_ssrc_)
      + sizeof(InboundRtpStreamStats::_impl_.fec_ssrc_)
      - PROTOBUF_FIELD_OFFSET(InboundRtpStreamStats, _impl_.frames_decoded_)>(
          reinterpret_cast<char*>(&_impl_.frames_decoded_),
          reinterpret_cast<char*>(&other->_impl_.frames_decoded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundRtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[21]);
}

// ===================================================================

class SentRtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<SentRtpStreamStats>()._impl_._has_bits_);
  static void set_has_packets_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SentRtpStreamStats::SentRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SentRtpStreamStats)
}
SentRtpStreamStats::SentRtpStreamStats(const SentRtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SentRtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packets_sent_){}
    , decltype(_impl_.bytes_sent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packets_sent_, &from._impl_.packets_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bytes_sent_) -
    reinterpret_cast<char*>(&_impl_.packets_sent_)) + sizeof(_impl_.bytes_sent_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SentRtpStreamStats)
}

inline void SentRtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packets_sent_){uint64_t{0u}}
    , decltype(_impl_.bytes_sent_){uint64_t{0u}}
  };
}

SentRtpStreamStats::~SentRtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.SentRtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SentRtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SentRtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SentRtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SentRtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.packets_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_sent_) -
        reinterpret_cast<char*>(&_impl_.packets_sent_)) + sizeof(_impl_.bytes_sent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentRtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 packets_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packets_sent(&has_bits);
          _impl_.packets_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bytes_sent(&has_bits);
          _impl_.bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SentRtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SentRtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 packets_sent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packets_sent(), target);
  }

  // required uint64 bytes_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bytes_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SentRtpStreamStats)
  return target;
}

size_t SentRtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SentRtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_packets_sent()) {
    // required uint64 packets_sent = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_sent());
  }

  if (_internal_has_bytes_sent()) {
    // required uint64 bytes_sent = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());
  }

  return total_size;
}
size_t SentRtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SentRtpStreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 packets_sent = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_sent());

    // required uint64 bytes_sent = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SentRtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SentRtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SentRtpStreamStats::GetClassData() const { return &_class_data_; }


void SentRtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SentRtpStreamStats*>(&to_msg);
  auto& from = static_cast<const SentRtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SentRtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packets_sent_ = from._impl_.packets_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bytes_sent_ = from._impl_.bytes_sent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SentRtpStreamStats::CopyFrom(const SentRtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SentRtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentRtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SentRtpStreamStats::InternalSwap(SentRtpStreamStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SentRtpStreamStats, _impl_.bytes_sent_)
      + sizeof(SentRtpStreamStats::_impl_.bytes_sent_)
      - PROTOBUF_FIELD_OFFSET(SentRtpStreamStats, _impl_.packets_sent_)>(
          reinterpret_cast<char*>(&_impl_.packets_sent_),
          reinterpret_cast<char*>(&other->_impl_.packets_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SentRtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[22]);
}

// ===================================================================

OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse() {}
OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::MergeFrom(const OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[23]);
}

// ===================================================================

class OutboundRtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<OutboundRtpStreamStats>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_media_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_header_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_retransmitted_packets_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_retransmitted_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_target_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_encoded_bytes_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_frames_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_frames_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_huge_frames_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_frames_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_key_frames_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_qp_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_total_encode_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_total_packet_send_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_quality_limitation_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_quality_limitation_resolution_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_nack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fir_count(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pli_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_encoder_implementation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_power_efficient_encoder(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_scalability_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x1fffffff) ^ 0x1fffffff) != 0;
  }
};

OutboundRtpStreamStats::OutboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &OutboundRtpStreamStats::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.proto.OutboundRtpStreamStats)
}
OutboundRtpStreamStats::OutboundRtpStreamStats(const OutboundRtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutboundRtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.quality_limitation_durations_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.media_source_id_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.encoder_implementation_){}
    , decltype(_impl_.scalability_mode_){}
    , decltype(_impl_.header_bytes_sent_){}
    , decltype(_impl_.retransmitted_packets_sent_){}
    , decltype(_impl_.retransmitted_bytes_sent_){}
    , decltype(_impl_.target_bitrate_){}
    , decltype(_impl_.rtx_ssrc_){}
    , decltype(_impl_.frame_width_){}
    , decltype(_impl_.total_encoded_bytes_target_){}
    , decltype(_impl_.frames_per_second_){}
    , decltype(_impl_.frame_height_){}
    , decltype(_impl_.frames_sent_){}
    , decltype(_impl_.huge_frames_sent_){}
    , decltype(_impl_.frames_encoded_){}
    , decltype(_impl_.qp_sum_){}
    , decltype(_impl_.total_encode_time_){}
    , decltype(_impl_.key_frames_encoded_){}
    , decltype(_impl_.quality_limitation_reason_){}
    , decltype(_impl_.total_packet_send_delay_){}
    , decltype(_impl_.quality_limitation_resolution_changes_){}
    , decltype(_impl_.nack_count_){}
    , decltype(_impl_.fir_count_){}
    , decltype(_impl_.pli_count_){}
    , decltype(_impl_.power_efficient_encoder_){}
    , decltype(_impl_.active_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.quality_limitation_durations_.MergeFrom(from._impl_.quality_limitation_durations_);
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mid()) {
    _this->_impl_.mid_.Set(from._internal_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.media_source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_media_source_id()) {
    _this->_impl_.media_source_id_.Set(from._internal_media_source_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_id()) {
    _this->_impl_.remote_id_.Set(from._internal_remote_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rid()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encoder_implementation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_implementation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encoder_implementation()) {
    _this->_impl_.encoder_implementation_.Set(from._internal_encoder_implementation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scalability_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scalability_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scalability_mode()) {
    _this->_impl_.scalability_mode_.Set(from._internal_scalability_mode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.header_bytes_sent_, &from._impl_.header_bytes_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.header_bytes_sent_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.OutboundRtpStreamStats)
}

inline void OutboundRtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.quality_limitation_durations_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.media_source_id_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.encoder_implementation_){}
    , decltype(_impl_.scalability_mode_){}
    , decltype(_impl_.header_bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.retransmitted_packets_sent_){uint64_t{0u}}
    , decltype(_impl_.retransmitted_bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.target_bitrate_){0}
    , decltype(_impl_.rtx_ssrc_){0u}
    , decltype(_impl_.frame_width_){0u}
    , decltype(_impl_.total_encoded_bytes_target_){uint64_t{0u}}
    , decltype(_impl_.frames_per_second_){0}
    , decltype(_impl_.frame_height_){0u}
    , decltype(_impl_.frames_sent_){0u}
    , decltype(_impl_.huge_frames_sent_){0u}
    , decltype(_impl_.frames_encoded_){0u}
    , decltype(_impl_.qp_sum_){uint64_t{0u}}
    , decltype(_impl_.total_encode_time_){0}
    , decltype(_impl_.key_frames_encoded_){0u}
    , decltype(_impl_.quality_limitation_reason_){0}
    , decltype(_impl_.total_packet_send_delay_){0}
    , decltype(_impl_.quality_limitation_resolution_changes_){0u}
    , decltype(_impl_.nack_count_){0u}
    , decltype(_impl_.fir_count_){0u}
    , decltype(_impl_.pli_count_){0u}
    , decltype(_impl_.power_efficient_encoder_){false}
    , decltype(_impl_.active_){false}
  };
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.media_source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoder_implementation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_implementation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scalability_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scalability_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutboundRtpStreamStats::~OutboundRtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.OutboundRtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OutboundRtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quality_limitation_durations_.Destruct();
  _impl_.quality_limitation_durations_.~MapField();
  _impl_.mid_.Destroy();
  _impl_.media_source_id_.Destroy();
  _impl_.remote_id_.Destroy();
  _impl_.rid_.Destroy();
  _impl_.encoder_implementation_.Destroy();
  _impl_.scalability_mode_.Destroy();
}

void OutboundRtpStreamStats::ArenaDtor(void* object) {
  OutboundRtpStreamStats* _this = reinterpret_cast< OutboundRtpStreamStats* >(object);
  _this->_impl_.quality_limitation_durations_.Destruct();
}
void OutboundRtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutboundRtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.OutboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quality_limitation_durations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.media_source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.remote_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.rid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.encoder_implementation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.scalability_mode_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.header_bytes_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.retransmitted_packets_sent_) -
        reinterpret_cast<char*>(&_impl_.header_bytes_sent_)) + sizeof(_impl_.retransmitted_packets_sent_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.retransmitted_bytes_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frames_sent_) -
        reinterpret_cast<char*>(&_impl_.retransmitted_bytes_sent_)) + sizeof(_impl_.frames_sent_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.huge_frames_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quality_limitation_resolution_changes_) -
        reinterpret_cast<char*>(&_impl_.huge_frames_sent_)) + sizeof(_impl_.quality_limitation_resolution_changes_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&_impl_.nack_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.nack_count_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundRtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.OutboundRtpStreamStats.mid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string media_source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_media_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.OutboundRtpStreamStats.media_source_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string remote_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.OutboundRtpStreamStats.remote_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string rid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.OutboundRtpStreamStats.rid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 header_bytes_sent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_header_bytes_sent(&has_bits);
          _impl_.header_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 retransmitted_packets_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_retransmitted_packets_sent(&has_bits);
          _impl_.retransmitted_packets_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 retransmitted_bytes_sent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_retransmitted_bytes_sent(&has_bits);
          _impl_.retransmitted_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 rtx_ssrc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_rtx_ssrc(&has_bits);
          _impl_.rtx_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double target_bitrate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_target_bitrate(&has_bits);
          _impl_.target_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 total_encoded_bytes_target = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_total_encoded_bytes_target(&has_bits);
          _impl_.total_encoded_bytes_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frame_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_frame_width(&has_bits);
          _impl_.frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frame_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_frame_height(&has_bits);
          _impl_.frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double frames_per_second = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_frames_per_second(&has_bits);
          _impl_.frames_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frames_sent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_frames_sent(&has_bits);
          _impl_.frames_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 huge_frames_sent = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_huge_frames_sent(&has_bits);
          _impl_.huge_frames_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frames_encoded = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_frames_encoded(&has_bits);
          _impl_.frames_encoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 key_frames_encoded = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_key_frames_encoded(&has_bits);
          _impl_.key_frames_encoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 qp_sum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_qp_sum(&has_bits);
          _impl_.qp_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_encode_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_total_encode_time(&has_bits);
          _impl_.total_encode_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_packet_send_delay = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_total_packet_send_delay(&has_bits);
          _impl_.total_packet_send_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::QualityLimitationReason_IsValid(val))) {
            _internal_set_quality_limitation_reason(static_cast<::livekit::proto::QualityLimitationReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // map<string, double> quality_limitation_durations = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.quality_limitation_durations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 quality_limitation_resolution_changes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_quality_limitation_resolution_changes(&has_bits);
          _impl_.quality_limitation_resolution_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 nack_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_nack_count(&has_bits);
          _impl_.nack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 fir_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_fir_count(&has_bits);
          _impl_.fir_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 pli_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_pli_count(&has_bits);
          _impl_.pli_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string encoder_implementation = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_encoder_implementation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.OutboundRtpStreamStats.encoder_implementation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool power_efficient_encoder = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_power_efficient_encoder(&has_bits);
          _impl_.power_efficient_encoder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool active = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string scalability_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_scalability_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.OutboundRtpStreamStats.scalability_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutboundRtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.OutboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.OutboundRtpStreamStats.mid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mid(), target);
  }

  // required string media_source_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_media_source_id().data(), static_cast<int>(this->_internal_media_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.OutboundRtpStreamStats.media_source_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_media_source_id(), target);
  }

  // required string remote_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.OutboundRtpStreamStats.remote_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_id(), target);
  }

  // required string rid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.OutboundRtpStreamStats.rid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rid(), target);
  }

  // required uint64 header_bytes_sent = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_header_bytes_sent(), target);
  }

  // required uint64 retransmitted_packets_sent = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_retransmitted_packets_sent(), target);
  }

  // required uint64 retransmitted_bytes_sent = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_retransmitted_bytes_sent(), target);
  }

  // required uint32 rtx_ssrc = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rtx_ssrc(), target);
  }

  // required double target_bitrate = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_target_bitrate(), target);
  }

  // required uint64 total_encoded_bytes_target = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_encoded_bytes_target(), target);
  }

  // required uint32 frame_width = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_frame_width(), target);
  }

  // required uint32 frame_height = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_frame_height(), target);
  }

  // required double frames_per_second = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_frames_per_second(), target);
  }

  // required uint32 frames_sent = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_frames_sent(), target);
  }

  // required uint32 huge_frames_sent = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_huge_frames_sent(), target);
  }

  // required uint32 frames_encoded = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_frames_encoded(), target);
  }

  // required uint32 key_frames_encoded = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_key_frames_encoded(), target);
  }

  // required uint64 qp_sum = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_qp_sum(), target);
  }

  // required double total_encode_time = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_total_encode_time(), target);
  }

  // required double total_packet_send_delay = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_total_packet_send_delay(), target);
  }

  // required .livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_quality_limitation_reason(), target);
  }

  // map<string, double> quality_limitation_durations = 22;
  if (!this->_internal_quality_limitation_durations().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_quality_limitation_durations();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.OutboundRtpStreamStats.QualityLimitationDurationsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // required uint32 quality_limitation_resolution_changes = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_quality_limitation_resolution_changes(), target);
  }

  // required uint32 nack_count = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_nack_count(), target);
  }

  // required uint32 fir_count = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_fir_count(), target);
  }

  // required uint32 pli_count = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_pli_count(), target);
  }

  // required string encoder_implementation = 27;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encoder_implementation().data(), static_cast<int>(this->_internal_encoder_implementation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.OutboundRtpStreamStats.encoder_implementation");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_encoder_implementation(), target);
  }

  // required bool power_efficient_encoder = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_power_efficient_encoder(), target);
  }

  // required bool active = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_active(), target);
  }

  // required string scalability_mode = 30;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scalability_mode().data(), static_cast<int>(this->_internal_scalability_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.OutboundRtpStreamStats.scalability_mode");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_scalability_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.OutboundRtpStreamStats)
  return target;
}

size_t OutboundRtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.OutboundRtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_mid()) {
    // required string mid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  if (_internal_has_media_source_id()) {
    // required string media_source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_source_id());
  }

  if (_internal_has_remote_id()) {
    // required string remote_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  if (_internal_has_rid()) {
    // required string rid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  if (_internal_has_encoder_implementation()) {
    // required string encoder_implementation = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoder_implementation());
  }

  if (_internal_has_scalability_mode()) {
    // required string scalability_mode = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scalability_mode());
  }

  if (_internal_has_header_bytes_sent()) {
    // required uint64 header_bytes_sent = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_header_bytes_sent());
  }

  if (_internal_has_retransmitted_packets_sent()) {
    // required uint64 retransmitted_packets_sent = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_retransmitted_packets_sent());
  }

  if (_internal_has_retransmitted_bytes_sent()) {
    // required uint64 retransmitted_bytes_sent = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_retransmitted_bytes_sent());
  }

  if (_internal_has_target_bitrate()) {
    // required double target_bitrate = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_rtx_ssrc()) {
    // required uint32 rtx_ssrc = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtx_ssrc());
  }

  if (_internal_has_frame_width()) {
    // required uint32 frame_width = 11;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_width());
  }

  if (_internal_has_total_encoded_bytes_target()) {
    // required uint64 total_encoded_bytes_target = 10;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_encoded_bytes_target());
  }

  if (_internal_has_frames_per_second()) {
    // required double frames_per_second = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_frame_height()) {
    // required uint32 frame_height = 12;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_height());
  }

  if (_internal_has_frames_sent()) {
    // required uint32 frames_sent = 14;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_sent());
  }

  if (_internal_has_huge_frames_sent()) {
    // required uint32 huge_frames_sent = 15;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_huge_frames_sent());
  }

  if (_internal_has_frames_encoded()) {
    // required uint32 frames_encoded = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_frames_encoded());
  }

  if (_internal_has_qp_sum()) {
    // required uint64 qp_sum = 18;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_qp_sum());
  }

  if (_internal_has_total_encode_time()) {
    // required double total_encode_time = 19;
    total_size += 2 + 8;
  }

  if (_internal_has_key_frames_encoded()) {
    // required uint32 key_frames_encoded = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_key_frames_encoded());
  }

  if (_internal_has_quality_limitation_reason()) {
    // required .livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality_limitation_reason());
  }

  if (_internal_has_total_packet_send_delay()) {
    // required double total_packet_send_delay = 20;
    total_size += 2 + 8;
  }

  if (_internal_has_quality_limitation_resolution_changes()) {
    // required uint32 quality_limitation_resolution_changes = 23;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_quality_limitation_resolution_changes());
  }

  if (_internal_has_nack_count()) {
    // required uint32 nack_count = 24;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_count());
  }

  if (_internal_has_fir_count()) {
    // required uint32 fir_count = 25;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fir_count());
  }

  if (_internal_has_pli_count()) {
    // required uint32 pli_count = 26;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pli_count());
  }

  if (_internal_has_power_efficient_encoder()) {
    // required bool power_efficient_encoder = 28;
    total_size += 2 + 1;
  }

  if (_internal_has_active()) {
    // required bool active = 29;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t OutboundRtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.OutboundRtpStreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x1fffffff) ^ 0x1fffffff) == 0) {  // All required fields are present.
    // required string mid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());

    // required string media_source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_source_id());

    // required string remote_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());

    // required string rid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());

    // required string encoder_implementation = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoder_implementation());

    // required string scalability_mode = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scalability_mode());

    // required uint64 header_bytes_sent = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_header_bytes_sent());

    // required uint64 retransmitted_packets_sent = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_retransmitted_packets_sent());

    // required uint64 retransmitted_bytes_sent = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_retransmitted_bytes_sent());

    // required double target_bitrate = 9;
    total_size += 1 + 8;

    // required uint32 rtx_ssrc = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtx_ssrc());

    // required uint32 frame_width = 11;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_width());

    // required uint64 total_encoded_bytes_target = 10;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_encoded_bytes_target());

    // required double frames_per_second = 13;
    total_size += 1 + 8;

    // required uint32 frame_height = 12;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_height());

    // required uint32 frames_sent = 14;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_sent());

    // required uint32 huge_frames_sent = 15;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_huge_frames_sent());

    // required uint32 frames_encoded = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_frames_encoded());

    // required uint64 qp_sum = 18;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_qp_sum());

    // required double total_encode_time = 19;
    total_size += 2 + 8;

    // required uint32 key_frames_encoded = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_key_frames_encoded());

    // required .livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality_limitation_reason());

    // required double total_packet_send_delay = 20;
    total_size += 2 + 8;

    // required uint32 quality_limitation_resolution_changes = 23;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_quality_limitation_resolution_changes());

    // required uint32 nack_count = 24;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_nack_count());

    // required uint32 fir_count = 25;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fir_count());

    // required uint32 pli_count = 26;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pli_count());

    // required bool power_efficient_encoder = 28;
    total_size += 2 + 1;

    // required bool active = 29;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> quality_limitation_durations = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_quality_limitation_durations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_quality_limitation_durations().begin();
      it != this->_internal_quality_limitation_durations().end(); ++it) {
    total_size += OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutboundRtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutboundRtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutboundRtpStreamStats::GetClassData() const { return &_class_data_; }


void OutboundRtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutboundRtpStreamStats*>(&to_msg);
  auto& from = static_cast<const OutboundRtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.OutboundRtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quality_limitation_durations_.MergeFrom(from._impl_.quality_limitation_durations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mid(from._internal_mid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_media_source_id(from._internal_media_source_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_remote_id(from._internal_remote_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_rid(from._internal_rid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_encoder_implementation(from._internal_encoder_implementation());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_scalability_mode(from._internal_scalability_mode());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.header_bytes_sent_ = from._impl_.header_bytes_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.retransmitted_packets_sent_ = from._impl_.retransmitted_packets_sent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.retransmitted_bytes_sent_ = from._impl_.retransmitted_bytes_sent_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.target_bitrate_ = from._impl_.target_bitrate_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.rtx_ssrc_ = from._impl_.rtx_ssrc_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.frame_width_ = from._impl_.frame_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.total_encoded_bytes_target_ = from._impl_.total_encoded_bytes_target_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.frames_per_second_ = from._impl_.frames_per_second_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.frame_height_ = from._impl_.frame_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.frames_sent_ = from._impl_.frames_sent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.huge_frames_sent_ = from._impl_.huge_frames_sent_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.frames_encoded_ = from._impl_.frames_encoded_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.qp_sum_ = from._impl_.qp_sum_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.total_encode_time_ = from._impl_.total_encode_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.key_frames_encoded_ = from._impl_.key_frames_encoded_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.quality_limitation_reason_ = from._impl_.quality_limitation_reason_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.total_packet_send_delay_ = from._impl_.total_packet_send_delay_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.quality_limitation_resolution_changes_ = from._impl_.quality_limitation_resolution_changes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.nack_count_ = from._impl_.nack_count_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.fir_count_ = from._impl_.fir_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.pli_count_ = from._impl_.pli_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.power_efficient_encoder_ = from._impl_.power_efficient_encoder_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutboundRtpStreamStats::CopyFrom(const OutboundRtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.OutboundRtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundRtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void OutboundRtpStreamStats::InternalSwap(OutboundRtpStreamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.quality_limitation_durations_.InternalSwap(&other->_impl_.quality_limitation_durations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mid_, lhs_arena,
      &other->_impl_.mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_source_id_, lhs_arena,
      &other->_impl_.media_source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_id_, lhs_arena,
      &other->_impl_.remote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoder_implementation_, lhs_arena,
      &other->_impl_.encoder_implementation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scalability_mode_, lhs_arena,
      &other->_impl_.scalability_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutboundRtpStreamStats, _impl_.active_)
      + sizeof(OutboundRtpStreamStats::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(OutboundRtpStreamStats, _impl_.header_bytes_sent_)>(
          reinterpret_cast<char*>(&_impl_.header_bytes_sent_),
          reinterpret_cast<char*>(&other->_impl_.header_bytes_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundRtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[24]);
}

// ===================================================================

class RemoteInboundRtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteInboundRtpStreamStats>()._impl_._has_bits_);
  static void set_has_local_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_round_trip_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_round_trip_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fraction_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_round_trip_time_measurements(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

RemoteInboundRtpStreamStats::RemoteInboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RemoteInboundRtpStreamStats)
}
RemoteInboundRtpStreamStats::RemoteInboundRtpStreamStats(const RemoteInboundRtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteInboundRtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_id_){}
    , decltype(_impl_.round_trip_time_){}
    , decltype(_impl_.total_round_trip_time_){}
    , decltype(_impl_.fraction_lost_){}
    , decltype(_impl_.round_trip_time_measurements_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.local_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_id()) {
    _this->_impl_.local_id_.Set(from._internal_local_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.round_trip_time_, &from._impl_.round_trip_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.round_trip_time_measurements_) -
    reinterpret_cast<char*>(&_impl_.round_trip_time_)) + sizeof(_impl_.round_trip_time_measurements_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RemoteInboundRtpStreamStats)
}

inline void RemoteInboundRtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_id_){}
    , decltype(_impl_.round_trip_time_){0}
    , decltype(_impl_.total_round_trip_time_){0}
    , decltype(_impl_.fraction_lost_){0}
    , decltype(_impl_.round_trip_time_measurements_){uint64_t{0u}}
  };
  _impl_.local_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteInboundRtpStreamStats::~RemoteInboundRtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.RemoteInboundRtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteInboundRtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_id_.Destroy();
}

void RemoteInboundRtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteInboundRtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RemoteInboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.local_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.round_trip_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.round_trip_time_measurements_) -
        reinterpret_cast<char*>(&_impl_.round_trip_time_)) + sizeof(_impl_.round_trip_time_measurements_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteInboundRtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string local_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_local_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RemoteInboundRtpStreamStats.local_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double round_trip_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_round_trip_time(&has_bits);
          _impl_.round_trip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_round_trip_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_total_round_trip_time(&has_bits);
          _impl_.total_round_trip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double fraction_lost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_fraction_lost(&has_bits);
          _impl_.fraction_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 round_trip_time_measurements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_round_trip_time_measurements(&has_bits);
          _impl_.round_trip_time_measurements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteInboundRtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RemoteInboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string local_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_id().data(), static_cast<int>(this->_internal_local_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RemoteInboundRtpStreamStats.local_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_id(), target);
  }

  // required double round_trip_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_round_trip_time(), target);
  }

  // required double total_round_trip_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_round_trip_time(), target);
  }

  // required double fraction_lost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_fraction_lost(), target);
  }

  // required uint64 round_trip_time_measurements = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_round_trip_time_measurements(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RemoteInboundRtpStreamStats)
  return target;
}

size_t RemoteInboundRtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RemoteInboundRtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_local_id()) {
    // required string local_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_id());
  }

  if (_internal_has_round_trip_time()) {
    // required double round_trip_time = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_total_round_trip_time()) {
    // required double total_round_trip_time = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_fraction_lost()) {
    // required double fraction_lost = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_round_trip_time_measurements()) {
    // required uint64 round_trip_time_measurements = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round_trip_time_measurements());
  }

  return total_size;
}
size_t RemoteInboundRtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RemoteInboundRtpStreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string local_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_id());

    // required double round_trip_time = 2;
    total_size += 1 + 8;

    // required double total_round_trip_time = 3;
    total_size += 1 + 8;

    // required double fraction_lost = 4;
    total_size += 1 + 8;

    // required uint64 round_trip_time_measurements = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round_trip_time_measurements());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteInboundRtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteInboundRtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteInboundRtpStreamStats::GetClassData() const { return &_class_data_; }


void RemoteInboundRtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteInboundRtpStreamStats*>(&to_msg);
  auto& from = static_cast<const RemoteInboundRtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RemoteInboundRtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_local_id(from._internal_local_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.round_trip_time_ = from._impl_.round_trip_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_round_trip_time_ = from._impl_.total_round_trip_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fraction_lost_ = from._impl_.fraction_lost_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.round_trip_time_measurements_ = from._impl_.round_trip_time_measurements_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteInboundRtpStreamStats::CopyFrom(const RemoteInboundRtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RemoteInboundRtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteInboundRtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RemoteInboundRtpStreamStats::InternalSwap(RemoteInboundRtpStreamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_id_, lhs_arena,
      &other->_impl_.local_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteInboundRtpStreamStats, _impl_.round_trip_time_measurements_)
      + sizeof(RemoteInboundRtpStreamStats::_impl_.round_trip_time_measurements_)
      - PROTOBUF_FIELD_OFFSET(RemoteInboundRtpStreamStats, _impl_.round_trip_time_)>(
          reinterpret_cast<char*>(&_impl_.round_trip_time_),
          reinterpret_cast<char*>(&other->_impl_.round_trip_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteInboundRtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[25]);
}

// ===================================================================

class RemoteOutboundRtpStreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteOutboundRtpStreamStats>()._impl_._has_bits_);
  static void set_has_local_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reports_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_round_trip_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_round_trip_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_round_trip_time_measurements(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

RemoteOutboundRtpStreamStats::RemoteOutboundRtpStreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RemoteOutboundRtpStreamStats)
}
RemoteOutboundRtpStreamStats::RemoteOutboundRtpStreamStats(const RemoteOutboundRtpStreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteOutboundRtpStreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_id_){}
    , decltype(_impl_.remote_timestamp_){}
    , decltype(_impl_.reports_sent_){}
    , decltype(_impl_.round_trip_time_){}
    , decltype(_impl_.total_round_trip_time_){}
    , decltype(_impl_.round_trip_time_measurements_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.local_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_id()) {
    _this->_impl_.local_id_.Set(from._internal_local_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.remote_timestamp_, &from._impl_.remote_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.round_trip_time_measurements_) -
    reinterpret_cast<char*>(&_impl_.remote_timestamp_)) + sizeof(_impl_.round_trip_time_measurements_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RemoteOutboundRtpStreamStats)
}

inline void RemoteOutboundRtpStreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_id_){}
    , decltype(_impl_.remote_timestamp_){0}
    , decltype(_impl_.reports_sent_){uint64_t{0u}}
    , decltype(_impl_.round_trip_time_){0}
    , decltype(_impl_.total_round_trip_time_){0}
    , decltype(_impl_.round_trip_time_measurements_){uint64_t{0u}}
  };
  _impl_.local_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteOutboundRtpStreamStats::~RemoteOutboundRtpStreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.RemoteOutboundRtpStreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteOutboundRtpStreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_id_.Destroy();
}

void RemoteOutboundRtpStreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteOutboundRtpStreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RemoteOutboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.local_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.remote_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.round_trip_time_measurements_) -
        reinterpret_cast<char*>(&_impl_.remote_timestamp_)) + sizeof(_impl_.round_trip_time_measurements_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteOutboundRtpStreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string local_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_local_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RemoteOutboundRtpStreamStats.local_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double remote_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_remote_timestamp(&has_bits);
          _impl_.remote_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 reports_sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reports_sent(&has_bits);
          _impl_.reports_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double round_trip_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_round_trip_time(&has_bits);
          _impl_.round_trip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_round_trip_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_total_round_trip_time(&has_bits);
          _impl_.total_round_trip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 round_trip_time_measurements = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_round_trip_time_measurements(&has_bits);
          _impl_.round_trip_time_measurements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteOutboundRtpStreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RemoteOutboundRtpStreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string local_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_id().data(), static_cast<int>(this->_internal_local_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RemoteOutboundRtpStreamStats.local_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_id(), target);
  }

  // required double remote_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_remote_timestamp(), target);
  }

  // required uint64 reports_sent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reports_sent(), target);
  }

  // required double round_trip_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_round_trip_time(), target);
  }

  // required double total_round_trip_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_total_round_trip_time(), target);
  }

  // required uint64 round_trip_time_measurements = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_round_trip_time_measurements(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RemoteOutboundRtpStreamStats)
  return target;
}

size_t RemoteOutboundRtpStreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RemoteOutboundRtpStreamStats)
  size_t total_size = 0;

  if (_internal_has_local_id()) {
    // required string local_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_id());
  }

  if (_internal_has_remote_timestamp()) {
    // required double remote_timestamp = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_reports_sent()) {
    // required uint64 reports_sent = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reports_sent());
  }

  if (_internal_has_round_trip_time()) {
    // required double round_trip_time = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_total_round_trip_time()) {
    // required double total_round_trip_time = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_round_trip_time_measurements()) {
    // required uint64 round_trip_time_measurements = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round_trip_time_measurements());
  }

  return total_size;
}
size_t RemoteOutboundRtpStreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RemoteOutboundRtpStreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string local_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_id());

    // required double remote_timestamp = 2;
    total_size += 1 + 8;

    // required uint64 reports_sent = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reports_sent());

    // required double round_trip_time = 4;
    total_size += 1 + 8;

    // required double total_round_trip_time = 5;
    total_size += 1 + 8;

    // required uint64 round_trip_time_measurements = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round_trip_time_measurements());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteOutboundRtpStreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteOutboundRtpStreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteOutboundRtpStreamStats::GetClassData() const { return &_class_data_; }


void RemoteOutboundRtpStreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteOutboundRtpStreamStats*>(&to_msg);
  auto& from = static_cast<const RemoteOutboundRtpStreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RemoteOutboundRtpStreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_local_id(from._internal_local_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remote_timestamp_ = from._impl_.remote_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reports_sent_ = from._impl_.reports_sent_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.round_trip_time_ = from._impl_.round_trip_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_round_trip_time_ = from._impl_.total_round_trip_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.round_trip_time_measurements_ = from._impl_.round_trip_time_measurements_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteOutboundRtpStreamStats::CopyFrom(const RemoteOutboundRtpStreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RemoteOutboundRtpStreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteOutboundRtpStreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RemoteOutboundRtpStreamStats::InternalSwap(RemoteOutboundRtpStreamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_id_, lhs_arena,
      &other->_impl_.local_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteOutboundRtpStreamStats, _impl_.round_trip_time_measurements_)
      + sizeof(RemoteOutboundRtpStreamStats::_impl_.round_trip_time_measurements_)
      - PROTOBUF_FIELD_OFFSET(RemoteOutboundRtpStreamStats, _impl_.remote_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.remote_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.remote_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteOutboundRtpStreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[26]);
}

// ===================================================================

class MediaSourceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaSourceStats>()._impl_._has_bits_);
  static void set_has_track_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MediaSourceStats::MediaSourceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.MediaSourceStats)
}
MediaSourceStats::MediaSourceStats(const MediaSourceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaSourceStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_identifier_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_identifier()) {
    _this->_impl_.track_identifier_.Set(from._internal_track_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.MediaSourceStats)
}

inline void MediaSourceStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_identifier_){}
    , decltype(_impl_.kind_){}
  };
  _impl_.track_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaSourceStats::~MediaSourceStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.MediaSourceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaSourceStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_identifier_.Destroy();
  _impl_.kind_.Destroy();
}

void MediaSourceStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaSourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.MediaSourceStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.track_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.kind_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaSourceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string track_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.MediaSourceStats.track_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.MediaSourceStats.kind");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaSourceStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.MediaSourceStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string track_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_identifier().data(), static_cast<int>(this->_internal_track_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.MediaSourceStats.track_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_identifier(), target);
  }

  // required string kind = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.MediaSourceStats.kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.MediaSourceStats)
  return target;
}

size_t MediaSourceStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.MediaSourceStats)
  size_t total_size = 0;

  if (_internal_has_track_identifier()) {
    // required string track_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_identifier());
  }

  if (_internal_has_kind()) {
    // required string kind = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  return total_size;
}
size_t MediaSourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.MediaSourceStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string track_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_identifier());

    // required string kind = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaSourceStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaSourceStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaSourceStats::GetClassData() const { return &_class_data_; }


void MediaSourceStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaSourceStats*>(&to_msg);
  auto& from = static_cast<const MediaSourceStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.MediaSourceStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_track_identifier(from._internal_track_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_kind(from._internal_kind());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaSourceStats::CopyFrom(const MediaSourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.MediaSourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSourceStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MediaSourceStats::InternalSwap(MediaSourceStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_identifier_, lhs_arena,
      &other->_impl_.track_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaSourceStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[27]);
}

// ===================================================================

class AudioSourceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioSourceStats>()._impl_._has_bits_);
  static void set_has_audio_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_audio_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_samples_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_echo_return_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_echo_return_loss_enhancement(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dropped_samples_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dropped_samples_events(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_capture_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_samples_captured(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

AudioSourceStats::AudioSourceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.AudioSourceStats)
}
AudioSourceStats::AudioSourceStats(const AudioSourceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioSourceStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_level_){}
    , decltype(_impl_.total_audio_energy_){}
    , decltype(_impl_.total_samples_duration_){}
    , decltype(_impl_.echo_return_loss_){}
    , decltype(_impl_.echo_return_loss_enhancement_){}
    , decltype(_impl_.dropped_samples_duration_){}
    , decltype(_impl_.total_capture_delay_){}
    , decltype(_impl_.total_samples_captured_){}
    , decltype(_impl_.dropped_samples_events_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.audio_level_, &from._impl_.audio_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dropped_samples_events_) -
    reinterpret_cast<char*>(&_impl_.audio_level_)) + sizeof(_impl_.dropped_samples_events_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.AudioSourceStats)
}

inline void AudioSourceStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_level_){0}
    , decltype(_impl_.total_audio_energy_){0}
    , decltype(_impl_.total_samples_duration_){0}
    , decltype(_impl_.echo_return_loss_){0}
    , decltype(_impl_.echo_return_loss_enhancement_){0}
    , decltype(_impl_.dropped_samples_duration_){0}
    , decltype(_impl_.total_capture_delay_){0}
    , decltype(_impl_.total_samples_captured_){uint64_t{0u}}
    , decltype(_impl_.dropped_samples_events_){0u}
  };
}

AudioSourceStats::~AudioSourceStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.AudioSourceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioSourceStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioSourceStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioSourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.AudioSourceStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.audio_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_samples_captured_) -
        reinterpret_cast<char*>(&_impl_.audio_level_)) + sizeof(_impl_.total_samples_captured_));
  }
  _impl_.dropped_samples_events_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioSourceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double audio_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_audio_level(&has_bits);
          _impl_.audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_audio_energy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_total_audio_energy(&has_bits);
          _impl_.total_audio_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_samples_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_total_samples_duration(&has_bits);
          _impl_.total_samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double echo_return_loss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_echo_return_loss(&has_bits);
          _impl_.echo_return_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double echo_return_loss_enhancement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_echo_return_loss_enhancement(&has_bits);
          _impl_.echo_return_loss_enhancement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double dropped_samples_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_dropped_samples_duration(&has_bits);
          _impl_.dropped_samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 dropped_samples_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_dropped_samples_events(&has_bits);
          _impl_.dropped_samples_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_capture_delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_total_capture_delay(&has_bits);
          _impl_.total_capture_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 total_samples_captured = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_total_samples_captured(&has_bits);
          _impl_.total_samples_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioSourceStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.AudioSourceStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double audio_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_audio_level(), target);
  }

  // required double total_audio_energy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_audio_energy(), target);
  }

  // required double total_samples_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_samples_duration(), target);
  }

  // required double echo_return_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_echo_return_loss(), target);
  }

  // required double echo_return_loss_enhancement = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_echo_return_loss_enhancement(), target);
  }

  // required double dropped_samples_duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_dropped_samples_duration(), target);
  }

  // required uint32 dropped_samples_events = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dropped_samples_events(), target);
  }

  // required double total_capture_delay = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_total_capture_delay(), target);
  }

  // required uint64 total_samples_captured = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total_samples_captured(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.AudioSourceStats)
  return target;
}

size_t AudioSourceStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.AudioSourceStats)
  size_t total_size = 0;

  if (_internal_has_audio_level()) {
    // required double audio_level = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_total_audio_energy()) {
    // required double total_audio_energy = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_total_samples_duration()) {
    // required double total_samples_duration = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_echo_return_loss()) {
    // required double echo_return_loss = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_echo_return_loss_enhancement()) {
    // required double echo_return_loss_enhancement = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_dropped_samples_duration()) {
    // required double dropped_samples_duration = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_total_capture_delay()) {
    // required double total_capture_delay = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_total_samples_captured()) {
    // required uint64 total_samples_captured = 9;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_samples_captured());
  }

  if (_internal_has_dropped_samples_events()) {
    // required uint32 dropped_samples_events = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dropped_samples_events());
  }

  return total_size;
}
size_t AudioSourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.AudioSourceStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required double audio_level = 1;
    total_size += 1 + 8;

    // required double total_audio_energy = 2;
    total_size += 1 + 8;

    // required double total_samples_duration = 3;
    total_size += 1 + 8;

    // required double echo_return_loss = 4;
    total_size += 1 + 8;

    // required double echo_return_loss_enhancement = 5;
    total_size += 1 + 8;

    // required double dropped_samples_duration = 6;
    total_size += 1 + 8;

    // required double total_capture_delay = 8;
    total_size += 1 + 8;

    // required uint64 total_samples_captured = 9;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_samples_captured());

    // required uint32 dropped_samples_events = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dropped_samples_events());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioSourceStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioSourceStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioSourceStats::GetClassData() const { return &_class_data_; }


void AudioSourceStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioSourceStats*>(&to_msg);
  auto& from = static_cast<const AudioSourceStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.AudioSourceStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.audio_level_ = from._impl_.audio_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.total_audio_energy_ = from._impl_.total_audio_energy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_samples_duration_ = from._impl_.total_samples_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.echo_return_loss_ = from._impl_.echo_return_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.echo_return_loss_enhancement_ = from._impl_.echo_return_loss_enhancement_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dropped_samples_duration_ = from._impl_.dropped_samples_duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.total_capture_delay_ = from._impl_.total_capture_delay_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.total_samples_captured_ = from._impl_.total_samples_captured_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_dropped_samples_events(from._internal_dropped_samples_events());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioSourceStats::CopyFrom(const AudioSourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.AudioSourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSourceStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AudioSourceStats::InternalSwap(AudioSourceStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioSourceStats, _impl_.dropped_samples_events_)
      + sizeof(AudioSourceStats::_impl_.dropped_samples_events_)
      - PROTOBUF_FIELD_OFFSET(AudioSourceStats, _impl_.audio_level_)>(
          reinterpret_cast<char*>(&_impl_.audio_level_),
          reinterpret_cast<char*>(&other->_impl_.audio_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioSourceStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[28]);
}

// ===================================================================

class VideoSourceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSourceStats>()._impl_._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frames_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

VideoSourceStats::VideoSourceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.VideoSourceStats)
}
VideoSourceStats::VideoSourceStats(const VideoSourceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoSourceStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.frames_per_second_){}
    , decltype(_impl_.frames_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frames_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.frames_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.VideoSourceStats)
}

inline void VideoSourceStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.frames_per_second_){0}
    , decltype(_impl_.frames_){0u}
  };
}

VideoSourceStats::~VideoSourceStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.VideoSourceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSourceStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoSourceStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.VideoSourceStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frames_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.frames_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoSourceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frames(&has_bits);
          _impl_.frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double frames_per_second = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_frames_per_second(&has_bits);
          _impl_.frames_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoSourceStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.VideoSourceStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // required uint32 frames = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frames(), target);
  }

  // required double frames_per_second = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_frames_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.VideoSourceStats)
  return target;
}

size_t VideoSourceStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.VideoSourceStats)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required uint32 width = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  if (_internal_has_frames_per_second()) {
    // required double frames_per_second = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_frames()) {
    // required uint32 frames = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames());
  }

  return total_size;
}
size_t VideoSourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.VideoSourceStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());

    // required uint32 height = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());

    // required double frames_per_second = 4;
    total_size += 1 + 8;

    // required uint32 frames = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoSourceStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoSourceStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoSourceStats::GetClassData() const { return &_class_data_; }


void VideoSourceStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoSourceStats*>(&to_msg);
  auto& from = static_cast<const VideoSourceStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.VideoSourceStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frames_per_second_ = from._impl_.frames_per_second_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.frames_ = from._impl_.frames_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoSourceStats::CopyFrom(const VideoSourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.VideoSourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSourceStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VideoSourceStats::InternalSwap(VideoSourceStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSourceStats, _impl_.frames_)
      + sizeof(VideoSourceStats::_impl_.frames_)
      - PROTOBUF_FIELD_OFFSET(VideoSourceStats, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoSourceStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[29]);
}

// ===================================================================

class AudioPlayoutStats::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioPlayoutStats>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_synthesized_samples_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_synthesized_samples_events(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_samples_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_playout_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_samples_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

AudioPlayoutStats::AudioPlayoutStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.AudioPlayoutStats)
}
AudioPlayoutStats::AudioPlayoutStats(const AudioPlayoutStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioPlayoutStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.synthesized_samples_duration_){}
    , decltype(_impl_.total_samples_duration_){}
    , decltype(_impl_.total_playout_delay_){}
    , decltype(_impl_.total_samples_count_){}
    , decltype(_impl_.synthesized_samples_events_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kind()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.synthesized_samples_duration_, &from._impl_.synthesized_samples_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.synthesized_samples_events_) -
    reinterpret_cast<char*>(&_impl_.synthesized_samples_duration_)) + sizeof(_impl_.synthesized_samples_events_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.AudioPlayoutStats)
}

inline void AudioPlayoutStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.synthesized_samples_duration_){0}
    , decltype(_impl_.total_samples_duration_){0}
    , decltype(_impl_.total_playout_delay_){0}
    , decltype(_impl_.total_samples_count_){uint64_t{0u}}
    , decltype(_impl_.synthesized_samples_events_){0u}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioPlayoutStats::~AudioPlayoutStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.AudioPlayoutStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioPlayoutStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kind_.Destroy();
}

void AudioPlayoutStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioPlayoutStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.AudioPlayoutStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.kind_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.synthesized_samples_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.synthesized_samples_events_) -
        reinterpret_cast<char*>(&_impl_.synthesized_samples_duration_)) + sizeof(_impl_.synthesized_samples_events_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioPlayoutStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.AudioPlayoutStats.kind");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double synthesized_samples_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_synthesized_samples_duration(&has_bits);
          _impl_.synthesized_samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 synthesized_samples_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_synthesized_samples_events(&has_bits);
          _impl_.synthesized_samples_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double total_samples_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_total_samples_duration(&has_bits);
          _impl_.total_samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_playout_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_total_playout_delay(&has_bits);
          _impl_.total_playout_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 total_samples_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_total_samples_count(&has_bits);
          _impl_.total_samples_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioPlayoutStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.AudioPlayoutStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string kind = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.AudioPlayoutStats.kind");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kind(), target);
  }

  // required double synthesized_samples_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_synthesized_samples_duration(), target);
  }

  // required uint32 synthesized_samples_events = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_synthesized_samples_events(), target);
  }

  // required double total_samples_duration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_total_samples_duration(), target);
  }

  // required double total_playout_delay = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_total_playout_delay(), target);
  }

  // required uint64 total_samples_count = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_total_samples_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.AudioPlayoutStats)
  return target;
}

size_t AudioPlayoutStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.AudioPlayoutStats)
  size_t total_size = 0;

  if (_internal_has_kind()) {
    // required string kind = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  if (_internal_has_synthesized_samples_duration()) {
    // required double synthesized_samples_duration = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_total_samples_duration()) {
    // required double total_samples_duration = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_total_playout_delay()) {
    // required double total_playout_delay = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_total_samples_count()) {
    // required uint64 total_samples_count = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_samples_count());
  }

  if (_internal_has_synthesized_samples_events()) {
    // required uint32 synthesized_samples_events = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_synthesized_samples_events());
  }

  return total_size;
}
size_t AudioPlayoutStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.AudioPlayoutStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string kind = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());

    // required double synthesized_samples_duration = 2;
    total_size += 1 + 8;

    // required double total_samples_duration = 4;
    total_size += 1 + 8;

    // required double total_playout_delay = 5;
    total_size += 1 + 8;

    // required uint64 total_samples_count = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_samples_count());

    // required uint32 synthesized_samples_events = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_synthesized_samples_events());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioPlayoutStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioPlayoutStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioPlayoutStats::GetClassData() const { return &_class_data_; }


void AudioPlayoutStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioPlayoutStats*>(&to_msg);
  auto& from = static_cast<const AudioPlayoutStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.AudioPlayoutStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.synthesized_samples_duration_ = from._impl_.synthesized_samples_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_samples_duration_ = from._impl_.total_samples_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.total_playout_delay_ = from._impl_.total_playout_delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_samples_count_ = from._impl_.total_samples_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.synthesized_samples_events_ = from._impl_.synthesized_samples_events_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioPlayoutStats::CopyFrom(const AudioPlayoutStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.AudioPlayoutStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlayoutStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AudioPlayoutStats::InternalSwap(AudioPlayoutStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioPlayoutStats, _impl_.synthesized_samples_events_)
      + sizeof(AudioPlayoutStats::_impl_.synthesized_samples_events_)
      - PROTOBUF_FIELD_OFFSET(AudioPlayoutStats, _impl_.synthesized_samples_duration_)>(
          reinterpret_cast<char*>(&_impl_.synthesized_samples_duration_),
          reinterpret_cast<char*>(&other->_impl_.synthesized_samples_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioPlayoutStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[30]);
}

// ===================================================================

class PeerConnectionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<PeerConnectionStats>()._impl_._has_bits_);
  static void set_has_data_channels_opened(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_channels_closed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PeerConnectionStats::PeerConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PeerConnectionStats)
}
PeerConnectionStats::PeerConnectionStats(const PeerConnectionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerConnectionStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_channels_opened_){}
    , decltype(_impl_.data_channels_closed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.data_channels_opened_, &from._impl_.data_channels_opened_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_channels_closed_) -
    reinterpret_cast<char*>(&_impl_.data_channels_opened_)) + sizeof(_impl_.data_channels_closed_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PeerConnectionStats)
}

inline void PeerConnectionStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_channels_opened_){0u}
    , decltype(_impl_.data_channels_closed_){0u}
  };
}

PeerConnectionStats::~PeerConnectionStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.PeerConnectionStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnectionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PeerConnectionStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PeerConnectionStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.data_channels_opened_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_channels_closed_) -
        reinterpret_cast<char*>(&_impl_.data_channels_opened_)) + sizeof(_impl_.data_channels_closed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerConnectionStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 data_channels_opened = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_channels_opened(&has_bits);
          _impl_.data_channels_opened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_channels_closed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_channels_closed(&has_bits);
          _impl_.data_channels_closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnectionStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PeerConnectionStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 data_channels_opened = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_channels_opened(), target);
  }

  // required uint32 data_channels_closed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_channels_closed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PeerConnectionStats)
  return target;
}

size_t PeerConnectionStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.PeerConnectionStats)
  size_t total_size = 0;

  if (_internal_has_data_channels_opened()) {
    // required uint32 data_channels_opened = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_channels_opened());
  }

  if (_internal_has_data_channels_closed()) {
    // required uint32 data_channels_closed = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_channels_closed());
  }

  return total_size;
}
size_t PeerConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PeerConnectionStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 data_channels_opened = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_channels_opened());

    // required uint32 data_channels_closed = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_channels_closed());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerConnectionStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerConnectionStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerConnectionStats::GetClassData() const { return &_class_data_; }


void PeerConnectionStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerConnectionStats*>(&to_msg);
  auto& from = static_cast<const PeerConnectionStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PeerConnectionStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_channels_opened_ = from._impl_.data_channels_opened_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_channels_closed_ = from._impl_.data_channels_closed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerConnectionStats::CopyFrom(const PeerConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PeerConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PeerConnectionStats::InternalSwap(PeerConnectionStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerConnectionStats, _impl_.data_channels_closed_)
      + sizeof(PeerConnectionStats::_impl_.data_channels_closed_)
      - PROTOBUF_FIELD_OFFSET(PeerConnectionStats, _impl_.data_channels_opened_)>(
          reinterpret_cast<char*>(&_impl_.data_channels_opened_),
          reinterpret_cast<char*>(&other->_impl_.data_channels_opened_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerConnectionStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[31]);
}

// ===================================================================

class DataChannelStats::_Internal {
 public:
  using HasBits = decltype(std::declval<DataChannelStats>()._impl_._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_channel_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_messages_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_messages_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000f7) ^ 0x000000f7) != 0;
  }
};

DataChannelStats::DataChannelStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataChannelStats)
}
DataChannelStats::DataChannelStats(const DataChannelStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataChannelStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.label_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.data_channel_identifier_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.bytes_sent_){}
    , decltype(_impl_.messages_sent_){}
    , decltype(_impl_.messages_received_){}
    , decltype(_impl_.bytes_received_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_protocol()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.data_channel_identifier_, &from._impl_.data_channel_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bytes_received_) -
    reinterpret_cast<char*>(&_impl_.data_channel_identifier_)) + sizeof(_impl_.bytes_received_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataChannelStats)
}

inline void DataChannelStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.label_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.data_channel_identifier_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.messages_sent_){0u}
    , decltype(_impl_.messages_received_){0u}
    , decltype(_impl_.bytes_received_){uint64_t{0u}}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataChannelStats::~DataChannelStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataChannelStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataChannelStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_.Destroy();
  _impl_.protocol_.Destroy();
}

void DataChannelStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataChannelStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataChannelStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.protocol_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.data_channel_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_received_) -
        reinterpret_cast<char*>(&_impl_.data_channel_identifier_)) + sizeof(_impl_.bytes_received_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChannelStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataChannelStats.label");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataChannelStats.protocol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 data_channel_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_channel_identifier(&has_bits);
          _impl_.data_channel_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.DataChannelState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DataChannelState_IsValid(val))) {
            _internal_set_state(static_cast<::livekit::proto::DataChannelState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 messages_sent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_messages_sent(&has_bits);
          _impl_.messages_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bytes_sent(&has_bits);
          _impl_.bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 messages_received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_messages_received(&has_bits);
          _impl_.messages_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_received = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_received(&has_bits);
          _impl_.bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChannelStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataChannelStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataChannelStats.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // required string protocol = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataChannelStats.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  // required int32 data_channel_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_data_channel_identifier(), target);
  }

  // optional .livekit.proto.DataChannelState state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // required uint32 messages_sent = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_messages_sent(), target);
  }

  // required uint64 bytes_sent = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes_sent(), target);
  }

  // required uint32 messages_received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_messages_received(), target);
  }

  // required uint64 bytes_received = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_bytes_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataChannelStats)
  return target;
}

size_t DataChannelStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataChannelStats)
  size_t total_size = 0;

  if (_internal_has_label()) {
    // required string label = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (_internal_has_protocol()) {
    // required string protocol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  if (_internal_has_data_channel_identifier()) {
    // required int32 data_channel_identifier = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_channel_identifier());
  }

  if (_internal_has_bytes_sent()) {
    // required uint64 bytes_sent = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());
  }

  if (_internal_has_messages_sent()) {
    // required uint32 messages_sent = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messages_sent());
  }

  if (_internal_has_messages_received()) {
    // required uint32 messages_received = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messages_received());
  }

  if (_internal_has_bytes_received()) {
    // required uint64 bytes_received = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());
  }

  return total_size;
}
size_t DataChannelStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataChannelStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000f7) ^ 0x000000f7) == 0) {  // All required fields are present.
    // required string label = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());

    // required string protocol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());

    // required int32 data_channel_identifier = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_channel_identifier());

    // required uint64 bytes_sent = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());

    // required uint32 messages_sent = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messages_sent());

    // required uint32 messages_received = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messages_received());

    // required uint64 bytes_received = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .livekit.proto.DataChannelState state = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChannelStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataChannelStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChannelStats::GetClassData() const { return &_class_data_; }


void DataChannelStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataChannelStats*>(&to_msg);
  auto& from = static_cast<const DataChannelStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataChannelStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_channel_identifier_ = from._impl_.data_channel_identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bytes_sent_ = from._impl_.bytes_sent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.messages_sent_ = from._impl_.messages_sent_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.messages_received_ = from._impl_.messages_received_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bytes_received_ = from._impl_.bytes_received_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChannelStats::CopyFrom(const DataChannelStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataChannelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChannelStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataChannelStats::InternalSwap(DataChannelStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChannelStats, _impl_.bytes_received_)
      + sizeof(DataChannelStats::_impl_.bytes_received_)
      - PROTOBUF_FIELD_OFFSET(DataChannelStats, _impl_.data_channel_identifier_)>(
          reinterpret_cast<char*>(&_impl_.data_channel_identifier_),
          reinterpret_cast<char*>(&other->_impl_.data_channel_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChannelStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[32]);
}

// ===================================================================

class TransportStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TransportStats>()._impl_._has_bits_);
  static void set_has_packets_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_packets_received(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ice_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ice_local_username_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtls_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ice_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_selected_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_local_certificate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remote_certificate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tls_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dtls_cipher(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dtls_role(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_srtp_cipher(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selected_candidate_pair_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000cfff) ^ 0x0000cfff) != 0;
  }
};

TransportStats::TransportStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TransportStats)
}
TransportStats::TransportStats(const TransportStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ice_local_username_fragment_){}
    , decltype(_impl_.selected_candidate_pair_id_){}
    , decltype(_impl_.local_certificate_id_){}
    , decltype(_impl_.remote_certificate_id_){}
    , decltype(_impl_.tls_version_){}
    , decltype(_impl_.dtls_cipher_){}
    , decltype(_impl_.srtp_cipher_){}
    , decltype(_impl_.packets_sent_){}
    , decltype(_impl_.packets_received_){}
    , decltype(_impl_.bytes_sent_){}
    , decltype(_impl_.bytes_received_){}
    , decltype(_impl_.ice_role_){}
    , decltype(_impl_.dtls_state_){}
    , decltype(_impl_.ice_state_){}
    , decltype(_impl_.dtls_role_){}
    , decltype(_impl_.selected_candidate_pair_changes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ice_local_username_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ice_local_username_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ice_local_username_fragment()) {
    _this->_impl_.ice_local_username_fragment_.Set(from._internal_ice_local_username_fragment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selected_candidate_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_candidate_pair_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selected_candidate_pair_id()) {
    _this->_impl_.selected_candidate_pair_id_.Set(from._internal_selected_candidate_pair_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_certificate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_certificate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_certificate_id()) {
    _this->_impl_.local_certificate_id_.Set(from._internal_local_certificate_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_certificate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_certificate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_certificate_id()) {
    _this->_impl_.remote_certificate_id_.Set(from._internal_remote_certificate_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tls_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tls_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tls_version()) {
    _this->_impl_.tls_version_.Set(from._internal_tls_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dtls_cipher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtls_cipher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dtls_cipher()) {
    _this->_impl_.dtls_cipher_.Set(from._internal_dtls_cipher(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srtp_cipher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srtp_cipher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srtp_cipher()) {
    _this->_impl_.srtp_cipher_.Set(from._internal_srtp_cipher(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.packets_sent_, &from._impl_.packets_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selected_candidate_pair_changes_) -
    reinterpret_cast<char*>(&_impl_.packets_sent_)) + sizeof(_impl_.selected_candidate_pair_changes_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TransportStats)
}

inline void TransportStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ice_local_username_fragment_){}
    , decltype(_impl_.selected_candidate_pair_id_){}
    , decltype(_impl_.local_certificate_id_){}
    , decltype(_impl_.remote_certificate_id_){}
    , decltype(_impl_.tls_version_){}
    , decltype(_impl_.dtls_cipher_){}
    , decltype(_impl_.srtp_cipher_){}
    , decltype(_impl_.packets_sent_){uint64_t{0u}}
    , decltype(_impl_.packets_received_){uint64_t{0u}}
    , decltype(_impl_.bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.bytes_received_){uint64_t{0u}}
    , decltype(_impl_.ice_role_){0}
    , decltype(_impl_.dtls_state_){0}
    , decltype(_impl_.ice_state_){0}
    , decltype(_impl_.dtls_role_){0}
    , decltype(_impl_.selected_candidate_pair_changes_){0u}
  };
  _impl_.ice_local_username_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ice_local_username_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selected_candidate_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_candidate_pair_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_certificate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_certificate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_certificate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_certificate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tls_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tls_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dtls_cipher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtls_cipher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srtp_cipher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srtp_cipher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransportStats::~TransportStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.TransportStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ice_local_username_fragment_.Destroy();
  _impl_.selected_candidate_pair_id_.Destroy();
  _impl_.local_certificate_id_.Destroy();
  _impl_.remote_certificate_id_.Destroy();
  _impl_.tls_version_.Destroy();
  _impl_.dtls_cipher_.Destroy();
  _impl_.srtp_cipher_.Destroy();
}

void TransportStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TransportStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ice_local_username_fragment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.selected_candidate_pair_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.local_certificate_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.remote_certificate_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.tls_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.dtls_cipher_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.srtp_cipher_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.packets_sent_ = uint64_t{0u};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.packets_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.selected_candidate_pair_changes_) -
        reinterpret_cast<char*>(&_impl_.packets_received_)) + sizeof(_impl_.selected_candidate_pair_changes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 packets_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packets_sent(&has_bits);
          _impl_.packets_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 packets_received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_packets_received(&has_bits);
          _impl_.packets_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bytes_sent(&has_bits);
          _impl_.bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_received = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes_received(&has_bits);
          _impl_.bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.IceRole ice_role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceRole_IsValid(val))) {
            _internal_set_ice_role(static_cast<::livekit::proto::IceRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string ice_local_username_fragment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ice_local_username_fragment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.ice_local_username_fragment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.DtlsTransportState dtls_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DtlsTransportState_IsValid(val))) {
            _internal_set_dtls_state(static_cast<::livekit::proto::DtlsTransportState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.IceTransportState ice_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceTransportState_IsValid(val))) {
            _internal_set_ice_state(static_cast<::livekit::proto::IceTransportState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string selected_candidate_pair_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_selected_candidate_pair_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.selected_candidate_pair_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string local_certificate_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_local_certificate_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.local_certificate_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string remote_certificate_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_remote_certificate_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.remote_certificate_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string tls_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_tls_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.tls_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string dtls_cipher = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_dtls_cipher();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.dtls_cipher");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DtlsRole dtls_role = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DtlsRole_IsValid(val))) {
            _internal_set_dtls_role(static_cast<::livekit::proto::DtlsRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string srtp_cipher = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_srtp_cipher();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TransportStats.srtp_cipher");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 selected_candidate_pair_changes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_selected_candidate_pair_changes(&has_bits);
          _impl_.selected_candidate_pair_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TransportStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 packets_sent = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packets_sent(), target);
  }

  // required uint64 packets_received = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_packets_received(), target);
  }

  // required uint64 bytes_sent = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bytes_sent(), target);
  }

  // required uint64 bytes_received = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bytes_received(), target);
  }

  // required .livekit.proto.IceRole ice_role = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ice_role(), target);
  }

  // required string ice_local_username_fragment = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ice_local_username_fragment().data(), static_cast<int>(this->_internal_ice_local_username_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.ice_local_username_fragment");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ice_local_username_fragment(), target);
  }

  // optional .livekit.proto.DtlsTransportState dtls_state = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_dtls_state(), target);
  }

  // optional .livekit.proto.IceTransportState ice_state = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ice_state(), target);
  }

  // required string selected_candidate_pair_id = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selected_candidate_pair_id().data(), static_cast<int>(this->_internal_selected_candidate_pair_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.selected_candidate_pair_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_selected_candidate_pair_id(), target);
  }

  // required string local_certificate_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_certificate_id().data(), static_cast<int>(this->_internal_local_certificate_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.local_certificate_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_local_certificate_id(), target);
  }

  // required string remote_certificate_id = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_certificate_id().data(), static_cast<int>(this->_internal_remote_certificate_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.remote_certificate_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_remote_certificate_id(), target);
  }

  // required string tls_version = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tls_version().data(), static_cast<int>(this->_internal_tls_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.tls_version");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tls_version(), target);
  }

  // required string dtls_cipher = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dtls_cipher().data(), static_cast<int>(this->_internal_dtls_cipher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.dtls_cipher");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_dtls_cipher(), target);
  }

  // required .livekit.proto.DtlsRole dtls_role = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_dtls_role(), target);
  }

  // required string srtp_cipher = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srtp_cipher().data(), static_cast<int>(this->_internal_srtp_cipher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TransportStats.srtp_cipher");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_srtp_cipher(), target);
  }

  // required uint32 selected_candidate_pair_changes = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_selected_candidate_pair_changes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TransportStats)
  return target;
}

size_t TransportStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TransportStats)
  size_t total_size = 0;

  if (_internal_has_ice_local_username_fragment()) {
    // required string ice_local_username_fragment = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ice_local_username_fragment());
  }

  if (_internal_has_selected_candidate_pair_id()) {
    // required string selected_candidate_pair_id = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_candidate_pair_id());
  }

  if (_internal_has_local_certificate_id()) {
    // required string local_certificate_id = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_certificate_id());
  }

  if (_internal_has_remote_certificate_id()) {
    // required string remote_certificate_id = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_certificate_id());
  }

  if (_internal_has_tls_version()) {
    // required string tls_version = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tls_version());
  }

  if (_internal_has_dtls_cipher()) {
    // required string dtls_cipher = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtls_cipher());
  }

  if (_internal_has_srtp_cipher()) {
    // required string srtp_cipher = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srtp_cipher());
  }

  if (_internal_has_packets_sent()) {
    // required uint64 packets_sent = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_sent());
  }

  if (_internal_has_packets_received()) {
    // required uint64 packets_received = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_received());
  }

  if (_internal_has_bytes_sent()) {
    // required uint64 bytes_sent = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());
  }

  if (_internal_has_bytes_received()) {
    // required uint64 bytes_received = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());
  }

  if (_internal_has_ice_role()) {
    // required .livekit.proto.IceRole ice_role = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ice_role());
  }

  if (_internal_has_dtls_role()) {
    // required .livekit.proto.DtlsRole dtls_role = 14;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtls_role());
  }

  if (_internal_has_selected_candidate_pair_changes()) {
    // required uint32 selected_candidate_pair_changes = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_selected_candidate_pair_changes());
  }

  return total_size;
}
size_t TransportStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TransportStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000cfff) ^ 0x0000cfff) == 0) {  // All required fields are present.
    // required string ice_local_username_fragment = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ice_local_username_fragment());

    // required string selected_candidate_pair_id = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_candidate_pair_id());

    // required string local_certificate_id = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_certificate_id());

    // required string remote_certificate_id = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_certificate_id());

    // required string tls_version = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tls_version());

    // required string dtls_cipher = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtls_cipher());

    // required string srtp_cipher = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srtp_cipher());

    // required uint64 packets_sent = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_sent());

    // required uint64 packets_received = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_received());

    // required uint64 bytes_sent = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());

    // required uint64 bytes_received = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());

    // required .livekit.proto.IceRole ice_role = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ice_role());

    // required .livekit.proto.DtlsRole dtls_role = 14;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtls_role());

    // required uint32 selected_candidate_pair_changes = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_selected_candidate_pair_changes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00003000u) {
    // optional .livekit.proto.DtlsTransportState dtls_state = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dtls_state());
    }

    // optional .livekit.proto.IceTransportState ice_state = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ice_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportStats::GetClassData() const { return &_class_data_; }


void TransportStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportStats*>(&to_msg);
  auto& from = static_cast<const TransportStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TransportStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ice_local_username_fragment(from._internal_ice_local_username_fragment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_selected_candidate_pair_id(from._internal_selected_candidate_pair_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_local_certificate_id(from._internal_local_certificate_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_remote_certificate_id(from._internal_remote_certificate_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_tls_version(from._internal_tls_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_dtls_cipher(from._internal_dtls_cipher());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_srtp_cipher(from._internal_srtp_cipher());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.packets_sent_ = from._impl_.packets_sent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.packets_received_ = from._impl_.packets_received_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bytes_sent_ = from._impl_.bytes_sent_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bytes_received_ = from._impl_.bytes_received_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ice_role_ = from._impl_.ice_role_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.dtls_state_ = from._impl_.dtls_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ice_state_ = from._impl_.ice_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.dtls_role_ = from._impl_.dtls_role_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.selected_candidate_pair_changes_ = from._impl_.selected_candidate_pair_changes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportStats::CopyFrom(const TransportStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TransportStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TransportStats::InternalSwap(TransportStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ice_local_username_fragment_, lhs_arena,
      &other->_impl_.ice_local_username_fragment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selected_candidate_pair_id_, lhs_arena,
      &other->_impl_.selected_candidate_pair_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_certificate_id_, lhs_arena,
      &other->_impl_.local_certificate_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_certificate_id_, lhs_arena,
      &other->_impl_.remote_certificate_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tls_version_, lhs_arena,
      &other->_impl_.tls_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtls_cipher_, lhs_arena,
      &other->_impl_.dtls_cipher_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srtp_cipher_, lhs_arena,
      &other->_impl_.srtp_cipher_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportStats, _impl_.selected_candidate_pair_changes_)
      + sizeof(TransportStats::_impl_.selected_candidate_pair_changes_)
      - PROTOBUF_FIELD_OFFSET(TransportStats, _impl_.packets_sent_)>(
          reinterpret_cast<char*>(&_impl_.packets_sent_),
          reinterpret_cast<char*>(&other->_impl_.packets_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[33]);
}

// ===================================================================

class CandidatePairStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CandidatePairStats>()._impl_._has_bits_);
  static void set_has_transport_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_candidate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_candidate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nominated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packets_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packets_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_packet_sent_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_last_packet_received_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_round_trip_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_current_round_trip_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_available_outgoing_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_available_incoming_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_requests_received(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_requests_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_responses_received(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_responses_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_consent_requests_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_packets_discarded_on_send(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_bytes_discarded_on_send(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x003ffff7) ^ 0x003ffff7) != 0;
  }
};

CandidatePairStats::CandidatePairStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CandidatePairStats)
}
CandidatePairStats::CandidatePairStats(const CandidatePairStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CandidatePairStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.local_candidate_id_){}
    , decltype(_impl_.remote_candidate_id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.nominated_){}
    , decltype(_impl_.packets_sent_){}
    , decltype(_impl_.packets_received_){}
    , decltype(_impl_.bytes_sent_){}
    , decltype(_impl_.bytes_received_){}
    , decltype(_impl_.last_packet_sent_timestamp_){}
    , decltype(_impl_.last_packet_received_timestamp_){}
    , decltype(_impl_.total_round_trip_time_){}
    , decltype(_impl_.current_round_trip_time_){}
    , decltype(_impl_.available_outgoing_bitrate_){}
    , decltype(_impl_.available_incoming_bitrate_){}
    , decltype(_impl_.requests_received_){}
    , decltype(_impl_.requests_sent_){}
    , decltype(_impl_.responses_received_){}
    , decltype(_impl_.responses_sent_){}
    , decltype(_impl_.consent_requests_sent_){}
    , decltype(_impl_.bytes_discarded_on_send_){}
    , decltype(_impl_.packets_discarded_on_send_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_transport_id()) {
    _this->_impl_.transport_id_.Set(from._internal_transport_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_candidate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_candidate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_candidate_id()) {
    _this->_impl_.local_candidate_id_.Set(from._internal_local_candidate_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_candidate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_candidate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_candidate_id()) {
    _this->_impl_.remote_candidate_id_.Set(from._internal_remote_candidate_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packets_discarded_on_send_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.packets_discarded_on_send_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CandidatePairStats)
}

inline void CandidatePairStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.local_candidate_id_){}
    , decltype(_impl_.remote_candidate_id_){}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.nominated_){false}
    , decltype(_impl_.packets_sent_){uint64_t{0u}}
    , decltype(_impl_.packets_received_){uint64_t{0u}}
    , decltype(_impl_.bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.bytes_received_){uint64_t{0u}}
    , decltype(_impl_.last_packet_sent_timestamp_){0}
    , decltype(_impl_.last_packet_received_timestamp_){0}
    , decltype(_impl_.total_round_trip_time_){0}
    , decltype(_impl_.current_round_trip_time_){0}
    , decltype(_impl_.available_outgoing_bitrate_){0}
    , decltype(_impl_.available_incoming_bitrate_){0}
    , decltype(_impl_.requests_received_){uint64_t{0u}}
    , decltype(_impl_.requests_sent_){uint64_t{0u}}
    , decltype(_impl_.responses_received_){uint64_t{0u}}
    , decltype(_impl_.responses_sent_){uint64_t{0u}}
    , decltype(_impl_.consent_requests_sent_){uint64_t{0u}}
    , decltype(_impl_.bytes_discarded_on_send_){uint64_t{0u}}
    , decltype(_impl_.packets_discarded_on_send_){0u}
  };
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_candidate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_candidate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_candidate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_candidate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CandidatePairStats::~CandidatePairStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.CandidatePairStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CandidatePairStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transport_id_.Destroy();
  _impl_.local_candidate_id_.Destroy();
  _impl_.remote_candidate_id_.Destroy();
}

void CandidatePairStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CandidatePairStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CandidatePairStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.transport_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.local_candidate_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.remote_candidate_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_sent_) -
        reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.bytes_sent_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.bytes_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.requests_received_) -
        reinterpret_cast<char*>(&_impl_.bytes_received_)) + sizeof(_impl_.requests_received_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.requests_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.packets_discarded_on_send_) -
        reinterpret_cast<char*>(&_impl_.requests_sent_)) + sizeof(_impl_.packets_discarded_on_send_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidatePairStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string transport_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transport_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CandidatePairStats.transport_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string local_candidate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_candidate_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CandidatePairStats.local_candidate_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string remote_candidate_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remote_candidate_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CandidatePairStats.remote_candidate_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.IceCandidatePairState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceCandidatePairState_IsValid(val))) {
            _internal_set_state(static_cast<::livekit::proto::IceCandidatePairState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool nominated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_nominated(&has_bits);
          _impl_.nominated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 packets_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_packets_sent(&has_bits);
          _impl_.packets_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 packets_received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_packets_received(&has_bits);
          _impl_.packets_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_sent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_sent(&has_bits);
          _impl_.bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_received = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bytes_received(&has_bits);
          _impl_.bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double last_packet_sent_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_last_packet_sent_timestamp(&has_bits);
          _impl_.last_packet_sent_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double last_packet_received_timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_last_packet_received_timestamp(&has_bits);
          _impl_.last_packet_received_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double total_round_trip_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_total_round_trip_time(&has_bits);
          _impl_.total_round_trip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double current_round_trip_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_current_round_trip_time(&has_bits);
          _impl_.current_round_trip_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double available_outgoing_bitrate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_available_outgoing_bitrate(&has_bits);
          _impl_.available_outgoing_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double available_incoming_bitrate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_available_incoming_bitrate(&has_bits);
          _impl_.available_incoming_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 requests_received = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_requests_received(&has_bits);
          _impl_.requests_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 requests_sent = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_requests_sent(&has_bits);
          _impl_.requests_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 responses_received = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_responses_received(&has_bits);
          _impl_.responses_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 responses_sent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_responses_sent(&has_bits);
          _impl_.responses_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 consent_requests_sent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_consent_requests_sent(&has_bits);
          _impl_.consent_requests_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 packets_discarded_on_send = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_packets_discarded_on_send(&has_bits);
          _impl_.packets_discarded_on_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 bytes_discarded_on_send = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_bytes_discarded_on_send(&has_bits);
          _impl_.bytes_discarded_on_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CandidatePairStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CandidatePairStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string transport_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transport_id().data(), static_cast<int>(this->_internal_transport_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CandidatePairStats.transport_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transport_id(), target);
  }

  // required string local_candidate_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_candidate_id().data(), static_cast<int>(this->_internal_local_candidate_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CandidatePairStats.local_candidate_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_candidate_id(), target);
  }

  // required string remote_candidate_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_candidate_id().data(), static_cast<int>(this->_internal_remote_candidate_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CandidatePairStats.remote_candidate_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_candidate_id(), target);
  }

  // optional .livekit.proto.IceCandidatePairState state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // required bool nominated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_nominated(), target);
  }

  // required uint64 packets_sent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_packets_sent(), target);
  }

  // required uint64 packets_received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_packets_received(), target);
  }

  // required uint64 bytes_sent = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_bytes_sent(), target);
  }

  // required uint64 bytes_received = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_bytes_received(), target);
  }

  // required double last_packet_sent_timestamp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_last_packet_sent_timestamp(), target);
  }

  // required double last_packet_received_timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_last_packet_received_timestamp(), target);
  }

  // required double total_round_trip_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_total_round_trip_time(), target);
  }

  // required double current_round_trip_time = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_current_round_trip_time(), target);
  }

  // required double available_outgoing_bitrate = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_available_outgoing_bitrate(), target);
  }

  // required double available_incoming_bitrate = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_available_incoming_bitrate(), target);
  }

  // required uint64 requests_received = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_requests_received(), target);
  }

  // required uint64 requests_sent = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_requests_sent(), target);
  }

  // required uint64 responses_received = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_responses_received(), target);
  }

  // required uint64 responses_sent = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_responses_sent(), target);
  }

  // required uint64 consent_requests_sent = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_consent_requests_sent(), target);
  }

  // required uint32 packets_discarded_on_send = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_packets_discarded_on_send(), target);
  }

  // required uint64 bytes_discarded_on_send = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_bytes_discarded_on_send(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CandidatePairStats)
  return target;
}

size_t CandidatePairStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.CandidatePairStats)
  size_t total_size = 0;

  if (_internal_has_transport_id()) {
    // required string transport_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());
  }

  if (_internal_has_local_candidate_id()) {
    // required string local_candidate_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_candidate_id());
  }

  if (_internal_has_remote_candidate_id()) {
    // required string remote_candidate_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_candidate_id());
  }

  if (_internal_has_nominated()) {
    // required bool nominated = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_packets_sent()) {
    // required uint64 packets_sent = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_sent());
  }

  if (_internal_has_packets_received()) {
    // required uint64 packets_received = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_received());
  }

  if (_internal_has_bytes_sent()) {
    // required uint64 bytes_sent = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());
  }

  if (_internal_has_bytes_received()) {
    // required uint64 bytes_received = 9;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());
  }

  if (_internal_has_last_packet_sent_timestamp()) {
    // required double last_packet_sent_timestamp = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_last_packet_received_timestamp()) {
    // required double last_packet_received_timestamp = 11;
    total_size += 1 + 8;
  }

  if (_internal_has_total_round_trip_time()) {
    // required double total_round_trip_time = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_current_round_trip_time()) {
    // required double current_round_trip_time = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_available_outgoing_bitrate()) {
    // required double available_outgoing_bitrate = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_available_incoming_bitrate()) {
    // required double available_incoming_bitrate = 15;
    total_size += 1 + 8;
  }

  if (_internal_has_requests_received()) {
    // required uint64 requests_received = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_requests_received());
  }

  if (_internal_has_requests_sent()) {
    // required uint64 requests_sent = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_requests_sent());
  }

  if (_internal_has_responses_received()) {
    // required uint64 responses_received = 18;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_responses_received());
  }

  if (_internal_has_responses_sent()) {
    // required uint64 responses_sent = 19;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_responses_sent());
  }

  if (_internal_has_consent_requests_sent()) {
    // required uint64 consent_requests_sent = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_consent_requests_sent());
  }

  if (_internal_has_bytes_discarded_on_send()) {
    // required uint64 bytes_discarded_on_send = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_discarded_on_send());
  }

  if (_internal_has_packets_discarded_on_send()) {
    // required uint32 packets_discarded_on_send = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_packets_discarded_on_send());
  }

  return total_size;
}
size_t CandidatePairStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CandidatePairStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x003ffff7) ^ 0x003ffff7) == 0) {  // All required fields are present.
    // required string transport_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());

    // required string local_candidate_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_candidate_id());

    // required string remote_candidate_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_candidate_id());

    // required bool nominated = 5;
    total_size += 1 + 1;

    // required uint64 packets_sent = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_sent());

    // required uint64 packets_received = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packets_received());

    // required uint64 bytes_sent = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_sent());

    // required uint64 bytes_received = 9;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());

    // required double last_packet_sent_timestamp = 10;
    total_size += 1 + 8;

    // required double last_packet_received_timestamp = 11;
    total_size += 1 + 8;

    // required double total_round_trip_time = 12;
    total_size += 1 + 8;

    // required double current_round_trip_time = 13;
    total_size += 1 + 8;

    // required double available_outgoing_bitrate = 14;
    total_size += 1 + 8;

    // required double available_incoming_bitrate = 15;
    total_size += 1 + 8;

    // required uint64 requests_received = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_requests_received());

    // required uint64 requests_sent = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_requests_sent());

    // required uint64 responses_received = 18;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_responses_received());

    // required uint64 responses_sent = 19;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_responses_sent());

    // required uint64 consent_requests_sent = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_consent_requests_sent());

    // required uint64 bytes_discarded_on_send = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_discarded_on_send());

    // required uint32 packets_discarded_on_send = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_packets_discarded_on_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .livekit.proto.IceCandidatePairState state = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidatePairStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CandidatePairStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidatePairStats::GetClassData() const { return &_class_data_; }


void CandidatePairStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CandidatePairStats*>(&to_msg);
  auto& from = static_cast<const CandidatePairStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CandidatePairStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_transport_id(from._internal_transport_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_local_candidate_id(from._internal_local_candidate_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_remote_candidate_id(from._internal_remote_candidate_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nominated_ = from._impl_.nominated_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.packets_sent_ = from._impl_.packets_sent_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.packets_received_ = from._impl_.packets_received_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bytes_sent_ = from._impl_.bytes_sent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bytes_received_ = from._impl_.bytes_received_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.last_packet_sent_timestamp_ = from._impl_.last_packet_sent_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.last_packet_received_timestamp_ = from._impl_.last_packet_received_timestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.total_round_trip_time_ = from._impl_.total_round_trip_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.current_round_trip_time_ = from._impl_.current_round_trip_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.available_outgoing_bitrate_ = from._impl_.available_outgoing_bitrate_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.available_incoming_bitrate_ = from._impl_.available_incoming_bitrate_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.requests_received_ = from._impl_.requests_received_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.requests_sent_ = from._impl_.requests_sent_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.responses_received_ = from._impl_.responses_received_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.responses_sent_ = from._impl_.responses_sent_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.consent_requests_sent_ = from._impl_.consent_requests_sent_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.bytes_discarded_on_send_ = from._impl_.bytes_discarded_on_send_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.packets_discarded_on_send_ = from._impl_.packets_discarded_on_send_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidatePairStats::CopyFrom(const CandidatePairStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CandidatePairStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidatePairStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CandidatePairStats::InternalSwap(CandidatePairStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transport_id_, lhs_arena,
      &other->_impl_.transport_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_candidate_id_, lhs_arena,
      &other->_impl_.local_candidate_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_candidate_id_, lhs_arena,
      &other->_impl_.remote_candidate_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandidatePairStats, _impl_.packets_discarded_on_send_)
      + sizeof(CandidatePairStats::_impl_.packets_discarded_on_send_)
      - PROTOBUF_FIELD_OFFSET(CandidatePairStats, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidatePairStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[34]);
}

// ===================================================================

class IceCandidateStats::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidateStats>()._impl_._has_bits_);
  static void set_has_transport_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relay_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_foundation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_related_address(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_related_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_username_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tcp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000aff) ^ 0x00000aff) != 0;
  }
};

IceCandidateStats::IceCandidateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.IceCandidateStats)
}
IceCandidateStats::IceCandidateStats(const IceCandidateStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IceCandidateStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.foundation_){}
    , decltype(_impl_.related_address_){}
    , decltype(_impl_.username_fragment_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.candidate_type_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.relay_protocol_){}
    , decltype(_impl_.related_port_){}
    , decltype(_impl_.tcp_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_transport_id()) {
    _this->_impl_.transport_id_.Set(from._internal_transport_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_protocol()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.foundation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.foundation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_foundation()) {
    _this->_impl_.foundation_.Set(from._internal_foundation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.related_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.related_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_related_address()) {
    _this->_impl_.related_address_.Set(from._internal_related_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username_fragment()) {
    _this->_impl_.username_fragment_.Set(from._internal_username_fragment(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tcp_type_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tcp_type_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.IceCandidateStats)
}

inline void IceCandidateStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transport_id_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.foundation_){}
    , decltype(_impl_.related_address_){}
    , decltype(_impl_.username_fragment_){}
    , decltype(_impl_.port_){0}
    , decltype(_impl_.candidate_type_){0}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.relay_protocol_){0}
    , decltype(_impl_.related_port_){0}
    , decltype(_impl_.tcp_type_){0}
  };
  _impl_.transport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.foundation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.foundation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.related_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.related_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IceCandidateStats::~IceCandidateStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.IceCandidateStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IceCandidateStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transport_id_.Destroy();
  _impl_.address_.Destroy();
  _impl_.protocol_.Destroy();
  _impl_.url_.Destroy();
  _impl_.foundation_.Destroy();
  _impl_.related_address_.Destroy();
  _impl_.username_fragment_.Destroy();
}

void IceCandidateStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IceCandidateStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.IceCandidateStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.transport_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.protocol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.foundation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.related_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.username_fragment_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.port_ = 0;
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.candidate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tcp_type_) -
        reinterpret_cast<char*>(&_impl_.candidate_type_)) + sizeof(_impl_.tcp_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IceCandidateStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string transport_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transport_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.transport_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.protocol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.IceCandidateType candidate_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceCandidateType_IsValid(val))) {
            _internal_set_candidate_type(static_cast<::livekit::proto::IceCandidateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int32 priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.IceServerTransportProtocol relay_protocol = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceServerTransportProtocol_IsValid(val))) {
            _internal_set_relay_protocol(static_cast<::livekit::proto::IceServerTransportProtocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string foundation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_foundation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.foundation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string related_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_related_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.related_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 related_port = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_related_port(&has_bits);
          _impl_.related_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string username_fragment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_username_fragment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceCandidateStats.username_fragment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.IceTcpCandidateType tcp_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceTcpCandidateType_IsValid(val))) {
            _internal_set_tcp_type(static_cast<::livekit::proto::IceTcpCandidateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IceCandidateStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.IceCandidateStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string transport_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transport_id().data(), static_cast<int>(this->_internal_transport_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.transport_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transport_id(), target);
  }

  // required string address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // required string protocol = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.protocol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_protocol(), target);
  }

  // optional .livekit.proto.IceCandidateType candidate_type = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_candidate_type(), target);
  }

  // required int32 priority = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_priority(), target);
  }

  // required string url = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_url(), target);
  }

  // optional .livekit.proto.IceServerTransportProtocol relay_protocol = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_relay_protocol(), target);
  }

  // required string foundation = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_foundation().data(), static_cast<int>(this->_internal_foundation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.foundation");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_foundation(), target);
  }

  // required string related_address = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_related_address().data(), static_cast<int>(this->_internal_related_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.related_address");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_related_address(), target);
  }

  // required int32 related_port = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_related_port(), target);
  }

  // required string username_fragment = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username_fragment().data(), static_cast<int>(this->_internal_username_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceCandidateStats.username_fragment");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_username_fragment(), target);
  }

  // optional .livekit.proto.IceTcpCandidateType tcp_type = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_tcp_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.IceCandidateStats)
  return target;
}

size_t IceCandidateStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.IceCandidateStats)
  size_t total_size = 0;

  if (_internal_has_transport_id()) {
    // required string transport_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());
  }

  if (_internal_has_address()) {
    // required string address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (_internal_has_protocol()) {
    // required string protocol = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  if (_internal_has_url()) {
    // required string url = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_foundation()) {
    // required string foundation = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_foundation());
  }

  if (_internal_has_related_address()) {
    // required string related_address = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_related_address());
  }

  if (_internal_has_username_fragment()) {
    // required string username_fragment = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username_fragment());
  }

  if (_internal_has_port()) {
    // required int32 port = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  if (_internal_has_priority()) {
    // required int32 priority = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  if (_internal_has_related_port()) {
    // required int32 related_port = 11;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_related_port());
  }

  return total_size;
}
size_t IceCandidateStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.IceCandidateStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000aff) ^ 0x00000aff) == 0) {  // All required fields are present.
    // required string transport_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport_id());

    // required string address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());

    // required string protocol = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());

    // required string url = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required string foundation = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_foundation());

    // required string related_address = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_related_address());

    // required string username_fragment = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username_fragment());

    // required int32 port = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());

    // required int32 priority = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());

    // required int32 related_port = 11;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_related_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .livekit.proto.IceCandidateType candidate_type = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_candidate_type());
  }

  // optional .livekit.proto.IceServerTransportProtocol relay_protocol = 8;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_relay_protocol());
  }

  // optional .livekit.proto.IceTcpCandidateType tcp_type = 13;
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tcp_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IceCandidateStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IceCandidateStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IceCandidateStats::GetClassData() const { return &_class_data_; }


void IceCandidateStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IceCandidateStats*>(&to_msg);
  auto& from = static_cast<const IceCandidateStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.IceCandidateStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_transport_id(from._internal_transport_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_foundation(from._internal_foundation());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_related_address(from._internal_related_address());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_username_fragment(from._internal_username_fragment());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.candidate_type_ = from._impl_.candidate_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.relay_protocol_ = from._impl_.relay_protocol_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.related_port_ = from._impl_.related_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tcp_type_ = from._impl_.tcp_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IceCandidateStats::CopyFrom(const IceCandidateStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.IceCandidateStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidateStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IceCandidateStats::InternalSwap(IceCandidateStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transport_id_, lhs_arena,
      &other->_impl_.transport_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.foundation_, lhs_arena,
      &other->_impl_.foundation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.related_address_, lhs_arena,
      &other->_impl_.related_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_fragment_, lhs_arena,
      &other->_impl_.username_fragment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IceCandidateStats, _impl_.tcp_type_)
      + sizeof(IceCandidateStats::_impl_.tcp_type_)
      - PROTOBUF_FIELD_OFFSET(IceCandidateStats, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IceCandidateStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[35]);
}

// ===================================================================

class CertificateStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CertificateStats>()._impl_._has_bits_);
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fingerprint_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_base64_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_issuer_certificate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

CertificateStats::CertificateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CertificateStats)
}
CertificateStats::CertificateStats(const CertificateStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CertificateStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.fingerprint_algorithm_){}
    , decltype(_impl_.base64_certificate_){}
    , decltype(_impl_.issuer_certificate_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fingerprint()) {
    _this->_impl_.fingerprint_.Set(from._internal_fingerprint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fingerprint_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fingerprint_algorithm()) {
    _this->_impl_.fingerprint_algorithm_.Set(from._internal_fingerprint_algorithm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base64_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_base64_certificate()) {
    _this->_impl_.base64_certificate_.Set(from._internal_base64_certificate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issuer_certificate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_certificate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer_certificate_id()) {
    _this->_impl_.issuer_certificate_id_.Set(from._internal_issuer_certificate_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CertificateStats)
}

inline void CertificateStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.fingerprint_algorithm_){}
    , decltype(_impl_.base64_certificate_){}
    , decltype(_impl_.issuer_certificate_id_){}
  };
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fingerprint_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base64_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issuer_certificate_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_certificate_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CertificateStats::~CertificateStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.CertificateStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertificateStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fingerprint_.Destroy();
  _impl_.fingerprint_algorithm_.Destroy();
  _impl_.base64_certificate_.Destroy();
  _impl_.issuer_certificate_id_.Destroy();
}

void CertificateStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CertificateStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CertificateStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fingerprint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fingerprint_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.base64_certificate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.issuer_certificate_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertificateStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string fingerprint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CertificateStats.fingerprint");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string fingerprint_algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fingerprint_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CertificateStats.fingerprint_algorithm");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string base64_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base64_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CertificateStats.base64_certificate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string issuer_certificate_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_issuer_certificate_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CertificateStats.issuer_certificate_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertificateStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CertificateStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string fingerprint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CertificateStats.fingerprint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fingerprint(), target);
  }

  // required string fingerprint_algorithm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fingerprint_algorithm().data(), static_cast<int>(this->_internal_fingerprint_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CertificateStats.fingerprint_algorithm");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fingerprint_algorithm(), target);
  }

  // required string base64_certificate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_base64_certificate().data(), static_cast<int>(this->_internal_base64_certificate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CertificateStats.base64_certificate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_base64_certificate(), target);
  }

  // required string issuer_certificate_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_issuer_certificate_id().data(), static_cast<int>(this->_internal_issuer_certificate_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CertificateStats.issuer_certificate_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_issuer_certificate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CertificateStats)
  return target;
}

size_t CertificateStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.CertificateStats)
  size_t total_size = 0;

  if (_internal_has_fingerprint()) {
    // required string fingerprint = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  if (_internal_has_fingerprint_algorithm()) {
    // required string fingerprint_algorithm = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint_algorithm());
  }

  if (_internal_has_base64_certificate()) {
    // required string base64_certificate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base64_certificate());
  }

  if (_internal_has_issuer_certificate_id()) {
    // required string issuer_certificate_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer_certificate_id());
  }

  return total_size;
}
size_t CertificateStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CertificateStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string fingerprint = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());

    // required string fingerprint_algorithm = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint_algorithm());

    // required string base64_certificate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base64_certificate());

    // required string issuer_certificate_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer_certificate_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertificateStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CertificateStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertificateStats::GetClassData() const { return &_class_data_; }


void CertificateStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CertificateStats*>(&to_msg);
  auto& from = static_cast<const CertificateStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CertificateStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fingerprint(from._internal_fingerprint());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fingerprint_algorithm(from._internal_fingerprint_algorithm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_base64_certificate(from._internal_base64_certificate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_issuer_certificate_id(from._internal_issuer_certificate_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertificateStats::CopyFrom(const CertificateStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CertificateStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CertificateStats::InternalSwap(CertificateStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fingerprint_, lhs_arena,
      &other->_impl_.fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fingerprint_algorithm_, lhs_arena,
      &other->_impl_.fingerprint_algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base64_certificate_, lhs_arena,
      &other->_impl_.base64_certificate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_certificate_id_, lhs_arena,
      &other->_impl_.issuer_certificate_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CertificateStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[36]);
}

// ===================================================================

class StreamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamStats>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StreamStats::StreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.StreamStats)
}
StreamStats::StreamStats(const StreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.stream_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_identifier()) {
    _this->_impl_.stream_identifier_.Set(from._internal_stream_identifier(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.StreamStats)
}

inline void StreamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.stream_identifier_){}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamStats::~StreamStats() {
  // @@protoc_insertion_point(destructor:livekit.proto.StreamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.stream_identifier_.Destroy();
}

void StreamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.StreamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stream_identifier_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.StreamStats.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string stream_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stream_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.StreamStats.stream_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.StreamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.StreamStats.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required string stream_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_identifier().data(), static_cast<int>(this->_internal_stream_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.StreamStats.stream_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stream_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.StreamStats)
  return target;
}

size_t StreamStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.StreamStats)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_stream_identifier()) {
    // required string stream_identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_identifier());
  }

  return total_size;
}
size_t StreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.StreamStats)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required string stream_identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamStats::GetClassData() const { return &_class_data_; }


void StreamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamStats*>(&to_msg);
  auto& from = static_cast<const StreamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.StreamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_stream_identifier(from._internal_stream_identifier());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStats::CopyFrom(const StreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.StreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StreamStats::InternalSwap(StreamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_identifier_, lhs_arena,
      &other->_impl_.stream_identifier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stats_2eproto_getter, &descriptor_table_stats_2eproto_once,
      file_level_metadata_stats_2eproto[37]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_Codec*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_Codec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_InboundRtp*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_InboundRtp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_InboundRtp >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_OutboundRtp*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_OutboundRtp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_OutboundRtp >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_RemoteInboundRtp*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_RemoteInboundRtp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_RemoteInboundRtp >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_RemoteOutboundRtp*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_RemoteOutboundRtp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_RemoteOutboundRtp >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_MediaSource*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_MediaSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_MediaSource >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_MediaPlayout*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_MediaPlayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_MediaPlayout >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_PeerConnection*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_PeerConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_PeerConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_DataChannel*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_DataChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_DataChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_Transport*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_Transport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_Transport >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_CandidatePair*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_CandidatePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_CandidatePair >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_LocalCandidate*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_LocalCandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_LocalCandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_RemoteCandidate*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_RemoteCandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_RemoteCandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_Certificate*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_Certificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_Certificate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_Stream*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats_Track*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats_Track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats_Track >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStats*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcStatsData*
Arena::CreateMaybeMessage< ::livekit::proto::RtcStatsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcStatsData >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::CodecStats*
Arena::CreateMaybeMessage< ::livekit::proto::CodecStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CodecStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::RtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ReceivedRtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::ReceivedRtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ReceivedRtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::InboundRtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::InboundRtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::InboundRtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SentRtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::SentRtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SentRtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OutboundRtpStreamStats_QualityLimitationDurationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OutboundRtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::OutboundRtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OutboundRtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RemoteInboundRtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::RemoteInboundRtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RemoteInboundRtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RemoteOutboundRtpStreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::RemoteOutboundRtpStreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RemoteOutboundRtpStreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::MediaSourceStats*
Arena::CreateMaybeMessage< ::livekit::proto::MediaSourceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::MediaSourceStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::AudioSourceStats*
Arena::CreateMaybeMessage< ::livekit::proto::AudioSourceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::AudioSourceStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::VideoSourceStats*
Arena::CreateMaybeMessage< ::livekit::proto::VideoSourceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::VideoSourceStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::AudioPlayoutStats*
Arena::CreateMaybeMessage< ::livekit::proto::AudioPlayoutStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::AudioPlayoutStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PeerConnectionStats*
Arena::CreateMaybeMessage< ::livekit::proto::PeerConnectionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PeerConnectionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataChannelStats*
Arena::CreateMaybeMessage< ::livekit::proto::DataChannelStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataChannelStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TransportStats*
Arena::CreateMaybeMessage< ::livekit::proto::TransportStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TransportStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::CandidatePairStats*
Arena::CreateMaybeMessage< ::livekit::proto::CandidatePairStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CandidatePairStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::IceCandidateStats*
Arena::CreateMaybeMessage< ::livekit::proto::IceCandidateStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::IceCandidateStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::CertificateStats*
Arena::CreateMaybeMessage< ::livekit::proto::CertificateStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CertificateStats >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::StreamStats*
Arena::CreateMaybeMessage< ::livekit::proto::StreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::StreamStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
