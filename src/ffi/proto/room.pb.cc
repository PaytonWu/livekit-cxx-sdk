// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#include "room.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
namespace proto {
PROTOBUF_CONSTEXPR ConnectRequest::ConnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr} {}
struct ConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectRequestDefaultTypeInternal() {}
  union {
    ConnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
PROTOBUF_CONSTEXPR ConnectResponse::ConnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct ConnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectResponseDefaultTypeInternal() {}
  union {
    ConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
PROTOBUF_CONSTEXPR ConnectCallback_ParticipantWithTracks::ConnectCallback_ParticipantWithTracks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publications_)*/{}
  , /*decltype(_impl_.participant_)*/nullptr} {}
struct ConnectCallback_ParticipantWithTracksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectCallback_ParticipantWithTracksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectCallback_ParticipantWithTracksDefaultTypeInternal() {}
  union {
    ConnectCallback_ParticipantWithTracks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectCallback_ParticipantWithTracksDefaultTypeInternal _ConnectCallback_ParticipantWithTracks_default_instance_;
PROTOBUF_CONSTEXPR ConnectCallback_Result::ConnectCallback_Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participants_)*/{}
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.local_participant_)*/nullptr} {}
struct ConnectCallback_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectCallback_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectCallback_ResultDefaultTypeInternal() {}
  union {
    ConnectCallback_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectCallback_ResultDefaultTypeInternal _ConnectCallback_Result_default_instance_;
PROTOBUF_CONSTEXPR ConnectCallback::ConnectCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConnectCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectCallbackDefaultTypeInternal() {}
  union {
    ConnectCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectCallbackDefaultTypeInternal _ConnectCallback_default_instance_;
PROTOBUF_CONSTEXPR DisconnectRequest::DisconnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.room_handle_)*/uint64_t{0u}} {}
struct DisconnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectRequestDefaultTypeInternal() {}
  union {
    DisconnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectRequestDefaultTypeInternal _DisconnectRequest_default_instance_;
PROTOBUF_CONSTEXPR DisconnectResponse::DisconnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct DisconnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectResponseDefaultTypeInternal() {}
  union {
    DisconnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
PROTOBUF_CONSTEXPR DisconnectCallback::DisconnectCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct DisconnectCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectCallbackDefaultTypeInternal() {}
  union {
    DisconnectCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectCallbackDefaultTypeInternal _DisconnectCallback_default_instance_;
PROTOBUF_CONSTEXPR PublishTrackRequest::PublishTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.track_handle_)*/uint64_t{0u}} {}
struct PublishTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishTrackRequestDefaultTypeInternal() {}
  union {
    PublishTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishTrackRequestDefaultTypeInternal _PublishTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishTrackResponse::PublishTrackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishTrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishTrackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishTrackResponseDefaultTypeInternal() {}
  union {
    PublishTrackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishTrackResponseDefaultTypeInternal _PublishTrackResponse_default_instance_;
PROTOBUF_CONSTEXPR PublishTrackCallback::PublishTrackCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PublishTrackCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishTrackCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishTrackCallbackDefaultTypeInternal() {}
  union {
    PublishTrackCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishTrackCallbackDefaultTypeInternal _PublishTrackCallback_default_instance_;
PROTOBUF_CONSTEXPR UnpublishTrackRequest::UnpublishTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.stop_on_unpublish_)*/false} {}
struct UnpublishTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishTrackRequestDefaultTypeInternal() {}
  union {
    UnpublishTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishTrackRequestDefaultTypeInternal _UnpublishTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR UnpublishTrackResponse::UnpublishTrackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct UnpublishTrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishTrackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishTrackResponseDefaultTypeInternal() {}
  union {
    UnpublishTrackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishTrackResponseDefaultTypeInternal _UnpublishTrackResponse_default_instance_;
PROTOBUF_CONSTEXPR UnpublishTrackCallback::UnpublishTrackCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct UnpublishTrackCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishTrackCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishTrackCallbackDefaultTypeInternal() {}
  union {
    UnpublishTrackCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishTrackCallbackDefaultTypeInternal _UnpublishTrackCallback_default_instance_;
PROTOBUF_CONSTEXPR PublishDataRequest::PublishDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_sids_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.data_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.data_len_)*/uint64_t{0u}
  , /*decltype(_impl_.reliable_)*/false} {}
struct PublishDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishDataRequestDefaultTypeInternal() {}
  union {
    PublishDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishDataRequestDefaultTypeInternal _PublishDataRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishDataResponse::PublishDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishDataResponseDefaultTypeInternal() {}
  union {
    PublishDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishDataResponseDefaultTypeInternal _PublishDataResponse_default_instance_;
PROTOBUF_CONSTEXPR PublishDataCallback::PublishDataCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishDataCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishDataCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishDataCallbackDefaultTypeInternal() {}
  union {
    PublishDataCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishDataCallbackDefaultTypeInternal _PublishDataCallback_default_instance_;
PROTOBUF_CONSTEXPR PublishTranscriptionRequest::PublishTranscriptionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct PublishTranscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishTranscriptionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishTranscriptionRequestDefaultTypeInternal() {}
  union {
    PublishTranscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishTranscriptionRequestDefaultTypeInternal _PublishTranscriptionRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishTranscriptionResponse::PublishTranscriptionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishTranscriptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishTranscriptionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishTranscriptionResponseDefaultTypeInternal() {}
  union {
    PublishTranscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishTranscriptionResponseDefaultTypeInternal _PublishTranscriptionResponse_default_instance_;
PROTOBUF_CONSTEXPR PublishTranscriptionCallback::PublishTranscriptionCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishTranscriptionCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishTranscriptionCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishTranscriptionCallbackDefaultTypeInternal() {}
  union {
    PublishTranscriptionCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishTranscriptionCallbackDefaultTypeInternal _PublishTranscriptionCallback_default_instance_;
PROTOBUF_CONSTEXPR PublishSipDtmfRequest::PublishSipDtmfRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.digit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.code_)*/0u} {}
struct PublishSipDtmfRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishSipDtmfRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishSipDtmfRequestDefaultTypeInternal() {}
  union {
    PublishSipDtmfRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishSipDtmfRequestDefaultTypeInternal _PublishSipDtmfRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishSipDtmfResponse::PublishSipDtmfResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishSipDtmfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishSipDtmfResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishSipDtmfResponseDefaultTypeInternal() {}
  union {
    PublishSipDtmfResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishSipDtmfResponseDefaultTypeInternal _PublishSipDtmfResponse_default_instance_;
PROTOBUF_CONSTEXPR PublishSipDtmfCallback::PublishSipDtmfCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PublishSipDtmfCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishSipDtmfCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishSipDtmfCallbackDefaultTypeInternal() {}
  union {
    PublishSipDtmfCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishSipDtmfCallbackDefaultTypeInternal _PublishSipDtmfCallback_default_instance_;
PROTOBUF_CONSTEXPR SetLocalMetadataRequest::SetLocalMetadataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SetLocalMetadataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalMetadataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalMetadataRequestDefaultTypeInternal() {}
  union {
    SetLocalMetadataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalMetadataRequestDefaultTypeInternal _SetLocalMetadataRequest_default_instance_;
PROTOBUF_CONSTEXPR SetLocalMetadataResponse::SetLocalMetadataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SetLocalMetadataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalMetadataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalMetadataResponseDefaultTypeInternal() {}
  union {
    SetLocalMetadataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalMetadataResponseDefaultTypeInternal _SetLocalMetadataResponse_default_instance_;
PROTOBUF_CONSTEXPR SetLocalMetadataCallback::SetLocalMetadataCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SetLocalMetadataCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalMetadataCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalMetadataCallbackDefaultTypeInternal() {}
  union {
    SetLocalMetadataCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalMetadataCallbackDefaultTypeInternal _SetLocalMetadataCallback_default_instance_;
PROTOBUF_CONSTEXPR SendChatMessageRequest::SendChatMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SendChatMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatMessageRequestDefaultTypeInternal() {}
  union {
    SendChatMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatMessageRequestDefaultTypeInternal _SendChatMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR EditChatMessageRequest::EditChatMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.edit_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_message_)*/nullptr
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct EditChatMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditChatMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditChatMessageRequestDefaultTypeInternal() {}
  union {
    EditChatMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditChatMessageRequestDefaultTypeInternal _EditChatMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR SendChatMessageResponse::SendChatMessageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendChatMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatMessageResponseDefaultTypeInternal() {}
  union {
    SendChatMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatMessageResponseDefaultTypeInternal _SendChatMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR SendChatMessageCallback::SendChatMessageCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SendChatMessageCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatMessageCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatMessageCallbackDefaultTypeInternal() {}
  union {
    SendChatMessageCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatMessageCallbackDefaultTypeInternal _SendChatMessageCallback_default_instance_;
PROTOBUF_CONSTEXPR SetLocalAttributesRequest::SetLocalAttributesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SetLocalAttributesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalAttributesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalAttributesRequestDefaultTypeInternal() {}
  union {
    SetLocalAttributesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalAttributesRequestDefaultTypeInternal _SetLocalAttributesRequest_default_instance_;
PROTOBUF_CONSTEXPR AttributesEntry::AttributesEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AttributesEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributesEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributesEntryDefaultTypeInternal() {}
  union {
    AttributesEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributesEntryDefaultTypeInternal _AttributesEntry_default_instance_;
PROTOBUF_CONSTEXPR SetLocalAttributesResponse::SetLocalAttributesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SetLocalAttributesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalAttributesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalAttributesResponseDefaultTypeInternal() {}
  union {
    SetLocalAttributesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalAttributesResponseDefaultTypeInternal _SetLocalAttributesResponse_default_instance_;
PROTOBUF_CONSTEXPR SetLocalAttributesCallback::SetLocalAttributesCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SetLocalAttributesCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalAttributesCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalAttributesCallbackDefaultTypeInternal() {}
  union {
    SetLocalAttributesCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalAttributesCallbackDefaultTypeInternal _SetLocalAttributesCallback_default_instance_;
PROTOBUF_CONSTEXPR SetLocalNameRequest::SetLocalNameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SetLocalNameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalNameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalNameRequestDefaultTypeInternal() {}
  union {
    SetLocalNameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalNameRequestDefaultTypeInternal _SetLocalNameRequest_default_instance_;
PROTOBUF_CONSTEXPR SetLocalNameResponse::SetLocalNameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SetLocalNameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalNameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalNameResponseDefaultTypeInternal() {}
  union {
    SetLocalNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalNameResponseDefaultTypeInternal _SetLocalNameResponse_default_instance_;
PROTOBUF_CONSTEXPR SetLocalNameCallback::SetLocalNameCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SetLocalNameCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLocalNameCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLocalNameCallbackDefaultTypeInternal() {}
  union {
    SetLocalNameCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLocalNameCallbackDefaultTypeInternal _SetLocalNameCallback_default_instance_;
PROTOBUF_CONSTEXPR SetSubscribedRequest::SetSubscribedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publication_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.subscribe_)*/false} {}
struct SetSubscribedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSubscribedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSubscribedRequestDefaultTypeInternal() {}
  union {
    SetSubscribedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSubscribedRequestDefaultTypeInternal _SetSubscribedRequest_default_instance_;
PROTOBUF_CONSTEXPR SetSubscribedResponse::SetSubscribedResponse(
    ::_pbi::ConstantInitialized) {}
struct SetSubscribedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSubscribedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSubscribedResponseDefaultTypeInternal() {}
  union {
    SetSubscribedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSubscribedResponseDefaultTypeInternal _SetSubscribedResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSessionStatsRequest::GetSessionStatsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.room_handle_)*/uint64_t{0u}} {}
struct GetSessionStatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSessionStatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSessionStatsRequestDefaultTypeInternal() {}
  union {
    GetSessionStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSessionStatsRequestDefaultTypeInternal _GetSessionStatsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSessionStatsResponse::GetSessionStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct GetSessionStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSessionStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSessionStatsResponseDefaultTypeInternal() {}
  union {
    GetSessionStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSessionStatsResponseDefaultTypeInternal _GetSessionStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSessionStatsCallback_Result::GetSessionStatsCallback_Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publisher_stats_)*/{}
  , /*decltype(_impl_.subscriber_stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSessionStatsCallback_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSessionStatsCallback_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSessionStatsCallback_ResultDefaultTypeInternal() {}
  union {
    GetSessionStatsCallback_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSessionStatsCallback_ResultDefaultTypeInternal _GetSessionStatsCallback_Result_default_instance_;
PROTOBUF_CONSTEXPR GetSessionStatsCallback::GetSessionStatsCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetSessionStatsCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSessionStatsCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSessionStatsCallbackDefaultTypeInternal() {}
  union {
    GetSessionStatsCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSessionStatsCallbackDefaultTypeInternal _GetSessionStatsCallback_default_instance_;
PROTOBUF_CONSTEXPR VideoEncoding::VideoEncoding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_bitrate_)*/uint64_t{0u}
  , /*decltype(_impl_.max_framerate_)*/0} {}
struct VideoEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoEncodingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoEncodingDefaultTypeInternal() {}
  union {
    VideoEncoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoEncodingDefaultTypeInternal _VideoEncoding_default_instance_;
PROTOBUF_CONSTEXPR AudioEncoding::AudioEncoding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_bitrate_)*/uint64_t{0u}} {}
struct AudioEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioEncodingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioEncodingDefaultTypeInternal() {}
  union {
    AudioEncoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioEncodingDefaultTypeInternal _AudioEncoding_default_instance_;
PROTOBUF_CONSTEXPR TrackPublishOptions::TrackPublishOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.video_encoding_)*/nullptr
  , /*decltype(_impl_.audio_encoding_)*/nullptr
  , /*decltype(_impl_.video_codec_)*/0
  , /*decltype(_impl_.dtx_)*/false
  , /*decltype(_impl_.red_)*/false
  , /*decltype(_impl_.simulcast_)*/false
  , /*decltype(_impl_.source_)*/0} {}
struct TrackPublishOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPublishOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPublishOptionsDefaultTypeInternal() {}
  union {
    TrackPublishOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPublishOptionsDefaultTypeInternal _TrackPublishOptions_default_instance_;
PROTOBUF_CONSTEXPR IceServer::IceServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.urls_)*/{}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct IceServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IceServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IceServerDefaultTypeInternal() {}
  union {
    IceServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IceServerDefaultTypeInternal _IceServer_default_instance_;
PROTOBUF_CONSTEXPR RtcConfig::RtcConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ice_servers_)*/{}
  , /*decltype(_impl_.ice_transport_type_)*/0
  , /*decltype(_impl_.continual_gathering_policy_)*/0} {}
struct RtcConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcConfigDefaultTypeInternal() {}
  union {
    RtcConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcConfigDefaultTypeInternal _RtcConfig_default_instance_;
PROTOBUF_CONSTEXPR RoomOptions::RoomOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.e2ee_)*/nullptr
  , /*decltype(_impl_.rtc_config_)*/nullptr
  , /*decltype(_impl_.auto_subscribe_)*/false
  , /*decltype(_impl_.adaptive_stream_)*/false
  , /*decltype(_impl_.dynacast_)*/false
  , /*decltype(_impl_.join_retries_)*/0u} {}
struct RoomOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomOptionsDefaultTypeInternal() {}
  union {
    RoomOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomOptionsDefaultTypeInternal _RoomOptions_default_instance_;
PROTOBUF_CONSTEXPR TranscriptionSegment::TranscriptionSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_)*/uint64_t{0u}
  , /*decltype(_impl_.final_)*/false} {}
struct TranscriptionSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranscriptionSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranscriptionSegmentDefaultTypeInternal() {}
  union {
    TranscriptionSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranscriptionSegmentDefaultTypeInternal _TranscriptionSegment_default_instance_;
PROTOBUF_CONSTEXPR BufferInfo::BufferInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.data_len_)*/uint64_t{0u}} {}
struct BufferInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferInfoDefaultTypeInternal() {}
  union {
    BufferInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferInfoDefaultTypeInternal _BufferInfo_default_instance_;
PROTOBUF_CONSTEXPR OwnedBuffer::OwnedBuffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr} {}
struct OwnedBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnedBufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnedBufferDefaultTypeInternal() {}
  union {
    OwnedBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnedBufferDefaultTypeInternal _OwnedBuffer_default_instance_;
PROTOBUF_CONSTEXPR RoomEvent::RoomEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.room_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RoomEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomEventDefaultTypeInternal() {}
  union {
    RoomEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomEventDefaultTypeInternal _RoomEvent_default_instance_;
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lossy_dc_buffered_amount_low_threshold_)*/uint64_t{0u}
  , /*decltype(_impl_.reliable_dc_buffered_amount_low_threshold_)*/uint64_t{0u}} {}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR OwnedRoom::OwnedRoom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr} {}
struct OwnedRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnedRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnedRoomDefaultTypeInternal() {}
  union {
    OwnedRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnedRoomDefaultTypeInternal _OwnedRoom_default_instance_;
PROTOBUF_CONSTEXPR ParticipantConnected::ParticipantConnected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct ParticipantConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantConnectedDefaultTypeInternal() {}
  union {
    ParticipantConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantConnectedDefaultTypeInternal _ParticipantConnected_default_instance_;
PROTOBUF_CONSTEXPR ParticipantDisconnected::ParticipantDisconnected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disconnect_reason_)*/0} {}
struct ParticipantDisconnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantDisconnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantDisconnectedDefaultTypeInternal() {}
  union {
    ParticipantDisconnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantDisconnectedDefaultTypeInternal _ParticipantDisconnected_default_instance_;
PROTOBUF_CONSTEXPR LocalTrackPublished::LocalTrackPublished(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LocalTrackPublishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrackPublishedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrackPublishedDefaultTypeInternal() {}
  union {
    LocalTrackPublished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrackPublishedDefaultTypeInternal _LocalTrackPublished_default_instance_;
PROTOBUF_CONSTEXPR LocalTrackUnpublished::LocalTrackUnpublished(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publication_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LocalTrackUnpublishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrackUnpublishedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrackUnpublishedDefaultTypeInternal() {}
  union {
    LocalTrackUnpublished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrackUnpublishedDefaultTypeInternal _LocalTrackUnpublished_default_instance_;
PROTOBUF_CONSTEXPR LocalTrackSubscribed::LocalTrackSubscribed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LocalTrackSubscribedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrackSubscribedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrackSubscribedDefaultTypeInternal() {}
  union {
    LocalTrackSubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrackSubscribedDefaultTypeInternal _LocalTrackSubscribed_default_instance_;
PROTOBUF_CONSTEXPR TrackPublished::TrackPublished(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.publication_)*/nullptr} {}
struct TrackPublishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPublishedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPublishedDefaultTypeInternal() {}
  union {
    TrackPublished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPublishedDefaultTypeInternal _TrackPublished_default_instance_;
PROTOBUF_CONSTEXPR TrackUnpublished::TrackUnpublished(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.publication_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrackUnpublishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackUnpublishedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackUnpublishedDefaultTypeInternal() {}
  union {
    TrackUnpublished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackUnpublishedDefaultTypeInternal _TrackUnpublished_default_instance_;
PROTOBUF_CONSTEXPR TrackSubscribed::TrackSubscribed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_)*/nullptr} {}
struct TrackSubscribedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackSubscribedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackSubscribedDefaultTypeInternal() {}
  union {
    TrackSubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackSubscribedDefaultTypeInternal _TrackSubscribed_default_instance_;
PROTOBUF_CONSTEXPR TrackUnsubscribed::TrackUnsubscribed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrackUnsubscribedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackUnsubscribedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackUnsubscribedDefaultTypeInternal() {}
  union {
    TrackUnsubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackUnsubscribedDefaultTypeInternal _TrackUnsubscribed_default_instance_;
PROTOBUF_CONSTEXPR TrackSubscriptionFailed::TrackSubscriptionFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrackSubscriptionFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackSubscriptionFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackSubscriptionFailedDefaultTypeInternal() {}
  union {
    TrackSubscriptionFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackSubscriptionFailedDefaultTypeInternal _TrackSubscriptionFailed_default_instance_;
PROTOBUF_CONSTEXPR TrackMuted::TrackMuted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrackMutedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackMutedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackMutedDefaultTypeInternal() {}
  union {
    TrackMuted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackMutedDefaultTypeInternal _TrackMuted_default_instance_;
PROTOBUF_CONSTEXPR TrackUnmuted::TrackUnmuted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrackUnmutedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackUnmutedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackUnmutedDefaultTypeInternal() {}
  union {
    TrackUnmuted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackUnmutedDefaultTypeInternal _TrackUnmuted_default_instance_;
PROTOBUF_CONSTEXPR E2eeStateChanged::E2eeStateChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0} {}
struct E2eeStateChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR E2eeStateChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~E2eeStateChangedDefaultTypeInternal() {}
  union {
    E2eeStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 E2eeStateChangedDefaultTypeInternal _E2eeStateChanged_default_instance_;
PROTOBUF_CONSTEXPR ActiveSpeakersChanged::ActiveSpeakersChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_identities_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActiveSpeakersChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActiveSpeakersChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActiveSpeakersChangedDefaultTypeInternal() {}
  union {
    ActiveSpeakersChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActiveSpeakersChangedDefaultTypeInternal _ActiveSpeakersChanged_default_instance_;
PROTOBUF_CONSTEXPR RoomMetadataChanged::RoomMetadataChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RoomMetadataChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomMetadataChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomMetadataChangedDefaultTypeInternal() {}
  union {
    RoomMetadataChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomMetadataChangedDefaultTypeInternal _RoomMetadataChanged_default_instance_;
PROTOBUF_CONSTEXPR RoomSidChanged::RoomSidChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RoomSidChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomSidChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomSidChangedDefaultTypeInternal() {}
  union {
    RoomSidChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomSidChangedDefaultTypeInternal _RoomSidChanged_default_instance_;
PROTOBUF_CONSTEXPR ParticipantMetadataChanged::ParticipantMetadataChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ParticipantMetadataChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantMetadataChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantMetadataChangedDefaultTypeInternal() {}
  union {
    ParticipantMetadataChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantMetadataChangedDefaultTypeInternal _ParticipantMetadataChanged_default_instance_;
PROTOBUF_CONSTEXPR ParticipantAttributesChanged::ParticipantAttributesChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.changed_attributes_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ParticipantAttributesChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantAttributesChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantAttributesChangedDefaultTypeInternal() {}
  union {
    ParticipantAttributesChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantAttributesChangedDefaultTypeInternal _ParticipantAttributesChanged_default_instance_;
PROTOBUF_CONSTEXPR ParticipantNameChanged::ParticipantNameChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ParticipantNameChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantNameChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantNameChangedDefaultTypeInternal() {}
  union {
    ParticipantNameChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantNameChangedDefaultTypeInternal _ParticipantNameChanged_default_instance_;
PROTOBUF_CONSTEXPR ConnectionQualityChanged::ConnectionQualityChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quality_)*/0} {}
struct ConnectionQualityChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionQualityChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionQualityChangedDefaultTypeInternal() {}
  union {
    ConnectionQualityChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionQualityChangedDefaultTypeInternal _ConnectionQualityChanged_default_instance_;
PROTOBUF_CONSTEXPR UserPacket::UserPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct UserPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserPacketDefaultTypeInternal() {}
  union {
    UserPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserPacketDefaultTypeInternal _UserPacket_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.edit_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.generated_)*/false} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageReceived::ChatMessageReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/nullptr} {}
struct ChatMessageReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageReceivedDefaultTypeInternal() {}
  union {
    ChatMessageReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageReceivedDefaultTypeInternal _ChatMessageReceived_default_instance_;
PROTOBUF_CONSTEXPR SipDTMF::SipDTMF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0u} {}
struct SipDTMFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SipDTMFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SipDTMFDefaultTypeInternal() {}
  union {
    SipDTMF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SipDTMFDefaultTypeInternal _SipDTMF_default_instance_;
PROTOBUF_CONSTEXPR DataPacketReceived::DataPacketReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataPacketReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacketReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacketReceivedDefaultTypeInternal() {}
  union {
    DataPacketReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacketReceivedDefaultTypeInternal _DataPacketReceived_default_instance_;
PROTOBUF_CONSTEXPR TranscriptionReceived::TranscriptionReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TranscriptionReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranscriptionReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranscriptionReceivedDefaultTypeInternal() {}
  union {
    TranscriptionReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranscriptionReceivedDefaultTypeInternal _TranscriptionReceived_default_instance_;
PROTOBUF_CONSTEXPR ConnectionStateChanged::ConnectionStateChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/0} {}
struct ConnectionStateChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionStateChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionStateChangedDefaultTypeInternal() {}
  union {
    ConnectionStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionStateChangedDefaultTypeInternal _ConnectionStateChanged_default_instance_;
PROTOBUF_CONSTEXPR Connected::Connected(
    ::_pbi::ConstantInitialized) {}
struct ConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectedDefaultTypeInternal() {}
  union {
    Connected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectedDefaultTypeInternal _Connected_default_instance_;
PROTOBUF_CONSTEXPR Disconnected::Disconnected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/0} {}
struct DisconnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectedDefaultTypeInternal() {}
  union {
    Disconnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectedDefaultTypeInternal _Disconnected_default_instance_;
PROTOBUF_CONSTEXPR Reconnecting::Reconnecting(
    ::_pbi::ConstantInitialized) {}
struct ReconnectingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectingDefaultTypeInternal() {}
  union {
    Reconnecting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectingDefaultTypeInternal _Reconnecting_default_instance_;
PROTOBUF_CONSTEXPR Reconnected::Reconnected(
    ::_pbi::ConstantInitialized) {}
struct ReconnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectedDefaultTypeInternal() {}
  union {
    Reconnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectedDefaultTypeInternal _Reconnected_default_instance_;
PROTOBUF_CONSTEXPR RoomEOS::RoomEOS(
    ::_pbi::ConstantInitialized) {}
struct RoomEOSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomEOSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomEOSDefaultTypeInternal() {}
  union {
    RoomEOS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomEOSDefaultTypeInternal _RoomEOS_default_instance_;
PROTOBUF_CONSTEXPR DataStream_TextHeader::DataStream_TextHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attached_stream_ids_)*/{}
  , /*decltype(_impl_.reply_to_stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_type_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.generated_)*/false} {}
struct DataStream_TextHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_TextHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_TextHeaderDefaultTypeInternal() {}
  union {
    DataStream_TextHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_TextHeaderDefaultTypeInternal _DataStream_TextHeader_default_instance_;
PROTOBUF_CONSTEXPR DataStream_ByteHeader::DataStream_ByteHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DataStream_ByteHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_ByteHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_ByteHeaderDefaultTypeInternal() {}
  union {
    DataStream_ByteHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_ByteHeaderDefaultTypeInternal _DataStream_ByteHeader_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataStream_Header_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Header_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Header::DataStream_Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.total_length_)*/uint64_t{0u}
  , /*decltype(_impl_.content_header_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataStream_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_HeaderDefaultTypeInternal() {}
  union {
    DataStream_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_HeaderDefaultTypeInternal _DataStream_Header_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Chunk::DataStream_Chunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_index_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0} {}
struct DataStream_ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_ChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_ChunkDefaultTypeInternal() {}
  union {
    DataStream_Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_ChunkDefaultTypeInternal _DataStream_Chunk_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataStream_Trailer_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DataStream_Trailer::DataStream_Trailer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DataStream_TrailerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_TrailerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_TrailerDefaultTypeInternal() {}
  union {
    DataStream_Trailer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_TrailerDefaultTypeInternal _DataStream_Trailer_default_instance_;
PROTOBUF_CONSTEXPR DataStream::DataStream(
    ::_pbi::ConstantInitialized) {}
struct DataStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStreamDefaultTypeInternal() {}
  union {
    DataStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStreamDefaultTypeInternal _DataStream_default_instance_;
PROTOBUF_CONSTEXPR DataStreamHeaderReceived::DataStreamHeaderReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct DataStreamHeaderReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStreamHeaderReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStreamHeaderReceivedDefaultTypeInternal() {}
  union {
    DataStreamHeaderReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStreamHeaderReceivedDefaultTypeInternal _DataStreamHeaderReceived_default_instance_;
PROTOBUF_CONSTEXPR DataStreamChunkReceived::DataStreamChunkReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_)*/nullptr} {}
struct DataStreamChunkReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStreamChunkReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStreamChunkReceivedDefaultTypeInternal() {}
  union {
    DataStreamChunkReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStreamChunkReceivedDefaultTypeInternal _DataStreamChunkReceived_default_instance_;
PROTOBUF_CONSTEXPR DataStreamTrailerReceived::DataStreamTrailerReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trailer_)*/nullptr} {}
struct DataStreamTrailerReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStreamTrailerReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStreamTrailerReceivedDefaultTypeInternal() {}
  union {
    DataStreamTrailerReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStreamTrailerReceivedDefaultTypeInternal _DataStreamTrailerReceived_default_instance_;
PROTOBUF_CONSTEXPR SendStreamHeaderRequest::SendStreamHeaderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.sender_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SendStreamHeaderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamHeaderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamHeaderRequestDefaultTypeInternal() {}
  union {
    SendStreamHeaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamHeaderRequestDefaultTypeInternal _SendStreamHeaderRequest_default_instance_;
PROTOBUF_CONSTEXPR SendStreamChunkRequest::SendStreamChunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.sender_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_)*/nullptr
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SendStreamChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamChunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamChunkRequestDefaultTypeInternal() {}
  union {
    SendStreamChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamChunkRequestDefaultTypeInternal _SendStreamChunkRequest_default_instance_;
PROTOBUF_CONSTEXPR SendStreamTrailerRequest::SendStreamTrailerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.sender_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trailer_)*/nullptr
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct SendStreamTrailerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamTrailerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamTrailerRequestDefaultTypeInternal() {}
  union {
    SendStreamTrailerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamTrailerRequestDefaultTypeInternal _SendStreamTrailerRequest_default_instance_;
PROTOBUF_CONSTEXPR SendStreamHeaderResponse::SendStreamHeaderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendStreamHeaderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamHeaderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamHeaderResponseDefaultTypeInternal() {}
  union {
    SendStreamHeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamHeaderResponseDefaultTypeInternal _SendStreamHeaderResponse_default_instance_;
PROTOBUF_CONSTEXPR SendStreamChunkResponse::SendStreamChunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendStreamChunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamChunkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamChunkResponseDefaultTypeInternal() {}
  union {
    SendStreamChunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamChunkResponseDefaultTypeInternal _SendStreamChunkResponse_default_instance_;
PROTOBUF_CONSTEXPR SendStreamTrailerResponse::SendStreamTrailerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendStreamTrailerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamTrailerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamTrailerResponseDefaultTypeInternal() {}
  union {
    SendStreamTrailerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamTrailerResponseDefaultTypeInternal _SendStreamTrailerResponse_default_instance_;
PROTOBUF_CONSTEXPR SendStreamHeaderCallback::SendStreamHeaderCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendStreamHeaderCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamHeaderCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamHeaderCallbackDefaultTypeInternal() {}
  union {
    SendStreamHeaderCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamHeaderCallbackDefaultTypeInternal _SendStreamHeaderCallback_default_instance_;
PROTOBUF_CONSTEXPR SendStreamChunkCallback::SendStreamChunkCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendStreamChunkCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamChunkCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamChunkCallbackDefaultTypeInternal() {}
  union {
    SendStreamChunkCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamChunkCallbackDefaultTypeInternal _SendStreamChunkCallback_default_instance_;
PROTOBUF_CONSTEXPR SendStreamTrailerCallback::SendStreamTrailerCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct SendStreamTrailerCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendStreamTrailerCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendStreamTrailerCallbackDefaultTypeInternal() {}
  union {
    SendStreamTrailerCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendStreamTrailerCallbackDefaultTypeInternal _SendStreamTrailerCallback_default_instance_;
PROTOBUF_CONSTEXPR SetDataChannelBufferedAmountLowThresholdRequest::SetDataChannelBufferedAmountLowThresholdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.threshold_)*/uint64_t{0u}
  , /*decltype(_impl_.kind_)*/0} {}
struct SetDataChannelBufferedAmountLowThresholdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDataChannelBufferedAmountLowThresholdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDataChannelBufferedAmountLowThresholdRequestDefaultTypeInternal() {}
  union {
    SetDataChannelBufferedAmountLowThresholdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDataChannelBufferedAmountLowThresholdRequestDefaultTypeInternal _SetDataChannelBufferedAmountLowThresholdRequest_default_instance_;
PROTOBUF_CONSTEXPR SetDataChannelBufferedAmountLowThresholdResponse::SetDataChannelBufferedAmountLowThresholdResponse(
    ::_pbi::ConstantInitialized) {}
struct SetDataChannelBufferedAmountLowThresholdResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDataChannelBufferedAmountLowThresholdResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDataChannelBufferedAmountLowThresholdResponseDefaultTypeInternal() {}
  union {
    SetDataChannelBufferedAmountLowThresholdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDataChannelBufferedAmountLowThresholdResponseDefaultTypeInternal _SetDataChannelBufferedAmountLowThresholdResponse_default_instance_;
PROTOBUF_CONSTEXPR DataChannelBufferedAmountLowThresholdChanged::DataChannelBufferedAmountLowThresholdChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threshold_)*/uint64_t{0u}
  , /*decltype(_impl_.kind_)*/0} {}
struct DataChannelBufferedAmountLowThresholdChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChannelBufferedAmountLowThresholdChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChannelBufferedAmountLowThresholdChangedDefaultTypeInternal() {}
  union {
    DataChannelBufferedAmountLowThresholdChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChannelBufferedAmountLowThresholdChangedDefaultTypeInternal _DataChannelBufferedAmountLowThresholdChanged_default_instance_;
}  // namespace proto
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_room_2eproto[110];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_room_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_room_2eproto = nullptr;

const uint32_t TableStruct_room_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectRequest, _impl_.options_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_ParticipantWithTracks, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_ParticipantWithTracks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_ParticipantWithTracks, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_ParticipantWithTracks, _impl_.publications_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_Result, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_Result, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_Result, _impl_.local_participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback_Result, _impl_.participants_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback, _impl_.async_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectCallback, _impl_.message_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectRequest, _impl_.room_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DisconnectCallback, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackRequest, _impl_.track_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackRequest, _impl_.options_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackCallback, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackCallback, _impl_.async_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTrackCallback, _impl_.message_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackRequest, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackRequest, _impl_.stop_on_unpublish_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnpublishTrackCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.data_ptr_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.data_len_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.reliable_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.destination_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataRequest, _impl_.destination_identities_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishDataCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionRequest, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionRequest, _impl_.track_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionRequest, _impl_.segments_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishTranscriptionCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfRequest, _impl_.digit_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfRequest, _impl_.destination_identities_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PublishSipDtmfCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataRequest, _impl_.metadata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalMetadataCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageRequest, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageRequest, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageRequest, _impl_.sender_identity_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _impl_.edit_text_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _impl_.original_message_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EditChatMessageRequest, _impl_.sender_identity_),
  3,
  0,
  2,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageCallback, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageCallback, _impl_.async_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendChatMessageCallback, _impl_.message_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesRequest, _impl_.attributes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AttributesEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AttributesEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AttributesEntry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AttributesEntry, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalAttributesCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameRequest, _impl_.name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetLocalNameCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetSubscribedRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetSubscribedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetSubscribedRequest, _impl_.subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetSubscribedRequest, _impl_.publication_handle_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetSubscribedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsRequest, _impl_.room_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsResponse, _impl_.async_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback_Result, _impl_.publisher_stats_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback_Result, _impl_.subscriber_stats_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback, _impl_.async_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetSessionStatsCallback, _impl_.message_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoEncoding, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoEncoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoEncoding, _impl_.max_bitrate_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::VideoEncoding, _impl_.max_framerate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioEncoding, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioEncoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::AudioEncoding, _impl_.max_bitrate_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.video_encoding_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.audio_encoding_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.video_codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.dtx_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.simulcast_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublishOptions, _impl_.stream_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceServer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceServer, _impl_.urls_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceServer, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::IceServer, _impl_.password_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcConfig, _impl_.ice_transport_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcConfig, _impl_.continual_gathering_policy_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RtcConfig, _impl_.ice_servers_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_.auto_subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_.adaptive_stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_.dynacast_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_.e2ee_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_.rtc_config_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomOptions, _impl_.join_retries_),
  2,
  3,
  4,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_.final_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionSegment, _impl_.language_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::BufferInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::BufferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::BufferInfo, _impl_.data_ptr_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::BufferInfo, _impl_.data_len_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedBuffer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedBuffer, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedBuffer, _impl_.data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomEvent, _impl_.room_handle_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomEvent, _impl_.message_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _impl_.lossy_dc_buffered_amount_low_threshold_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomInfo, _impl_.reliable_dc_buffered_amount_low_threshold_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedRoom, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedRoom, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedRoom, _impl_.info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantConnected, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantConnected, _impl_.info_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantDisconnected, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantDisconnected, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantDisconnected, _impl_.disconnect_reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackPublished, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackPublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackPublished, _impl_.track_sid_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackUnpublished, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackUnpublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackUnpublished, _impl_.publication_sid_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackSubscribed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackSubscribed, _impl_.track_sid_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublished, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublished, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublished, _impl_.publication_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnpublished, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnpublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnpublished, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnpublished, _impl_.publication_sid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscribed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscribed, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscribed, _impl_.track_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnsubscribed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnsubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnsubscribed, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnsubscribed, _impl_.track_sid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscriptionFailed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscriptionFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscriptionFailed, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscriptionFailed, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackSubscriptionFailed, _impl_.error_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackMuted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackMuted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackMuted, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackMuted, _impl_.track_sid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnmuted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnmuted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnmuted, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackUnmuted, _impl_.track_sid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::E2eeStateChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::E2eeStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::E2eeStateChanged, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::E2eeStateChanged, _impl_.state_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ActiveSpeakersChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ActiveSpeakersChanged, _impl_.participant_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomMetadataChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomMetadataChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomMetadataChanged, _impl_.metadata_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomSidChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomSidChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomSidChanged, _impl_.sid_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantMetadataChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantMetadataChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantMetadataChanged, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantMetadataChanged, _impl_.metadata_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantAttributesChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantAttributesChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantAttributesChanged, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantAttributesChanged, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantAttributesChanged, _impl_.changed_attributes_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantNameChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantNameChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantNameChanged, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantNameChanged, _impl_.name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionQualityChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionQualityChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionQualityChanged, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionQualityChanged, _impl_.quality_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UserPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UserPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UserPacket, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UserPacket, _impl_.topic_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_.edit_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessage, _impl_.generated_),
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessageReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessageReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessageReceived, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ChatMessageReceived, _impl_.participant_identity_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SipDTMF, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SipDTMF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SipDTMF, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SipDTMF, _impl_.digit_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataPacketReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataPacketReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataPacketReceived, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataPacketReceived, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataPacketReceived, _impl_.participant_identity_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataPacketReceived, _impl_.value_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionReceived, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionReceived, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TranscriptionReceived, _impl_.segments_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionStateChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ConnectionStateChanged, _impl_.state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Connected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Disconnected, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Disconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Disconnected, _impl_.reason_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Reconnecting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::Reconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RoomEOS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _impl_.operation_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _impl_.reply_to_stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _impl_.attached_stream_ids_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_TextHeader, _impl_.generated_),
  1,
  2,
  0,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_ByteHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_ByteHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_ByteHeader, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.total_length_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.attributes_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Header, _impl_.content_header_),
  0,
  3,
  1,
  2,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _impl_.chunk_index_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Chunk, _impl_.iv_),
  0,
  3,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream_Trailer, _impl_.attributes_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamHeaderReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamHeaderReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamHeaderReceived, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamHeaderReceived, _impl_.header_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamChunkReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamChunkReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamChunkReceived, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamChunkReceived, _impl_.chunk_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamTrailerReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamTrailerReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamTrailerReceived, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataStreamTrailerReceived, _impl_.trailer_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderRequest, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderRequest, _impl_.sender_identity_),
  2,
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkRequest, _impl_.chunk_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkRequest, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkRequest, _impl_.sender_identity_),
  2,
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerRequest, _impl_.trailer_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerRequest, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerRequest, _impl_.sender_identity_),
  2,
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamHeaderCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamChunkCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SendStreamTrailerCallback, _impl_.error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest, _impl_.kind_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelBufferedAmountLowThresholdChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelBufferedAmountLowThresholdChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelBufferedAmountLowThresholdChanged, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::DataChannelBufferedAmountLowThresholdChanged, _impl_.threshold_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::livekit::proto::ConnectRequest)},
  { 12, 19, -1, sizeof(::livekit::proto::ConnectResponse)},
  { 20, 28, -1, sizeof(::livekit::proto::ConnectCallback_ParticipantWithTracks)},
  { 30, 39, -1, sizeof(::livekit::proto::ConnectCallback_Result)},
  { 42, 52, -1, sizeof(::livekit::proto::ConnectCallback)},
  { 55, 62, -1, sizeof(::livekit::proto::DisconnectRequest)},
  { 63, 70, -1, sizeof(::livekit::proto::DisconnectResponse)},
  { 71, 78, -1, sizeof(::livekit::proto::DisconnectCallback)},
  { 79, 88, -1, sizeof(::livekit::proto::PublishTrackRequest)},
  { 91, 98, -1, sizeof(::livekit::proto::PublishTrackResponse)},
  { 99, 109, -1, sizeof(::livekit::proto::PublishTrackCallback)},
  { 112, 121, -1, sizeof(::livekit::proto::UnpublishTrackRequest)},
  { 124, 131, -1, sizeof(::livekit::proto::UnpublishTrackResponse)},
  { 132, 140, -1, sizeof(::livekit::proto::UnpublishTrackCallback)},
  { 142, 155, -1, sizeof(::livekit::proto::PublishDataRequest)},
  { 162, 169, -1, sizeof(::livekit::proto::PublishDataResponse)},
  { 170, 178, -1, sizeof(::livekit::proto::PublishDataCallback)},
  { 180, 190, -1, sizeof(::livekit::proto::PublishTranscriptionRequest)},
  { 194, 201, -1, sizeof(::livekit::proto::PublishTranscriptionResponse)},
  { 202, 210, -1, sizeof(::livekit::proto::PublishTranscriptionCallback)},
  { 212, 222, -1, sizeof(::livekit::proto::PublishSipDtmfRequest)},
  { 226, 233, -1, sizeof(::livekit::proto::PublishSipDtmfResponse)},
  { 234, 242, -1, sizeof(::livekit::proto::PublishSipDtmfCallback)},
  { 244, 252, -1, sizeof(::livekit::proto::SetLocalMetadataRequest)},
  { 254, 261, -1, sizeof(::livekit::proto::SetLocalMetadataResponse)},
  { 262, 270, -1, sizeof(::livekit::proto::SetLocalMetadataCallback)},
  { 272, 282, -1, sizeof(::livekit::proto::SendChatMessageRequest)},
  { 286, 297, -1, sizeof(::livekit::proto::EditChatMessageRequest)},
  { 302, 309, -1, sizeof(::livekit::proto::SendChatMessageResponse)},
  { 310, 320, -1, sizeof(::livekit::proto::SendChatMessageCallback)},
  { 323, 331, -1, sizeof(::livekit::proto::SetLocalAttributesRequest)},
  { 333, 341, -1, sizeof(::livekit::proto::AttributesEntry)},
  { 343, 350, -1, sizeof(::livekit::proto::SetLocalAttributesResponse)},
  { 351, 359, -1, sizeof(::livekit::proto::SetLocalAttributesCallback)},
  { 361, 369, -1, sizeof(::livekit::proto::SetLocalNameRequest)},
  { 371, 378, -1, sizeof(::livekit::proto::SetLocalNameResponse)},
  { 379, 387, -1, sizeof(::livekit::proto::SetLocalNameCallback)},
  { 389, 397, -1, sizeof(::livekit::proto::SetSubscribedRequest)},
  { 399, -1, -1, sizeof(::livekit::proto::SetSubscribedResponse)},
  { 405, 412, -1, sizeof(::livekit::proto::GetSessionStatsRequest)},
  { 413, 420, -1, sizeof(::livekit::proto::GetSessionStatsResponse)},
  { 421, -1, -1, sizeof(::livekit::proto::GetSessionStatsCallback_Result)},
  { 429, 439, -1, sizeof(::livekit::proto::GetSessionStatsCallback)},
  { 442, 450, -1, sizeof(::livekit::proto::VideoEncoding)},
  { 452, 459, -1, sizeof(::livekit::proto::AudioEncoding)},
  { 460, 474, -1, sizeof(::livekit::proto::TrackPublishOptions)},
  { 482, 491, -1, sizeof(::livekit::proto::IceServer)},
  { 494, 503, -1, sizeof(::livekit::proto::RtcConfig)},
  { 506, 518, -1, sizeof(::livekit::proto::RoomOptions)},
  { 524, 536, -1, sizeof(::livekit::proto::TranscriptionSegment)},
  { 542, 550, -1, sizeof(::livekit::proto::BufferInfo)},
  { 552, 560, -1, sizeof(::livekit::proto::OwnedBuffer)},
  { 562, 602, -1, sizeof(::livekit::proto::RoomEvent)},
  { 635, 646, -1, sizeof(::livekit::proto::RoomInfo)},
  { 651, 659, -1, sizeof(::livekit::proto::OwnedRoom)},
  { 661, 668, -1, sizeof(::livekit::proto::ParticipantConnected)},
  { 669, 677, -1, sizeof(::livekit::proto::ParticipantDisconnected)},
  { 679, 686, -1, sizeof(::livekit::proto::LocalTrackPublished)},
  { 687, 694, -1, sizeof(::livekit::proto::LocalTrackUnpublished)},
  { 695, 702, -1, sizeof(::livekit::proto::LocalTrackSubscribed)},
  { 703, 711, -1, sizeof(::livekit::proto::TrackPublished)},
  { 713, 721, -1, sizeof(::livekit::proto::TrackUnpublished)},
  { 723, 731, -1, sizeof(::livekit::proto::TrackSubscribed)},
  { 733, 741, -1, sizeof(::livekit::proto::TrackUnsubscribed)},
  { 743, 752, -1, sizeof(::livekit::proto::TrackSubscriptionFailed)},
  { 755, 763, -1, sizeof(::livekit::proto::TrackMuted)},
  { 765, 773, -1, sizeof(::livekit::proto::TrackUnmuted)},
  { 775, 783, -1, sizeof(::livekit::proto::E2eeStateChanged)},
  { 785, -1, -1, sizeof(::livekit::proto::ActiveSpeakersChanged)},
  { 792, 799, -1, sizeof(::livekit::proto::RoomMetadataChanged)},
  { 800, 807, -1, sizeof(::livekit::proto::RoomSidChanged)},
  { 808, 816, -1, sizeof(::livekit::proto::ParticipantMetadataChanged)},
  { 818, 827, -1, sizeof(::livekit::proto::ParticipantAttributesChanged)},
  { 830, 838, -1, sizeof(::livekit::proto::ParticipantNameChanged)},
  { 840, 848, -1, sizeof(::livekit::proto::ConnectionQualityChanged)},
  { 850, 858, -1, sizeof(::livekit::proto::UserPacket)},
  { 860, 872, -1, sizeof(::livekit::proto::ChatMessage)},
  { 878, 886, -1, sizeof(::livekit::proto::ChatMessageReceived)},
  { 888, 896, -1, sizeof(::livekit::proto::SipDTMF)},
  { 898, 909, -1, sizeof(::livekit::proto::DataPacketReceived)},
  { 913, 922, -1, sizeof(::livekit::proto::TranscriptionReceived)},
  { 925, 932, -1, sizeof(::livekit::proto::ConnectionStateChanged)},
  { 933, -1, -1, sizeof(::livekit::proto::Connected)},
  { 939, 946, -1, sizeof(::livekit::proto::Disconnected)},
  { 947, -1, -1, sizeof(::livekit::proto::Reconnecting)},
  { 953, -1, -1, sizeof(::livekit::proto::Reconnected)},
  { 959, -1, -1, sizeof(::livekit::proto::RoomEOS)},
  { 965, 976, -1, sizeof(::livekit::proto::DataStream_TextHeader)},
  { 981, 988, -1, sizeof(::livekit::proto::DataStream_ByteHeader)},
  { 989, 997, -1, sizeof(::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse)},
  { 999, 1014, -1, sizeof(::livekit::proto::DataStream_Header)},
  { 1022, 1033, -1, sizeof(::livekit::proto::DataStream_Chunk)},
  { 1038, 1046, -1, sizeof(::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse)},
  { 1048, 1057, -1, sizeof(::livekit::proto::DataStream_Trailer)},
  { 1060, -1, -1, sizeof(::livekit::proto::DataStream)},
  { 1066, 1074, -1, sizeof(::livekit::proto::DataStreamHeaderReceived)},
  { 1076, 1084, -1, sizeof(::livekit::proto::DataStreamChunkReceived)},
  { 1086, 1094, -1, sizeof(::livekit::proto::DataStreamTrailerReceived)},
  { 1096, 1106, -1, sizeof(::livekit::proto::SendStreamHeaderRequest)},
  { 1110, 1120, -1, sizeof(::livekit::proto::SendStreamChunkRequest)},
  { 1124, 1134, -1, sizeof(::livekit::proto::SendStreamTrailerRequest)},
  { 1138, 1145, -1, sizeof(::livekit::proto::SendStreamHeaderResponse)},
  { 1146, 1153, -1, sizeof(::livekit::proto::SendStreamChunkResponse)},
  { 1154, 1161, -1, sizeof(::livekit::proto::SendStreamTrailerResponse)},
  { 1162, 1170, -1, sizeof(::livekit::proto::SendStreamHeaderCallback)},
  { 1172, 1180, -1, sizeof(::livekit::proto::SendStreamChunkCallback)},
  { 1182, 1190, -1, sizeof(::livekit::proto::SendStreamTrailerCallback)},
  { 1192, 1201, -1, sizeof(::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest)},
  { 1204, -1, -1, sizeof(::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse)},
  { 1210, 1218, -1, sizeof(::livekit::proto::DataChannelBufferedAmountLowThresholdChanged)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::proto::_ConnectRequest_default_instance_._instance,
  &::livekit::proto::_ConnectResponse_default_instance_._instance,
  &::livekit::proto::_ConnectCallback_ParticipantWithTracks_default_instance_._instance,
  &::livekit::proto::_ConnectCallback_Result_default_instance_._instance,
  &::livekit::proto::_ConnectCallback_default_instance_._instance,
  &::livekit::proto::_DisconnectRequest_default_instance_._instance,
  &::livekit::proto::_DisconnectResponse_default_instance_._instance,
  &::livekit::proto::_DisconnectCallback_default_instance_._instance,
  &::livekit::proto::_PublishTrackRequest_default_instance_._instance,
  &::livekit::proto::_PublishTrackResponse_default_instance_._instance,
  &::livekit::proto::_PublishTrackCallback_default_instance_._instance,
  &::livekit::proto::_UnpublishTrackRequest_default_instance_._instance,
  &::livekit::proto::_UnpublishTrackResponse_default_instance_._instance,
  &::livekit::proto::_UnpublishTrackCallback_default_instance_._instance,
  &::livekit::proto::_PublishDataRequest_default_instance_._instance,
  &::livekit::proto::_PublishDataResponse_default_instance_._instance,
  &::livekit::proto::_PublishDataCallback_default_instance_._instance,
  &::livekit::proto::_PublishTranscriptionRequest_default_instance_._instance,
  &::livekit::proto::_PublishTranscriptionResponse_default_instance_._instance,
  &::livekit::proto::_PublishTranscriptionCallback_default_instance_._instance,
  &::livekit::proto::_PublishSipDtmfRequest_default_instance_._instance,
  &::livekit::proto::_PublishSipDtmfResponse_default_instance_._instance,
  &::livekit::proto::_PublishSipDtmfCallback_default_instance_._instance,
  &::livekit::proto::_SetLocalMetadataRequest_default_instance_._instance,
  &::livekit::proto::_SetLocalMetadataResponse_default_instance_._instance,
  &::livekit::proto::_SetLocalMetadataCallback_default_instance_._instance,
  &::livekit::proto::_SendChatMessageRequest_default_instance_._instance,
  &::livekit::proto::_EditChatMessageRequest_default_instance_._instance,
  &::livekit::proto::_SendChatMessageResponse_default_instance_._instance,
  &::livekit::proto::_SendChatMessageCallback_default_instance_._instance,
  &::livekit::proto::_SetLocalAttributesRequest_default_instance_._instance,
  &::livekit::proto::_AttributesEntry_default_instance_._instance,
  &::livekit::proto::_SetLocalAttributesResponse_default_instance_._instance,
  &::livekit::proto::_SetLocalAttributesCallback_default_instance_._instance,
  &::livekit::proto::_SetLocalNameRequest_default_instance_._instance,
  &::livekit::proto::_SetLocalNameResponse_default_instance_._instance,
  &::livekit::proto::_SetLocalNameCallback_default_instance_._instance,
  &::livekit::proto::_SetSubscribedRequest_default_instance_._instance,
  &::livekit::proto::_SetSubscribedResponse_default_instance_._instance,
  &::livekit::proto::_GetSessionStatsRequest_default_instance_._instance,
  &::livekit::proto::_GetSessionStatsResponse_default_instance_._instance,
  &::livekit::proto::_GetSessionStatsCallback_Result_default_instance_._instance,
  &::livekit::proto::_GetSessionStatsCallback_default_instance_._instance,
  &::livekit::proto::_VideoEncoding_default_instance_._instance,
  &::livekit::proto::_AudioEncoding_default_instance_._instance,
  &::livekit::proto::_TrackPublishOptions_default_instance_._instance,
  &::livekit::proto::_IceServer_default_instance_._instance,
  &::livekit::proto::_RtcConfig_default_instance_._instance,
  &::livekit::proto::_RoomOptions_default_instance_._instance,
  &::livekit::proto::_TranscriptionSegment_default_instance_._instance,
  &::livekit::proto::_BufferInfo_default_instance_._instance,
  &::livekit::proto::_OwnedBuffer_default_instance_._instance,
  &::livekit::proto::_RoomEvent_default_instance_._instance,
  &::livekit::proto::_RoomInfo_default_instance_._instance,
  &::livekit::proto::_OwnedRoom_default_instance_._instance,
  &::livekit::proto::_ParticipantConnected_default_instance_._instance,
  &::livekit::proto::_ParticipantDisconnected_default_instance_._instance,
  &::livekit::proto::_LocalTrackPublished_default_instance_._instance,
  &::livekit::proto::_LocalTrackUnpublished_default_instance_._instance,
  &::livekit::proto::_LocalTrackSubscribed_default_instance_._instance,
  &::livekit::proto::_TrackPublished_default_instance_._instance,
  &::livekit::proto::_TrackUnpublished_default_instance_._instance,
  &::livekit::proto::_TrackSubscribed_default_instance_._instance,
  &::livekit::proto::_TrackUnsubscribed_default_instance_._instance,
  &::livekit::proto::_TrackSubscriptionFailed_default_instance_._instance,
  &::livekit::proto::_TrackMuted_default_instance_._instance,
  &::livekit::proto::_TrackUnmuted_default_instance_._instance,
  &::livekit::proto::_E2eeStateChanged_default_instance_._instance,
  &::livekit::proto::_ActiveSpeakersChanged_default_instance_._instance,
  &::livekit::proto::_RoomMetadataChanged_default_instance_._instance,
  &::livekit::proto::_RoomSidChanged_default_instance_._instance,
  &::livekit::proto::_ParticipantMetadataChanged_default_instance_._instance,
  &::livekit::proto::_ParticipantAttributesChanged_default_instance_._instance,
  &::livekit::proto::_ParticipantNameChanged_default_instance_._instance,
  &::livekit::proto::_ConnectionQualityChanged_default_instance_._instance,
  &::livekit::proto::_UserPacket_default_instance_._instance,
  &::livekit::proto::_ChatMessage_default_instance_._instance,
  &::livekit::proto::_ChatMessageReceived_default_instance_._instance,
  &::livekit::proto::_SipDTMF_default_instance_._instance,
  &::livekit::proto::_DataPacketReceived_default_instance_._instance,
  &::livekit::proto::_TranscriptionReceived_default_instance_._instance,
  &::livekit::proto::_ConnectionStateChanged_default_instance_._instance,
  &::livekit::proto::_Connected_default_instance_._instance,
  &::livekit::proto::_Disconnected_default_instance_._instance,
  &::livekit::proto::_Reconnecting_default_instance_._instance,
  &::livekit::proto::_Reconnected_default_instance_._instance,
  &::livekit::proto::_RoomEOS_default_instance_._instance,
  &::livekit::proto::_DataStream_TextHeader_default_instance_._instance,
  &::livekit::proto::_DataStream_ByteHeader_default_instance_._instance,
  &::livekit::proto::_DataStream_Header_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::proto::_DataStream_Header_default_instance_._instance,
  &::livekit::proto::_DataStream_Chunk_default_instance_._instance,
  &::livekit::proto::_DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::proto::_DataStream_Trailer_default_instance_._instance,
  &::livekit::proto::_DataStream_default_instance_._instance,
  &::livekit::proto::_DataStreamHeaderReceived_default_instance_._instance,
  &::livekit::proto::_DataStreamChunkReceived_default_instance_._instance,
  &::livekit::proto::_DataStreamTrailerReceived_default_instance_._instance,
  &::livekit::proto::_SendStreamHeaderRequest_default_instance_._instance,
  &::livekit::proto::_SendStreamChunkRequest_default_instance_._instance,
  &::livekit::proto::_SendStreamTrailerRequest_default_instance_._instance,
  &::livekit::proto::_SendStreamHeaderResponse_default_instance_._instance,
  &::livekit::proto::_SendStreamChunkResponse_default_instance_._instance,
  &::livekit::proto::_SendStreamTrailerResponse_default_instance_._instance,
  &::livekit::proto::_SendStreamHeaderCallback_default_instance_._instance,
  &::livekit::proto::_SendStreamChunkCallback_default_instance_._instance,
  &::livekit::proto::_SendStreamTrailerCallback_default_instance_._instance,
  &::livekit::proto::_SetDataChannelBufferedAmountLowThresholdRequest_default_instance_._instance,
  &::livekit::proto::_SetDataChannelBufferedAmountLowThresholdResponse_default_instance_._instance,
  &::livekit::proto::_DataChannelBufferedAmountLowThresholdChanged_default_instance_._instance,
};

const char descriptor_table_protodef_room_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nroom.proto\022\rlivekit.proto\032\ne2ee.proto\032"
  "\014handle.proto\032\021participant.proto\032\013track."
  "proto\032\021video_frame.proto\032\013stats.proto\"Y\n"
  "\016ConnectRequest\022\013\n\003url\030\001 \002(\t\022\r\n\005token\030\002 "
  "\002(\t\022+\n\007options\030\003 \002(\0132\032.livekit.proto.Roo"
  "mOptions\"#\n\017ConnectResponse\022\020\n\010async_id\030"
  "\001 \002(\004\"\277\003\n\017ConnectCallback\022\020\n\010async_id\030\001 "
  "\002(\004\022\017\n\005error\030\002 \001(\tH\000\0227\n\006result\030\003 \001(\0132%.l"
  "ivekit.proto.ConnectCallback.ResultH\000\032\211\001"
  "\n\025ParticipantWithTracks\0224\n\013participant\030\001"
  " \002(\0132\037.livekit.proto.OwnedParticipant\022:\n"
  "\014publications\030\002 \003(\0132$.livekit.proto.Owne"
  "dTrackPublication\032\270\001\n\006Result\022&\n\004room\030\001 \002"
  "(\0132\030.livekit.proto.OwnedRoom\022:\n\021local_pa"
  "rticipant\030\002 \002(\0132\037.livekit.proto.OwnedPar"
  "ticipant\022J\n\014participants\030\003 \003(\01324.livekit"
  ".proto.ConnectCallback.ParticipantWithTr"
  "acksB\t\n\007message\"(\n\021DisconnectRequest\022\023\n\013"
  "room_handle\030\001 \002(\004\"&\n\022DisconnectResponse\022"
  "\020\n\010async_id\030\001 \002(\004\"&\n\022DisconnectCallback\022"
  "\020\n\010async_id\030\001 \002(\004\"\202\001\n\023PublishTrackReques"
  "t\022 \n\030local_participant_handle\030\001 \002(\004\022\024\n\014t"
  "rack_handle\030\002 \002(\004\0223\n\007options\030\003 \002(\0132\".liv"
  "ekit.proto.TrackPublishOptions\"(\n\024Publis"
  "hTrackResponse\022\020\n\010async_id\030\001 \002(\004\"\201\001\n\024Pub"
  "lishTrackCallback\022\020\n\010async_id\030\001 \002(\004\022\017\n\005e"
  "rror\030\002 \001(\tH\000\022;\n\013publication\030\003 \001(\0132$.live"
  "kit.proto.OwnedTrackPublicationH\000B\t\n\007mes"
  "sage\"g\n\025UnpublishTrackRequest\022 \n\030local_p"
  "articipant_handle\030\001 \002(\004\022\021\n\ttrack_sid\030\002 \002"
  "(\t\022\031\n\021stop_on_unpublish\030\003 \002(\010\"*\n\026Unpubli"
  "shTrackResponse\022\020\n\010async_id\030\001 \002(\004\"9\n\026Unp"
  "ublishTrackCallback\022\020\n\010async_id\030\001 \002(\004\022\r\n"
  "\005error\030\002 \001(\t\"\271\001\n\022PublishDataRequest\022 \n\030l"
  "ocal_participant_handle\030\001 \002(\004\022\020\n\010data_pt"
  "r\030\002 \002(\004\022\020\n\010data_len\030\003 \002(\004\022\020\n\010reliable\030\004 "
  "\002(\010\022\034\n\020destination_sids\030\005 \003(\tB\002\030\001\022\r\n\005top"
  "ic\030\006 \001(\t\022\036\n\026destination_identities\030\007 \003(\t"
  "\"\'\n\023PublishDataResponse\022\020\n\010async_id\030\001 \002("
  "\004\"6\n\023PublishDataCallback\022\020\n\010async_id\030\001 \002"
  "(\004\022\r\n\005error\030\002 \001(\t\"\246\001\n\033PublishTranscripti"
  "onRequest\022 \n\030local_participant_handle\030\001 "
  "\002(\004\022\034\n\024participant_identity\030\002 \002(\t\022\020\n\010tra"
  "ck_id\030\003 \002(\t\0225\n\010segments\030\004 \003(\0132#.livekit."
  "proto.TranscriptionSegment\"0\n\034PublishTra"
  "nscriptionResponse\022\020\n\010async_id\030\001 \002(\004\"\?\n\034"
  "PublishTranscriptionCallback\022\020\n\010async_id"
  "\030\001 \002(\004\022\r\n\005error\030\002 \001(\t\"v\n\025PublishSipDtmfR"
  "equest\022 \n\030local_participant_handle\030\001 \002(\004"
  "\022\014\n\004code\030\002 \002(\r\022\r\n\005digit\030\003 \002(\t\022\036\n\026destina"
  "tion_identities\030\004 \003(\t\"*\n\026PublishSipDtmfR"
  "esponse\022\020\n\010async_id\030\001 \002(\004\"9\n\026PublishSipD"
  "tmfCallback\022\020\n\010async_id\030\001 \002(\004\022\r\n\005error\030\002"
  " \001(\t\"M\n\027SetLocalMetadataRequest\022 \n\030local"
  "_participant_handle\030\001 \002(\004\022\020\n\010metadata\030\002 "
  "\002(\t\",\n\030SetLocalMetadataResponse\022\020\n\010async"
  "_id\030\001 \002(\004\";\n\030SetLocalMetadataCallback\022\020\n"
  "\010async_id\030\001 \002(\004\022\r\n\005error\030\002 \001(\t\"\204\001\n\026SendC"
  "hatMessageRequest\022 \n\030local_participant_h"
  "andle\030\001 \002(\004\022\017\n\007message\030\002 \002(\t\022\036\n\026destinat"
  "ion_identities\030\003 \003(\t\022\027\n\017sender_identity\030"
  "\004 \001(\t\"\274\001\n\026EditChatMessageRequest\022 \n\030loca"
  "l_participant_handle\030\001 \002(\004\022\021\n\tedit_text\030"
  "\002 \002(\t\0224\n\020original_message\030\003 \002(\0132\032.liveki"
  "t.proto.ChatMessage\022\036\n\026destination_ident"
  "ities\030\004 \003(\t\022\027\n\017sender_identity\030\005 \001(\t\"+\n\027"
  "SendChatMessageResponse\022\020\n\010async_id\030\001 \002("
  "\004\"{\n\027SendChatMessageCallback\022\020\n\010async_id"
  "\030\001 \002(\004\022\017\n\005error\030\002 \001(\tH\000\0222\n\014chat_message\030"
  "\003 \001(\0132\032.livekit.proto.ChatMessageH\000B\t\n\007m"
  "essage\"q\n\031SetLocalAttributesRequest\022 \n\030l"
  "ocal_participant_handle\030\001 \002(\004\0222\n\nattribu"
  "tes\030\002 \003(\0132\036.livekit.proto.AttributesEntr"
  "y\"-\n\017AttributesEntry\022\013\n\003key\030\001 \002(\t\022\r\n\005val"
  "ue\030\002 \002(\t\".\n\032SetLocalAttributesResponse\022\020"
  "\n\010async_id\030\001 \002(\004\"=\n\032SetLocalAttributesCa"
  "llback\022\020\n\010async_id\030\001 \002(\004\022\r\n\005error\030\002 \001(\t\""
  "E\n\023SetLocalNameRequest\022 \n\030local_particip"
  "ant_handle\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\"(\n\024SetLoc"
  "alNameResponse\022\020\n\010async_id\030\001 \002(\004\"7\n\024SetL"
  "ocalNameCallback\022\020\n\010async_id\030\001 \002(\004\022\r\n\005er"
  "ror\030\002 \001(\t\"E\n\024SetSubscribedRequest\022\021\n\tsub"
  "scribe\030\001 \002(\010\022\032\n\022publication_handle\030\002 \002(\004"
  "\"\027\n\025SetSubscribedResponse\"-\n\026GetSessionS"
  "tatsRequest\022\023\n\013room_handle\030\001 \002(\004\"+\n\027GetS"
  "essionStatsResponse\022\020\n\010async_id\030\001 \002(\004\"\367\001"
  "\n\027GetSessionStatsCallback\022\020\n\010async_id\030\001 "
  "\002(\004\022\017\n\005error\030\002 \001(\tH\000\022\?\n\006result\030\003 \001(\0132-.l"
  "ivekit.proto.GetSessionStatsCallback.Res"
  "ultH\000\032m\n\006Result\0220\n\017publisher_stats\030\001 \003(\013"
  "2\027.livekit.proto.RtcStats\0221\n\020subscriber_"
  "stats\030\002 \003(\0132\027.livekit.proto.RtcStatsB\t\n\007"
  "message\";\n\rVideoEncoding\022\023\n\013max_bitrate\030"
  "\001 \002(\004\022\025\n\rmax_framerate\030\002 \002(\001\"$\n\rAudioEnc"
  "oding\022\023\n\013max_bitrate\030\001 \002(\004\"\232\002\n\023TrackPubl"
  "ishOptions\0224\n\016video_encoding\030\001 \001(\0132\034.liv"
  "ekit.proto.VideoEncoding\0224\n\016audio_encodi"
  "ng\030\002 \001(\0132\034.livekit.proto.AudioEncoding\022."
  "\n\013video_codec\030\003 \001(\0162\031.livekit.proto.Vide"
  "oCodec\022\013\n\003dtx\030\004 \001(\010\022\013\n\003red\030\005 \001(\010\022\021\n\tsimu"
  "lcast\030\006 \001(\010\022*\n\006source\030\007 \001(\0162\032.livekit.pr"
  "oto.TrackSource\022\016\n\006stream\030\010 \001(\t\"=\n\tIceSe"
  "rver\022\014\n\004urls\030\001 \003(\t\022\020\n\010username\030\002 \001(\t\022\020\n\010"
  "password\030\003 \001(\t\"\304\001\n\tRtcConfig\022;\n\022ice_tran"
  "sport_type\030\001 \001(\0162\037.livekit.proto.IceTran"
  "sportType\022K\n\032continual_gathering_policy\030"
  "\002 \001(\0162\'.livekit.proto.ContinualGathering"
  "Policy\022-\n\013ice_servers\030\003 \003(\0132\030.livekit.pr"
  "oto.IceServer\"\276\001\n\013RoomOptions\022\026\n\016auto_su"
  "bscribe\030\001 \001(\010\022\027\n\017adaptive_stream\030\002 \001(\010\022\020"
  "\n\010dynacast\030\003 \001(\010\022(\n\004e2ee\030\004 \001(\0132\032.livekit"
  ".proto.E2eeOptions\022,\n\nrtc_config\030\005 \001(\0132\030"
  ".livekit.proto.RtcConfig\022\024\n\014join_retries"
  "\030\006 \001(\r\"w\n\024TranscriptionSegment\022\n\n\002id\030\001 \002"
  "(\t\022\014\n\004text\030\002 \002(\t\022\022\n\nstart_time\030\003 \002(\004\022\020\n\010"
  "end_time\030\004 \002(\004\022\r\n\005final\030\005 \002(\010\022\020\n\010languag"
  "e\030\006 \002(\t\"0\n\nBufferInfo\022\020\n\010data_ptr\030\001 \002(\004\022"
  "\020\n\010data_len\030\002 \002(\004\"e\n\013OwnedBuffer\022-\n\006hand"
  "le\030\001 \002(\0132\035.livekit.proto.FfiOwnedHandle\022"
  "\'\n\004data\030\002 \002(\0132\031.livekit.proto.BufferInfo"
  "\"\251\021\n\tRoomEvent\022\023\n\013room_handle\030\001 \002(\004\022D\n\025p"
  "articipant_connected\030\002 \001(\0132#.livekit.pro"
  "to.ParticipantConnectedH\000\022J\n\030participant"
  "_disconnected\030\003 \001(\0132&.livekit.proto.Part"
  "icipantDisconnectedH\000\022C\n\025local_track_pub"
  "lished\030\004 \001(\0132\".livekit.proto.LocalTrackP"
  "ublishedH\000\022G\n\027local_track_unpublished\030\005 "
  "\001(\0132$.livekit.proto.LocalTrackUnpublishe"
  "dH\000\022E\n\026local_track_subscribed\030\006 \001(\0132#.li"
  "vekit.proto.LocalTrackSubscribedH\000\0228\n\017tr"
  "ack_published\030\007 \001(\0132\035.livekit.proto.Trac"
  "kPublishedH\000\022<\n\021track_unpublished\030\010 \001(\0132"
  "\037.livekit.proto.TrackUnpublishedH\000\022:\n\020tr"
  "ack_subscribed\030\t \001(\0132\036.livekit.proto.Tra"
  "ckSubscribedH\000\022>\n\022track_unsubscribed\030\n \001"
  "(\0132 .livekit.proto.TrackUnsubscribedH\000\022K"
  "\n\031track_subscription_failed\030\013 \001(\0132&.live"
  "kit.proto.TrackSubscriptionFailedH\000\0220\n\013t"
  "rack_muted\030\014 \001(\0132\031.livekit.proto.TrackMu"
  "tedH\000\0224\n\rtrack_unmuted\030\r \001(\0132\033.livekit.p"
  "roto.TrackUnmutedH\000\022G\n\027active_speakers_c"
  "hanged\030\016 \001(\0132$.livekit.proto.ActiveSpeak"
  "ersChangedH\000\022C\n\025room_metadata_changed\030\017 "
  "\001(\0132\".livekit.proto.RoomMetadataChangedH"
  "\000\0229\n\020room_sid_changed\030\020 \001(\0132\035.livekit.pr"
  "oto.RoomSidChangedH\000\022Q\n\034participant_meta"
  "data_changed\030\021 \001(\0132).livekit.proto.Parti"
  "cipantMetadataChangedH\000\022I\n\030participant_n"
  "ame_changed\030\022 \001(\0132%.livekit.proto.Partic"
  "ipantNameChangedH\000\022U\n\036participant_attrib"
  "utes_changed\030\023 \001(\0132+.livekit.proto.Parti"
  "cipantAttributesChangedH\000\022M\n\032connection_"
  "quality_changed\030\024 \001(\0132\'.livekit.proto.Co"
  "nnectionQualityChangedH\000\022I\n\030connection_s"
  "tate_changed\030\025 \001(\0132%.livekit.proto.Conne"
  "ctionStateChangedH\000\0223\n\014disconnected\030\026 \001("
  "\0132\033.livekit.proto.DisconnectedH\000\0223\n\014reco"
  "nnecting\030\027 \001(\0132\033.livekit.proto.Reconnect"
  "ingH\000\0221\n\013reconnected\030\030 \001(\0132\032.livekit.pro"
  "to.ReconnectedH\000\022=\n\022e2ee_state_changed\030\031"
  " \001(\0132\037.livekit.proto.E2eeStateChangedH\000\022"
  "%\n\003eos\030\032 \001(\0132\026.livekit.proto.RoomEOSH\000\022A"
  "\n\024data_packet_received\030\033 \001(\0132!.livekit.p"
  "roto.DataPacketReceivedH\000\022F\n\026transcripti"
  "on_received\030\034 \001(\0132$.livekit.proto.Transc"
  "riptionReceivedH\000\022:\n\014chat_message\030\035 \001(\0132"
  "\".livekit.proto.ChatMessageReceivedH\000\022I\n"
  "\026stream_header_received\030\036 \001(\0132\'.livekit."
  "proto.DataStreamHeaderReceivedH\000\022G\n\025stre"
  "am_chunk_received\030\037 \001(\0132&.livekit.proto."
  "DataStreamChunkReceivedH\000\022K\n\027stream_trai"
  "ler_received\030  \001(\0132(.livekit.proto.DataS"
  "treamTrailerReceivedH\000\022i\n\"data_channel_l"
  "ow_threshold_changed\030! \001(\0132;.livekit.pro"
  "to.DataChannelBufferedAmountLowThreshold"
  "ChangedH\000B\t\n\007message\"\232\001\n\010RoomInfo\022\013\n\003sid"
  "\030\001 \001(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010metadata\030\003 \002(\t\022."
  "\n&lossy_dc_buffered_amount_low_threshold"
  "\030\004 \002(\004\0221\n)reliable_dc_buffered_amount_lo"
  "w_threshold\030\005 \002(\004\"a\n\tOwnedRoom\022-\n\006handle"
  "\030\001 \002(\0132\035.livekit.proto.FfiOwnedHandle\022%\n"
  "\004info\030\002 \002(\0132\027.livekit.proto.RoomInfo\"E\n\024"
  "ParticipantConnected\022-\n\004info\030\001 \002(\0132\037.liv"
  "ekit.proto.OwnedParticipant\"s\n\027Participa"
  "ntDisconnected\022\034\n\024participant_identity\030\001"
  " \002(\t\022:\n\021disconnect_reason\030\002 \002(\0162\037.liveki"
  "t.proto.DisconnectReason\"(\n\023LocalTrackPu"
  "blished\022\021\n\ttrack_sid\030\001 \002(\t\"0\n\025LocalTrack"
  "Unpublished\022\027\n\017publication_sid\030\001 \002(\t\")\n\024"
  "LocalTrackSubscribed\022\021\n\ttrack_sid\030\002 \002(\t\""
  "i\n\016TrackPublished\022\034\n\024participant_identit"
  "y\030\001 \002(\t\0229\n\013publication\030\002 \002(\0132$.livekit.p"
  "roto.OwnedTrackPublication\"I\n\020TrackUnpub"
  "lished\022\034\n\024participant_identity\030\001 \002(\t\022\027\n\017"
  "publication_sid\030\002 \002(\t\"Y\n\017TrackSubscribed"
  "\022\034\n\024participant_identity\030\001 \002(\t\022(\n\005track\030"
  "\002 \002(\0132\031.livekit.proto.OwnedTrack\"D\n\021Trac"
  "kUnsubscribed\022\034\n\024participant_identity\030\001 "
  "\002(\t\022\021\n\ttrack_sid\030\002 \002(\t\"Y\n\027TrackSubscript"
  "ionFailed\022\034\n\024participant_identity\030\001 \002(\t\022"
  "\021\n\ttrack_sid\030\002 \002(\t\022\r\n\005error\030\003 \002(\t\"=\n\nTra"
  "ckMuted\022\034\n\024participant_identity\030\001 \002(\t\022\021\n"
  "\ttrack_sid\030\002 \002(\t\"\?\n\014TrackUnmuted\022\034\n\024part"
  "icipant_identity\030\001 \002(\t\022\021\n\ttrack_sid\030\002 \002("
  "\t\"_\n\020E2eeStateChanged\022\034\n\024participant_ide"
  "ntity\030\001 \002(\t\022-\n\005state\030\002 \002(\0162\036.livekit.pro"
  "to.EncryptionState\"7\n\025ActiveSpeakersChan"
  "ged\022\036\n\026participant_identities\030\001 \003(\t\"\'\n\023R"
  "oomMetadataChanged\022\020\n\010metadata\030\001 \002(\t\"\035\n\016"
  "RoomSidChanged\022\013\n\003sid\030\001 \002(\t\"L\n\032Participa"
  "ntMetadataChanged\022\034\n\024participant_identit"
  "y\030\001 \002(\t\022\020\n\010metadata\030\002 \002(\t\"\254\001\n\034Participan"
  "tAttributesChanged\022\034\n\024participant_identi"
  "ty\030\001 \002(\t\0222\n\nattributes\030\002 \003(\0132\036.livekit.p"
  "roto.AttributesEntry\022:\n\022changed_attribut"
  "es\030\003 \003(\0132\036.livekit.proto.AttributesEntry"
  "\"D\n\026ParticipantNameChanged\022\034\n\024participan"
  "t_identity\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\"k\n\030Connec"
  "tionQualityChanged\022\034\n\024participant_identi"
  "ty\030\001 \002(\t\0221\n\007quality\030\002 \002(\0162 .livekit.prot"
  "o.ConnectionQuality\"E\n\nUserPacket\022(\n\004dat"
  "a\030\001 \002(\0132\032.livekit.proto.OwnedBuffer\022\r\n\005t"
  "opic\030\002 \001(\t\"y\n\013ChatMessage\022\n\n\002id\030\001 \002(\t\022\021\n"
  "\ttimestamp\030\002 \002(\003\022\017\n\007message\030\003 \002(\t\022\026\n\016edi"
  "t_timestamp\030\004 \001(\003\022\017\n\007deleted\030\005 \001(\010\022\021\n\tge"
  "nerated\030\006 \001(\010\"`\n\023ChatMessageReceived\022+\n\007"
  "message\030\001 \002(\0132\032.livekit.proto.ChatMessag"
  "e\022\034\n\024participant_identity\030\002 \002(\t\"&\n\007SipDT"
  "MF\022\014\n\004code\030\001 \002(\r\022\r\n\005digit\030\002 \001(\t\"\277\001\n\022Data"
  "PacketReceived\022+\n\004kind\030\001 \002(\0162\035.livekit.p"
  "roto.DataPacketKind\022\034\n\024participant_ident"
  "ity\030\002 \002(\t\022)\n\004user\030\004 \001(\0132\031.livekit.proto."
  "UserPacketH\000\022*\n\010sip_dtmf\030\005 \001(\0132\026.livekit"
  ".proto.SipDTMFH\000B\007\n\005value\"\177\n\025Transcripti"
  "onReceived\022\034\n\024participant_identity\030\001 \001(\t"
  "\022\021\n\ttrack_sid\030\002 \001(\t\0225\n\010segments\030\003 \003(\0132#."
  "livekit.proto.TranscriptionSegment\"G\n\026Co"
  "nnectionStateChanged\022-\n\005state\030\001 \002(\0162\036.li"
  "vekit.proto.ConnectionState\"\013\n\tConnected"
  "\"\?\n\014Disconnected\022/\n\006reason\030\001 \002(\0162\037.livek"
  "it.proto.DisconnectReason\"\016\n\014Reconnectin"
  "g\"\r\n\013Reconnected\"\t\n\007RoomEOS\"\216\007\n\nDataStre"
  "am\032\252\001\n\nTextHeader\022\?\n\016operation_type\030\001 \002("
  "\0162\'.livekit.proto.DataStream.OperationTy"
  "pe\022\017\n\007version\030\002 \001(\005\022\032\n\022reply_to_stream_i"
  "d\030\003 \001(\t\022\033\n\023attached_stream_ids\030\004 \003(\t\022\021\n\t"
  "generated\030\005 \001(\010\032\032\n\nByteHeader\022\014\n\004name\030\001 "
  "\002(\t\032\353\002\n\006Header\022\021\n\tstream_id\030\001 \002(\t\022\021\n\ttim"
  "estamp\030\002 \002(\003\022\021\n\tmime_type\030\003 \002(\t\022\r\n\005topic"
  "\030\004 \002(\t\022\024\n\014total_length\030\005 \001(\004\022D\n\nattribut"
  "es\030\006 \003(\01320.livekit.proto.DataStream.Head"
  "er.AttributesEntry\022;\n\013text_header\030\007 \001(\0132"
  "$.livekit.proto.DataStream.TextHeaderH\000\022"
  ";\n\013byte_header\030\010 \001(\0132$.livekit.proto.Dat"
  "aStream.ByteHeaderH\000\0321\n\017AttributesEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\020\n\016conte"
  "nt_header\032]\n\005Chunk\022\021\n\tstream_id\030\001 \002(\t\022\023\n"
  "\013chunk_index\030\002 \002(\004\022\017\n\007content\030\003 \002(\014\022\017\n\007v"
  "ersion\030\004 \001(\005\022\n\n\002iv\030\005 \001(\014\032\246\001\n\007Trailer\022\021\n\t"
  "stream_id\030\001 \002(\t\022\016\n\006reason\030\002 \002(\t\022E\n\nattri"
  "butes\030\003 \003(\01321.livekit.proto.DataStream.T"
  "railer.AttributesEntry\0321\n\017AttributesEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"A\n\rOpe"
  "rationType\022\n\n\006CREATE\020\000\022\n\n\006UPDATE\020\001\022\n\n\006DE"
  "LETE\020\002\022\014\n\010REACTION\020\003\"j\n\030DataStreamHeader"
  "Received\022\034\n\024participant_identity\030\001 \002(\t\0220"
  "\n\006header\030\002 \002(\0132 .livekit.proto.DataStrea"
  "m.Header\"g\n\027DataStreamChunkReceived\022\034\n\024p"
  "articipant_identity\030\001 \002(\t\022.\n\005chunk\030\002 \002(\013"
  "2\037.livekit.proto.DataStream.Chunk\"m\n\031Dat"
  "aStreamTrailerReceived\022\034\n\024participant_id"
  "entity\030\001 \002(\t\0222\n\007trailer\030\002 \002(\0132!.livekit."
  "proto.DataStream.Trailer\"\246\001\n\027SendStreamH"
  "eaderRequest\022 \n\030local_participant_handle"
  "\030\001 \002(\004\0220\n\006header\030\002 \002(\0132 .livekit.proto.D"
  "ataStream.Header\022\036\n\026destination_identiti"
  "es\030\003 \003(\t\022\027\n\017sender_identity\030\004 \002(\t\"\243\001\n\026Se"
  "ndStreamChunkRequest\022 \n\030local_participan"
  "t_handle\030\001 \002(\004\022.\n\005chunk\030\002 \002(\0132\037.livekit."
  "proto.DataStream.Chunk\022\036\n\026destination_id"
  "entities\030\003 \003(\t\022\027\n\017sender_identity\030\004 \002(\t\""
  "\251\001\n\030SendStreamTrailerRequest\022 \n\030local_pa"
  "rticipant_handle\030\001 \002(\004\0222\n\007trailer\030\002 \002(\0132"
  "!.livekit.proto.DataStream.Trailer\022\036\n\026de"
  "stination_identities\030\003 \003(\t\022\027\n\017sender_ide"
  "ntity\030\004 \002(\t\",\n\030SendStreamHeaderResponse\022"
  "\020\n\010async_id\030\001 \002(\004\"+\n\027SendStreamChunkResp"
  "onse\022\020\n\010async_id\030\001 \002(\004\"-\n\031SendStreamTrai"
  "lerResponse\022\020\n\010async_id\030\001 \002(\004\";\n\030SendStr"
  "eamHeaderCallback\022\020\n\010async_id\030\001 \002(\004\022\r\n\005e"
  "rror\030\002 \001(\t\":\n\027SendStreamChunkCallback\022\020\n"
  "\010async_id\030\001 \002(\004\022\r\n\005error\030\002 \001(\t\"<\n\031SendSt"
  "reamTrailerCallback\022\020\n\010async_id\030\001 \002(\004\022\r\n"
  "\005error\030\002 \001(\t\"\223\001\n/SetDataChannelBufferedA"
  "mountLowThresholdRequest\022 \n\030local_partic"
  "ipant_handle\030\001 \002(\004\022\021\n\tthreshold\030\002 \002(\004\022+\n"
  "\004kind\030\003 \002(\0162\035.livekit.proto.DataPacketKi"
  "nd\"2\n0SetDataChannelBufferedAmountLowThr"
  "esholdResponse\"n\n,DataChannelBufferedAmo"
  "untLowThresholdChanged\022+\n\004kind\030\001 \002(\0162\035.l"
  "ivekit.proto.DataPacketKind\022\021\n\tthreshold"
  "\030\002 \002(\004*P\n\020IceTransportType\022\023\n\017TRANSPORT_"
  "RELAY\020\000\022\024\n\020TRANSPORT_NOHOST\020\001\022\021\n\rTRANSPO"
  "RT_ALL\020\002*C\n\030ContinualGatheringPolicy\022\017\n\013"
  "GATHER_ONCE\020\000\022\026\n\022GATHER_CONTINUALLY\020\001*`\n"
  "\021ConnectionQuality\022\020\n\014QUALITY_POOR\020\000\022\020\n\014"
  "QUALITY_GOOD\020\001\022\025\n\021QUALITY_EXCELLENT\020\002\022\020\n"
  "\014QUALITY_LOST\020\003*S\n\017ConnectionState\022\025\n\021CO"
  "NN_DISCONNECTED\020\000\022\022\n\016CONN_CONNECTED\020\001\022\025\n"
  "\021CONN_RECONNECTING\020\002*3\n\016DataPacketKind\022\016"
  "\n\nKIND_LOSSY\020\000\022\021\n\rKIND_RELIABLE\020\001B\020\252\002\rLi"
  "veKit.Proto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_room_2eproto_deps[6] = {
  &::descriptor_table_e2ee_2eproto,
  &::descriptor_table_handle_2eproto,
  &::descriptor_table_participant_2eproto,
  &::descriptor_table_stats_2eproto,
  &::descriptor_table_track_2eproto,
  &::descriptor_table_video_5fframe_2eproto,
};
static ::_pbi::once_flag descriptor_table_room_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_room_2eproto = {
    false, false, 12451, descriptor_table_protodef_room_2eproto,
    "room.proto",
    &descriptor_table_room_2eproto_once, descriptor_table_room_2eproto_deps, 6, 110,
    schemas, file_default_instances, TableStruct_room_2eproto::offsets,
    file_level_metadata_room_2eproto, file_level_enum_descriptors_room_2eproto,
    file_level_service_descriptors_room_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_room_2eproto_getter() {
  return &descriptor_table_room_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_room_2eproto(&descriptor_table_room_2eproto);
namespace livekit {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataStream_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_room_2eproto);
  return file_level_enum_descriptors_room_2eproto[0];
}
bool DataStream_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataStream_OperationType DataStream::CREATE;
constexpr DataStream_OperationType DataStream::UPDATE;
constexpr DataStream_OperationType DataStream::DELETE;
constexpr DataStream_OperationType DataStream::REACTION;
constexpr DataStream_OperationType DataStream::OperationType_MIN;
constexpr DataStream_OperationType DataStream::OperationType_MAX;
constexpr int DataStream::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IceTransportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_room_2eproto);
  return file_level_enum_descriptors_room_2eproto[1];
}
bool IceTransportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinualGatheringPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_room_2eproto);
  return file_level_enum_descriptors_room_2eproto[2];
}
bool ContinualGatheringPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_room_2eproto);
  return file_level_enum_descriptors_room_2eproto[3];
}
bool ConnectionQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_room_2eproto);
  return file_level_enum_descriptors_room_2eproto[4];
}
bool ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPacketKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_room_2eproto);
  return file_level_enum_descriptors_room_2eproto[5];
}
bool DataPacketKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectRequest>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::RoomOptions& options(const ConnectRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::livekit::proto::RoomOptions&
ConnectRequest::_Internal::options(const ConnectRequest* msg) {
  return *msg->_impl_.options_;
}
ConnectRequest::ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.options_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::livekit::proto::RoomOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectRequest)
}

inline void ConnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.options_){nullptr}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
}

void ConnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ConnectRequest.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ConnectRequest.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RoomOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ConnectRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // required string token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ConnectRequest.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // required .livekit.proto.RoomOptions options = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectRequest)
  return target;
}

size_t ConnectRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ConnectRequest)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_token()) {
    // required string token = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_options()) {
    // required .livekit.proto.RoomOptions options = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  return total_size;
}
size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required string token = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .livekit.proto.RoomOptions options = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectRequest::GetClassData() const { return &_class_data_; }


void ConnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectRequest*>(&to_msg);
  auto& from = static_cast<const ConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_options()->::livekit::proto::RoomOptions::MergeFrom(
          from._internal_options());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_options()) {
    if (!_impl_.options_->IsInitialized()) return false;
  }
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.options_, other->_impl_.options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[0]);
}

// ===================================================================

class ConnectResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ConnectResponse::ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectResponse)
}

inline void ConnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectResponse::GetClassData() const { return &_class_data_; }


void ConnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectResponse*>(&to_msg);
  auto& from = static_cast<const ConnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[1]);
}

// ===================================================================

class ConnectCallback_ParticipantWithTracks::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectCallback_ParticipantWithTracks>()._impl_._has_bits_);
  static const ::livekit::proto::OwnedParticipant& participant(const ConnectCallback_ParticipantWithTracks* msg);
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::OwnedParticipant&
ConnectCallback_ParticipantWithTracks::_Internal::participant(const ConnectCallback_ParticipantWithTracks* msg) {
  return *msg->_impl_.participant_;
}
void ConnectCallback_ParticipantWithTracks::clear_participant() {
  if (_impl_.participant_ != nullptr) _impl_.participant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ConnectCallback_ParticipantWithTracks::clear_publications() {
  _impl_.publications_.Clear();
}
ConnectCallback_ParticipantWithTracks::ConnectCallback_ParticipantWithTracks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectCallback.ParticipantWithTracks)
}
ConnectCallback_ParticipantWithTracks::ConnectCallback_ParticipantWithTracks(const ConnectCallback_ParticipantWithTracks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectCallback_ParticipantWithTracks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publications_){from._impl_.publications_}
    , decltype(_impl_.participant_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_participant()) {
    _this->_impl_.participant_ = new ::livekit::proto::OwnedParticipant(*from._impl_.participant_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectCallback.ParticipantWithTracks)
}

inline void ConnectCallback_ParticipantWithTracks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publications_){arena}
    , decltype(_impl_.participant_){nullptr}
  };
}

ConnectCallback_ParticipantWithTracks::~ConnectCallback_ParticipantWithTracks() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectCallback.ParticipantWithTracks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectCallback_ParticipantWithTracks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publications_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.participant_;
}

void ConnectCallback_ParticipantWithTracks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectCallback_ParticipantWithTracks::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectCallback.ParticipantWithTracks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publications_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.participant_ != nullptr);
    _impl_.participant_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectCallback_ParticipantWithTracks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.OwnedParticipant participant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.OwnedTrackPublication publications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectCallback_ParticipantWithTracks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectCallback.ParticipantWithTracks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.OwnedParticipant participant = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.proto.OwnedTrackPublication publications = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publications_size()); i < n; i++) {
    const auto& repfield = this->_internal_publications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectCallback.ParticipantWithTracks)
  return target;
}

size_t ConnectCallback_ParticipantWithTracks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectCallback.ParticipantWithTracks)
  size_t total_size = 0;

  // required .livekit.proto.OwnedParticipant participant = 1;
  if (_internal_has_participant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.participant_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.OwnedTrackPublication publications = 2;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->_impl_.publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectCallback_ParticipantWithTracks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectCallback_ParticipantWithTracks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectCallback_ParticipantWithTracks::GetClassData() const { return &_class_data_; }


void ConnectCallback_ParticipantWithTracks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectCallback_ParticipantWithTracks*>(&to_msg);
  auto& from = static_cast<const ConnectCallback_ParticipantWithTracks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectCallback.ParticipantWithTracks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publications_.MergeFrom(from._impl_.publications_);
  if (from._internal_has_participant()) {
    _this->_internal_mutable_participant()->::livekit::proto::OwnedParticipant::MergeFrom(
        from._internal_participant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectCallback_ParticipantWithTracks::CopyFrom(const ConnectCallback_ParticipantWithTracks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectCallback.ParticipantWithTracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectCallback_ParticipantWithTracks::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.publications_))
    return false;
  if (_internal_has_participant()) {
    if (!_impl_.participant_->IsInitialized()) return false;
  }
  return true;
}

void ConnectCallback_ParticipantWithTracks::InternalSwap(ConnectCallback_ParticipantWithTracks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.publications_.InternalSwap(&other->_impl_.publications_);
  swap(_impl_.participant_, other->_impl_.participant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectCallback_ParticipantWithTracks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[2]);
}

// ===================================================================

class ConnectCallback_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectCallback_Result>()._impl_._has_bits_);
  static const ::livekit::proto::OwnedRoom& room(const ConnectCallback_Result* msg);
  static void set_has_room(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::OwnedParticipant& local_participant(const ConnectCallback_Result* msg);
  static void set_has_local_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::OwnedRoom&
ConnectCallback_Result::_Internal::room(const ConnectCallback_Result* msg) {
  return *msg->_impl_.room_;
}
const ::livekit::proto::OwnedParticipant&
ConnectCallback_Result::_Internal::local_participant(const ConnectCallback_Result* msg) {
  return *msg->_impl_.local_participant_;
}
void ConnectCallback_Result::clear_local_participant() {
  if (_impl_.local_participant_ != nullptr) _impl_.local_participant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ConnectCallback_Result::ConnectCallback_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectCallback.Result)
}
ConnectCallback_Result::ConnectCallback_Result(const ConnectCallback_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectCallback_Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participants_){from._impl_.participants_}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.local_participant_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::proto::OwnedRoom(*from._impl_.room_);
  }
  if (from._internal_has_local_participant()) {
    _this->_impl_.local_participant_ = new ::livekit::proto::OwnedParticipant(*from._impl_.local_participant_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectCallback.Result)
}

inline void ConnectCallback_Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participants_){arena}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.local_participant_){nullptr}
  };
}

ConnectCallback_Result::~ConnectCallback_Result() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectCallback.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectCallback_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participants_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.local_participant_;
}

void ConnectCallback_Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectCallback_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectCallback.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participants_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.room_ != nullptr);
      _impl_.room_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.local_participant_ != nullptr);
      _impl_.local_participant_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectCallback_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.OwnedRoom room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.OwnedParticipant local_participant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.ConnectCallback.ParticipantWithTracks participants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectCallback_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectCallback.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.OwnedRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.OwnedParticipant local_participant = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::local_participant(this),
        _Internal::local_participant(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.proto.ConnectCallback.ParticipantWithTracks participants = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_participants_size()); i < n; i++) {
    const auto& repfield = this->_internal_participants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectCallback.Result)
  return target;
}

size_t ConnectCallback_Result::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ConnectCallback.Result)
  size_t total_size = 0;

  if (_internal_has_room()) {
    // required .livekit.proto.OwnedRoom room = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  if (_internal_has_local_participant()) {
    // required .livekit.proto.OwnedParticipant local_participant = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_participant_);
  }

  return total_size;
}
size_t ConnectCallback_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectCallback.Result)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.OwnedRoom room = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);

    // required .livekit.proto.OwnedParticipant local_participant = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_participant_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.ConnectCallback.ParticipantWithTracks participants = 3;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->_impl_.participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectCallback_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectCallback_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectCallback_Result::GetClassData() const { return &_class_data_; }


void ConnectCallback_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectCallback_Result*>(&to_msg);
  auto& from = static_cast<const ConnectCallback_Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectCallback.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participants_.MergeFrom(from._impl_.participants_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_room()->::livekit::proto::OwnedRoom::MergeFrom(
          from._internal_room());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_local_participant()->::livekit::proto::OwnedParticipant::MergeFrom(
          from._internal_local_participant());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectCallback_Result::CopyFrom(const ConnectCallback_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectCallback.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectCallback_Result::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.participants_))
    return false;
  if (_internal_has_room()) {
    if (!_impl_.room_->IsInitialized()) return false;
  }
  if (_internal_has_local_participant()) {
    if (!_impl_.local_participant_->IsInitialized()) return false;
  }
  return true;
}

void ConnectCallback_Result::InternalSwap(ConnectCallback_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.participants_.InternalSwap(&other->_impl_.participants_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectCallback_Result, _impl_.local_participant_)
      + sizeof(ConnectCallback_Result::_impl_.local_participant_)
      - PROTOBUF_FIELD_OFFSET(ConnectCallback_Result, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectCallback_Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[3]);
}

// ===================================================================

class ConnectCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::ConnectCallback_Result& result(const ConnectCallback* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::ConnectCallback_Result&
ConnectCallback::_Internal::result(const ConnectCallback* msg) {
  return *msg->_impl_.message_.result_;
}
void ConnectCallback::set_allocated_result(::livekit::proto::ConnectCallback_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
    _impl_.message_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.ConnectCallback.result)
}
ConnectCallback::ConnectCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectCallback)
}
ConnectCallback::ConnectCallback(const ConnectCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  clear_has_message();
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kResult: {
      _this->_internal_mutable_result()->::livekit::proto::ConnectCallback_Result::MergeFrom(
          from._internal_result());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectCallback)
}

inline void ConnectCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

ConnectCallback::~ConnectCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void ConnectCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectCallback::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.ConnectCallback)
  switch (message_case()) {
    case kError: {
      _impl_.message_.error_.Destroy();
      break;
    }
    case kResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.result_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void ConnectCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  clear_message();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ConnectCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ConnectCallback.Result result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  switch (message_case()) {
    case kError: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.ConnectCallback.error");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_error(), target);
      break;
    }
    case kResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::result(this),
          _Internal::result(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectCallback)
  return target;
}

size_t ConnectCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    // .livekit.proto.ConnectCallback.Result result = 3;
    case kResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.result_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectCallback::GetClassData() const { return &_class_data_; }


void ConnectCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectCallback*>(&to_msg);
  auto& from = static_cast<const ConnectCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kResult: {
      _this->_internal_mutable_result()->::livekit::proto::ConnectCallback_Result::MergeFrom(
          from._internal_result());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectCallback::CopyFrom(const ConnectCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (message_case()) {
    case kError: {
      break;
    }
    case kResult: {
      if (_internal_has_result()) {
        if (!_impl_.message_.result_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void ConnectCallback::InternalSwap(ConnectCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[4]);
}

// ===================================================================

class DisconnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectRequest>()._impl_._has_bits_);
  static void set_has_room_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DisconnectRequest::DisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DisconnectRequest)
}
DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.room_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_handle_ = from._impl_.room_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DisconnectRequest)
}

inline void DisconnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.room_handle_){uint64_t{0u}}
  };
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.DisconnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisconnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DisconnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 room_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_room_handle(&has_bits);
          _impl_.room_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DisconnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 room_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_room_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DisconnectRequest)
  return target;
}

size_t DisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DisconnectRequest)
  size_t total_size = 0;

  // required uint64 room_handle = 1;
  if (_internal_has_room_handle()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_room_handle());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectRequest::GetClassData() const { return &_class_data_; }


void DisconnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectRequest*>(&to_msg);
  auto& from = static_cast<const DisconnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room_handle()) {
    _this->_internal_set_room_handle(from._internal_room_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DisconnectRequest::InternalSwap(DisconnectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.room_handle_, other->_impl_.room_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[5]);
}

// ===================================================================

class DisconnectResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DisconnectResponse::DisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DisconnectResponse)
}
DisconnectResponse::DisconnectResponse(const DisconnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DisconnectResponse)
}

inline void DisconnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

DisconnectResponse::~DisconnectResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.DisconnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisconnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DisconnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DisconnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DisconnectResponse)
  return target;
}

size_t DisconnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DisconnectResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectResponse::GetClassData() const { return &_class_data_; }


void DisconnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectResponse*>(&to_msg);
  auto& from = static_cast<const DisconnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DisconnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectResponse::CopyFrom(const DisconnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DisconnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DisconnectResponse::InternalSwap(DisconnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[6]);
}

// ===================================================================

class DisconnectCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DisconnectCallback::DisconnectCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DisconnectCallback)
}
DisconnectCallback::DisconnectCallback(const DisconnectCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DisconnectCallback)
}

inline void DisconnectCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

DisconnectCallback::~DisconnectCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.DisconnectCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisconnectCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DisconnectCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DisconnectCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DisconnectCallback)
  return target;
}

size_t DisconnectCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DisconnectCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectCallback::GetClassData() const { return &_class_data_; }


void DisconnectCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectCallback*>(&to_msg);
  auto& from = static_cast<const DisconnectCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DisconnectCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectCallback::CopyFrom(const DisconnectCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DisconnectCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DisconnectCallback::InternalSwap(DisconnectCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[7]);
}

// ===================================================================

class PublishTrackRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishTrackRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::TrackPublishOptions& options(const PublishTrackRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::livekit::proto::TrackPublishOptions&
PublishTrackRequest::_Internal::options(const PublishTrackRequest* msg) {
  return *msg->_impl_.options_;
}
PublishTrackRequest::PublishTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishTrackRequest)
}
PublishTrackRequest::PublishTrackRequest(const PublishTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.track_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::livekit::proto::TrackPublishOptions(*from._impl_.options_);
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.track_handle_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.track_handle_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishTrackRequest)
}

inline void PublishTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.track_handle_){uint64_t{0u}}
  };
}

PublishTrackRequest::~PublishTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
}

void PublishTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.options_ != nullptr);
    _impl_.options_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.track_handle_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.track_handle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 track_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_track_handle(&has_bits);
          _impl_.track_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TrackPublishOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required uint64 track_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_track_handle(), target);
  }

  // required .livekit.proto.TrackPublishOptions options = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishTrackRequest)
  return target;
}

size_t PublishTrackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.PublishTrackRequest)
  size_t total_size = 0;

  if (_internal_has_options()) {
    // required .livekit.proto.TrackPublishOptions options = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_track_handle()) {
    // required uint64 track_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());
  }

  return total_size;
}
size_t PublishTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishTrackRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .livekit.proto.TrackPublishOptions options = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required uint64 track_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTrackRequest::GetClassData() const { return &_class_data_; }


void PublishTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishTrackRequest*>(&to_msg);
  auto& from = static_cast<const PublishTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_options()->::livekit::proto::TrackPublishOptions::MergeFrom(
          from._internal_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.track_handle_ = from._impl_.track_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTrackRequest::CopyFrom(const PublishTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTrackRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_options()) {
    if (!_impl_.options_->IsInitialized()) return false;
  }
  return true;
}

void PublishTrackRequest::InternalSwap(PublishTrackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishTrackRequest, _impl_.track_handle_)
      + sizeof(PublishTrackRequest::_impl_.track_handle_)
      - PROTOBUF_FIELD_OFFSET(PublishTrackRequest, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[8]);
}

// ===================================================================

class PublishTrackResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishTrackResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PublishTrackResponse::PublishTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishTrackResponse)
}
PublishTrackResponse::PublishTrackResponse(const PublishTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishTrackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishTrackResponse)
}

inline void PublishTrackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

PublishTrackResponse::~PublishTrackResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishTrackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishTrackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishTrackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTrackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTrackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishTrackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishTrackResponse)
  return target;
}

size_t PublishTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishTrackResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTrackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishTrackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTrackResponse::GetClassData() const { return &_class_data_; }


void PublishTrackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishTrackResponse*>(&to_msg);
  auto& from = static_cast<const PublishTrackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishTrackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTrackResponse::CopyFrom(const PublishTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTrackResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishTrackResponse::InternalSwap(PublishTrackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTrackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[9]);
}

// ===================================================================

class PublishTrackCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishTrackCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::OwnedTrackPublication& publication(const PublishTrackCallback* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::OwnedTrackPublication&
PublishTrackCallback::_Internal::publication(const PublishTrackCallback* msg) {
  return *msg->_impl_.message_.publication_;
}
void PublishTrackCallback::set_allocated_publication(::livekit::proto::OwnedTrackPublication* publication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (publication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publication));
    if (message_arena != submessage_arena) {
      publication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publication, submessage_arena);
    }
    set_has_publication();
    _impl_.message_.publication_ = publication;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.PublishTrackCallback.publication)
}
void PublishTrackCallback::clear_publication() {
  if (_internal_has_publication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.publication_;
    }
    clear_has_message();
  }
}
PublishTrackCallback::PublishTrackCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishTrackCallback)
}
PublishTrackCallback::PublishTrackCallback(const PublishTrackCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishTrackCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  clear_has_message();
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kPublication: {
      _this->_internal_mutable_publication()->::livekit::proto::OwnedTrackPublication::MergeFrom(
          from._internal_publication());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishTrackCallback)
}

inline void PublishTrackCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

PublishTrackCallback::~PublishTrackCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishTrackCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishTrackCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void PublishTrackCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishTrackCallback::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.PublishTrackCallback)
  switch (message_case()) {
    case kError: {
      _impl_.message_.error_.Destroy();
      break;
    }
    case kPublication: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.publication_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void PublishTrackCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishTrackCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  clear_message();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTrackCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishTrackCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.OwnedTrackPublication publication = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_publication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTrackCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishTrackCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  switch (message_case()) {
    case kError: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.PublishTrackCallback.error");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_error(), target);
      break;
    }
    case kPublication: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::publication(this),
          _Internal::publication(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishTrackCallback)
  return target;
}

size_t PublishTrackCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishTrackCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    // .livekit.proto.OwnedTrackPublication publication = 3;
    case kPublication: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.publication_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTrackCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishTrackCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTrackCallback::GetClassData() const { return &_class_data_; }


void PublishTrackCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishTrackCallback*>(&to_msg);
  auto& from = static_cast<const PublishTrackCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishTrackCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kPublication: {
      _this->_internal_mutable_publication()->::livekit::proto::OwnedTrackPublication::MergeFrom(
          from._internal_publication());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTrackCallback::CopyFrom(const PublishTrackCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishTrackCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTrackCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (message_case()) {
    case kError: {
      break;
    }
    case kPublication: {
      if (_internal_has_publication()) {
        if (!_impl_.message_.publication_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void PublishTrackCallback::InternalSwap(PublishTrackCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTrackCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[10]);
}

// ===================================================================

class UnpublishTrackRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishTrackRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_on_unpublish(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UnpublishTrackRequest::UnpublishTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.UnpublishTrackRequest)
}
UnpublishTrackRequest::UnpublishTrackRequest(const UnpublishTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.stop_on_unpublish_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_on_unpublish_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.stop_on_unpublish_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.UnpublishTrackRequest)
}

inline void UnpublishTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.stop_on_unpublish_){false}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnpublishTrackRequest::~UnpublishTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.UnpublishTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void UnpublishTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.UnpublishTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stop_on_unpublish_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.stop_on_unpublish_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.UnpublishTrackRequest.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool stop_on_unpublish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stop_on_unpublish(&has_bits);
          _impl_.stop_on_unpublish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.UnpublishTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string track_sid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.UnpublishTrackRequest.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // required bool stop_on_unpublish = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_stop_on_unpublish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.UnpublishTrackRequest)
  return target;
}

size_t UnpublishTrackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.UnpublishTrackRequest)
  size_t total_size = 0;

  if (_internal_has_track_sid()) {
    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_stop_on_unpublish()) {
    // required bool stop_on_unpublish = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UnpublishTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.UnpublishTrackRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required bool stop_on_unpublish = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishTrackRequest::GetClassData() const { return &_class_data_; }


void UnpublishTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishTrackRequest*>(&to_msg);
  auto& from = static_cast<const UnpublishTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.UnpublishTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stop_on_unpublish_ = from._impl_.stop_on_unpublish_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishTrackRequest::CopyFrom(const UnpublishTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.UnpublishTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishTrackRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnpublishTrackRequest::InternalSwap(UnpublishTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishTrackRequest, _impl_.stop_on_unpublish_)
      + sizeof(UnpublishTrackRequest::_impl_.stop_on_unpublish_)
      - PROTOBUF_FIELD_OFFSET(UnpublishTrackRequest, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[11]);
}

// ===================================================================

class UnpublishTrackResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishTrackResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UnpublishTrackResponse::UnpublishTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.UnpublishTrackResponse)
}
UnpublishTrackResponse::UnpublishTrackResponse(const UnpublishTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishTrackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.UnpublishTrackResponse)
}

inline void UnpublishTrackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

UnpublishTrackResponse::~UnpublishTrackResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.UnpublishTrackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnpublishTrackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.UnpublishTrackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishTrackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishTrackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.UnpublishTrackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.UnpublishTrackResponse)
  return target;
}

size_t UnpublishTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.UnpublishTrackResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishTrackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishTrackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishTrackResponse::GetClassData() const { return &_class_data_; }


void UnpublishTrackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishTrackResponse*>(&to_msg);
  auto& from = static_cast<const UnpublishTrackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.UnpublishTrackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishTrackResponse::CopyFrom(const UnpublishTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.UnpublishTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishTrackResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnpublishTrackResponse::InternalSwap(UnpublishTrackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishTrackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[12]);
}

// ===================================================================

class UnpublishTrackCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishTrackCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

UnpublishTrackCallback::UnpublishTrackCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.UnpublishTrackCallback)
}
UnpublishTrackCallback::UnpublishTrackCallback(const UnpublishTrackCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishTrackCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.UnpublishTrackCallback)
}

inline void UnpublishTrackCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnpublishTrackCallback::~UnpublishTrackCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.UnpublishTrackCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishTrackCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void UnpublishTrackCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishTrackCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.UnpublishTrackCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishTrackCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.UnpublishTrackCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishTrackCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.UnpublishTrackCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.UnpublishTrackCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.UnpublishTrackCallback)
  return target;
}

size_t UnpublishTrackCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.UnpublishTrackCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishTrackCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishTrackCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishTrackCallback::GetClassData() const { return &_class_data_; }


void UnpublishTrackCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishTrackCallback*>(&to_msg);
  auto& from = static_cast<const UnpublishTrackCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.UnpublishTrackCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishTrackCallback::CopyFrom(const UnpublishTrackCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.UnpublishTrackCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishTrackCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnpublishTrackCallback::InternalSwap(UnpublishTrackCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishTrackCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[13]);
}

// ===================================================================

class PublishDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishDataRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_len(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reliable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

PublishDataRequest::PublishDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishDataRequest)
}
PublishDataRequest::PublishDataRequest(const PublishDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_sids_){from._impl_.destination_sids_}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.data_ptr_){}
    , decltype(_impl_.data_len_){}
    , decltype(_impl_.reliable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reliable_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.reliable_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishDataRequest)
}

inline void PublishDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_sids_){arena}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.data_ptr_){uint64_t{0u}}
    , decltype(_impl_.data_len_){uint64_t{0u}}
    , decltype(_impl_.reliable_){false}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishDataRequest::~PublishDataRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_sids_.~RepeatedPtrField();
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.topic_.Destroy();
}

void PublishDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_sids_.Clear();
  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reliable_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.reliable_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 data_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_ptr(&has_bits);
          _impl_.data_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 data_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_len(&has_bits);
          _impl_.data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool reliable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reliable(&has_bits);
          _impl_.reliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_sids = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.PublishDataRequest.destination_sids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string topic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishDataRequest.topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.PublishDataRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required uint64 data_ptr = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data_ptr(), target);
  }

  // required uint64 data_len = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_data_len(), target);
  }

  // required bool reliable = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_reliable(), target);
  }

  // repeated string destination_sids = 5 [deprecated = true];
  for (int i = 0, n = this->_internal_destination_sids_size(); i < n; i++) {
    const auto& s = this->_internal_destination_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishDataRequest.destination_sids");
    target = stream->WriteString(5, s, target);
  }

  // optional string topic = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishDataRequest.topic");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_topic(), target);
  }

  // repeated string destination_identities = 7;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishDataRequest.destination_identities");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishDataRequest)
  return target;
}

size_t PublishDataRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.PublishDataRequest)
  size_t total_size = 0;

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_data_ptr()) {
    // required uint64 data_ptr = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_ptr());
  }

  if (_internal_has_data_len()) {
    // required uint64 data_len = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_len());
  }

  if (_internal_has_reliable()) {
    // required bool reliable = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PublishDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishDataRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required uint64 data_ptr = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_ptr());

    // required uint64 data_len = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_len());

    // required bool reliable = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_sids = 5 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_sids_.size());
  for (int i = 0, n = _impl_.destination_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_sids_.Get(i));
  }

  // repeated string destination_identities = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  // optional string topic = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishDataRequest::GetClassData() const { return &_class_data_; }


void PublishDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishDataRequest*>(&to_msg);
  auto& from = static_cast<const PublishDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_sids_.MergeFrom(from._impl_.destination_sids_);
  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_topic(from._internal_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_ptr_ = from._impl_.data_ptr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_len_ = from._impl_.data_len_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reliable_ = from._impl_.reliable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishDataRequest::CopyFrom(const PublishDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishDataRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishDataRequest::InternalSwap(PublishDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_sids_.InternalSwap(&other->_impl_.destination_sids_);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishDataRequest, _impl_.reliable_)
      + sizeof(PublishDataRequest::_impl_.reliable_)
      - PROTOBUF_FIELD_OFFSET(PublishDataRequest, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[14]);
}

// ===================================================================

class PublishDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishDataResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PublishDataResponse::PublishDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishDataResponse)
}
PublishDataResponse::PublishDataResponse(const PublishDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishDataResponse)
}

inline void PublishDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

PublishDataResponse::~PublishDataResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishDataResponse)
  return target;
}

size_t PublishDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishDataResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishDataResponse::GetClassData() const { return &_class_data_; }


void PublishDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishDataResponse*>(&to_msg);
  auto& from = static_cast<const PublishDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishDataResponse::CopyFrom(const PublishDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishDataResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishDataResponse::InternalSwap(PublishDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[15]);
}

// ===================================================================

class PublishDataCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishDataCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PublishDataCallback::PublishDataCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishDataCallback)
}
PublishDataCallback::PublishDataCallback(const PublishDataCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishDataCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishDataCallback)
}

inline void PublishDataCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishDataCallback::~PublishDataCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishDataCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishDataCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void PublishDataCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishDataCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishDataCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishDataCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishDataCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishDataCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishDataCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishDataCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishDataCallback)
  return target;
}

size_t PublishDataCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishDataCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishDataCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishDataCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishDataCallback::GetClassData() const { return &_class_data_; }


void PublishDataCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishDataCallback*>(&to_msg);
  auto& from = static_cast<const PublishDataCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishDataCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishDataCallback::CopyFrom(const PublishDataCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishDataCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishDataCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishDataCallback::InternalSwap(PublishDataCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishDataCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[16]);
}

// ===================================================================

class PublishTranscriptionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishTranscriptionRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PublishTranscriptionRequest::PublishTranscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishTranscriptionRequest)
}
PublishTranscriptionRequest::PublishTranscriptionRequest(const PublishTranscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishTranscriptionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_id()) {
    _this->_impl_.track_id_.Set(from._internal_track_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishTranscriptionRequest)
}

inline void PublishTranscriptionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.segments_){arena}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishTranscriptionRequest::~PublishTranscriptionRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishTranscriptionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishTranscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
  _impl_.participant_identity_.Destroy();
  _impl_.track_id_.Destroy();
}

void PublishTranscriptionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishTranscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishTranscriptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.track_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTranscriptionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishTranscriptionRequest.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string track_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_track_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishTranscriptionRequest.track_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.TranscriptionSegment segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTranscriptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishTranscriptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string participant_identity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishTranscriptionRequest.participant_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participant_identity(), target);
  }

  // required string track_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishTranscriptionRequest.track_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_track_id(), target);
  }

  // repeated .livekit.proto.TranscriptionSegment segments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishTranscriptionRequest)
  return target;
}

size_t PublishTranscriptionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.PublishTranscriptionRequest)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_track_id()) {
    // required string track_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t PublishTranscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishTranscriptionRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string participant_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string track_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.TranscriptionSegment segments = 4;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTranscriptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishTranscriptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTranscriptionRequest::GetClassData() const { return &_class_data_; }


void PublishTranscriptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishTranscriptionRequest*>(&to_msg);
  auto& from = static_cast<const PublishTranscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishTranscriptionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_track_id(from._internal_track_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTranscriptionRequest::CopyFrom(const PublishTranscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishTranscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTranscriptionRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.segments_))
    return false;
  return true;
}

void PublishTranscriptionRequest::InternalSwap(PublishTranscriptionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_id_, lhs_arena,
      &other->_impl_.track_id_, rhs_arena
  );
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTranscriptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[17]);
}

// ===================================================================

class PublishTranscriptionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishTranscriptionResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PublishTranscriptionResponse::PublishTranscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishTranscriptionResponse)
}
PublishTranscriptionResponse::PublishTranscriptionResponse(const PublishTranscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishTranscriptionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishTranscriptionResponse)
}

inline void PublishTranscriptionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

PublishTranscriptionResponse::~PublishTranscriptionResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishTranscriptionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishTranscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishTranscriptionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishTranscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishTranscriptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTranscriptionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTranscriptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishTranscriptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishTranscriptionResponse)
  return target;
}

size_t PublishTranscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishTranscriptionResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTranscriptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishTranscriptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTranscriptionResponse::GetClassData() const { return &_class_data_; }


void PublishTranscriptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishTranscriptionResponse*>(&to_msg);
  auto& from = static_cast<const PublishTranscriptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishTranscriptionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTranscriptionResponse::CopyFrom(const PublishTranscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishTranscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTranscriptionResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishTranscriptionResponse::InternalSwap(PublishTranscriptionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTranscriptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[18]);
}

// ===================================================================

class PublishTranscriptionCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishTranscriptionCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PublishTranscriptionCallback::PublishTranscriptionCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishTranscriptionCallback)
}
PublishTranscriptionCallback::PublishTranscriptionCallback(const PublishTranscriptionCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishTranscriptionCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishTranscriptionCallback)
}

inline void PublishTranscriptionCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishTranscriptionCallback::~PublishTranscriptionCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishTranscriptionCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishTranscriptionCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void PublishTranscriptionCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishTranscriptionCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishTranscriptionCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishTranscriptionCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishTranscriptionCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishTranscriptionCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishTranscriptionCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishTranscriptionCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishTranscriptionCallback)
  return target;
}

size_t PublishTranscriptionCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishTranscriptionCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishTranscriptionCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishTranscriptionCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishTranscriptionCallback::GetClassData() const { return &_class_data_; }


void PublishTranscriptionCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishTranscriptionCallback*>(&to_msg);
  auto& from = static_cast<const PublishTranscriptionCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishTranscriptionCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishTranscriptionCallback::CopyFrom(const PublishTranscriptionCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishTranscriptionCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTranscriptionCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishTranscriptionCallback::InternalSwap(PublishTranscriptionCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishTranscriptionCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[19]);
}

// ===================================================================

class PublishSipDtmfRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishSipDtmfRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_digit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PublishSipDtmfRequest::PublishSipDtmfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishSipDtmfRequest)
}
PublishSipDtmfRequest::PublishSipDtmfRequest(const PublishSipDtmfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishSipDtmfRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.digit_){}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digit()) {
    _this->_impl_.digit_.Set(from._internal_digit(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishSipDtmfRequest)
}

inline void PublishSipDtmfRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.digit_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.code_){0u}
  };
  _impl_.digit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishSipDtmfRequest::~PublishSipDtmfRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishSipDtmfRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishSipDtmfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.digit_.Destroy();
}

void PublishSipDtmfRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishSipDtmfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishSipDtmfRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.digit_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.code_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSipDtmfRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string digit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_digit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishSipDtmfRequest.digit");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.PublishSipDtmfRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishSipDtmfRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishSipDtmfRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // required string digit = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digit().data(), static_cast<int>(this->_internal_digit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishSipDtmfRequest.digit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_digit(), target);
  }

  // repeated string destination_identities = 4;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishSipDtmfRequest.destination_identities");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishSipDtmfRequest)
  return target;
}

size_t PublishSipDtmfRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.PublishSipDtmfRequest)
  size_t total_size = 0;

  if (_internal_has_digit()) {
    // required string digit = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_digit());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_code()) {
    // required uint32 code = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t PublishSipDtmfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishSipDtmfRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string digit = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_digit());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required uint32 code = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishSipDtmfRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishSipDtmfRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishSipDtmfRequest::GetClassData() const { return &_class_data_; }


void PublishSipDtmfRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishSipDtmfRequest*>(&to_msg);
  auto& from = static_cast<const PublishSipDtmfRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishSipDtmfRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digit(from._internal_digit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishSipDtmfRequest::CopyFrom(const PublishSipDtmfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishSipDtmfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSipDtmfRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishSipDtmfRequest::InternalSwap(PublishSipDtmfRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digit_, lhs_arena,
      &other->_impl_.digit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishSipDtmfRequest, _impl_.code_)
      + sizeof(PublishSipDtmfRequest::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(PublishSipDtmfRequest, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSipDtmfRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[20]);
}

// ===================================================================

class PublishSipDtmfResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishSipDtmfResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PublishSipDtmfResponse::PublishSipDtmfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishSipDtmfResponse)
}
PublishSipDtmfResponse::PublishSipDtmfResponse(const PublishSipDtmfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishSipDtmfResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishSipDtmfResponse)
}

inline void PublishSipDtmfResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

PublishSipDtmfResponse::~PublishSipDtmfResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishSipDtmfResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishSipDtmfResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishSipDtmfResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishSipDtmfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishSipDtmfResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSipDtmfResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishSipDtmfResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishSipDtmfResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishSipDtmfResponse)
  return target;
}

size_t PublishSipDtmfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishSipDtmfResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishSipDtmfResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishSipDtmfResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishSipDtmfResponse::GetClassData() const { return &_class_data_; }


void PublishSipDtmfResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishSipDtmfResponse*>(&to_msg);
  auto& from = static_cast<const PublishSipDtmfResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishSipDtmfResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishSipDtmfResponse::CopyFrom(const PublishSipDtmfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishSipDtmfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSipDtmfResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishSipDtmfResponse::InternalSwap(PublishSipDtmfResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSipDtmfResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[21]);
}

// ===================================================================

class PublishSipDtmfCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishSipDtmfCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PublishSipDtmfCallback::PublishSipDtmfCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PublishSipDtmfCallback)
}
PublishSipDtmfCallback::PublishSipDtmfCallback(const PublishSipDtmfCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishSipDtmfCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PublishSipDtmfCallback)
}

inline void PublishSipDtmfCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishSipDtmfCallback::~PublishSipDtmfCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.PublishSipDtmfCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishSipDtmfCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void PublishSipDtmfCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishSipDtmfCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PublishSipDtmfCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSipDtmfCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PublishSipDtmfCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishSipDtmfCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PublishSipDtmfCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PublishSipDtmfCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PublishSipDtmfCallback)
  return target;
}

size_t PublishSipDtmfCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PublishSipDtmfCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishSipDtmfCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishSipDtmfCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishSipDtmfCallback::GetClassData() const { return &_class_data_; }


void PublishSipDtmfCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishSipDtmfCallback*>(&to_msg);
  auto& from = static_cast<const PublishSipDtmfCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PublishSipDtmfCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishSipDtmfCallback::CopyFrom(const PublishSipDtmfCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PublishSipDtmfCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSipDtmfCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PublishSipDtmfCallback::InternalSwap(PublishSipDtmfCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSipDtmfCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[22]);
}

// ===================================================================

class SetLocalMetadataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalMetadataRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetLocalMetadataRequest::SetLocalMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalMetadataRequest)
}
SetLocalMetadataRequest::SetLocalMetadataRequest(const SetLocalMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalMetadataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalMetadataRequest)
}

inline void SetLocalMetadataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLocalMetadataRequest::~SetLocalMetadataRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalMetadataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalMetadataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
}

void SetLocalMetadataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalMetadataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.metadata_.ClearNonDefaultToEmpty();
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalMetadataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SetLocalMetadataRequest.metadata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalMetadataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalMetadataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SetLocalMetadataRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalMetadataRequest)
  return target;
}

size_t SetLocalMetadataRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SetLocalMetadataRequest)
  size_t total_size = 0;

  if (_internal_has_metadata()) {
    // required string metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t SetLocalMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalMetadataRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalMetadataRequest::GetClassData() const { return &_class_data_; }


void SetLocalMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalMetadataRequest*>(&to_msg);
  auto& from = static_cast<const SetLocalMetadataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalMetadataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalMetadataRequest::CopyFrom(const SetLocalMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalMetadataRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalMetadataRequest::InternalSwap(SetLocalMetadataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalMetadataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[23]);
}

// ===================================================================

class SetLocalMetadataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalMetadataResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetLocalMetadataResponse::SetLocalMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalMetadataResponse)
}
SetLocalMetadataResponse::SetLocalMetadataResponse(const SetLocalMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalMetadataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalMetadataResponse)
}

inline void SetLocalMetadataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SetLocalMetadataResponse::~SetLocalMetadataResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalMetadataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalMetadataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetLocalMetadataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalMetadataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalMetadataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalMetadataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalMetadataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalMetadataResponse)
  return target;
}

size_t SetLocalMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalMetadataResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalMetadataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalMetadataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalMetadataResponse::GetClassData() const { return &_class_data_; }


void SetLocalMetadataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalMetadataResponse*>(&to_msg);
  auto& from = static_cast<const SetLocalMetadataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalMetadataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalMetadataResponse::CopyFrom(const SetLocalMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalMetadataResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalMetadataResponse::InternalSwap(SetLocalMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalMetadataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[24]);
}

// ===================================================================

class SetLocalMetadataCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalMetadataCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SetLocalMetadataCallback::SetLocalMetadataCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalMetadataCallback)
}
SetLocalMetadataCallback::SetLocalMetadataCallback(const SetLocalMetadataCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalMetadataCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalMetadataCallback)
}

inline void SetLocalMetadataCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLocalMetadataCallback::~SetLocalMetadataCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalMetadataCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalMetadataCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SetLocalMetadataCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalMetadataCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalMetadataCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalMetadataCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SetLocalMetadataCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalMetadataCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalMetadataCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SetLocalMetadataCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalMetadataCallback)
  return target;
}

size_t SetLocalMetadataCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalMetadataCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalMetadataCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalMetadataCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalMetadataCallback::GetClassData() const { return &_class_data_; }


void SetLocalMetadataCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalMetadataCallback*>(&to_msg);
  auto& from = static_cast<const SetLocalMetadataCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalMetadataCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalMetadataCallback::CopyFrom(const SetLocalMetadataCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalMetadataCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalMetadataCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalMetadataCallback::InternalSwap(SetLocalMetadataCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalMetadataCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[25]);
}

// ===================================================================

class SendChatMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatMessageRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sender_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

SendChatMessageRequest::SendChatMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendChatMessageRequest)
}
SendChatMessageRequest::SendChatMessageRequest(const SendChatMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendChatMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_identity()) {
    _this->_impl_.sender_identity_.Set(from._internal_sender_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendChatMessageRequest)
}

inline void SendChatMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendChatMessageRequest::~SendChatMessageRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendChatMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.message_.Destroy();
  _impl_.sender_identity_.Destroy();
}

void SendChatMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendChatMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sender_identity_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendChatMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendChatMessageRequest.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.SendChatMessageRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string sender_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendChatMessageRequest.sender_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendChatMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendChatMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendChatMessageRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated string destination_identities = 3;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendChatMessageRequest.destination_identities");
    target = stream->WriteString(3, s, target);
  }

  // optional string sender_identity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_identity().data(), static_cast<int>(this->_internal_sender_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendChatMessageRequest.sender_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendChatMessageRequest)
  return target;
}

size_t SendChatMessageRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SendChatMessageRequest)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t SendChatMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendChatMessageRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  // optional string sender_identity = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendChatMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendChatMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendChatMessageRequest::GetClassData() const { return &_class_data_; }


void SendChatMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendChatMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendChatMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendChatMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sender_identity(from._internal_sender_identity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatMessageRequest::CopyFrom(const SendChatMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendChatMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatMessageRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendChatMessageRequest::InternalSwap(SendChatMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_identity_, lhs_arena,
      &other->_impl_.sender_identity_, rhs_arena
  );
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendChatMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[26]);
}

// ===================================================================

class EditChatMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EditChatMessageRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_edit_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::ChatMessage& original_message(const EditChatMessageRequest* msg);
  static void set_has_original_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::livekit::proto::ChatMessage&
EditChatMessageRequest::_Internal::original_message(const EditChatMessageRequest* msg) {
  return *msg->_impl_.original_message_;
}
EditChatMessageRequest::EditChatMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.EditChatMessageRequest)
}
EditChatMessageRequest::EditChatMessageRequest(const EditChatMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditChatMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.edit_text_){}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.original_message_){nullptr}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.edit_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.edit_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_edit_text()) {
    _this->_impl_.edit_text_.Set(from._internal_edit_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_identity()) {
    _this->_impl_.sender_identity_.Set(from._internal_sender_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_original_message()) {
    _this->_impl_.original_message_ = new ::livekit::proto::ChatMessage(*from._impl_.original_message_);
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.EditChatMessageRequest)
}

inline void EditChatMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.edit_text_){}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.original_message_){nullptr}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.edit_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.edit_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EditChatMessageRequest::~EditChatMessageRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.EditChatMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditChatMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.edit_text_.Destroy();
  _impl_.sender_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.original_message_;
}

void EditChatMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditChatMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.EditChatMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.edit_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sender_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.original_message_ != nullptr);
      _impl_.original_message_->Clear();
    }
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditChatMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string edit_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_edit_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.EditChatMessageRequest.edit_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.ChatMessage original_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.EditChatMessageRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string sender_identity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sender_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.EditChatMessageRequest.sender_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditChatMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.EditChatMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string edit_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_edit_text().data(), static_cast<int>(this->_internal_edit_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.EditChatMessageRequest.edit_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_edit_text(), target);
  }

  // required .livekit.proto.ChatMessage original_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::original_message(this),
        _Internal::original_message(this).GetCachedSize(), target, stream);
  }

  // repeated string destination_identities = 4;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.EditChatMessageRequest.destination_identities");
    target = stream->WriteString(4, s, target);
  }

  // optional string sender_identity = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_identity().data(), static_cast<int>(this->_internal_sender_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.EditChatMessageRequest.sender_identity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sender_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.EditChatMessageRequest)
  return target;
}

size_t EditChatMessageRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.EditChatMessageRequest)
  size_t total_size = 0;

  if (_internal_has_edit_text()) {
    // required string edit_text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_text());
  }

  if (_internal_has_original_message()) {
    // required .livekit.proto.ChatMessage original_message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_message_);
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t EditChatMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.EditChatMessageRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string edit_text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_text());

    // required .livekit.proto.ChatMessage original_message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_message_);

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  // optional string sender_identity = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditChatMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditChatMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditChatMessageRequest::GetClassData() const { return &_class_data_; }


void EditChatMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditChatMessageRequest*>(&to_msg);
  auto& from = static_cast<const EditChatMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.EditChatMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_edit_text(from._internal_edit_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sender_identity(from._internal_sender_identity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_original_message()->::livekit::proto::ChatMessage::MergeFrom(
          from._internal_original_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditChatMessageRequest::CopyFrom(const EditChatMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.EditChatMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditChatMessageRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_original_message()) {
    if (!_impl_.original_message_->IsInitialized()) return false;
  }
  return true;
}

void EditChatMessageRequest::InternalSwap(EditChatMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.edit_text_, lhs_arena,
      &other->_impl_.edit_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_identity_, lhs_arena,
      &other->_impl_.sender_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditChatMessageRequest, _impl_.local_participant_handle_)
      + sizeof(EditChatMessageRequest::_impl_.local_participant_handle_)
      - PROTOBUF_FIELD_OFFSET(EditChatMessageRequest, _impl_.original_message_)>(
          reinterpret_cast<char*>(&_impl_.original_message_),
          reinterpret_cast<char*>(&other->_impl_.original_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EditChatMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[27]);
}

// ===================================================================

class SendChatMessageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatMessageResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SendChatMessageResponse::SendChatMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendChatMessageResponse)
}
SendChatMessageResponse::SendChatMessageResponse(const SendChatMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendChatMessageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendChatMessageResponse)
}

inline void SendChatMessageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SendChatMessageResponse::~SendChatMessageResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendChatMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendChatMessageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendChatMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendChatMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendChatMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendChatMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendChatMessageResponse)
  return target;
}

size_t SendChatMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendChatMessageResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendChatMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendChatMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendChatMessageResponse::GetClassData() const { return &_class_data_; }


void SendChatMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendChatMessageResponse*>(&to_msg);
  auto& from = static_cast<const SendChatMessageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendChatMessageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatMessageResponse::CopyFrom(const SendChatMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendChatMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatMessageResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendChatMessageResponse::InternalSwap(SendChatMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendChatMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[28]);
}

// ===================================================================

class SendChatMessageCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatMessageCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::ChatMessage& chat_message(const SendChatMessageCallback* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::ChatMessage&
SendChatMessageCallback::_Internal::chat_message(const SendChatMessageCallback* msg) {
  return *msg->_impl_.message_.chat_message_;
}
void SendChatMessageCallback::set_allocated_chat_message(::livekit::proto::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    _impl_.message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.SendChatMessageCallback.chat_message)
}
SendChatMessageCallback::SendChatMessageCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendChatMessageCallback)
}
SendChatMessageCallback::SendChatMessageCallback(const SendChatMessageCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendChatMessageCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  clear_has_message();
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::proto::ChatMessage::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendChatMessageCallback)
}

inline void SendChatMessageCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

SendChatMessageCallback::~SendChatMessageCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendChatMessageCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatMessageCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void SendChatMessageCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatMessageCallback::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.SendChatMessageCallback)
  switch (message_case()) {
    case kError: {
      _impl_.message_.error_.Destroy();
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.chat_message_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void SendChatMessageCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendChatMessageCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  clear_message();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendChatMessageCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendChatMessageCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ChatMessage chat_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendChatMessageCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendChatMessageCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  switch (message_case()) {
    case kError: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.SendChatMessageCallback.error");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_error(), target);
      break;
    }
    case kChatMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::chat_message(this),
          _Internal::chat_message(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendChatMessageCallback)
  return target;
}

size_t SendChatMessageCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendChatMessageCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    // .livekit.proto.ChatMessage chat_message = 3;
    case kChatMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.chat_message_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendChatMessageCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendChatMessageCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendChatMessageCallback::GetClassData() const { return &_class_data_; }


void SendChatMessageCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendChatMessageCallback*>(&to_msg);
  auto& from = static_cast<const SendChatMessageCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendChatMessageCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::proto::ChatMessage::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatMessageCallback::CopyFrom(const SendChatMessageCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendChatMessageCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatMessageCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (message_case()) {
    case kError: {
      break;
    }
    case kChatMessage: {
      if (_internal_has_chat_message()) {
        if (!_impl_.message_.chat_message_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void SendChatMessageCallback::InternalSwap(SendChatMessageCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendChatMessageCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[29]);
}

// ===================================================================

class SetLocalAttributesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalAttributesRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetLocalAttributesRequest::SetLocalAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalAttributesRequest)
}
SetLocalAttributesRequest::SetLocalAttributesRequest(const SetLocalAttributesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalAttributesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalAttributesRequest)
}

inline void SetLocalAttributesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
}

SetLocalAttributesRequest::~SetLocalAttributesRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalAttributesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalAttributesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
}

void SetLocalAttributesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalAttributesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalAttributesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalAttributesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.AttributesEntry attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalAttributesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalAttributesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // repeated .livekit.proto.AttributesEntry attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalAttributesRequest)
  return target;
}

size_t SetLocalAttributesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalAttributesRequest)
  size_t total_size = 0;

  // required uint64 local_participant_handle = 1;
  if (_internal_has_local_participant_handle()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.AttributesEntry attributes = 2;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalAttributesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalAttributesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalAttributesRequest::GetClassData() const { return &_class_data_; }


void SetLocalAttributesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalAttributesRequest*>(&to_msg);
  auto& from = static_cast<const SetLocalAttributesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalAttributesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_local_participant_handle()) {
    _this->_internal_set_local_participant_handle(from._internal_local_participant_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalAttributesRequest::CopyFrom(const SetLocalAttributesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalAttributesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalAttributesRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.attributes_))
    return false;
  return true;
}

void SetLocalAttributesRequest::InternalSwap(SetLocalAttributesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalAttributesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[30]);
}

// ===================================================================

class AttributesEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributesEntry>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AttributesEntry::AttributesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.AttributesEntry)
}
AttributesEntry::AttributesEntry(const AttributesEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributesEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.AttributesEntry)
}

inline void AttributesEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttributesEntry::~AttributesEntry() {
  // @@protoc_insertion_point(destructor:livekit.proto.AttributesEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributesEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void AttributesEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributesEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.AttributesEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributesEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.AttributesEntry.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.AttributesEntry.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributesEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.AttributesEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.AttributesEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.AttributesEntry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.AttributesEntry)
  return target;
}

size_t AttributesEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.AttributesEntry)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t AttributesEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.AttributesEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributesEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributesEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributesEntry::GetClassData() const { return &_class_data_; }


void AttributesEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributesEntry*>(&to_msg);
  auto& from = static_cast<const AttributesEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.AttributesEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributesEntry::CopyFrom(const AttributesEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.AttributesEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributesEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AttributesEntry::InternalSwap(AttributesEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributesEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[31]);
}

// ===================================================================

class SetLocalAttributesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalAttributesResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetLocalAttributesResponse::SetLocalAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalAttributesResponse)
}
SetLocalAttributesResponse::SetLocalAttributesResponse(const SetLocalAttributesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalAttributesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalAttributesResponse)
}

inline void SetLocalAttributesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SetLocalAttributesResponse::~SetLocalAttributesResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalAttributesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalAttributesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetLocalAttributesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalAttributesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalAttributesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalAttributesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalAttributesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalAttributesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalAttributesResponse)
  return target;
}

size_t SetLocalAttributesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalAttributesResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalAttributesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalAttributesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalAttributesResponse::GetClassData() const { return &_class_data_; }


void SetLocalAttributesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalAttributesResponse*>(&to_msg);
  auto& from = static_cast<const SetLocalAttributesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalAttributesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalAttributesResponse::CopyFrom(const SetLocalAttributesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalAttributesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalAttributesResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalAttributesResponse::InternalSwap(SetLocalAttributesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalAttributesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[32]);
}

// ===================================================================

class SetLocalAttributesCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalAttributesCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SetLocalAttributesCallback::SetLocalAttributesCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalAttributesCallback)
}
SetLocalAttributesCallback::SetLocalAttributesCallback(const SetLocalAttributesCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalAttributesCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalAttributesCallback)
}

inline void SetLocalAttributesCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLocalAttributesCallback::~SetLocalAttributesCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalAttributesCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalAttributesCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SetLocalAttributesCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalAttributesCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalAttributesCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalAttributesCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SetLocalAttributesCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalAttributesCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalAttributesCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SetLocalAttributesCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalAttributesCallback)
  return target;
}

size_t SetLocalAttributesCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalAttributesCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalAttributesCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalAttributesCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalAttributesCallback::GetClassData() const { return &_class_data_; }


void SetLocalAttributesCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalAttributesCallback*>(&to_msg);
  auto& from = static_cast<const SetLocalAttributesCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalAttributesCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalAttributesCallback::CopyFrom(const SetLocalAttributesCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalAttributesCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalAttributesCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalAttributesCallback::InternalSwap(SetLocalAttributesCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalAttributesCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[33]);
}

// ===================================================================

class SetLocalNameRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalNameRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetLocalNameRequest::SetLocalNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalNameRequest)
}
SetLocalNameRequest::SetLocalNameRequest(const SetLocalNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalNameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalNameRequest)
}

inline void SetLocalNameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLocalNameRequest::~SetLocalNameRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalNameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SetLocalNameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalNameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalNameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SetLocalNameRequest.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalNameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalNameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SetLocalNameRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalNameRequest)
  return target;
}

size_t SetLocalNameRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SetLocalNameRequest)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t SetLocalNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalNameRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalNameRequest::GetClassData() const { return &_class_data_; }


void SetLocalNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalNameRequest*>(&to_msg);
  auto& from = static_cast<const SetLocalNameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalNameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalNameRequest::CopyFrom(const SetLocalNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalNameRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalNameRequest::InternalSwap(SetLocalNameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalNameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[34]);
}

// ===================================================================

class SetLocalNameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalNameResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetLocalNameResponse::SetLocalNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalNameResponse)
}
SetLocalNameResponse::SetLocalNameResponse(const SetLocalNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalNameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalNameResponse)
}

inline void SetLocalNameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SetLocalNameResponse::~SetLocalNameResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalNameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetLocalNameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalNameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalNameResponse)
  return target;
}

size_t SetLocalNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalNameResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalNameResponse::GetClassData() const { return &_class_data_; }


void SetLocalNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalNameResponse*>(&to_msg);
  auto& from = static_cast<const SetLocalNameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalNameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalNameResponse::CopyFrom(const SetLocalNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalNameResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalNameResponse::InternalSwap(SetLocalNameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalNameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[35]);
}

// ===================================================================

class SetLocalNameCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLocalNameCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SetLocalNameCallback::SetLocalNameCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetLocalNameCallback)
}
SetLocalNameCallback::SetLocalNameCallback(const SetLocalNameCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLocalNameCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetLocalNameCallback)
}

inline void SetLocalNameCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLocalNameCallback::~SetLocalNameCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetLocalNameCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLocalNameCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SetLocalNameCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLocalNameCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetLocalNameCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalNameCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SetLocalNameCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLocalNameCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetLocalNameCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SetLocalNameCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetLocalNameCallback)
  return target;
}

size_t SetLocalNameCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetLocalNameCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLocalNameCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLocalNameCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLocalNameCallback::GetClassData() const { return &_class_data_; }


void SetLocalNameCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLocalNameCallback*>(&to_msg);
  auto& from = static_cast<const SetLocalNameCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetLocalNameCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLocalNameCallback::CopyFrom(const SetLocalNameCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetLocalNameCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalNameCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetLocalNameCallback::InternalSwap(SetLocalNameCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalNameCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[36]);
}

// ===================================================================

class SetSubscribedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSubscribedRequest>()._impl_._has_bits_);
  static void set_has_subscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_publication_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetSubscribedRequest::SetSubscribedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetSubscribedRequest)
}
SetSubscribedRequest::SetSubscribedRequest(const SetSubscribedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetSubscribedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publication_handle_){}
    , decltype(_impl_.subscribe_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.publication_handle_, &from._impl_.publication_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subscribe_) -
    reinterpret_cast<char*>(&_impl_.publication_handle_)) + sizeof(_impl_.subscribe_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetSubscribedRequest)
}

inline void SetSubscribedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publication_handle_){uint64_t{0u}}
    , decltype(_impl_.subscribe_){false}
  };
}

SetSubscribedRequest::~SetSubscribedRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetSubscribedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSubscribedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSubscribedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSubscribedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetSubscribedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.publication_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.subscribe_) -
        reinterpret_cast<char*>(&_impl_.publication_handle_)) + sizeof(_impl_.subscribe_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSubscribedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_subscribe(&has_bits);
          _impl_.subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 publication_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_publication_handle(&has_bits);
          _impl_.publication_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetSubscribedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetSubscribedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool subscribe = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_subscribe(), target);
  }

  // required uint64 publication_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publication_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetSubscribedRequest)
  return target;
}

size_t SetSubscribedRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SetSubscribedRequest)
  size_t total_size = 0;

  if (_internal_has_publication_handle()) {
    // required uint64 publication_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_publication_handle());
  }

  if (_internal_has_subscribe()) {
    // required bool subscribe = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SetSubscribedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetSubscribedRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 publication_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_publication_handle());

    // required bool subscribe = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSubscribedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetSubscribedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSubscribedRequest::GetClassData() const { return &_class_data_; }


void SetSubscribedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetSubscribedRequest*>(&to_msg);
  auto& from = static_cast<const SetSubscribedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetSubscribedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.publication_handle_ = from._impl_.publication_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.subscribe_ = from._impl_.subscribe_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSubscribedRequest::CopyFrom(const SetSubscribedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetSubscribedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSubscribedRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetSubscribedRequest::InternalSwap(SetSubscribedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetSubscribedRequest, _impl_.subscribe_)
      + sizeof(SetSubscribedRequest::_impl_.subscribe_)
      - PROTOBUF_FIELD_OFFSET(SetSubscribedRequest, _impl_.publication_handle_)>(
          reinterpret_cast<char*>(&_impl_.publication_handle_),
          reinterpret_cast<char*>(&other->_impl_.publication_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSubscribedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[37]);
}

// ===================================================================

class SetSubscribedResponse::_Internal {
 public:
};

SetSubscribedResponse::SetSubscribedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetSubscribedResponse)
}
SetSubscribedResponse::SetSubscribedResponse(const SetSubscribedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetSubscribedResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetSubscribedResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSubscribedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSubscribedResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetSubscribedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[38]);
}

// ===================================================================

class GetSessionStatsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSessionStatsRequest>()._impl_._has_bits_);
  static void set_has_room_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GetSessionStatsRequest::GetSessionStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetSessionStatsRequest)
}
GetSessionStatsRequest::GetSessionStatsRequest(const GetSessionStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSessionStatsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.room_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_handle_ = from._impl_.room_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetSessionStatsRequest)
}

inline void GetSessionStatsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.room_handle_){uint64_t{0u}}
  };
}

GetSessionStatsRequest::~GetSessionStatsRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetSessionStatsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSessionStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSessionStatsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSessionStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetSessionStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionStatsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 room_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_room_handle(&has_bits);
          _impl_.room_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetSessionStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 room_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_room_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetSessionStatsRequest)
  return target;
}

size_t GetSessionStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetSessionStatsRequest)
  size_t total_size = 0;

  // required uint64 room_handle = 1;
  if (_internal_has_room_handle()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_room_handle());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSessionStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionStatsRequest::GetClassData() const { return &_class_data_; }


void GetSessionStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSessionStatsRequest*>(&to_msg);
  auto& from = static_cast<const GetSessionStatsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetSessionStatsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room_handle()) {
    _this->_internal_set_room_handle(from._internal_room_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionStatsRequest::CopyFrom(const GetSessionStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetSessionStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionStatsRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetSessionStatsRequest::InternalSwap(GetSessionStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.room_handle_, other->_impl_.room_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionStatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[39]);
}

// ===================================================================

class GetSessionStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSessionStatsResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GetSessionStatsResponse::GetSessionStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetSessionStatsResponse)
}
GetSessionStatsResponse::GetSessionStatsResponse(const GetSessionStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSessionStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetSessionStatsResponse)
}

inline void GetSessionStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

GetSessionStatsResponse::~GetSessionStatsResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetSessionStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSessionStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSessionStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSessionStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetSessionStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetSessionStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetSessionStatsResponse)
  return target;
}

size_t GetSessionStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetSessionStatsResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSessionStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionStatsResponse::GetClassData() const { return &_class_data_; }


void GetSessionStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSessionStatsResponse*>(&to_msg);
  auto& from = static_cast<const GetSessionStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetSessionStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionStatsResponse::CopyFrom(const GetSessionStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetSessionStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionStatsResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetSessionStatsResponse::InternalSwap(GetSessionStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[40]);
}

// ===================================================================

class GetSessionStatsCallback_Result::_Internal {
 public:
};

void GetSessionStatsCallback_Result::clear_publisher_stats() {
  _impl_.publisher_stats_.Clear();
}
void GetSessionStatsCallback_Result::clear_subscriber_stats() {
  _impl_.subscriber_stats_.Clear();
}
GetSessionStatsCallback_Result::GetSessionStatsCallback_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetSessionStatsCallback.Result)
}
GetSessionStatsCallback_Result::GetSessionStatsCallback_Result(const GetSessionStatsCallback_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSessionStatsCallback_Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publisher_stats_){from._impl_.publisher_stats_}
    , decltype(_impl_.subscriber_stats_){from._impl_.subscriber_stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetSessionStatsCallback.Result)
}

inline void GetSessionStatsCallback_Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publisher_stats_){arena}
    , decltype(_impl_.subscriber_stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSessionStatsCallback_Result::~GetSessionStatsCallback_Result() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetSessionStatsCallback.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSessionStatsCallback_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publisher_stats_.~RepeatedPtrField();
  _impl_.subscriber_stats_.~RepeatedPtrField();
}

void GetSessionStatsCallback_Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSessionStatsCallback_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetSessionStatsCallback.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publisher_stats_.Clear();
  _impl_.subscriber_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionStatsCallback_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.proto.RtcStats publisher_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publisher_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.RtcStats subscriber_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriber_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionStatsCallback_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetSessionStatsCallback.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.proto.RtcStats publisher_stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publisher_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_publisher_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.proto.RtcStats subscriber_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscriber_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscriber_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetSessionStatsCallback.Result)
  return target;
}

size_t GetSessionStatsCallback_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetSessionStatsCallback.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.RtcStats publisher_stats = 1;
  total_size += 1UL * this->_internal_publisher_stats_size();
  for (const auto& msg : this->_impl_.publisher_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.proto.RtcStats subscriber_stats = 2;
  total_size += 1UL * this->_internal_subscriber_stats_size();
  for (const auto& msg : this->_impl_.subscriber_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionStatsCallback_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSessionStatsCallback_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionStatsCallback_Result::GetClassData() const { return &_class_data_; }


void GetSessionStatsCallback_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSessionStatsCallback_Result*>(&to_msg);
  auto& from = static_cast<const GetSessionStatsCallback_Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetSessionStatsCallback.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publisher_stats_.MergeFrom(from._impl_.publisher_stats_);
  _this->_impl_.subscriber_stats_.MergeFrom(from._impl_.subscriber_stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionStatsCallback_Result::CopyFrom(const GetSessionStatsCallback_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetSessionStatsCallback.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionStatsCallback_Result::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.publisher_stats_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.subscriber_stats_))
    return false;
  return true;
}

void GetSessionStatsCallback_Result::InternalSwap(GetSessionStatsCallback_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.publisher_stats_.InternalSwap(&other->_impl_.publisher_stats_);
  _impl_.subscriber_stats_.InternalSwap(&other->_impl_.subscriber_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionStatsCallback_Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[41]);
}

// ===================================================================

class GetSessionStatsCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSessionStatsCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::GetSessionStatsCallback_Result& result(const GetSessionStatsCallback* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::GetSessionStatsCallback_Result&
GetSessionStatsCallback::_Internal::result(const GetSessionStatsCallback* msg) {
  return *msg->_impl_.message_.result_;
}
void GetSessionStatsCallback::set_allocated_result(::livekit::proto::GetSessionStatsCallback_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
    _impl_.message_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.GetSessionStatsCallback.result)
}
GetSessionStatsCallback::GetSessionStatsCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetSessionStatsCallback)
}
GetSessionStatsCallback::GetSessionStatsCallback(const GetSessionStatsCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSessionStatsCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  clear_has_message();
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kResult: {
      _this->_internal_mutable_result()->::livekit::proto::GetSessionStatsCallback_Result::MergeFrom(
          from._internal_result());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetSessionStatsCallback)
}

inline void GetSessionStatsCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

GetSessionStatsCallback::~GetSessionStatsCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetSessionStatsCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSessionStatsCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void GetSessionStatsCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSessionStatsCallback::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.GetSessionStatsCallback)
  switch (message_case()) {
    case kError: {
      _impl_.message_.error_.Destroy();
      break;
    }
    case kResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.result_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void GetSessionStatsCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetSessionStatsCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  clear_message();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionStatsCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.GetSessionStatsCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.GetSessionStatsCallback.Result result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionStatsCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetSessionStatsCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  switch (message_case()) {
    case kError: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.GetSessionStatsCallback.error");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_error(), target);
      break;
    }
    case kResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::result(this),
          _Internal::result(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetSessionStatsCallback)
  return target;
}

size_t GetSessionStatsCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetSessionStatsCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    // .livekit.proto.GetSessionStatsCallback.Result result = 3;
    case kResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.result_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionStatsCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSessionStatsCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionStatsCallback::GetClassData() const { return &_class_data_; }


void GetSessionStatsCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSessionStatsCallback*>(&to_msg);
  auto& from = static_cast<const GetSessionStatsCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetSessionStatsCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  switch (from.message_case()) {
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case kResult: {
      _this->_internal_mutable_result()->::livekit::proto::GetSessionStatsCallback_Result::MergeFrom(
          from._internal_result());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionStatsCallback::CopyFrom(const GetSessionStatsCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetSessionStatsCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionStatsCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (message_case()) {
    case kError: {
      break;
    }
    case kResult: {
      if (_internal_has_result()) {
        if (!_impl_.message_.result_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void GetSessionStatsCallback::InternalSwap(GetSessionStatsCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionStatsCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[42]);
}

// ===================================================================

class VideoEncoding::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoEncoding>()._impl_._has_bits_);
  static void set_has_max_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_framerate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VideoEncoding::VideoEncoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.VideoEncoding)
}
VideoEncoding::VideoEncoding(const VideoEncoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoEncoding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_bitrate_){}
    , decltype(_impl_.max_framerate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_bitrate_, &from._impl_.max_bitrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_framerate_) -
    reinterpret_cast<char*>(&_impl_.max_bitrate_)) + sizeof(_impl_.max_framerate_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.VideoEncoding)
}

inline void VideoEncoding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_bitrate_){uint64_t{0u}}
    , decltype(_impl_.max_framerate_){0}
  };
}

VideoEncoding::~VideoEncoding() {
  // @@protoc_insertion_point(destructor:livekit.proto.VideoEncoding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoEncoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoEncoding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.VideoEncoding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_bitrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_framerate_) -
        reinterpret_cast<char*>(&_impl_.max_bitrate_)) + sizeof(_impl_.max_framerate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoEncoding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 max_bitrate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_bitrate(&has_bits);
          _impl_.max_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double max_framerate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_framerate(&has_bits);
          _impl_.max_framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoEncoding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.VideoEncoding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 max_bitrate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max_bitrate(), target);
  }

  // required double max_framerate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_framerate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.VideoEncoding)
  return target;
}

size_t VideoEncoding::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.VideoEncoding)
  size_t total_size = 0;

  if (_internal_has_max_bitrate()) {
    // required uint64 max_bitrate = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_bitrate());
  }

  if (_internal_has_max_framerate()) {
    // required double max_framerate = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t VideoEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.VideoEncoding)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 max_bitrate = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_bitrate());

    // required double max_framerate = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoEncoding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoEncoding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoEncoding::GetClassData() const { return &_class_data_; }


void VideoEncoding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoEncoding*>(&to_msg);
  auto& from = static_cast<const VideoEncoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.VideoEncoding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_bitrate_ = from._impl_.max_bitrate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_framerate_ = from._impl_.max_framerate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoEncoding::CopyFrom(const VideoEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.VideoEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoEncoding::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VideoEncoding::InternalSwap(VideoEncoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoEncoding, _impl_.max_framerate_)
      + sizeof(VideoEncoding::_impl_.max_framerate_)
      - PROTOBUF_FIELD_OFFSET(VideoEncoding, _impl_.max_bitrate_)>(
          reinterpret_cast<char*>(&_impl_.max_bitrate_),
          reinterpret_cast<char*>(&other->_impl_.max_bitrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoEncoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[43]);
}

// ===================================================================

class AudioEncoding::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioEncoding>()._impl_._has_bits_);
  static void set_has_max_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AudioEncoding::AudioEncoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.AudioEncoding)
}
AudioEncoding::AudioEncoding(const AudioEncoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioEncoding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_bitrate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.max_bitrate_ = from._impl_.max_bitrate_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.AudioEncoding)
}

inline void AudioEncoding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_bitrate_){uint64_t{0u}}
  };
}

AudioEncoding::~AudioEncoding() {
  // @@protoc_insertion_point(destructor:livekit.proto.AudioEncoding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioEncoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioEncoding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.AudioEncoding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_bitrate_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioEncoding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 max_bitrate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_bitrate(&has_bits);
          _impl_.max_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioEncoding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.AudioEncoding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 max_bitrate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max_bitrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.AudioEncoding)
  return target;
}

size_t AudioEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.AudioEncoding)
  size_t total_size = 0;

  // required uint64 max_bitrate = 1;
  if (_internal_has_max_bitrate()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_bitrate());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioEncoding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioEncoding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioEncoding::GetClassData() const { return &_class_data_; }


void AudioEncoding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioEncoding*>(&to_msg);
  auto& from = static_cast<const AudioEncoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.AudioEncoding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_bitrate()) {
    _this->_internal_set_max_bitrate(from._internal_max_bitrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioEncoding::CopyFrom(const AudioEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.AudioEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEncoding::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AudioEncoding::InternalSwap(AudioEncoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_bitrate_, other->_impl_.max_bitrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioEncoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[44]);
}

// ===================================================================

class TrackPublishOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackPublishOptions>()._impl_._has_bits_);
  static const ::livekit::proto::VideoEncoding& video_encoding(const TrackPublishOptions* msg);
  static void set_has_video_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::livekit::proto::AudioEncoding& audio_encoding(const TrackPublishOptions* msg);
  static void set_has_audio_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dtx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_simulcast(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::livekit::proto::VideoEncoding&
TrackPublishOptions::_Internal::video_encoding(const TrackPublishOptions* msg) {
  return *msg->_impl_.video_encoding_;
}
const ::livekit::proto::AudioEncoding&
TrackPublishOptions::_Internal::audio_encoding(const TrackPublishOptions* msg) {
  return *msg->_impl_.audio_encoding_;
}
TrackPublishOptions::TrackPublishOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackPublishOptions)
}
TrackPublishOptions::TrackPublishOptions(const TrackPublishOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackPublishOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.video_encoding_){nullptr}
    , decltype(_impl_.audio_encoding_){nullptr}
    , decltype(_impl_.video_codec_){}
    , decltype(_impl_.dtx_){}
    , decltype(_impl_.red_){}
    , decltype(_impl_.simulcast_){}
    , decltype(_impl_.source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream()) {
    _this->_impl_.stream_.Set(from._internal_stream(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_video_encoding()) {
    _this->_impl_.video_encoding_ = new ::livekit::proto::VideoEncoding(*from._impl_.video_encoding_);
  }
  if (from._internal_has_audio_encoding()) {
    _this->_impl_.audio_encoding_ = new ::livekit::proto::AudioEncoding(*from._impl_.audio_encoding_);
  }
  ::memcpy(&_impl_.video_codec_, &from._impl_.video_codec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_) -
    reinterpret_cast<char*>(&_impl_.video_codec_)) + sizeof(_impl_.source_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackPublishOptions)
}

inline void TrackPublishOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.video_encoding_){nullptr}
    , decltype(_impl_.audio_encoding_){nullptr}
    , decltype(_impl_.video_codec_){0}
    , decltype(_impl_.dtx_){false}
    , decltype(_impl_.red_){false}
    , decltype(_impl_.simulcast_){false}
    , decltype(_impl_.source_){0}
  };
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackPublishOptions::~TrackPublishOptions() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackPublishOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackPublishOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_.Destroy();
  if (this != internal_default_instance()) delete _impl_.video_encoding_;
  if (this != internal_default_instance()) delete _impl_.audio_encoding_;
}

void TrackPublishOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackPublishOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackPublishOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.video_encoding_ != nullptr);
      _impl_.video_encoding_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.audio_encoding_ != nullptr);
      _impl_.audio_encoding_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.video_codec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_) -
        reinterpret_cast<char*>(&_impl_.video_codec_)) + sizeof(_impl_.source_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPublishOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .livekit.proto.VideoEncoding video_encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_encoding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.AudioEncoding audio_encoding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_encoding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.VideoCodec video_codec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::VideoCodec_IsValid(val))) {
            _internal_set_video_codec(static_cast<::livekit::proto::VideoCodec>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool dtx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dtx(&has_bits);
          _impl_.dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool red = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_red(&has_bits);
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool simulcast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_simulcast(&has_bits);
          _impl_.simulcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.TrackSource source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::TrackSource_IsValid(val))) {
            _internal_set_source(static_cast<::livekit::proto::TrackSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string stream = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackPublishOptions.stream");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPublishOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackPublishOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .livekit.proto.VideoEncoding video_encoding = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::video_encoding(this),
        _Internal::video_encoding(this).GetCachedSize(), target, stream);
  }

  // optional .livekit.proto.AudioEncoding audio_encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::audio_encoding(this),
        _Internal::audio_encoding(this).GetCachedSize(), target, stream);
  }

  // optional .livekit.proto.VideoCodec video_codec = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_video_codec(), target);
  }

  // optional bool dtx = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_dtx(), target);
  }

  // optional bool red = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_red(), target);
  }

  // optional bool simulcast = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_simulcast(), target);
  }

  // optional .livekit.proto.TrackSource source = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_source(), target);
  }

  // optional string stream = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackPublishOptions.stream");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackPublishOptions)
  return target;
}

size_t TrackPublishOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackPublishOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stream = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stream());
    }

    // optional .livekit.proto.VideoEncoding video_encoding = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.video_encoding_);
    }

    // optional .livekit.proto.AudioEncoding audio_encoding = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.audio_encoding_);
    }

    // optional .livekit.proto.VideoCodec video_codec = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_video_codec());
    }

    // optional bool dtx = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool red = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool simulcast = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .livekit.proto.TrackSource source = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPublishOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackPublishOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPublishOptions::GetClassData() const { return &_class_data_; }


void TrackPublishOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackPublishOptions*>(&to_msg);
  auto& from = static_cast<const TrackPublishOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackPublishOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream(from._internal_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_video_encoding()->::livekit::proto::VideoEncoding::MergeFrom(
          from._internal_video_encoding());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_audio_encoding()->::livekit::proto::AudioEncoding::MergeFrom(
          from._internal_audio_encoding());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.video_codec_ = from._impl_.video_codec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dtx_ = from._impl_.dtx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.red_ = from._impl_.red_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.simulcast_ = from._impl_.simulcast_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPublishOptions::CopyFrom(const TrackPublishOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackPublishOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPublishOptions::IsInitialized() const {
  if (_internal_has_video_encoding()) {
    if (!_impl_.video_encoding_->IsInitialized()) return false;
  }
  if (_internal_has_audio_encoding()) {
    if (!_impl_.audio_encoding_->IsInitialized()) return false;
  }
  return true;
}

void TrackPublishOptions::InternalSwap(TrackPublishOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_, lhs_arena,
      &other->_impl_.stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackPublishOptions, _impl_.source_)
      + sizeof(TrackPublishOptions::_impl_.source_)
      - PROTOBUF_FIELD_OFFSET(TrackPublishOptions, _impl_.video_encoding_)>(
          reinterpret_cast<char*>(&_impl_.video_encoding_),
          reinterpret_cast<char*>(&other->_impl_.video_encoding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPublishOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[45]);
}

// ===================================================================

class IceServer::_Internal {
 public:
  using HasBits = decltype(std::declval<IceServer>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IceServer::IceServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.IceServer)
}
IceServer::IceServer(const IceServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IceServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.urls_){from._impl_.urls_}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.IceServer)
}

inline void IceServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.urls_){arena}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IceServer::~IceServer() {
  // @@protoc_insertion_point(destructor:livekit.proto.IceServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IceServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.urls_.~RepeatedPtrField();
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void IceServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IceServer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.IceServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.urls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IceServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.IceServer.urls");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceServer.username");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.IceServer.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IceServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.IceServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceServer.urls");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceServer.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.IceServer.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.IceServer)
  return target;
}

size_t IceServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.IceServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.urls_.size());
  for (int i = 0, n = _impl_.urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.urls_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IceServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IceServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IceServer::GetClassData() const { return &_class_data_; }


void IceServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IceServer*>(&to_msg);
  auto& from = static_cast<const IceServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.IceServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.urls_.MergeFrom(from._impl_.urls_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_password(from._internal_password());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IceServer::CopyFrom(const IceServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.IceServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceServer::IsInitialized() const {
  return true;
}

void IceServer::InternalSwap(IceServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.urls_.InternalSwap(&other->_impl_.urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IceServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[46]);
}

// ===================================================================

class RtcConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcConfig>()._impl_._has_bits_);
  static void set_has_ice_transport_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continual_gathering_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RtcConfig::RtcConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RtcConfig)
}
RtcConfig::RtcConfig(const RtcConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ice_servers_){from._impl_.ice_servers_}
    , decltype(_impl_.ice_transport_type_){}
    , decltype(_impl_.continual_gathering_policy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ice_transport_type_, &from._impl_.ice_transport_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.continual_gathering_policy_) -
    reinterpret_cast<char*>(&_impl_.ice_transport_type_)) + sizeof(_impl_.continual_gathering_policy_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RtcConfig)
}

inline void RtcConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ice_servers_){arena}
    , decltype(_impl_.ice_transport_type_){0}
    , decltype(_impl_.continual_gathering_policy_){0}
  };
}

RtcConfig::~RtcConfig() {
  // @@protoc_insertion_point(destructor:livekit.proto.RtcConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ice_servers_.~RepeatedPtrField();
}

void RtcConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RtcConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ice_servers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ice_transport_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.continual_gathering_policy_) -
        reinterpret_cast<char*>(&_impl_.ice_transport_type_)) + sizeof(_impl_.continual_gathering_policy_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .livekit.proto.IceTransportType ice_transport_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::IceTransportType_IsValid(val))) {
            _internal_set_ice_transport_type(static_cast<::livekit::proto::IceTransportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.ContinualGatheringPolicy continual_gathering_policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::ContinualGatheringPolicy_IsValid(val))) {
            _internal_set_continual_gathering_policy(static_cast<::livekit::proto::ContinualGatheringPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.IceServer ice_servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ice_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RtcConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .livekit.proto.IceTransportType ice_transport_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ice_transport_type(), target);
  }

  // optional .livekit.proto.ContinualGatheringPolicy continual_gathering_policy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_continual_gathering_policy(), target);
  }

  // repeated .livekit.proto.IceServer ice_servers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ice_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_ice_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RtcConfig)
  return target;
}

size_t RtcConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RtcConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.IceServer ice_servers = 3;
  total_size += 1UL * this->_internal_ice_servers_size();
  for (const auto& msg : this->_impl_.ice_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .livekit.proto.IceTransportType ice_transport_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ice_transport_type());
    }

    // optional .livekit.proto.ContinualGatheringPolicy continual_gathering_policy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_continual_gathering_policy());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcConfig::GetClassData() const { return &_class_data_; }


void RtcConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcConfig*>(&to_msg);
  auto& from = static_cast<const RtcConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RtcConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ice_servers_.MergeFrom(from._impl_.ice_servers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ice_transport_type_ = from._impl_.ice_transport_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.continual_gathering_policy_ = from._impl_.continual_gathering_policy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcConfig::CopyFrom(const RtcConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RtcConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcConfig::IsInitialized() const {
  return true;
}

void RtcConfig::InternalSwap(RtcConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ice_servers_.InternalSwap(&other->_impl_.ice_servers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcConfig, _impl_.continual_gathering_policy_)
      + sizeof(RtcConfig::_impl_.continual_gathering_policy_)
      - PROTOBUF_FIELD_OFFSET(RtcConfig, _impl_.ice_transport_type_)>(
          reinterpret_cast<char*>(&_impl_.ice_transport_type_),
          reinterpret_cast<char*>(&other->_impl_.ice_transport_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[47]);
}

// ===================================================================

class RoomOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomOptions>()._impl_._has_bits_);
  static void set_has_auto_subscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adaptive_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dynacast(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::livekit::proto::E2eeOptions& e2ee(const RoomOptions* msg);
  static void set_has_e2ee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RtcConfig& rtc_config(const RoomOptions* msg);
  static void set_has_rtc_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_join_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::livekit::proto::E2eeOptions&
RoomOptions::_Internal::e2ee(const RoomOptions* msg) {
  return *msg->_impl_.e2ee_;
}
const ::livekit::proto::RtcConfig&
RoomOptions::_Internal::rtc_config(const RoomOptions* msg) {
  return *msg->_impl_.rtc_config_;
}
void RoomOptions::clear_e2ee() {
  if (_impl_.e2ee_ != nullptr) _impl_.e2ee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoomOptions::RoomOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RoomOptions)
}
RoomOptions::RoomOptions(const RoomOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.e2ee_){nullptr}
    , decltype(_impl_.rtc_config_){nullptr}
    , decltype(_impl_.auto_subscribe_){}
    , decltype(_impl_.adaptive_stream_){}
    , decltype(_impl_.dynacast_){}
    , decltype(_impl_.join_retries_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_e2ee()) {
    _this->_impl_.e2ee_ = new ::livekit::proto::E2eeOptions(*from._impl_.e2ee_);
  }
  if (from._internal_has_rtc_config()) {
    _this->_impl_.rtc_config_ = new ::livekit::proto::RtcConfig(*from._impl_.rtc_config_);
  }
  ::memcpy(&_impl_.auto_subscribe_, &from._impl_.auto_subscribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.join_retries_) -
    reinterpret_cast<char*>(&_impl_.auto_subscribe_)) + sizeof(_impl_.join_retries_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RoomOptions)
}

inline void RoomOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.e2ee_){nullptr}
    , decltype(_impl_.rtc_config_){nullptr}
    , decltype(_impl_.auto_subscribe_){false}
    , decltype(_impl_.adaptive_stream_){false}
    , decltype(_impl_.dynacast_){false}
    , decltype(_impl_.join_retries_){0u}
  };
}

RoomOptions::~RoomOptions() {
  // @@protoc_insertion_point(destructor:livekit.proto.RoomOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.e2ee_;
  if (this != internal_default_instance()) delete _impl_.rtc_config_;
}

void RoomOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RoomOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.e2ee_ != nullptr);
      _impl_.e2ee_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rtc_config_ != nullptr);
      _impl_.rtc_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.auto_subscribe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.join_retries_) -
        reinterpret_cast<char*>(&_impl_.auto_subscribe_)) + sizeof(_impl_.join_retries_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool auto_subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_auto_subscribe(&has_bits);
          _impl_.auto_subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool adaptive_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_adaptive_stream(&has_bits);
          _impl_.adaptive_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dynacast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dynacast(&has_bits);
          _impl_.dynacast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.E2eeOptions e2ee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2ee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.RtcConfig rtc_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 join_retries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_join_retries(&has_bits);
          _impl_.join_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RoomOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool auto_subscribe = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_auto_subscribe(), target);
  }

  // optional bool adaptive_stream = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_adaptive_stream(), target);
  }

  // optional bool dynacast = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_dynacast(), target);
  }

  // optional .livekit.proto.E2eeOptions e2ee = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::e2ee(this),
        _Internal::e2ee(this).GetCachedSize(), target, stream);
  }

  // optional .livekit.proto.RtcConfig rtc_config = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rtc_config(this),
        _Internal::rtc_config(this).GetCachedSize(), target, stream);
  }

  // optional uint32 join_retries = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_join_retries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RoomOptions)
  return target;
}

size_t RoomOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RoomOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .livekit.proto.E2eeOptions e2ee = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.e2ee_);
    }

    // optional .livekit.proto.RtcConfig rtc_config = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rtc_config_);
    }

    // optional bool auto_subscribe = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool adaptive_stream = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool dynacast = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 join_retries = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_join_retries());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomOptions::GetClassData() const { return &_class_data_; }


void RoomOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomOptions*>(&to_msg);
  auto& from = static_cast<const RoomOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RoomOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_e2ee()->::livekit::proto::E2eeOptions::MergeFrom(
          from._internal_e2ee());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rtc_config()->::livekit::proto::RtcConfig::MergeFrom(
          from._internal_rtc_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auto_subscribe_ = from._impl_.auto_subscribe_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.adaptive_stream_ = from._impl_.adaptive_stream_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dynacast_ = from._impl_.dynacast_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.join_retries_ = from._impl_.join_retries_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomOptions::CopyFrom(const RoomOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RoomOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomOptions::IsInitialized() const {
  if (_internal_has_e2ee()) {
    if (!_impl_.e2ee_->IsInitialized()) return false;
  }
  return true;
}

void RoomOptions::InternalSwap(RoomOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomOptions, _impl_.join_retries_)
      + sizeof(RoomOptions::_impl_.join_retries_)
      - PROTOBUF_FIELD_OFFSET(RoomOptions, _impl_.e2ee_)>(
          reinterpret_cast<char*>(&_impl_.e2ee_),
          reinterpret_cast<char*>(&other->_impl_.e2ee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[48]);
}

// ===================================================================

class TranscriptionSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<TranscriptionSegment>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_final(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

TranscriptionSegment::TranscriptionSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TranscriptionSegment)
}
TranscriptionSegment::TranscriptionSegment(const TranscriptionSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TranscriptionSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.final_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.final_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TranscriptionSegment)
}

inline void TranscriptionSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.start_time_){uint64_t{0u}}
    , decltype(_impl_.end_time_){uint64_t{0u}}
    , decltype(_impl_.final_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TranscriptionSegment::~TranscriptionSegment() {
  // @@protoc_insertion_point(destructor:livekit.proto.TranscriptionSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranscriptionSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
}

void TranscriptionSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranscriptionSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TranscriptionSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.final_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.final_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscriptionSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TranscriptionSegment.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TranscriptionSegment.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool final = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_final(&has_bits);
          _impl_.final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TranscriptionSegment.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranscriptionSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TranscriptionSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TranscriptionSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TranscriptionSegment.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // required uint64 start_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_time(), target);
  }

  // required uint64 end_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end_time(), target);
  }

  // required bool final = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_final(), target);
  }

  // required string language = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TranscriptionSegment.language");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TranscriptionSegment)
  return target;
}

size_t TranscriptionSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TranscriptionSegment)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_text()) {
    // required string text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (_internal_has_language()) {
    // required string language = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (_internal_has_start_time()) {
    // required uint64 start_time = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time());
  }

  if (_internal_has_end_time()) {
    // required uint64 end_time = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time());
  }

  if (_internal_has_final()) {
    // required bool final = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TranscriptionSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TranscriptionSegment)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required string text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());

    // required string language = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());

    // required uint64 start_time = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time());

    // required uint64 end_time = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time());

    // required bool final = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscriptionSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TranscriptionSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscriptionSegment::GetClassData() const { return &_class_data_; }


void TranscriptionSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TranscriptionSegment*>(&to_msg);
  auto& from = static_cast<const TranscriptionSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TranscriptionSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.final_ = from._impl_.final_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscriptionSegment::CopyFrom(const TranscriptionSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TranscriptionSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptionSegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TranscriptionSegment::InternalSwap(TranscriptionSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.final_)
      + sizeof(TranscriptionSegment::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptionSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[49]);
}

// ===================================================================

class BufferInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BufferInfo>()._impl_._has_bits_);
  static void set_has_data_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

BufferInfo::BufferInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.BufferInfo)
}
BufferInfo::BufferInfo(const BufferInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_ptr_){}
    , decltype(_impl_.data_len_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.data_ptr_, &from._impl_.data_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_len_) -
    reinterpret_cast<char*>(&_impl_.data_ptr_)) + sizeof(_impl_.data_len_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.BufferInfo)
}

inline void BufferInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_ptr_){uint64_t{0u}}
    , decltype(_impl_.data_len_){uint64_t{0u}}
  };
}

BufferInfo::~BufferInfo() {
  // @@protoc_insertion_point(destructor:livekit.proto.BufferInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BufferInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.BufferInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.data_ptr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_len_) -
        reinterpret_cast<char*>(&_impl_.data_ptr_)) + sizeof(_impl_.data_len_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 data_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_ptr(&has_bits);
          _impl_.data_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 data_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_len(&has_bits);
          _impl_.data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.BufferInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 data_ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_ptr(), target);
  }

  // required uint64 data_len = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.BufferInfo)
  return target;
}

size_t BufferInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.BufferInfo)
  size_t total_size = 0;

  if (_internal_has_data_ptr()) {
    // required uint64 data_ptr = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_ptr());
  }

  if (_internal_has_data_len()) {
    // required uint64 data_len = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_len());
  }

  return total_size;
}
size_t BufferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.BufferInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 data_ptr = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_ptr());

    // required uint64 data_len = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferInfo::GetClassData() const { return &_class_data_; }


void BufferInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferInfo*>(&to_msg);
  auto& from = static_cast<const BufferInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.BufferInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_ptr_ = from._impl_.data_ptr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_len_ = from._impl_.data_len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferInfo::CopyFrom(const BufferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.BufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BufferInfo::InternalSwap(BufferInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferInfo, _impl_.data_len_)
      + sizeof(BufferInfo::_impl_.data_len_)
      - PROTOBUF_FIELD_OFFSET(BufferInfo, _impl_.data_ptr_)>(
          reinterpret_cast<char*>(&_impl_.data_ptr_),
          reinterpret_cast<char*>(&other->_impl_.data_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[50]);
}

// ===================================================================

class OwnedBuffer::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnedBuffer>()._impl_._has_bits_);
  static const ::livekit::proto::FfiOwnedHandle& handle(const OwnedBuffer* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::BufferInfo& data(const OwnedBuffer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::FfiOwnedHandle&
OwnedBuffer::_Internal::handle(const OwnedBuffer* msg) {
  return *msg->_impl_.handle_;
}
const ::livekit::proto::BufferInfo&
OwnedBuffer::_Internal::data(const OwnedBuffer* msg) {
  return *msg->_impl_.data_;
}
void OwnedBuffer::clear_handle() {
  if (_impl_.handle_ != nullptr) _impl_.handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OwnedBuffer::OwnedBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.OwnedBuffer)
}
OwnedBuffer::OwnedBuffer(const OwnedBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnedBuffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    _this->_impl_.handle_ = new ::livekit::proto::FfiOwnedHandle(*from._impl_.handle_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::livekit::proto::BufferInfo(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.OwnedBuffer)
}

inline void OwnedBuffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.data_){nullptr}
  };
}

OwnedBuffer::~OwnedBuffer() {
  // @@protoc_insertion_point(destructor:livekit.proto.OwnedBuffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnedBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.handle_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void OwnedBuffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnedBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.OwnedBuffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.handle_ != nullptr);
      _impl_.handle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnedBuffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.FfiOwnedHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.BufferInfo data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnedBuffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.OwnedBuffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.FfiOwnedHandle handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::handle(this),
        _Internal::handle(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.BufferInfo data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.OwnedBuffer)
  return target;
}

size_t OwnedBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.OwnedBuffer)
  size_t total_size = 0;

  if (_internal_has_handle()) {
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);
  }

  if (_internal_has_data()) {
    // required .livekit.proto.BufferInfo data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return total_size;
}
size_t OwnedBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.OwnedBuffer)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);

    // required .livekit.proto.BufferInfo data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnedBuffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnedBuffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnedBuffer::GetClassData() const { return &_class_data_; }


void OwnedBuffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnedBuffer*>(&to_msg);
  auto& from = static_cast<const OwnedBuffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.OwnedBuffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handle()->::livekit::proto::FfiOwnedHandle::MergeFrom(
          from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::livekit::proto::BufferInfo::MergeFrom(
          from._internal_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnedBuffer::CopyFrom(const OwnedBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.OwnedBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedBuffer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!_impl_.handle_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void OwnedBuffer::InternalSwap(OwnedBuffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnedBuffer, _impl_.data_)
      + sizeof(OwnedBuffer::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(OwnedBuffer, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnedBuffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[51]);
}

// ===================================================================

class RoomEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomEvent>()._impl_._has_bits_);
  static void set_has_room_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::ParticipantConnected& participant_connected(const RoomEvent* msg);
  static const ::livekit::proto::ParticipantDisconnected& participant_disconnected(const RoomEvent* msg);
  static const ::livekit::proto::LocalTrackPublished& local_track_published(const RoomEvent* msg);
  static const ::livekit::proto::LocalTrackUnpublished& local_track_unpublished(const RoomEvent* msg);
  static const ::livekit::proto::LocalTrackSubscribed& local_track_subscribed(const RoomEvent* msg);
  static const ::livekit::proto::TrackPublished& track_published(const RoomEvent* msg);
  static const ::livekit::proto::TrackUnpublished& track_unpublished(const RoomEvent* msg);
  static const ::livekit::proto::TrackSubscribed& track_subscribed(const RoomEvent* msg);
  static const ::livekit::proto::TrackUnsubscribed& track_unsubscribed(const RoomEvent* msg);
  static const ::livekit::proto::TrackSubscriptionFailed& track_subscription_failed(const RoomEvent* msg);
  static const ::livekit::proto::TrackMuted& track_muted(const RoomEvent* msg);
  static const ::livekit::proto::TrackUnmuted& track_unmuted(const RoomEvent* msg);
  static const ::livekit::proto::ActiveSpeakersChanged& active_speakers_changed(const RoomEvent* msg);
  static const ::livekit::proto::RoomMetadataChanged& room_metadata_changed(const RoomEvent* msg);
  static const ::livekit::proto::RoomSidChanged& room_sid_changed(const RoomEvent* msg);
  static const ::livekit::proto::ParticipantMetadataChanged& participant_metadata_changed(const RoomEvent* msg);
  static const ::livekit::proto::ParticipantNameChanged& participant_name_changed(const RoomEvent* msg);
  static const ::livekit::proto::ParticipantAttributesChanged& participant_attributes_changed(const RoomEvent* msg);
  static const ::livekit::proto::ConnectionQualityChanged& connection_quality_changed(const RoomEvent* msg);
  static const ::livekit::proto::ConnectionStateChanged& connection_state_changed(const RoomEvent* msg);
  static const ::livekit::proto::Disconnected& disconnected(const RoomEvent* msg);
  static const ::livekit::proto::Reconnecting& reconnecting(const RoomEvent* msg);
  static const ::livekit::proto::Reconnected& reconnected(const RoomEvent* msg);
  static const ::livekit::proto::E2eeStateChanged& e2ee_state_changed(const RoomEvent* msg);
  static const ::livekit::proto::RoomEOS& eos(const RoomEvent* msg);
  static const ::livekit::proto::DataPacketReceived& data_packet_received(const RoomEvent* msg);
  static const ::livekit::proto::TranscriptionReceived& transcription_received(const RoomEvent* msg);
  static const ::livekit::proto::ChatMessageReceived& chat_message(const RoomEvent* msg);
  static const ::livekit::proto::DataStreamHeaderReceived& stream_header_received(const RoomEvent* msg);
  static const ::livekit::proto::DataStreamChunkReceived& stream_chunk_received(const RoomEvent* msg);
  static const ::livekit::proto::DataStreamTrailerReceived& stream_trailer_received(const RoomEvent* msg);
  static const ::livekit::proto::DataChannelBufferedAmountLowThresholdChanged& data_channel_low_threshold_changed(const RoomEvent* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::ParticipantConnected&
RoomEvent::_Internal::participant_connected(const RoomEvent* msg) {
  return *msg->_impl_.message_.participant_connected_;
}
const ::livekit::proto::ParticipantDisconnected&
RoomEvent::_Internal::participant_disconnected(const RoomEvent* msg) {
  return *msg->_impl_.message_.participant_disconnected_;
}
const ::livekit::proto::LocalTrackPublished&
RoomEvent::_Internal::local_track_published(const RoomEvent* msg) {
  return *msg->_impl_.message_.local_track_published_;
}
const ::livekit::proto::LocalTrackUnpublished&
RoomEvent::_Internal::local_track_unpublished(const RoomEvent* msg) {
  return *msg->_impl_.message_.local_track_unpublished_;
}
const ::livekit::proto::LocalTrackSubscribed&
RoomEvent::_Internal::local_track_subscribed(const RoomEvent* msg) {
  return *msg->_impl_.message_.local_track_subscribed_;
}
const ::livekit::proto::TrackPublished&
RoomEvent::_Internal::track_published(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_published_;
}
const ::livekit::proto::TrackUnpublished&
RoomEvent::_Internal::track_unpublished(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_unpublished_;
}
const ::livekit::proto::TrackSubscribed&
RoomEvent::_Internal::track_subscribed(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_subscribed_;
}
const ::livekit::proto::TrackUnsubscribed&
RoomEvent::_Internal::track_unsubscribed(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_unsubscribed_;
}
const ::livekit::proto::TrackSubscriptionFailed&
RoomEvent::_Internal::track_subscription_failed(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_subscription_failed_;
}
const ::livekit::proto::TrackMuted&
RoomEvent::_Internal::track_muted(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_muted_;
}
const ::livekit::proto::TrackUnmuted&
RoomEvent::_Internal::track_unmuted(const RoomEvent* msg) {
  return *msg->_impl_.message_.track_unmuted_;
}
const ::livekit::proto::ActiveSpeakersChanged&
RoomEvent::_Internal::active_speakers_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.active_speakers_changed_;
}
const ::livekit::proto::RoomMetadataChanged&
RoomEvent::_Internal::room_metadata_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.room_metadata_changed_;
}
const ::livekit::proto::RoomSidChanged&
RoomEvent::_Internal::room_sid_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.room_sid_changed_;
}
const ::livekit::proto::ParticipantMetadataChanged&
RoomEvent::_Internal::participant_metadata_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.participant_metadata_changed_;
}
const ::livekit::proto::ParticipantNameChanged&
RoomEvent::_Internal::participant_name_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.participant_name_changed_;
}
const ::livekit::proto::ParticipantAttributesChanged&
RoomEvent::_Internal::participant_attributes_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.participant_attributes_changed_;
}
const ::livekit::proto::ConnectionQualityChanged&
RoomEvent::_Internal::connection_quality_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.connection_quality_changed_;
}
const ::livekit::proto::ConnectionStateChanged&
RoomEvent::_Internal::connection_state_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.connection_state_changed_;
}
const ::livekit::proto::Disconnected&
RoomEvent::_Internal::disconnected(const RoomEvent* msg) {
  return *msg->_impl_.message_.disconnected_;
}
const ::livekit::proto::Reconnecting&
RoomEvent::_Internal::reconnecting(const RoomEvent* msg) {
  return *msg->_impl_.message_.reconnecting_;
}
const ::livekit::proto::Reconnected&
RoomEvent::_Internal::reconnected(const RoomEvent* msg) {
  return *msg->_impl_.message_.reconnected_;
}
const ::livekit::proto::E2eeStateChanged&
RoomEvent::_Internal::e2ee_state_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.e2ee_state_changed_;
}
const ::livekit::proto::RoomEOS&
RoomEvent::_Internal::eos(const RoomEvent* msg) {
  return *msg->_impl_.message_.eos_;
}
const ::livekit::proto::DataPacketReceived&
RoomEvent::_Internal::data_packet_received(const RoomEvent* msg) {
  return *msg->_impl_.message_.data_packet_received_;
}
const ::livekit::proto::TranscriptionReceived&
RoomEvent::_Internal::transcription_received(const RoomEvent* msg) {
  return *msg->_impl_.message_.transcription_received_;
}
const ::livekit::proto::ChatMessageReceived&
RoomEvent::_Internal::chat_message(const RoomEvent* msg) {
  return *msg->_impl_.message_.chat_message_;
}
const ::livekit::proto::DataStreamHeaderReceived&
RoomEvent::_Internal::stream_header_received(const RoomEvent* msg) {
  return *msg->_impl_.message_.stream_header_received_;
}
const ::livekit::proto::DataStreamChunkReceived&
RoomEvent::_Internal::stream_chunk_received(const RoomEvent* msg) {
  return *msg->_impl_.message_.stream_chunk_received_;
}
const ::livekit::proto::DataStreamTrailerReceived&
RoomEvent::_Internal::stream_trailer_received(const RoomEvent* msg) {
  return *msg->_impl_.message_.stream_trailer_received_;
}
const ::livekit::proto::DataChannelBufferedAmountLowThresholdChanged&
RoomEvent::_Internal::data_channel_low_threshold_changed(const RoomEvent* msg) {
  return *msg->_impl_.message_.data_channel_low_threshold_changed_;
}
void RoomEvent::set_allocated_participant_connected(::livekit::proto::ParticipantConnected* participant_connected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (participant_connected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant_connected);
    if (message_arena != submessage_arena) {
      participant_connected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_connected, submessage_arena);
    }
    set_has_participant_connected();
    _impl_.message_.participant_connected_ = participant_connected;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.participant_connected)
}
void RoomEvent::set_allocated_participant_disconnected(::livekit::proto::ParticipantDisconnected* participant_disconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (participant_disconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant_disconnected);
    if (message_arena != submessage_arena) {
      participant_disconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_disconnected, submessage_arena);
    }
    set_has_participant_disconnected();
    _impl_.message_.participant_disconnected_ = participant_disconnected;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.participant_disconnected)
}
void RoomEvent::set_allocated_local_track_published(::livekit::proto::LocalTrackPublished* local_track_published) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (local_track_published) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_track_published);
    if (message_arena != submessage_arena) {
      local_track_published = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_track_published, submessage_arena);
    }
    set_has_local_track_published();
    _impl_.message_.local_track_published_ = local_track_published;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.local_track_published)
}
void RoomEvent::set_allocated_local_track_unpublished(::livekit::proto::LocalTrackUnpublished* local_track_unpublished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (local_track_unpublished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_track_unpublished);
    if (message_arena != submessage_arena) {
      local_track_unpublished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_track_unpublished, submessage_arena);
    }
    set_has_local_track_unpublished();
    _impl_.message_.local_track_unpublished_ = local_track_unpublished;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.local_track_unpublished)
}
void RoomEvent::set_allocated_local_track_subscribed(::livekit::proto::LocalTrackSubscribed* local_track_subscribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (local_track_subscribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_track_subscribed);
    if (message_arena != submessage_arena) {
      local_track_subscribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_track_subscribed, submessage_arena);
    }
    set_has_local_track_subscribed();
    _impl_.message_.local_track_subscribed_ = local_track_subscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.local_track_subscribed)
}
void RoomEvent::set_allocated_track_published(::livekit::proto::TrackPublished* track_published) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_published) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_published);
    if (message_arena != submessage_arena) {
      track_published = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_published, submessage_arena);
    }
    set_has_track_published();
    _impl_.message_.track_published_ = track_published;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_published)
}
void RoomEvent::set_allocated_track_unpublished(::livekit::proto::TrackUnpublished* track_unpublished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_unpublished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_unpublished);
    if (message_arena != submessage_arena) {
      track_unpublished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_unpublished, submessage_arena);
    }
    set_has_track_unpublished();
    _impl_.message_.track_unpublished_ = track_unpublished;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_unpublished)
}
void RoomEvent::set_allocated_track_subscribed(::livekit::proto::TrackSubscribed* track_subscribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_subscribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_subscribed);
    if (message_arena != submessage_arena) {
      track_subscribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_subscribed, submessage_arena);
    }
    set_has_track_subscribed();
    _impl_.message_.track_subscribed_ = track_subscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_subscribed)
}
void RoomEvent::set_allocated_track_unsubscribed(::livekit::proto::TrackUnsubscribed* track_unsubscribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_unsubscribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_unsubscribed);
    if (message_arena != submessage_arena) {
      track_unsubscribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_unsubscribed, submessage_arena);
    }
    set_has_track_unsubscribed();
    _impl_.message_.track_unsubscribed_ = track_unsubscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_unsubscribed)
}
void RoomEvent::set_allocated_track_subscription_failed(::livekit::proto::TrackSubscriptionFailed* track_subscription_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_subscription_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_subscription_failed);
    if (message_arena != submessage_arena) {
      track_subscription_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_subscription_failed, submessage_arena);
    }
    set_has_track_subscription_failed();
    _impl_.message_.track_subscription_failed_ = track_subscription_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_subscription_failed)
}
void RoomEvent::set_allocated_track_muted(::livekit::proto::TrackMuted* track_muted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_muted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_muted);
    if (message_arena != submessage_arena) {
      track_muted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_muted, submessage_arena);
    }
    set_has_track_muted();
    _impl_.message_.track_muted_ = track_muted;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_muted)
}
void RoomEvent::set_allocated_track_unmuted(::livekit::proto::TrackUnmuted* track_unmuted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_unmuted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_unmuted);
    if (message_arena != submessage_arena) {
      track_unmuted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_unmuted, submessage_arena);
    }
    set_has_track_unmuted();
    _impl_.message_.track_unmuted_ = track_unmuted;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.track_unmuted)
}
void RoomEvent::set_allocated_active_speakers_changed(::livekit::proto::ActiveSpeakersChanged* active_speakers_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (active_speakers_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(active_speakers_changed);
    if (message_arena != submessage_arena) {
      active_speakers_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_speakers_changed, submessage_arena);
    }
    set_has_active_speakers_changed();
    _impl_.message_.active_speakers_changed_ = active_speakers_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.active_speakers_changed)
}
void RoomEvent::set_allocated_room_metadata_changed(::livekit::proto::RoomMetadataChanged* room_metadata_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (room_metadata_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_metadata_changed);
    if (message_arena != submessage_arena) {
      room_metadata_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_metadata_changed, submessage_arena);
    }
    set_has_room_metadata_changed();
    _impl_.message_.room_metadata_changed_ = room_metadata_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.room_metadata_changed)
}
void RoomEvent::set_allocated_room_sid_changed(::livekit::proto::RoomSidChanged* room_sid_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (room_sid_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_sid_changed);
    if (message_arena != submessage_arena) {
      room_sid_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_sid_changed, submessage_arena);
    }
    set_has_room_sid_changed();
    _impl_.message_.room_sid_changed_ = room_sid_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.room_sid_changed)
}
void RoomEvent::set_allocated_participant_metadata_changed(::livekit::proto::ParticipantMetadataChanged* participant_metadata_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (participant_metadata_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant_metadata_changed);
    if (message_arena != submessage_arena) {
      participant_metadata_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_metadata_changed, submessage_arena);
    }
    set_has_participant_metadata_changed();
    _impl_.message_.participant_metadata_changed_ = participant_metadata_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.participant_metadata_changed)
}
void RoomEvent::set_allocated_participant_name_changed(::livekit::proto::ParticipantNameChanged* participant_name_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (participant_name_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant_name_changed);
    if (message_arena != submessage_arena) {
      participant_name_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_name_changed, submessage_arena);
    }
    set_has_participant_name_changed();
    _impl_.message_.participant_name_changed_ = participant_name_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.participant_name_changed)
}
void RoomEvent::set_allocated_participant_attributes_changed(::livekit::proto::ParticipantAttributesChanged* participant_attributes_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (participant_attributes_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant_attributes_changed);
    if (message_arena != submessage_arena) {
      participant_attributes_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_attributes_changed, submessage_arena);
    }
    set_has_participant_attributes_changed();
    _impl_.message_.participant_attributes_changed_ = participant_attributes_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.participant_attributes_changed)
}
void RoomEvent::set_allocated_connection_quality_changed(::livekit::proto::ConnectionQualityChanged* connection_quality_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connection_quality_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_quality_changed);
    if (message_arena != submessage_arena) {
      connection_quality_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_quality_changed, submessage_arena);
    }
    set_has_connection_quality_changed();
    _impl_.message_.connection_quality_changed_ = connection_quality_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.connection_quality_changed)
}
void RoomEvent::set_allocated_connection_state_changed(::livekit::proto::ConnectionStateChanged* connection_state_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connection_state_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_state_changed);
    if (message_arena != submessage_arena) {
      connection_state_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_state_changed, submessage_arena);
    }
    set_has_connection_state_changed();
    _impl_.message_.connection_state_changed_ = connection_state_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.connection_state_changed)
}
void RoomEvent::set_allocated_disconnected(::livekit::proto::Disconnected* disconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (disconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disconnected);
    if (message_arena != submessage_arena) {
      disconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnected, submessage_arena);
    }
    set_has_disconnected();
    _impl_.message_.disconnected_ = disconnected;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.disconnected)
}
void RoomEvent::set_allocated_reconnecting(::livekit::proto::Reconnecting* reconnecting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (reconnecting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reconnecting);
    if (message_arena != submessage_arena) {
      reconnecting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnecting, submessage_arena);
    }
    set_has_reconnecting();
    _impl_.message_.reconnecting_ = reconnecting;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.reconnecting)
}
void RoomEvent::set_allocated_reconnected(::livekit::proto::Reconnected* reconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (reconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reconnected);
    if (message_arena != submessage_arena) {
      reconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnected, submessage_arena);
    }
    set_has_reconnected();
    _impl_.message_.reconnected_ = reconnected;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.reconnected)
}
void RoomEvent::set_allocated_e2ee_state_changed(::livekit::proto::E2eeStateChanged* e2ee_state_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (e2ee_state_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(e2ee_state_changed);
    if (message_arena != submessage_arena) {
      e2ee_state_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e2ee_state_changed, submessage_arena);
    }
    set_has_e2ee_state_changed();
    _impl_.message_.e2ee_state_changed_ = e2ee_state_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.e2ee_state_changed)
}
void RoomEvent::set_allocated_eos(::livekit::proto::RoomEOS* eos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (eos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eos);
    if (message_arena != submessage_arena) {
      eos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eos, submessage_arena);
    }
    set_has_eos();
    _impl_.message_.eos_ = eos;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.eos)
}
void RoomEvent::set_allocated_data_packet_received(::livekit::proto::DataPacketReceived* data_packet_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (data_packet_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_packet_received);
    if (message_arena != submessage_arena) {
      data_packet_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_packet_received, submessage_arena);
    }
    set_has_data_packet_received();
    _impl_.message_.data_packet_received_ = data_packet_received;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.data_packet_received)
}
void RoomEvent::set_allocated_transcription_received(::livekit::proto::TranscriptionReceived* transcription_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (transcription_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transcription_received);
    if (message_arena != submessage_arena) {
      transcription_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcription_received, submessage_arena);
    }
    set_has_transcription_received();
    _impl_.message_.transcription_received_ = transcription_received;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.transcription_received)
}
void RoomEvent::set_allocated_chat_message(::livekit::proto::ChatMessageReceived* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    _impl_.message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.chat_message)
}
void RoomEvent::set_allocated_stream_header_received(::livekit::proto::DataStreamHeaderReceived* stream_header_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_header_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_header_received);
    if (message_arena != submessage_arena) {
      stream_header_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_header_received, submessage_arena);
    }
    set_has_stream_header_received();
    _impl_.message_.stream_header_received_ = stream_header_received;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.stream_header_received)
}
void RoomEvent::set_allocated_stream_chunk_received(::livekit::proto::DataStreamChunkReceived* stream_chunk_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_chunk_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_chunk_received);
    if (message_arena != submessage_arena) {
      stream_chunk_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_chunk_received, submessage_arena);
    }
    set_has_stream_chunk_received();
    _impl_.message_.stream_chunk_received_ = stream_chunk_received;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.stream_chunk_received)
}
void RoomEvent::set_allocated_stream_trailer_received(::livekit::proto::DataStreamTrailerReceived* stream_trailer_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_trailer_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_trailer_received);
    if (message_arena != submessage_arena) {
      stream_trailer_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_trailer_received, submessage_arena);
    }
    set_has_stream_trailer_received();
    _impl_.message_.stream_trailer_received_ = stream_trailer_received;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.stream_trailer_received)
}
void RoomEvent::set_allocated_data_channel_low_threshold_changed(::livekit::proto::DataChannelBufferedAmountLowThresholdChanged* data_channel_low_threshold_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (data_channel_low_threshold_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_channel_low_threshold_changed);
    if (message_arena != submessage_arena) {
      data_channel_low_threshold_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_channel_low_threshold_changed, submessage_arena);
    }
    set_has_data_channel_low_threshold_changed();
    _impl_.message_.data_channel_low_threshold_changed_ = data_channel_low_threshold_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.RoomEvent.data_channel_low_threshold_changed)
}
RoomEvent::RoomEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RoomEvent)
}
RoomEvent::RoomEvent(const RoomEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.room_handle_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_handle_ = from._impl_.room_handle_;
  clear_has_message();
  switch (from.message_case()) {
    case kParticipantConnected: {
      _this->_internal_mutable_participant_connected()->::livekit::proto::ParticipantConnected::MergeFrom(
          from._internal_participant_connected());
      break;
    }
    case kParticipantDisconnected: {
      _this->_internal_mutable_participant_disconnected()->::livekit::proto::ParticipantDisconnected::MergeFrom(
          from._internal_participant_disconnected());
      break;
    }
    case kLocalTrackPublished: {
      _this->_internal_mutable_local_track_published()->::livekit::proto::LocalTrackPublished::MergeFrom(
          from._internal_local_track_published());
      break;
    }
    case kLocalTrackUnpublished: {
      _this->_internal_mutable_local_track_unpublished()->::livekit::proto::LocalTrackUnpublished::MergeFrom(
          from._internal_local_track_unpublished());
      break;
    }
    case kLocalTrackSubscribed: {
      _this->_internal_mutable_local_track_subscribed()->::livekit::proto::LocalTrackSubscribed::MergeFrom(
          from._internal_local_track_subscribed());
      break;
    }
    case kTrackPublished: {
      _this->_internal_mutable_track_published()->::livekit::proto::TrackPublished::MergeFrom(
          from._internal_track_published());
      break;
    }
    case kTrackUnpublished: {
      _this->_internal_mutable_track_unpublished()->::livekit::proto::TrackUnpublished::MergeFrom(
          from._internal_track_unpublished());
      break;
    }
    case kTrackSubscribed: {
      _this->_internal_mutable_track_subscribed()->::livekit::proto::TrackSubscribed::MergeFrom(
          from._internal_track_subscribed());
      break;
    }
    case kTrackUnsubscribed: {
      _this->_internal_mutable_track_unsubscribed()->::livekit::proto::TrackUnsubscribed::MergeFrom(
          from._internal_track_unsubscribed());
      break;
    }
    case kTrackSubscriptionFailed: {
      _this->_internal_mutable_track_subscription_failed()->::livekit::proto::TrackSubscriptionFailed::MergeFrom(
          from._internal_track_subscription_failed());
      break;
    }
    case kTrackMuted: {
      _this->_internal_mutable_track_muted()->::livekit::proto::TrackMuted::MergeFrom(
          from._internal_track_muted());
      break;
    }
    case kTrackUnmuted: {
      _this->_internal_mutable_track_unmuted()->::livekit::proto::TrackUnmuted::MergeFrom(
          from._internal_track_unmuted());
      break;
    }
    case kActiveSpeakersChanged: {
      _this->_internal_mutable_active_speakers_changed()->::livekit::proto::ActiveSpeakersChanged::MergeFrom(
          from._internal_active_speakers_changed());
      break;
    }
    case kRoomMetadataChanged: {
      _this->_internal_mutable_room_metadata_changed()->::livekit::proto::RoomMetadataChanged::MergeFrom(
          from._internal_room_metadata_changed());
      break;
    }
    case kRoomSidChanged: {
      _this->_internal_mutable_room_sid_changed()->::livekit::proto::RoomSidChanged::MergeFrom(
          from._internal_room_sid_changed());
      break;
    }
    case kParticipantMetadataChanged: {
      _this->_internal_mutable_participant_metadata_changed()->::livekit::proto::ParticipantMetadataChanged::MergeFrom(
          from._internal_participant_metadata_changed());
      break;
    }
    case kParticipantNameChanged: {
      _this->_internal_mutable_participant_name_changed()->::livekit::proto::ParticipantNameChanged::MergeFrom(
          from._internal_participant_name_changed());
      break;
    }
    case kParticipantAttributesChanged: {
      _this->_internal_mutable_participant_attributes_changed()->::livekit::proto::ParticipantAttributesChanged::MergeFrom(
          from._internal_participant_attributes_changed());
      break;
    }
    case kConnectionQualityChanged: {
      _this->_internal_mutable_connection_quality_changed()->::livekit::proto::ConnectionQualityChanged::MergeFrom(
          from._internal_connection_quality_changed());
      break;
    }
    case kConnectionStateChanged: {
      _this->_internal_mutable_connection_state_changed()->::livekit::proto::ConnectionStateChanged::MergeFrom(
          from._internal_connection_state_changed());
      break;
    }
    case kDisconnected: {
      _this->_internal_mutable_disconnected()->::livekit::proto::Disconnected::MergeFrom(
          from._internal_disconnected());
      break;
    }
    case kReconnecting: {
      _this->_internal_mutable_reconnecting()->::livekit::proto::Reconnecting::MergeFrom(
          from._internal_reconnecting());
      break;
    }
    case kReconnected: {
      _this->_internal_mutable_reconnected()->::livekit::proto::Reconnected::MergeFrom(
          from._internal_reconnected());
      break;
    }
    case kE2EeStateChanged: {
      _this->_internal_mutable_e2ee_state_changed()->::livekit::proto::E2eeStateChanged::MergeFrom(
          from._internal_e2ee_state_changed());
      break;
    }
    case kEos: {
      _this->_internal_mutable_eos()->::livekit::proto::RoomEOS::MergeFrom(
          from._internal_eos());
      break;
    }
    case kDataPacketReceived: {
      _this->_internal_mutable_data_packet_received()->::livekit::proto::DataPacketReceived::MergeFrom(
          from._internal_data_packet_received());
      break;
    }
    case kTranscriptionReceived: {
      _this->_internal_mutable_transcription_received()->::livekit::proto::TranscriptionReceived::MergeFrom(
          from._internal_transcription_received());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::proto::ChatMessageReceived::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kStreamHeaderReceived: {
      _this->_internal_mutable_stream_header_received()->::livekit::proto::DataStreamHeaderReceived::MergeFrom(
          from._internal_stream_header_received());
      break;
    }
    case kStreamChunkReceived: {
      _this->_internal_mutable_stream_chunk_received()->::livekit::proto::DataStreamChunkReceived::MergeFrom(
          from._internal_stream_chunk_received());
      break;
    }
    case kStreamTrailerReceived: {
      _this->_internal_mutable_stream_trailer_received()->::livekit::proto::DataStreamTrailerReceived::MergeFrom(
          from._internal_stream_trailer_received());
      break;
    }
    case kDataChannelLowThresholdChanged: {
      _this->_internal_mutable_data_channel_low_threshold_changed()->::livekit::proto::DataChannelBufferedAmountLowThresholdChanged::MergeFrom(
          from._internal_data_channel_low_threshold_changed());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RoomEvent)
}

inline void RoomEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.room_handle_){uint64_t{0u}}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

RoomEvent::~RoomEvent() {
  // @@protoc_insertion_point(destructor:livekit.proto.RoomEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void RoomEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomEvent::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.RoomEvent)
  switch (message_case()) {
    case kParticipantConnected: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.participant_connected_;
      }
      break;
    }
    case kParticipantDisconnected: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.participant_disconnected_;
      }
      break;
    }
    case kLocalTrackPublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.local_track_published_;
      }
      break;
    }
    case kLocalTrackUnpublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.local_track_unpublished_;
      }
      break;
    }
    case kLocalTrackSubscribed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.local_track_subscribed_;
      }
      break;
    }
    case kTrackPublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_published_;
      }
      break;
    }
    case kTrackUnpublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_unpublished_;
      }
      break;
    }
    case kTrackSubscribed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_subscribed_;
      }
      break;
    }
    case kTrackUnsubscribed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_unsubscribed_;
      }
      break;
    }
    case kTrackSubscriptionFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_subscription_failed_;
      }
      break;
    }
    case kTrackMuted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_muted_;
      }
      break;
    }
    case kTrackUnmuted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_unmuted_;
      }
      break;
    }
    case kActiveSpeakersChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.active_speakers_changed_;
      }
      break;
    }
    case kRoomMetadataChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.room_metadata_changed_;
      }
      break;
    }
    case kRoomSidChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.room_sid_changed_;
      }
      break;
    }
    case kParticipantMetadataChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.participant_metadata_changed_;
      }
      break;
    }
    case kParticipantNameChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.participant_name_changed_;
      }
      break;
    }
    case kParticipantAttributesChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.participant_attributes_changed_;
      }
      break;
    }
    case kConnectionQualityChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connection_quality_changed_;
      }
      break;
    }
    case kConnectionStateChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connection_state_changed_;
      }
      break;
    }
    case kDisconnected: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.disconnected_;
      }
      break;
    }
    case kReconnecting: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.reconnecting_;
      }
      break;
    }
    case kReconnected: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.reconnected_;
      }
      break;
    }
    case kE2EeStateChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.e2ee_state_changed_;
      }
      break;
    }
    case kEos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.eos_;
      }
      break;
    }
    case kDataPacketReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.data_packet_received_;
      }
      break;
    }
    case kTranscriptionReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.transcription_received_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.chat_message_;
      }
      break;
    }
    case kStreamHeaderReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_header_received_;
      }
      break;
    }
    case kStreamChunkReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_chunk_received_;
      }
      break;
    }
    case kStreamTrailerReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_trailer_received_;
      }
      break;
    }
    case kDataChannelLowThresholdChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.data_channel_low_threshold_changed_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void RoomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RoomEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_handle_ = uint64_t{0u};
  clear_message();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 room_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_room_handle(&has_bits);
          _impl_.room_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ParticipantConnected participant_connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_connected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ParticipantDisconnected participant_disconnected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_disconnected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LocalTrackPublished local_track_published = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_track_published(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LocalTrackUnpublished local_track_unpublished = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_track_unpublished(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.LocalTrackSubscribed local_track_subscribed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_track_subscribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackPublished track_published = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_published(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackUnpublished track_unpublished = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_unpublished(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackSubscribed track_subscribed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_subscribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackUnsubscribed track_unsubscribed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_unsubscribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackSubscriptionFailed track_subscription_failed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_subscription_failed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackMuted track_muted = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_muted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TrackUnmuted track_unmuted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_unmuted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ActiveSpeakersChanged active_speakers_changed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_speakers_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RoomMetadataChanged room_metadata_changed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_metadata_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RoomSidChanged room_sid_changed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_sid_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ParticipantMetadataChanged participant_metadata_changed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_metadata_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ParticipantNameChanged participant_name_changed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_name_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ParticipantAttributesChanged participant_attributes_changed = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_attributes_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ConnectionQualityChanged connection_quality_changed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_quality_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ConnectionStateChanged connection_state_changed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_state_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.Disconnected disconnected = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.Reconnecting reconnecting = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnecting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.Reconnected reconnected = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.E2eeStateChanged e2ee_state_changed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2ee_state_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.RoomEOS eos = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_eos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataPacketReceived data_packet_received = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_packet_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.TranscriptionReceived transcription_received = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_transcription_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.ChatMessageReceived chat_message = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataStreamHeaderReceived stream_header_received = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_header_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataStreamChunkReceived stream_chunk_received = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_chunk_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataStreamTrailerReceived stream_trailer_received = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_trailer_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataChannelBufferedAmountLowThresholdChanged data_channel_low_threshold_changed = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_channel_low_threshold_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RoomEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 room_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_room_handle(), target);
  }

  switch (message_case()) {
    case kParticipantConnected: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::participant_connected(this),
          _Internal::participant_connected(this).GetCachedSize(), target, stream);
      break;
    }
    case kParticipantDisconnected: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::participant_disconnected(this),
          _Internal::participant_disconnected(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocalTrackPublished: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::local_track_published(this),
          _Internal::local_track_published(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocalTrackUnpublished: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::local_track_unpublished(this),
          _Internal::local_track_unpublished(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocalTrackSubscribed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::local_track_subscribed(this),
          _Internal::local_track_subscribed(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackPublished: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::track_published(this),
          _Internal::track_published(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackUnpublished: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::track_unpublished(this),
          _Internal::track_unpublished(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackSubscribed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::track_subscribed(this),
          _Internal::track_subscribed(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackUnsubscribed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::track_unsubscribed(this),
          _Internal::track_unsubscribed(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackSubscriptionFailed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::track_subscription_failed(this),
          _Internal::track_subscription_failed(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackMuted: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::track_muted(this),
          _Internal::track_muted(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackUnmuted: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::track_unmuted(this),
          _Internal::track_unmuted(this).GetCachedSize(), target, stream);
      break;
    }
    case kActiveSpeakersChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::active_speakers_changed(this),
          _Internal::active_speakers_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kRoomMetadataChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::room_metadata_changed(this),
          _Internal::room_metadata_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kRoomSidChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::room_sid_changed(this),
          _Internal::room_sid_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kParticipantMetadataChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::participant_metadata_changed(this),
          _Internal::participant_metadata_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kParticipantNameChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::participant_name_changed(this),
          _Internal::participant_name_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kParticipantAttributesChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::participant_attributes_changed(this),
          _Internal::participant_attributes_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnectionQualityChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::connection_quality_changed(this),
          _Internal::connection_quality_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnectionStateChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::connection_state_changed(this),
          _Internal::connection_state_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kDisconnected: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::disconnected(this),
          _Internal::disconnected(this).GetCachedSize(), target, stream);
      break;
    }
    case kReconnecting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::reconnecting(this),
          _Internal::reconnecting(this).GetCachedSize(), target, stream);
      break;
    }
    case kReconnected: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::reconnected(this),
          _Internal::reconnected(this).GetCachedSize(), target, stream);
      break;
    }
    case kE2EeStateChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::e2ee_state_changed(this),
          _Internal::e2ee_state_changed(this).GetCachedSize(), target, stream);
      break;
    }
    case kEos: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::eos(this),
          _Internal::eos(this).GetCachedSize(), target, stream);
      break;
    }
    case kDataPacketReceived: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::data_packet_received(this),
          _Internal::data_packet_received(this).GetCachedSize(), target, stream);
      break;
    }
    case kTranscriptionReceived: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::transcription_received(this),
          _Internal::transcription_received(this).GetCachedSize(), target, stream);
      break;
    }
    case kChatMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::chat_message(this),
          _Internal::chat_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamHeaderReceived: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::stream_header_received(this),
          _Internal::stream_header_received(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamChunkReceived: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, _Internal::stream_chunk_received(this),
          _Internal::stream_chunk_received(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamTrailerReceived: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, _Internal::stream_trailer_received(this),
          _Internal::stream_trailer_received(this).GetCachedSize(), target, stream);
      break;
    }
    case kDataChannelLowThresholdChanged: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::data_channel_low_threshold_changed(this),
          _Internal::data_channel_low_threshold_changed(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RoomEvent)
  return target;
}

size_t RoomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RoomEvent)
  size_t total_size = 0;

  // required uint64 room_handle = 1;
  if (_internal_has_room_handle()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_room_handle());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.proto.ParticipantConnected participant_connected = 2;
    case kParticipantConnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.participant_connected_);
      break;
    }
    // .livekit.proto.ParticipantDisconnected participant_disconnected = 3;
    case kParticipantDisconnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.participant_disconnected_);
      break;
    }
    // .livekit.proto.LocalTrackPublished local_track_published = 4;
    case kLocalTrackPublished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.local_track_published_);
      break;
    }
    // .livekit.proto.LocalTrackUnpublished local_track_unpublished = 5;
    case kLocalTrackUnpublished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.local_track_unpublished_);
      break;
    }
    // .livekit.proto.LocalTrackSubscribed local_track_subscribed = 6;
    case kLocalTrackSubscribed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.local_track_subscribed_);
      break;
    }
    // .livekit.proto.TrackPublished track_published = 7;
    case kTrackPublished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_published_);
      break;
    }
    // .livekit.proto.TrackUnpublished track_unpublished = 8;
    case kTrackUnpublished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_unpublished_);
      break;
    }
    // .livekit.proto.TrackSubscribed track_subscribed = 9;
    case kTrackSubscribed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_subscribed_);
      break;
    }
    // .livekit.proto.TrackUnsubscribed track_unsubscribed = 10;
    case kTrackUnsubscribed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_unsubscribed_);
      break;
    }
    // .livekit.proto.TrackSubscriptionFailed track_subscription_failed = 11;
    case kTrackSubscriptionFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_subscription_failed_);
      break;
    }
    // .livekit.proto.TrackMuted track_muted = 12;
    case kTrackMuted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_muted_);
      break;
    }
    // .livekit.proto.TrackUnmuted track_unmuted = 13;
    case kTrackUnmuted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_unmuted_);
      break;
    }
    // .livekit.proto.ActiveSpeakersChanged active_speakers_changed = 14;
    case kActiveSpeakersChanged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.active_speakers_changed_);
      break;
    }
    // .livekit.proto.RoomMetadataChanged room_metadata_changed = 15;
    case kRoomMetadataChanged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.room_metadata_changed_);
      break;
    }
    // .livekit.proto.RoomSidChanged room_sid_changed = 16;
    case kRoomSidChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.room_sid_changed_);
      break;
    }
    // .livekit.proto.ParticipantMetadataChanged participant_metadata_changed = 17;
    case kParticipantMetadataChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.participant_metadata_changed_);
      break;
    }
    // .livekit.proto.ParticipantNameChanged participant_name_changed = 18;
    case kParticipantNameChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.participant_name_changed_);
      break;
    }
    // .livekit.proto.ParticipantAttributesChanged participant_attributes_changed = 19;
    case kParticipantAttributesChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.participant_attributes_changed_);
      break;
    }
    // .livekit.proto.ConnectionQualityChanged connection_quality_changed = 20;
    case kConnectionQualityChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connection_quality_changed_);
      break;
    }
    // .livekit.proto.ConnectionStateChanged connection_state_changed = 21;
    case kConnectionStateChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connection_state_changed_);
      break;
    }
    // .livekit.proto.Disconnected disconnected = 22;
    case kDisconnected: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.disconnected_);
      break;
    }
    // .livekit.proto.Reconnecting reconnecting = 23;
    case kReconnecting: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.reconnecting_);
      break;
    }
    // .livekit.proto.Reconnected reconnected = 24;
    case kReconnected: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.reconnected_);
      break;
    }
    // .livekit.proto.E2eeStateChanged e2ee_state_changed = 25;
    case kE2EeStateChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.e2ee_state_changed_);
      break;
    }
    // .livekit.proto.RoomEOS eos = 26;
    case kEos: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.eos_);
      break;
    }
    // .livekit.proto.DataPacketReceived data_packet_received = 27;
    case kDataPacketReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.data_packet_received_);
      break;
    }
    // .livekit.proto.TranscriptionReceived transcription_received = 28;
    case kTranscriptionReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.transcription_received_);
      break;
    }
    // .livekit.proto.ChatMessageReceived chat_message = 29;
    case kChatMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.chat_message_);
      break;
    }
    // .livekit.proto.DataStreamHeaderReceived stream_header_received = 30;
    case kStreamHeaderReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_header_received_);
      break;
    }
    // .livekit.proto.DataStreamChunkReceived stream_chunk_received = 31;
    case kStreamChunkReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_chunk_received_);
      break;
    }
    // .livekit.proto.DataStreamTrailerReceived stream_trailer_received = 32;
    case kStreamTrailerReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_trailer_received_);
      break;
    }
    // .livekit.proto.DataChannelBufferedAmountLowThresholdChanged data_channel_low_threshold_changed = 33;
    case kDataChannelLowThresholdChanged: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.data_channel_low_threshold_changed_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomEvent::GetClassData() const { return &_class_data_; }


void RoomEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomEvent*>(&to_msg);
  auto& from = static_cast<const RoomEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RoomEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room_handle()) {
    _this->_internal_set_room_handle(from._internal_room_handle());
  }
  switch (from.message_case()) {
    case kParticipantConnected: {
      _this->_internal_mutable_participant_connected()->::livekit::proto::ParticipantConnected::MergeFrom(
          from._internal_participant_connected());
      break;
    }
    case kParticipantDisconnected: {
      _this->_internal_mutable_participant_disconnected()->::livekit::proto::ParticipantDisconnected::MergeFrom(
          from._internal_participant_disconnected());
      break;
    }
    case kLocalTrackPublished: {
      _this->_internal_mutable_local_track_published()->::livekit::proto::LocalTrackPublished::MergeFrom(
          from._internal_local_track_published());
      break;
    }
    case kLocalTrackUnpublished: {
      _this->_internal_mutable_local_track_unpublished()->::livekit::proto::LocalTrackUnpublished::MergeFrom(
          from._internal_local_track_unpublished());
      break;
    }
    case kLocalTrackSubscribed: {
      _this->_internal_mutable_local_track_subscribed()->::livekit::proto::LocalTrackSubscribed::MergeFrom(
          from._internal_local_track_subscribed());
      break;
    }
    case kTrackPublished: {
      _this->_internal_mutable_track_published()->::livekit::proto::TrackPublished::MergeFrom(
          from._internal_track_published());
      break;
    }
    case kTrackUnpublished: {
      _this->_internal_mutable_track_unpublished()->::livekit::proto::TrackUnpublished::MergeFrom(
          from._internal_track_unpublished());
      break;
    }
    case kTrackSubscribed: {
      _this->_internal_mutable_track_subscribed()->::livekit::proto::TrackSubscribed::MergeFrom(
          from._internal_track_subscribed());
      break;
    }
    case kTrackUnsubscribed: {
      _this->_internal_mutable_track_unsubscribed()->::livekit::proto::TrackUnsubscribed::MergeFrom(
          from._internal_track_unsubscribed());
      break;
    }
    case kTrackSubscriptionFailed: {
      _this->_internal_mutable_track_subscription_failed()->::livekit::proto::TrackSubscriptionFailed::MergeFrom(
          from._internal_track_subscription_failed());
      break;
    }
    case kTrackMuted: {
      _this->_internal_mutable_track_muted()->::livekit::proto::TrackMuted::MergeFrom(
          from._internal_track_muted());
      break;
    }
    case kTrackUnmuted: {
      _this->_internal_mutable_track_unmuted()->::livekit::proto::TrackUnmuted::MergeFrom(
          from._internal_track_unmuted());
      break;
    }
    case kActiveSpeakersChanged: {
      _this->_internal_mutable_active_speakers_changed()->::livekit::proto::ActiveSpeakersChanged::MergeFrom(
          from._internal_active_speakers_changed());
      break;
    }
    case kRoomMetadataChanged: {
      _this->_internal_mutable_room_metadata_changed()->::livekit::proto::RoomMetadataChanged::MergeFrom(
          from._internal_room_metadata_changed());
      break;
    }
    case kRoomSidChanged: {
      _this->_internal_mutable_room_sid_changed()->::livekit::proto::RoomSidChanged::MergeFrom(
          from._internal_room_sid_changed());
      break;
    }
    case kParticipantMetadataChanged: {
      _this->_internal_mutable_participant_metadata_changed()->::livekit::proto::ParticipantMetadataChanged::MergeFrom(
          from._internal_participant_metadata_changed());
      break;
    }
    case kParticipantNameChanged: {
      _this->_internal_mutable_participant_name_changed()->::livekit::proto::ParticipantNameChanged::MergeFrom(
          from._internal_participant_name_changed());
      break;
    }
    case kParticipantAttributesChanged: {
      _this->_internal_mutable_participant_attributes_changed()->::livekit::proto::ParticipantAttributesChanged::MergeFrom(
          from._internal_participant_attributes_changed());
      break;
    }
    case kConnectionQualityChanged: {
      _this->_internal_mutable_connection_quality_changed()->::livekit::proto::ConnectionQualityChanged::MergeFrom(
          from._internal_connection_quality_changed());
      break;
    }
    case kConnectionStateChanged: {
      _this->_internal_mutable_connection_state_changed()->::livekit::proto::ConnectionStateChanged::MergeFrom(
          from._internal_connection_state_changed());
      break;
    }
    case kDisconnected: {
      _this->_internal_mutable_disconnected()->::livekit::proto::Disconnected::MergeFrom(
          from._internal_disconnected());
      break;
    }
    case kReconnecting: {
      _this->_internal_mutable_reconnecting()->::livekit::proto::Reconnecting::MergeFrom(
          from._internal_reconnecting());
      break;
    }
    case kReconnected: {
      _this->_internal_mutable_reconnected()->::livekit::proto::Reconnected::MergeFrom(
          from._internal_reconnected());
      break;
    }
    case kE2EeStateChanged: {
      _this->_internal_mutable_e2ee_state_changed()->::livekit::proto::E2eeStateChanged::MergeFrom(
          from._internal_e2ee_state_changed());
      break;
    }
    case kEos: {
      _this->_internal_mutable_eos()->::livekit::proto::RoomEOS::MergeFrom(
          from._internal_eos());
      break;
    }
    case kDataPacketReceived: {
      _this->_internal_mutable_data_packet_received()->::livekit::proto::DataPacketReceived::MergeFrom(
          from._internal_data_packet_received());
      break;
    }
    case kTranscriptionReceived: {
      _this->_internal_mutable_transcription_received()->::livekit::proto::TranscriptionReceived::MergeFrom(
          from._internal_transcription_received());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::livekit::proto::ChatMessageReceived::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kStreamHeaderReceived: {
      _this->_internal_mutable_stream_header_received()->::livekit::proto::DataStreamHeaderReceived::MergeFrom(
          from._internal_stream_header_received());
      break;
    }
    case kStreamChunkReceived: {
      _this->_internal_mutable_stream_chunk_received()->::livekit::proto::DataStreamChunkReceived::MergeFrom(
          from._internal_stream_chunk_received());
      break;
    }
    case kStreamTrailerReceived: {
      _this->_internal_mutable_stream_trailer_received()->::livekit::proto::DataStreamTrailerReceived::MergeFrom(
          from._internal_stream_trailer_received());
      break;
    }
    case kDataChannelLowThresholdChanged: {
      _this->_internal_mutable_data_channel_low_threshold_changed()->::livekit::proto::DataChannelBufferedAmountLowThresholdChanged::MergeFrom(
          from._internal_data_channel_low_threshold_changed());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomEvent::CopyFrom(const RoomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (message_case()) {
    case kParticipantConnected: {
      if (_internal_has_participant_connected()) {
        if (!_impl_.message_.participant_connected_->IsInitialized()) return false;
      }
      break;
    }
    case kParticipantDisconnected: {
      if (_internal_has_participant_disconnected()) {
        if (!_impl_.message_.participant_disconnected_->IsInitialized()) return false;
      }
      break;
    }
    case kLocalTrackPublished: {
      if (_internal_has_local_track_published()) {
        if (!_impl_.message_.local_track_published_->IsInitialized()) return false;
      }
      break;
    }
    case kLocalTrackUnpublished: {
      if (_internal_has_local_track_unpublished()) {
        if (!_impl_.message_.local_track_unpublished_->IsInitialized()) return false;
      }
      break;
    }
    case kLocalTrackSubscribed: {
      if (_internal_has_local_track_subscribed()) {
        if (!_impl_.message_.local_track_subscribed_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackPublished: {
      if (_internal_has_track_published()) {
        if (!_impl_.message_.track_published_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackUnpublished: {
      if (_internal_has_track_unpublished()) {
        if (!_impl_.message_.track_unpublished_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackSubscribed: {
      if (_internal_has_track_subscribed()) {
        if (!_impl_.message_.track_subscribed_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackUnsubscribed: {
      if (_internal_has_track_unsubscribed()) {
        if (!_impl_.message_.track_unsubscribed_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackSubscriptionFailed: {
      if (_internal_has_track_subscription_failed()) {
        if (!_impl_.message_.track_subscription_failed_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackMuted: {
      if (_internal_has_track_muted()) {
        if (!_impl_.message_.track_muted_->IsInitialized()) return false;
      }
      break;
    }
    case kTrackUnmuted: {
      if (_internal_has_track_unmuted()) {
        if (!_impl_.message_.track_unmuted_->IsInitialized()) return false;
      }
      break;
    }
    case kActiveSpeakersChanged: {
      break;
    }
    case kRoomMetadataChanged: {
      if (_internal_has_room_metadata_changed()) {
        if (!_impl_.message_.room_metadata_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kRoomSidChanged: {
      if (_internal_has_room_sid_changed()) {
        if (!_impl_.message_.room_sid_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kParticipantMetadataChanged: {
      if (_internal_has_participant_metadata_changed()) {
        if (!_impl_.message_.participant_metadata_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kParticipantNameChanged: {
      if (_internal_has_participant_name_changed()) {
        if (!_impl_.message_.participant_name_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kParticipantAttributesChanged: {
      if (_internal_has_participant_attributes_changed()) {
        if (!_impl_.message_.participant_attributes_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kConnectionQualityChanged: {
      if (_internal_has_connection_quality_changed()) {
        if (!_impl_.message_.connection_quality_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kConnectionStateChanged: {
      if (_internal_has_connection_state_changed()) {
        if (!_impl_.message_.connection_state_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kDisconnected: {
      if (_internal_has_disconnected()) {
        if (!_impl_.message_.disconnected_->IsInitialized()) return false;
      }
      break;
    }
    case kReconnecting: {
      break;
    }
    case kReconnected: {
      break;
    }
    case kE2EeStateChanged: {
      if (_internal_has_e2ee_state_changed()) {
        if (!_impl_.message_.e2ee_state_changed_->IsInitialized()) return false;
      }
      break;
    }
    case kEos: {
      break;
    }
    case kDataPacketReceived: {
      if (_internal_has_data_packet_received()) {
        if (!_impl_.message_.data_packet_received_->IsInitialized()) return false;
      }
      break;
    }
    case kTranscriptionReceived: {
      if (_internal_has_transcription_received()) {
        if (!_impl_.message_.transcription_received_->IsInitialized()) return false;
      }
      break;
    }
    case kChatMessage: {
      if (_internal_has_chat_message()) {
        if (!_impl_.message_.chat_message_->IsInitialized()) return false;
      }
      break;
    }
    case kStreamHeaderReceived: {
      if (_internal_has_stream_header_received()) {
        if (!_impl_.message_.stream_header_received_->IsInitialized()) return false;
      }
      break;
    }
    case kStreamChunkReceived: {
      if (_internal_has_stream_chunk_received()) {
        if (!_impl_.message_.stream_chunk_received_->IsInitialized()) return false;
      }
      break;
    }
    case kStreamTrailerReceived: {
      if (_internal_has_stream_trailer_received()) {
        if (!_impl_.message_.stream_trailer_received_->IsInitialized()) return false;
      }
      break;
    }
    case kDataChannelLowThresholdChanged: {
      if (_internal_has_data_channel_low_threshold_changed()) {
        if (!_impl_.message_.data_channel_low_threshold_changed_->IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void RoomEvent::InternalSwap(RoomEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.room_handle_, other->_impl_.room_handle_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[52]);
}

// ===================================================================

class RoomInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomInfo>()._impl_._has_bits_);
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lossy_dc_buffered_amount_low_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reliable_dc_buffered_amount_low_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.lossy_dc_buffered_amount_low_threshold_){}
    , decltype(_impl_.reliable_dc_buffered_amount_low_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sid()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lossy_dc_buffered_amount_low_threshold_, &from._impl_.lossy_dc_buffered_amount_low_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reliable_dc_buffered_amount_low_threshold_) -
    reinterpret_cast<char*>(&_impl_.lossy_dc_buffered_amount_low_threshold_)) + sizeof(_impl_.reliable_dc_buffered_amount_low_threshold_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RoomInfo)
}

inline void RoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.lossy_dc_buffered_amount_low_threshold_){uint64_t{0u}}
    , decltype(_impl_.reliable_dc_buffered_amount_low_threshold_){uint64_t{0u}}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:livekit.proto.RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
}

void RoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.lossy_dc_buffered_amount_low_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reliable_dc_buffered_amount_low_threshold_) -
        reinterpret_cast<char*>(&_impl_.lossy_dc_buffered_amount_low_threshold_)) + sizeof(_impl_.reliable_dc_buffered_amount_low_threshold_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RoomInfo.sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RoomInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RoomInfo.metadata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 lossy_dc_buffered_amount_low_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lossy_dc_buffered_amount_low_threshold(&has_bits);
          _impl_.lossy_dc_buffered_amount_low_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 reliable_dc_buffered_amount_low_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reliable_dc_buffered_amount_low_threshold(&has_bits);
          _impl_.reliable_dc_buffered_amount_low_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RoomInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RoomInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required string metadata = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RoomInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // required uint64 lossy_dc_buffered_amount_low_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lossy_dc_buffered_amount_low_threshold(), target);
  }

  // required uint64 reliable_dc_buffered_amount_low_threshold = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_reliable_dc_buffered_amount_low_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RoomInfo)
  return target;
}

size_t RoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RoomInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_metadata()) {
    // required string metadata = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  if (_internal_has_lossy_dc_buffered_amount_low_threshold()) {
    // required uint64 lossy_dc_buffered_amount_low_threshold = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lossy_dc_buffered_amount_low_threshold());
  }

  if (_internal_has_reliable_dc_buffered_amount_low_threshold()) {
    // required uint64 reliable_dc_buffered_amount_low_threshold = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reliable_dc_buffered_amount_low_threshold());
  }

  return total_size;
}
size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RoomInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string metadata = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());

    // required uint64 lossy_dc_buffered_amount_low_threshold = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lossy_dc_buffered_amount_low_threshold());

    // required uint64 reliable_dc_buffered_amount_low_threshold = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reliable_dc_buffered_amount_low_threshold());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo::GetClassData() const { return &_class_data_; }


void RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfo*>(&to_msg);
  auto& from = static_cast<const RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sid(from._internal_sid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lossy_dc_buffered_amount_low_threshold_ = from._impl_.lossy_dc_buffered_amount_low_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reliable_dc_buffered_amount_low_threshold_ = from._impl_.reliable_dc_buffered_amount_low_threshold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.reliable_dc_buffered_amount_low_threshold_)
      + sizeof(RoomInfo::_impl_.reliable_dc_buffered_amount_low_threshold_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.lossy_dc_buffered_amount_low_threshold_)>(
          reinterpret_cast<char*>(&_impl_.lossy_dc_buffered_amount_low_threshold_),
          reinterpret_cast<char*>(&other->_impl_.lossy_dc_buffered_amount_low_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[53]);
}

// ===================================================================

class OwnedRoom::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnedRoom>()._impl_._has_bits_);
  static const ::livekit::proto::FfiOwnedHandle& handle(const OwnedRoom* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RoomInfo& info(const OwnedRoom* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::FfiOwnedHandle&
OwnedRoom::_Internal::handle(const OwnedRoom* msg) {
  return *msg->_impl_.handle_;
}
const ::livekit::proto::RoomInfo&
OwnedRoom::_Internal::info(const OwnedRoom* msg) {
  return *msg->_impl_.info_;
}
void OwnedRoom::clear_handle() {
  if (_impl_.handle_ != nullptr) _impl_.handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OwnedRoom::OwnedRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.OwnedRoom)
}
OwnedRoom::OwnedRoom(const OwnedRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnedRoom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    _this->_impl_.handle_ = new ::livekit::proto::FfiOwnedHandle(*from._impl_.handle_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::livekit::proto::RoomInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.OwnedRoom)
}

inline void OwnedRoom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}
  };
}

OwnedRoom::~OwnedRoom() {
  // @@protoc_insertion_point(destructor:livekit.proto.OwnedRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnedRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.handle_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void OwnedRoom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnedRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.OwnedRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.handle_ != nullptr);
      _impl_.handle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnedRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.FfiOwnedHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.RoomInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnedRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.OwnedRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.FfiOwnedHandle handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::handle(this),
        _Internal::handle(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.RoomInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.OwnedRoom)
  return target;
}

size_t OwnedRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.OwnedRoom)
  size_t total_size = 0;

  if (_internal_has_handle()) {
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);
  }

  if (_internal_has_info()) {
    // required .livekit.proto.RoomInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t OwnedRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.OwnedRoom)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);

    // required .livekit.proto.RoomInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnedRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnedRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnedRoom::GetClassData() const { return &_class_data_; }


void OwnedRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnedRoom*>(&to_msg);
  auto& from = static_cast<const OwnedRoom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.OwnedRoom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handle()->::livekit::proto::FfiOwnedHandle::MergeFrom(
          from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::livekit::proto::RoomInfo::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnedRoom::CopyFrom(const OwnedRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.OwnedRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedRoom::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!_impl_.handle_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void OwnedRoom::InternalSwap(OwnedRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnedRoom, _impl_.info_)
      + sizeof(OwnedRoom::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(OwnedRoom, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnedRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[54]);
}

// ===================================================================

class ParticipantConnected::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantConnected>()._impl_._has_bits_);
  static const ::livekit::proto::OwnedParticipant& info(const ParticipantConnected* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::OwnedParticipant&
ParticipantConnected::_Internal::info(const ParticipantConnected* msg) {
  return *msg->_impl_.info_;
}
void ParticipantConnected::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ParticipantConnected::ParticipantConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantConnected)
}
ParticipantConnected::ParticipantConnected(const ParticipantConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantConnected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::livekit::proto::OwnedParticipant(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantConnected)
}

inline void ParticipantConnected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
  };
}

ParticipantConnected::~ParticipantConnected() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantConnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void ParticipantConnected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantConnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantConnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.OwnedParticipant info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantConnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantConnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.OwnedParticipant info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantConnected)
  return target;
}

size_t ParticipantConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantConnected)
  size_t total_size = 0;

  // required .livekit.proto.OwnedParticipant info = 1;
  if (_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantConnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantConnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantConnected::GetClassData() const { return &_class_data_; }


void ParticipantConnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantConnected*>(&to_msg);
  auto& from = static_cast<const ParticipantConnected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantConnected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::livekit::proto::OwnedParticipant::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantConnected::CopyFrom(const ParticipantConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantConnected::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void ParticipantConnected::InternalSwap(ParticipantConnected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantConnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[55]);
}

// ===================================================================

class ParticipantDisconnected::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantDisconnected>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ParticipantDisconnected::ParticipantDisconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantDisconnected)
}
ParticipantDisconnected::ParticipantDisconnected(const ParticipantDisconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantDisconnected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.disconnect_reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantDisconnected)
}

inline void ParticipantDisconnected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.disconnect_reason_){0}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantDisconnected::~ParticipantDisconnected() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantDisconnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantDisconnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
}

void ParticipantDisconnected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantDisconnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_.disconnect_reason_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantDisconnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantDisconnected.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DisconnectReason disconnect_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DisconnectReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::livekit::proto::DisconnectReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantDisconnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantDisconnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantDisconnected.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.DisconnectReason disconnect_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_disconnect_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantDisconnected)
  return target;
}

size_t ParticipantDisconnected::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ParticipantDisconnected)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_disconnect_reason()) {
    // required .livekit.proto.DisconnectReason disconnect_reason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
  }

  return total_size;
}
size_t ParticipantDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantDisconnected)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.DisconnectReason disconnect_reason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantDisconnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantDisconnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantDisconnected::GetClassData() const { return &_class_data_; }


void ParticipantDisconnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantDisconnected*>(&to_msg);
  auto& from = static_cast<const ParticipantDisconnected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantDisconnected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantDisconnected::CopyFrom(const ParticipantDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantDisconnected::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParticipantDisconnected::InternalSwap(ParticipantDisconnected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.disconnect_reason_, other->_impl_.disconnect_reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantDisconnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[56]);
}

// ===================================================================

class LocalTrackPublished::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrackPublished>()._impl_._has_bits_);
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LocalTrackPublished::LocalTrackPublished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LocalTrackPublished)
}
LocalTrackPublished::LocalTrackPublished(const LocalTrackPublished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTrackPublished* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LocalTrackPublished)
}

inline void LocalTrackPublished::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_sid_){}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalTrackPublished::~LocalTrackPublished() {
  // @@protoc_insertion_point(destructor:livekit.proto.LocalTrackPublished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrackPublished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void LocalTrackPublished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTrackPublished::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LocalTrackPublished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTrackPublished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LocalTrackPublished.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrackPublished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LocalTrackPublished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string track_sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LocalTrackPublished.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LocalTrackPublished)
  return target;
}

size_t LocalTrackPublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LocalTrackPublished)
  size_t total_size = 0;

  // required string track_sid = 1;
  if (_internal_has_track_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTrackPublished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTrackPublished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTrackPublished::GetClassData() const { return &_class_data_; }


void LocalTrackPublished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTrackPublished*>(&to_msg);
  auto& from = static_cast<const LocalTrackPublished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LocalTrackPublished)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_track_sid()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTrackPublished::CopyFrom(const LocalTrackPublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LocalTrackPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrackPublished::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LocalTrackPublished::InternalSwap(LocalTrackPublished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrackPublished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[57]);
}

// ===================================================================

class LocalTrackUnpublished::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrackUnpublished>()._impl_._has_bits_);
  static void set_has_publication_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LocalTrackUnpublished::LocalTrackUnpublished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LocalTrackUnpublished)
}
LocalTrackUnpublished::LocalTrackUnpublished(const LocalTrackUnpublished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTrackUnpublished* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publication_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publication_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publication_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publication_sid()) {
    _this->_impl_.publication_sid_.Set(from._internal_publication_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LocalTrackUnpublished)
}

inline void LocalTrackUnpublished::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publication_sid_){}
  };
  _impl_.publication_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publication_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalTrackUnpublished::~LocalTrackUnpublished() {
  // @@protoc_insertion_point(destructor:livekit.proto.LocalTrackUnpublished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrackUnpublished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publication_sid_.Destroy();
}

void LocalTrackUnpublished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTrackUnpublished::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LocalTrackUnpublished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.publication_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTrackUnpublished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string publication_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publication_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LocalTrackUnpublished.publication_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrackUnpublished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LocalTrackUnpublished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string publication_sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_publication_sid().data(), static_cast<int>(this->_internal_publication_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LocalTrackUnpublished.publication_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_publication_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LocalTrackUnpublished)
  return target;
}

size_t LocalTrackUnpublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LocalTrackUnpublished)
  size_t total_size = 0;

  // required string publication_sid = 1;
  if (_internal_has_publication_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publication_sid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTrackUnpublished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTrackUnpublished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTrackUnpublished::GetClassData() const { return &_class_data_; }


void LocalTrackUnpublished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTrackUnpublished*>(&to_msg);
  auto& from = static_cast<const LocalTrackUnpublished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LocalTrackUnpublished)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publication_sid()) {
    _this->_internal_set_publication_sid(from._internal_publication_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTrackUnpublished::CopyFrom(const LocalTrackUnpublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LocalTrackUnpublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrackUnpublished::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LocalTrackUnpublished::InternalSwap(LocalTrackUnpublished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publication_sid_, lhs_arena,
      &other->_impl_.publication_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrackUnpublished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[58]);
}

// ===================================================================

class LocalTrackSubscribed::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrackSubscribed>()._impl_._has_bits_);
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LocalTrackSubscribed::LocalTrackSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LocalTrackSubscribed)
}
LocalTrackSubscribed::LocalTrackSubscribed(const LocalTrackSubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTrackSubscribed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LocalTrackSubscribed)
}

inline void LocalTrackSubscribed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_sid_){}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalTrackSubscribed::~LocalTrackSubscribed() {
  // @@protoc_insertion_point(destructor:livekit.proto.LocalTrackSubscribed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrackSubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void LocalTrackSubscribed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTrackSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LocalTrackSubscribed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTrackSubscribed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.LocalTrackSubscribed.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrackSubscribed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LocalTrackSubscribed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string track_sid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.LocalTrackSubscribed.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LocalTrackSubscribed)
  return target;
}

size_t LocalTrackSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LocalTrackSubscribed)
  size_t total_size = 0;

  // required string track_sid = 2;
  if (_internal_has_track_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTrackSubscribed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTrackSubscribed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTrackSubscribed::GetClassData() const { return &_class_data_; }


void LocalTrackSubscribed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTrackSubscribed*>(&to_msg);
  auto& from = static_cast<const LocalTrackSubscribed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LocalTrackSubscribed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_track_sid()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTrackSubscribed::CopyFrom(const LocalTrackSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LocalTrackSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrackSubscribed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LocalTrackSubscribed::InternalSwap(LocalTrackSubscribed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrackSubscribed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[59]);
}

// ===================================================================

class TrackPublished::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackPublished>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::OwnedTrackPublication& publication(const TrackPublished* msg);
  static void set_has_publication(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::OwnedTrackPublication&
TrackPublished::_Internal::publication(const TrackPublished* msg) {
  return *msg->_impl_.publication_;
}
void TrackPublished::clear_publication() {
  if (_impl_.publication_ != nullptr) _impl_.publication_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrackPublished::TrackPublished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackPublished)
}
TrackPublished::TrackPublished(const TrackPublished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackPublished* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.publication_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_publication()) {
    _this->_impl_.publication_ = new ::livekit::proto::OwnedTrackPublication(*from._impl_.publication_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackPublished)
}

inline void TrackPublished::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.publication_){nullptr}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackPublished::~TrackPublished() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackPublished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackPublished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.publication_;
}

void TrackPublished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackPublished::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackPublished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.publication_ != nullptr);
      _impl_.publication_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPublished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackPublished.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.OwnedTrackPublication publication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_publication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPublished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackPublished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackPublished.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.OwnedTrackPublication publication = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::publication(this),
        _Internal::publication(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackPublished)
  return target;
}

size_t TrackPublished::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackPublished)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_publication()) {
    // required .livekit.proto.OwnedTrackPublication publication = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.publication_);
  }

  return total_size;
}
size_t TrackPublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackPublished)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.OwnedTrackPublication publication = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.publication_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPublished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackPublished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPublished::GetClassData() const { return &_class_data_; }


void TrackPublished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackPublished*>(&to_msg);
  auto& from = static_cast<const TrackPublished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackPublished)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_publication()->::livekit::proto::OwnedTrackPublication::MergeFrom(
          from._internal_publication());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPublished::CopyFrom(const TrackPublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPublished::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_publication()) {
    if (!_impl_.publication_->IsInitialized()) return false;
  }
  return true;
}

void TrackPublished::InternalSwap(TrackPublished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.publication_, other->_impl_.publication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPublished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[60]);
}

// ===================================================================

class TrackUnpublished::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackUnpublished>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_publication_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrackUnpublished::TrackUnpublished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackUnpublished)
}
TrackUnpublished::TrackUnpublished(const TrackUnpublished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackUnpublished* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.publication_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.publication_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publication_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publication_sid()) {
    _this->_impl_.publication_sid_.Set(from._internal_publication_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackUnpublished)
}

inline void TrackUnpublished::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.publication_sid_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.publication_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publication_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackUnpublished::~TrackUnpublished() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackUnpublished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackUnpublished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.publication_sid_.Destroy();
}

void TrackUnpublished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackUnpublished::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackUnpublished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.publication_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackUnpublished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackUnpublished.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string publication_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_publication_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackUnpublished.publication_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackUnpublished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackUnpublished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackUnpublished.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string publication_sid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_publication_sid().data(), static_cast<int>(this->_internal_publication_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackUnpublished.publication_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publication_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackUnpublished)
  return target;
}

size_t TrackUnpublished::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackUnpublished)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_publication_sid()) {
    // required string publication_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publication_sid());
  }

  return total_size;
}
size_t TrackUnpublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackUnpublished)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string publication_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publication_sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackUnpublished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackUnpublished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackUnpublished::GetClassData() const { return &_class_data_; }


void TrackUnpublished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackUnpublished*>(&to_msg);
  auto& from = static_cast<const TrackUnpublished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackUnpublished)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_publication_sid(from._internal_publication_sid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackUnpublished::CopyFrom(const TrackUnpublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackUnpublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackUnpublished::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackUnpublished::InternalSwap(TrackUnpublished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publication_sid_, lhs_arena,
      &other->_impl_.publication_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackUnpublished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[61]);
}

// ===================================================================

class TrackSubscribed::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackSubscribed>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::OwnedTrack& track(const TrackSubscribed* msg);
  static void set_has_track(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::OwnedTrack&
TrackSubscribed::_Internal::track(const TrackSubscribed* msg) {
  return *msg->_impl_.track_;
}
void TrackSubscribed::clear_track() {
  if (_impl_.track_ != nullptr) _impl_.track_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrackSubscribed::TrackSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackSubscribed)
}
TrackSubscribed::TrackSubscribed(const TrackSubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackSubscribed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::livekit::proto::OwnedTrack(*from._impl_.track_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackSubscribed)
}

inline void TrackSubscribed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_){nullptr}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackSubscribed::~TrackSubscribed() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackSubscribed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackSubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.track_;
}

void TrackSubscribed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackSubscribed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.track_ != nullptr);
      _impl_.track_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackSubscribed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackSubscribed.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.OwnedTrack track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackSubscribed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackSubscribed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackSubscribed.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.OwnedTrack track = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackSubscribed)
  return target;
}

size_t TrackSubscribed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackSubscribed)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_track()) {
    // required .livekit.proto.OwnedTrack track = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }

  return total_size;
}
size_t TrackSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackSubscribed)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.OwnedTrack track = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackSubscribed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackSubscribed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackSubscribed::GetClassData() const { return &_class_data_; }


void TrackSubscribed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackSubscribed*>(&to_msg);
  auto& from = static_cast<const TrackSubscribed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackSubscribed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_track()->::livekit::proto::OwnedTrack::MergeFrom(
          from._internal_track());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackSubscribed::CopyFrom(const TrackSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackSubscribed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_track()) {
    if (!_impl_.track_->IsInitialized()) return false;
  }
  return true;
}

void TrackSubscribed::InternalSwap(TrackSubscribed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.track_, other->_impl_.track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackSubscribed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[62]);
}

// ===================================================================

class TrackUnsubscribed::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackUnsubscribed>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrackUnsubscribed::TrackUnsubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackUnsubscribed)
}
TrackUnsubscribed::TrackUnsubscribed(const TrackUnsubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackUnsubscribed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackUnsubscribed)
}

inline void TrackUnsubscribed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackUnsubscribed::~TrackUnsubscribed() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackUnsubscribed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackUnsubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.track_sid_.Destroy();
}

void TrackUnsubscribed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackUnsubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackUnsubscribed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackUnsubscribed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackUnsubscribed.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackUnsubscribed.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackUnsubscribed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackUnsubscribed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackUnsubscribed.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string track_sid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackUnsubscribed.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackUnsubscribed)
  return target;
}

size_t TrackUnsubscribed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackUnsubscribed)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_track_sid()) {
    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return total_size;
}
size_t TrackUnsubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackUnsubscribed)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackUnsubscribed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackUnsubscribed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackUnsubscribed::GetClassData() const { return &_class_data_; }


void TrackUnsubscribed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackUnsubscribed*>(&to_msg);
  auto& from = static_cast<const TrackUnsubscribed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackUnsubscribed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackUnsubscribed::CopyFrom(const TrackUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackUnsubscribed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackUnsubscribed::InternalSwap(TrackUnsubscribed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackUnsubscribed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[63]);
}

// ===================================================================

class TrackSubscriptionFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackSubscriptionFailed>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TrackSubscriptionFailed::TrackSubscriptionFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackSubscriptionFailed)
}
TrackSubscriptionFailed::TrackSubscriptionFailed(const TrackSubscriptionFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackSubscriptionFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackSubscriptionFailed)
}

inline void TrackSubscriptionFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.error_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackSubscriptionFailed::~TrackSubscriptionFailed() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackSubscriptionFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackSubscriptionFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.track_sid_.Destroy();
  _impl_.error_.Destroy();
}

void TrackSubscriptionFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackSubscriptionFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackSubscriptionFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackSubscriptionFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackSubscriptionFailed.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackSubscriptionFailed.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackSubscriptionFailed.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackSubscriptionFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackSubscriptionFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackSubscriptionFailed.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string track_sid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackSubscriptionFailed.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // required string error = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackSubscriptionFailed.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackSubscriptionFailed)
  return target;
}

size_t TrackSubscriptionFailed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackSubscriptionFailed)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_track_sid()) {
    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  if (_internal_has_error()) {
    // required string error = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return total_size;
}
size_t TrackSubscriptionFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackSubscriptionFailed)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());

    // required string error = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackSubscriptionFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackSubscriptionFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackSubscriptionFailed::GetClassData() const { return &_class_data_; }


void TrackSubscriptionFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackSubscriptionFailed*>(&to_msg);
  auto& from = static_cast<const TrackSubscriptionFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackSubscriptionFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_error(from._internal_error());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackSubscriptionFailed::CopyFrom(const TrackSubscriptionFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackSubscriptionFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackSubscriptionFailed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackSubscriptionFailed::InternalSwap(TrackSubscriptionFailed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackSubscriptionFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[64]);
}

// ===================================================================

class TrackMuted::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackMuted>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrackMuted::TrackMuted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackMuted)
}
TrackMuted::TrackMuted(const TrackMuted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackMuted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackMuted)
}

inline void TrackMuted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackMuted::~TrackMuted() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackMuted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackMuted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.track_sid_.Destroy();
}

void TrackMuted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackMuted::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackMuted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackMuted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackMuted.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackMuted.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackMuted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackMuted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackMuted.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string track_sid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackMuted.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackMuted)
  return target;
}

size_t TrackMuted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackMuted)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_track_sid()) {
    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return total_size;
}
size_t TrackMuted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackMuted)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackMuted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackMuted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackMuted::GetClassData() const { return &_class_data_; }


void TrackMuted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackMuted*>(&to_msg);
  auto& from = static_cast<const TrackMuted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackMuted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackMuted::CopyFrom(const TrackMuted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackMuted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMuted::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackMuted::InternalSwap(TrackMuted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackMuted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[65]);
}

// ===================================================================

class TrackUnmuted::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackUnmuted>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrackUnmuted::TrackUnmuted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackUnmuted)
}
TrackUnmuted::TrackUnmuted(const TrackUnmuted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackUnmuted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackUnmuted)
}

inline void TrackUnmuted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackUnmuted::~TrackUnmuted() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackUnmuted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackUnmuted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.track_sid_.Destroy();
}

void TrackUnmuted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackUnmuted::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackUnmuted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackUnmuted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackUnmuted.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackUnmuted.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackUnmuted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackUnmuted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackUnmuted.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string track_sid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackUnmuted.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackUnmuted)
  return target;
}

size_t TrackUnmuted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackUnmuted)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_track_sid()) {
    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return total_size;
}
size_t TrackUnmuted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackUnmuted)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string track_sid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackUnmuted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackUnmuted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackUnmuted::GetClassData() const { return &_class_data_; }


void TrackUnmuted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackUnmuted*>(&to_msg);
  auto& from = static_cast<const TrackUnmuted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackUnmuted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackUnmuted::CopyFrom(const TrackUnmuted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackUnmuted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackUnmuted::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackUnmuted::InternalSwap(TrackUnmuted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackUnmuted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[66]);
}

// ===================================================================

class E2eeStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<E2eeStateChanged>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

E2eeStateChanged::E2eeStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.E2eeStateChanged)
}
E2eeStateChanged::E2eeStateChanged(const E2eeStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  E2eeStateChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.E2eeStateChanged)
}

inline void E2eeStateChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.state_){0}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

E2eeStateChanged::~E2eeStateChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.E2eeStateChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void E2eeStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
}

void E2eeStateChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void E2eeStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.E2eeStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2eeStateChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.E2eeStateChanged.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.EncryptionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::EncryptionState_IsValid(val))) {
            _internal_set_state(static_cast<::livekit::proto::EncryptionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2eeStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.E2eeStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.E2eeStateChanged.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.EncryptionState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.E2eeStateChanged)
  return target;
}

size_t E2eeStateChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.E2eeStateChanged)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_state()) {
    // required .livekit.proto.EncryptionState state = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return total_size;
}
size_t E2eeStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.E2eeStateChanged)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.EncryptionState state = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2eeStateChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    E2eeStateChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2eeStateChanged::GetClassData() const { return &_class_data_; }


void E2eeStateChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<E2eeStateChanged*>(&to_msg);
  auto& from = static_cast<const E2eeStateChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.E2eeStateChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2eeStateChanged::CopyFrom(const E2eeStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.E2eeStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2eeStateChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void E2eeStateChanged::InternalSwap(E2eeStateChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata E2eeStateChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[67]);
}

// ===================================================================

class ActiveSpeakersChanged::_Internal {
 public:
};

ActiveSpeakersChanged::ActiveSpeakersChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ActiveSpeakersChanged)
}
ActiveSpeakersChanged::ActiveSpeakersChanged(const ActiveSpeakersChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActiveSpeakersChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_identities_){from._impl_.participant_identities_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ActiveSpeakersChanged)
}

inline void ActiveSpeakersChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_identities_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActiveSpeakersChanged::~ActiveSpeakersChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.ActiveSpeakersChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActiveSpeakersChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identities_.~RepeatedPtrField();
}

void ActiveSpeakersChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActiveSpeakersChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ActiveSpeakersChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_identities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveSpeakersChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string participant_identities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_participant_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.ActiveSpeakersChanged.participant_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActiveSpeakersChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ActiveSpeakersChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string participant_identities = 1;
  for (int i = 0, n = this->_internal_participant_identities_size(); i < n; i++) {
    const auto& s = this->_internal_participant_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ActiveSpeakersChanged.participant_identities");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ActiveSpeakersChanged)
  return target;
}

size_t ActiveSpeakersChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ActiveSpeakersChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string participant_identities = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.participant_identities_.size());
  for (int i = 0, n = _impl_.participant_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.participant_identities_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActiveSpeakersChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActiveSpeakersChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActiveSpeakersChanged::GetClassData() const { return &_class_data_; }


void ActiveSpeakersChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActiveSpeakersChanged*>(&to_msg);
  auto& from = static_cast<const ActiveSpeakersChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ActiveSpeakersChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_identities_.MergeFrom(from._impl_.participant_identities_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActiveSpeakersChanged::CopyFrom(const ActiveSpeakersChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ActiveSpeakersChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveSpeakersChanged::IsInitialized() const {
  return true;
}

void ActiveSpeakersChanged::InternalSwap(ActiveSpeakersChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_identities_.InternalSwap(&other->_impl_.participant_identities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveSpeakersChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[68]);
}

// ===================================================================

class RoomMetadataChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomMetadataChanged>()._impl_._has_bits_);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RoomMetadataChanged::RoomMetadataChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RoomMetadataChanged)
}
RoomMetadataChanged::RoomMetadataChanged(const RoomMetadataChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomMetadataChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RoomMetadataChanged)
}

inline void RoomMetadataChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomMetadataChanged::~RoomMetadataChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.RoomMetadataChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomMetadataChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
}

void RoomMetadataChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomMetadataChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RoomMetadataChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.metadata_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomMetadataChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RoomMetadataChanged.metadata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomMetadataChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RoomMetadataChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RoomMetadataChanged.metadata");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RoomMetadataChanged)
  return target;
}

size_t RoomMetadataChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RoomMetadataChanged)
  size_t total_size = 0;

  // required string metadata = 1;
  if (_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomMetadataChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomMetadataChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomMetadataChanged::GetClassData() const { return &_class_data_; }


void RoomMetadataChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomMetadataChanged*>(&to_msg);
  auto& from = static_cast<const RoomMetadataChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RoomMetadataChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomMetadataChanged::CopyFrom(const RoomMetadataChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RoomMetadataChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMetadataChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoomMetadataChanged::InternalSwap(RoomMetadataChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMetadataChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[69]);
}

// ===================================================================

class RoomSidChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomSidChanged>()._impl_._has_bits_);
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RoomSidChanged::RoomSidChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RoomSidChanged)
}
RoomSidChanged::RoomSidChanged(const RoomSidChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomSidChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sid()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RoomSidChanged)
}

inline void RoomSidChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomSidChanged::~RoomSidChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.RoomSidChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomSidChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sid_.Destroy();
}

void RoomSidChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomSidChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RoomSidChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomSidChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RoomSidChanged.sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomSidChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RoomSidChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RoomSidChanged.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RoomSidChanged)
  return target;
}

size_t RoomSidChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RoomSidChanged)
  size_t total_size = 0;

  // required string sid = 1;
  if (_internal_has_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomSidChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomSidChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomSidChanged::GetClassData() const { return &_class_data_; }


void RoomSidChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomSidChanged*>(&to_msg);
  auto& from = static_cast<const RoomSidChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RoomSidChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sid()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomSidChanged::CopyFrom(const RoomSidChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RoomSidChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomSidChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoomSidChanged::InternalSwap(RoomSidChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomSidChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[70]);
}

// ===================================================================

class ParticipantMetadataChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantMetadataChanged>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ParticipantMetadataChanged::ParticipantMetadataChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantMetadataChanged)
}
ParticipantMetadataChanged::ParticipantMetadataChanged(const ParticipantMetadataChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantMetadataChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.metadata_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantMetadataChanged)
}

inline void ParticipantMetadataChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.metadata_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantMetadataChanged::~ParticipantMetadataChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantMetadataChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantMetadataChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.metadata_.Destroy();
}

void ParticipantMetadataChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantMetadataChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantMetadataChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantMetadataChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantMetadataChanged.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantMetadataChanged.metadata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantMetadataChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantMetadataChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantMetadataChanged.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantMetadataChanged.metadata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantMetadataChanged)
  return target;
}

size_t ParticipantMetadataChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ParticipantMetadataChanged)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_metadata()) {
    // required string metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  return total_size;
}
size_t ParticipantMetadataChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantMetadataChanged)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantMetadataChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantMetadataChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantMetadataChanged::GetClassData() const { return &_class_data_; }


void ParticipantMetadataChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantMetadataChanged*>(&to_msg);
  auto& from = static_cast<const ParticipantMetadataChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantMetadataChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_metadata(from._internal_metadata());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantMetadataChanged::CopyFrom(const ParticipantMetadataChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantMetadataChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantMetadataChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParticipantMetadataChanged::InternalSwap(ParticipantMetadataChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantMetadataChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[71]);
}

// ===================================================================

class ParticipantAttributesChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantAttributesChanged>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ParticipantAttributesChanged::ParticipantAttributesChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantAttributesChanged)
}
ParticipantAttributesChanged::ParticipantAttributesChanged(const ParticipantAttributesChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantAttributesChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.changed_attributes_){from._impl_.changed_attributes_}
    , decltype(_impl_.participant_identity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantAttributesChanged)
}

inline void ParticipantAttributesChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.changed_attributes_){arena}
    , decltype(_impl_.participant_identity_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantAttributesChanged::~ParticipantAttributesChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantAttributesChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantAttributesChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.changed_attributes_.~RepeatedPtrField();
  _impl_.participant_identity_.Destroy();
}

void ParticipantAttributesChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantAttributesChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantAttributesChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.changed_attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantAttributesChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantAttributesChanged.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.AttributesEntry attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.AttributesEntry changed_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changed_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantAttributesChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantAttributesChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantAttributesChanged.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // repeated .livekit.proto.AttributesEntry attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.proto.AttributesEntry changed_attributes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_changed_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_changed_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantAttributesChanged)
  return target;
}

size_t ParticipantAttributesChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantAttributesChanged)
  size_t total_size = 0;

  // required string participant_identity = 1;
  if (_internal_has_participant_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.AttributesEntry attributes = 2;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.proto.AttributesEntry changed_attributes = 3;
  total_size += 1UL * this->_internal_changed_attributes_size();
  for (const auto& msg : this->_impl_.changed_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantAttributesChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantAttributesChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantAttributesChanged::GetClassData() const { return &_class_data_; }


void ParticipantAttributesChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantAttributesChanged*>(&to_msg);
  auto& from = static_cast<const ParticipantAttributesChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantAttributesChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.changed_attributes_.MergeFrom(from._impl_.changed_attributes_);
  if (from._internal_has_participant_identity()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantAttributesChanged::CopyFrom(const ParticipantAttributesChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantAttributesChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantAttributesChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.attributes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.changed_attributes_))
    return false;
  return true;
}

void ParticipantAttributesChanged::InternalSwap(ParticipantAttributesChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.changed_attributes_.InternalSwap(&other->_impl_.changed_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantAttributesChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[72]);
}

// ===================================================================

class ParticipantNameChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantNameChanged>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ParticipantNameChanged::ParticipantNameChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantNameChanged)
}
ParticipantNameChanged::ParticipantNameChanged(const ParticipantNameChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantNameChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantNameChanged)
}

inline void ParticipantNameChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.name_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantNameChanged::~ParticipantNameChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantNameChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantNameChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  _impl_.name_.Destroy();
}

void ParticipantNameChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantNameChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantNameChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantNameChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantNameChanged.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantNameChanged.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantNameChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantNameChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantNameChanged.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantNameChanged.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantNameChanged)
  return target;
}

size_t ParticipantNameChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ParticipantNameChanged)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return total_size;
}
size_t ParticipantNameChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantNameChanged)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantNameChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantNameChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantNameChanged::GetClassData() const { return &_class_data_; }


void ParticipantNameChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantNameChanged*>(&to_msg);
  auto& from = static_cast<const ParticipantNameChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantNameChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantNameChanged::CopyFrom(const ParticipantNameChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantNameChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantNameChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParticipantNameChanged::InternalSwap(ParticipantNameChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantNameChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[73]);
}

// ===================================================================

class ConnectionQualityChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionQualityChanged>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ConnectionQualityChanged::ConnectionQualityChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectionQualityChanged)
}
ConnectionQualityChanged::ConnectionQualityChanged(const ConnectionQualityChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionQualityChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.quality_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.quality_ = from._impl_.quality_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectionQualityChanged)
}

inline void ConnectionQualityChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.quality_){0}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionQualityChanged::~ConnectionQualityChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectionQualityChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionQualityChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
}

void ConnectionQualityChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionQualityChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectionQualityChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_.quality_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionQualityChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ConnectionQualityChanged.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.ConnectionQuality quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::ConnectionQuality_IsValid(val))) {
            _internal_set_quality(static_cast<::livekit::proto::ConnectionQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionQualityChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectionQualityChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ConnectionQualityChanged.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.ConnectionQuality quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectionQualityChanged)
  return target;
}

size_t ConnectionQualityChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ConnectionQualityChanged)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_quality()) {
    // required .livekit.proto.ConnectionQuality quality = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  return total_size;
}
size_t ConnectionQualityChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectionQualityChanged)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.ConnectionQuality quality = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionQualityChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionQualityChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionQualityChanged::GetClassData() const { return &_class_data_; }


void ConnectionQualityChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionQualityChanged*>(&to_msg);
  auto& from = static_cast<const ConnectionQualityChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectionQualityChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityChanged::CopyFrom(const ConnectionQualityChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectionQualityChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionQualityChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ConnectionQualityChanged::InternalSwap(ConnectionQualityChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.quality_, other->_impl_.quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionQualityChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[74]);
}

// ===================================================================

class UserPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<UserPacket>()._impl_._has_bits_);
  static const ::livekit::proto::OwnedBuffer& data(const UserPacket* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::livekit::proto::OwnedBuffer&
UserPacket::_Internal::data(const UserPacket* msg) {
  return *msg->_impl_.data_;
}
UserPacket::UserPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.UserPacket)
}
UserPacket::UserPacket(const UserPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::livekit::proto::OwnedBuffer(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.UserPacket)
}

inline void UserPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.data_){nullptr}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserPacket::~UserPacket() {
  // @@protoc_insertion_point(destructor:livekit.proto.UserPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void UserPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.UserPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.OwnedBuffer data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.UserPacket.topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.UserPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.OwnedBuffer data = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional string topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.UserPacket.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.UserPacket)
  return target;
}

size_t UserPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.UserPacket)
  size_t total_size = 0;

  // required .livekit.proto.OwnedBuffer data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string topic = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPacket::GetClassData() const { return &_class_data_; }


void UserPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserPacket*>(&to_msg);
  auto& from = static_cast<const UserPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.UserPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_topic(from._internal_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::livekit::proto::OwnedBuffer::MergeFrom(
          from._internal_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPacket::CopyFrom(const UserPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.UserPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_data()) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void UserPacket::InternalSwap(UserPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[75]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessage>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_edit_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_generated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.edit_timestamp_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.generated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.generated_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.generated_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.edit_timestamp_){int64_t{0}}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.generated_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:livekit.proto.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.message_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.generated_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.generated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ChatMessage.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ChatMessage.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 edit_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_edit_timestamp(&has_bits);
          _impl_.edit_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_deleted(&has_bits);
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool generated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_generated(&has_bits);
          _impl_.generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ChatMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // required string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ChatMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional int64 edit_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_edit_timestamp(), target);
  }

  // optional bool deleted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_deleted(), target);
  }

  // optional bool generated = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_generated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ChatMessage)
  return target;
}

size_t ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ChatMessage)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return total_size;
}
size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ChatMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required string message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required int64 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional int64 edit_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_edit_timestamp());
    }

    // optional bool deleted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool generated = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.edit_timestamp_ = from._impl_.edit_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.deleted_ = from._impl_.deleted_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.generated_ = from._impl_.generated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.generated_)
      + sizeof(ChatMessage::_impl_.generated_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[76]);
}

// ===================================================================

class ChatMessageReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessageReceived>()._impl_._has_bits_);
  static const ::livekit::proto::ChatMessage& message(const ChatMessageReceived* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::ChatMessage&
ChatMessageReceived::_Internal::message(const ChatMessageReceived* msg) {
  return *msg->_impl_.message_;
}
ChatMessageReceived::ChatMessageReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ChatMessageReceived)
}
ChatMessageReceived::ChatMessageReceived(const ChatMessageReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessageReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::livekit::proto::ChatMessage(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ChatMessageReceived)
}

inline void ChatMessageReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.message_){nullptr}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessageReceived::~ChatMessageReceived() {
  // @@protoc_insertion_point(destructor:livekit.proto.ChatMessageReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.message_;
}

void ChatMessageReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessageReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ChatMessageReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.ChatMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ChatMessageReceived.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ChatMessageReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.ChatMessage message = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // required string participant_identity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ChatMessageReceived.participant_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participant_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ChatMessageReceived)
  return target;
}

size_t ChatMessageReceived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.ChatMessageReceived)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_message()) {
    // required .livekit.proto.ChatMessage message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return total_size;
}
size_t ChatMessageReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ChatMessageReceived)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.ChatMessage message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessageReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageReceived::GetClassData() const { return &_class_data_; }


void ChatMessageReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessageReceived*>(&to_msg);
  auto& from = static_cast<const ChatMessageReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ChatMessageReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_message()->::livekit::proto::ChatMessage::MergeFrom(
          from._internal_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageReceived::CopyFrom(const ChatMessageReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ChatMessageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageReceived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_message()) {
    if (!_impl_.message_->IsInitialized()) return false;
  }
  return true;
}

void ChatMessageReceived::InternalSwap(ChatMessageReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[77]);
}

// ===================================================================

class SipDTMF::_Internal {
 public:
  using HasBits = decltype(std::declval<SipDTMF>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_digit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SipDTMF::SipDTMF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SipDTMF)
}
SipDTMF::SipDTMF(const SipDTMF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SipDTMF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digit_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digit()) {
    _this->_impl_.digit_.Set(from._internal_digit(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SipDTMF)
}

inline void SipDTMF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digit_){}
    , decltype(_impl_.code_){0u}
  };
  _impl_.digit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SipDTMF::~SipDTMF() {
  // @@protoc_insertion_point(destructor:livekit.proto.SipDTMF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SipDTMF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digit_.Destroy();
}

void SipDTMF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SipDTMF::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SipDTMF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.digit_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SipDTMF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string digit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SipDTMF.digit");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SipDTMF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SipDTMF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string digit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digit().data(), static_cast<int>(this->_internal_digit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SipDTMF.digit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_digit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SipDTMF)
  return target;
}

size_t SipDTMF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SipDTMF)
  size_t total_size = 0;

  // required uint32 code = 1;
  if (_internal_has_code()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string digit = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_digit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SipDTMF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SipDTMF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SipDTMF::GetClassData() const { return &_class_data_; }


void SipDTMF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SipDTMF*>(&to_msg);
  auto& from = static_cast<const SipDTMF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SipDTMF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digit(from._internal_digit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SipDTMF::CopyFrom(const SipDTMF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SipDTMF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SipDTMF::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SipDTMF::InternalSwap(SipDTMF* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digit_, lhs_arena,
      &other->_impl_.digit_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SipDTMF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[78]);
}

// ===================================================================

class DataPacketReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPacketReceived>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::UserPacket& user(const DataPacketReceived* msg);
  static const ::livekit::proto::SipDTMF& sip_dtmf(const DataPacketReceived* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::UserPacket&
DataPacketReceived::_Internal::user(const DataPacketReceived* msg) {
  return *msg->_impl_.value_.user_;
}
const ::livekit::proto::SipDTMF&
DataPacketReceived::_Internal::sip_dtmf(const DataPacketReceived* msg) {
  return *msg->_impl_.value_.sip_dtmf_;
}
void DataPacketReceived::set_allocated_user(::livekit::proto::UserPacket* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    _impl_.value_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.DataPacketReceived.user)
}
void DataPacketReceived::set_allocated_sip_dtmf(::livekit::proto::SipDTMF* sip_dtmf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sip_dtmf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sip_dtmf);
    if (message_arena != submessage_arena) {
      sip_dtmf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sip_dtmf, submessage_arena);
    }
    set_has_sip_dtmf();
    _impl_.value_.sip_dtmf_ = sip_dtmf;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.DataPacketReceived.sip_dtmf)
}
DataPacketReceived::DataPacketReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataPacketReceived)
}
DataPacketReceived::DataPacketReceived(const DataPacketReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataPacketReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  clear_has_value();
  switch (from.value_case()) {
    case kUser: {
      _this->_internal_mutable_user()->::livekit::proto::UserPacket::MergeFrom(
          from._internal_user());
      break;
    }
    case kSipDtmf: {
      _this->_internal_mutable_sip_dtmf()->::livekit::proto::SipDTMF::MergeFrom(
          from._internal_sip_dtmf());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataPacketReceived)
}

inline void DataPacketReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

DataPacketReceived::~DataPacketReceived() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataPacketReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataPacketReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void DataPacketReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataPacketReceived::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.DataPacketReceived)
  switch (value_case()) {
    case kUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.user_;
      }
      break;
    }
    case kSipDtmf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sip_dtmf_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void DataPacketReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataPacketReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_.kind_ = 0;
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPacketReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.DataPacketKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DataPacketKind_IsValid(val))) {
            _internal_set_kind(static_cast<::livekit::proto::DataPacketKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataPacketReceived.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.UserPacket user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.SipDTMF sip_dtmf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sip_dtmf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPacketReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataPacketReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.DataPacketKind kind = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // required string participant_identity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataPacketReceived.participant_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participant_identity(), target);
  }

  switch (value_case()) {
    case kUser: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::user(this),
          _Internal::user(this).GetCachedSize(), target, stream);
      break;
    }
    case kSipDtmf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::sip_dtmf(this),
          _Internal::sip_dtmf(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataPacketReceived)
  return target;
}

size_t DataPacketReceived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataPacketReceived)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_kind()) {
    // required .livekit.proto.DataPacketKind kind = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return total_size;
}
size_t DataPacketReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataPacketReceived)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.DataPacketKind kind = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .livekit.proto.UserPacket user = 4;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.user_);
      break;
    }
    // .livekit.proto.SipDTMF sip_dtmf = 5;
    case kSipDtmf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sip_dtmf_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPacketReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataPacketReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPacketReceived::GetClassData() const { return &_class_data_; }


void DataPacketReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataPacketReceived*>(&to_msg);
  auto& from = static_cast<const DataPacketReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataPacketReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kUser: {
      _this->_internal_mutable_user()->::livekit::proto::UserPacket::MergeFrom(
          from._internal_user());
      break;
    }
    case kSipDtmf: {
      _this->_internal_mutable_sip_dtmf()->::livekit::proto::SipDTMF::MergeFrom(
          from._internal_sip_dtmf());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacketReceived::CopyFrom(const DataPacketReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataPacketReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPacketReceived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (value_case()) {
    case kUser: {
      if (_internal_has_user()) {
        if (!_impl_.value_.user_->IsInitialized()) return false;
      }
      break;
    }
    case kSipDtmf: {
      if (_internal_has_sip_dtmf()) {
        if (!_impl_.value_.sip_dtmf_->IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void DataPacketReceived::InternalSwap(DataPacketReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPacketReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[79]);
}

// ===================================================================

class TranscriptionReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<TranscriptionReceived>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TranscriptionReceived::TranscriptionReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TranscriptionReceived)
}
TranscriptionReceived::TranscriptionReceived(const TranscriptionReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TranscriptionReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_sid()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TranscriptionReceived)
}

inline void TranscriptionReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.segments_){arena}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TranscriptionReceived::~TranscriptionReceived() {
  // @@protoc_insertion_point(destructor:livekit.proto.TranscriptionReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranscriptionReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
  _impl_.participant_identity_.Destroy();
  _impl_.track_sid_.Destroy();
}

void TranscriptionReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranscriptionReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TranscriptionReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscriptionReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TranscriptionReceived.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TranscriptionReceived.track_sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.TranscriptionSegment segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranscriptionReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TranscriptionReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TranscriptionReceived.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // optional string track_sid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TranscriptionReceived.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // repeated .livekit.proto.TranscriptionSegment segments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TranscriptionReceived)
  return target;
}

size_t TranscriptionReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TranscriptionReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.TranscriptionSegment segments = 3;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string participant_identity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant_identity());
    }

    // optional string track_sid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_track_sid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscriptionReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TranscriptionReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscriptionReceived::GetClassData() const { return &_class_data_; }


void TranscriptionReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TranscriptionReceived*>(&to_msg);
  auto& from = static_cast<const TranscriptionReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TranscriptionReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscriptionReceived::CopyFrom(const TranscriptionReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TranscriptionReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptionReceived::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.segments_))
    return false;
  return true;
}

void TranscriptionReceived::InternalSwap(TranscriptionReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptionReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[80]);
}

// ===================================================================

class ConnectionStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionStateChanged>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ConnectionStateChanged::ConnectionStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ConnectionStateChanged)
}
ConnectionStateChanged::ConnectionStateChanged(const ConnectionStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionStateChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ConnectionStateChanged)
}

inline void ConnectionStateChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){0}
  };
}

ConnectionStateChanged::~ConnectionStateChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.ConnectionStateChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionStateChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ConnectionStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionStateChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.ConnectionState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::ConnectionState_IsValid(val))) {
            _internal_set_state(static_cast<::livekit::proto::ConnectionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ConnectionStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.ConnectionState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ConnectionStateChanged)
  return target;
}

size_t ConnectionStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ConnectionStateChanged)
  size_t total_size = 0;

  // required .livekit.proto.ConnectionState state = 1;
  if (_internal_has_state()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionStateChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionStateChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionStateChanged::GetClassData() const { return &_class_data_; }


void ConnectionStateChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionStateChanged*>(&to_msg);
  auto& from = static_cast<const ConnectionStateChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ConnectionStateChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionStateChanged::CopyFrom(const ConnectionStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ConnectionStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionStateChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ConnectionStateChanged::InternalSwap(ConnectionStateChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionStateChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[81]);
}

// ===================================================================

class Connected::_Internal {
 public:
};

Connected::Connected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.Connected)
}
Connected::Connected(const Connected& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Connected* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.Connected)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connected::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Connected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[82]);
}

// ===================================================================

class Disconnected::_Internal {
 public:
  using HasBits = decltype(std::declval<Disconnected>()._impl_._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Disconnected::Disconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.Disconnected)
}
Disconnected::Disconnected(const Disconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Disconnected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reason_ = from._impl_.reason_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.Disconnected)
}

inline void Disconnected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){0}
  };
}

Disconnected::~Disconnected() {
  // @@protoc_insertion_point(destructor:livekit.proto.Disconnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Disconnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Disconnected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Disconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.Disconnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disconnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.DisconnectReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DisconnectReason_IsValid(val))) {
            _internal_set_reason(static_cast<::livekit::proto::DisconnectReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Disconnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.Disconnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.DisconnectReason reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.Disconnected)
  return target;
}

size_t Disconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.Disconnected)
  size_t total_size = 0;

  // required .livekit.proto.DisconnectReason reason = 1;
  if (_internal_has_reason()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Disconnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Disconnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Disconnected::GetClassData() const { return &_class_data_; }


void Disconnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Disconnected*>(&to_msg);
  auto& from = static_cast<const Disconnected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.Disconnected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Disconnected::CopyFrom(const Disconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.Disconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disconnected::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Disconnected::InternalSwap(Disconnected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reason_, other->_impl_.reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Disconnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[83]);
}

// ===================================================================

class Reconnecting::_Internal {
 public:
};

Reconnecting::Reconnecting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.Reconnecting)
}
Reconnecting::Reconnecting(const Reconnecting& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Reconnecting* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.Reconnecting)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reconnecting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reconnecting::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Reconnecting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[84]);
}

// ===================================================================

class Reconnected::_Internal {
 public:
};

Reconnected::Reconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.Reconnected)
}
Reconnected::Reconnected(const Reconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Reconnected* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.Reconnected)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reconnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reconnected::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Reconnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[85]);
}

// ===================================================================

class RoomEOS::_Internal {
 public:
};

RoomEOS::RoomEOS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RoomEOS)
}
RoomEOS::RoomEOS(const RoomEOS& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RoomEOS* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RoomEOS)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomEOS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomEOS::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RoomEOS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[86]);
}

// ===================================================================

class DataStream_TextHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_TextHeader>()._impl_._has_bits_);
  static void set_has_operation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reply_to_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

DataStream_TextHeader::DataStream_TextHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStream.TextHeader)
}
DataStream_TextHeader::DataStream_TextHeader(const DataStream_TextHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_TextHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attached_stream_ids_){from._impl_.attached_stream_ids_}
    , decltype(_impl_.reply_to_stream_id_){}
    , decltype(_impl_.operation_type_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.generated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reply_to_stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reply_to_stream_id()) {
    _this->_impl_.reply_to_stream_id_.Set(from._internal_reply_to_stream_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.operation_type_, &from._impl_.operation_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.generated_) -
    reinterpret_cast<char*>(&_impl_.operation_type_)) + sizeof(_impl_.generated_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStream.TextHeader)
}

inline void DataStream_TextHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attached_stream_ids_){arena}
    , decltype(_impl_.reply_to_stream_id_){}
    , decltype(_impl_.operation_type_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.generated_){false}
  };
  _impl_.reply_to_stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_TextHeader::~DataStream_TextHeader() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStream.TextHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStream_TextHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attached_stream_ids_.~RepeatedPtrField();
  _impl_.reply_to_stream_id_.Destroy();
}

void DataStream_TextHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_TextHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStream.TextHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attached_stream_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reply_to_stream_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.operation_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.generated_) -
        reinterpret_cast<char*>(&_impl_.operation_type_)) + sizeof(_impl_.generated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_TextHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.DataStream.OperationType operation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DataStream_OperationType_IsValid(val))) {
            _internal_set_operation_type(static_cast<::livekit::proto::DataStream_OperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string reply_to_stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reply_to_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.TextHeader.reply_to_stream_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string attached_stream_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attached_stream_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.TextHeader.attached_stream_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool generated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_generated(&has_bits);
          _impl_.generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_TextHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStream.TextHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.DataStream.OperationType operation_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation_type(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional string reply_to_stream_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reply_to_stream_id().data(), static_cast<int>(this->_internal_reply_to_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.TextHeader.reply_to_stream_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reply_to_stream_id(), target);
  }

  // repeated string attached_stream_ids = 4;
  for (int i = 0, n = this->_internal_attached_stream_ids_size(); i < n; i++) {
    const auto& s = this->_internal_attached_stream_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.TextHeader.attached_stream_ids");
    target = stream->WriteString(4, s, target);
  }

  // optional bool generated = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_generated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStream.TextHeader)
  return target;
}

size_t DataStream_TextHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStream.TextHeader)
  size_t total_size = 0;

  // required .livekit.proto.DataStream.OperationType operation_type = 1;
  if (_internal_has_operation_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attached_stream_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attached_stream_ids_.size());
  for (int i = 0, n = _impl_.attached_stream_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attached_stream_ids_.Get(i));
  }

  // optional string reply_to_stream_id = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_stream_id());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional int32 version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional bool generated = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_TextHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_TextHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_TextHeader::GetClassData() const { return &_class_data_; }


void DataStream_TextHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_TextHeader*>(&to_msg);
  auto& from = static_cast<const DataStream_TextHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStream.TextHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attached_stream_ids_.MergeFrom(from._impl_.attached_stream_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reply_to_stream_id(from._internal_reply_to_stream_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operation_type_ = from._impl_.operation_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.generated_ = from._impl_.generated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_TextHeader::CopyFrom(const DataStream_TextHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStream.TextHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_TextHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataStream_TextHeader::InternalSwap(DataStream_TextHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attached_stream_ids_.InternalSwap(&other->_impl_.attached_stream_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_stream_id_, lhs_arena,
      &other->_impl_.reply_to_stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.generated_)
      + sizeof(DataStream_TextHeader::_impl_.generated_)
      - PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.operation_type_)>(
          reinterpret_cast<char*>(&_impl_.operation_type_),
          reinterpret_cast<char*>(&other->_impl_.operation_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_TextHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[87]);
}

// ===================================================================

class DataStream_ByteHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_ByteHeader>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DataStream_ByteHeader::DataStream_ByteHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStream.ByteHeader)
}
DataStream_ByteHeader::DataStream_ByteHeader(const DataStream_ByteHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_ByteHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStream.ByteHeader)
}

inline void DataStream_ByteHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_ByteHeader::~DataStream_ByteHeader() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStream.ByteHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStream_ByteHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DataStream_ByteHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_ByteHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStream.ByteHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_ByteHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.ByteHeader.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_ByteHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStream.ByteHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.ByteHeader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStream.ByteHeader)
  return target;
}

size_t DataStream_ByteHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStream.ByteHeader)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_ByteHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_ByteHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_ByteHeader::GetClassData() const { return &_class_data_; }


void DataStream_ByteHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_ByteHeader*>(&to_msg);
  auto& from = static_cast<const DataStream_ByteHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStream.ByteHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_ByteHeader::CopyFrom(const DataStream_ByteHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStream.ByteHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_ByteHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataStream_ByteHeader::InternalSwap(DataStream_ByteHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_ByteHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[88]);
}

// ===================================================================

DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse() {}
DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataStream_Header_AttributesEntry_DoNotUse::MergeFrom(const DataStream_Header_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Header_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[89]);
}

// ===================================================================

class DataStream_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_Header>()._impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::livekit::proto::DataStream_TextHeader& text_header(const DataStream_Header* msg);
  static const ::livekit::proto::DataStream_ByteHeader& byte_header(const DataStream_Header* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::livekit::proto::DataStream_TextHeader&
DataStream_Header::_Internal::text_header(const DataStream_Header* msg) {
  return *msg->_impl_.content_header_.text_header_;
}
const ::livekit::proto::DataStream_ByteHeader&
DataStream_Header::_Internal::byte_header(const DataStream_Header* msg) {
  return *msg->_impl_.content_header_.byte_header_;
}
void DataStream_Header::set_allocated_text_header(::livekit::proto::DataStream_TextHeader* text_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content_header();
  if (text_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text_header);
    if (message_arena != submessage_arena) {
      text_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_header, submessage_arena);
    }
    set_has_text_header();
    _impl_.content_header_.text_header_ = text_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.DataStream.Header.text_header)
}
void DataStream_Header::set_allocated_byte_header(::livekit::proto::DataStream_ByteHeader* byte_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content_header();
  if (byte_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(byte_header);
    if (message_arena != submessage_arena) {
      byte_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, byte_header, submessage_arena);
    }
    set_has_byte_header();
    _impl_.content_header_.byte_header_ = byte_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.proto.DataStream.Header.byte_header)
}
DataStream_Header::DataStream_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DataStream_Header::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStream.Header)
}
DataStream_Header::DataStream_Header(const DataStream_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.total_length_){}
    , decltype(_impl_.content_header_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_id()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_length_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.total_length_));
  clear_has_content_header();
  switch (from.content_header_case()) {
    case kTextHeader: {
      _this->_internal_mutable_text_header()->::livekit::proto::DataStream_TextHeader::MergeFrom(
          from._internal_text_header());
      break;
    }
    case kByteHeader: {
      _this->_internal_mutable_byte_header()->::livekit::proto::DataStream_ByteHeader::MergeFrom(
          from._internal_byte_header());
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStream.Header)
}

inline void DataStream_Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.total_length_){uint64_t{0u}}
    , decltype(_impl_.content_header_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_content_header();
}

DataStream_Header::~DataStream_Header() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStream.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DataStream_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.stream_id_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.topic_.Destroy();
  if (has_content_header()) {
    clear_content_header();
  }
}

void DataStream_Header::ArenaDtor(void* object) {
  DataStream_Header* _this = reinterpret_cast< DataStream_Header* >(object);
  _this->_impl_.attributes_.Destruct();
}
void DataStream_Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_Header::clear_content_header() {
// @@protoc_insertion_point(one_of_clear_start:livekit.proto.DataStream.Header)
  switch (content_header_case()) {
    case kTextHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_header_.text_header_;
      }
      break;
    }
    case kByteHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_header_.byte_header_;
      }
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_HEADER_NOT_SET;
}


void DataStream_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStream.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_length_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.total_length_));
  }
  clear_content_header();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.Header.stream_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.Header.mime_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.Header.topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_total_length(&has_bits);
          _impl_.total_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataStream.TextHeader text_header = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.proto.DataStream.ByteHeader byte_header = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_byte_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStream.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.Header.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // required string mime_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.Header.mime_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  // required string topic = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.Header.topic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_topic(), target);
  }

  // optional uint64 total_length = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_total_length(), target);
  }

  // map<string, string> attributes = 6;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DataStream_Header_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.DataStream.Header.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.DataStream.Header.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  switch (content_header_case()) {
    case kTextHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::text_header(this),
          _Internal::text_header(this).GetCachedSize(), target, stream);
      break;
    }
    case kByteHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::byte_header(this),
          _Internal::byte_header(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStream.Header)
  return target;
}

size_t DataStream_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataStream.Header)
  size_t total_size = 0;

  if (_internal_has_stream_id()) {
    // required string stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  if (_internal_has_mime_type()) {
    // required string mime_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  if (_internal_has_topic()) {
    // required string topic = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  if (_internal_has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return total_size;
}
size_t DataStream_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStream.Header)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());

    // required string mime_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

    // required string topic = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());

    // required int64 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += DataStream_Header_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional uint64 total_length = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_length());
  }

  switch (content_header_case()) {
    // .livekit.proto.DataStream.TextHeader text_header = 7;
    case kTextHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_header_.text_header_);
      break;
    }
    // .livekit.proto.DataStream.ByteHeader byte_header = 8;
    case kByteHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_header_.byte_header_);
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_Header::GetClassData() const { return &_class_data_; }


void DataStream_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_Header*>(&to_msg);
  auto& from = static_cast<const DataStream_Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStream.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_id(from._internal_stream_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_topic(from._internal_topic());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_length_ = from._impl_.total_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.content_header_case()) {
    case kTextHeader: {
      _this->_internal_mutable_text_header()->::livekit::proto::DataStream_TextHeader::MergeFrom(
          from._internal_text_header());
      break;
    }
    case kByteHeader: {
      _this->_internal_mutable_byte_header()->::livekit::proto::DataStream_ByteHeader::MergeFrom(
          from._internal_byte_header());
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Header::CopyFrom(const DataStream_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStream.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (content_header_case()) {
    case kTextHeader: {
      if (_internal_has_text_header()) {
        if (!_impl_.content_header_.text_header_->IsInitialized()) return false;
      }
      break;
    }
    case kByteHeader: {
      if (_internal_has_byte_header()) {
        if (!_impl_.content_header_.byte_header_->IsInitialized()) return false;
      }
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  return true;
}

void DataStream_Header::InternalSwap(DataStream_Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.total_length_)
      + sizeof(DataStream_Header::_impl_.total_length_)
      - PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.content_header_, other->_impl_.content_header_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[90]);
}

// ===================================================================

class DataStream_Chunk::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_Chunk>()._impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chunk_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

DataStream_Chunk::DataStream_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStream.Chunk)
}
DataStream_Chunk::DataStream_Chunk(const DataStream_Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_Chunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.chunk_index_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_id()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_iv()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chunk_index_, &from._impl_.chunk_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.chunk_index_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStream.Chunk)
}

inline void DataStream_Chunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.chunk_index_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_Chunk::~DataStream_Chunk() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStream.Chunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStream_Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.iv_.Destroy();
}

void DataStream_Chunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStream.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.iv_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.chunk_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.chunk_index_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_Chunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.Chunk.stream_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 chunk_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chunk_index(&has_bits);
          _impl_.chunk_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes iv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStream.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.Chunk.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // required uint64 chunk_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chunk_index(), target);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  // optional bytes iv = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStream.Chunk)
  return target;
}

size_t DataStream_Chunk::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataStream.Chunk)
  size_t total_size = 0;

  if (_internal_has_stream_id()) {
    // required string stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  if (_internal_has_content()) {
    // required bytes content = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (_internal_has_chunk_index()) {
    // required uint64 chunk_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chunk_index());
  }

  return total_size;
}
size_t DataStream_Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStream.Chunk)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());

    // required bytes content = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());

    // required uint64 chunk_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chunk_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes iv = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_Chunk::GetClassData() const { return &_class_data_; }


void DataStream_Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_Chunk*>(&to_msg);
  auto& from = static_cast<const DataStream_Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStream.Chunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_id(from._internal_stream_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_iv(from._internal_iv());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.chunk_index_ = from._impl_.chunk_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Chunk::CopyFrom(const DataStream_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStream.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_Chunk::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataStream_Chunk::InternalSwap(DataStream_Chunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.version_)
      + sizeof(DataStream_Chunk::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.chunk_index_)>(
          reinterpret_cast<char*>(&_impl_.chunk_index_),
          reinterpret_cast<char*>(&other->_impl_.chunk_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Chunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[91]);
}

// ===================================================================

DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse() {}
DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataStream_Trailer_AttributesEntry_DoNotUse::MergeFrom(const DataStream_Trailer_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Trailer_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[92]);
}

// ===================================================================

class DataStream_Trailer::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStream_Trailer>()._impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DataStream_Trailer::DataStream_Trailer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DataStream_Trailer::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStream.Trailer)
}
DataStream_Trailer::DataStream_Trailer(const DataStream_Trailer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStream_Trailer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_id()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStream.Trailer)
}

inline void DataStream_Trailer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.reason_){}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStream_Trailer::~DataStream_Trailer() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStream.Trailer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DataStream_Trailer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.stream_id_.Destroy();
  _impl_.reason_.Destroy();
}

void DataStream_Trailer::ArenaDtor(void* object) {
  DataStream_Trailer* _this = reinterpret_cast< DataStream_Trailer* >(object);
  _this->_impl_.attributes_.Destruct();
}
void DataStream_Trailer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStream_Trailer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStream.Trailer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStream_Trailer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.Trailer.stream_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStream.Trailer.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStream_Trailer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStream.Trailer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.Trailer.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStream.Trailer.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // map<string, string> attributes = 3;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DataStream_Trailer_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.DataStream.Trailer.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "livekit.proto.DataStream.Trailer.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStream.Trailer)
  return target;
}

size_t DataStream_Trailer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataStream.Trailer)
  size_t total_size = 0;

  if (_internal_has_stream_id()) {
    // required string stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  if (_internal_has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  return total_size;
}
size_t DataStream_Trailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStream.Trailer)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());

    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += DataStream_Trailer_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream_Trailer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStream_Trailer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream_Trailer::GetClassData() const { return &_class_data_; }


void DataStream_Trailer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStream_Trailer*>(&to_msg);
  auto& from = static_cast<const DataStream_Trailer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStream.Trailer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_id(from._internal_stream_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_reason(from._internal_reason());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Trailer::CopyFrom(const DataStream_Trailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStream.Trailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream_Trailer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataStream_Trailer::InternalSwap(DataStream_Trailer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStream_Trailer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[93]);
}

// ===================================================================

class DataStream::_Internal {
 public:
};

DataStream::DataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStream)
}
DataStream::DataStream(const DataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DataStream* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStream)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStream::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DataStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[94]);
}

// ===================================================================

class DataStreamHeaderReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStreamHeaderReceived>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::DataStream_Header& header(const DataStreamHeaderReceived* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::DataStream_Header&
DataStreamHeaderReceived::_Internal::header(const DataStreamHeaderReceived* msg) {
  return *msg->_impl_.header_;
}
DataStreamHeaderReceived::DataStreamHeaderReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStreamHeaderReceived)
}
DataStreamHeaderReceived::DataStreamHeaderReceived(const DataStreamHeaderReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStreamHeaderReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::livekit::proto::DataStream_Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStreamHeaderReceived)
}

inline void DataStreamHeaderReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.header_){nullptr}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStreamHeaderReceived::~DataStreamHeaderReceived() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStreamHeaderReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStreamHeaderReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void DataStreamHeaderReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStreamHeaderReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStreamHeaderReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStreamHeaderReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStreamHeaderReceived.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataStream.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStreamHeaderReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStreamHeaderReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStreamHeaderReceived.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.DataStream.Header header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStreamHeaderReceived)
  return target;
}

size_t DataStreamHeaderReceived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataStreamHeaderReceived)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_header()) {
    // required .livekit.proto.DataStream.Header header = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return total_size;
}
size_t DataStreamHeaderReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStreamHeaderReceived)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.DataStream.Header header = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStreamHeaderReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStreamHeaderReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStreamHeaderReceived::GetClassData() const { return &_class_data_; }


void DataStreamHeaderReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStreamHeaderReceived*>(&to_msg);
  auto& from = static_cast<const DataStreamHeaderReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStreamHeaderReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header()->::livekit::proto::DataStream_Header::MergeFrom(
          from._internal_header());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStreamHeaderReceived::CopyFrom(const DataStreamHeaderReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStreamHeaderReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStreamHeaderReceived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_header()) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  return true;
}

void DataStreamHeaderReceived::InternalSwap(DataStreamHeaderReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStreamHeaderReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[95]);
}

// ===================================================================

class DataStreamChunkReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStreamChunkReceived>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::DataStream_Chunk& chunk(const DataStreamChunkReceived* msg);
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::DataStream_Chunk&
DataStreamChunkReceived::_Internal::chunk(const DataStreamChunkReceived* msg) {
  return *msg->_impl_.chunk_;
}
DataStreamChunkReceived::DataStreamChunkReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStreamChunkReceived)
}
DataStreamChunkReceived::DataStreamChunkReceived(const DataStreamChunkReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStreamChunkReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.chunk_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chunk()) {
    _this->_impl_.chunk_ = new ::livekit::proto::DataStream_Chunk(*from._impl_.chunk_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStreamChunkReceived)
}

inline void DataStreamChunkReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.chunk_){nullptr}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStreamChunkReceived::~DataStreamChunkReceived() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStreamChunkReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStreamChunkReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chunk_;
}

void DataStreamChunkReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStreamChunkReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStreamChunkReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chunk_ != nullptr);
      _impl_.chunk_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStreamChunkReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStreamChunkReceived.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataStream.Chunk chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStreamChunkReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStreamChunkReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStreamChunkReceived.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.DataStream.Chunk chunk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chunk(this),
        _Internal::chunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStreamChunkReceived)
  return target;
}

size_t DataStreamChunkReceived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataStreamChunkReceived)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_chunk()) {
    // required .livekit.proto.DataStream.Chunk chunk = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_);
  }

  return total_size;
}
size_t DataStreamChunkReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStreamChunkReceived)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.DataStream.Chunk chunk = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStreamChunkReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStreamChunkReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStreamChunkReceived::GetClassData() const { return &_class_data_; }


void DataStreamChunkReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStreamChunkReceived*>(&to_msg);
  auto& from = static_cast<const DataStreamChunkReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStreamChunkReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chunk()->::livekit::proto::DataStream_Chunk::MergeFrom(
          from._internal_chunk());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStreamChunkReceived::CopyFrom(const DataStreamChunkReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStreamChunkReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStreamChunkReceived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_chunk()) {
    if (!_impl_.chunk_->IsInitialized()) return false;
  }
  return true;
}

void DataStreamChunkReceived::InternalSwap(DataStreamChunkReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.chunk_, other->_impl_.chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStreamChunkReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[96]);
}

// ===================================================================

class DataStreamTrailerReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStreamTrailerReceived>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::DataStream_Trailer& trailer(const DataStreamTrailerReceived* msg);
  static void set_has_trailer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::DataStream_Trailer&
DataStreamTrailerReceived::_Internal::trailer(const DataStreamTrailerReceived* msg) {
  return *msg->_impl_.trailer_;
}
DataStreamTrailerReceived::DataStreamTrailerReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataStreamTrailerReceived)
}
DataStreamTrailerReceived::DataStreamTrailerReceived(const DataStreamTrailerReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStreamTrailerReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.trailer_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trailer()) {
    _this->_impl_.trailer_ = new ::livekit::proto::DataStream_Trailer(*from._impl_.trailer_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataStreamTrailerReceived)
}

inline void DataStreamTrailerReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.trailer_){nullptr}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataStreamTrailerReceived::~DataStreamTrailerReceived() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataStreamTrailerReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStreamTrailerReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trailer_;
}

void DataStreamTrailerReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStreamTrailerReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataStreamTrailerReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.trailer_ != nullptr);
      _impl_.trailer_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStreamTrailerReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.DataStreamTrailerReceived.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataStream.Trailer trailer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trailer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStreamTrailerReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataStreamTrailerReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.DataStreamTrailerReceived.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // required .livekit.proto.DataStream.Trailer trailer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trailer(this),
        _Internal::trailer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataStreamTrailerReceived)
  return target;
}

size_t DataStreamTrailerReceived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataStreamTrailerReceived)
  size_t total_size = 0;

  if (_internal_has_participant_identity()) {
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  if (_internal_has_trailer()) {
    // required .livekit.proto.DataStream.Trailer trailer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trailer_);
  }

  return total_size;
}
size_t DataStreamTrailerReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataStreamTrailerReceived)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string participant_identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());

    // required .livekit.proto.DataStream.Trailer trailer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trailer_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStreamTrailerReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStreamTrailerReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStreamTrailerReceived::GetClassData() const { return &_class_data_; }


void DataStreamTrailerReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStreamTrailerReceived*>(&to_msg);
  auto& from = static_cast<const DataStreamTrailerReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataStreamTrailerReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trailer()->::livekit::proto::DataStream_Trailer::MergeFrom(
          from._internal_trailer());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStreamTrailerReceived::CopyFrom(const DataStreamTrailerReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataStreamTrailerReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStreamTrailerReceived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_trailer()) {
    if (!_impl_.trailer_->IsInitialized()) return false;
  }
  return true;
}

void DataStreamTrailerReceived::InternalSwap(DataStreamTrailerReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.trailer_, other->_impl_.trailer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStreamTrailerReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[97]);
}

// ===================================================================

class SendStreamHeaderRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamHeaderRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::DataStream_Header& header(const SendStreamHeaderRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::livekit::proto::DataStream_Header&
SendStreamHeaderRequest::_Internal::header(const SendStreamHeaderRequest* msg) {
  return *msg->_impl_.header_;
}
SendStreamHeaderRequest::SendStreamHeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamHeaderRequest)
}
SendStreamHeaderRequest::SendStreamHeaderRequest(const SendStreamHeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamHeaderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_identity()) {
    _this->_impl_.sender_identity_.Set(from._internal_sender_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::livekit::proto::DataStream_Header(*from._impl_.header_);
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamHeaderRequest)
}

inline void SendStreamHeaderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendStreamHeaderRequest::~SendStreamHeaderRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamHeaderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamHeaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.sender_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void SendStreamHeaderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamHeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamHeaderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sender_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamHeaderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataStream.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamHeaderRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string sender_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamHeaderRequest.sender_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamHeaderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamHeaderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required .livekit.proto.DataStream.Header header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated string destination_identities = 3;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamHeaderRequest.destination_identities");
    target = stream->WriteString(3, s, target);
  }

  // required string sender_identity = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_identity().data(), static_cast<int>(this->_internal_sender_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamHeaderRequest.sender_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamHeaderRequest)
  return target;
}

size_t SendStreamHeaderRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SendStreamHeaderRequest)
  size_t total_size = 0;

  if (_internal_has_sender_identity()) {
    // required string sender_identity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());
  }

  if (_internal_has_header()) {
    // required .livekit.proto.DataStream.Header header = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t SendStreamHeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamHeaderRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sender_identity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());

    // required .livekit.proto.DataStream.Header header = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamHeaderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamHeaderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamHeaderRequest::GetClassData() const { return &_class_data_; }


void SendStreamHeaderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamHeaderRequest*>(&to_msg);
  auto& from = static_cast<const SendStreamHeaderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamHeaderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sender_identity(from._internal_sender_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header()->::livekit::proto::DataStream_Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamHeaderRequest::CopyFrom(const SendStreamHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamHeaderRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_header()) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  return true;
}

void SendStreamHeaderRequest::InternalSwap(SendStreamHeaderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_identity_, lhs_arena,
      &other->_impl_.sender_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendStreamHeaderRequest, _impl_.local_participant_handle_)
      + sizeof(SendStreamHeaderRequest::_impl_.local_participant_handle_)
      - PROTOBUF_FIELD_OFFSET(SendStreamHeaderRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamHeaderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[98]);
}

// ===================================================================

class SendStreamChunkRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamChunkRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::DataStream_Chunk& chunk(const SendStreamChunkRequest* msg);
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::livekit::proto::DataStream_Chunk&
SendStreamChunkRequest::_Internal::chunk(const SendStreamChunkRequest* msg) {
  return *msg->_impl_.chunk_;
}
SendStreamChunkRequest::SendStreamChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamChunkRequest)
}
SendStreamChunkRequest::SendStreamChunkRequest(const SendStreamChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamChunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.chunk_){nullptr}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_identity()) {
    _this->_impl_.sender_identity_.Set(from._internal_sender_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chunk()) {
    _this->_impl_.chunk_ = new ::livekit::proto::DataStream_Chunk(*from._impl_.chunk_);
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamChunkRequest)
}

inline void SendStreamChunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.chunk_){nullptr}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendStreamChunkRequest::~SendStreamChunkRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamChunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.sender_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chunk_;
}

void SendStreamChunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sender_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chunk_ != nullptr);
      _impl_.chunk_->Clear();
    }
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamChunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataStream.Chunk chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamChunkRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string sender_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamChunkRequest.sender_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required .livekit.proto.DataStream.Chunk chunk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chunk(this),
        _Internal::chunk(this).GetCachedSize(), target, stream);
  }

  // repeated string destination_identities = 3;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamChunkRequest.destination_identities");
    target = stream->WriteString(3, s, target);
  }

  // required string sender_identity = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_identity().data(), static_cast<int>(this->_internal_sender_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamChunkRequest.sender_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamChunkRequest)
  return target;
}

size_t SendStreamChunkRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SendStreamChunkRequest)
  size_t total_size = 0;

  if (_internal_has_sender_identity()) {
    // required string sender_identity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());
  }

  if (_internal_has_chunk()) {
    // required .livekit.proto.DataStream.Chunk chunk = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_);
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t SendStreamChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamChunkRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sender_identity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());

    // required .livekit.proto.DataStream.Chunk chunk = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_);

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamChunkRequest::GetClassData() const { return &_class_data_; }


void SendStreamChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamChunkRequest*>(&to_msg);
  auto& from = static_cast<const SendStreamChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamChunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sender_identity(from._internal_sender_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chunk()->::livekit::proto::DataStream_Chunk::MergeFrom(
          from._internal_chunk());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamChunkRequest::CopyFrom(const SendStreamChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamChunkRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_chunk()) {
    if (!_impl_.chunk_->IsInitialized()) return false;
  }
  return true;
}

void SendStreamChunkRequest::InternalSwap(SendStreamChunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_identity_, lhs_arena,
      &other->_impl_.sender_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendStreamChunkRequest, _impl_.local_participant_handle_)
      + sizeof(SendStreamChunkRequest::_impl_.local_participant_handle_)
      - PROTOBUF_FIELD_OFFSET(SendStreamChunkRequest, _impl_.chunk_)>(
          reinterpret_cast<char*>(&_impl_.chunk_),
          reinterpret_cast<char*>(&other->_impl_.chunk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamChunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[99]);
}

// ===================================================================

class SendStreamTrailerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamTrailerRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::livekit::proto::DataStream_Trailer& trailer(const SendStreamTrailerRequest* msg);
  static void set_has_trailer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::livekit::proto::DataStream_Trailer&
SendStreamTrailerRequest::_Internal::trailer(const SendStreamTrailerRequest* msg) {
  return *msg->_impl_.trailer_;
}
SendStreamTrailerRequest::SendStreamTrailerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamTrailerRequest)
}
SendStreamTrailerRequest::SendStreamTrailerRequest(const SendStreamTrailerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamTrailerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.trailer_){nullptr}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_identity()) {
    _this->_impl_.sender_identity_.Set(from._internal_sender_identity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trailer()) {
    _this->_impl_.trailer_ = new ::livekit::proto::DataStream_Trailer(*from._impl_.trailer_);
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamTrailerRequest)
}

inline void SendStreamTrailerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.sender_identity_){}
    , decltype(_impl_.trailer_){nullptr}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.sender_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendStreamTrailerRequest::~SendStreamTrailerRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamTrailerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamTrailerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.sender_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trailer_;
}

void SendStreamTrailerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamTrailerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamTrailerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sender_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.trailer_ != nullptr);
      _impl_.trailer_->Clear();
    }
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamTrailerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataStream.Trailer trailer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trailer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamTrailerRequest.destination_identities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string sender_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamTrailerRequest.sender_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamTrailerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamTrailerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required .livekit.proto.DataStream.Trailer trailer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trailer(this),
        _Internal::trailer(this).GetCachedSize(), target, stream);
  }

  // repeated string destination_identities = 3;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamTrailerRequest.destination_identities");
    target = stream->WriteString(3, s, target);
  }

  // required string sender_identity = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_identity().data(), static_cast<int>(this->_internal_sender_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamTrailerRequest.sender_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamTrailerRequest)
  return target;
}

size_t SendStreamTrailerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SendStreamTrailerRequest)
  size_t total_size = 0;

  if (_internal_has_sender_identity()) {
    // required string sender_identity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());
  }

  if (_internal_has_trailer()) {
    // required .livekit.proto.DataStream.Trailer trailer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trailer_);
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t SendStreamTrailerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamTrailerRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sender_identity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_identity());

    // required .livekit.proto.DataStream.Trailer trailer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trailer_);

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_identities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamTrailerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamTrailerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamTrailerRequest::GetClassData() const { return &_class_data_; }


void SendStreamTrailerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamTrailerRequest*>(&to_msg);
  auto& from = static_cast<const SendStreamTrailerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamTrailerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sender_identity(from._internal_sender_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trailer()->::livekit::proto::DataStream_Trailer::MergeFrom(
          from._internal_trailer());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamTrailerRequest::CopyFrom(const SendStreamTrailerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamTrailerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamTrailerRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_trailer()) {
    if (!_impl_.trailer_->IsInitialized()) return false;
  }
  return true;
}

void SendStreamTrailerRequest::InternalSwap(SendStreamTrailerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_identity_, lhs_arena,
      &other->_impl_.sender_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendStreamTrailerRequest, _impl_.local_participant_handle_)
      + sizeof(SendStreamTrailerRequest::_impl_.local_participant_handle_)
      - PROTOBUF_FIELD_OFFSET(SendStreamTrailerRequest, _impl_.trailer_)>(
          reinterpret_cast<char*>(&_impl_.trailer_),
          reinterpret_cast<char*>(&other->_impl_.trailer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamTrailerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[100]);
}

// ===================================================================

class SendStreamHeaderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamHeaderResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SendStreamHeaderResponse::SendStreamHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamHeaderResponse)
}
SendStreamHeaderResponse::SendStreamHeaderResponse(const SendStreamHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamHeaderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamHeaderResponse)
}

inline void SendStreamHeaderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SendStreamHeaderResponse::~SendStreamHeaderResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamHeaderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendStreamHeaderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamHeaderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamHeaderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamHeaderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamHeaderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamHeaderResponse)
  return target;
}

size_t SendStreamHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamHeaderResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamHeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamHeaderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamHeaderResponse::GetClassData() const { return &_class_data_; }


void SendStreamHeaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamHeaderResponse*>(&to_msg);
  auto& from = static_cast<const SendStreamHeaderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamHeaderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamHeaderResponse::CopyFrom(const SendStreamHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamHeaderResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendStreamHeaderResponse::InternalSwap(SendStreamHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamHeaderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[101]);
}

// ===================================================================

class SendStreamChunkResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamChunkResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SendStreamChunkResponse::SendStreamChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamChunkResponse)
}
SendStreamChunkResponse::SendStreamChunkResponse(const SendStreamChunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamChunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamChunkResponse)
}

inline void SendStreamChunkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SendStreamChunkResponse::~SendStreamChunkResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamChunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamChunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendStreamChunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamChunkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamChunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamChunkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamChunkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamChunkResponse)
  return target;
}

size_t SendStreamChunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamChunkResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamChunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamChunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamChunkResponse::GetClassData() const { return &_class_data_; }


void SendStreamChunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamChunkResponse*>(&to_msg);
  auto& from = static_cast<const SendStreamChunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamChunkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamChunkResponse::CopyFrom(const SendStreamChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamChunkResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendStreamChunkResponse::InternalSwap(SendStreamChunkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamChunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[102]);
}

// ===================================================================

class SendStreamTrailerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamTrailerResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SendStreamTrailerResponse::SendStreamTrailerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamTrailerResponse)
}
SendStreamTrailerResponse::SendStreamTrailerResponse(const SendStreamTrailerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamTrailerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamTrailerResponse)
}

inline void SendStreamTrailerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

SendStreamTrailerResponse::~SendStreamTrailerResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamTrailerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamTrailerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendStreamTrailerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamTrailerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamTrailerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamTrailerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamTrailerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamTrailerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamTrailerResponse)
  return target;
}

size_t SendStreamTrailerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamTrailerResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamTrailerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamTrailerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamTrailerResponse::GetClassData() const { return &_class_data_; }


void SendStreamTrailerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamTrailerResponse*>(&to_msg);
  auto& from = static_cast<const SendStreamTrailerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamTrailerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamTrailerResponse::CopyFrom(const SendStreamTrailerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamTrailerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamTrailerResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendStreamTrailerResponse::InternalSwap(SendStreamTrailerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamTrailerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[103]);
}

// ===================================================================

class SendStreamHeaderCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamHeaderCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SendStreamHeaderCallback::SendStreamHeaderCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamHeaderCallback)
}
SendStreamHeaderCallback::SendStreamHeaderCallback(const SendStreamHeaderCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamHeaderCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamHeaderCallback)
}

inline void SendStreamHeaderCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendStreamHeaderCallback::~SendStreamHeaderCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamHeaderCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamHeaderCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SendStreamHeaderCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamHeaderCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamHeaderCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamHeaderCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamHeaderCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamHeaderCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamHeaderCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamHeaderCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamHeaderCallback)
  return target;
}

size_t SendStreamHeaderCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamHeaderCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamHeaderCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamHeaderCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamHeaderCallback::GetClassData() const { return &_class_data_; }


void SendStreamHeaderCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamHeaderCallback*>(&to_msg);
  auto& from = static_cast<const SendStreamHeaderCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamHeaderCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamHeaderCallback::CopyFrom(const SendStreamHeaderCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamHeaderCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamHeaderCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendStreamHeaderCallback::InternalSwap(SendStreamHeaderCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamHeaderCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[104]);
}

// ===================================================================

class SendStreamChunkCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamChunkCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SendStreamChunkCallback::SendStreamChunkCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamChunkCallback)
}
SendStreamChunkCallback::SendStreamChunkCallback(const SendStreamChunkCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamChunkCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamChunkCallback)
}

inline void SendStreamChunkCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendStreamChunkCallback::~SendStreamChunkCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamChunkCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamChunkCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SendStreamChunkCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamChunkCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamChunkCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamChunkCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamChunkCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamChunkCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamChunkCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamChunkCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamChunkCallback)
  return target;
}

size_t SendStreamChunkCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamChunkCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamChunkCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamChunkCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamChunkCallback::GetClassData() const { return &_class_data_; }


void SendStreamChunkCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamChunkCallback*>(&to_msg);
  auto& from = static_cast<const SendStreamChunkCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamChunkCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamChunkCallback::CopyFrom(const SendStreamChunkCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamChunkCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamChunkCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendStreamChunkCallback::InternalSwap(SendStreamChunkCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamChunkCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[105]);
}

// ===================================================================

class SendStreamTrailerCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<SendStreamTrailerCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SendStreamTrailerCallback::SendStreamTrailerCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SendStreamTrailerCallback)
}
SendStreamTrailerCallback::SendStreamTrailerCallback(const SendStreamTrailerCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendStreamTrailerCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SendStreamTrailerCallback)
}

inline void SendStreamTrailerCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendStreamTrailerCallback::~SendStreamTrailerCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.SendStreamTrailerCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendStreamTrailerCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SendStreamTrailerCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendStreamTrailerCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SendStreamTrailerCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendStreamTrailerCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.SendStreamTrailerCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendStreamTrailerCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SendStreamTrailerCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.SendStreamTrailerCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SendStreamTrailerCallback)
  return target;
}

size_t SendStreamTrailerCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SendStreamTrailerCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendStreamTrailerCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendStreamTrailerCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendStreamTrailerCallback::GetClassData() const { return &_class_data_; }


void SendStreamTrailerCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendStreamTrailerCallback*>(&to_msg);
  auto& from = static_cast<const SendStreamTrailerCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SendStreamTrailerCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendStreamTrailerCallback::CopyFrom(const SendStreamTrailerCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SendStreamTrailerCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendStreamTrailerCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendStreamTrailerCallback::InternalSwap(SendStreamTrailerCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendStreamTrailerCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[106]);
}

// ===================================================================

class SetDataChannelBufferedAmountLowThresholdRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetDataChannelBufferedAmountLowThresholdRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SetDataChannelBufferedAmountLowThresholdRequest::SetDataChannelBufferedAmountLowThresholdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
}
SetDataChannelBufferedAmountLowThresholdRequest::SetDataChannelBufferedAmountLowThresholdRequest(const SetDataChannelBufferedAmountLowThresholdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetDataChannelBufferedAmountLowThresholdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
}

inline void SetDataChannelBufferedAmountLowThresholdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.threshold_){uint64_t{0u}}
    , decltype(_impl_.kind_){0}
  };
}

SetDataChannelBufferedAmountLowThresholdRequest::~SetDataChannelBufferedAmountLowThresholdRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetDataChannelBufferedAmountLowThresholdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetDataChannelBufferedAmountLowThresholdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetDataChannelBufferedAmountLowThresholdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kind_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDataChannelBufferedAmountLowThresholdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.DataPacketKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DataPacketKind_IsValid(val))) {
            _internal_set_kind(static_cast<::livekit::proto::DataPacketKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetDataChannelBufferedAmountLowThresholdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required uint64 threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_threshold(), target);
  }

  // required .livekit.proto.DataPacketKind kind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  return target;
}

size_t SetDataChannelBufferedAmountLowThresholdRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  size_t total_size = 0;

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_threshold()) {
    // required uint64 threshold = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_threshold());
  }

  if (_internal_has_kind()) {
    // required .livekit.proto.DataPacketKind kind = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return total_size;
}
size_t SetDataChannelBufferedAmountLowThresholdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required uint64 threshold = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_threshold());

    // required .livekit.proto.DataPacketKind kind = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDataChannelBufferedAmountLowThresholdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetDataChannelBufferedAmountLowThresholdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDataChannelBufferedAmountLowThresholdRequest::GetClassData() const { return &_class_data_; }


void SetDataChannelBufferedAmountLowThresholdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetDataChannelBufferedAmountLowThresholdRequest*>(&to_msg);
  auto& from = static_cast<const SetDataChannelBufferedAmountLowThresholdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.threshold_ = from._impl_.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDataChannelBufferedAmountLowThresholdRequest::CopyFrom(const SetDataChannelBufferedAmountLowThresholdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDataChannelBufferedAmountLowThresholdRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetDataChannelBufferedAmountLowThresholdRequest::InternalSwap(SetDataChannelBufferedAmountLowThresholdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetDataChannelBufferedAmountLowThresholdRequest, _impl_.kind_)
      + sizeof(SetDataChannelBufferedAmountLowThresholdRequest::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(SetDataChannelBufferedAmountLowThresholdRequest, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDataChannelBufferedAmountLowThresholdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[107]);
}

// ===================================================================

class SetDataChannelBufferedAmountLowThresholdResponse::_Internal {
 public:
};

SetDataChannelBufferedAmountLowThresholdResponse::SetDataChannelBufferedAmountLowThresholdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse)
}
SetDataChannelBufferedAmountLowThresholdResponse::SetDataChannelBufferedAmountLowThresholdResponse(const SetDataChannelBufferedAmountLowThresholdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetDataChannelBufferedAmountLowThresholdResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDataChannelBufferedAmountLowThresholdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDataChannelBufferedAmountLowThresholdResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetDataChannelBufferedAmountLowThresholdResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[108]);
}

// ===================================================================

class DataChannelBufferedAmountLowThresholdChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<DataChannelBufferedAmountLowThresholdChanged>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DataChannelBufferedAmountLowThresholdChanged::DataChannelBufferedAmountLowThresholdChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
}
DataChannelBufferedAmountLowThresholdChanged::DataChannelBufferedAmountLowThresholdChanged(const DataChannelBufferedAmountLowThresholdChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataChannelBufferedAmountLowThresholdChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.threshold_, &from._impl_.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
}

inline void DataChannelBufferedAmountLowThresholdChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_){uint64_t{0u}}
    , decltype(_impl_.kind_){0}
  };
}

DataChannelBufferedAmountLowThresholdChanged::~DataChannelBufferedAmountLowThresholdChanged() {
  // @@protoc_insertion_point(destructor:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataChannelBufferedAmountLowThresholdChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataChannelBufferedAmountLowThresholdChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataChannelBufferedAmountLowThresholdChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kind_) -
        reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChannelBufferedAmountLowThresholdChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.DataPacketKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::DataPacketKind_IsValid(val))) {
            _internal_set_kind(static_cast<::livekit::proto::DataPacketKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint64 threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChannelBufferedAmountLowThresholdChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.DataPacketKind kind = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // required uint64 threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  return target;
}

size_t DataChannelBufferedAmountLowThresholdChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  size_t total_size = 0;

  if (_internal_has_threshold()) {
    // required uint64 threshold = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_threshold());
  }

  if (_internal_has_kind()) {
    // required .livekit.proto.DataPacketKind kind = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return total_size;
}
size_t DataChannelBufferedAmountLowThresholdChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 threshold = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_threshold());

    // required .livekit.proto.DataPacketKind kind = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChannelBufferedAmountLowThresholdChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataChannelBufferedAmountLowThresholdChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChannelBufferedAmountLowThresholdChanged::GetClassData() const { return &_class_data_; }


void DataChannelBufferedAmountLowThresholdChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataChannelBufferedAmountLowThresholdChanged*>(&to_msg);
  auto& from = static_cast<const DataChannelBufferedAmountLowThresholdChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.threshold_ = from._impl_.threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChannelBufferedAmountLowThresholdChanged::CopyFrom(const DataChannelBufferedAmountLowThresholdChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.DataChannelBufferedAmountLowThresholdChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChannelBufferedAmountLowThresholdChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataChannelBufferedAmountLowThresholdChanged::InternalSwap(DataChannelBufferedAmountLowThresholdChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChannelBufferedAmountLowThresholdChanged, _impl_.kind_)
      + sizeof(DataChannelBufferedAmountLowThresholdChanged::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(DataChannelBufferedAmountLowThresholdChanged, _impl_.threshold_)>(
          reinterpret_cast<char*>(&_impl_.threshold_),
          reinterpret_cast<char*>(&other->_impl_.threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChannelBufferedAmountLowThresholdChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_room_2eproto_getter, &descriptor_table_room_2eproto_once,
      file_level_metadata_room_2eproto[109]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectRequest*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectResponse*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectCallback_ParticipantWithTracks*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectCallback_ParticipantWithTracks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectCallback_ParticipantWithTracks >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectCallback_Result*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectCallback_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectCallback_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectCallback*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DisconnectRequest*
Arena::CreateMaybeMessage< ::livekit::proto::DisconnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DisconnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DisconnectResponse*
Arena::CreateMaybeMessage< ::livekit::proto::DisconnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DisconnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DisconnectCallback*
Arena::CreateMaybeMessage< ::livekit::proto::DisconnectCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DisconnectCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishTrackRequest*
Arena::CreateMaybeMessage< ::livekit::proto::PublishTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishTrackResponse*
Arena::CreateMaybeMessage< ::livekit::proto::PublishTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishTrackCallback*
Arena::CreateMaybeMessage< ::livekit::proto::PublishTrackCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishTrackCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::UnpublishTrackRequest*
Arena::CreateMaybeMessage< ::livekit::proto::UnpublishTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::UnpublishTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::UnpublishTrackResponse*
Arena::CreateMaybeMessage< ::livekit::proto::UnpublishTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::UnpublishTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::UnpublishTrackCallback*
Arena::CreateMaybeMessage< ::livekit::proto::UnpublishTrackCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::UnpublishTrackCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishDataRequest*
Arena::CreateMaybeMessage< ::livekit::proto::PublishDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishDataResponse*
Arena::CreateMaybeMessage< ::livekit::proto::PublishDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishDataCallback*
Arena::CreateMaybeMessage< ::livekit::proto::PublishDataCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishDataCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishTranscriptionRequest*
Arena::CreateMaybeMessage< ::livekit::proto::PublishTranscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishTranscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishTranscriptionResponse*
Arena::CreateMaybeMessage< ::livekit::proto::PublishTranscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishTranscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishTranscriptionCallback*
Arena::CreateMaybeMessage< ::livekit::proto::PublishTranscriptionCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishTranscriptionCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishSipDtmfRequest*
Arena::CreateMaybeMessage< ::livekit::proto::PublishSipDtmfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishSipDtmfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishSipDtmfResponse*
Arena::CreateMaybeMessage< ::livekit::proto::PublishSipDtmfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishSipDtmfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PublishSipDtmfCallback*
Arena::CreateMaybeMessage< ::livekit::proto::PublishSipDtmfCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PublishSipDtmfCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalMetadataRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalMetadataResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalMetadataCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalMetadataCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalMetadataCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendChatMessageRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SendChatMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendChatMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::EditChatMessageRequest*
Arena::CreateMaybeMessage< ::livekit::proto::EditChatMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::EditChatMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendChatMessageResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SendChatMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendChatMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendChatMessageCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SendChatMessageCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendChatMessageCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalAttributesRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalAttributesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalAttributesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::AttributesEntry*
Arena::CreateMaybeMessage< ::livekit::proto::AttributesEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::AttributesEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalAttributesResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalAttributesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalAttributesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalAttributesCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalAttributesCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalAttributesCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalNameRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalNameResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetLocalNameCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SetLocalNameCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetLocalNameCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetSubscribedRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SetSubscribedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetSubscribedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetSubscribedResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SetSubscribedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetSubscribedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetSessionStatsRequest*
Arena::CreateMaybeMessage< ::livekit::proto::GetSessionStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetSessionStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetSessionStatsResponse*
Arena::CreateMaybeMessage< ::livekit::proto::GetSessionStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetSessionStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetSessionStatsCallback_Result*
Arena::CreateMaybeMessage< ::livekit::proto::GetSessionStatsCallback_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetSessionStatsCallback_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetSessionStatsCallback*
Arena::CreateMaybeMessage< ::livekit::proto::GetSessionStatsCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetSessionStatsCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::VideoEncoding*
Arena::CreateMaybeMessage< ::livekit::proto::VideoEncoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::VideoEncoding >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::AudioEncoding*
Arena::CreateMaybeMessage< ::livekit::proto::AudioEncoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::AudioEncoding >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackPublishOptions*
Arena::CreateMaybeMessage< ::livekit::proto::TrackPublishOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackPublishOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::IceServer*
Arena::CreateMaybeMessage< ::livekit::proto::IceServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::IceServer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RtcConfig*
Arena::CreateMaybeMessage< ::livekit::proto::RtcConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RtcConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RoomOptions*
Arena::CreateMaybeMessage< ::livekit::proto::RoomOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RoomOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TranscriptionSegment*
Arena::CreateMaybeMessage< ::livekit::proto::TranscriptionSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TranscriptionSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::BufferInfo*
Arena::CreateMaybeMessage< ::livekit::proto::BufferInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::BufferInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OwnedBuffer*
Arena::CreateMaybeMessage< ::livekit::proto::OwnedBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OwnedBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RoomEvent*
Arena::CreateMaybeMessage< ::livekit::proto::RoomEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RoomEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RoomInfo*
Arena::CreateMaybeMessage< ::livekit::proto::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OwnedRoom*
Arena::CreateMaybeMessage< ::livekit::proto::OwnedRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OwnedRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantConnected*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantDisconnected*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantDisconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantDisconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LocalTrackPublished*
Arena::CreateMaybeMessage< ::livekit::proto::LocalTrackPublished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LocalTrackPublished >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LocalTrackUnpublished*
Arena::CreateMaybeMessage< ::livekit::proto::LocalTrackUnpublished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LocalTrackUnpublished >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LocalTrackSubscribed*
Arena::CreateMaybeMessage< ::livekit::proto::LocalTrackSubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LocalTrackSubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackPublished*
Arena::CreateMaybeMessage< ::livekit::proto::TrackPublished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackPublished >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackUnpublished*
Arena::CreateMaybeMessage< ::livekit::proto::TrackUnpublished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackUnpublished >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackSubscribed*
Arena::CreateMaybeMessage< ::livekit::proto::TrackSubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackSubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackUnsubscribed*
Arena::CreateMaybeMessage< ::livekit::proto::TrackUnsubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackUnsubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackSubscriptionFailed*
Arena::CreateMaybeMessage< ::livekit::proto::TrackSubscriptionFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackSubscriptionFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackMuted*
Arena::CreateMaybeMessage< ::livekit::proto::TrackMuted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackMuted >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackUnmuted*
Arena::CreateMaybeMessage< ::livekit::proto::TrackUnmuted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackUnmuted >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::E2eeStateChanged*
Arena::CreateMaybeMessage< ::livekit::proto::E2eeStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::E2eeStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ActiveSpeakersChanged*
Arena::CreateMaybeMessage< ::livekit::proto::ActiveSpeakersChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ActiveSpeakersChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RoomMetadataChanged*
Arena::CreateMaybeMessage< ::livekit::proto::RoomMetadataChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RoomMetadataChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RoomSidChanged*
Arena::CreateMaybeMessage< ::livekit::proto::RoomSidChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RoomSidChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantMetadataChanged*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantMetadataChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantMetadataChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantAttributesChanged*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantAttributesChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantAttributesChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantNameChanged*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantNameChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantNameChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectionQualityChanged*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectionQualityChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectionQualityChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::UserPacket*
Arena::CreateMaybeMessage< ::livekit::proto::UserPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::UserPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ChatMessage*
Arena::CreateMaybeMessage< ::livekit::proto::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ChatMessageReceived*
Arena::CreateMaybeMessage< ::livekit::proto::ChatMessageReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ChatMessageReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SipDTMF*
Arena::CreateMaybeMessage< ::livekit::proto::SipDTMF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SipDTMF >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataPacketReceived*
Arena::CreateMaybeMessage< ::livekit::proto::DataPacketReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataPacketReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TranscriptionReceived*
Arena::CreateMaybeMessage< ::livekit::proto::TranscriptionReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TranscriptionReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ConnectionStateChanged*
Arena::CreateMaybeMessage< ::livekit::proto::ConnectionStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ConnectionStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::Connected*
Arena::CreateMaybeMessage< ::livekit::proto::Connected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::Connected >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::Disconnected*
Arena::CreateMaybeMessage< ::livekit::proto::Disconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::Disconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::Reconnecting*
Arena::CreateMaybeMessage< ::livekit::proto::Reconnecting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::Reconnecting >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::Reconnected*
Arena::CreateMaybeMessage< ::livekit::proto::Reconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::Reconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RoomEOS*
Arena::CreateMaybeMessage< ::livekit::proto::RoomEOS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RoomEOS >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_TextHeader*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_TextHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_TextHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_ByteHeader*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_ByteHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_ByteHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_Header_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_Header*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_Chunk*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_Trailer_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream_Trailer*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream_Trailer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream_Trailer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStream*
Arena::CreateMaybeMessage< ::livekit::proto::DataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStream >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStreamHeaderReceived*
Arena::CreateMaybeMessage< ::livekit::proto::DataStreamHeaderReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStreamHeaderReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStreamChunkReceived*
Arena::CreateMaybeMessage< ::livekit::proto::DataStreamChunkReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStreamChunkReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataStreamTrailerReceived*
Arena::CreateMaybeMessage< ::livekit::proto::DataStreamTrailerReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataStreamTrailerReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamHeaderRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamHeaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamHeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamChunkRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamTrailerRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamTrailerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamTrailerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamHeaderResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamHeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamChunkResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamChunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamChunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamTrailerResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamTrailerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamTrailerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamHeaderCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamHeaderCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamHeaderCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamChunkCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamChunkCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamChunkCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SendStreamTrailerCallback*
Arena::CreateMaybeMessage< ::livekit::proto::SendStreamTrailerCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SendStreamTrailerCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetDataChannelBufferedAmountLowThresholdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::DataChannelBufferedAmountLowThresholdChanged*
Arena::CreateMaybeMessage< ::livekit::proto::DataChannelBufferedAmountLowThresholdChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::DataChannelBufferedAmountLowThresholdChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
