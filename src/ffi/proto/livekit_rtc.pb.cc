// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_rtc.proto

#include "livekit_rtc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR SignalRequest::SignalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SignalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalRequestDefaultTypeInternal() {}
  union {
    SignalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalRequestDefaultTypeInternal _SignalRequest_default_instance_;
PROTOBUF_CONSTEXPR SignalResponse::SignalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SignalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalResponseDefaultTypeInternal() {}
  union {
    SignalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalResponseDefaultTypeInternal _SignalResponse_default_instance_;
PROTOBUF_CONSTEXPR SimulcastCodec::SimulcastCodec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.codec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimulcastCodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulcastCodecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulcastCodecDefaultTypeInternal() {}
  union {
    SimulcastCodec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulcastCodecDefaultTypeInternal _SimulcastCodec_default_instance_;
PROTOBUF_CONSTEXPR AddTrackRequest::AddTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.simulcast_codecs_)*/{}
  , /*decltype(_impl_.cid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.muted_)*/false
  , /*decltype(_impl_.disable_dtx_)*/false
  , /*decltype(_impl_.stereo_)*/false
  , /*decltype(_impl_.disable_red_)*/false
  , /*decltype(_impl_.encryption_)*/0
  , /*decltype(_impl_.backup_codec_policy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTrackRequestDefaultTypeInternal() {}
  union {
    AddTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTrackRequestDefaultTypeInternal _AddTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR TrickleRequest::TrickleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candidateinit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/0
  , /*decltype(_impl_.final_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrickleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrickleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrickleRequestDefaultTypeInternal() {}
  union {
    TrickleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrickleRequestDefaultTypeInternal _TrickleRequest_default_instance_;
PROTOBUF_CONSTEXPR MuteTrackRequest::MuteTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.muted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MuteTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteTrackRequestDefaultTypeInternal() {}
  union {
    MuteTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteTrackRequestDefaultTypeInternal _MuteTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR JoinResponse::JoinResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.other_participants_)*/{}
  , /*decltype(_impl_.ice_servers_)*/{}
  , /*decltype(_impl_.enabled_publish_codecs_)*/{}
  , /*decltype(_impl_.server_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alternative_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sif_trailer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.participant_)*/nullptr
  , /*decltype(_impl_.client_configuration_)*/nullptr
  , /*decltype(_impl_.server_info_)*/nullptr
  , /*decltype(_impl_.ping_timeout_)*/0
  , /*decltype(_impl_.subscriber_primary_)*/false
  , /*decltype(_impl_.fast_publish_)*/false
  , /*decltype(_impl_.ping_interval_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinResponseDefaultTypeInternal() {}
  union {
    JoinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinResponseDefaultTypeInternal _JoinResponse_default_instance_;
PROTOBUF_CONSTEXPR ReconnectResponse::ReconnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ice_servers_)*/{}
  , /*decltype(_impl_.client_configuration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectResponseDefaultTypeInternal() {}
  union {
    ReconnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectResponseDefaultTypeInternal _ReconnectResponse_default_instance_;
PROTOBUF_CONSTEXPR TrackPublishedResponse::TrackPublishedResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackPublishedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPublishedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPublishedResponseDefaultTypeInternal() {}
  union {
    TrackPublishedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPublishedResponseDefaultTypeInternal _TrackPublishedResponse_default_instance_;
PROTOBUF_CONSTEXPR TrackUnpublishedResponse::TrackUnpublishedResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackUnpublishedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackUnpublishedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackUnpublishedResponseDefaultTypeInternal() {}
  union {
    TrackUnpublishedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackUnpublishedResponseDefaultTypeInternal _TrackUnpublishedResponse_default_instance_;
PROTOBUF_CONSTEXPR SessionDescription::SessionDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDescriptionDefaultTypeInternal() {}
  union {
    SessionDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDescriptionDefaultTypeInternal _SessionDescription_default_instance_;
PROTOBUF_CONSTEXPR ParticipantUpdate::ParticipantUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participants_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantUpdateDefaultTypeInternal() {}
  union {
    ParticipantUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantUpdateDefaultTypeInternal _ParticipantUpdate_default_instance_;
PROTOBUF_CONSTEXPR UpdateSubscription::UpdateSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sids_)*/{}
  , /*decltype(_impl_.participant_tracks_)*/{}
  , /*decltype(_impl_.subscribe_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSubscriptionDefaultTypeInternal() {}
  union {
    UpdateSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSubscriptionDefaultTypeInternal _UpdateSubscription_default_instance_;
PROTOBUF_CONSTEXPR UpdateTrackSettings::UpdateTrackSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sids_)*/{}
  , /*decltype(_impl_.disabled_)*/false
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.fps_)*/0u
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateTrackSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateTrackSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateTrackSettingsDefaultTypeInternal() {}
  union {
    UpdateTrackSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateTrackSettingsDefaultTypeInternal _UpdateTrackSettings_default_instance_;
PROTOBUF_CONSTEXPR UpdateLocalAudioTrack::UpdateLocalAudioTrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_._features_cached_byte_size_)*/{0}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateLocalAudioTrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateLocalAudioTrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateLocalAudioTrackDefaultTypeInternal() {}
  union {
    UpdateLocalAudioTrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateLocalAudioTrackDefaultTypeInternal _UpdateLocalAudioTrack_default_instance_;
PROTOBUF_CONSTEXPR UpdateLocalVideoTrack::UpdateLocalVideoTrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateLocalVideoTrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateLocalVideoTrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateLocalVideoTrackDefaultTypeInternal() {}
  union {
    UpdateLocalVideoTrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateLocalVideoTrackDefaultTypeInternal _UpdateLocalVideoTrack_default_instance_;
PROTOBUF_CONSTEXPR LeaveRequest::LeaveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regions_)*/nullptr
  , /*decltype(_impl_.can_reconnect_)*/false
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveRequestDefaultTypeInternal() {}
  union {
    LeaveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateVideoLayers::UpdateVideoLayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateVideoLayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateVideoLayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateVideoLayersDefaultTypeInternal() {}
  union {
    UpdateVideoLayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateVideoLayersDefaultTypeInternal _UpdateVideoLayers_default_instance_;
PROTOBUF_CONSTEXPR UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdateParticipantMetadata_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal _UpdateParticipantMetadata_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UpdateParticipantMetadata::UpdateParticipantMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateParticipantMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateParticipantMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateParticipantMetadataDefaultTypeInternal() {}
  union {
    UpdateParticipantMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateParticipantMetadataDefaultTypeInternal _UpdateParticipantMetadata_default_instance_;
PROTOBUF_CONSTEXPR ICEServer::ICEServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.urls_)*/{}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credential_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ICEServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ICEServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ICEServerDefaultTypeInternal() {}
  union {
    ICEServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ICEServerDefaultTypeInternal _ICEServer_default_instance_;
PROTOBUF_CONSTEXPR SpeakersChanged::SpeakersChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speakers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpeakersChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeakersChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeakersChangedDefaultTypeInternal() {}
  union {
    SpeakersChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeakersChangedDefaultTypeInternal _SpeakersChanged_default_instance_;
PROTOBUF_CONSTEXPR RoomUpdate::RoomUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomUpdateDefaultTypeInternal() {}
  union {
    RoomUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomUpdateDefaultTypeInternal _RoomUpdate_default_instance_;
PROTOBUF_CONSTEXPR ConnectionQualityInfo::ConnectionQualityInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionQualityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionQualityInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionQualityInfoDefaultTypeInternal() {}
  union {
    ConnectionQualityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionQualityInfoDefaultTypeInternal _ConnectionQualityInfo_default_instance_;
PROTOBUF_CONSTEXPR ConnectionQualityUpdate::ConnectionQualityUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionQualityUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionQualityUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionQualityUpdateDefaultTypeInternal() {}
  union {
    ConnectionQualityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionQualityUpdateDefaultTypeInternal _ConnectionQualityUpdate_default_instance_;
PROTOBUF_CONSTEXPR StreamStateInfo::StreamStateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamStateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStateInfoDefaultTypeInternal() {}
  union {
    StreamStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStateInfoDefaultTypeInternal _StreamStateInfo_default_instance_;
PROTOBUF_CONSTEXPR StreamStateUpdate::StreamStateUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamStateUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStateUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStateUpdateDefaultTypeInternal() {}
  union {
    StreamStateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStateUpdateDefaultTypeInternal _StreamStateUpdate_default_instance_;
PROTOBUF_CONSTEXPR SubscribedQuality::SubscribedQuality(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribedQualityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedQualityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedQualityDefaultTypeInternal() {}
  union {
    SubscribedQuality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedQualityDefaultTypeInternal _SubscribedQuality_default_instance_;
PROTOBUF_CONSTEXPR SubscribedCodec::SubscribedCodec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qualities_)*/{}
  , /*decltype(_impl_.codec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribedCodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedCodecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedCodecDefaultTypeInternal() {}
  union {
    SubscribedCodec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedCodecDefaultTypeInternal _SubscribedCodec_default_instance_;
PROTOBUF_CONSTEXPR SubscribedQualityUpdate::SubscribedQualityUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscribed_qualities_)*/{}
  , /*decltype(_impl_.subscribed_codecs_)*/{}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribedQualityUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedQualityUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedQualityUpdateDefaultTypeInternal() {}
  union {
    SubscribedQualityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedQualityUpdateDefaultTypeInternal _SubscribedQualityUpdate_default_instance_;
PROTOBUF_CONSTEXPR TrackPermission::TrackPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sids_)*/{}
  , /*decltype(_impl_.participant_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_tracks_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPermissionDefaultTypeInternal() {}
  union {
    TrackPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPermissionDefaultTypeInternal _TrackPermission_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionPermission::SubscriptionPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_permissions_)*/{}
  , /*decltype(_impl_.all_participants_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionPermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionPermissionDefaultTypeInternal() {}
  union {
    SubscriptionPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionPermissionDefaultTypeInternal _SubscriptionPermission_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allowed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionPermissionUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionPermissionUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionPermissionUpdateDefaultTypeInternal() {}
  union {
    SubscriptionPermissionUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionPermissionUpdateDefaultTypeInternal _SubscriptionPermissionUpdate_default_instance_;
PROTOBUF_CONSTEXPR SyncState::SyncState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publish_tracks_)*/{}
  , /*decltype(_impl_.data_channels_)*/{}
  , /*decltype(_impl_.track_sids_disabled_)*/{}
  , /*decltype(_impl_.answer_)*/nullptr
  , /*decltype(_impl_.subscription_)*/nullptr
  , /*decltype(_impl_.offer_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncStateDefaultTypeInternal() {}
  union {
    SyncState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncStateDefaultTypeInternal _SyncState_default_instance_;
PROTOBUF_CONSTEXPR DataChannelInfo::DataChannelInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.target_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataChannelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChannelInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChannelInfoDefaultTypeInternal() {}
  union {
    DataChannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChannelInfoDefaultTypeInternal _DataChannelInfo_default_instance_;
PROTOBUF_CONSTEXPR SimulateScenario::SimulateScenario(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scenario_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SimulateScenarioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulateScenarioDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulateScenarioDefaultTypeInternal() {}
  union {
    SimulateScenario _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulateScenarioDefaultTypeInternal _SimulateScenario_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.rtt_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR Pong::Pong(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_ping_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PongDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PongDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PongDefaultTypeInternal() {}
  union {
    Pong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PongDefaultTypeInternal _Pong_default_instance_;
PROTOBUF_CONSTEXPR RegionSettings::RegionSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionSettingsDefaultTypeInternal() {}
  union {
    RegionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionSettingsDefaultTypeInternal _RegionSettings_default_instance_;
PROTOBUF_CONSTEXPR RegionInfo::RegionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionInfoDefaultTypeInternal() {}
  union {
    RegionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionResponse::SubscriptionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionResponseDefaultTypeInternal() {}
  union {
    SubscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionResponseDefaultTypeInternal _SubscriptionResponse_default_instance_;
PROTOBUF_CONSTEXPR RequestResponse::RequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/0u
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestResponseDefaultTypeInternal() {}
  union {
    RequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestResponseDefaultTypeInternal _RequestResponse_default_instance_;
PROTOBUF_CONSTEXPR TrackSubscribed::TrackSubscribed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackSubscribedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackSubscribedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackSubscribedDefaultTypeInternal() {}
  union {
    TrackSubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackSubscribedDefaultTypeInternal _TrackSubscribed_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5frtc_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_livekit_5frtc_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5frtc_2eproto = nullptr;

const uint32_t TableStruct_livekit_5frtc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _impl_.codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _impl_.cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.cid_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.muted_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.disable_dtx_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.layers_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.simulcast_codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.stereo_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.disable_red_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.encryption_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.backup_codec_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_.candidateinit_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_.final_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _impl_.muted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.other_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.ice_servers_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.subscriber_primary_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.alternative_url_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.client_configuration_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.ping_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.ping_interval_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.server_info_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.sif_trailer_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.enabled_publish_codecs_),
  PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.fast_publish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _impl_.ice_servers_),
  PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _impl_.client_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _impl_.cid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _impl_.track_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, _impl_.track_sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _impl_.sdp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ParticipantUpdate, _impl_.participants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_.track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_.subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_.participant_tracks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.disabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.fps_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _impl_.features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.can_reconnect_),
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _impl_.layers_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_.urls_),
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_.credential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakersChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SpeakersChanged, _impl_.speakers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, _impl_.room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_.participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityUpdate, _impl_.updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_.participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::StreamStateUpdate, _impl_.stream_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _impl_.enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _impl_.codec_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _impl_.qualities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_.subscribed_qualities_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_.subscribed_codecs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.all_tracks_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.participant_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _impl_.all_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _impl_.track_permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_.participant_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_.allowed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.answer_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.subscription_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.publish_tracks_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.data_channels_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.track_sids_disabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _impl_.scenario_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Ping, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::Ping, _impl_.rtt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::Pong, _impl_.last_ping_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::Pong, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RegionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RegionSettings, _impl_.regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_.distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TrackSubscribed, _impl_.track_sid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::SignalRequest)},
  { 24, -1, -1, sizeof(::livekit::SignalResponse)},
  { 53, -1, -1, sizeof(::livekit::SimulcastCodec)},
  { 61, -1, -1, sizeof(::livekit::AddTrackRequest)},
  { 83, -1, -1, sizeof(::livekit::TrickleRequest)},
  { 92, -1, -1, sizeof(::livekit::MuteTrackRequest)},
  { 100, -1, -1, sizeof(::livekit::JoinResponse)},
  { 121, -1, -1, sizeof(::livekit::ReconnectResponse)},
  { 129, -1, -1, sizeof(::livekit::TrackPublishedResponse)},
  { 137, -1, -1, sizeof(::livekit::TrackUnpublishedResponse)},
  { 144, -1, -1, sizeof(::livekit::SessionDescription)},
  { 152, -1, -1, sizeof(::livekit::ParticipantUpdate)},
  { 159, -1, -1, sizeof(::livekit::UpdateSubscription)},
  { 168, -1, -1, sizeof(::livekit::UpdateTrackSettings)},
  { 181, -1, -1, sizeof(::livekit::UpdateLocalAudioTrack)},
  { 189, -1, -1, sizeof(::livekit::UpdateLocalVideoTrack)},
  { 198, -1, -1, sizeof(::livekit::LeaveRequest)},
  { 208, -1, -1, sizeof(::livekit::UpdateVideoLayers)},
  { 216, 224, -1, sizeof(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse)},
  { 226, -1, -1, sizeof(::livekit::UpdateParticipantMetadata)},
  { 236, -1, -1, sizeof(::livekit::ICEServer)},
  { 245, -1, -1, sizeof(::livekit::SpeakersChanged)},
  { 252, -1, -1, sizeof(::livekit::RoomUpdate)},
  { 259, -1, -1, sizeof(::livekit::ConnectionQualityInfo)},
  { 268, -1, -1, sizeof(::livekit::ConnectionQualityUpdate)},
  { 275, -1, -1, sizeof(::livekit::StreamStateInfo)},
  { 284, -1, -1, sizeof(::livekit::StreamStateUpdate)},
  { 291, -1, -1, sizeof(::livekit::SubscribedQuality)},
  { 299, -1, -1, sizeof(::livekit::SubscribedCodec)},
  { 307, -1, -1, sizeof(::livekit::SubscribedQualityUpdate)},
  { 316, -1, -1, sizeof(::livekit::TrackPermission)},
  { 326, -1, -1, sizeof(::livekit::SubscriptionPermission)},
  { 334, -1, -1, sizeof(::livekit::SubscriptionPermissionUpdate)},
  { 343, -1, -1, sizeof(::livekit::SyncState)},
  { 355, -1, -1, sizeof(::livekit::DataChannelInfo)},
  { 364, -1, -1, sizeof(::livekit::SimulateScenario)},
  { 380, -1, -1, sizeof(::livekit::Ping)},
  { 388, -1, -1, sizeof(::livekit::Pong)},
  { 396, -1, -1, sizeof(::livekit::RegionSettings)},
  { 403, -1, -1, sizeof(::livekit::RegionInfo)},
  { 412, -1, -1, sizeof(::livekit::SubscriptionResponse)},
  { 420, -1, -1, sizeof(::livekit::RequestResponse)},
  { 429, -1, -1, sizeof(::livekit::TrackSubscribed)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_SignalRequest_default_instance_._instance,
  &::livekit::_SignalResponse_default_instance_._instance,
  &::livekit::_SimulcastCodec_default_instance_._instance,
  &::livekit::_AddTrackRequest_default_instance_._instance,
  &::livekit::_TrickleRequest_default_instance_._instance,
  &::livekit::_MuteTrackRequest_default_instance_._instance,
  &::livekit::_JoinResponse_default_instance_._instance,
  &::livekit::_ReconnectResponse_default_instance_._instance,
  &::livekit::_TrackPublishedResponse_default_instance_._instance,
  &::livekit::_TrackUnpublishedResponse_default_instance_._instance,
  &::livekit::_SessionDescription_default_instance_._instance,
  &::livekit::_ParticipantUpdate_default_instance_._instance,
  &::livekit::_UpdateSubscription_default_instance_._instance,
  &::livekit::_UpdateTrackSettings_default_instance_._instance,
  &::livekit::_UpdateLocalAudioTrack_default_instance_._instance,
  &::livekit::_UpdateLocalVideoTrack_default_instance_._instance,
  &::livekit::_LeaveRequest_default_instance_._instance,
  &::livekit::_UpdateVideoLayers_default_instance_._instance,
  &::livekit::_UpdateParticipantMetadata_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_UpdateParticipantMetadata_default_instance_._instance,
  &::livekit::_ICEServer_default_instance_._instance,
  &::livekit::_SpeakersChanged_default_instance_._instance,
  &::livekit::_RoomUpdate_default_instance_._instance,
  &::livekit::_ConnectionQualityInfo_default_instance_._instance,
  &::livekit::_ConnectionQualityUpdate_default_instance_._instance,
  &::livekit::_StreamStateInfo_default_instance_._instance,
  &::livekit::_StreamStateUpdate_default_instance_._instance,
  &::livekit::_SubscribedQuality_default_instance_._instance,
  &::livekit::_SubscribedCodec_default_instance_._instance,
  &::livekit::_SubscribedQualityUpdate_default_instance_._instance,
  &::livekit::_TrackPermission_default_instance_._instance,
  &::livekit::_SubscriptionPermission_default_instance_._instance,
  &::livekit::_SubscriptionPermissionUpdate_default_instance_._instance,
  &::livekit::_SyncState_default_instance_._instance,
  &::livekit::_DataChannelInfo_default_instance_._instance,
  &::livekit::_SimulateScenario_default_instance_._instance,
  &::livekit::_Ping_default_instance_._instance,
  &::livekit::_Pong_default_instance_._instance,
  &::livekit::_RegionSettings_default_instance_._instance,
  &::livekit::_RegionInfo_default_instance_._instance,
  &::livekit::_SubscriptionResponse_default_instance_._instance,
  &::livekit::_RequestResponse_default_instance_._instance,
  &::livekit::_TrackSubscribed_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5frtc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021livekit_rtc.proto\022\007livekit\032\024livekit_mo"
  "dels.proto\"\325\006\n\rSignalRequest\022,\n\005offer\030\001 "
  "\001(\0132\033.livekit.SessionDescriptionH\000\022-\n\006an"
  "swer\030\002 \001(\0132\033.livekit.SessionDescriptionH"
  "\000\022*\n\007trickle\030\003 \001(\0132\027.livekit.TrickleRequ"
  "estH\000\022-\n\tadd_track\030\004 \001(\0132\030.livekit.AddTr"
  "ackRequestH\000\022)\n\004mute\030\005 \001(\0132\031.livekit.Mut"
  "eTrackRequestH\000\0223\n\014subscription\030\006 \001(\0132\033."
  "livekit.UpdateSubscriptionH\000\0225\n\rtrack_se"
  "tting\030\007 \001(\0132\034.livekit.UpdateTrackSetting"
  "sH\000\022&\n\005leave\030\010 \001(\0132\025.livekit.LeaveReques"
  "tH\000\0227\n\rupdate_layers\030\n \001(\0132\032.livekit.Upd"
  "ateVideoLayersB\002\030\001H\000\022B\n\027subscription_per"
  "mission\030\013 \001(\0132\037.livekit.SubscriptionPerm"
  "issionH\000\022(\n\nsync_state\030\014 \001(\0132\022.livekit.S"
  "yncStateH\000\022-\n\010simulate\030\r \001(\0132\031.livekit.S"
  "imulateScenarioH\000\022\016\n\004ping\030\016 \001(\003H\000\022=\n\017upd"
  "ate_metadata\030\017 \001(\0132\".livekit.UpdateParti"
  "cipantMetadataH\000\022!\n\010ping_req\030\020 \001(\0132\r.liv"
  "ekit.PingH\000\022<\n\022update_audio_track\030\021 \001(\0132"
  "\036.livekit.UpdateLocalAudioTrackH\000\022<\n\022upd"
  "ate_video_track\030\022 \001(\0132\036.livekit.UpdateLo"
  "calVideoTrackH\000B\t\n\007message\"\347\010\n\016SignalRes"
  "ponse\022%\n\004join\030\001 \001(\0132\025.livekit.JoinRespon"
  "seH\000\022-\n\006answer\030\002 \001(\0132\033.livekit.SessionDe"
  "scriptionH\000\022,\n\005offer\030\003 \001(\0132\033.livekit.Ses"
  "sionDescriptionH\000\022*\n\007trickle\030\004 \001(\0132\027.liv"
  "ekit.TrickleRequestH\000\022,\n\006update\030\005 \001(\0132\032."
  "livekit.ParticipantUpdateH\000\022:\n\017track_pub"
  "lished\030\006 \001(\0132\037.livekit.TrackPublishedRes"
  "ponseH\000\022&\n\005leave\030\010 \001(\0132\025.livekit.LeaveRe"
  "questH\000\022)\n\004mute\030\t \001(\0132\031.livekit.MuteTrac"
  "kRequestH\000\0224\n\020speakers_changed\030\n \001(\0132\030.l"
  "ivekit.SpeakersChangedH\000\022*\n\013room_update\030"
  "\013 \001(\0132\023.livekit.RoomUpdateH\000\022>\n\022connecti"
  "on_quality\030\014 \001(\0132 .livekit.ConnectionQua"
  "lityUpdateH\000\0229\n\023stream_state_update\030\r \001("
  "\0132\032.livekit.StreamStateUpdateH\000\022E\n\031subsc"
  "ribed_quality_update\030\016 \001(\0132 .livekit.Sub"
  "scribedQualityUpdateH\000\022O\n\036subscription_p"
  "ermission_update\030\017 \001(\0132%.livekit.Subscri"
  "ptionPermissionUpdateH\000\022\027\n\rrefresh_token"
  "\030\020 \001(\tH\000\022>\n\021track_unpublished\030\021 \001(\0132!.li"
  "vekit.TrackUnpublishedResponseH\000\022\016\n\004pong"
  "\030\022 \001(\003H\000\022/\n\treconnect\030\023 \001(\0132\032.livekit.Re"
  "connectResponseH\000\022\"\n\tpong_resp\030\024 \001(\0132\r.l"
  "ivekit.PongH\000\022>\n\025subscription_response\030\025"
  " \001(\0132\035.livekit.SubscriptionResponseH\000\0224\n"
  "\020request_response\030\026 \001(\0132\030.livekit.Reques"
  "tResponseH\000\0224\n\020track_subscribed\030\027 \001(\0132\030."
  "livekit.TrackSubscribedH\000B\t\n\007message\",\n\016"
  "SimulcastCodec\022\r\n\005codec\030\001 \001(\t\022\013\n\003cid\030\002 \001"
  "(\t\"\270\003\n\017AddTrackRequest\022\013\n\003cid\030\001 \001(\t\022\014\n\004n"
  "ame\030\002 \001(\t\022 \n\004type\030\003 \001(\0162\022.livekit.TrackT"
  "ype\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022\r\n\005mu"
  "ted\030\006 \001(\010\022\023\n\013disable_dtx\030\007 \001(\010\022$\n\006source"
  "\030\010 \001(\0162\024.livekit.TrackSource\022#\n\006layers\030\t"
  " \003(\0132\023.livekit.VideoLayer\0221\n\020simulcast_c"
  "odecs\030\n \003(\0132\027.livekit.SimulcastCodec\022\013\n\003"
  "sid\030\013 \001(\t\022\016\n\006stereo\030\014 \001(\010\022\023\n\013disable_red"
  "\030\r \001(\010\022,\n\nencryption\030\016 \001(\0162\030.livekit.Enc"
  "ryption.Type\022\016\n\006stream\030\017 \001(\t\0227\n\023backup_c"
  "odec_policy\030\020 \001(\0162\032.livekit.BackupCodecP"
  "olicy\"]\n\016TrickleRequest\022\025\n\rcandidateInit"
  "\030\001 \001(\t\022%\n\006target\030\002 \001(\0162\025.livekit.SignalT"
  "arget\022\r\n\005final\030\003 \001(\010\".\n\020MuteTrackRequest"
  "\022\013\n\003sid\030\001 \001(\t\022\r\n\005muted\030\002 \001(\010\"\213\004\n\014JoinRes"
  "ponse\022\033\n\004room\030\001 \001(\0132\r.livekit.Room\022-\n\013pa"
  "rticipant\030\002 \001(\0132\030.livekit.ParticipantInf"
  "o\0224\n\022other_participants\030\003 \003(\0132\030.livekit."
  "ParticipantInfo\022\026\n\016server_version\030\004 \001(\t\022"
  "\'\n\013ice_servers\030\005 \003(\0132\022.livekit.ICEServer"
  "\022\032\n\022subscriber_primary\030\006 \001(\010\022\027\n\017alternat"
  "ive_url\030\007 \001(\t\022:\n\024client_configuration\030\010 "
  "\001(\0132\034.livekit.ClientConfiguration\022\025\n\rser"
  "ver_region\030\t \001(\t\022\024\n\014ping_timeout\030\n \001(\005\022\025"
  "\n\rping_interval\030\013 \001(\005\022(\n\013server_info\030\014 \001"
  "(\0132\023.livekit.ServerInfo\022\023\n\013sif_trailer\030\r"
  " \001(\014\022.\n\026enabled_publish_codecs\030\016 \003(\0132\016.l"
  "ivekit.Codec\022\024\n\014fast_publish\030\017 \001(\010\"x\n\021Re"
  "connectResponse\022\'\n\013ice_servers\030\001 \003(\0132\022.l"
  "ivekit.ICEServer\022:\n\024client_configuration"
  "\030\002 \001(\0132\034.livekit.ClientConfiguration\"H\n\026"
  "TrackPublishedResponse\022\013\n\003cid\030\001 \001(\t\022!\n\005t"
  "rack\030\002 \001(\0132\022.livekit.TrackInfo\"-\n\030TrackU"
  "npublishedResponse\022\021\n\ttrack_sid\030\001 \001(\t\"/\n"
  "\022SessionDescription\022\014\n\004type\030\001 \001(\t\022\013\n\003sdp"
  "\030\002 \001(\t\"C\n\021ParticipantUpdate\022.\n\014participa"
  "nts\030\001 \003(\0132\030.livekit.ParticipantInfo\"s\n\022U"
  "pdateSubscription\022\022\n\ntrack_sids\030\001 \003(\t\022\021\n"
  "\tsubscribe\030\002 \001(\010\0226\n\022participant_tracks\030\003"
  " \003(\0132\032.livekit.ParticipantTracks\"\241\001\n\023Upd"
  "ateTrackSettings\022\022\n\ntrack_sids\030\001 \003(\t\022\020\n\010"
  "disabled\030\003 \001(\010\022&\n\007quality\030\004 \001(\0162\025.liveki"
  "t.VideoQuality\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030"
  "\006 \001(\r\022\013\n\003fps\030\007 \001(\r\022\020\n\010priority\030\010 \001(\r\"X\n\025"
  "UpdateLocalAudioTrack\022\021\n\ttrack_sid\030\001 \001(\t"
  "\022,\n\010features\030\002 \003(\0162\032.livekit.AudioTrackF"
  "eature\"I\n\025UpdateLocalVideoTrack\022\021\n\ttrack"
  "_sid\030\001 \001(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001("
  "\r\"\335\001\n\014LeaveRequest\022\025\n\rcan_reconnect\030\001 \001("
  "\010\022)\n\006reason\030\002 \001(\0162\031.livekit.DisconnectRe"
  "ason\022,\n\006action\030\003 \001(\0162\034.livekit.LeaveRequ"
  "est.Action\022(\n\007regions\030\004 \001(\0132\027.livekit.Re"
  "gionSettings\"3\n\006Action\022\016\n\nDISCONNECT\020\000\022\n"
  "\n\006RESUME\020\001\022\r\n\tRECONNECT\020\002\"O\n\021UpdateVideo"
  "Layers\022\021\n\ttrack_sid\030\001 \001(\t\022#\n\006layers\030\002 \003("
  "\0132\023.livekit.VideoLayer:\002\030\001\"\312\001\n\031UpdatePar"
  "ticipantMetadata\022\020\n\010metadata\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\022F\n\nattributes\030\003 \003(\01322.livekit.U"
  "pdateParticipantMetadata.AttributesEntry"
  "\022\022\n\nrequest_id\030\004 \001(\r\0321\n\017AttributesEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\?\n\tICESe"
  "rver\022\014\n\004urls\030\001 \003(\t\022\020\n\010username\030\002 \001(\t\022\022\n\n"
  "credential\030\003 \001(\t\"9\n\017SpeakersChanged\022&\n\010s"
  "peakers\030\001 \003(\0132\024.livekit.SpeakerInfo\")\n\nR"
  "oomUpdate\022\033\n\004room\030\001 \001(\0132\r.livekit.Room\"l"
  "\n\025ConnectionQualityInfo\022\027\n\017participant_s"
  "id\030\001 \001(\t\022+\n\007quality\030\002 \001(\0162\032.livekit.Conn"
  "ectionQuality\022\r\n\005score\030\003 \001(\002\"J\n\027Connecti"
  "onQualityUpdate\022/\n\007updates\030\001 \003(\0132\036.livek"
  "it.ConnectionQualityInfo\"b\n\017StreamStateI"
  "nfo\022\027\n\017participant_sid\030\001 \001(\t\022\021\n\ttrack_si"
  "d\030\002 \001(\t\022#\n\005state\030\003 \001(\0162\024.livekit.StreamS"
  "tate\"D\n\021StreamStateUpdate\022/\n\rstream_stat"
  "es\030\001 \003(\0132\030.livekit.StreamStateInfo\"L\n\021Su"
  "bscribedQuality\022&\n\007quality\030\001 \001(\0162\025.livek"
  "it.VideoQuality\022\017\n\007enabled\030\002 \001(\010\"O\n\017Subs"
  "cribedCodec\022\r\n\005codec\030\001 \001(\t\022-\n\tqualities\030"
  "\002 \003(\0132\032.livekit.SubscribedQuality\"\233\001\n\027Su"
  "bscribedQualityUpdate\022\021\n\ttrack_sid\030\001 \001(\t"
  "\0228\n\024subscribed_qualities\030\002 \003(\0132\032.livekit"
  ".SubscribedQuality\0223\n\021subscribed_codecs\030"
  "\003 \003(\0132\030.livekit.SubscribedCodec\"p\n\017Track"
  "Permission\022\027\n\017participant_sid\030\001 \001(\t\022\022\n\na"
  "ll_tracks\030\002 \001(\010\022\022\n\ntrack_sids\030\003 \003(\t\022\034\n\024p"
  "articipant_identity\030\004 \001(\t\"g\n\026Subscriptio"
  "nPermission\022\030\n\020all_participants\030\001 \001(\010\0223\n"
  "\021track_permissions\030\002 \003(\0132\030.livekit.Track"
  "Permission\"[\n\034SubscriptionPermissionUpda"
  "te\022\027\n\017participant_sid\030\001 \001(\t\022\021\n\ttrack_sid"
  "\030\002 \001(\t\022\017\n\007allowed\030\003 \001(\010\"\236\002\n\tSyncState\022+\n"
  "\006answer\030\001 \001(\0132\033.livekit.SessionDescripti"
  "on\0221\n\014subscription\030\002 \001(\0132\033.livekit.Updat"
  "eSubscription\0227\n\016publish_tracks\030\003 \003(\0132\037."
  "livekit.TrackPublishedResponse\022/\n\rdata_c"
  "hannels\030\004 \003(\0132\030.livekit.DataChannelInfo\022"
  "*\n\005offer\030\005 \001(\0132\033.livekit.SessionDescript"
  "ion\022\033\n\023track_sids_disabled\030\006 \003(\t\"S\n\017Data"
  "ChannelInfo\022\r\n\005label\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\022%"
  "\n\006target\030\003 \001(\0162\025.livekit.SignalTarget\"\340\002"
  "\n\020SimulateScenario\022\030\n\016speaker_update\030\001 \001"
  "(\005H\000\022\026\n\014node_failure\030\002 \001(\010H\000\022\023\n\tmigratio"
  "n\030\003 \001(\010H\000\022\026\n\014server_leave\030\004 \001(\010H\000\022\?\n\031swi"
  "tch_candidate_protocol\030\005 \001(\0162\032.livekit.C"
  "andidateProtocolH\000\022\036\n\024subscriber_bandwid"
  "th\030\006 \001(\003H\000\022%\n\033disconnect_signal_on_resum"
  "e\030\007 \001(\010H\000\0221\n\'disconnect_signal_on_resume"
  "_no_messages\030\010 \001(\010H\000\022&\n\034leave_request_fu"
  "ll_reconnect\030\t \001(\010H\000B\n\n\010scenario\"&\n\004Ping"
  "\022\021\n\ttimestamp\030\001 \001(\003\022\013\n\003rtt\030\002 \001(\003\"6\n\004Pong"
  "\022\033\n\023last_ping_timestamp\030\001 \001(\003\022\021\n\ttimesta"
  "mp\030\002 \001(\003\"6\n\016RegionSettings\022$\n\007regions\030\001 "
  "\003(\0132\023.livekit.RegionInfo\";\n\nRegionInfo\022\016"
  "\n\006region\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\020\n\010distance\030"
  "\003 \001(\003\"R\n\024SubscriptionResponse\022\021\n\ttrack_s"
  "id\030\001 \001(\t\022\'\n\003err\030\002 \001(\0162\032.livekit.Subscrip"
  "tionError\"\255\001\n\017RequestResponse\022\022\n\nrequest"
  "_id\030\001 \001(\r\022/\n\006reason\030\002 \001(\0162\037.livekit.Requ"
  "estResponse.Reason\022\017\n\007message\030\003 \001(\t\"D\n\006R"
  "eason\022\006\n\002OK\020\000\022\r\n\tNOT_FOUND\020\001\022\017\n\013NOT_ALLO"
  "WED\020\002\022\022\n\016LIMIT_EXCEEDED\020\003\"$\n\017TrackSubscr"
  "ibed\022\021\n\ttrack_sid\030\001 \001(\t*-\n\014SignalTarget\022"
  "\r\n\tPUBLISHER\020\000\022\016\n\nSUBSCRIBER\020\001*%\n\013Stream"
  "State\022\n\n\006ACTIVE\020\000\022\n\n\006PAUSED\020\001*.\n\021Candida"
  "teProtocol\022\007\n\003UDP\020\000\022\007\n\003TCP\020\001\022\007\n\003TLS\020\002BFZ"
  "#github.com/livekit/protocol/livekit\252\002\rL"
  "iveKit.Proto\352\002\016LiveKit::Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5frtc_2eproto_deps[1] = {
  &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5frtc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5frtc_2eproto = {
    false, false, 7117, descriptor_table_protodef_livekit_5frtc_2eproto,
    "livekit_rtc.proto",
    &descriptor_table_livekit_5frtc_2eproto_once, descriptor_table_livekit_5frtc_2eproto_deps, 1, 43,
    schemas, file_default_instances, TableStruct_livekit_5frtc_2eproto::offsets,
    file_level_metadata_livekit_5frtc_2eproto, file_level_enum_descriptors_livekit_5frtc_2eproto,
    file_level_service_descriptors_livekit_5frtc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5frtc_2eproto_getter() {
  return &descriptor_table_livekit_5frtc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5frtc_2eproto(&descriptor_table_livekit_5frtc_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaveRequest_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[0];
}
bool LeaveRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LeaveRequest_Action LeaveRequest::DISCONNECT;
constexpr LeaveRequest_Action LeaveRequest::RESUME;
constexpr LeaveRequest_Action LeaveRequest::RECONNECT;
constexpr LeaveRequest_Action LeaveRequest::Action_MIN;
constexpr LeaveRequest_Action LeaveRequest::Action_MAX;
constexpr int LeaveRequest::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestResponse_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[1];
}
bool RequestResponse_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RequestResponse_Reason RequestResponse::OK;
constexpr RequestResponse_Reason RequestResponse::NOT_FOUND;
constexpr RequestResponse_Reason RequestResponse::NOT_ALLOWED;
constexpr RequestResponse_Reason RequestResponse::LIMIT_EXCEEDED;
constexpr RequestResponse_Reason RequestResponse::Reason_MIN;
constexpr RequestResponse_Reason RequestResponse::Reason_MAX;
constexpr int RequestResponse::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignalTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[2];
}
bool SignalTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[3];
}
bool StreamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandidateProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[4];
}
bool CandidateProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SignalRequest::_Internal {
 public:
  static const ::livekit::SessionDescription& offer(const SignalRequest* msg);
  static const ::livekit::SessionDescription& answer(const SignalRequest* msg);
  static const ::livekit::TrickleRequest& trickle(const SignalRequest* msg);
  static const ::livekit::AddTrackRequest& add_track(const SignalRequest* msg);
  static const ::livekit::MuteTrackRequest& mute(const SignalRequest* msg);
  static const ::livekit::UpdateSubscription& subscription(const SignalRequest* msg);
  static const ::livekit::UpdateTrackSettings& track_setting(const SignalRequest* msg);
  static const ::livekit::LeaveRequest& leave(const SignalRequest* msg);
  static const ::livekit::UpdateVideoLayers& update_layers(const SignalRequest* msg);
  static const ::livekit::SubscriptionPermission& subscription_permission(const SignalRequest* msg);
  static const ::livekit::SyncState& sync_state(const SignalRequest* msg);
  static const ::livekit::SimulateScenario& simulate(const SignalRequest* msg);
  static const ::livekit::UpdateParticipantMetadata& update_metadata(const SignalRequest* msg);
  static const ::livekit::Ping& ping_req(const SignalRequest* msg);
  static const ::livekit::UpdateLocalAudioTrack& update_audio_track(const SignalRequest* msg);
  static const ::livekit::UpdateLocalVideoTrack& update_video_track(const SignalRequest* msg);
};

const ::livekit::SessionDescription&
SignalRequest::_Internal::offer(const SignalRequest* msg) {
  return *msg->_impl_.message_.offer_;
}
const ::livekit::SessionDescription&
SignalRequest::_Internal::answer(const SignalRequest* msg) {
  return *msg->_impl_.message_.answer_;
}
const ::livekit::TrickleRequest&
SignalRequest::_Internal::trickle(const SignalRequest* msg) {
  return *msg->_impl_.message_.trickle_;
}
const ::livekit::AddTrackRequest&
SignalRequest::_Internal::add_track(const SignalRequest* msg) {
  return *msg->_impl_.message_.add_track_;
}
const ::livekit::MuteTrackRequest&
SignalRequest::_Internal::mute(const SignalRequest* msg) {
  return *msg->_impl_.message_.mute_;
}
const ::livekit::UpdateSubscription&
SignalRequest::_Internal::subscription(const SignalRequest* msg) {
  return *msg->_impl_.message_.subscription_;
}
const ::livekit::UpdateTrackSettings&
SignalRequest::_Internal::track_setting(const SignalRequest* msg) {
  return *msg->_impl_.message_.track_setting_;
}
const ::livekit::LeaveRequest&
SignalRequest::_Internal::leave(const SignalRequest* msg) {
  return *msg->_impl_.message_.leave_;
}
const ::livekit::UpdateVideoLayers&
SignalRequest::_Internal::update_layers(const SignalRequest* msg) {
  return *msg->_impl_.message_.update_layers_;
}
const ::livekit::SubscriptionPermission&
SignalRequest::_Internal::subscription_permission(const SignalRequest* msg) {
  return *msg->_impl_.message_.subscription_permission_;
}
const ::livekit::SyncState&
SignalRequest::_Internal::sync_state(const SignalRequest* msg) {
  return *msg->_impl_.message_.sync_state_;
}
const ::livekit::SimulateScenario&
SignalRequest::_Internal::simulate(const SignalRequest* msg) {
  return *msg->_impl_.message_.simulate_;
}
const ::livekit::UpdateParticipantMetadata&
SignalRequest::_Internal::update_metadata(const SignalRequest* msg) {
  return *msg->_impl_.message_.update_metadata_;
}
const ::livekit::Ping&
SignalRequest::_Internal::ping_req(const SignalRequest* msg) {
  return *msg->_impl_.message_.ping_req_;
}
const ::livekit::UpdateLocalAudioTrack&
SignalRequest::_Internal::update_audio_track(const SignalRequest* msg) {
  return *msg->_impl_.message_.update_audio_track_;
}
const ::livekit::UpdateLocalVideoTrack&
SignalRequest::_Internal::update_video_track(const SignalRequest* msg) {
  return *msg->_impl_.message_.update_video_track_;
}
void SignalRequest::set_allocated_offer(::livekit::SessionDescription* offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offer);
    if (message_arena != submessage_arena) {
      offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer, submessage_arena);
    }
    set_has_offer();
    _impl_.message_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.offer)
}
void SignalRequest::set_allocated_answer(::livekit::SessionDescription* answer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (answer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(answer);
    if (message_arena != submessage_arena) {
      answer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer, submessage_arena);
    }
    set_has_answer();
    _impl_.message_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.answer)
}
void SignalRequest::set_allocated_trickle(::livekit::TrickleRequest* trickle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (trickle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trickle);
    if (message_arena != submessage_arena) {
      trickle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trickle, submessage_arena);
    }
    set_has_trickle();
    _impl_.message_.trickle_ = trickle;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.trickle)
}
void SignalRequest::set_allocated_add_track(::livekit::AddTrackRequest* add_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (add_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_track);
    if (message_arena != submessage_arena) {
      add_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_track, submessage_arena);
    }
    set_has_add_track();
    _impl_.message_.add_track_ = add_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.add_track)
}
void SignalRequest::set_allocated_mute(::livekit::MuteTrackRequest* mute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (mute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mute);
    if (message_arena != submessage_arena) {
      mute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mute, submessage_arena);
    }
    set_has_mute();
    _impl_.message_.mute_ = mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.mute)
}
void SignalRequest::set_allocated_subscription(::livekit::UpdateSubscription* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    set_has_subscription();
    _impl_.message_.subscription_ = subscription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.subscription)
}
void SignalRequest::set_allocated_track_setting(::livekit::UpdateTrackSettings* track_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_setting);
    if (message_arena != submessage_arena) {
      track_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_setting, submessage_arena);
    }
    set_has_track_setting();
    _impl_.message_.track_setting_ = track_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.track_setting)
}
void SignalRequest::set_allocated_leave(::livekit::LeaveRequest* leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leave);
    if (message_arena != submessage_arena) {
      leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave, submessage_arena);
    }
    set_has_leave();
    _impl_.message_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.leave)
}
void SignalRequest::set_allocated_update_layers(::livekit::UpdateVideoLayers* update_layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_layers);
    if (message_arena != submessage_arena) {
      update_layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_layers, submessage_arena);
    }
    set_has_update_layers();
    _impl_.message_.update_layers_ = update_layers;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_layers)
}
void SignalRequest::set_allocated_subscription_permission(::livekit::SubscriptionPermission* subscription_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription_permission);
    if (message_arena != submessage_arena) {
      subscription_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_permission, submessage_arena);
    }
    set_has_subscription_permission();
    _impl_.message_.subscription_permission_ = subscription_permission;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.subscription_permission)
}
void SignalRequest::set_allocated_sync_state(::livekit::SyncState* sync_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (sync_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sync_state);
    if (message_arena != submessage_arena) {
      sync_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_state, submessage_arena);
    }
    set_has_sync_state();
    _impl_.message_.sync_state_ = sync_state;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.sync_state)
}
void SignalRequest::set_allocated_simulate(::livekit::SimulateScenario* simulate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (simulate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(simulate);
    if (message_arena != submessage_arena) {
      simulate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulate, submessage_arena);
    }
    set_has_simulate();
    _impl_.message_.simulate_ = simulate;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.simulate)
}
void SignalRequest::set_allocated_update_metadata(::livekit::UpdateParticipantMetadata* update_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_metadata);
    if (message_arena != submessage_arena) {
      update_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata, submessage_arena);
    }
    set_has_update_metadata();
    _impl_.message_.update_metadata_ = update_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_metadata)
}
void SignalRequest::set_allocated_ping_req(::livekit::Ping* ping_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (ping_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping_req);
    if (message_arena != submessage_arena) {
      ping_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_req, submessage_arena);
    }
    set_has_ping_req();
    _impl_.message_.ping_req_ = ping_req;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.ping_req)
}
void SignalRequest::set_allocated_update_audio_track(::livekit::UpdateLocalAudioTrack* update_audio_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_audio_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_audio_track);
    if (message_arena != submessage_arena) {
      update_audio_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_audio_track, submessage_arena);
    }
    set_has_update_audio_track();
    _impl_.message_.update_audio_track_ = update_audio_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_audio_track)
}
void SignalRequest::set_allocated_update_video_track(::livekit::UpdateLocalVideoTrack* update_video_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update_video_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_video_track);
    if (message_arena != submessage_arena) {
      update_video_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_video_track, submessage_arena);
    }
    set_has_update_video_track();
    _impl_.message_.update_video_track_ = update_video_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_video_track)
}
SignalRequest::SignalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SignalRequest)
}
SignalRequest::SignalRequest(const SignalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kOffer: {
      _this->_internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(
          from._internal_offer());
      break;
    }
    case kAnswer: {
      _this->_internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(
          from._internal_answer());
      break;
    }
    case kTrickle: {
      _this->_internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(
          from._internal_trickle());
      break;
    }
    case kAddTrack: {
      _this->_internal_mutable_add_track()->::livekit::AddTrackRequest::MergeFrom(
          from._internal_add_track());
      break;
    }
    case kMute: {
      _this->_internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(
          from._internal_mute());
      break;
    }
    case kSubscription: {
      _this->_internal_mutable_subscription()->::livekit::UpdateSubscription::MergeFrom(
          from._internal_subscription());
      break;
    }
    case kTrackSetting: {
      _this->_internal_mutable_track_setting()->::livekit::UpdateTrackSettings::MergeFrom(
          from._internal_track_setting());
      break;
    }
    case kLeave: {
      _this->_internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(
          from._internal_leave());
      break;
    }
    case kUpdateLayers: {
      _this->_internal_mutable_update_layers()->::livekit::UpdateVideoLayers::MergeFrom(
          from._internal_update_layers());
      break;
    }
    case kSubscriptionPermission: {
      _this->_internal_mutable_subscription_permission()->::livekit::SubscriptionPermission::MergeFrom(
          from._internal_subscription_permission());
      break;
    }
    case kSyncState: {
      _this->_internal_mutable_sync_state()->::livekit::SyncState::MergeFrom(
          from._internal_sync_state());
      break;
    }
    case kSimulate: {
      _this->_internal_mutable_simulate()->::livekit::SimulateScenario::MergeFrom(
          from._internal_simulate());
      break;
    }
    case kPing: {
      _this->_internal_set_ping(from._internal_ping());
      break;
    }
    case kUpdateMetadata: {
      _this->_internal_mutable_update_metadata()->::livekit::UpdateParticipantMetadata::MergeFrom(
          from._internal_update_metadata());
      break;
    }
    case kPingReq: {
      _this->_internal_mutable_ping_req()->::livekit::Ping::MergeFrom(
          from._internal_ping_req());
      break;
    }
    case kUpdateAudioTrack: {
      _this->_internal_mutable_update_audio_track()->::livekit::UpdateLocalAudioTrack::MergeFrom(
          from._internal_update_audio_track());
      break;
    }
    case kUpdateVideoTrack: {
      _this->_internal_mutable_update_video_track()->::livekit::UpdateLocalVideoTrack::MergeFrom(
          from._internal_update_video_track());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SignalRequest)
}

inline void SignalRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

SignalRequest::~SignalRequest() {
  // @@protoc_insertion_point(destructor:livekit.SignalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void SignalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalRequest::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SignalRequest)
  switch (message_case()) {
    case kOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.offer_;
      }
      break;
    }
    case kAnswer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.answer_;
      }
      break;
    }
    case kTrickle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.trickle_;
      }
      break;
    }
    case kAddTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.add_track_;
      }
      break;
    }
    case kMute: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.mute_;
      }
      break;
    }
    case kSubscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.subscription_;
      }
      break;
    }
    case kTrackSetting: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_setting_;
      }
      break;
    }
    case kLeave: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.leave_;
      }
      break;
    }
    case kUpdateLayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_layers_;
      }
      break;
    }
    case kSubscriptionPermission: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.subscription_permission_;
      }
      break;
    }
    case kSyncState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.sync_state_;
      }
      break;
    }
    case kSimulate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.simulate_;
      }
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case kUpdateMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_metadata_;
      }
      break;
    }
    case kPingReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.ping_req_;
      }
      break;
    }
    case kUpdateAudioTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_audio_track_;
      }
      break;
    }
    case kUpdateVideoTrack: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_video_track_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void SignalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SignalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SessionDescription offer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription answer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrickleRequest trickle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trickle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AddTrackRequest add_track = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.MuteTrackRequest mute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateSubscription subscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateTrackSettings track_setting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.LeaveRequest leave = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateVideoLayers update_layers = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_layers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscriptionPermission subscription_permission = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SyncState sync_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SimulateScenario simulate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ping = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _internal_set_ping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateParticipantMetadata update_metadata = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.Ping ping_req = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateLocalAudioTrack update_audio_track = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_audio_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateLocalVideoTrack update_video_track = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_video_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SignalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SessionDescription offer = 1;
  if (_internal_has_offer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::offer(this),
        _Internal::offer(this).GetCachedSize(), target, stream);
  }

  // .livekit.SessionDescription answer = 2;
  if (_internal_has_answer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::answer(this),
        _Internal::answer(this).GetCachedSize(), target, stream);
  }

  // .livekit.TrickleRequest trickle = 3;
  if (_internal_has_trickle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trickle(this),
        _Internal::trickle(this).GetCachedSize(), target, stream);
  }

  // .livekit.AddTrackRequest add_track = 4;
  if (_internal_has_add_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::add_track(this),
        _Internal::add_track(this).GetCachedSize(), target, stream);
  }

  // .livekit.MuteTrackRequest mute = 5;
  if (_internal_has_mute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mute(this),
        _Internal::mute(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateSubscription subscription = 6;
  if (_internal_has_subscription()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::subscription(this),
        _Internal::subscription(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateTrackSettings track_setting = 7;
  if (_internal_has_track_setting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::track_setting(this),
        _Internal::track_setting(this).GetCachedSize(), target, stream);
  }

  // .livekit.LeaveRequest leave = 8;
  if (_internal_has_leave()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::leave(this),
        _Internal::leave(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateVideoLayers update_layers = 10 [deprecated = true];
  if (_internal_has_update_layers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::update_layers(this),
        _Internal::update_layers(this).GetCachedSize(), target, stream);
  }

  // .livekit.SubscriptionPermission subscription_permission = 11;
  if (_internal_has_subscription_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::subscription_permission(this),
        _Internal::subscription_permission(this).GetCachedSize(), target, stream);
  }

  // .livekit.SyncState sync_state = 12;
  if (_internal_has_sync_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::sync_state(this),
        _Internal::sync_state(this).GetCachedSize(), target, stream);
  }

  // .livekit.SimulateScenario simulate = 13;
  if (_internal_has_simulate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::simulate(this),
        _Internal::simulate(this).GetCachedSize(), target, stream);
  }

  // int64 ping = 14;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_ping(), target);
  }

  // .livekit.UpdateParticipantMetadata update_metadata = 15;
  if (_internal_has_update_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::update_metadata(this),
        _Internal::update_metadata(this).GetCachedSize(), target, stream);
  }

  // .livekit.Ping ping_req = 16;
  if (_internal_has_ping_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::ping_req(this),
        _Internal::ping_req(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateLocalAudioTrack update_audio_track = 17;
  if (_internal_has_update_audio_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::update_audio_track(this),
        _Internal::update_audio_track(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateLocalVideoTrack update_video_track = 18;
  if (_internal_has_update_video_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::update_video_track(this),
        _Internal::update_video_track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SignalRequest)
  return target;
}

size_t SignalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SignalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.SessionDescription offer = 1;
    case kOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.offer_);
      break;
    }
    // .livekit.SessionDescription answer = 2;
    case kAnswer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.answer_);
      break;
    }
    // .livekit.TrickleRequest trickle = 3;
    case kTrickle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.trickle_);
      break;
    }
    // .livekit.AddTrackRequest add_track = 4;
    case kAddTrack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.add_track_);
      break;
    }
    // .livekit.MuteTrackRequest mute = 5;
    case kMute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.mute_);
      break;
    }
    // .livekit.UpdateSubscription subscription = 6;
    case kSubscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.subscription_);
      break;
    }
    // .livekit.UpdateTrackSettings track_setting = 7;
    case kTrackSetting: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_setting_);
      break;
    }
    // .livekit.LeaveRequest leave = 8;
    case kLeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.leave_);
      break;
    }
    // .livekit.UpdateVideoLayers update_layers = 10 [deprecated = true];
    case kUpdateLayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_layers_);
      break;
    }
    // .livekit.SubscriptionPermission subscription_permission = 11;
    case kSubscriptionPermission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.subscription_permission_);
      break;
    }
    // .livekit.SyncState sync_state = 12;
    case kSyncState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.sync_state_);
      break;
    }
    // .livekit.SimulateScenario simulate = 13;
    case kSimulate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.simulate_);
      break;
    }
    // int64 ping = 14;
    case kPing: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ping());
      break;
    }
    // .livekit.UpdateParticipantMetadata update_metadata = 15;
    case kUpdateMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_metadata_);
      break;
    }
    // .livekit.Ping ping_req = 16;
    case kPingReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.ping_req_);
      break;
    }
    // .livekit.UpdateLocalAudioTrack update_audio_track = 17;
    case kUpdateAudioTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_audio_track_);
      break;
    }
    // .livekit.UpdateLocalVideoTrack update_video_track = 18;
    case kUpdateVideoTrack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_video_track_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalRequest::GetClassData() const { return &_class_data_; }


void SignalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalRequest*>(&to_msg);
  auto& from = static_cast<const SignalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SignalRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kOffer: {
      _this->_internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(
          from._internal_offer());
      break;
    }
    case kAnswer: {
      _this->_internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(
          from._internal_answer());
      break;
    }
    case kTrickle: {
      _this->_internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(
          from._internal_trickle());
      break;
    }
    case kAddTrack: {
      _this->_internal_mutable_add_track()->::livekit::AddTrackRequest::MergeFrom(
          from._internal_add_track());
      break;
    }
    case kMute: {
      _this->_internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(
          from._internal_mute());
      break;
    }
    case kSubscription: {
      _this->_internal_mutable_subscription()->::livekit::UpdateSubscription::MergeFrom(
          from._internal_subscription());
      break;
    }
    case kTrackSetting: {
      _this->_internal_mutable_track_setting()->::livekit::UpdateTrackSettings::MergeFrom(
          from._internal_track_setting());
      break;
    }
    case kLeave: {
      _this->_internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(
          from._internal_leave());
      break;
    }
    case kUpdateLayers: {
      _this->_internal_mutable_update_layers()->::livekit::UpdateVideoLayers::MergeFrom(
          from._internal_update_layers());
      break;
    }
    case kSubscriptionPermission: {
      _this->_internal_mutable_subscription_permission()->::livekit::SubscriptionPermission::MergeFrom(
          from._internal_subscription_permission());
      break;
    }
    case kSyncState: {
      _this->_internal_mutable_sync_state()->::livekit::SyncState::MergeFrom(
          from._internal_sync_state());
      break;
    }
    case kSimulate: {
      _this->_internal_mutable_simulate()->::livekit::SimulateScenario::MergeFrom(
          from._internal_simulate());
      break;
    }
    case kPing: {
      _this->_internal_set_ping(from._internal_ping());
      break;
    }
    case kUpdateMetadata: {
      _this->_internal_mutable_update_metadata()->::livekit::UpdateParticipantMetadata::MergeFrom(
          from._internal_update_metadata());
      break;
    }
    case kPingReq: {
      _this->_internal_mutable_ping_req()->::livekit::Ping::MergeFrom(
          from._internal_ping_req());
      break;
    }
    case kUpdateAudioTrack: {
      _this->_internal_mutable_update_audio_track()->::livekit::UpdateLocalAudioTrack::MergeFrom(
          from._internal_update_audio_track());
      break;
    }
    case kUpdateVideoTrack: {
      _this->_internal_mutable_update_video_track()->::livekit::UpdateLocalVideoTrack::MergeFrom(
          from._internal_update_video_track());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalRequest::CopyFrom(const SignalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SignalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalRequest::IsInitialized() const {
  return true;
}

void SignalRequest::InternalSwap(SignalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[0]);
}

// ===================================================================

class SignalResponse::_Internal {
 public:
  static const ::livekit::JoinResponse& join(const SignalResponse* msg);
  static const ::livekit::SessionDescription& answer(const SignalResponse* msg);
  static const ::livekit::SessionDescription& offer(const SignalResponse* msg);
  static const ::livekit::TrickleRequest& trickle(const SignalResponse* msg);
  static const ::livekit::ParticipantUpdate& update(const SignalResponse* msg);
  static const ::livekit::TrackPublishedResponse& track_published(const SignalResponse* msg);
  static const ::livekit::LeaveRequest& leave(const SignalResponse* msg);
  static const ::livekit::MuteTrackRequest& mute(const SignalResponse* msg);
  static const ::livekit::SpeakersChanged& speakers_changed(const SignalResponse* msg);
  static const ::livekit::RoomUpdate& room_update(const SignalResponse* msg);
  static const ::livekit::ConnectionQualityUpdate& connection_quality(const SignalResponse* msg);
  static const ::livekit::StreamStateUpdate& stream_state_update(const SignalResponse* msg);
  static const ::livekit::SubscribedQualityUpdate& subscribed_quality_update(const SignalResponse* msg);
  static const ::livekit::SubscriptionPermissionUpdate& subscription_permission_update(const SignalResponse* msg);
  static const ::livekit::TrackUnpublishedResponse& track_unpublished(const SignalResponse* msg);
  static const ::livekit::ReconnectResponse& reconnect(const SignalResponse* msg);
  static const ::livekit::Pong& pong_resp(const SignalResponse* msg);
  static const ::livekit::SubscriptionResponse& subscription_response(const SignalResponse* msg);
  static const ::livekit::RequestResponse& request_response(const SignalResponse* msg);
  static const ::livekit::TrackSubscribed& track_subscribed(const SignalResponse* msg);
};

const ::livekit::JoinResponse&
SignalResponse::_Internal::join(const SignalResponse* msg) {
  return *msg->_impl_.message_.join_;
}
const ::livekit::SessionDescription&
SignalResponse::_Internal::answer(const SignalResponse* msg) {
  return *msg->_impl_.message_.answer_;
}
const ::livekit::SessionDescription&
SignalResponse::_Internal::offer(const SignalResponse* msg) {
  return *msg->_impl_.message_.offer_;
}
const ::livekit::TrickleRequest&
SignalResponse::_Internal::trickle(const SignalResponse* msg) {
  return *msg->_impl_.message_.trickle_;
}
const ::livekit::ParticipantUpdate&
SignalResponse::_Internal::update(const SignalResponse* msg) {
  return *msg->_impl_.message_.update_;
}
const ::livekit::TrackPublishedResponse&
SignalResponse::_Internal::track_published(const SignalResponse* msg) {
  return *msg->_impl_.message_.track_published_;
}
const ::livekit::LeaveRequest&
SignalResponse::_Internal::leave(const SignalResponse* msg) {
  return *msg->_impl_.message_.leave_;
}
const ::livekit::MuteTrackRequest&
SignalResponse::_Internal::mute(const SignalResponse* msg) {
  return *msg->_impl_.message_.mute_;
}
const ::livekit::SpeakersChanged&
SignalResponse::_Internal::speakers_changed(const SignalResponse* msg) {
  return *msg->_impl_.message_.speakers_changed_;
}
const ::livekit::RoomUpdate&
SignalResponse::_Internal::room_update(const SignalResponse* msg) {
  return *msg->_impl_.message_.room_update_;
}
const ::livekit::ConnectionQualityUpdate&
SignalResponse::_Internal::connection_quality(const SignalResponse* msg) {
  return *msg->_impl_.message_.connection_quality_;
}
const ::livekit::StreamStateUpdate&
SignalResponse::_Internal::stream_state_update(const SignalResponse* msg) {
  return *msg->_impl_.message_.stream_state_update_;
}
const ::livekit::SubscribedQualityUpdate&
SignalResponse::_Internal::subscribed_quality_update(const SignalResponse* msg) {
  return *msg->_impl_.message_.subscribed_quality_update_;
}
const ::livekit::SubscriptionPermissionUpdate&
SignalResponse::_Internal::subscription_permission_update(const SignalResponse* msg) {
  return *msg->_impl_.message_.subscription_permission_update_;
}
const ::livekit::TrackUnpublishedResponse&
SignalResponse::_Internal::track_unpublished(const SignalResponse* msg) {
  return *msg->_impl_.message_.track_unpublished_;
}
const ::livekit::ReconnectResponse&
SignalResponse::_Internal::reconnect(const SignalResponse* msg) {
  return *msg->_impl_.message_.reconnect_;
}
const ::livekit::Pong&
SignalResponse::_Internal::pong_resp(const SignalResponse* msg) {
  return *msg->_impl_.message_.pong_resp_;
}
const ::livekit::SubscriptionResponse&
SignalResponse::_Internal::subscription_response(const SignalResponse* msg) {
  return *msg->_impl_.message_.subscription_response_;
}
const ::livekit::RequestResponse&
SignalResponse::_Internal::request_response(const SignalResponse* msg) {
  return *msg->_impl_.message_.request_response_;
}
const ::livekit::TrackSubscribed&
SignalResponse::_Internal::track_subscribed(const SignalResponse* msg) {
  return *msg->_impl_.message_.track_subscribed_;
}
void SignalResponse::set_allocated_join(::livekit::JoinResponse* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    _impl_.message_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.join)
}
void SignalResponse::set_allocated_answer(::livekit::SessionDescription* answer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (answer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(answer);
    if (message_arena != submessage_arena) {
      answer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer, submessage_arena);
    }
    set_has_answer();
    _impl_.message_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.answer)
}
void SignalResponse::set_allocated_offer(::livekit::SessionDescription* offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offer);
    if (message_arena != submessage_arena) {
      offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer, submessage_arena);
    }
    set_has_offer();
    _impl_.message_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.offer)
}
void SignalResponse::set_allocated_trickle(::livekit::TrickleRequest* trickle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (trickle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trickle);
    if (message_arena != submessage_arena) {
      trickle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trickle, submessage_arena);
    }
    set_has_trickle();
    _impl_.message_.trickle_ = trickle;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.trickle)
}
void SignalResponse::set_allocated_update(::livekit::ParticipantUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.message_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.update)
}
void SignalResponse::set_allocated_track_published(::livekit::TrackPublishedResponse* track_published) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_published) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_published);
    if (message_arena != submessage_arena) {
      track_published = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_published, submessage_arena);
    }
    set_has_track_published();
    _impl_.message_.track_published_ = track_published;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_published)
}
void SignalResponse::set_allocated_leave(::livekit::LeaveRequest* leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leave);
    if (message_arena != submessage_arena) {
      leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave, submessage_arena);
    }
    set_has_leave();
    _impl_.message_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.leave)
}
void SignalResponse::set_allocated_mute(::livekit::MuteTrackRequest* mute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (mute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mute);
    if (message_arena != submessage_arena) {
      mute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mute, submessage_arena);
    }
    set_has_mute();
    _impl_.message_.mute_ = mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.mute)
}
void SignalResponse::set_allocated_speakers_changed(::livekit::SpeakersChanged* speakers_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (speakers_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speakers_changed);
    if (message_arena != submessage_arena) {
      speakers_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speakers_changed, submessage_arena);
    }
    set_has_speakers_changed();
    _impl_.message_.speakers_changed_ = speakers_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.speakers_changed)
}
void SignalResponse::set_allocated_room_update(::livekit::RoomUpdate* room_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (room_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_update);
    if (message_arena != submessage_arena) {
      room_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_update, submessage_arena);
    }
    set_has_room_update();
    _impl_.message_.room_update_ = room_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.room_update)
}
void SignalResponse::set_allocated_connection_quality(::livekit::ConnectionQualityUpdate* connection_quality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connection_quality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_quality);
    if (message_arena != submessage_arena) {
      connection_quality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_quality, submessage_arena);
    }
    set_has_connection_quality();
    _impl_.message_.connection_quality_ = connection_quality;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.connection_quality)
}
void SignalResponse::set_allocated_stream_state_update(::livekit::StreamStateUpdate* stream_state_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_state_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_state_update);
    if (message_arena != submessage_arena) {
      stream_state_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_state_update, submessage_arena);
    }
    set_has_stream_state_update();
    _impl_.message_.stream_state_update_ = stream_state_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.stream_state_update)
}
void SignalResponse::set_allocated_subscribed_quality_update(::livekit::SubscribedQualityUpdate* subscribed_quality_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscribed_quality_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribed_quality_update);
    if (message_arena != submessage_arena) {
      subscribed_quality_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribed_quality_update, submessage_arena);
    }
    set_has_subscribed_quality_update();
    _impl_.message_.subscribed_quality_update_ = subscribed_quality_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscribed_quality_update)
}
void SignalResponse::set_allocated_subscription_permission_update(::livekit::SubscriptionPermissionUpdate* subscription_permission_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription_permission_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription_permission_update);
    if (message_arena != submessage_arena) {
      subscription_permission_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_permission_update, submessage_arena);
    }
    set_has_subscription_permission_update();
    _impl_.message_.subscription_permission_update_ = subscription_permission_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscription_permission_update)
}
void SignalResponse::set_allocated_track_unpublished(::livekit::TrackUnpublishedResponse* track_unpublished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_unpublished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_unpublished);
    if (message_arena != submessage_arena) {
      track_unpublished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_unpublished, submessage_arena);
    }
    set_has_track_unpublished();
    _impl_.message_.track_unpublished_ = track_unpublished;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_unpublished)
}
void SignalResponse::set_allocated_reconnect(::livekit::ReconnectResponse* reconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (reconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reconnect);
    if (message_arena != submessage_arena) {
      reconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect, submessage_arena);
    }
    set_has_reconnect();
    _impl_.message_.reconnect_ = reconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.reconnect)
}
void SignalResponse::set_allocated_pong_resp(::livekit::Pong* pong_resp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (pong_resp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pong_resp);
    if (message_arena != submessage_arena) {
      pong_resp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong_resp, submessage_arena);
    }
    set_has_pong_resp();
    _impl_.message_.pong_resp_ = pong_resp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.pong_resp)
}
void SignalResponse::set_allocated_subscription_response(::livekit::SubscriptionResponse* subscription_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (subscription_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription_response);
    if (message_arena != submessage_arena) {
      subscription_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_response, submessage_arena);
    }
    set_has_subscription_response();
    _impl_.message_.subscription_response_ = subscription_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscription_response)
}
void SignalResponse::set_allocated_request_response(::livekit::RequestResponse* request_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (request_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request_response);
    if (message_arena != submessage_arena) {
      request_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_response, submessage_arena);
    }
    set_has_request_response();
    _impl_.message_.request_response_ = request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.request_response)
}
void SignalResponse::set_allocated_track_subscribed(::livekit::TrackSubscribed* track_subscribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (track_subscribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(track_subscribed);
    if (message_arena != submessage_arena) {
      track_subscribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_subscribed, submessage_arena);
    }
    set_has_track_subscribed();
    _impl_.message_.track_subscribed_ = track_subscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_subscribed)
}
SignalResponse::SignalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SignalResponse)
}
SignalResponse::SignalResponse(const SignalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kJoin: {
      _this->_internal_mutable_join()->::livekit::JoinResponse::MergeFrom(
          from._internal_join());
      break;
    }
    case kAnswer: {
      _this->_internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(
          from._internal_answer());
      break;
    }
    case kOffer: {
      _this->_internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(
          from._internal_offer());
      break;
    }
    case kTrickle: {
      _this->_internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(
          from._internal_trickle());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::livekit::ParticipantUpdate::MergeFrom(
          from._internal_update());
      break;
    }
    case kTrackPublished: {
      _this->_internal_mutable_track_published()->::livekit::TrackPublishedResponse::MergeFrom(
          from._internal_track_published());
      break;
    }
    case kLeave: {
      _this->_internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(
          from._internal_leave());
      break;
    }
    case kMute: {
      _this->_internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(
          from._internal_mute());
      break;
    }
    case kSpeakersChanged: {
      _this->_internal_mutable_speakers_changed()->::livekit::SpeakersChanged::MergeFrom(
          from._internal_speakers_changed());
      break;
    }
    case kRoomUpdate: {
      _this->_internal_mutable_room_update()->::livekit::RoomUpdate::MergeFrom(
          from._internal_room_update());
      break;
    }
    case kConnectionQuality: {
      _this->_internal_mutable_connection_quality()->::livekit::ConnectionQualityUpdate::MergeFrom(
          from._internal_connection_quality());
      break;
    }
    case kStreamStateUpdate: {
      _this->_internal_mutable_stream_state_update()->::livekit::StreamStateUpdate::MergeFrom(
          from._internal_stream_state_update());
      break;
    }
    case kSubscribedQualityUpdate: {
      _this->_internal_mutable_subscribed_quality_update()->::livekit::SubscribedQualityUpdate::MergeFrom(
          from._internal_subscribed_quality_update());
      break;
    }
    case kSubscriptionPermissionUpdate: {
      _this->_internal_mutable_subscription_permission_update()->::livekit::SubscriptionPermissionUpdate::MergeFrom(
          from._internal_subscription_permission_update());
      break;
    }
    case kRefreshToken: {
      _this->_internal_set_refresh_token(from._internal_refresh_token());
      break;
    }
    case kTrackUnpublished: {
      _this->_internal_mutable_track_unpublished()->::livekit::TrackUnpublishedResponse::MergeFrom(
          from._internal_track_unpublished());
      break;
    }
    case kPong: {
      _this->_internal_set_pong(from._internal_pong());
      break;
    }
    case kReconnect: {
      _this->_internal_mutable_reconnect()->::livekit::ReconnectResponse::MergeFrom(
          from._internal_reconnect());
      break;
    }
    case kPongResp: {
      _this->_internal_mutable_pong_resp()->::livekit::Pong::MergeFrom(
          from._internal_pong_resp());
      break;
    }
    case kSubscriptionResponse: {
      _this->_internal_mutable_subscription_response()->::livekit::SubscriptionResponse::MergeFrom(
          from._internal_subscription_response());
      break;
    }
    case kRequestResponse: {
      _this->_internal_mutable_request_response()->::livekit::RequestResponse::MergeFrom(
          from._internal_request_response());
      break;
    }
    case kTrackSubscribed: {
      _this->_internal_mutable_track_subscribed()->::livekit::TrackSubscribed::MergeFrom(
          from._internal_track_subscribed());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SignalResponse)
}

inline void SignalResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

SignalResponse::~SignalResponse() {
  // @@protoc_insertion_point(destructor:livekit.SignalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void SignalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalResponse::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SignalResponse)
  switch (message_case()) {
    case kJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.join_;
      }
      break;
    }
    case kAnswer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.answer_;
      }
      break;
    }
    case kOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.offer_;
      }
      break;
    }
    case kTrickle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.trickle_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.update_;
      }
      break;
    }
    case kTrackPublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_published_;
      }
      break;
    }
    case kLeave: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.leave_;
      }
      break;
    }
    case kMute: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.mute_;
      }
      break;
    }
    case kSpeakersChanged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.speakers_changed_;
      }
      break;
    }
    case kRoomUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.room_update_;
      }
      break;
    }
    case kConnectionQuality: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connection_quality_;
      }
      break;
    }
    case kStreamStateUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_state_update_;
      }
      break;
    }
    case kSubscribedQualityUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.subscribed_quality_update_;
      }
      break;
    }
    case kSubscriptionPermissionUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.subscription_permission_update_;
      }
      break;
    }
    case kRefreshToken: {
      _impl_.message_.refresh_token_.Destroy();
      break;
    }
    case kTrackUnpublished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_unpublished_;
      }
      break;
    }
    case kPong: {
      // No need to clear
      break;
    }
    case kReconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.reconnect_;
      }
      break;
    }
    case kPongResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.pong_resp_;
      }
      break;
    }
    case kSubscriptionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.subscription_response_;
      }
      break;
    }
    case kRequestResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.request_response_;
      }
      break;
    }
    case kTrackSubscribed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.track_subscribed_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void SignalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SignalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.JoinResponse join = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription answer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrickleRequest trickle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trickle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantUpdate update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackPublishedResponse track_published = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_published(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.LeaveRequest leave = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.MuteTrackRequest mute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SpeakersChanged speakers_changed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_speakers_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomUpdate room_update = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ConnectionQualityUpdate connection_quality = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_quality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamStateUpdate stream_state_update = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_state_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribed_quality_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_permission_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string refresh_token = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_refresh_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SignalResponse.refresh_token"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackUnpublishedResponse track_unpublished = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_unpublished(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pong = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_set_pong(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ReconnectResponse reconnect = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.Pong pong_resp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong_resp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscriptionResponse subscription_response = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RequestResponse request_response = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackSubscribed track_subscribed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_subscribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SignalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.JoinResponse join = 1;
  if (_internal_has_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::join(this),
        _Internal::join(this).GetCachedSize(), target, stream);
  }

  // .livekit.SessionDescription answer = 2;
  if (_internal_has_answer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::answer(this),
        _Internal::answer(this).GetCachedSize(), target, stream);
  }

  // .livekit.SessionDescription offer = 3;
  if (_internal_has_offer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::offer(this),
        _Internal::offer(this).GetCachedSize(), target, stream);
  }

  // .livekit.TrickleRequest trickle = 4;
  if (_internal_has_trickle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trickle(this),
        _Internal::trickle(this).GetCachedSize(), target, stream);
  }

  // .livekit.ParticipantUpdate update = 5;
  if (_internal_has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::update(this),
        _Internal::update(this).GetCachedSize(), target, stream);
  }

  // .livekit.TrackPublishedResponse track_published = 6;
  if (_internal_has_track_published()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::track_published(this),
        _Internal::track_published(this).GetCachedSize(), target, stream);
  }

  // .livekit.LeaveRequest leave = 8;
  if (_internal_has_leave()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::leave(this),
        _Internal::leave(this).GetCachedSize(), target, stream);
  }

  // .livekit.MuteTrackRequest mute = 9;
  if (_internal_has_mute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::mute(this),
        _Internal::mute(this).GetCachedSize(), target, stream);
  }

  // .livekit.SpeakersChanged speakers_changed = 10;
  if (_internal_has_speakers_changed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::speakers_changed(this),
        _Internal::speakers_changed(this).GetCachedSize(), target, stream);
  }

  // .livekit.RoomUpdate room_update = 11;
  if (_internal_has_room_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::room_update(this),
        _Internal::room_update(this).GetCachedSize(), target, stream);
  }

  // .livekit.ConnectionQualityUpdate connection_quality = 12;
  if (_internal_has_connection_quality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::connection_quality(this),
        _Internal::connection_quality(this).GetCachedSize(), target, stream);
  }

  // .livekit.StreamStateUpdate stream_state_update = 13;
  if (_internal_has_stream_state_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::stream_state_update(this),
        _Internal::stream_state_update(this).GetCachedSize(), target, stream);
  }

  // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
  if (_internal_has_subscribed_quality_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::subscribed_quality_update(this),
        _Internal::subscribed_quality_update(this).GetCachedSize(), target, stream);
  }

  // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
  if (_internal_has_subscription_permission_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::subscription_permission_update(this),
        _Internal::subscription_permission_update(this).GetCachedSize(), target, stream);
  }

  // string refresh_token = 16;
  if (_internal_has_refresh_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_token().data(), static_cast<int>(this->_internal_refresh_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SignalResponse.refresh_token");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_refresh_token(), target);
  }

  // .livekit.TrackUnpublishedResponse track_unpublished = 17;
  if (_internal_has_track_unpublished()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::track_unpublished(this),
        _Internal::track_unpublished(this).GetCachedSize(), target, stream);
  }

  // int64 pong = 18;
  if (_internal_has_pong()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_pong(), target);
  }

  // .livekit.ReconnectResponse reconnect = 19;
  if (_internal_has_reconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::reconnect(this),
        _Internal::reconnect(this).GetCachedSize(), target, stream);
  }

  // .livekit.Pong pong_resp = 20;
  if (_internal_has_pong_resp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::pong_resp(this),
        _Internal::pong_resp(this).GetCachedSize(), target, stream);
  }

  // .livekit.SubscriptionResponse subscription_response = 21;
  if (_internal_has_subscription_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::subscription_response(this),
        _Internal::subscription_response(this).GetCachedSize(), target, stream);
  }

  // .livekit.RequestResponse request_response = 22;
  if (_internal_has_request_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::request_response(this),
        _Internal::request_response(this).GetCachedSize(), target, stream);
  }

  // .livekit.TrackSubscribed track_subscribed = 23;
  if (_internal_has_track_subscribed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::track_subscribed(this),
        _Internal::track_subscribed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SignalResponse)
  return target;
}

size_t SignalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SignalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .livekit.JoinResponse join = 1;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.join_);
      break;
    }
    // .livekit.SessionDescription answer = 2;
    case kAnswer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.answer_);
      break;
    }
    // .livekit.SessionDescription offer = 3;
    case kOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.offer_);
      break;
    }
    // .livekit.TrickleRequest trickle = 4;
    case kTrickle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.trickle_);
      break;
    }
    // .livekit.ParticipantUpdate update = 5;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.update_);
      break;
    }
    // .livekit.TrackPublishedResponse track_published = 6;
    case kTrackPublished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_published_);
      break;
    }
    // .livekit.LeaveRequest leave = 8;
    case kLeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.leave_);
      break;
    }
    // .livekit.MuteTrackRequest mute = 9;
    case kMute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.mute_);
      break;
    }
    // .livekit.SpeakersChanged speakers_changed = 10;
    case kSpeakersChanged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.speakers_changed_);
      break;
    }
    // .livekit.RoomUpdate room_update = 11;
    case kRoomUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.room_update_);
      break;
    }
    // .livekit.ConnectionQualityUpdate connection_quality = 12;
    case kConnectionQuality: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connection_quality_);
      break;
    }
    // .livekit.StreamStateUpdate stream_state_update = 13;
    case kStreamStateUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_state_update_);
      break;
    }
    // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
    case kSubscribedQualityUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.subscribed_quality_update_);
      break;
    }
    // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
    case kSubscriptionPermissionUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.subscription_permission_update_);
      break;
    }
    // string refresh_token = 16;
    case kRefreshToken: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_refresh_token());
      break;
    }
    // .livekit.TrackUnpublishedResponse track_unpublished = 17;
    case kTrackUnpublished: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_unpublished_);
      break;
    }
    // int64 pong = 18;
    case kPong: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_pong());
      break;
    }
    // .livekit.ReconnectResponse reconnect = 19;
    case kReconnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.reconnect_);
      break;
    }
    // .livekit.Pong pong_resp = 20;
    case kPongResp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.pong_resp_);
      break;
    }
    // .livekit.SubscriptionResponse subscription_response = 21;
    case kSubscriptionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.subscription_response_);
      break;
    }
    // .livekit.RequestResponse request_response = 22;
    case kRequestResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.request_response_);
      break;
    }
    // .livekit.TrackSubscribed track_subscribed = 23;
    case kTrackSubscribed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.track_subscribed_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalResponse::GetClassData() const { return &_class_data_; }


void SignalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalResponse*>(&to_msg);
  auto& from = static_cast<const SignalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SignalResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kJoin: {
      _this->_internal_mutable_join()->::livekit::JoinResponse::MergeFrom(
          from._internal_join());
      break;
    }
    case kAnswer: {
      _this->_internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(
          from._internal_answer());
      break;
    }
    case kOffer: {
      _this->_internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(
          from._internal_offer());
      break;
    }
    case kTrickle: {
      _this->_internal_mutable_trickle()->::livekit::TrickleRequest::MergeFrom(
          from._internal_trickle());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::livekit::ParticipantUpdate::MergeFrom(
          from._internal_update());
      break;
    }
    case kTrackPublished: {
      _this->_internal_mutable_track_published()->::livekit::TrackPublishedResponse::MergeFrom(
          from._internal_track_published());
      break;
    }
    case kLeave: {
      _this->_internal_mutable_leave()->::livekit::LeaveRequest::MergeFrom(
          from._internal_leave());
      break;
    }
    case kMute: {
      _this->_internal_mutable_mute()->::livekit::MuteTrackRequest::MergeFrom(
          from._internal_mute());
      break;
    }
    case kSpeakersChanged: {
      _this->_internal_mutable_speakers_changed()->::livekit::SpeakersChanged::MergeFrom(
          from._internal_speakers_changed());
      break;
    }
    case kRoomUpdate: {
      _this->_internal_mutable_room_update()->::livekit::RoomUpdate::MergeFrom(
          from._internal_room_update());
      break;
    }
    case kConnectionQuality: {
      _this->_internal_mutable_connection_quality()->::livekit::ConnectionQualityUpdate::MergeFrom(
          from._internal_connection_quality());
      break;
    }
    case kStreamStateUpdate: {
      _this->_internal_mutable_stream_state_update()->::livekit::StreamStateUpdate::MergeFrom(
          from._internal_stream_state_update());
      break;
    }
    case kSubscribedQualityUpdate: {
      _this->_internal_mutable_subscribed_quality_update()->::livekit::SubscribedQualityUpdate::MergeFrom(
          from._internal_subscribed_quality_update());
      break;
    }
    case kSubscriptionPermissionUpdate: {
      _this->_internal_mutable_subscription_permission_update()->::livekit::SubscriptionPermissionUpdate::MergeFrom(
          from._internal_subscription_permission_update());
      break;
    }
    case kRefreshToken: {
      _this->_internal_set_refresh_token(from._internal_refresh_token());
      break;
    }
    case kTrackUnpublished: {
      _this->_internal_mutable_track_unpublished()->::livekit::TrackUnpublishedResponse::MergeFrom(
          from._internal_track_unpublished());
      break;
    }
    case kPong: {
      _this->_internal_set_pong(from._internal_pong());
      break;
    }
    case kReconnect: {
      _this->_internal_mutable_reconnect()->::livekit::ReconnectResponse::MergeFrom(
          from._internal_reconnect());
      break;
    }
    case kPongResp: {
      _this->_internal_mutable_pong_resp()->::livekit::Pong::MergeFrom(
          from._internal_pong_resp());
      break;
    }
    case kSubscriptionResponse: {
      _this->_internal_mutable_subscription_response()->::livekit::SubscriptionResponse::MergeFrom(
          from._internal_subscription_response());
      break;
    }
    case kRequestResponse: {
      _this->_internal_mutable_request_response()->::livekit::RequestResponse::MergeFrom(
          from._internal_request_response());
      break;
    }
    case kTrackSubscribed: {
      _this->_internal_mutable_track_subscribed()->::livekit::TrackSubscribed::MergeFrom(
          from._internal_track_subscribed());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalResponse::CopyFrom(const SignalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SignalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalResponse::IsInitialized() const {
  return true;
}

void SignalResponse::InternalSwap(SignalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[1]);
}

// ===================================================================

class SimulcastCodec::_Internal {
 public:
};

SimulcastCodec::SimulcastCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulcastCodec)
}
SimulcastCodec::SimulcastCodec(const SimulcastCodec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulcastCodec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.codec_){}
    , decltype(_impl_.cid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    _this->_impl_.codec_.Set(from._internal_codec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    _this->_impl_.cid_.Set(from._internal_cid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SimulcastCodec)
}

inline void SimulcastCodec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.codec_){}
    , decltype(_impl_.cid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimulcastCodec::~SimulcastCodec() {
  // @@protoc_insertion_point(destructor:livekit.SimulcastCodec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulcastCodec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.codec_.Destroy();
  _impl_.cid_.Destroy();
}

void SimulcastCodec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulcastCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulcastCodec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.codec_.ClearToEmpty();
  _impl_.cid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulcastCodec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SimulcastCodec.codec"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SimulcastCodec.cid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulcastCodec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulcastCodec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodec.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SimulcastCodec.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulcastCodec)
  return target;
}

size_t SimulcastCodec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SimulcastCodec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulcastCodec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulcastCodec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulcastCodec::GetClassData() const { return &_class_data_; }


void SimulcastCodec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulcastCodec*>(&to_msg);
  auto& from = static_cast<const SimulcastCodec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulcastCodec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_codec().empty()) {
    _this->_internal_set_codec(from._internal_codec());
  }
  if (!from._internal_cid().empty()) {
    _this->_internal_set_cid(from._internal_cid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulcastCodec::CopyFrom(const SimulcastCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulcastCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulcastCodec::IsInitialized() const {
  return true;
}

void SimulcastCodec::InternalSwap(SimulcastCodec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codec_, lhs_arena,
      &other->_impl_.codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cid_, lhs_arena,
      &other->_impl_.cid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulcastCodec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[2]);
}

// ===================================================================

class AddTrackRequest::_Internal {
 public:
};

void AddTrackRequest::clear_layers() {
  _impl_.layers_.Clear();
}
AddTrackRequest::AddTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.AddTrackRequest)
}
AddTrackRequest::AddTrackRequest(const AddTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.simulcast_codecs_){from._impl_.simulcast_codecs_}
    , decltype(_impl_.cid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.muted_){}
    , decltype(_impl_.disable_dtx_){}
    , decltype(_impl_.stereo_){}
    , decltype(_impl_.disable_red_){}
    , decltype(_impl_.encryption_){}
    , decltype(_impl_.backup_codec_policy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    _this->_impl_.cid_.Set(from._internal_cid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream().empty()) {
    _this->_impl_.stream_.Set(from._internal_stream(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.backup_codec_policy_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.backup_codec_policy_));
  // @@protoc_insertion_point(copy_constructor:livekit.AddTrackRequest)
}

inline void AddTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){arena}
    , decltype(_impl_.simulcast_codecs_){arena}
    , decltype(_impl_.cid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.muted_){false}
    , decltype(_impl_.disable_dtx_){false}
    , decltype(_impl_.stereo_){false}
    , decltype(_impl_.disable_red_){false}
    , decltype(_impl_.encryption_){0}
    , decltype(_impl_.backup_codec_policy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddTrackRequest::~AddTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.AddTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
  _impl_.simulcast_codecs_.~RepeatedPtrField();
  _impl_.cid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.sid_.Destroy();
  _impl_.stream_.Destroy();
}

void AddTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AddTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.simulcast_codecs_.Clear();
  _impl_.cid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.sid_.ClearToEmpty();
  _impl_.stream_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.backup_codec_policy_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.backup_codec_policy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AddTrackRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AddTrackRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::livekit::TrackType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool muted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_dtx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.disable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackSource source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::livekit::TrackSource>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simulcast_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AddTrackRequest.sid"));
        } else
          goto handle_unusual;
        continue;
      // bool stereo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.stereo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_red = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.disable_red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.Encryption.Type encryption = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::livekit::Encryption_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string stream = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.AddTrackRequest.stream"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.BackupCodecPolicy backup_codec_policy = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_backup_codec_policy(static_cast<::livekit::BackupCodecPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AddTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AddTrackRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AddTrackRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .livekit.TrackType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // uint32 width = 4;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // uint32 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  // bool muted = 6;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_muted(), target);
  }

  // bool disable_dtx = 7;
  if (this->_internal_disable_dtx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_dtx(), target);
  }

  // .livekit.TrackSource source = 8;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_source(), target);
  }

  // repeated .livekit.VideoLayer layers = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_simulcast_codecs_size()); i < n; i++) {
    const auto& repfield = this->_internal_simulcast_codecs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string sid = 11;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AddTrackRequest.sid");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sid(), target);
  }

  // bool stereo = 12;
  if (this->_internal_stereo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_stereo(), target);
  }

  // bool disable_red = 13;
  if (this->_internal_disable_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_disable_red(), target);
  }

  // .livekit.Encryption.Type encryption = 14;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_encryption(), target);
  }

  // string stream = 15;
  if (!this->_internal_stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.AddTrackRequest.stream");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_stream(), target);
  }

  // .livekit.BackupCodecPolicy backup_codec_policy = 16;
  if (this->_internal_backup_codec_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_backup_codec_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AddTrackRequest)
  return target;
}

size_t AddTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.AddTrackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 9;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
  total_size += 1UL * this->_internal_simulcast_codecs_size();
  for (const auto& msg : this->_impl_.simulcast_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sid = 11;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string stream = 15;
  if (!this->_internal_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // .livekit.TrackType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 width = 4;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // .livekit.TrackSource source = 8;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // bool muted = 6;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_dtx = 7;
  if (this->_internal_disable_dtx() != 0) {
    total_size += 1 + 1;
  }

  // bool stereo = 12;
  if (this->_internal_stereo() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_red = 13;
  if (this->_internal_disable_red() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.Encryption.Type encryption = 14;
  if (this->_internal_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  // .livekit.BackupCodecPolicy backup_codec_policy = 16;
  if (this->_internal_backup_codec_policy() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_backup_codec_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTrackRequest::GetClassData() const { return &_class_data_; }


void AddTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddTrackRequest*>(&to_msg);
  auto& from = static_cast<const AddTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AddTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layers_.MergeFrom(from._impl_.layers_);
  _this->_impl_.simulcast_codecs_.MergeFrom(from._impl_.simulcast_codecs_);
  if (!from._internal_cid().empty()) {
    _this->_internal_set_cid(from._internal_cid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  if (!from._internal_stream().empty()) {
    _this->_internal_set_stream(from._internal_stream());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_muted() != 0) {
    _this->_internal_set_muted(from._internal_muted());
  }
  if (from._internal_disable_dtx() != 0) {
    _this->_internal_set_disable_dtx(from._internal_disable_dtx());
  }
  if (from._internal_stereo() != 0) {
    _this->_internal_set_stereo(from._internal_stereo());
  }
  if (from._internal_disable_red() != 0) {
    _this->_internal_set_disable_red(from._internal_disable_red());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  if (from._internal_backup_codec_policy() != 0) {
    _this->_internal_set_backup_codec_policy(from._internal_backup_codec_policy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddTrackRequest::CopyFrom(const AddTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AddTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTrackRequest::IsInitialized() const {
  return true;
}

void AddTrackRequest::InternalSwap(AddTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.simulcast_codecs_.InternalSwap(&other->_impl_.simulcast_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cid_, lhs_arena,
      &other->_impl_.cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_, lhs_arena,
      &other->_impl_.stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.backup_codec_policy_)
      + sizeof(AddTrackRequest::_impl_.backup_codec_policy_)
      - PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[3]);
}

// ===================================================================

class TrickleRequest::_Internal {
 public:
};

TrickleRequest::TrickleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrickleRequest)
}
TrickleRequest::TrickleRequest(const TrickleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrickleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candidateinit_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.final_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.candidateinit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.candidateinit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_candidateinit().empty()) {
    _this->_impl_.candidateinit_.Set(from._internal_candidateinit(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.target_, &from._impl_.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_) -
    reinterpret_cast<char*>(&_impl_.target_)) + sizeof(_impl_.final_));
  // @@protoc_insertion_point(copy_constructor:livekit.TrickleRequest)
}

inline void TrickleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candidateinit_){}
    , decltype(_impl_.target_){0}
    , decltype(_impl_.final_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.candidateinit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.candidateinit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrickleRequest::~TrickleRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrickleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrickleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidateinit_.Destroy();
}

void TrickleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrickleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrickleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidateinit_.ClearToEmpty();
  ::memset(&_impl_.target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.final_) -
      reinterpret_cast<char*>(&_impl_.target_)) + sizeof(_impl_.final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrickleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string candidateInit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_candidateinit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrickleRequest.candidateInit"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SignalTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::livekit::SignalTarget>(val));
        } else
          goto handle_unusual;
        continue;
      // bool final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrickleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrickleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidateInit = 1;
  if (!this->_internal_candidateinit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidateinit().data(), static_cast<int>(this->_internal_candidateinit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrickleRequest.candidateInit");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidateinit(), target);
  }

  // .livekit.SignalTarget target = 2;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_target(), target);
  }

  // bool final = 3;
  if (this->_internal_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_final(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrickleRequest)
  return target;
}

size_t TrickleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrickleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidateInit = 1;
  if (!this->_internal_candidateinit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidateinit());
  }

  // .livekit.SignalTarget target = 2;
  if (this->_internal_target() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_target());
  }

  // bool final = 3;
  if (this->_internal_final() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrickleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrickleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrickleRequest::GetClassData() const { return &_class_data_; }


void TrickleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrickleRequest*>(&to_msg);
  auto& from = static_cast<const TrickleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrickleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidateinit().empty()) {
    _this->_internal_set_candidateinit(from._internal_candidateinit());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_final() != 0) {
    _this->_internal_set_final(from._internal_final());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrickleRequest::CopyFrom(const TrickleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrickleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrickleRequest::IsInitialized() const {
  return true;
}

void TrickleRequest::InternalSwap(TrickleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.candidateinit_, lhs_arena,
      &other->_impl_.candidateinit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.final_)
      + sizeof(TrickleRequest::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrickleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[4]);
}

// ===================================================================

class MuteTrackRequest::_Internal {
 public:
};

MuteTrackRequest::MuteTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.MuteTrackRequest)
}
MuteTrackRequest::MuteTrackRequest(const MuteTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MuteTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sid_){}
    , decltype(_impl_.muted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.muted_ = from._impl_.muted_;
  // @@protoc_insertion_point(copy_constructor:livekit.MuteTrackRequest)
}

inline void MuteTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sid_){}
    , decltype(_impl_.muted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MuteTrackRequest::~MuteTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.MuteTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sid_.Destroy();
}

void MuteTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MuteTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sid_.ClearToEmpty();
  _impl_.muted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.MuteTrackRequest.sid"));
        } else
          goto handle_unusual;
        continue;
      // bool muted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MuteTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MuteTrackRequest.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // bool muted = 2;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MuteTrackRequest)
  return target;
}

size_t MuteTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MuteTrackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // bool muted = 2;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MuteTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteTrackRequest::GetClassData() const { return &_class_data_; }


void MuteTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MuteTrackRequest*>(&to_msg);
  auto& from = static_cast<const MuteTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MuteTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  if (from._internal_muted() != 0) {
    _this->_internal_set_muted(from._internal_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteTrackRequest::CopyFrom(const MuteTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MuteTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteTrackRequest::IsInitialized() const {
  return true;
}

void MuteTrackRequest::InternalSwap(MuteTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  swap(_impl_.muted_, other->_impl_.muted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[5]);
}

// ===================================================================

class JoinResponse::_Internal {
 public:
  static const ::livekit::Room& room(const JoinResponse* msg);
  static const ::livekit::ParticipantInfo& participant(const JoinResponse* msg);
  static const ::livekit::ClientConfiguration& client_configuration(const JoinResponse* msg);
  static const ::livekit::ServerInfo& server_info(const JoinResponse* msg);
};

const ::livekit::Room&
JoinResponse::_Internal::room(const JoinResponse* msg) {
  return *msg->_impl_.room_;
}
const ::livekit::ParticipantInfo&
JoinResponse::_Internal::participant(const JoinResponse* msg) {
  return *msg->_impl_.participant_;
}
const ::livekit::ClientConfiguration&
JoinResponse::_Internal::client_configuration(const JoinResponse* msg) {
  return *msg->_impl_.client_configuration_;
}
const ::livekit::ServerInfo&
JoinResponse::_Internal::server_info(const JoinResponse* msg) {
  return *msg->_impl_.server_info_;
}
void JoinResponse::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
void JoinResponse::clear_participant() {
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
}
void JoinResponse::clear_other_participants() {
  _impl_.other_participants_.Clear();
}
void JoinResponse::clear_client_configuration() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_configuration_ != nullptr) {
    delete _impl_.client_configuration_;
  }
  _impl_.client_configuration_ = nullptr;
}
void JoinResponse::clear_server_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
}
void JoinResponse::clear_enabled_publish_codecs() {
  _impl_.enabled_publish_codecs_.Clear();
}
JoinResponse::JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.JoinResponse)
}
JoinResponse::JoinResponse(const JoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.other_participants_){from._impl_.other_participants_}
    , decltype(_impl_.ice_servers_){from._impl_.ice_servers_}
    , decltype(_impl_.enabled_publish_codecs_){from._impl_.enabled_publish_codecs_}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.alternative_url_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.sif_trailer_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.client_configuration_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , decltype(_impl_.ping_timeout_){}
    , decltype(_impl_.subscriber_primary_){}
    , decltype(_impl_.fast_publish_){}
    , decltype(_impl_.ping_interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_version().empty()) {
    _this->_impl_.server_version_.Set(from._internal_server_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alternative_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alternative_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alternative_url().empty()) {
    _this->_impl_.alternative_url_.Set(from._internal_alternative_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_region().empty()) {
    _this->_impl_.server_region_.Set(from._internal_server_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sif_trailer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sif_trailer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sif_trailer().empty()) {
    _this->_impl_.sif_trailer_.Set(from._internal_sif_trailer(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::Room(*from._impl_.room_);
  }
  if (from._internal_has_participant()) {
    _this->_impl_.participant_ = new ::livekit::ParticipantInfo(*from._impl_.participant_);
  }
  if (from._internal_has_client_configuration()) {
    _this->_impl_.client_configuration_ = new ::livekit::ClientConfiguration(*from._impl_.client_configuration_);
  }
  if (from._internal_has_server_info()) {
    _this->_impl_.server_info_ = new ::livekit::ServerInfo(*from._impl_.server_info_);
  }
  ::memcpy(&_impl_.ping_timeout_, &from._impl_.ping_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ping_interval_) -
    reinterpret_cast<char*>(&_impl_.ping_timeout_)) + sizeof(_impl_.ping_interval_));
  // @@protoc_insertion_point(copy_constructor:livekit.JoinResponse)
}

inline void JoinResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.other_participants_){arena}
    , decltype(_impl_.ice_servers_){arena}
    , decltype(_impl_.enabled_publish_codecs_){arena}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.alternative_url_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.sif_trailer_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.client_configuration_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , decltype(_impl_.ping_timeout_){0}
    , decltype(_impl_.subscriber_primary_){false}
    , decltype(_impl_.fast_publish_){false}
    , decltype(_impl_.ping_interval_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alternative_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alternative_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sif_trailer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sif_trailer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinResponse::~JoinResponse() {
  // @@protoc_insertion_point(destructor:livekit.JoinResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.other_participants_.~RepeatedPtrField();
  _impl_.ice_servers_.~RepeatedPtrField();
  _impl_.enabled_publish_codecs_.~RepeatedPtrField();
  _impl_.server_version_.Destroy();
  _impl_.alternative_url_.Destroy();
  _impl_.server_region_.Destroy();
  _impl_.sif_trailer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.participant_;
  if (this != internal_default_instance()) delete _impl_.client_configuration_;
  if (this != internal_default_instance()) delete _impl_.server_info_;
}

void JoinResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.JoinResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_participants_.Clear();
  _impl_.ice_servers_.Clear();
  _impl_.enabled_publish_codecs_.Clear();
  _impl_.server_version_.ClearToEmpty();
  _impl_.alternative_url_.ClearToEmpty();
  _impl_.server_region_.ClearToEmpty();
  _impl_.sif_trailer_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.client_configuration_ != nullptr) {
    delete _impl_.client_configuration_;
  }
  _impl_.client_configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
  ::memset(&_impl_.ping_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ping_interval_) -
      reinterpret_cast<char*>(&_impl_.ping_timeout_)) + sizeof(_impl_.ping_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo participant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ParticipantInfo other_participants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_other_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string server_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_server_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JoinResponse.server_version"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ICEServer ice_servers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ice_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool subscriber_primary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.subscriber_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alternative_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_alternative_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JoinResponse.alternative_url"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ClientConfiguration client_configuration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server_region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_server_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.JoinResponse.server_region"));
        } else
          goto handle_unusual;
        continue;
      // int32 ping_timeout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ping_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ping_interval = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.ping_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ServerInfo server_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sif_trailer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_sif_trailer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.Codec enabled_publish_codecs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enabled_publish_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool fast_publish = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.fast_publish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.JoinResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // .livekit.ParticipantInfo participant = 2;
  if (this->_internal_has_participant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.ParticipantInfo other_participants = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_other_participants_size()); i < n; i++) {
    const auto& repfield = this->_internal_other_participants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string server_version = 4;
  if (!this->_internal_server_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_version().data(), static_cast<int>(this->_internal_server_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JoinResponse.server_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_server_version(), target);
  }

  // repeated .livekit.ICEServer ice_servers = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ice_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_ice_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool subscriber_primary = 6;
  if (this->_internal_subscriber_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_subscriber_primary(), target);
  }

  // string alternative_url = 7;
  if (!this->_internal_alternative_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternative_url().data(), static_cast<int>(this->_internal_alternative_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JoinResponse.alternative_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_alternative_url(), target);
  }

  // .livekit.ClientConfiguration client_configuration = 8;
  if (this->_internal_has_client_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::client_configuration(this),
        _Internal::client_configuration(this).GetCachedSize(), target, stream);
  }

  // string server_region = 9;
  if (!this->_internal_server_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_region().data(), static_cast<int>(this->_internal_server_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.JoinResponse.server_region");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_server_region(), target);
  }

  // int32 ping_timeout = 10;
  if (this->_internal_ping_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_ping_timeout(), target);
  }

  // int32 ping_interval = 11;
  if (this->_internal_ping_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_ping_interval(), target);
  }

  // .livekit.ServerInfo server_info = 12;
  if (this->_internal_has_server_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  // bytes sif_trailer = 13;
  if (!this->_internal_sif_trailer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_sif_trailer(), target);
  }

  // repeated .livekit.Codec enabled_publish_codecs = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enabled_publish_codecs_size()); i < n; i++) {
    const auto& repfield = this->_internal_enabled_publish_codecs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool fast_publish = 15;
  if (this->_internal_fast_publish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_fast_publish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.JoinResponse)
  return target;
}

size_t JoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.JoinResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo other_participants = 3;
  total_size += 1UL * this->_internal_other_participants_size();
  for (const auto& msg : this->_impl_.other_participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.ICEServer ice_servers = 5;
  total_size += 1UL * this->_internal_ice_servers_size();
  for (const auto& msg : this->_impl_.ice_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.Codec enabled_publish_codecs = 14;
  total_size += 1UL * this->_internal_enabled_publish_codecs_size();
  for (const auto& msg : this->_impl_.enabled_publish_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string server_version = 4;
  if (!this->_internal_server_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_version());
  }

  // string alternative_url = 7;
  if (!this->_internal_alternative_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternative_url());
  }

  // string server_region = 9;
  if (!this->_internal_server_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_region());
  }

  // bytes sif_trailer = 13;
  if (!this->_internal_sif_trailer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sif_trailer());
  }

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // .livekit.ParticipantInfo participant = 2;
  if (this->_internal_has_participant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.participant_);
  }

  // .livekit.ClientConfiguration client_configuration = 8;
  if (this->_internal_has_client_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_configuration_);
  }

  // .livekit.ServerInfo server_info = 12;
  if (this->_internal_has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_info_);
  }

  // int32 ping_timeout = 10;
  if (this->_internal_ping_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ping_timeout());
  }

  // bool subscriber_primary = 6;
  if (this->_internal_subscriber_primary() != 0) {
    total_size += 1 + 1;
  }

  // bool fast_publish = 15;
  if (this->_internal_fast_publish() != 0) {
    total_size += 1 + 1;
  }

  // int32 ping_interval = 11;
  if (this->_internal_ping_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ping_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinResponse::GetClassData() const { return &_class_data_; }


void JoinResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinResponse*>(&to_msg);
  auto& from = static_cast<const JoinResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.JoinResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.other_participants_.MergeFrom(from._impl_.other_participants_);
  _this->_impl_.ice_servers_.MergeFrom(from._impl_.ice_servers_);
  _this->_impl_.enabled_publish_codecs_.MergeFrom(from._impl_.enabled_publish_codecs_);
  if (!from._internal_server_version().empty()) {
    _this->_internal_set_server_version(from._internal_server_version());
  }
  if (!from._internal_alternative_url().empty()) {
    _this->_internal_set_alternative_url(from._internal_alternative_url());
  }
  if (!from._internal_server_region().empty()) {
    _this->_internal_set_server_region(from._internal_server_region());
  }
  if (!from._internal_sif_trailer().empty()) {
    _this->_internal_set_sif_trailer(from._internal_sif_trailer());
  }
  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::livekit::Room::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_participant()) {
    _this->_internal_mutable_participant()->::livekit::ParticipantInfo::MergeFrom(
        from._internal_participant());
  }
  if (from._internal_has_client_configuration()) {
    _this->_internal_mutable_client_configuration()->::livekit::ClientConfiguration::MergeFrom(
        from._internal_client_configuration());
  }
  if (from._internal_has_server_info()) {
    _this->_internal_mutable_server_info()->::livekit::ServerInfo::MergeFrom(
        from._internal_server_info());
  }
  if (from._internal_ping_timeout() != 0) {
    _this->_internal_set_ping_timeout(from._internal_ping_timeout());
  }
  if (from._internal_subscriber_primary() != 0) {
    _this->_internal_set_subscriber_primary(from._internal_subscriber_primary());
  }
  if (from._internal_fast_publish() != 0) {
    _this->_internal_set_fast_publish(from._internal_fast_publish());
  }
  if (from._internal_ping_interval() != 0) {
    _this->_internal_set_ping_interval(from._internal_ping_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinResponse::CopyFrom(const JoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.JoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinResponse::IsInitialized() const {
  return true;
}

void JoinResponse::InternalSwap(JoinResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.other_participants_.InternalSwap(&other->_impl_.other_participants_);
  _impl_.ice_servers_.InternalSwap(&other->_impl_.ice_servers_);
  _impl_.enabled_publish_codecs_.InternalSwap(&other->_impl_.enabled_publish_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_version_, lhs_arena,
      &other->_impl_.server_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alternative_url_, lhs_arena,
      &other->_impl_.alternative_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_region_, lhs_arena,
      &other->_impl_.server_region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sif_trailer_, lhs_arena,
      &other->_impl_.sif_trailer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ping_interval_)
      + sizeof(JoinResponse::_impl_.ping_interval_)
      - PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[6]);
}

// ===================================================================

class ReconnectResponse::_Internal {
 public:
  static const ::livekit::ClientConfiguration& client_configuration(const ReconnectResponse* msg);
};

const ::livekit::ClientConfiguration&
ReconnectResponse::_Internal::client_configuration(const ReconnectResponse* msg) {
  return *msg->_impl_.client_configuration_;
}
void ReconnectResponse::clear_client_configuration() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_configuration_ != nullptr) {
    delete _impl_.client_configuration_;
  }
  _impl_.client_configuration_ = nullptr;
}
ReconnectResponse::ReconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ReconnectResponse)
}
ReconnectResponse::ReconnectResponse(const ReconnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ice_servers_){from._impl_.ice_servers_}
    , decltype(_impl_.client_configuration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_configuration()) {
    _this->_impl_.client_configuration_ = new ::livekit::ClientConfiguration(*from._impl_.client_configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ReconnectResponse)
}

inline void ReconnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ice_servers_){arena}
    , decltype(_impl_.client_configuration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReconnectResponse::~ReconnectResponse() {
  // @@protoc_insertion_point(destructor:livekit.ReconnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ice_servers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.client_configuration_;
}

void ReconnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ReconnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ice_servers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.client_configuration_ != nullptr) {
    delete _impl_.client_configuration_;
  }
  _impl_.client_configuration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.ICEServer ice_servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ice_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ClientConfiguration client_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ReconnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.ICEServer ice_servers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ice_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_ice_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .livekit.ClientConfiguration client_configuration = 2;
  if (this->_internal_has_client_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::client_configuration(this),
        _Internal::client_configuration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ReconnectResponse)
  return target;
}

size_t ReconnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ReconnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ICEServer ice_servers = 1;
  total_size += 1UL * this->_internal_ice_servers_size();
  for (const auto& msg : this->_impl_.ice_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .livekit.ClientConfiguration client_configuration = 2;
  if (this->_internal_has_client_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconnectResponse::GetClassData() const { return &_class_data_; }


void ReconnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconnectResponse*>(&to_msg);
  auto& from = static_cast<const ReconnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ReconnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ice_servers_.MergeFrom(from._impl_.ice_servers_);
  if (from._internal_has_client_configuration()) {
    _this->_internal_mutable_client_configuration()->::livekit::ClientConfiguration::MergeFrom(
        from._internal_client_configuration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconnectResponse::CopyFrom(const ReconnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ReconnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectResponse::IsInitialized() const {
  return true;
}

void ReconnectResponse::InternalSwap(ReconnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ice_servers_.InternalSwap(&other->_impl_.ice_servers_);
  swap(_impl_.client_configuration_, other->_impl_.client_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[7]);
}

// ===================================================================

class TrackPublishedResponse::_Internal {
 public:
  static const ::livekit::TrackInfo& track(const TrackPublishedResponse* msg);
};

const ::livekit::TrackInfo&
TrackPublishedResponse::_Internal::track(const TrackPublishedResponse* msg) {
  return *msg->_impl_.track_;
}
void TrackPublishedResponse::clear_track() {
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
}
TrackPublishedResponse::TrackPublishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackPublishedResponse)
}
TrackPublishedResponse::TrackPublishedResponse(const TrackPublishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackPublishedResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cid_){}
    , decltype(_impl_.track_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    _this->_impl_.cid_.Set(from._internal_cid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::livekit::TrackInfo(*from._impl_.track_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackPublishedResponse)
}

inline void TrackPublishedResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cid_){}
    , decltype(_impl_.track_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackPublishedResponse::~TrackPublishedResponse() {
  // @@protoc_insertion_point(destructor:livekit.TrackPublishedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackPublishedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.track_;
}

void TrackPublishedResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackPublishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackPublishedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPublishedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackPublishedResponse.cid"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackInfo track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPublishedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackPublishedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPublishedResponse.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // .livekit.TrackInfo track = 2;
  if (this->_internal_has_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackPublishedResponse)
  return target;
}

size_t TrackPublishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackPublishedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // .livekit.TrackInfo track = 2;
  if (this->_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPublishedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackPublishedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPublishedResponse::GetClassData() const { return &_class_data_; }


void TrackPublishedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackPublishedResponse*>(&to_msg);
  auto& from = static_cast<const TrackPublishedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackPublishedResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cid().empty()) {
    _this->_internal_set_cid(from._internal_cid());
  }
  if (from._internal_has_track()) {
    _this->_internal_mutable_track()->::livekit::TrackInfo::MergeFrom(
        from._internal_track());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPublishedResponse::CopyFrom(const TrackPublishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackPublishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPublishedResponse::IsInitialized() const {
  return true;
}

void TrackPublishedResponse::InternalSwap(TrackPublishedResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cid_, lhs_arena,
      &other->_impl_.cid_, rhs_arena
  );
  swap(_impl_.track_, other->_impl_.track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPublishedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[8]);
}

// ===================================================================

class TrackUnpublishedResponse::_Internal {
 public:
};

TrackUnpublishedResponse::TrackUnpublishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackUnpublishedResponse)
}
TrackUnpublishedResponse::TrackUnpublishedResponse(const TrackUnpublishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackUnpublishedResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackUnpublishedResponse)
}

inline void TrackUnpublishedResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackUnpublishedResponse::~TrackUnpublishedResponse() {
  // @@protoc_insertion_point(destructor:livekit.TrackUnpublishedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackUnpublishedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void TrackUnpublishedResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackUnpublishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackUnpublishedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackUnpublishedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackUnpublishedResponse.track_sid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackUnpublishedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackUnpublishedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackUnpublishedResponse.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackUnpublishedResponse)
  return target;
}

size_t TrackUnpublishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackUnpublishedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackUnpublishedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackUnpublishedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackUnpublishedResponse::GetClassData() const { return &_class_data_; }


void TrackUnpublishedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackUnpublishedResponse*>(&to_msg);
  auto& from = static_cast<const TrackUnpublishedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackUnpublishedResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackUnpublishedResponse::CopyFrom(const TrackUnpublishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackUnpublishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackUnpublishedResponse::IsInitialized() const {
  return true;
}

void TrackUnpublishedResponse::InternalSwap(TrackUnpublishedResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackUnpublishedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[9]);
}

// ===================================================================

class SessionDescription::_Internal {
 public:
};

SessionDescription::SessionDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SessionDescription)
}
SessionDescription::SessionDescription(const SessionDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    _this->_impl_.sdp_.Set(from._internal_sdp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SessionDescription)
}

inline void SessionDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionDescription::~SessionDescription() {
  // @@protoc_insertion_point(destructor:livekit.SessionDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.sdp_.Destroy();
}

void SessionDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SessionDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.sdp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SessionDescription.type"));
        } else
          goto handle_unusual;
        continue;
      // string sdp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SessionDescription.sdp"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SessionDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SessionDescription.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string sdp = 2;
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SessionDescription.sdp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SessionDescription)
  return target;
}

size_t SessionDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SessionDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string sdp = 2;
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionDescription::GetClassData() const { return &_class_data_; }


void SessionDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionDescription*>(&to_msg);
  auto& from = static_cast<const SessionDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SessionDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_sdp().empty()) {
    _this->_internal_set_sdp(from._internal_sdp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionDescription::CopyFrom(const SessionDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SessionDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionDescription::IsInitialized() const {
  return true;
}

void SessionDescription::InternalSwap(SessionDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_, lhs_arena,
      &other->_impl_.sdp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[10]);
}

// ===================================================================

class ParticipantUpdate::_Internal {
 public:
};

void ParticipantUpdate::clear_participants() {
  _impl_.participants_.Clear();
}
ParticipantUpdate::ParticipantUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantUpdate)
}
ParticipantUpdate::ParticipantUpdate(const ParticipantUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participants_){from._impl_.participants_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantUpdate)
}

inline void ParticipantUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participants_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParticipantUpdate::~ParticipantUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participants_.~RepeatedPtrField();
}

void ParticipantUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.ParticipantInfo participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_participants_size()); i < n; i++) {
    const auto& repfield = this->_internal_participants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantUpdate)
  return target;
}

size_t ParticipantUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->_impl_.participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantUpdate::GetClassData() const { return &_class_data_; }


void ParticipantUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantUpdate*>(&to_msg);
  auto& from = static_cast<const ParticipantUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participants_.MergeFrom(from._impl_.participants_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantUpdate::CopyFrom(const ParticipantUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantUpdate::IsInitialized() const {
  return true;
}

void ParticipantUpdate::InternalSwap(ParticipantUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participants_.InternalSwap(&other->_impl_.participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[11]);
}

// ===================================================================

class UpdateSubscription::_Internal {
 public:
};

void UpdateSubscription::clear_participant_tracks() {
  _impl_.participant_tracks_.Clear();
}
UpdateSubscription::UpdateSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateSubscription)
}
UpdateSubscription::UpdateSubscription(const UpdateSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){from._impl_.track_sids_}
    , decltype(_impl_.participant_tracks_){from._impl_.participant_tracks_}
    , decltype(_impl_.subscribe_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subscribe_ = from._impl_.subscribe_;
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateSubscription)
}

inline void UpdateSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){arena}
    , decltype(_impl_.participant_tracks_){arena}
    , decltype(_impl_.subscribe_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateSubscription::~UpdateSubscription() {
  // @@protoc_insertion_point(destructor:livekit.UpdateSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sids_.~RepeatedPtrField();
  _impl_.participant_tracks_.~RepeatedPtrField();
}

void UpdateSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  _impl_.participant_tracks_.Clear();
  _impl_.subscribe_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string track_sids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateSubscription.track_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool subscribe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ParticipantTracks participant_tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateSubscription.track_sids");
    target = stream->WriteString(1, s, target);
  }

  // bool subscribe = 2;
  if (this->_internal_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_subscribe(), target);
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_participant_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_participant_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateSubscription)
  return target;
}

size_t UpdateSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.track_sids_.size());
  for (int i = 0, n = _impl_.track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.track_sids_.Get(i));
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 3;
  total_size += 1UL * this->_internal_participant_tracks_size();
  for (const auto& msg : this->_impl_.participant_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool subscribe = 2;
  if (this->_internal_subscribe() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSubscription::GetClassData() const { return &_class_data_; }


void UpdateSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateSubscription*>(&to_msg);
  auto& from = static_cast<const UpdateSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.track_sids_.MergeFrom(from._impl_.track_sids_);
  _this->_impl_.participant_tracks_.MergeFrom(from._impl_.participant_tracks_);
  if (from._internal_subscribe() != 0) {
    _this->_internal_set_subscribe(from._internal_subscribe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSubscription::CopyFrom(const UpdateSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscription::IsInitialized() const {
  return true;
}

void UpdateSubscription::InternalSwap(UpdateSubscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  _impl_.participant_tracks_.InternalSwap(&other->_impl_.participant_tracks_);
  swap(_impl_.subscribe_, other->_impl_.subscribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[12]);
}

// ===================================================================

class UpdateTrackSettings::_Internal {
 public:
};

UpdateTrackSettings::UpdateTrackSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateTrackSettings)
}
UpdateTrackSettings::UpdateTrackSettings(const UpdateTrackSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateTrackSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){from._impl_.track_sids_}
    , decltype(_impl_.disabled_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.fps_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.disabled_, &from._impl_.disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.disabled_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateTrackSettings)
}

inline void UpdateTrackSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){arena}
    , decltype(_impl_.disabled_){false}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.fps_){0u}
    , decltype(_impl_.priority_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateTrackSettings::~UpdateTrackSettings() {
  // @@protoc_insertion_point(destructor:livekit.UpdateTrackSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateTrackSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sids_.~RepeatedPtrField();
}

void UpdateTrackSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateTrackSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateTrackSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  ::memset(&_impl_.disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.disabled_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTrackSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string track_sids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateTrackSettings.track_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool disabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.VideoQuality quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::VideoQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateTrackSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateTrackSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateTrackSettings.track_sids");
    target = stream->WriteString(1, s, target);
  }

  // bool disabled = 3;
  if (this->_internal_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_disabled(), target);
  }

  // .livekit.VideoQuality quality = 4;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_quality(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // uint32 fps = 7;
  if (this->_internal_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fps(), target);
  }

  // uint32 priority = 8;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateTrackSettings)
  return target;
}

size_t UpdateTrackSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateTrackSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.track_sids_.size());
  for (int i = 0, n = _impl_.track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.track_sids_.Get(i));
  }

  // bool disabled = 3;
  if (this->_internal_disabled() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.VideoQuality quality = 4;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 fps = 7;
  if (this->_internal_fps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fps());
  }

  // uint32 priority = 8;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTrackSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateTrackSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTrackSettings::GetClassData() const { return &_class_data_; }


void UpdateTrackSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateTrackSettings*>(&to_msg);
  auto& from = static_cast<const UpdateTrackSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateTrackSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.track_sids_.MergeFrom(from._impl_.track_sids_);
  if (from._internal_disabled() != 0) {
    _this->_internal_set_disabled(from._internal_disabled());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_fps() != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTrackSettings::CopyFrom(const UpdateTrackSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateTrackSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTrackSettings::IsInitialized() const {
  return true;
}

void UpdateTrackSettings::InternalSwap(UpdateTrackSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.priority_)
      + sizeof(UpdateTrackSettings::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.disabled_)>(
          reinterpret_cast<char*>(&_impl_.disabled_),
          reinterpret_cast<char*>(&other->_impl_.disabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTrackSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[13]);
}

// ===================================================================

class UpdateLocalAudioTrack::_Internal {
 public:
};

UpdateLocalAudioTrack::UpdateLocalAudioTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateLocalAudioTrack)
}
UpdateLocalAudioTrack::UpdateLocalAudioTrack(const UpdateLocalAudioTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateLocalAudioTrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , /*decltype(_impl_._features_cached_byte_size_)*/{0}
    , decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateLocalAudioTrack)
}

inline void UpdateLocalAudioTrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , /*decltype(_impl_._features_cached_byte_size_)*/{0}
    , decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateLocalAudioTrack::~UpdateLocalAudioTrack() {
  // @@protoc_insertion_point(destructor:livekit.UpdateLocalAudioTrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateLocalAudioTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  _impl_.track_sid_.Destroy();
}

void UpdateLocalAudioTrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateLocalAudioTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateLocalAudioTrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  _impl_.track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocalAudioTrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateLocalAudioTrack.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.AudioTrackFeature features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_features(static_cast<::livekit::AudioTrackFeature>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateLocalAudioTrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateLocalAudioTrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateLocalAudioTrack.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // repeated .livekit.AudioTrackFeature features = 2;
  {
    int byte_size = _impl_._features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.features_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateLocalAudioTrack)
  return target;
}

size_t UpdateLocalAudioTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateLocalAudioTrack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.AudioTrackFeature features = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateLocalAudioTrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateLocalAudioTrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateLocalAudioTrack::GetClassData() const { return &_class_data_; }


void UpdateLocalAudioTrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateLocalAudioTrack*>(&to_msg);
  auto& from = static_cast<const UpdateLocalAudioTrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateLocalAudioTrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLocalAudioTrack::CopyFrom(const UpdateLocalAudioTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateLocalAudioTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocalAudioTrack::IsInitialized() const {
  return true;
}

void UpdateLocalAudioTrack::InternalSwap(UpdateLocalAudioTrack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocalAudioTrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[14]);
}

// ===================================================================

class UpdateLocalVideoTrack::_Internal {
 public:
};

UpdateLocalVideoTrack::UpdateLocalVideoTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateLocalVideoTrack)
}
UpdateLocalVideoTrack::UpdateLocalVideoTrack(const UpdateLocalVideoTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateLocalVideoTrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateLocalVideoTrack)
}

inline void UpdateLocalVideoTrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateLocalVideoTrack::~UpdateLocalVideoTrack() {
  // @@protoc_insertion_point(destructor:livekit.UpdateLocalVideoTrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateLocalVideoTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void UpdateLocalVideoTrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateLocalVideoTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateLocalVideoTrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sid_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocalVideoTrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateLocalVideoTrack.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateLocalVideoTrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateLocalVideoTrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateLocalVideoTrack.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateLocalVideoTrack)
  return target;
}

size_t UpdateLocalVideoTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateLocalVideoTrack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateLocalVideoTrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateLocalVideoTrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateLocalVideoTrack::GetClassData() const { return &_class_data_; }


void UpdateLocalVideoTrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateLocalVideoTrack*>(&to_msg);
  auto& from = static_cast<const UpdateLocalVideoTrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateLocalVideoTrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLocalVideoTrack::CopyFrom(const UpdateLocalVideoTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateLocalVideoTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocalVideoTrack::IsInitialized() const {
  return true;
}

void UpdateLocalVideoTrack::InternalSwap(UpdateLocalVideoTrack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.height_)
      + sizeof(UpdateLocalVideoTrack::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocalVideoTrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[15]);
}

// ===================================================================

class LeaveRequest::_Internal {
 public:
  static const ::livekit::RegionSettings& regions(const LeaveRequest* msg);
};

const ::livekit::RegionSettings&
LeaveRequest::_Internal::regions(const LeaveRequest* msg) {
  return *msg->_impl_.regions_;
}
LeaveRequest::LeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.LeaveRequest)
}
LeaveRequest::LeaveRequest(const LeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){nullptr}
    , decltype(_impl_.can_reconnect_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_regions()) {
    _this->_impl_.regions_ = new ::livekit::RegionSettings(*from._impl_.regions_);
  }
  ::memcpy(&_impl_.can_reconnect_, &from._impl_.can_reconnect_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.can_reconnect_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:livekit.LeaveRequest)
}

inline void LeaveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){nullptr}
    , decltype(_impl_.can_reconnect_){false}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveRequest::~LeaveRequest() {
  // @@protoc_insertion_point(destructor:livekit.LeaveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.regions_;
}

void LeaveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.LeaveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.regions_ != nullptr) {
    delete _impl_.regions_;
  }
  _impl_.regions_ = nullptr;
  ::memset(&_impl_.can_reconnect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.can_reconnect_)) + sizeof(_impl_.action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_reconnect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.can_reconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DisconnectReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::livekit::DisconnectReason>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.LeaveRequest.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::livekit::LeaveRequest_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // .livekit.RegionSettings regions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_regions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.LeaveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_reconnect = 1;
  if (this->_internal_can_reconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_can_reconnect(), target);
  }

  // .livekit.DisconnectReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // .livekit.LeaveRequest.Action action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // .livekit.RegionSettings regions = 4;
  if (this->_internal_has_regions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::regions(this),
        _Internal::regions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.LeaveRequest)
  return target;
}

size_t LeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.LeaveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.RegionSettings regions = 4;
  if (this->_internal_has_regions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regions_);
  }

  // bool can_reconnect = 1;
  if (this->_internal_can_reconnect() != 0) {
    total_size += 1 + 1;
  }

  // .livekit.DisconnectReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // .livekit.LeaveRequest.Action action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveRequest::GetClassData() const { return &_class_data_; }


void LeaveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveRequest*>(&to_msg);
  auto& from = static_cast<const LeaveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.LeaveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_regions()) {
    _this->_internal_mutable_regions()->::livekit::RegionSettings::MergeFrom(
        from._internal_regions());
  }
  if (from._internal_can_reconnect() != 0) {
    _this->_internal_set_can_reconnect(from._internal_can_reconnect());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveRequest::CopyFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRequest::IsInitialized() const {
  return true;
}

void LeaveRequest::InternalSwap(LeaveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.action_)
      + sizeof(LeaveRequest::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.regions_)>(
          reinterpret_cast<char*>(&_impl_.regions_),
          reinterpret_cast<char*>(&other->_impl_.regions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[16]);
}

// ===================================================================

class UpdateVideoLayers::_Internal {
 public:
};

void UpdateVideoLayers::clear_layers() {
  _impl_.layers_.Clear();
}
UpdateVideoLayers::UpdateVideoLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateVideoLayers)
}
UpdateVideoLayers::UpdateVideoLayers(const UpdateVideoLayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateVideoLayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateVideoLayers)
}

inline void UpdateVideoLayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){arena}
    , decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateVideoLayers::~UpdateVideoLayers() {
  // @@protoc_insertion_point(destructor:livekit.UpdateVideoLayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateVideoLayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
  _impl_.track_sid_.Destroy();
}

void UpdateVideoLayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateVideoLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateVideoLayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVideoLayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateVideoLayers.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.VideoLayer layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVideoLayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateVideoLayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateVideoLayers.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // repeated .livekit.VideoLayer layers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateVideoLayers)
  return target;
}

size_t UpdateVideoLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateVideoLayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.VideoLayer layers = 2;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVideoLayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateVideoLayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVideoLayers::GetClassData() const { return &_class_data_; }


void UpdateVideoLayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateVideoLayers*>(&to_msg);
  auto& from = static_cast<const UpdateVideoLayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateVideoLayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layers_.MergeFrom(from._impl_.layers_);
  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVideoLayers::CopyFrom(const UpdateVideoLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateVideoLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVideoLayers::IsInitialized() const {
  return true;
}

void UpdateVideoLayers::InternalSwap(UpdateVideoLayers* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVideoLayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[17]);
}

// ===================================================================

UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse() {}
UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdateParticipantMetadata_AttributesEntry_DoNotUse::MergeFrom(const UpdateParticipantMetadata_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdateParticipantMetadata_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[18]);
}

// ===================================================================

class UpdateParticipantMetadata::_Internal {
 public:
};

UpdateParticipantMetadata::UpdateParticipantMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UpdateParticipantMetadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateParticipantMetadata)
}
UpdateParticipantMetadata::UpdateParticipantMetadata(const UpdateParticipantMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateParticipantMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateParticipantMetadata)
}

inline void UpdateParticipantMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.request_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateParticipantMetadata::~UpdateParticipantMetadata() {
  // @@protoc_insertion_point(destructor:livekit.UpdateParticipantMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UpdateParticipantMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.metadata_.Destroy();
  _impl_.name_.Destroy();
}

void UpdateParticipantMetadata::ArenaDtor(void* object) {
  UpdateParticipantMetadata* _this = reinterpret_cast< UpdateParticipantMetadata* >(object);
  _this->_impl_.attributes_.Destruct();
}
void UpdateParticipantMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateParticipantMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateParticipantMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.metadata_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.request_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateParticipantMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateParticipantMetadata.metadata"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateParticipantMetadata.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateParticipantMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateParticipantMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string metadata = 1;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateParticipantMetadata.metadata");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metadata(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateParticipantMetadata.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, string> attributes = 3;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = UpdateParticipantMetadata_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.UpdateParticipantMetadata.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.UpdateParticipantMetadata.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // uint32 request_id = 4;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateParticipantMetadata)
  return target;
}

size_t UpdateParticipantMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateParticipantMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += UpdateParticipantMetadata_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string metadata = 1;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 request_id = 4;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateParticipantMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateParticipantMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateParticipantMetadata::GetClassData() const { return &_class_data_; }


void UpdateParticipantMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateParticipantMetadata*>(&to_msg);
  auto& from = static_cast<const UpdateParticipantMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateParticipantMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateParticipantMetadata::CopyFrom(const UpdateParticipantMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateParticipantMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateParticipantMetadata::IsInitialized() const {
  return true;
}

void UpdateParticipantMetadata::InternalSwap(UpdateParticipantMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateParticipantMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[19]);
}

// ===================================================================

class ICEServer::_Internal {
 public:
};

ICEServer::ICEServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ICEServer)
}
ICEServer::ICEServer(const ICEServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ICEServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.urls_){from._impl_.urls_}
    , decltype(_impl_.username_){}
    , decltype(_impl_.credential_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.credential_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credential_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_credential().empty()) {
    _this->_impl_.credential_.Set(from._internal_credential(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ICEServer)
}

inline void ICEServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.urls_){arena}
    , decltype(_impl_.username_){}
    , decltype(_impl_.credential_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.credential_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credential_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ICEServer::~ICEServer() {
  // @@protoc_insertion_point(destructor:livekit.ICEServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ICEServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.urls_.~RepeatedPtrField();
  _impl_.username_.Destroy();
  _impl_.credential_.Destroy();
}

void ICEServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ICEServer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ICEServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.urls_.Clear();
  _impl_.username_.ClearToEmpty();
  _impl_.credential_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICEServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ICEServer.urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ICEServer.username"));
        } else
          goto handle_unusual;
        continue;
      // string credential = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_credential();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ICEServer.credential"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ICEServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ICEServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ICEServer.urls");
    target = stream->WriteString(1, s, target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ICEServer.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string credential = 3;
  if (!this->_internal_credential().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential().data(), static_cast<int>(this->_internal_credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ICEServer.credential");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_credential(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ICEServer)
  return target;
}

size_t ICEServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ICEServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.urls_.size());
  for (int i = 0, n = _impl_.urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.urls_.Get(i));
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string credential = 3;
  if (!this->_internal_credential().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ICEServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ICEServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ICEServer::GetClassData() const { return &_class_data_; }


void ICEServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ICEServer*>(&to_msg);
  auto& from = static_cast<const ICEServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ICEServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.urls_.MergeFrom(from._impl_.urls_);
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_credential().empty()) {
    _this->_internal_set_credential(from._internal_credential());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ICEServer::CopyFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ICEServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICEServer::IsInitialized() const {
  return true;
}

void ICEServer::InternalSwap(ICEServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.urls_.InternalSwap(&other->_impl_.urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.credential_, lhs_arena,
      &other->_impl_.credential_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ICEServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[20]);
}

// ===================================================================

class SpeakersChanged::_Internal {
 public:
};

void SpeakersChanged::clear_speakers() {
  _impl_.speakers_.Clear();
}
SpeakersChanged::SpeakersChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SpeakersChanged)
}
SpeakersChanged::SpeakersChanged(const SpeakersChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpeakersChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speakers_){from._impl_.speakers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.SpeakersChanged)
}

inline void SpeakersChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speakers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpeakersChanged::~SpeakersChanged() {
  // @@protoc_insertion_point(destructor:livekit.SpeakersChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeakersChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speakers_.~RepeatedPtrField();
}

void SpeakersChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeakersChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SpeakersChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speakers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeakersChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.SpeakerInfo speakers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speakers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeakersChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SpeakersChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speakers_size()); i < n; i++) {
    const auto& repfield = this->_internal_speakers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SpeakersChanged)
  return target;
}

size_t SpeakersChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SpeakersChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  total_size += 1UL * this->_internal_speakers_size();
  for (const auto& msg : this->_impl_.speakers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeakersChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpeakersChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeakersChanged::GetClassData() const { return &_class_data_; }


void SpeakersChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpeakersChanged*>(&to_msg);
  auto& from = static_cast<const SpeakersChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SpeakersChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.speakers_.MergeFrom(from._impl_.speakers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakersChanged::CopyFrom(const SpeakersChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SpeakersChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakersChanged::IsInitialized() const {
  return true;
}

void SpeakersChanged::InternalSwap(SpeakersChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speakers_.InternalSwap(&other->_impl_.speakers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeakersChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[21]);
}

// ===================================================================

class RoomUpdate::_Internal {
 public:
  static const ::livekit::Room& room(const RoomUpdate* msg);
};

const ::livekit::Room&
RoomUpdate::_Internal::room(const RoomUpdate* msg) {
  return *msg->_impl_.room_;
}
void RoomUpdate::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
RoomUpdate::RoomUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomUpdate)
}
RoomUpdate::RoomUpdate(const RoomUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::Room(*from._impl_.room_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RoomUpdate)
}

inline void RoomUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomUpdate::~RoomUpdate() {
  // @@protoc_insertion_point(destructor:livekit.RoomUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.room_;
}

void RoomUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomUpdate)
  return target;
}

size_t RoomUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.Room room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomUpdate::GetClassData() const { return &_class_data_; }


void RoomUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomUpdate*>(&to_msg);
  auto& from = static_cast<const RoomUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::livekit::Room::MergeFrom(
        from._internal_room());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomUpdate::CopyFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUpdate::IsInitialized() const {
  return true;
}

void RoomUpdate::InternalSwap(RoomUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.room_, other->_impl_.room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[22]);
}

// ===================================================================

class ConnectionQualityInfo::_Internal {
 public:
};

ConnectionQualityInfo::ConnectionQualityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ConnectionQualityInfo)
}
ConnectionQualityInfo::ConnectionQualityInfo(const ConnectionQualityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionQualityInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_sid_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    _this->_impl_.participant_sid_.Set(from._internal_participant_sid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:livekit.ConnectionQualityInfo)
}

inline void ConnectionQualityInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_sid_){}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionQualityInfo::~ConnectionQualityInfo() {
  // @@protoc_insertion_point(destructor:livekit.ConnectionQualityInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionQualityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_sid_.Destroy();
}

void ConnectionQualityInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionQualityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ConnectionQualityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_sid_.ClearToEmpty();
  ::memset(&_impl_.quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionQualityInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ConnectionQualityInfo.participant_sid"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ConnectionQuality quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::ConnectionQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionQualityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ConnectionQualityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ConnectionQualityInfo.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // .livekit.ConnectionQuality quality = 2;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_quality(), target);
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ConnectionQualityInfo)
  return target;
}

size_t ConnectionQualityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ConnectionQualityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // .livekit.ConnectionQuality quality = 2;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionQualityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionQualityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionQualityInfo::GetClassData() const { return &_class_data_; }


void ConnectionQualityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionQualityInfo*>(&to_msg);
  auto& from = static_cast<const ConnectionQualityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ConnectionQualityInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_sid().empty()) {
    _this->_internal_set_participant_sid(from._internal_participant_sid());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityInfo::CopyFrom(const ConnectionQualityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ConnectionQualityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionQualityInfo::IsInitialized() const {
  return true;
}

void ConnectionQualityInfo::InternalSwap(ConnectionQualityInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_sid_, lhs_arena,
      &other->_impl_.participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.score_)
      + sizeof(ConnectionQualityInfo::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionQualityInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[23]);
}

// ===================================================================

class ConnectionQualityUpdate::_Internal {
 public:
};

ConnectionQualityUpdate::ConnectionQualityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ConnectionQualityUpdate)
}
ConnectionQualityUpdate::ConnectionQualityUpdate(const ConnectionQualityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionQualityUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){from._impl_.updates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ConnectionQualityUpdate)
}

inline void ConnectionQualityUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectionQualityUpdate::~ConnectionQualityUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ConnectionQualityUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionQualityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updates_.~RepeatedPtrField();
}

void ConnectionQualityUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionQualityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ConnectionQualityUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionQualityUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.ConnectionQualityInfo updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionQualityUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ConnectionQualityUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.ConnectionQualityInfo updates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ConnectionQualityUpdate)
  return target;
}

size_t ConnectionQualityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ConnectionQualityUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ConnectionQualityInfo updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->_impl_.updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionQualityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionQualityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionQualityUpdate::GetClassData() const { return &_class_data_; }


void ConnectionQualityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionQualityUpdate*>(&to_msg);
  auto& from = static_cast<const ConnectionQualityUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ConnectionQualityUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.updates_.MergeFrom(from._impl_.updates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityUpdate::CopyFrom(const ConnectionQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ConnectionQualityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionQualityUpdate::IsInitialized() const {
  return true;
}

void ConnectionQualityUpdate::InternalSwap(ConnectionQualityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionQualityUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[24]);
}

// ===================================================================

class StreamStateInfo::_Internal {
 public:
};

StreamStateInfo::StreamStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamStateInfo)
}
StreamStateInfo::StreamStateInfo(const StreamStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamStateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_sid_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    _this->_impl_.participant_sid_.Set(from._internal_participant_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:livekit.StreamStateInfo)
}

inline void StreamStateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_sid_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamStateInfo::~StreamStateInfo() {
  // @@protoc_insertion_point(destructor:livekit.StreamStateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_sid_.Destroy();
  _impl_.track_sid_.Destroy();
}

void StreamStateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamStateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_sid_.ClearToEmpty();
  _impl_.track_sid_.ClearToEmpty();
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.StreamStateInfo.participant_sid"));
        } else
          goto handle_unusual;
        continue;
      // string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.StreamStateInfo.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.StreamState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::livekit::StreamState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamStateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamStateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamStateInfo.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.StreamStateInfo.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // .livekit.StreamState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamStateInfo)
  return target;
}

size_t StreamStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamStateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // .livekit.StreamState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamStateInfo::GetClassData() const { return &_class_data_; }


void StreamStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamStateInfo*>(&to_msg);
  auto& from = static_cast<const StreamStateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamStateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_sid().empty()) {
    _this->_internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStateInfo::CopyFrom(const StreamStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateInfo::IsInitialized() const {
  return true;
}

void StreamStateInfo::InternalSwap(StreamStateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_sid_, lhs_arena,
      &other->_impl_.participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[25]);
}

// ===================================================================

class StreamStateUpdate::_Internal {
 public:
};

StreamStateUpdate::StreamStateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamStateUpdate)
}
StreamStateUpdate::StreamStateUpdate(const StreamStateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamStateUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_states_){from._impl_.stream_states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.StreamStateUpdate)
}

inline void StreamStateUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamStateUpdate::~StreamStateUpdate() {
  // @@protoc_insertion_point(destructor:livekit.StreamStateUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamStateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_states_.~RepeatedPtrField();
}

void StreamStateUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamStateUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStateUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.StreamStateInfo stream_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamStateUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamStateUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.StreamStateInfo stream_states = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamStateUpdate)
  return target;
}

size_t StreamStateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.StreamStateUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.StreamStateInfo stream_states = 1;
  total_size += 1UL * this->_internal_stream_states_size();
  for (const auto& msg : this->_impl_.stream_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamStateUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamStateUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamStateUpdate::GetClassData() const { return &_class_data_; }


void StreamStateUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamStateUpdate*>(&to_msg);
  auto& from = static_cast<const StreamStateUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamStateUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_states_.MergeFrom(from._impl_.stream_states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStateUpdate::CopyFrom(const StreamStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateUpdate::IsInitialized() const {
  return true;
}

void StreamStateUpdate::InternalSwap(StreamStateUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_states_.InternalSwap(&other->_impl_.stream_states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[26]);
}

// ===================================================================

class SubscribedQuality::_Internal {
 public:
};

SubscribedQuality::SubscribedQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedQuality)
}
SubscribedQuality::SubscribedQuality(const SubscribedQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribedQuality* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){}
    , decltype(_impl_.enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedQuality)
}

inline void SubscribedQuality::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){0}
    , decltype(_impl_.enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribedQuality::~SubscribedQuality() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedQuality)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribedQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribedQuality::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribedQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedQuality)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enabled_) -
      reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedQuality::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.VideoQuality quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::livekit::VideoQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedQuality::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedQuality)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_quality(), target);
  }

  // bool enabled = 2;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedQuality)
  return target;
}

size_t SubscribedQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedQuality)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // bool enabled = 2;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedQuality::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribedQuality::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedQuality::GetClassData() const { return &_class_data_; }


void SubscribedQuality::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribedQuality*>(&to_msg);
  auto& from = static_cast<const SubscribedQuality&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedQuality)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedQuality::CopyFrom(const SubscribedQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedQuality::IsInitialized() const {
  return true;
}

void SubscribedQuality::InternalSwap(SubscribedQuality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.enabled_)
      + sizeof(SubscribedQuality::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedQuality::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[27]);
}

// ===================================================================

class SubscribedCodec::_Internal {
 public:
};

SubscribedCodec::SubscribedCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedCodec)
}
SubscribedCodec::SubscribedCodec(const SubscribedCodec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribedCodec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qualities_){from._impl_.qualities_}
    , decltype(_impl_.codec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    _this->_impl_.codec_.Set(from._internal_codec(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedCodec)
}

inline void SubscribedCodec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qualities_){arena}
    , decltype(_impl_.codec_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribedCodec::~SubscribedCodec() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedCodec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribedCodec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qualities_.~RepeatedPtrField();
  _impl_.codec_.Destroy();
}

void SubscribedCodec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribedCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedCodec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qualities_.Clear();
  _impl_.codec_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedCodec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SubscribedCodec.codec"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SubscribedQuality qualities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qualities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedCodec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedCodec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscribedCodec.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // repeated .livekit.SubscribedQuality qualities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qualities_size()); i < n; i++) {
    const auto& repfield = this->_internal_qualities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedCodec)
  return target;
}

size_t SubscribedCodec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedCodec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SubscribedQuality qualities = 2;
  total_size += 1UL * this->_internal_qualities_size();
  for (const auto& msg : this->_impl_.qualities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedCodec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribedCodec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedCodec::GetClassData() const { return &_class_data_; }


void SubscribedCodec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribedCodec*>(&to_msg);
  auto& from = static_cast<const SubscribedCodec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedCodec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qualities_.MergeFrom(from._impl_.qualities_);
  if (!from._internal_codec().empty()) {
    _this->_internal_set_codec(from._internal_codec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedCodec::CopyFrom(const SubscribedCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedCodec::IsInitialized() const {
  return true;
}

void SubscribedCodec::InternalSwap(SubscribedCodec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qualities_.InternalSwap(&other->_impl_.qualities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codec_, lhs_arena,
      &other->_impl_.codec_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedCodec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[28]);
}

// ===================================================================

class SubscribedQualityUpdate::_Internal {
 public:
};

SubscribedQualityUpdate::SubscribedQualityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedQualityUpdate)
}
SubscribedQualityUpdate::SubscribedQualityUpdate(const SubscribedQualityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribedQualityUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribed_qualities_){from._impl_.subscribed_qualities_}
    , decltype(_impl_.subscribed_codecs_){from._impl_.subscribed_codecs_}
    , decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedQualityUpdate)
}

inline void SubscribedQualityUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribed_qualities_){arena}
    , decltype(_impl_.subscribed_codecs_){arena}
    , decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribedQualityUpdate::~SubscribedQualityUpdate() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedQualityUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribedQualityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscribed_qualities_.~RepeatedPtrField();
  _impl_.subscribed_codecs_.~RepeatedPtrField();
  _impl_.track_sid_.Destroy();
}

void SubscribedQualityUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribedQualityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedQualityUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscribed_qualities_.Clear();
  _impl_.subscribed_codecs_.Clear();
  _impl_.track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedQualityUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SubscribedQualityUpdate.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribed_qualities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribed_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedQualityUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedQualityUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscribedQualityUpdate.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscribed_qualities_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscribed_qualities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscribed_codecs_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscribed_codecs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedQualityUpdate)
  return target;
}

size_t SubscribedQualityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedQualityUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
  total_size += 1UL * this->_internal_subscribed_qualities_size();
  for (const auto& msg : this->_impl_.subscribed_qualities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
  total_size += 1UL * this->_internal_subscribed_codecs_size();
  for (const auto& msg : this->_impl_.subscribed_codecs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedQualityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribedQualityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedQualityUpdate::GetClassData() const { return &_class_data_; }


void SubscribedQualityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribedQualityUpdate*>(&to_msg);
  auto& from = static_cast<const SubscribedQualityUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedQualityUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subscribed_qualities_.MergeFrom(from._impl_.subscribed_qualities_);
  _this->_impl_.subscribed_codecs_.MergeFrom(from._impl_.subscribed_codecs_);
  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedQualityUpdate::CopyFrom(const SubscribedQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedQualityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedQualityUpdate::IsInitialized() const {
  return true;
}

void SubscribedQualityUpdate::InternalSwap(SubscribedQualityUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subscribed_qualities_.InternalSwap(&other->_impl_.subscribed_qualities_);
  _impl_.subscribed_codecs_.InternalSwap(&other->_impl_.subscribed_codecs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedQualityUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[29]);
}

// ===================================================================

class TrackPermission::_Internal {
 public:
};

TrackPermission::TrackPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackPermission)
}
TrackPermission::TrackPermission(const TrackPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){from._impl_.track_sids_}
    , decltype(_impl_.participant_sid_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.all_tracks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    _this->_impl_.participant_sid_.Set(from._internal_participant_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_identity().empty()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.all_tracks_ = from._impl_.all_tracks_;
  // @@protoc_insertion_point(copy_constructor:livekit.TrackPermission)
}

inline void TrackPermission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){arena}
    , decltype(_impl_.participant_sid_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.all_tracks_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackPermission::~TrackPermission() {
  // @@protoc_insertion_point(destructor:livekit.TrackPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sids_.~RepeatedPtrField();
  _impl_.participant_sid_.Destroy();
  _impl_.participant_identity_.Destroy();
}

void TrackPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  _impl_.participant_sid_.ClearToEmpty();
  _impl_.participant_identity_.ClearToEmpty();
  _impl_.all_tracks_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackPermission.participant_sid"));
        } else
          goto handle_unusual;
        continue;
      // bool all_tracks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.all_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string track_sids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackPermission.track_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string participant_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackPermission.participant_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPermission.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // bool all_tracks = 2;
  if (this->_internal_all_tracks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_all_tracks(), target);
  }

  // repeated string track_sids = 3;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPermission.track_sids");
    target = stream->WriteString(3, s, target);
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackPermission.participant_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackPermission)
  return target;
}

size_t TrackPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.track_sids_.size());
  for (int i = 0, n = _impl_.track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.track_sids_.Get(i));
  }

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // string participant_identity = 4;
  if (!this->_internal_participant_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }

  // bool all_tracks = 2;
  if (this->_internal_all_tracks() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPermission::GetClassData() const { return &_class_data_; }


void TrackPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackPermission*>(&to_msg);
  auto& from = static_cast<const TrackPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackPermission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.track_sids_.MergeFrom(from._impl_.track_sids_);
  if (!from._internal_participant_sid().empty()) {
    _this->_internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_participant_identity().empty()) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_all_tracks() != 0) {
    _this->_internal_set_all_tracks(from._internal_all_tracks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPermission::CopyFrom(const TrackPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPermission::IsInitialized() const {
  return true;
}

void TrackPermission::InternalSwap(TrackPermission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_sid_, lhs_arena,
      &other->_impl_.participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.all_tracks_, other->_impl_.all_tracks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[30]);
}

// ===================================================================

class SubscriptionPermission::_Internal {
 public:
};

SubscriptionPermission::SubscriptionPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionPermission)
}
SubscriptionPermission::SubscriptionPermission(const SubscriptionPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_permissions_){from._impl_.track_permissions_}
    , decltype(_impl_.all_participants_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.all_participants_ = from._impl_.all_participants_;
  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionPermission)
}

inline void SubscriptionPermission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_permissions_){arena}
    , decltype(_impl_.all_participants_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscriptionPermission::~SubscriptionPermission() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_permissions_.~RepeatedPtrField();
}

void SubscriptionPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_permissions_.Clear();
  _impl_.all_participants_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all_participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.all_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackPermission track_permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all_participants = 1;
  if (this->_internal_all_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_participants(), target);
  }

  // repeated .livekit.TrackPermission track_permissions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_track_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_track_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionPermission)
  return target;
}

size_t SubscriptionPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackPermission track_permissions = 2;
  total_size += 1UL * this->_internal_track_permissions_size();
  for (const auto& msg : this->_impl_.track_permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool all_participants = 1;
  if (this->_internal_all_participants() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionPermission::GetClassData() const { return &_class_data_; }


void SubscriptionPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionPermission*>(&to_msg);
  auto& from = static_cast<const SubscriptionPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionPermission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.track_permissions_.MergeFrom(from._impl_.track_permissions_);
  if (from._internal_all_participants() != 0) {
    _this->_internal_set_all_participants(from._internal_all_participants());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionPermission::CopyFrom(const SubscriptionPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionPermission::IsInitialized() const {
  return true;
}

void SubscriptionPermission::InternalSwap(SubscriptionPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.track_permissions_.InternalSwap(&other->_impl_.track_permissions_);
  swap(_impl_.all_participants_, other->_impl_.all_participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[31]);
}

// ===================================================================

class SubscriptionPermissionUpdate::_Internal {
 public:
};

SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionPermissionUpdate)
}
SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(const SubscriptionPermissionUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionPermissionUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_sid_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.allowed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participant_sid().empty()) {
    _this->_impl_.participant_sid_.Set(from._internal_participant_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.allowed_ = from._impl_.allowed_;
  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionPermissionUpdate)
}

inline void SubscriptionPermissionUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_sid_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.allowed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.participant_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionPermissionUpdate::~SubscriptionPermissionUpdate() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionPermissionUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionPermissionUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_sid_.Destroy();
  _impl_.track_sid_.Destroy();
}

void SubscriptionPermissionUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionPermissionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionPermissionUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_sid_.ClearToEmpty();
  _impl_.track_sid_.ClearToEmpty();
  _impl_.allowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionPermissionUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participant_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SubscriptionPermissionUpdate.participant_sid"));
        } else
          goto handle_unusual;
        continue;
      // string track_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SubscriptionPermissionUpdate.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // bool allowed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionPermissionUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionPermissionUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participant_sid().data(), static_cast<int>(this->_internal_participant_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscriptionPermissionUpdate.participant_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_sid(), target);
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscriptionPermissionUpdate.track_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_track_sid(), target);
  }

  // bool allowed = 3;
  if (this->_internal_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionPermissionUpdate)
  return target;
}

size_t SubscriptionPermissionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionPermissionUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participant_sid = 1;
  if (!this->_internal_participant_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_sid());
  }

  // string track_sid = 2;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // bool allowed = 3;
  if (this->_internal_allowed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionPermissionUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionPermissionUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionPermissionUpdate::GetClassData() const { return &_class_data_; }


void SubscriptionPermissionUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionPermissionUpdate*>(&to_msg);
  auto& from = static_cast<const SubscriptionPermissionUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionPermissionUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participant_sid().empty()) {
    _this->_internal_set_participant_sid(from._internal_participant_sid());
  }
  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_allowed() != 0) {
    _this->_internal_set_allowed(from._internal_allowed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionPermissionUpdate::CopyFrom(const SubscriptionPermissionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionPermissionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionPermissionUpdate::IsInitialized() const {
  return true;
}

void SubscriptionPermissionUpdate::InternalSwap(SubscriptionPermissionUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_sid_, lhs_arena,
      &other->_impl_.participant_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  swap(_impl_.allowed_, other->_impl_.allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionPermissionUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[32]);
}

// ===================================================================

class SyncState::_Internal {
 public:
  static const ::livekit::SessionDescription& answer(const SyncState* msg);
  static const ::livekit::UpdateSubscription& subscription(const SyncState* msg);
  static const ::livekit::SessionDescription& offer(const SyncState* msg);
};

const ::livekit::SessionDescription&
SyncState::_Internal::answer(const SyncState* msg) {
  return *msg->_impl_.answer_;
}
const ::livekit::UpdateSubscription&
SyncState::_Internal::subscription(const SyncState* msg) {
  return *msg->_impl_.subscription_;
}
const ::livekit::SessionDescription&
SyncState::_Internal::offer(const SyncState* msg) {
  return *msg->_impl_.offer_;
}
SyncState::SyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SyncState)
}
SyncState::SyncState(const SyncState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publish_tracks_){from._impl_.publish_tracks_}
    , decltype(_impl_.data_channels_){from._impl_.data_channels_}
    , decltype(_impl_.track_sids_disabled_){from._impl_.track_sids_disabled_}
    , decltype(_impl_.answer_){nullptr}
    , decltype(_impl_.subscription_){nullptr}
    , decltype(_impl_.offer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_answer()) {
    _this->_impl_.answer_ = new ::livekit::SessionDescription(*from._impl_.answer_);
  }
  if (from._internal_has_subscription()) {
    _this->_impl_.subscription_ = new ::livekit::UpdateSubscription(*from._impl_.subscription_);
  }
  if (from._internal_has_offer()) {
    _this->_impl_.offer_ = new ::livekit::SessionDescription(*from._impl_.offer_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SyncState)
}

inline void SyncState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publish_tracks_){arena}
    , decltype(_impl_.data_channels_){arena}
    , decltype(_impl_.track_sids_disabled_){arena}
    , decltype(_impl_.answer_){nullptr}
    , decltype(_impl_.subscription_){nullptr}
    , decltype(_impl_.offer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncState::~SyncState() {
  // @@protoc_insertion_point(destructor:livekit.SyncState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publish_tracks_.~RepeatedPtrField();
  _impl_.data_channels_.~RepeatedPtrField();
  _impl_.track_sids_disabled_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.answer_;
  if (this != internal_default_instance()) delete _impl_.subscription_;
  if (this != internal_default_instance()) delete _impl_.offer_;
}

void SyncState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SyncState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publish_tracks_.Clear();
  _impl_.data_channels_.Clear();
  _impl_.track_sids_disabled_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.answer_ != nullptr) {
    delete _impl_.answer_;
  }
  _impl_.answer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscription_ != nullptr) {
    delete _impl_.subscription_;
  }
  _impl_.subscription_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offer_ != nullptr) {
    delete _impl_.offer_;
  }
  _impl_.offer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.SessionDescription answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.UpdateSubscription subscription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publish_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.DataChannelInfo data_channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SessionDescription offer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string track_sids_disabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids_disabled();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SyncState.track_sids_disabled"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SyncState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.SessionDescription answer = 1;
  if (this->_internal_has_answer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::answer(this),
        _Internal::answer(this).GetCachedSize(), target, stream);
  }

  // .livekit.UpdateSubscription subscription = 2;
  if (this->_internal_has_subscription()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscription(this),
        _Internal::subscription(this).GetCachedSize(), target, stream);
  }

  // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publish_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_publish_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.DataChannelInfo data_channels = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .livekit.SessionDescription offer = 5;
  if (this->_internal_has_offer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::offer(this),
        _Internal::offer(this).GetCachedSize(), target, stream);
  }

  // repeated string track_sids_disabled = 6;
  for (int i = 0, n = this->_internal_track_sids_disabled_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids_disabled(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SyncState.track_sids_disabled");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SyncState)
  return target;
}

size_t SyncState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SyncState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
  total_size += 1UL * this->_internal_publish_tracks_size();
  for (const auto& msg : this->_impl_.publish_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.DataChannelInfo data_channels = 4;
  total_size += 1UL * this->_internal_data_channels_size();
  for (const auto& msg : this->_impl_.data_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string track_sids_disabled = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.track_sids_disabled_.size());
  for (int i = 0, n = _impl_.track_sids_disabled_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.track_sids_disabled_.Get(i));
  }

  // .livekit.SessionDescription answer = 1;
  if (this->_internal_has_answer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.answer_);
  }

  // .livekit.UpdateSubscription subscription = 2;
  if (this->_internal_has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscription_);
  }

  // .livekit.SessionDescription offer = 5;
  if (this->_internal_has_offer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offer_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncState::GetClassData() const { return &_class_data_; }


void SyncState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncState*>(&to_msg);
  auto& from = static_cast<const SyncState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SyncState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publish_tracks_.MergeFrom(from._impl_.publish_tracks_);
  _this->_impl_.data_channels_.MergeFrom(from._impl_.data_channels_);
  _this->_impl_.track_sids_disabled_.MergeFrom(from._impl_.track_sids_disabled_);
  if (from._internal_has_answer()) {
    _this->_internal_mutable_answer()->::livekit::SessionDescription::MergeFrom(
        from._internal_answer());
  }
  if (from._internal_has_subscription()) {
    _this->_internal_mutable_subscription()->::livekit::UpdateSubscription::MergeFrom(
        from._internal_subscription());
  }
  if (from._internal_has_offer()) {
    _this->_internal_mutable_offer()->::livekit::SessionDescription::MergeFrom(
        from._internal_offer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncState::CopyFrom(const SyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncState::IsInitialized() const {
  return true;
}

void SyncState::InternalSwap(SyncState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.publish_tracks_.InternalSwap(&other->_impl_.publish_tracks_);
  _impl_.data_channels_.InternalSwap(&other->_impl_.data_channels_);
  _impl_.track_sids_disabled_.InternalSwap(&other->_impl_.track_sids_disabled_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncState, _impl_.offer_)
      + sizeof(SyncState::_impl_.offer_)
      - PROTOBUF_FIELD_OFFSET(SyncState, _impl_.answer_)>(
          reinterpret_cast<char*>(&_impl_.answer_),
          reinterpret_cast<char*>(&other->_impl_.answer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[33]);
}

// ===================================================================

class DataChannelInfo::_Internal {
 public:
};

DataChannelInfo::DataChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DataChannelInfo)
}
DataChannelInfo::DataChannelInfo(const DataChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataChannelInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.label_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.target_));
  // @@protoc_insertion_point(copy_constructor:livekit.DataChannelInfo)
}

inline void DataChannelInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.target_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataChannelInfo::~DataChannelInfo() {
  // @@protoc_insertion_point(destructor:livekit.DataChannelInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_.Destroy();
}

void DataChannelInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataChannelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChannelInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DataChannelInfo.label"));
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.SignalTarget target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::livekit::SignalTarget>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChannelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataChannelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DataChannelInfo.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // .livekit.SignalTarget target = 3;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataChannelInfo)
  return target;
}

size_t DataChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DataChannelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .livekit.SignalTarget target = 3;
  if (this->_internal_target() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChannelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataChannelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChannelInfo::GetClassData() const { return &_class_data_; }


void DataChannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataChannelInfo*>(&to_msg);
  auto& from = static_cast<const DataChannelInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataChannelInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChannelInfo::CopyFrom(const DataChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChannelInfo::IsInitialized() const {
  return true;
}

void DataChannelInfo::InternalSwap(DataChannelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.target_)
      + sizeof(DataChannelInfo::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChannelInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[34]);
}

// ===================================================================

class SimulateScenario::_Internal {
 public:
};

SimulateScenario::SimulateScenario(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulateScenario)
}
SimulateScenario::SimulateScenario(const SimulateScenario& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulateScenario* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scenario_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_scenario();
  switch (from.scenario_case()) {
    case kSpeakerUpdate: {
      _this->_internal_set_speaker_update(from._internal_speaker_update());
      break;
    }
    case kNodeFailure: {
      _this->_internal_set_node_failure(from._internal_node_failure());
      break;
    }
    case kMigration: {
      _this->_internal_set_migration(from._internal_migration());
      break;
    }
    case kServerLeave: {
      _this->_internal_set_server_leave(from._internal_server_leave());
      break;
    }
    case kSwitchCandidateProtocol: {
      _this->_internal_set_switch_candidate_protocol(from._internal_switch_candidate_protocol());
      break;
    }
    case kSubscriberBandwidth: {
      _this->_internal_set_subscriber_bandwidth(from._internal_subscriber_bandwidth());
      break;
    }
    case kDisconnectSignalOnResume: {
      _this->_internal_set_disconnect_signal_on_resume(from._internal_disconnect_signal_on_resume());
      break;
    }
    case kDisconnectSignalOnResumeNoMessages: {
      _this->_internal_set_disconnect_signal_on_resume_no_messages(from._internal_disconnect_signal_on_resume_no_messages());
      break;
    }
    case kLeaveRequestFullReconnect: {
      _this->_internal_set_leave_request_full_reconnect(from._internal_leave_request_full_reconnect());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:livekit.SimulateScenario)
}

inline void SimulateScenario::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scenario_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_scenario();
}

SimulateScenario::~SimulateScenario() {
  // @@protoc_insertion_point(destructor:livekit.SimulateScenario)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulateScenario::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_scenario()) {
    clear_scenario();
  }
}

void SimulateScenario::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulateScenario::clear_scenario() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SimulateScenario)
  switch (scenario_case()) {
    case kSpeakerUpdate: {
      // No need to clear
      break;
    }
    case kNodeFailure: {
      // No need to clear
      break;
    }
    case kMigration: {
      // No need to clear
      break;
    }
    case kServerLeave: {
      // No need to clear
      break;
    }
    case kSwitchCandidateProtocol: {
      // No need to clear
      break;
    }
    case kSubscriberBandwidth: {
      // No need to clear
      break;
    }
    case kDisconnectSignalOnResume: {
      // No need to clear
      break;
    }
    case kDisconnectSignalOnResumeNoMessages: {
      // No need to clear
      break;
    }
    case kLeaveRequestFullReconnect: {
      // No need to clear
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SCENARIO_NOT_SET;
}


void SimulateScenario::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulateScenario)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_scenario();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulateScenario::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 speaker_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_speaker_update(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool node_failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_node_failure(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool migration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_migration(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool server_leave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_server_leave(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.CandidateProtocol switch_candidate_protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_switch_candidate_protocol(static_cast<::livekit::CandidateProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 subscriber_bandwidth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_subscriber_bandwidth(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disconnect_signal_on_resume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_disconnect_signal_on_resume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disconnect_signal_on_resume_no_messages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_disconnect_signal_on_resume_no_messages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool leave_request_full_reconnect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_leave_request_full_reconnect(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulateScenario::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulateScenario)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 speaker_update = 1;
  if (_internal_has_speaker_update()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_speaker_update(), target);
  }

  // bool node_failure = 2;
  if (_internal_has_node_failure()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_node_failure(), target);
  }

  // bool migration = 3;
  if (_internal_has_migration()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_migration(), target);
  }

  // bool server_leave = 4;
  if (_internal_has_server_leave()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_server_leave(), target);
  }

  // .livekit.CandidateProtocol switch_candidate_protocol = 5;
  if (_internal_has_switch_candidate_protocol()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_switch_candidate_protocol(), target);
  }

  // int64 subscriber_bandwidth = 6;
  if (_internal_has_subscriber_bandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_subscriber_bandwidth(), target);
  }

  // bool disconnect_signal_on_resume = 7;
  if (_internal_has_disconnect_signal_on_resume()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_disconnect_signal_on_resume(), target);
  }

  // bool disconnect_signal_on_resume_no_messages = 8;
  if (_internal_has_disconnect_signal_on_resume_no_messages()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_disconnect_signal_on_resume_no_messages(), target);
  }

  // bool leave_request_full_reconnect = 9;
  if (_internal_has_leave_request_full_reconnect()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_leave_request_full_reconnect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulateScenario)
  return target;
}

size_t SimulateScenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SimulateScenario)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (scenario_case()) {
    // int32 speaker_update = 1;
    case kSpeakerUpdate: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speaker_update());
      break;
    }
    // bool node_failure = 2;
    case kNodeFailure: {
      total_size += 1 + 1;
      break;
    }
    // bool migration = 3;
    case kMigration: {
      total_size += 1 + 1;
      break;
    }
    // bool server_leave = 4;
    case kServerLeave: {
      total_size += 1 + 1;
      break;
    }
    // .livekit.CandidateProtocol switch_candidate_protocol = 5;
    case kSwitchCandidateProtocol: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_switch_candidate_protocol());
      break;
    }
    // int64 subscriber_bandwidth = 6;
    case kSubscriberBandwidth: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_subscriber_bandwidth());
      break;
    }
    // bool disconnect_signal_on_resume = 7;
    case kDisconnectSignalOnResume: {
      total_size += 1 + 1;
      break;
    }
    // bool disconnect_signal_on_resume_no_messages = 8;
    case kDisconnectSignalOnResumeNoMessages: {
      total_size += 1 + 1;
      break;
    }
    // bool leave_request_full_reconnect = 9;
    case kLeaveRequestFullReconnect: {
      total_size += 1 + 1;
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulateScenario::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulateScenario::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulateScenario::GetClassData() const { return &_class_data_; }


void SimulateScenario::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulateScenario*>(&to_msg);
  auto& from = static_cast<const SimulateScenario&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulateScenario)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.scenario_case()) {
    case kSpeakerUpdate: {
      _this->_internal_set_speaker_update(from._internal_speaker_update());
      break;
    }
    case kNodeFailure: {
      _this->_internal_set_node_failure(from._internal_node_failure());
      break;
    }
    case kMigration: {
      _this->_internal_set_migration(from._internal_migration());
      break;
    }
    case kServerLeave: {
      _this->_internal_set_server_leave(from._internal_server_leave());
      break;
    }
    case kSwitchCandidateProtocol: {
      _this->_internal_set_switch_candidate_protocol(from._internal_switch_candidate_protocol());
      break;
    }
    case kSubscriberBandwidth: {
      _this->_internal_set_subscriber_bandwidth(from._internal_subscriber_bandwidth());
      break;
    }
    case kDisconnectSignalOnResume: {
      _this->_internal_set_disconnect_signal_on_resume(from._internal_disconnect_signal_on_resume());
      break;
    }
    case kDisconnectSignalOnResumeNoMessages: {
      _this->_internal_set_disconnect_signal_on_resume_no_messages(from._internal_disconnect_signal_on_resume_no_messages());
      break;
    }
    case kLeaveRequestFullReconnect: {
      _this->_internal_set_leave_request_full_reconnect(from._internal_leave_request_full_reconnect());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulateScenario::CopyFrom(const SimulateScenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulateScenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulateScenario::IsInitialized() const {
  return true;
}

void SimulateScenario::InternalSwap(SimulateScenario* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.scenario_, other->_impl_.scenario_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulateScenario::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[35]);
}

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.rtt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rtt_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.rtt_));
  // @@protoc_insertion_point(copy_constructor:livekit.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.rtt_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:livekit.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rtt_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.rtt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rtt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 rtt = 2;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_rtt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 rtt = 2;
  if (this->_internal_rtt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rtt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_rtt() != 0) {
    _this->_internal_set_rtt(from._internal_rtt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, _impl_.rtt_)
      + sizeof(Ping::_impl_.rtt_)
      - PROTOBUF_FIELD_OFFSET(Ping, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[36]);
}

// ===================================================================

class Pong::_Internal {
 public:
};

Pong::Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pong* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_ping_timestamp_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_ping_timestamp_, &from._impl_.last_ping_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.last_ping_timestamp_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:livekit.Pong)
}

inline void Pong::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_ping_timestamp_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:livekit.Pong)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pong::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Pong)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.last_ping_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.last_ping_timestamp_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pong::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_ping_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_ping_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pong::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Pong)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_ping_timestamp = 1;
  if (this->_internal_last_ping_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_ping_timestamp(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.Pong)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 last_ping_timestamp = 1;
  if (this->_internal_last_ping_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_ping_timestamp());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pong::GetClassData() const { return &_class_data_; }


void Pong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pong*>(&to_msg);
  auto& from = static_cast<const Pong&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Pong)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_last_ping_timestamp() != 0) {
    _this->_internal_set_last_ping_timestamp(from._internal_last_ping_timestamp());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pong, _impl_.timestamp_)
      + sizeof(Pong::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Pong, _impl_.last_ping_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.last_ping_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.last_ping_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pong::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[37]);
}

// ===================================================================

class RegionSettings::_Internal {
 public:
};

RegionSettings::RegionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RegionSettings)
}
RegionSettings::RegionSettings(const RegionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){from._impl_.regions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.RegionSettings)
}

inline void RegionSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegionSettings::~RegionSettings() {
  // @@protoc_insertion_point(destructor:livekit.RegionSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regions_.~RepeatedPtrField();
}

void RegionSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RegionSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.RegionInfo regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RegionSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.RegionInfo regions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RegionSettings)
  return target;
}

size_t RegionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RegionSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.RegionInfo regions = 1;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->_impl_.regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionSettings::GetClassData() const { return &_class_data_; }


void RegionSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionSettings*>(&to_msg);
  auto& from = static_cast<const RegionSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RegionSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regions_.MergeFrom(from._impl_.regions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionSettings::CopyFrom(const RegionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RegionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSettings::IsInitialized() const {
  return true;
}

void RegionSettings::InternalSwap(RegionSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[38]);
}

// ===================================================================

class RegionInfo::_Internal {
 public:
};

RegionInfo::RegionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:livekit.RegionInfo)
}

inline void RegionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.distance_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:livekit.RegionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
  _impl_.url_.Destroy();
}

void RegionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RegionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.distance_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RegionInfo.region"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RegionInfo.url"));
        } else
          goto handle_unusual;
        continue;
      // int64 distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RegionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RegionInfo.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RegionInfo.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // int64 distance = 3;
  if (this->_internal_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RegionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int64 distance = 3;
  if (this->_internal_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionInfo::GetClassData() const { return &_class_data_; }


void RegionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionInfo*>(&to_msg);
  auto& from = static_cast<const RegionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RegionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_distance() != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[39]);
}

// ===================================================================

class SubscriptionResponse::_Internal {
 public:
};

SubscriptionResponse::SubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionResponse)
}
SubscriptionResponse::SubscriptionResponse(const SubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionResponse)
}

inline void SubscriptionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionResponse::~SubscriptionResponse() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void SubscriptionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sid_.ClearToEmpty();
  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SubscriptionResponse.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.SubscriptionError err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::livekit::SubscriptionError>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SubscriptionResponse.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  // .livekit.SubscriptionError err = 2;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionResponse)
  return target;
}

size_t SubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // .livekit.SubscriptionError err = 2;
  if (this->_internal_err() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionResponse::GetClassData() const { return &_class_data_; }


void SubscriptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionResponse*>(&to_msg);
  auto& from = static_cast<const SubscriptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionResponse::CopyFrom(const SubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionResponse::IsInitialized() const {
  return true;
}

void SubscriptionResponse::InternalSwap(SubscriptionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[40]);
}

// ===================================================================

class RequestResponse::_Internal {
 public:
};

RequestResponse::RequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RequestResponse)
}
RequestResponse::RequestResponse(const RequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:livekit.RequestResponse)
}

inline void RequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.request_id_){0u}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestResponse::~RequestResponse() {
  // @@protoc_insertion_point(destructor:livekit.RequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void RequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RequestResponse.Reason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::livekit::RequestResponse_Reason>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RequestResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // .livekit.RequestResponse.Reason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RequestResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RequestResponse)
  return target;
}

size_t RequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
  }

  // .livekit.RequestResponse.Reason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestResponse::GetClassData() const { return &_class_data_; }


void RequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestResponse*>(&to_msg);
  auto& from = static_cast<const RequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestResponse::CopyFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResponse::IsInitialized() const {
  return true;
}

void RequestResponse::InternalSwap(RequestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.reason_)
      + sizeof(RequestResponse::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[41]);
}

// ===================================================================

class TrackSubscribed::_Internal {
 public:
};

TrackSubscribed::TrackSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackSubscribed)
}
TrackSubscribed::TrackSubscribed(const TrackSubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackSubscribed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.TrackSubscribed)
}

inline void TrackSubscribed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackSubscribed::~TrackSubscribed() {
  // @@protoc_insertion_point(destructor:livekit.TrackSubscribed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackSubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sid_.Destroy();
}

void TrackSubscribed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackSubscribed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackSubscribed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string track_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.TrackSubscribed.track_sid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackSubscribed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackSubscribed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.TrackSubscribed.track_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackSubscribed)
  return target;
}

size_t TrackSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TrackSubscribed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string track_sid = 1;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackSubscribed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackSubscribed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackSubscribed::GetClassData() const { return &_class_data_; }


void TrackSubscribed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackSubscribed*>(&to_msg);
  auto& from = static_cast<const TrackSubscribed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackSubscribed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackSubscribed::CopyFrom(const TrackSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackSubscribed::IsInitialized() const {
  return true;
}

void TrackSubscribed::InternalSwap(TrackSubscribed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackSubscribed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5frtc_2eproto_getter, &descriptor_table_livekit_5frtc_2eproto_once,
      file_level_metadata_livekit_5frtc_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::SignalRequest*
Arena::CreateMaybeMessage< ::livekit::SignalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SignalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SignalResponse*
Arena::CreateMaybeMessage< ::livekit::SignalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SignalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SimulcastCodec*
Arena::CreateMaybeMessage< ::livekit::SimulcastCodec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SimulcastCodec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::AddTrackRequest*
Arena::CreateMaybeMessage< ::livekit::AddTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::AddTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrickleRequest*
Arena::CreateMaybeMessage< ::livekit::TrickleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrickleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::MuteTrackRequest*
Arena::CreateMaybeMessage< ::livekit::MuteTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MuteTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::JoinResponse*
Arena::CreateMaybeMessage< ::livekit::JoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::JoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ReconnectResponse*
Arena::CreateMaybeMessage< ::livekit::ReconnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ReconnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackPublishedResponse*
Arena::CreateMaybeMessage< ::livekit::TrackPublishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackPublishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackUnpublishedResponse*
Arena::CreateMaybeMessage< ::livekit::TrackUnpublishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackUnpublishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SessionDescription*
Arena::CreateMaybeMessage< ::livekit::SessionDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SessionDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ParticipantUpdate*
Arena::CreateMaybeMessage< ::livekit::ParticipantUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ParticipantUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateSubscription*
Arena::CreateMaybeMessage< ::livekit::UpdateSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateTrackSettings*
Arena::CreateMaybeMessage< ::livekit::UpdateTrackSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateTrackSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateLocalAudioTrack*
Arena::CreateMaybeMessage< ::livekit::UpdateLocalAudioTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateLocalAudioTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateLocalVideoTrack*
Arena::CreateMaybeMessage< ::livekit::UpdateLocalVideoTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateLocalVideoTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::LeaveRequest*
Arena::CreateMaybeMessage< ::livekit::LeaveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::LeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateVideoLayers*
Arena::CreateMaybeMessage< ::livekit::UpdateVideoLayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateVideoLayers >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateParticipantMetadata*
Arena::CreateMaybeMessage< ::livekit::UpdateParticipantMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateParticipantMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ICEServer*
Arena::CreateMaybeMessage< ::livekit::ICEServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ICEServer >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SpeakersChanged*
Arena::CreateMaybeMessage< ::livekit::SpeakersChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SpeakersChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RoomUpdate*
Arena::CreateMaybeMessage< ::livekit::RoomUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ConnectionQualityInfo*
Arena::CreateMaybeMessage< ::livekit::ConnectionQualityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ConnectionQualityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ConnectionQualityUpdate*
Arena::CreateMaybeMessage< ::livekit::ConnectionQualityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ConnectionQualityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamStateInfo*
Arena::CreateMaybeMessage< ::livekit::StreamStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::StreamStateUpdate*
Arena::CreateMaybeMessage< ::livekit::StreamStateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::StreamStateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscribedQuality*
Arena::CreateMaybeMessage< ::livekit::SubscribedQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscribedQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscribedCodec*
Arena::CreateMaybeMessage< ::livekit::SubscribedCodec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscribedCodec >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscribedQualityUpdate*
Arena::CreateMaybeMessage< ::livekit::SubscribedQualityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscribedQualityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackPermission*
Arena::CreateMaybeMessage< ::livekit::TrackPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscriptionPermission*
Arena::CreateMaybeMessage< ::livekit::SubscriptionPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscriptionPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscriptionPermissionUpdate*
Arena::CreateMaybeMessage< ::livekit::SubscriptionPermissionUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscriptionPermissionUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SyncState*
Arena::CreateMaybeMessage< ::livekit::SyncState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SyncState >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DataChannelInfo*
Arena::CreateMaybeMessage< ::livekit::DataChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DataChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SimulateScenario*
Arena::CreateMaybeMessage< ::livekit::SimulateScenario >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SimulateScenario >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Ping*
Arena::CreateMaybeMessage< ::livekit::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::Pong*
Arena::CreateMaybeMessage< ::livekit::Pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RegionSettings*
Arena::CreateMaybeMessage< ::livekit::RegionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RegionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RegionInfo*
Arena::CreateMaybeMessage< ::livekit::RegionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RegionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SubscriptionResponse*
Arena::CreateMaybeMessage< ::livekit::SubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RequestResponse*
Arena::CreateMaybeMessage< ::livekit::RequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TrackSubscribed*
Arena::CreateMaybeMessage< ::livekit::TrackSubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TrackSubscribed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
