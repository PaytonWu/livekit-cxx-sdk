// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_room.proto

#include "livekit_room.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR CreateRoomRequest::CreateRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agents_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_preset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.egress_)*/nullptr
  , /*decltype(_impl_.empty_timeout_)*/0u
  , /*decltype(_impl_.max_participants_)*/0u
  , /*decltype(_impl_.min_playout_delay_)*/0u
  , /*decltype(_impl_.max_playout_delay_)*/0u
  , /*decltype(_impl_.departure_timeout_)*/0u
  , /*decltype(_impl_.sync_streams_)*/false
  , /*decltype(_impl_.replay_enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomRequestDefaultTypeInternal() {}
  union {
    CreateRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR RoomEgress::RoomEgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.tracks_)*/nullptr
  , /*decltype(_impl_.participant_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomEgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomEgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomEgressDefaultTypeInternal() {}
  union {
    RoomEgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomEgressDefaultTypeInternal _RoomEgress_default_instance_;
PROTOBUF_CONSTEXPR RoomAgent::RoomAgent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dispatches_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomAgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomAgentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomAgentDefaultTypeInternal() {}
  union {
    RoomAgent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomAgentDefaultTypeInternal _RoomAgent_default_instance_;
PROTOBUF_CONSTEXPR ListRoomsRequest::ListRoomsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRoomsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRoomsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRoomsRequestDefaultTypeInternal() {}
  union {
    ListRoomsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRoomsRequestDefaultTypeInternal _ListRoomsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListRoomsResponse::ListRoomsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rooms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRoomsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRoomsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRoomsResponseDefaultTypeInternal() {}
  union {
    ListRoomsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRoomsResponseDefaultTypeInternal _ListRoomsResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteRoomRequest::DeleteRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRoomRequestDefaultTypeInternal() {}
  union {
    DeleteRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRoomRequestDefaultTypeInternal _DeleteRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteRoomResponse::DeleteRoomResponse(
    ::_pbi::ConstantInitialized) {}
struct DeleteRoomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRoomResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRoomResponseDefaultTypeInternal() {}
  union {
    DeleteRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRoomResponseDefaultTypeInternal _DeleteRoomResponse_default_instance_;
PROTOBUF_CONSTEXPR ListParticipantsRequest::ListParticipantsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListParticipantsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListParticipantsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListParticipantsRequestDefaultTypeInternal() {}
  union {
    ListParticipantsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListParticipantsRequestDefaultTypeInternal _ListParticipantsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListParticipantsResponse::ListParticipantsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participants_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListParticipantsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListParticipantsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListParticipantsResponseDefaultTypeInternal() {}
  union {
    ListParticipantsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListParticipantsResponseDefaultTypeInternal _ListParticipantsResponse_default_instance_;
PROTOBUF_CONSTEXPR RoomParticipantIdentity::RoomParticipantIdentity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomParticipantIdentityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomParticipantIdentityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomParticipantIdentityDefaultTypeInternal() {}
  union {
    RoomParticipantIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomParticipantIdentityDefaultTypeInternal _RoomParticipantIdentity_default_instance_;
PROTOBUF_CONSTEXPR RemoveParticipantResponse::RemoveParticipantResponse(
    ::_pbi::ConstantInitialized) {}
struct RemoveParticipantResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveParticipantResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveParticipantResponseDefaultTypeInternal() {}
  union {
    RemoveParticipantResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveParticipantResponseDefaultTypeInternal _RemoveParticipantResponse_default_instance_;
PROTOBUF_CONSTEXPR MuteRoomTrackRequest::MuteRoomTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.muted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MuteRoomTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteRoomTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteRoomTrackRequestDefaultTypeInternal() {}
  union {
    MuteRoomTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteRoomTrackRequestDefaultTypeInternal _MuteRoomTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR MuteRoomTrackResponse::MuteRoomTrackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MuteRoomTrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteRoomTrackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteRoomTrackResponseDefaultTypeInternal() {}
  union {
    MuteRoomTrackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteRoomTrackResponseDefaultTypeInternal _MuteRoomTrackResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateParticipantRequest_AttributesEntry_DoNotUse::UpdateParticipantRequest_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UpdateParticipantRequest_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateParticipantRequest_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateParticipantRequest_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdateParticipantRequest_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateParticipantRequest_AttributesEntry_DoNotUseDefaultTypeInternal _UpdateParticipantRequest_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UpdateParticipantRequest::UpdateParticipantRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateParticipantRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateParticipantRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateParticipantRequestDefaultTypeInternal() {}
  union {
    UpdateParticipantRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateParticipantRequestDefaultTypeInternal _UpdateParticipantRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateSubscriptionsRequest::UpdateSubscriptionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_sids_)*/{}
  , /*decltype(_impl_.participant_tracks_)*/{}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscribe_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateSubscriptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSubscriptionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSubscriptionsRequestDefaultTypeInternal() {}
  union {
    UpdateSubscriptionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSubscriptionsRequestDefaultTypeInternal _UpdateSubscriptionsRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateSubscriptionsResponse::UpdateSubscriptionsResponse(
    ::_pbi::ConstantInitialized) {}
struct UpdateSubscriptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSubscriptionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSubscriptionsResponseDefaultTypeInternal() {}
  union {
    UpdateSubscriptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSubscriptionsResponseDefaultTypeInternal _UpdateSubscriptionsResponse_default_instance_;
PROTOBUF_CONSTEXPR SendDataRequest::SendDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_sids_)*/{}
  , /*decltype(_impl_.destination_identities_)*/{}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0} {}
struct SendDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendDataRequestDefaultTypeInternal() {}
  union {
    SendDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendDataRequestDefaultTypeInternal _SendDataRequest_default_instance_;
PROTOBUF_CONSTEXPR SendDataResponse::SendDataResponse(
    ::_pbi::ConstantInitialized) {}
struct SendDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendDataResponseDefaultTypeInternal() {}
  union {
    SendDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendDataResponseDefaultTypeInternal _SendDataResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateRoomMetadataRequest::UpdateRoomMetadataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateRoomMetadataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRoomMetadataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRoomMetadataRequestDefaultTypeInternal() {}
  union {
    UpdateRoomMetadataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRoomMetadataRequestDefaultTypeInternal _UpdateRoomMetadataRequest_default_instance_;
PROTOBUF_CONSTEXPR RoomConfiguration::RoomConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agents_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.egress_)*/nullptr
  , /*decltype(_impl_.empty_timeout_)*/0u
  , /*decltype(_impl_.departure_timeout_)*/0u
  , /*decltype(_impl_.max_participants_)*/0u
  , /*decltype(_impl_.min_playout_delay_)*/0u
  , /*decltype(_impl_.max_playout_delay_)*/0u
  , /*decltype(_impl_.sync_streams_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomConfigurationDefaultTypeInternal() {}
  union {
    RoomConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomConfigurationDefaultTypeInternal _RoomConfiguration_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5froom_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_livekit_5froom_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5froom_2eproto = nullptr;

const uint32_t TableStruct_livekit_5froom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.room_preset_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.empty_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.departure_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.max_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.egress_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.min_playout_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.max_playout_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.sync_streams_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.replay_enabled_),
  PROTOBUF_FIELD_OFFSET(::livekit::CreateRoomRequest, _impl_.agents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomEgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomEgress, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomEgress, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomEgress, _impl_.tracks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomAgent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomAgent, _impl_.dispatches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListRoomsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListRoomsRequest, _impl_.names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListRoomsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListRoomsResponse, _impl_.rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteRoomRequest, _impl_.room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::DeleteRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListParticipantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListParticipantsRequest, _impl_.room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::ListParticipantsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::ListParticipantsResponse, _impl_.participants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomParticipantIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomParticipantIdentity, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomParticipantIdentity, _impl_.identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RemoveParticipantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackRequest, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackRequest, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackRequest, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackRequest, _impl_.muted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MuteRoomTrackResponse, _impl_.track_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantRequest, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsRequest, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsRequest, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsRequest, _impl_.track_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsRequest, _impl_.subscribe_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsRequest, _impl_.participant_tracks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.destination_sids_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.destination_identities_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataRequest, _impl_.nonce_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::SendDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateRoomMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateRoomMetadataRequest, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::UpdateRoomMetadataRequest, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.empty_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.departure_timeout_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.max_participants_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.egress_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.min_playout_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.max_playout_delay_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.sync_streams_),
  PROTOBUF_FIELD_OFFSET(::livekit::RoomConfiguration, _impl_.agents_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::CreateRoomRequest)},
  { 19, -1, -1, sizeof(::livekit::RoomEgress)},
  { 28, -1, -1, sizeof(::livekit::RoomAgent)},
  { 35, -1, -1, sizeof(::livekit::ListRoomsRequest)},
  { 42, -1, -1, sizeof(::livekit::ListRoomsResponse)},
  { 49, -1, -1, sizeof(::livekit::DeleteRoomRequest)},
  { 56, -1, -1, sizeof(::livekit::DeleteRoomResponse)},
  { 62, -1, -1, sizeof(::livekit::ListParticipantsRequest)},
  { 69, -1, -1, sizeof(::livekit::ListParticipantsResponse)},
  { 76, -1, -1, sizeof(::livekit::RoomParticipantIdentity)},
  { 84, -1, -1, sizeof(::livekit::RemoveParticipantResponse)},
  { 90, -1, -1, sizeof(::livekit::MuteRoomTrackRequest)},
  { 100, -1, -1, sizeof(::livekit::MuteRoomTrackResponse)},
  { 107, 115, -1, sizeof(::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse)},
  { 117, -1, -1, sizeof(::livekit::UpdateParticipantRequest)},
  { 129, -1, -1, sizeof(::livekit::UpdateSubscriptionsRequest)},
  { 140, -1, -1, sizeof(::livekit::UpdateSubscriptionsResponse)},
  { 146, 159, -1, sizeof(::livekit::SendDataRequest)},
  { 166, -1, -1, sizeof(::livekit::SendDataResponse)},
  { 172, -1, -1, sizeof(::livekit::UpdateRoomMetadataRequest)},
  { 180, -1, -1, sizeof(::livekit::RoomConfiguration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_CreateRoomRequest_default_instance_._instance,
  &::livekit::_RoomEgress_default_instance_._instance,
  &::livekit::_RoomAgent_default_instance_._instance,
  &::livekit::_ListRoomsRequest_default_instance_._instance,
  &::livekit::_ListRoomsResponse_default_instance_._instance,
  &::livekit::_DeleteRoomRequest_default_instance_._instance,
  &::livekit::_DeleteRoomResponse_default_instance_._instance,
  &::livekit::_ListParticipantsRequest_default_instance_._instance,
  &::livekit::_ListParticipantsResponse_default_instance_._instance,
  &::livekit::_RoomParticipantIdentity_default_instance_._instance,
  &::livekit::_RemoveParticipantResponse_default_instance_._instance,
  &::livekit::_MuteRoomTrackRequest_default_instance_._instance,
  &::livekit::_MuteRoomTrackResponse_default_instance_._instance,
  &::livekit::_UpdateParticipantRequest_AttributesEntry_DoNotUse_default_instance_._instance,
  &::livekit::_UpdateParticipantRequest_default_instance_._instance,
  &::livekit::_UpdateSubscriptionsRequest_default_instance_._instance,
  &::livekit::_UpdateSubscriptionsResponse_default_instance_._instance,
  &::livekit::_SendDataRequest_default_instance_._instance,
  &::livekit::_SendDataResponse_default_instance_._instance,
  &::livekit::_UpdateRoomMetadataRequest_default_instance_._instance,
  &::livekit::_RoomConfiguration_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5froom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022livekit_room.proto\022\007livekit\032\024livekit_m"
  "odels.proto\032\024livekit_egress.proto\032\034livek"
  "it_agent_dispatch.proto\"\332\002\n\021CreateRoomRe"
  "quest\022\014\n\004name\030\001 \001(\t\022\023\n\013room_preset\030\014 \001(\t"
  "\022\025\n\rempty_timeout\030\002 \001(\r\022\031\n\021departure_tim"
  "eout\030\n \001(\r\022\030\n\020max_participants\030\003 \001(\r\022\017\n\007"
  "node_id\030\004 \001(\t\022\020\n\010metadata\030\005 \001(\t\022#\n\006egres"
  "s\030\006 \001(\0132\023.livekit.RoomEgress\022\031\n\021min_play"
  "out_delay\030\007 \001(\r\022\031\n\021max_playout_delay\030\010 \001"
  "(\r\022\024\n\014sync_streams\030\t \001(\010\022\026\n\016replay_enabl"
  "ed\030\r \001(\010\022*\n\006agents\030\016 \003(\0132\032.livekit.RoomA"
  "gentDispatch\"\236\001\n\nRoomEgress\0221\n\004room\030\001 \001("
  "\0132#.livekit.RoomCompositeEgressRequest\0223"
  "\n\013participant\030\003 \001(\0132\036.livekit.AutoPartic"
  "ipantEgress\022(\n\006tracks\030\002 \001(\0132\030.livekit.Au"
  "toTrackEgress\";\n\tRoomAgent\022.\n\ndispatches"
  "\030\001 \003(\0132\032.livekit.RoomAgentDispatch\"!\n\020Li"
  "stRoomsRequest\022\r\n\005names\030\001 \003(\t\"1\n\021ListRoo"
  "msResponse\022\034\n\005rooms\030\001 \003(\0132\r.livekit.Room"
  "\"!\n\021DeleteRoomRequest\022\014\n\004room\030\001 \001(\t\"\024\n\022D"
  "eleteRoomResponse\"\'\n\027ListParticipantsReq"
  "uest\022\014\n\004room\030\001 \001(\t\"J\n\030ListParticipantsRe"
  "sponse\022.\n\014participants\030\001 \003(\0132\030.livekit.P"
  "articipantInfo\"9\n\027RoomParticipantIdentit"
  "y\022\014\n\004room\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\"\033\n\031Rem"
  "oveParticipantResponse\"X\n\024MuteRoomTrackR"
  "equest\022\014\n\004room\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022\021"
  "\n\ttrack_sid\030\003 \001(\t\022\r\n\005muted\030\004 \001(\010\":\n\025Mute"
  "RoomTrackResponse\022!\n\005track\030\001 \001(\0132\022.livek"
  "it.TrackInfo\"\210\002\n\030UpdateParticipantReques"
  "t\022\014\n\004room\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022\020\n\010met"
  "adata\030\003 \001(\t\0222\n\npermission\030\004 \001(\0132\036.liveki"
  "t.ParticipantPermission\022\014\n\004name\030\005 \001(\t\022E\n"
  "\nattributes\030\006 \003(\01321.livekit.UpdatePartic"
  "ipantRequest.AttributesEntry\0321\n\017Attribut"
  "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "\233\001\n\032UpdateSubscriptionsRequest\022\014\n\004room\030\001"
  " \001(\t\022\020\n\010identity\030\002 \001(\t\022\022\n\ntrack_sids\030\003 \003"
  "(\t\022\021\n\tsubscribe\030\004 \001(\010\0226\n\022participant_tra"
  "cks\030\005 \003(\0132\032.livekit.ParticipantTracks\"\035\n"
  "\033UpdateSubscriptionsResponse\"\300\001\n\017SendDat"
  "aRequest\022\014\n\004room\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022&\n\004"
  "kind\030\003 \001(\0162\030.livekit.DataPacket.Kind\022\034\n\020"
  "destination_sids\030\004 \003(\tB\002\030\001\022\036\n\026destinatio"
  "n_identities\030\006 \003(\t\022\022\n\005topic\030\005 \001(\tH\000\210\001\001\022\r"
  "\n\005nonce\030\007 \001(\014B\010\n\006_topic\"\022\n\020SendDataRespo"
  "nse\";\n\031UpdateRoomMetadataRequest\022\014\n\004room"
  "\030\001 \001(\t\022\020\n\010metadata\030\002 \001(\t\"\212\002\n\021RoomConfigu"
  "ration\022\014\n\004name\030\001 \001(\t\022\025\n\rempty_timeout\030\002 "
  "\001(\r\022\031\n\021departure_timeout\030\003 \001(\r\022\030\n\020max_pa"
  "rticipants\030\004 \001(\r\022#\n\006egress\030\005 \001(\0132\023.livek"
  "it.RoomEgress\022\031\n\021min_playout_delay\030\007 \001(\r"
  "\022\031\n\021max_playout_delay\030\010 \001(\r\022\024\n\014sync_stre"
  "ams\030\t \001(\010\022*\n\006agents\030\n \003(\0132\032.livekit.Room"
  "AgentDispatch2\346\006\n\013RoomService\0227\n\nCreateR"
  "oom\022\032.livekit.CreateRoomRequest\032\r.liveki"
  "t.Room\022B\n\tListRooms\022\031.livekit.ListRoomsR"
  "equest\032\032.livekit.ListRoomsResponse\022E\n\nDe"
  "leteRoom\022\032.livekit.DeleteRoomRequest\032\033.l"
  "ivekit.DeleteRoomResponse\022W\n\020ListPartici"
  "pants\022 .livekit.ListParticipantsRequest\032"
  "!.livekit.ListParticipantsResponse\022L\n\016Ge"
  "tParticipant\022 .livekit.RoomParticipantId"
  "entity\032\030.livekit.ParticipantInfo\022Y\n\021Remo"
  "veParticipant\022 .livekit.RoomParticipantI"
  "dentity\032\".livekit.RemoveParticipantRespo"
  "nse\022S\n\022MutePublishedTrack\022\035.livekit.Mute"
  "RoomTrackRequest\032\036.livekit.MuteRoomTrack"
  "Response\022P\n\021UpdateParticipant\022!.livekit."
  "UpdateParticipantRequest\032\030.livekit.Parti"
  "cipantInfo\022`\n\023UpdateSubscriptions\022#.live"
  "kit.UpdateSubscriptionsRequest\032$.livekit"
  ".UpdateSubscriptionsResponse\022\?\n\010SendData"
  "\022\030.livekit.SendDataRequest\032\031.livekit.Sen"
  "dDataResponse\022G\n\022UpdateRoomMetadata\022\".li"
  "vekit.UpdateRoomMetadataRequest\032\r.liveki"
  "t.RoomBFZ#github.com/livekit/protocol/li"
  "vekit\252\002\rLiveKit.Proto\352\002\016LiveKit::Protob\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5froom_2eproto_deps[3] = {
  &::descriptor_table_livekit_5fagent_5fdispatch_2eproto,
  &::descriptor_table_livekit_5fegress_2eproto,
  &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5froom_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5froom_2eproto = {
    false, false, 3126, descriptor_table_protodef_livekit_5froom_2eproto,
    "livekit_room.proto",
    &descriptor_table_livekit_5froom_2eproto_once, descriptor_table_livekit_5froom_2eproto_deps, 3, 21,
    schemas, file_default_instances, TableStruct_livekit_5froom_2eproto::offsets,
    file_level_metadata_livekit_5froom_2eproto, file_level_enum_descriptors_livekit_5froom_2eproto,
    file_level_service_descriptors_livekit_5froom_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5froom_2eproto_getter() {
  return &descriptor_table_livekit_5froom_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5froom_2eproto(&descriptor_table_livekit_5froom_2eproto);
namespace livekit {

// ===================================================================

class CreateRoomRequest::_Internal {
 public:
  static const ::livekit::RoomEgress& egress(const CreateRoomRequest* msg);
};

const ::livekit::RoomEgress&
CreateRoomRequest::_Internal::egress(const CreateRoomRequest* msg) {
  return *msg->_impl_.egress_;
}
void CreateRoomRequest::clear_agents() {
  _impl_.agents_.Clear();
}
CreateRoomRequest::CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.CreateRoomRequest)
}
CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agents_){from._impl_.agents_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.room_preset_){}
    , decltype(_impl_.egress_){nullptr}
    , decltype(_impl_.empty_timeout_){}
    , decltype(_impl_.max_participants_){}
    , decltype(_impl_.min_playout_delay_){}
    , decltype(_impl_.max_playout_delay_){}
    , decltype(_impl_.departure_timeout_){}
    , decltype(_impl_.sync_streams_){}
    , decltype(_impl_.replay_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_preset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_preset().empty()) {
    _this->_impl_.room_preset_.Set(from._internal_room_preset(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_egress()) {
    _this->_impl_.egress_ = new ::livekit::RoomEgress(*from._impl_.egress_);
  }
  ::memcpy(&_impl_.empty_timeout_, &from._impl_.empty_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.replay_enabled_) -
    reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.replay_enabled_));
  // @@protoc_insertion_point(copy_constructor:livekit.CreateRoomRequest)
}

inline void CreateRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agents_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.room_preset_){}
    , decltype(_impl_.egress_){nullptr}
    , decltype(_impl_.empty_timeout_){0u}
    , decltype(_impl_.max_participants_){0u}
    , decltype(_impl_.min_playout_delay_){0u}
    , decltype(_impl_.max_playout_delay_){0u}
    , decltype(_impl_.departure_timeout_){0u}
    , decltype(_impl_.sync_streams_){false}
    , decltype(_impl_.replay_enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_preset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_preset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agents_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.node_id_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.room_preset_.Destroy();
  if (this != internal_default_instance()) delete _impl_.egress_;
}

void CreateRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agents_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.node_id_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.room_preset_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.egress_ != nullptr) {
    delete _impl_.egress_;
  }
  _impl_.egress_ = nullptr;
  ::memset(&_impl_.empty_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.replay_enabled_) -
      reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.replay_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateRoomRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 empty_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.empty_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_participants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateRoomRequest.node_id"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateRoomRequest.metadata"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomEgress egress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_egress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_playout_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.min_playout_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_playout_delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.max_playout_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sync_streams = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.sync_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 departure_timeout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.departure_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_preset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_room_preset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.CreateRoomRequest.room_preset"));
        } else
          goto handle_unusual;
        continue;
      // bool replay_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.replay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.RoomAgentDispatch agents = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateRoomRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 empty_timeout = 2;
  if (this->_internal_empty_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_empty_timeout(), target);
  }

  // uint32 max_participants = 3;
  if (this->_internal_max_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_participants(), target);
  }

  // string node_id = 4;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateRoomRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_id(), target);
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateRoomRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  // .livekit.RoomEgress egress = 6;
  if (this->_internal_has_egress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::egress(this),
        _Internal::egress(this).GetCachedSize(), target, stream);
  }

  // uint32 min_playout_delay = 7;
  if (this->_internal_min_playout_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_min_playout_delay(), target);
  }

  // uint32 max_playout_delay = 8;
  if (this->_internal_max_playout_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_playout_delay(), target);
  }

  // bool sync_streams = 9;
  if (this->_internal_sync_streams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_sync_streams(), target);
  }

  // uint32 departure_timeout = 10;
  if (this->_internal_departure_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_departure_timeout(), target);
  }

  // string room_preset = 12;
  if (!this->_internal_room_preset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_preset().data(), static_cast<int>(this->_internal_room_preset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.CreateRoomRequest.room_preset");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_room_preset(), target);
  }

  // bool replay_enabled = 13;
  if (this->_internal_replay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_replay_enabled(), target);
  }

  // repeated .livekit.RoomAgentDispatch agents = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agents_size()); i < n; i++) {
    const auto& repfield = this->_internal_agents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateRoomRequest)
  return target;
}

size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.CreateRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.RoomAgentDispatch agents = 14;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->_impl_.agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string node_id = 4;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string metadata = 5;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string room_preset = 12;
  if (!this->_internal_room_preset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_preset());
  }

  // .livekit.RoomEgress egress = 6;
  if (this->_internal_has_egress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.egress_);
  }

  // uint32 empty_timeout = 2;
  if (this->_internal_empty_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empty_timeout());
  }

  // uint32 max_participants = 3;
  if (this->_internal_max_participants() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_participants());
  }

  // uint32 min_playout_delay = 7;
  if (this->_internal_min_playout_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_playout_delay());
  }

  // uint32 max_playout_delay = 8;
  if (this->_internal_max_playout_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_playout_delay());
  }

  // uint32 departure_timeout = 10;
  if (this->_internal_departure_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_departure_timeout());
  }

  // bool sync_streams = 9;
  if (this->_internal_sync_streams() != 0) {
    total_size += 1 + 1;
  }

  // bool replay_enabled = 13;
  if (this->_internal_replay_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomRequest::GetClassData() const { return &_class_data_; }


void CreateRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agents_.MergeFrom(from._impl_.agents_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_room_preset().empty()) {
    _this->_internal_set_room_preset(from._internal_room_preset());
  }
  if (from._internal_has_egress()) {
    _this->_internal_mutable_egress()->::livekit::RoomEgress::MergeFrom(
        from._internal_egress());
  }
  if (from._internal_empty_timeout() != 0) {
    _this->_internal_set_empty_timeout(from._internal_empty_timeout());
  }
  if (from._internal_max_participants() != 0) {
    _this->_internal_set_max_participants(from._internal_max_participants());
  }
  if (from._internal_min_playout_delay() != 0) {
    _this->_internal_set_min_playout_delay(from._internal_min_playout_delay());
  }
  if (from._internal_max_playout_delay() != 0) {
    _this->_internal_set_max_playout_delay(from._internal_max_playout_delay());
  }
  if (from._internal_departure_timeout() != 0) {
    _this->_internal_set_departure_timeout(from._internal_departure_timeout());
  }
  if (from._internal_sync_streams() != 0) {
    _this->_internal_set_sync_streams(from._internal_sync_streams());
  }
  if (from._internal_replay_enabled() != 0) {
    _this->_internal_set_replay_enabled(from._internal_replay_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {
  return true;
}

void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_preset_, lhs_arena,
      &other->_impl_.room_preset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoomRequest, _impl_.replay_enabled_)
      + sizeof(CreateRoomRequest::_impl_.replay_enabled_)
      - PROTOBUF_FIELD_OFFSET(CreateRoomRequest, _impl_.egress_)>(
          reinterpret_cast<char*>(&_impl_.egress_),
          reinterpret_cast<char*>(&other->_impl_.egress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[0]);
}

// ===================================================================

class RoomEgress::_Internal {
 public:
  static const ::livekit::RoomCompositeEgressRequest& room(const RoomEgress* msg);
  static const ::livekit::AutoParticipantEgress& participant(const RoomEgress* msg);
  static const ::livekit::AutoTrackEgress& tracks(const RoomEgress* msg);
};

const ::livekit::RoomCompositeEgressRequest&
RoomEgress::_Internal::room(const RoomEgress* msg) {
  return *msg->_impl_.room_;
}
const ::livekit::AutoParticipantEgress&
RoomEgress::_Internal::participant(const RoomEgress* msg) {
  return *msg->_impl_.participant_;
}
const ::livekit::AutoTrackEgress&
RoomEgress::_Internal::tracks(const RoomEgress* msg) {
  return *msg->_impl_.tracks_;
}
void RoomEgress::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
void RoomEgress::clear_participant() {
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
}
void RoomEgress::clear_tracks() {
  if (GetArenaForAllocation() == nullptr && _impl_.tracks_ != nullptr) {
    delete _impl_.tracks_;
  }
  _impl_.tracks_ = nullptr;
}
RoomEgress::RoomEgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomEgress)
}
RoomEgress::RoomEgress(const RoomEgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomEgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , decltype(_impl_.tracks_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::RoomCompositeEgressRequest(*from._impl_.room_);
  }
  if (from._internal_has_tracks()) {
    _this->_impl_.tracks_ = new ::livekit::AutoTrackEgress(*from._impl_.tracks_);
  }
  if (from._internal_has_participant()) {
    _this->_impl_.participant_ = new ::livekit::AutoParticipantEgress(*from._impl_.participant_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RoomEgress)
}

inline void RoomEgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , decltype(_impl_.tracks_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomEgress::~RoomEgress() {
  // @@protoc_insertion_point(destructor:livekit.RoomEgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomEgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.tracks_;
  if (this != internal_default_instance()) delete _impl_.participant_;
}

void RoomEgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomEgress::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomEgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tracks_ != nullptr) {
    delete _impl_.tracks_;
  }
  _impl_.tracks_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomEgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.RoomCompositeEgressRequest room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AutoTrackEgress tracks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.AutoParticipantEgress participant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomEgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomEgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.RoomCompositeEgressRequest room = 1;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // .livekit.AutoTrackEgress tracks = 2;
  if (this->_internal_has_tracks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracks(this),
        _Internal::tracks(this).GetCachedSize(), target, stream);
  }

  // .livekit.AutoParticipantEgress participant = 3;
  if (this->_internal_has_participant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomEgress)
  return target;
}

size_t RoomEgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomEgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.RoomCompositeEgressRequest room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // .livekit.AutoTrackEgress tracks = 2;
  if (this->_internal_has_tracks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tracks_);
  }

  // .livekit.AutoParticipantEgress participant = 3;
  if (this->_internal_has_participant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.participant_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomEgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomEgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomEgress::GetClassData() const { return &_class_data_; }


void RoomEgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomEgress*>(&to_msg);
  auto& from = static_cast<const RoomEgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomEgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::livekit::RoomCompositeEgressRequest::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_tracks()) {
    _this->_internal_mutable_tracks()->::livekit::AutoTrackEgress::MergeFrom(
        from._internal_tracks());
  }
  if (from._internal_has_participant()) {
    _this->_internal_mutable_participant()->::livekit::AutoParticipantEgress::MergeFrom(
        from._internal_participant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomEgress::CopyFrom(const RoomEgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomEgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomEgress::IsInitialized() const {
  return true;
}

void RoomEgress::InternalSwap(RoomEgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomEgress, _impl_.participant_)
      + sizeof(RoomEgress::_impl_.participant_)
      - PROTOBUF_FIELD_OFFSET(RoomEgress, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomEgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[1]);
}

// ===================================================================

class RoomAgent::_Internal {
 public:
};

void RoomAgent::clear_dispatches() {
  _impl_.dispatches_.Clear();
}
RoomAgent::RoomAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomAgent)
}
RoomAgent::RoomAgent(const RoomAgent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomAgent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dispatches_){from._impl_.dispatches_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.RoomAgent)
}

inline void RoomAgent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dispatches_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomAgent::~RoomAgent() {
  // @@protoc_insertion_point(destructor:livekit.RoomAgent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomAgent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dispatches_.~RepeatedPtrField();
}

void RoomAgent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomAgent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dispatches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomAgent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.RoomAgentDispatch dispatches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dispatches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomAgent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomAgent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.RoomAgentDispatch dispatches = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dispatches_size()); i < n; i++) {
    const auto& repfield = this->_internal_dispatches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomAgent)
  return target;
}

size_t RoomAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomAgent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.RoomAgentDispatch dispatches = 1;
  total_size += 1UL * this->_internal_dispatches_size();
  for (const auto& msg : this->_impl_.dispatches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomAgent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomAgent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomAgent::GetClassData() const { return &_class_data_; }


void RoomAgent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomAgent*>(&to_msg);
  auto& from = static_cast<const RoomAgent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomAgent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dispatches_.MergeFrom(from._impl_.dispatches_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomAgent::CopyFrom(const RoomAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAgent::IsInitialized() const {
  return true;
}

void RoomAgent::InternalSwap(RoomAgent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dispatches_.InternalSwap(&other->_impl_.dispatches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomAgent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[2]);
}

// ===================================================================

class ListRoomsRequest::_Internal {
 public:
};

ListRoomsRequest::ListRoomsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListRoomsRequest)
}
ListRoomsRequest::ListRoomsRequest(const ListRoomsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRoomsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListRoomsRequest)
}

inline void ListRoomsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListRoomsRequest::~ListRoomsRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListRoomsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRoomsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
}

void ListRoomsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRoomsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListRoomsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRoomsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.ListRoomsRequest.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRoomsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListRoomsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListRoomsRequest.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListRoomsRequest)
  return target;
}

size_t ListRoomsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListRoomsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRoomsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRoomsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRoomsRequest::GetClassData() const { return &_class_data_; }


void ListRoomsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRoomsRequest*>(&to_msg);
  auto& from = static_cast<const ListRoomsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListRoomsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRoomsRequest::CopyFrom(const ListRoomsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListRoomsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoomsRequest::IsInitialized() const {
  return true;
}

void ListRoomsRequest::InternalSwap(ListRoomsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRoomsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[3]);
}

// ===================================================================

class ListRoomsResponse::_Internal {
 public:
};

void ListRoomsResponse::clear_rooms() {
  _impl_.rooms_.Clear();
}
ListRoomsResponse::ListRoomsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListRoomsResponse)
}
ListRoomsResponse::ListRoomsResponse(const ListRoomsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRoomsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){from._impl_.rooms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListRoomsResponse)
}

inline void ListRoomsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListRoomsResponse::~ListRoomsResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListRoomsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRoomsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rooms_.~RepeatedPtrField();
}

void ListRoomsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRoomsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListRoomsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRoomsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.Room rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRoomsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListRoomsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.Room rooms = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListRoomsResponse)
  return target;
}

size_t ListRoomsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListRoomsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.Room rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->_impl_.rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRoomsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRoomsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRoomsResponse::GetClassData() const { return &_class_data_; }


void ListRoomsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRoomsResponse*>(&to_msg);
  auto& from = static_cast<const ListRoomsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListRoomsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rooms_.MergeFrom(from._impl_.rooms_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRoomsResponse::CopyFrom(const ListRoomsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListRoomsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoomsResponse::IsInitialized() const {
  return true;
}

void ListRoomsResponse::InternalSwap(ListRoomsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rooms_.InternalSwap(&other->_impl_.rooms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRoomsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[4]);
}

// ===================================================================

class DeleteRoomRequest::_Internal {
 public:
};

DeleteRoomRequest::DeleteRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.DeleteRoomRequest)
}
DeleteRoomRequest::DeleteRoomRequest(const DeleteRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.DeleteRoomRequest)
}

inline void DeleteRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRoomRequest::~DeleteRoomRequest() {
  // @@protoc_insertion_point(destructor:livekit.DeleteRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_.Destroy();
}

void DeleteRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DeleteRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.DeleteRoomRequest.room"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DeleteRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.DeleteRoomRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DeleteRoomRequest)
  return target;
}

size_t DeleteRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.DeleteRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRoomRequest::GetClassData() const { return &_class_data_; }


void DeleteRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRoomRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DeleteRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRoomRequest::CopyFrom(const DeleteRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DeleteRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoomRequest::IsInitialized() const {
  return true;
}

void DeleteRoomRequest::InternalSwap(DeleteRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[5]);
}

// ===================================================================

class DeleteRoomResponse::_Internal {
 public:
};

DeleteRoomResponse::DeleteRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.DeleteRoomResponse)
}
DeleteRoomResponse::DeleteRoomResponse(const DeleteRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteRoomResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.DeleteRoomResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRoomResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteRoomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[6]);
}

// ===================================================================

class ListParticipantsRequest::_Internal {
 public:
};

ListParticipantsRequest::ListParticipantsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListParticipantsRequest)
}
ListParticipantsRequest::ListParticipantsRequest(const ListParticipantsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListParticipantsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.ListParticipantsRequest)
}

inline void ListParticipantsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListParticipantsRequest::~ListParticipantsRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListParticipantsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListParticipantsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_.Destroy();
}

void ListParticipantsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListParticipantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListParticipantsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListParticipantsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.ListParticipantsRequest.room"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListParticipantsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListParticipantsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.ListParticipantsRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListParticipantsRequest)
  return target;
}

size_t ListParticipantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListParticipantsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListParticipantsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListParticipantsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListParticipantsRequest::GetClassData() const { return &_class_data_; }


void ListParticipantsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListParticipantsRequest*>(&to_msg);
  auto& from = static_cast<const ListParticipantsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListParticipantsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListParticipantsRequest::CopyFrom(const ListParticipantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListParticipantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListParticipantsRequest::IsInitialized() const {
  return true;
}

void ListParticipantsRequest::InternalSwap(ListParticipantsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListParticipantsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[7]);
}

// ===================================================================

class ListParticipantsResponse::_Internal {
 public:
};

void ListParticipantsResponse::clear_participants() {
  _impl_.participants_.Clear();
}
ListParticipantsResponse::ListParticipantsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.ListParticipantsResponse)
}
ListParticipantsResponse::ListParticipantsResponse(const ListParticipantsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListParticipantsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participants_){from._impl_.participants_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.ListParticipantsResponse)
}

inline void ListParticipantsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participants_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListParticipantsResponse::~ListParticipantsResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListParticipantsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListParticipantsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participants_.~RepeatedPtrField();
}

void ListParticipantsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListParticipantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListParticipantsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListParticipantsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .livekit.ParticipantInfo participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListParticipantsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListParticipantsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_participants_size()); i < n; i++) {
    const auto& repfield = this->_internal_participants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListParticipantsResponse)
  return target;
}

size_t ListParticipantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.ListParticipantsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->_impl_.participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListParticipantsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListParticipantsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListParticipantsResponse::GetClassData() const { return &_class_data_; }


void ListParticipantsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListParticipantsResponse*>(&to_msg);
  auto& from = static_cast<const ListParticipantsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListParticipantsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participants_.MergeFrom(from._impl_.participants_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListParticipantsResponse::CopyFrom(const ListParticipantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListParticipantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListParticipantsResponse::IsInitialized() const {
  return true;
}

void ListParticipantsResponse::InternalSwap(ListParticipantsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participants_.InternalSwap(&other->_impl_.participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListParticipantsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[8]);
}

// ===================================================================

class RoomParticipantIdentity::_Internal {
 public:
};

RoomParticipantIdentity::RoomParticipantIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomParticipantIdentity)
}
RoomParticipantIdentity::RoomParticipantIdentity(const RoomParticipantIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomParticipantIdentity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.RoomParticipantIdentity)
}

inline void RoomParticipantIdentity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomParticipantIdentity::~RoomParticipantIdentity() {
  // @@protoc_insertion_point(destructor:livekit.RoomParticipantIdentity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomParticipantIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_.Destroy();
  _impl_.identity_.Destroy();
}

void RoomParticipantIdentity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomParticipantIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomParticipantIdentity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomParticipantIdentity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RoomParticipantIdentity.room"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RoomParticipantIdentity.identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomParticipantIdentity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomParticipantIdentity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RoomParticipantIdentity.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RoomParticipantIdentity.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomParticipantIdentity)
  return target;
}

size_t RoomParticipantIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomParticipantIdentity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomParticipantIdentity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomParticipantIdentity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomParticipantIdentity::GetClassData() const { return &_class_data_; }


void RoomParticipantIdentity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomParticipantIdentity*>(&to_msg);
  auto& from = static_cast<const RoomParticipantIdentity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomParticipantIdentity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomParticipantIdentity::CopyFrom(const RoomParticipantIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomParticipantIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomParticipantIdentity::IsInitialized() const {
  return true;
}

void RoomParticipantIdentity::InternalSwap(RoomParticipantIdentity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomParticipantIdentity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[9]);
}

// ===================================================================

class RemoveParticipantResponse::_Internal {
 public:
};

RemoveParticipantResponse::RemoveParticipantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.RemoveParticipantResponse)
}
RemoveParticipantResponse::RemoveParticipantResponse(const RemoveParticipantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RemoveParticipantResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.RemoveParticipantResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveParticipantResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveParticipantResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveParticipantResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[10]);
}

// ===================================================================

class MuteRoomTrackRequest::_Internal {
 public:
};

MuteRoomTrackRequest::MuteRoomTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.MuteRoomTrackRequest)
}
MuteRoomTrackRequest::MuteRoomTrackRequest(const MuteRoomTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MuteRoomTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.muted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_sid().empty()) {
    _this->_impl_.track_sid_.Set(from._internal_track_sid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.muted_ = from._impl_.muted_;
  // @@protoc_insertion_point(copy_constructor:livekit.MuteRoomTrackRequest)
}

inline void MuteRoomTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.muted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MuteRoomTrackRequest::~MuteRoomTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.MuteRoomTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteRoomTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.track_sid_.Destroy();
}

void MuteRoomTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteRoomTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MuteRoomTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.track_sid_.ClearToEmpty();
  _impl_.muted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteRoomTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.MuteRoomTrackRequest.room"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.MuteRoomTrackRequest.identity"));
        } else
          goto handle_unusual;
        continue;
      // string track_sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_track_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.MuteRoomTrackRequest.track_sid"));
        } else
          goto handle_unusual;
        continue;
      // bool muted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteRoomTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MuteRoomTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MuteRoomTrackRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MuteRoomTrackRequest.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // string track_sid = 3;
  if (!this->_internal_track_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_sid().data(), static_cast<int>(this->_internal_track_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MuteRoomTrackRequest.track_sid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_track_sid(), target);
  }

  // bool muted = 4;
  if (this->_internal_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MuteRoomTrackRequest)
  return target;
}

size_t MuteRoomTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MuteRoomTrackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string track_sid = 3;
  if (!this->_internal_track_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_sid());
  }

  // bool muted = 4;
  if (this->_internal_muted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteRoomTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MuteRoomTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteRoomTrackRequest::GetClassData() const { return &_class_data_; }


void MuteRoomTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MuteRoomTrackRequest*>(&to_msg);
  auto& from = static_cast<const MuteRoomTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MuteRoomTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_track_sid().empty()) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_muted() != 0) {
    _this->_internal_set_muted(from._internal_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteRoomTrackRequest::CopyFrom(const MuteRoomTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MuteRoomTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteRoomTrackRequest::IsInitialized() const {
  return true;
}

void MuteRoomTrackRequest::InternalSwap(MuteRoomTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_sid_, lhs_arena,
      &other->_impl_.track_sid_, rhs_arena
  );
  swap(_impl_.muted_, other->_impl_.muted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteRoomTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[11]);
}

// ===================================================================

class MuteRoomTrackResponse::_Internal {
 public:
  static const ::livekit::TrackInfo& track(const MuteRoomTrackResponse* msg);
};

const ::livekit::TrackInfo&
MuteRoomTrackResponse::_Internal::track(const MuteRoomTrackResponse* msg) {
  return *msg->_impl_.track_;
}
void MuteRoomTrackResponse::clear_track() {
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
}
MuteRoomTrackResponse::MuteRoomTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.MuteRoomTrackResponse)
}
MuteRoomTrackResponse::MuteRoomTrackResponse(const MuteRoomTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MuteRoomTrackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::livekit::TrackInfo(*from._impl_.track_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.MuteRoomTrackResponse)
}

inline void MuteRoomTrackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MuteRoomTrackResponse::~MuteRoomTrackResponse() {
  // @@protoc_insertion_point(destructor:livekit.MuteRoomTrackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteRoomTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.track_;
}

void MuteRoomTrackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteRoomTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MuteRoomTrackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteRoomTrackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .livekit.TrackInfo track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteRoomTrackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MuteRoomTrackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .livekit.TrackInfo track = 1;
  if (this->_internal_has_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MuteRoomTrackResponse)
  return target;
}

size_t MuteRoomTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MuteRoomTrackResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .livekit.TrackInfo track = 1;
  if (this->_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteRoomTrackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MuteRoomTrackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteRoomTrackResponse::GetClassData() const { return &_class_data_; }


void MuteRoomTrackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MuteRoomTrackResponse*>(&to_msg);
  auto& from = static_cast<const MuteRoomTrackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MuteRoomTrackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_track()) {
    _this->_internal_mutable_track()->::livekit::TrackInfo::MergeFrom(
        from._internal_track());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteRoomTrackResponse::CopyFrom(const MuteRoomTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MuteRoomTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteRoomTrackResponse::IsInitialized() const {
  return true;
}

void MuteRoomTrackResponse::InternalSwap(MuteRoomTrackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.track_, other->_impl_.track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteRoomTrackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[12]);
}

// ===================================================================

UpdateParticipantRequest_AttributesEntry_DoNotUse::UpdateParticipantRequest_AttributesEntry_DoNotUse() {}
UpdateParticipantRequest_AttributesEntry_DoNotUse::UpdateParticipantRequest_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdateParticipantRequest_AttributesEntry_DoNotUse::MergeFrom(const UpdateParticipantRequest_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdateParticipantRequest_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[13]);
}

// ===================================================================

class UpdateParticipantRequest::_Internal {
 public:
  static const ::livekit::ParticipantPermission& permission(const UpdateParticipantRequest* msg);
};

const ::livekit::ParticipantPermission&
UpdateParticipantRequest::_Internal::permission(const UpdateParticipantRequest* msg) {
  return *msg->_impl_.permission_;
}
void UpdateParticipantRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
UpdateParticipantRequest::UpdateParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UpdateParticipantRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateParticipantRequest)
}
UpdateParticipantRequest::UpdateParticipantRequest(const UpdateParticipantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateParticipantRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.permission_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::livekit::ParticipantPermission(*from._impl_.permission_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateParticipantRequest)
}

inline void UpdateParticipantRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.permission_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateParticipantRequest::~UpdateParticipantRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateParticipantRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UpdateParticipantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.room_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void UpdateParticipantRequest::ArenaDtor(void* object) {
  UpdateParticipantRequest* _this = reinterpret_cast< UpdateParticipantRequest* >(object);
  _this->_impl_.attributes_.Destruct();
}
void UpdateParticipantRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateParticipantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateParticipantRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.room_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateParticipantRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateParticipantRequest.room"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateParticipantRequest.identity"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateParticipantRequest.metadata"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantPermission permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateParticipantRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateParticipantRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateParticipantRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateParticipantRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateParticipantRequest.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateParticipantRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // .livekit.ParticipantPermission permission = 4;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateParticipantRequest.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // map<string, string> attributes = 6;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = UpdateParticipantRequest_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.UpdateParticipantRequest.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "livekit.UpdateParticipantRequest.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateParticipantRequest)
  return target;
}

size_t UpdateParticipantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateParticipantRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += UpdateParticipantRequest_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .livekit.ParticipantPermission permission = 4;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateParticipantRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateParticipantRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateParticipantRequest::GetClassData() const { return &_class_data_; }


void UpdateParticipantRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateParticipantRequest*>(&to_msg);
  auto& from = static_cast<const UpdateParticipantRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateParticipantRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::livekit::ParticipantPermission::MergeFrom(
        from._internal_permission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateParticipantRequest::CopyFrom(const UpdateParticipantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateParticipantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateParticipantRequest::IsInitialized() const {
  return true;
}

void UpdateParticipantRequest::InternalSwap(UpdateParticipantRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.permission_, other->_impl_.permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateParticipantRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[14]);
}

// ===================================================================

class UpdateSubscriptionsRequest::_Internal {
 public:
};

void UpdateSubscriptionsRequest::clear_participant_tracks() {
  _impl_.participant_tracks_.Clear();
}
UpdateSubscriptionsRequest::UpdateSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateSubscriptionsRequest)
}
UpdateSubscriptionsRequest::UpdateSubscriptionsRequest(const UpdateSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateSubscriptionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){from._impl_.track_sids_}
    , decltype(_impl_.participant_tracks_){from._impl_.participant_tracks_}
    , decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.subscribe_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subscribe_ = from._impl_.subscribe_;
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateSubscriptionsRequest)
}

inline void UpdateSubscriptionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_sids_){arena}
    , decltype(_impl_.participant_tracks_){arena}
    , decltype(_impl_.room_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.subscribe_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateSubscriptionsRequest::~UpdateSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateSubscriptionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.track_sids_.~RepeatedPtrField();
  _impl_.participant_tracks_.~RepeatedPtrField();
  _impl_.room_.Destroy();
  _impl_.identity_.Destroy();
}

void UpdateSubscriptionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  _impl_.participant_tracks_.Clear();
  _impl_.room_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.subscribe_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSubscriptionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateSubscriptionsRequest.room"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateSubscriptionsRequest.identity"));
        } else
          goto handle_unusual;
        continue;
      // repeated string track_sids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_track_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateSubscriptionsRequest.track_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool subscribe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.ParticipantTracks participant_tracks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSubscriptionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateSubscriptionsRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateSubscriptionsRequest.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // repeated string track_sids = 3;
  for (int i = 0, n = this->_internal_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateSubscriptionsRequest.track_sids");
    target = stream->WriteString(3, s, target);
  }

  // bool subscribe = 4;
  if (this->_internal_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_subscribe(), target);
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_participant_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_participant_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateSubscriptionsRequest)
  return target;
}

size_t UpdateSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateSubscriptionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string track_sids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.track_sids_.size());
  for (int i = 0, n = _impl_.track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.track_sids_.Get(i));
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 5;
  total_size += 1UL * this->_internal_participant_tracks_size();
  for (const auto& msg : this->_impl_.participant_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // bool subscribe = 4;
  if (this->_internal_subscribe() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSubscriptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateSubscriptionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSubscriptionsRequest::GetClassData() const { return &_class_data_; }


void UpdateSubscriptionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateSubscriptionsRequest*>(&to_msg);
  auto& from = static_cast<const UpdateSubscriptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.track_sids_.MergeFrom(from._impl_.track_sids_);
  _this->_impl_.participant_tracks_.MergeFrom(from._impl_.participant_tracks_);
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (from._internal_subscribe() != 0) {
    _this->_internal_set_subscribe(from._internal_subscribe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSubscriptionsRequest::CopyFrom(const UpdateSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionsRequest::IsInitialized() const {
  return true;
}

void UpdateSubscriptionsRequest::InternalSwap(UpdateSubscriptionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  _impl_.participant_tracks_.InternalSwap(&other->_impl_.participant_tracks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  swap(_impl_.subscribe_, other->_impl_.subscribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscriptionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[15]);
}

// ===================================================================

class UpdateSubscriptionsResponse::_Internal {
 public:
};

UpdateSubscriptionsResponse::UpdateSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateSubscriptionsResponse)
}
UpdateSubscriptionsResponse::UpdateSubscriptionsResponse(const UpdateSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateSubscriptionsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateSubscriptionsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSubscriptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSubscriptionsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscriptionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[16]);
}

// ===================================================================

class SendDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendDataRequest>()._impl_._has_bits_);
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SendDataRequest::SendDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.SendDataRequest)
}
SendDataRequest::SendDataRequest(const SendDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_sids_){from._impl_.destination_sids_}
    , decltype(_impl_.destination_identities_){from._impl_.destination_identities_}
    , decltype(_impl_.room_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:livekit.SendDataRequest)
}

inline void SendDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_sids_){arena}
    , decltype(_impl_.destination_identities_){arena}
    , decltype(_impl_.room_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.kind_){0}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendDataRequest::~SendDataRequest() {
  // @@protoc_insertion_point(destructor:livekit.SendDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_sids_.~RepeatedPtrField();
  _impl_.destination_identities_.~RepeatedPtrField();
  _impl_.room_.Destroy();
  _impl_.data_.Destroy();
  _impl_.topic_.Destroy();
  _impl_.nonce_.Destroy();
}

void SendDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SendDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_sids_.Clear();
  _impl_.destination_identities_.Clear();
  _impl_.room_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  _impl_.nonce_.ClearToEmpty();
  _impl_.kind_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SendDataRequest.room"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.DataPacket.Kind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::livekit::DataPacket_Kind>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_sids = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SendDataRequest.destination_sids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string topic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.SendDataRequest.topic"));
        } else
          goto handle_unusual;
        continue;
      // repeated string destination_identities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_destination_identities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.SendDataRequest.destination_identities"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes nonce = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SendDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SendDataRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .livekit.DataPacket.Kind kind = 3;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  // repeated string destination_sids = 4 [deprecated = true];
  for (int i = 0, n = this->_internal_destination_sids_size(); i < n; i++) {
    const auto& s = this->_internal_destination_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SendDataRequest.destination_sids");
    target = stream->WriteString(4, s, target);
  }

  // optional string topic = 5;
  if (_internal_has_topic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SendDataRequest.topic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_topic(), target);
  }

  // repeated string destination_identities = 6;
  for (int i = 0, n = this->_internal_destination_identities_size(); i < n; i++) {
    const auto& s = this->_internal_destination_identities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.SendDataRequest.destination_identities");
    target = stream->WriteString(6, s, target);
  }

  // bytes nonce = 7;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SendDataRequest)
  return target;
}

size_t SendDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.SendDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_sids = 4 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_sids_.size());
  for (int i = 0, n = _impl_.destination_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_sids_.Get(i));
  }

  // repeated string destination_identities = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.destination_identities_.size());
  for (int i = 0, n = _impl_.destination_identities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.destination_identities_.Get(i));
  }

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // optional string topic = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // bytes nonce = 7;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // .livekit.DataPacket.Kind kind = 3;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendDataRequest::GetClassData() const { return &_class_data_; }


void SendDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendDataRequest*>(&to_msg);
  auto& from = static_cast<const SendDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SendDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destination_sids_.MergeFrom(from._impl_.destination_sids_);
  _this->_impl_.destination_identities_.MergeFrom(from._impl_.destination_identities_);
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_topic()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendDataRequest::CopyFrom(const SendDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SendDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataRequest::IsInitialized() const {
  return true;
}

void SendDataRequest::InternalSwap(SendDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_sids_.InternalSwap(&other->_impl_.destination_sids_);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[17]);
}

// ===================================================================

class SendDataResponse::_Internal {
 public:
};

SendDataResponse::SendDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.SendDataResponse)
}
SendDataResponse::SendDataResponse(const SendDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SendDataResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.SendDataResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendDataResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SendDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[18]);
}

// ===================================================================

class UpdateRoomMetadataRequest::_Internal {
 public:
};

UpdateRoomMetadataRequest::UpdateRoomMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateRoomMetadataRequest)
}
UpdateRoomMetadataRequest::UpdateRoomMetadataRequest(const UpdateRoomMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRoomMetadataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.UpdateRoomMetadataRequest)
}

inline void UpdateRoomMetadataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){}
    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateRoomMetadataRequest::~UpdateRoomMetadataRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateRoomMetadataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRoomMetadataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_.Destroy();
  _impl_.metadata_.Destroy();
}

void UpdateRoomMetadataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRoomMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateRoomMetadataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRoomMetadataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateRoomMetadataRequest.room"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.UpdateRoomMetadataRequest.metadata"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRoomMetadataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateRoomMetadataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateRoomMetadataRequest.room");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room(), target);
  }

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.UpdateRoomMetadataRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateRoomMetadataRequest)
  return target;
}

size_t UpdateRoomMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.UpdateRoomMetadataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room = 1;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRoomMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRoomMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRoomMetadataRequest::GetClassData() const { return &_class_data_; }


void UpdateRoomMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRoomMetadataRequest*>(&to_msg);
  auto& from = static_cast<const UpdateRoomMetadataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateRoomMetadataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRoomMetadataRequest::CopyFrom(const UpdateRoomMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateRoomMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomMetadataRequest::IsInitialized() const {
  return true;
}

void UpdateRoomMetadataRequest::InternalSwap(UpdateRoomMetadataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRoomMetadataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[19]);
}

// ===================================================================

class RoomConfiguration::_Internal {
 public:
  static const ::livekit::RoomEgress& egress(const RoomConfiguration* msg);
};

const ::livekit::RoomEgress&
RoomConfiguration::_Internal::egress(const RoomConfiguration* msg) {
  return *msg->_impl_.egress_;
}
void RoomConfiguration::clear_agents() {
  _impl_.agents_.Clear();
}
RoomConfiguration::RoomConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomConfiguration)
}
RoomConfiguration::RoomConfiguration(const RoomConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agents_){from._impl_.agents_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.egress_){nullptr}
    , decltype(_impl_.empty_timeout_){}
    , decltype(_impl_.departure_timeout_){}
    , decltype(_impl_.max_participants_){}
    , decltype(_impl_.min_playout_delay_){}
    , decltype(_impl_.max_playout_delay_){}
    , decltype(_impl_.sync_streams_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_egress()) {
    _this->_impl_.egress_ = new ::livekit::RoomEgress(*from._impl_.egress_);
  }
  ::memcpy(&_impl_.empty_timeout_, &from._impl_.empty_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sync_streams_) -
    reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.sync_streams_));
  // @@protoc_insertion_point(copy_constructor:livekit.RoomConfiguration)
}

inline void RoomConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agents_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.egress_){nullptr}
    , decltype(_impl_.empty_timeout_){0u}
    , decltype(_impl_.departure_timeout_){0u}
    , decltype(_impl_.max_participants_){0u}
    , decltype(_impl_.min_playout_delay_){0u}
    , decltype(_impl_.max_playout_delay_){0u}
    , decltype(_impl_.sync_streams_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomConfiguration::~RoomConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.RoomConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agents_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.egress_;
}

void RoomConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agents_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.egress_ != nullptr) {
    delete _impl_.egress_;
  }
  _impl_.egress_ = nullptr;
  ::memset(&_impl_.empty_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sync_streams_) -
      reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.sync_streams_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.RoomConfiguration.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 empty_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.empty_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 departure_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.departure_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_participants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.RoomEgress egress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_egress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_playout_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.min_playout_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_playout_delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.max_playout_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sync_streams = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.sync_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.RoomAgentDispatch agents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.RoomConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 empty_timeout = 2;
  if (this->_internal_empty_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_empty_timeout(), target);
  }

  // uint32 departure_timeout = 3;
  if (this->_internal_departure_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_departure_timeout(), target);
  }

  // uint32 max_participants = 4;
  if (this->_internal_max_participants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_participants(), target);
  }

  // .livekit.RoomEgress egress = 5;
  if (this->_internal_has_egress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::egress(this),
        _Internal::egress(this).GetCachedSize(), target, stream);
  }

  // uint32 min_playout_delay = 7;
  if (this->_internal_min_playout_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_min_playout_delay(), target);
  }

  // uint32 max_playout_delay = 8;
  if (this->_internal_max_playout_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_playout_delay(), target);
  }

  // bool sync_streams = 9;
  if (this->_internal_sync_streams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_sync_streams(), target);
  }

  // repeated .livekit.RoomAgentDispatch agents = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agents_size()); i < n; i++) {
    const auto& repfield = this->_internal_agents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomConfiguration)
  return target;
}

size_t RoomConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.RoomConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.RoomAgentDispatch agents = 10;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->_impl_.agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .livekit.RoomEgress egress = 5;
  if (this->_internal_has_egress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.egress_);
  }

  // uint32 empty_timeout = 2;
  if (this->_internal_empty_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empty_timeout());
  }

  // uint32 departure_timeout = 3;
  if (this->_internal_departure_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_departure_timeout());
  }

  // uint32 max_participants = 4;
  if (this->_internal_max_participants() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_participants());
  }

  // uint32 min_playout_delay = 7;
  if (this->_internal_min_playout_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_playout_delay());
  }

  // uint32 max_playout_delay = 8;
  if (this->_internal_max_playout_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_playout_delay());
  }

  // bool sync_streams = 9;
  if (this->_internal_sync_streams() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomConfiguration::GetClassData() const { return &_class_data_; }


void RoomConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomConfiguration*>(&to_msg);
  auto& from = static_cast<const RoomConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agents_.MergeFrom(from._impl_.agents_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_egress()) {
    _this->_internal_mutable_egress()->::livekit::RoomEgress::MergeFrom(
        from._internal_egress());
  }
  if (from._internal_empty_timeout() != 0) {
    _this->_internal_set_empty_timeout(from._internal_empty_timeout());
  }
  if (from._internal_departure_timeout() != 0) {
    _this->_internal_set_departure_timeout(from._internal_departure_timeout());
  }
  if (from._internal_max_participants() != 0) {
    _this->_internal_set_max_participants(from._internal_max_participants());
  }
  if (from._internal_min_playout_delay() != 0) {
    _this->_internal_set_min_playout_delay(from._internal_min_playout_delay());
  }
  if (from._internal_max_playout_delay() != 0) {
    _this->_internal_set_max_playout_delay(from._internal_max_playout_delay());
  }
  if (from._internal_sync_streams() != 0) {
    _this->_internal_set_sync_streams(from._internal_sync_streams());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomConfiguration::CopyFrom(const RoomConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomConfiguration::IsInitialized() const {
  return true;
}

void RoomConfiguration::InternalSwap(RoomConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomConfiguration, _impl_.sync_streams_)
      + sizeof(RoomConfiguration::_impl_.sync_streams_)
      - PROTOBUF_FIELD_OFFSET(RoomConfiguration, _impl_.egress_)>(
          reinterpret_cast<char*>(&_impl_.egress_),
          reinterpret_cast<char*>(&other->_impl_.egress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5froom_2eproto_getter, &descriptor_table_livekit_5froom_2eproto_once,
      file_level_metadata_livekit_5froom_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::CreateRoomRequest*
Arena::CreateMaybeMessage< ::livekit::CreateRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::CreateRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RoomEgress*
Arena::CreateMaybeMessage< ::livekit::RoomEgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomEgress >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RoomAgent*
Arena::CreateMaybeMessage< ::livekit::RoomAgent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomAgent >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListRoomsRequest*
Arena::CreateMaybeMessage< ::livekit::ListRoomsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListRoomsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListRoomsResponse*
Arena::CreateMaybeMessage< ::livekit::ListRoomsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListRoomsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DeleteRoomRequest*
Arena::CreateMaybeMessage< ::livekit::DeleteRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DeleteRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::DeleteRoomResponse*
Arena::CreateMaybeMessage< ::livekit::DeleteRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::DeleteRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListParticipantsRequest*
Arena::CreateMaybeMessage< ::livekit::ListParticipantsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListParticipantsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::ListParticipantsResponse*
Arena::CreateMaybeMessage< ::livekit::ListParticipantsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::ListParticipantsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RoomParticipantIdentity*
Arena::CreateMaybeMessage< ::livekit::RoomParticipantIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomParticipantIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RemoveParticipantResponse*
Arena::CreateMaybeMessage< ::livekit::RemoveParticipantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RemoveParticipantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::MuteRoomTrackRequest*
Arena::CreateMaybeMessage< ::livekit::MuteRoomTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MuteRoomTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::MuteRoomTrackResponse*
Arena::CreateMaybeMessage< ::livekit::MuteRoomTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MuteRoomTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateParticipantRequest_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateParticipantRequest*
Arena::CreateMaybeMessage< ::livekit::UpdateParticipantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateParticipantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateSubscriptionsRequest*
Arena::CreateMaybeMessage< ::livekit::UpdateSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateSubscriptionsResponse*
Arena::CreateMaybeMessage< ::livekit::UpdateSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SendDataRequest*
Arena::CreateMaybeMessage< ::livekit::SendDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SendDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::SendDataResponse*
Arena::CreateMaybeMessage< ::livekit::SendDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::SendDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::UpdateRoomMetadataRequest*
Arena::CreateMaybeMessage< ::livekit::UpdateRoomMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::UpdateRoomMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::RoomConfiguration*
Arena::CreateMaybeMessage< ::livekit::RoomConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::RoomConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
