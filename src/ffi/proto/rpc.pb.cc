// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
namespace proto {
PROTOBUF_CONSTEXPR RpcError::RpcError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0u} {}
struct RpcErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcErrorDefaultTypeInternal() {}
  union {
    RpcError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcErrorDefaultTypeInternal _RpcError_default_instance_;
PROTOBUF_CONSTEXPR PerformRpcRequest::PerformRpcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.response_timeout_ms_)*/0u} {}
struct PerformRpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformRpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformRpcRequestDefaultTypeInternal() {}
  union {
    PerformRpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformRpcRequestDefaultTypeInternal _PerformRpcRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterRpcMethodRequest::RegisterRpcMethodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct RegisterRpcMethodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRpcMethodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRpcMethodRequestDefaultTypeInternal() {}
  union {
    RegisterRpcMethodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRpcMethodRequestDefaultTypeInternal _RegisterRpcMethodRequest_default_instance_;
PROTOBUF_CONSTEXPR UnregisterRpcMethodRequest::UnregisterRpcMethodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}} {}
struct UnregisterRpcMethodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnregisterRpcMethodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnregisterRpcMethodRequestDefaultTypeInternal() {}
  union {
    UnregisterRpcMethodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnregisterRpcMethodRequestDefaultTypeInternal _UnregisterRpcMethodRequest_default_instance_;
PROTOBUF_CONSTEXPR RpcMethodInvocationResponseRequest::RpcMethodInvocationResponseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.invocation_id_)*/uint64_t{0u}} {}
struct RpcMethodInvocationResponseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMethodInvocationResponseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMethodInvocationResponseRequestDefaultTypeInternal() {}
  union {
    RpcMethodInvocationResponseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMethodInvocationResponseRequestDefaultTypeInternal _RpcMethodInvocationResponseRequest_default_instance_;
PROTOBUF_CONSTEXPR PerformRpcResponse::PerformRpcResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PerformRpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformRpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformRpcResponseDefaultTypeInternal() {}
  union {
    PerformRpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformRpcResponseDefaultTypeInternal _PerformRpcResponse_default_instance_;
PROTOBUF_CONSTEXPR RegisterRpcMethodResponse::RegisterRpcMethodResponse(
    ::_pbi::ConstantInitialized) {}
struct RegisterRpcMethodResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRpcMethodResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRpcMethodResponseDefaultTypeInternal() {}
  union {
    RegisterRpcMethodResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRpcMethodResponseDefaultTypeInternal _RegisterRpcMethodResponse_default_instance_;
PROTOBUF_CONSTEXPR UnregisterRpcMethodResponse::UnregisterRpcMethodResponse(
    ::_pbi::ConstantInitialized) {}
struct UnregisterRpcMethodResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnregisterRpcMethodResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnregisterRpcMethodResponseDefaultTypeInternal() {}
  union {
    UnregisterRpcMethodResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnregisterRpcMethodResponseDefaultTypeInternal _UnregisterRpcMethodResponse_default_instance_;
PROTOBUF_CONSTEXPR RpcMethodInvocationResponseResponse::RpcMethodInvocationResponseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RpcMethodInvocationResponseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMethodInvocationResponseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMethodInvocationResponseResponseDefaultTypeInternal() {}
  union {
    RpcMethodInvocationResponseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMethodInvocationResponseResponseDefaultTypeInternal _RpcMethodInvocationResponseResponse_default_instance_;
PROTOBUF_CONSTEXPR PerformRpcCallback::PerformRpcCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct PerformRpcCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformRpcCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformRpcCallbackDefaultTypeInternal() {}
  union {
    PerformRpcCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformRpcCallbackDefaultTypeInternal _PerformRpcCallback_default_instance_;
PROTOBUF_CONSTEXPR RpcMethodInvocationEvent::RpcMethodInvocationEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caller_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.invocation_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_timeout_ms_)*/0u} {}
struct RpcMethodInvocationEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMethodInvocationEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMethodInvocationEventDefaultTypeInternal() {}
  union {
    RpcMethodInvocationEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMethodInvocationEventDefaultTypeInternal _RpcMethodInvocationEvent_default_instance_;
}  // namespace proto
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_rpc_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const uint32_t TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcError, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcError, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcError, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcError, _impl_.data_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _impl_.destination_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcRequest, _impl_.response_timeout_ms_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RegisterRpcMethodRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RegisterRpcMethodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RegisterRpcMethodRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RegisterRpcMethodRequest, _impl_.method_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnregisterRpcMethodRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnregisterRpcMethodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnregisterRpcMethodRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnregisterRpcMethodRequest, _impl_.method_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseRequest, _impl_.invocation_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseRequest, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseRequest, _impl_.error_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcResponse, _impl_.async_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RegisterRpcMethodResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::UnregisterRpcMethodResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationResponseResponse, _impl_.error_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcCallback, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::PerformRpcCallback, _impl_.error_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.invocation_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.caller_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::RpcMethodInvocationEvent, _impl_.response_timeout_ms_),
  4,
  5,
  0,
  1,
  2,
  3,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::livekit::proto::RpcError)},
  { 12, 23, -1, sizeof(::livekit::proto::PerformRpcRequest)},
  { 28, 36, -1, sizeof(::livekit::proto::RegisterRpcMethodRequest)},
  { 38, 46, -1, sizeof(::livekit::proto::UnregisterRpcMethodRequest)},
  { 48, 58, -1, sizeof(::livekit::proto::RpcMethodInvocationResponseRequest)},
  { 62, 69, -1, sizeof(::livekit::proto::PerformRpcResponse)},
  { 70, -1, -1, sizeof(::livekit::proto::RegisterRpcMethodResponse)},
  { 76, -1, -1, sizeof(::livekit::proto::UnregisterRpcMethodResponse)},
  { 82, 89, -1, sizeof(::livekit::proto::RpcMethodInvocationResponseResponse)},
  { 90, 99, -1, sizeof(::livekit::proto::PerformRpcCallback)},
  { 102, 115, -1, sizeof(::livekit::proto::RpcMethodInvocationEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::proto::_RpcError_default_instance_._instance,
  &::livekit::proto::_PerformRpcRequest_default_instance_._instance,
  &::livekit::proto::_RegisterRpcMethodRequest_default_instance_._instance,
  &::livekit::proto::_UnregisterRpcMethodRequest_default_instance_._instance,
  &::livekit::proto::_RpcMethodInvocationResponseRequest_default_instance_._instance,
  &::livekit::proto::_PerformRpcResponse_default_instance_._instance,
  &::livekit::proto::_RegisterRpcMethodResponse_default_instance_._instance,
  &::livekit::proto::_UnregisterRpcMethodResponse_default_instance_._instance,
  &::livekit::proto::_RpcMethodInvocationResponseResponse_default_instance_._instance,
  &::livekit::proto::_PerformRpcCallback_default_instance_._instance,
  &::livekit::proto::_RpcMethodInvocationEvent_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\rlivekit.proto\"7\n\010RpcError\022\014"
  "\n\004code\030\001 \002(\r\022\017\n\007message\030\002 \002(\t\022\014\n\004data\030\003 "
  "\001(\t\"\221\001\n\021PerformRpcRequest\022 \n\030local_parti"
  "cipant_handle\030\001 \002(\004\022\034\n\024destination_ident"
  "ity\030\002 \002(\t\022\016\n\006method\030\003 \002(\t\022\017\n\007payload\030\004 \002"
  "(\t\022\033\n\023response_timeout_ms\030\005 \001(\r\"L\n\030Regis"
  "terRpcMethodRequest\022 \n\030local_participant"
  "_handle\030\001 \002(\004\022\016\n\006method\030\002 \002(\t\"N\n\032Unregis"
  "terRpcMethodRequest\022 \n\030local_participant"
  "_handle\030\001 \002(\004\022\016\n\006method\030\002 \002(\t\"\226\001\n\"RpcMet"
  "hodInvocationResponseRequest\022 \n\030local_pa"
  "rticipant_handle\030\001 \002(\004\022\025\n\rinvocation_id\030"
  "\002 \002(\004\022\017\n\007payload\030\003 \001(\t\022&\n\005error\030\004 \001(\0132\027."
  "livekit.proto.RpcError\"&\n\022PerformRpcResp"
  "onse\022\020\n\010async_id\030\001 \002(\004\"\033\n\031RegisterRpcMet"
  "hodResponse\"\035\n\033UnregisterRpcMethodRespon"
  "se\"4\n#RpcMethodInvocationResponseRespons"
  "e\022\r\n\005error\030\001 \001(\t\"_\n\022PerformRpcCallback\022\020"
  "\n\010async_id\030\001 \002(\004\022\017\n\007payload\030\002 \001(\t\022&\n\005err"
  "or\030\003 \001(\0132\027.livekit.proto.RpcError\"\276\001\n\030Rp"
  "cMethodInvocationEvent\022 \n\030local_particip"
  "ant_handle\030\001 \002(\004\022\025\n\rinvocation_id\030\002 \002(\004\022"
  "\016\n\006method\030\003 \002(\t\022\022\n\nrequest_id\030\004 \002(\t\022\027\n\017c"
  "aller_identity\030\005 \002(\t\022\017\n\007payload\030\006 \002(\t\022\033\n"
  "\023response_timeout_ms\030\007 \002(\rB\020\252\002\rLiveKit.P"
  "roto"
  ;
static ::_pbi::once_flag descriptor_table_rpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_2eproto = {
    false, false, 1004, descriptor_table_protodef_rpc_2eproto,
    "rpc.proto",
    &descriptor_table_rpc_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
    file_level_metadata_rpc_2eproto, file_level_enum_descriptors_rpc_2eproto,
    file_level_service_descriptors_rpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_2eproto_getter() {
  return &descriptor_table_rpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace livekit {
namespace proto {

// ===================================================================

class RpcError::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcError>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

RpcError::RpcError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RpcError)
}
RpcError::RpcError(const RpcError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RpcError)
}

inline void RpcError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcError::~RpcError() {
  // @@protoc_insertion_point(destructor:livekit.proto.RpcError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.data_.Destroy();
}

void RpcError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcError::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RpcError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcError.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcError.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RpcError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional string data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcError.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RpcError)
  return target;
}

size_t RpcError::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RpcError)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_code()) {
    // required uint32 code = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return total_size;
}
size_t RpcError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RpcError)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required uint32 code = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcError::GetClassData() const { return &_class_data_; }


void RpcError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcError*>(&to_msg);
  auto& from = static_cast<const RpcError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RpcError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcError::CopyFrom(const RpcError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RpcError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcError::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RpcError::InternalSwap(RpcError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[0]);
}

// ===================================================================

class PerformRpcRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformRpcRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_destination_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PerformRpcRequest::PerformRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PerformRpcRequest)
}
PerformRpcRequest::PerformRpcRequest(const PerformRpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerformRpcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identity_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.response_timeout_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destination_identity()) {
    _this->_impl_.destination_identity_.Set(from._internal_destination_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_timeout_ms_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.response_timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PerformRpcRequest)
}

inline void PerformRpcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_identity_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.response_timeout_ms_){0u}
  };
  _impl_.destination_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerformRpcRequest::~PerformRpcRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.PerformRpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformRpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_identity_.Destroy();
  _impl_.method_.Destroy();
  _impl_.payload_.Destroy();
}

void PerformRpcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerformRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PerformRpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destination_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_timeout_ms_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.response_timeout_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerformRpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string destination_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PerformRpcRequest.destination_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PerformRpcRequest.method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PerformRpcRequest.payload");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 response_timeout_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_response_timeout_ms(&has_bits);
          _impl_.response_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformRpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PerformRpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string destination_identity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_destination_identity().data(), static_cast<int>(this->_internal_destination_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PerformRpcRequest.destination_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination_identity(), target);
  }

  // required string method = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PerformRpcRequest.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // required string payload = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PerformRpcRequest.payload");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload(), target);
  }

  // optional uint32 response_timeout_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_response_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PerformRpcRequest)
  return target;
}

size_t PerformRpcRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.PerformRpcRequest)
  size_t total_size = 0;

  if (_internal_has_destination_identity()) {
    // required string destination_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_identity());
  }

  if (_internal_has_method()) {
    // required string method = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  if (_internal_has_payload()) {
    // required string payload = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t PerformRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PerformRpcRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string destination_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_identity());

    // required string method = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());

    // required string payload = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 response_timeout_ms = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_timeout_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerformRpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerformRpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerformRpcRequest::GetClassData() const { return &_class_data_; }


void PerformRpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerformRpcRequest*>(&to_msg);
  auto& from = static_cast<const PerformRpcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PerformRpcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destination_identity(from._internal_destination_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.response_timeout_ms_ = from._impl_.response_timeout_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerformRpcRequest::CopyFrom(const PerformRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PerformRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformRpcRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PerformRpcRequest::InternalSwap(PerformRpcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_identity_, lhs_arena,
      &other->_impl_.destination_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerformRpcRequest, _impl_.response_timeout_ms_)
      + sizeof(PerformRpcRequest::_impl_.response_timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(PerformRpcRequest, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformRpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[1]);
}

// ===================================================================

class RegisterRpcMethodRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterRpcMethodRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RegisterRpcMethodRequest::RegisterRpcMethodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RegisterRpcMethodRequest)
}
RegisterRpcMethodRequest::RegisterRpcMethodRequest(const RegisterRpcMethodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterRpcMethodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RegisterRpcMethodRequest)
}

inline void RegisterRpcMethodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterRpcMethodRequest::~RegisterRpcMethodRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.RegisterRpcMethodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRpcMethodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
}

void RegisterRpcMethodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterRpcMethodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RegisterRpcMethodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.method_.ClearNonDefaultToEmpty();
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRpcMethodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RegisterRpcMethodRequest.method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRpcMethodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RegisterRpcMethodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string method = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RegisterRpcMethodRequest.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RegisterRpcMethodRequest)
  return target;
}

size_t RegisterRpcMethodRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RegisterRpcMethodRequest)
  size_t total_size = 0;

  if (_internal_has_method()) {
    // required string method = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t RegisterRpcMethodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RegisterRpcMethodRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string method = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRpcMethodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterRpcMethodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRpcMethodRequest::GetClassData() const { return &_class_data_; }


void RegisterRpcMethodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterRpcMethodRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRpcMethodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RegisterRpcMethodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRpcMethodRequest::CopyFrom(const RegisterRpcMethodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RegisterRpcMethodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRpcMethodRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RegisterRpcMethodRequest::InternalSwap(RegisterRpcMethodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRpcMethodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[2]);
}

// ===================================================================

class UnregisterRpcMethodRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnregisterRpcMethodRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UnregisterRpcMethodRequest::UnregisterRpcMethodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.UnregisterRpcMethodRequest)
}
UnregisterRpcMethodRequest::UnregisterRpcMethodRequest(const UnregisterRpcMethodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnregisterRpcMethodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.local_participant_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.UnregisterRpcMethodRequest)
}

inline void UnregisterRpcMethodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnregisterRpcMethodRequest::~UnregisterRpcMethodRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.UnregisterRpcMethodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnregisterRpcMethodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
}

void UnregisterRpcMethodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnregisterRpcMethodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.UnregisterRpcMethodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.method_.ClearNonDefaultToEmpty();
  }
  _impl_.local_participant_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnregisterRpcMethodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.UnregisterRpcMethodRequest.method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnregisterRpcMethodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.UnregisterRpcMethodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required string method = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.UnregisterRpcMethodRequest.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.UnregisterRpcMethodRequest)
  return target;
}

size_t UnregisterRpcMethodRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.UnregisterRpcMethodRequest)
  size_t total_size = 0;

  if (_internal_has_method()) {
    // required string method = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  return total_size;
}
size_t UnregisterRpcMethodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.UnregisterRpcMethodRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string method = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnregisterRpcMethodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnregisterRpcMethodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnregisterRpcMethodRequest::GetClassData() const { return &_class_data_; }


void UnregisterRpcMethodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnregisterRpcMethodRequest*>(&to_msg);
  auto& from = static_cast<const UnregisterRpcMethodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.UnregisterRpcMethodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnregisterRpcMethodRequest::CopyFrom(const UnregisterRpcMethodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.UnregisterRpcMethodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterRpcMethodRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnregisterRpcMethodRequest::InternalSwap(UnregisterRpcMethodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.local_participant_handle_, other->_impl_.local_participant_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterRpcMethodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[3]);
}

// ===================================================================

class RpcMethodInvocationResponseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMethodInvocationResponseRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invocation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RpcError& error(const RpcMethodInvocationResponseRequest* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::livekit::proto::RpcError&
RpcMethodInvocationResponseRequest::_Internal::error(const RpcMethodInvocationResponseRequest* msg) {
  return *msg->_impl_.error_;
}
RpcMethodInvocationResponseRequest::RpcMethodInvocationResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RpcMethodInvocationResponseRequest)
}
RpcMethodInvocationResponseRequest::RpcMethodInvocationResponseRequest(const RpcMethodInvocationResponseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcMethodInvocationResponseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.invocation_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::livekit::proto::RpcError(*from._impl_.error_);
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invocation_id_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.invocation_id_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RpcMethodInvocationResponseRequest)
}

inline void RpcMethodInvocationResponseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.invocation_id_){uint64_t{0u}}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcMethodInvocationResponseRequest::~RpcMethodInvocationResponseRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.RpcMethodInvocationResponseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMethodInvocationResponseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void RpcMethodInvocationResponseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcMethodInvocationResponseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RpcMethodInvocationResponseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.invocation_id_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.invocation_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMethodInvocationResponseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 invocation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_invocation_id(&has_bits);
          _impl_.invocation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcMethodInvocationResponseRequest.payload");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.RpcError error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMethodInvocationResponseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RpcMethodInvocationResponseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required uint64 invocation_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_invocation_id(), target);
  }

  // optional string payload = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcMethodInvocationResponseRequest.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // optional .livekit.proto.RpcError error = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RpcMethodInvocationResponseRequest)
  return target;
}

size_t RpcMethodInvocationResponseRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RpcMethodInvocationResponseRequest)
  size_t total_size = 0;

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_invocation_id()) {
    // required uint64 invocation_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_invocation_id());
  }

  return total_size;
}
size_t RpcMethodInvocationResponseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RpcMethodInvocationResponseRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required uint64 invocation_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_invocation_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload());
    }

    // optional .livekit.proto.RpcError error = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMethodInvocationResponseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcMethodInvocationResponseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMethodInvocationResponseRequest::GetClassData() const { return &_class_data_; }


void RpcMethodInvocationResponseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcMethodInvocationResponseRequest*>(&to_msg);
  auto& from = static_cast<const RpcMethodInvocationResponseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RpcMethodInvocationResponseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::livekit::proto::RpcError::MergeFrom(
          from._internal_error());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.invocation_id_ = from._impl_.invocation_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMethodInvocationResponseRequest::CopyFrom(const RpcMethodInvocationResponseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RpcMethodInvocationResponseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMethodInvocationResponseRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_error()) {
    if (!_impl_.error_->IsInitialized()) return false;
  }
  return true;
}

void RpcMethodInvocationResponseRequest::InternalSwap(RpcMethodInvocationResponseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMethodInvocationResponseRequest, _impl_.invocation_id_)
      + sizeof(RpcMethodInvocationResponseRequest::_impl_.invocation_id_)
      - PROTOBUF_FIELD_OFFSET(RpcMethodInvocationResponseRequest, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMethodInvocationResponseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[4]);
}

// ===================================================================

class PerformRpcResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformRpcResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PerformRpcResponse::PerformRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PerformRpcResponse)
}
PerformRpcResponse::PerformRpcResponse(const PerformRpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerformRpcResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PerformRpcResponse)
}

inline void PerformRpcResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

PerformRpcResponse::~PerformRpcResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.PerformRpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformRpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerformRpcResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerformRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PerformRpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerformRpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformRpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PerformRpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PerformRpcResponse)
  return target;
}

size_t PerformRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PerformRpcResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerformRpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerformRpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerformRpcResponse::GetClassData() const { return &_class_data_; }


void PerformRpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerformRpcResponse*>(&to_msg);
  auto& from = static_cast<const PerformRpcResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PerformRpcResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerformRpcResponse::CopyFrom(const PerformRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PerformRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformRpcResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PerformRpcResponse::InternalSwap(PerformRpcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformRpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[5]);
}

// ===================================================================

class RegisterRpcMethodResponse::_Internal {
 public:
};

RegisterRpcMethodResponse::RegisterRpcMethodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RegisterRpcMethodResponse)
}
RegisterRpcMethodResponse::RegisterRpcMethodResponse(const RegisterRpcMethodResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RegisterRpcMethodResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RegisterRpcMethodResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRpcMethodResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRpcMethodResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RegisterRpcMethodResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[6]);
}

// ===================================================================

class UnregisterRpcMethodResponse::_Internal {
 public:
};

UnregisterRpcMethodResponse::UnregisterRpcMethodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.UnregisterRpcMethodResponse)
}
UnregisterRpcMethodResponse::UnregisterRpcMethodResponse(const UnregisterRpcMethodResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UnregisterRpcMethodResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.UnregisterRpcMethodResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnregisterRpcMethodResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnregisterRpcMethodResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UnregisterRpcMethodResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[7]);
}

// ===================================================================

class RpcMethodInvocationResponseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMethodInvocationResponseResponse>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RpcMethodInvocationResponseResponse::RpcMethodInvocationResponseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RpcMethodInvocationResponseResponse)
}
RpcMethodInvocationResponseResponse::RpcMethodInvocationResponseResponse(const RpcMethodInvocationResponseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcMethodInvocationResponseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RpcMethodInvocationResponseResponse)
}

inline void RpcMethodInvocationResponseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcMethodInvocationResponseResponse::~RpcMethodInvocationResponseResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.RpcMethodInvocationResponseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMethodInvocationResponseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void RpcMethodInvocationResponseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcMethodInvocationResponseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RpcMethodInvocationResponseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMethodInvocationResponseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcMethodInvocationResponseResponse.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMethodInvocationResponseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RpcMethodInvocationResponseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcMethodInvocationResponseResponse.error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RpcMethodInvocationResponseResponse)
  return target;
}

size_t RpcMethodInvocationResponseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RpcMethodInvocationResponseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMethodInvocationResponseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcMethodInvocationResponseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMethodInvocationResponseResponse::GetClassData() const { return &_class_data_; }


void RpcMethodInvocationResponseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcMethodInvocationResponseResponse*>(&to_msg);
  auto& from = static_cast<const RpcMethodInvocationResponseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RpcMethodInvocationResponseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMethodInvocationResponseResponse::CopyFrom(const RpcMethodInvocationResponseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RpcMethodInvocationResponseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMethodInvocationResponseResponse::IsInitialized() const {
  return true;
}

void RpcMethodInvocationResponseResponse::InternalSwap(RpcMethodInvocationResponseResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMethodInvocationResponseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[8]);
}

// ===================================================================

class PerformRpcCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformRpcCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::RpcError& error(const PerformRpcCallback* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::livekit::proto::RpcError&
PerformRpcCallback::_Internal::error(const PerformRpcCallback* msg) {
  return *msg->_impl_.error_;
}
PerformRpcCallback::PerformRpcCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.PerformRpcCallback)
}
PerformRpcCallback::PerformRpcCallback(const PerformRpcCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerformRpcCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::livekit::proto::RpcError(*from._impl_.error_);
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.PerformRpcCallback)
}

inline void PerformRpcCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerformRpcCallback::~PerformRpcCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.PerformRpcCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformRpcCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void PerformRpcCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerformRpcCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.PerformRpcCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerformRpcCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.PerformRpcCallback.payload");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .livekit.proto.RpcError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformRpcCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.PerformRpcCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.PerformRpcCallback.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // optional .livekit.proto.RpcError error = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.PerformRpcCallback)
  return target;
}

size_t PerformRpcCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.PerformRpcCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload());
    }

    // optional .livekit.proto.RpcError error = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerformRpcCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerformRpcCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerformRpcCallback::GetClassData() const { return &_class_data_; }


void PerformRpcCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerformRpcCallback*>(&to_msg);
  auto& from = static_cast<const PerformRpcCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.PerformRpcCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::livekit::proto::RpcError::MergeFrom(
          from._internal_error());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerformRpcCallback::CopyFrom(const PerformRpcCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.PerformRpcCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformRpcCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_error()) {
    if (!_impl_.error_->IsInitialized()) return false;
  }
  return true;
}

void PerformRpcCallback::InternalSwap(PerformRpcCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerformRpcCallback, _impl_.async_id_)
      + sizeof(PerformRpcCallback::_impl_.async_id_)
      - PROTOBUF_FIELD_OFFSET(PerformRpcCallback, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformRpcCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[9]);
}

// ===================================================================

class RpcMethodInvocationEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMethodInvocationEvent>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_invocation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caller_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_response_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

RpcMethodInvocationEvent::RpcMethodInvocationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.RpcMethodInvocationEvent)
}
RpcMethodInvocationEvent::RpcMethodInvocationEvent(const RpcMethodInvocationEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcMethodInvocationEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.caller_identity_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.invocation_id_){}
    , decltype(_impl_.response_timeout_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caller_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caller_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caller_identity()) {
    _this->_impl_.caller_identity_.Set(from._internal_caller_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_timeout_ms_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.response_timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.RpcMethodInvocationEvent)
}

inline void RpcMethodInvocationEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.caller_identity_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.invocation_id_){uint64_t{0u}}
    , decltype(_impl_.response_timeout_ms_){0u}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caller_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caller_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcMethodInvocationEvent::~RpcMethodInvocationEvent() {
  // @@protoc_insertion_point(destructor:livekit.proto.RpcMethodInvocationEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMethodInvocationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  _impl_.request_id_.Destroy();
  _impl_.caller_identity_.Destroy();
  _impl_.payload_.Destroy();
}

void RpcMethodInvocationEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcMethodInvocationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.RpcMethodInvocationEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.request_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.caller_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_timeout_ms_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.response_timeout_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMethodInvocationEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 invocation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_invocation_id(&has_bits);
          _impl_.invocation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcMethodInvocationEvent.method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcMethodInvocationEvent.request_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string caller_identity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_caller_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcMethodInvocationEvent.caller_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.RpcMethodInvocationEvent.payload");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 response_timeout_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_response_timeout_ms(&has_bits);
          _impl_.response_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMethodInvocationEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.RpcMethodInvocationEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required uint64 invocation_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_invocation_id(), target);
  }

  // required string method = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcMethodInvocationEvent.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // required string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcMethodInvocationEvent.request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_request_id(), target);
  }

  // required string caller_identity = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caller_identity().data(), static_cast<int>(this->_internal_caller_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcMethodInvocationEvent.caller_identity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_caller_identity(), target);
  }

  // required string payload = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.RpcMethodInvocationEvent.payload");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_payload(), target);
  }

  // required uint32 response_timeout_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_response_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.RpcMethodInvocationEvent)
  return target;
}

size_t RpcMethodInvocationEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.RpcMethodInvocationEvent)
  size_t total_size = 0;

  if (_internal_has_method()) {
    // required string method = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  if (_internal_has_request_id()) {
    // required string request_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (_internal_has_caller_identity()) {
    // required string caller_identity = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller_identity());
  }

  if (_internal_has_payload()) {
    // required string payload = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_invocation_id()) {
    // required uint64 invocation_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_invocation_id());
  }

  if (_internal_has_response_timeout_ms()) {
    // required uint32 response_timeout_ms = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_timeout_ms());
  }

  return total_size;
}
size_t RpcMethodInvocationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.RpcMethodInvocationEvent)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string method = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());

    // required string request_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());

    // required string caller_identity = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller_identity());

    // required string payload = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());

    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required uint64 invocation_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_invocation_id());

    // required uint32 response_timeout_ms = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_timeout_ms());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMethodInvocationEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcMethodInvocationEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMethodInvocationEvent::GetClassData() const { return &_class_data_; }


void RpcMethodInvocationEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcMethodInvocationEvent*>(&to_msg);
  auto& from = static_cast<const RpcMethodInvocationEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.RpcMethodInvocationEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_request_id(from._internal_request_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_caller_identity(from._internal_caller_identity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.invocation_id_ = from._impl_.invocation_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.response_timeout_ms_ = from._impl_.response_timeout_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMethodInvocationEvent::CopyFrom(const RpcMethodInvocationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.RpcMethodInvocationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMethodInvocationEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RpcMethodInvocationEvent::InternalSwap(RpcMethodInvocationEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caller_identity_, lhs_arena,
      &other->_impl_.caller_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMethodInvocationEvent, _impl_.response_timeout_ms_)
      + sizeof(RpcMethodInvocationEvent::_impl_.response_timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(RpcMethodInvocationEvent, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMethodInvocationEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::proto::RpcError*
Arena::CreateMaybeMessage< ::livekit::proto::RpcError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RpcError >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PerformRpcRequest*
Arena::CreateMaybeMessage< ::livekit::proto::PerformRpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PerformRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RegisterRpcMethodRequest*
Arena::CreateMaybeMessage< ::livekit::proto::RegisterRpcMethodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RegisterRpcMethodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::UnregisterRpcMethodRequest*
Arena::CreateMaybeMessage< ::livekit::proto::UnregisterRpcMethodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::UnregisterRpcMethodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RpcMethodInvocationResponseRequest*
Arena::CreateMaybeMessage< ::livekit::proto::RpcMethodInvocationResponseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RpcMethodInvocationResponseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PerformRpcResponse*
Arena::CreateMaybeMessage< ::livekit::proto::PerformRpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PerformRpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RegisterRpcMethodResponse*
Arena::CreateMaybeMessage< ::livekit::proto::RegisterRpcMethodResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RegisterRpcMethodResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::UnregisterRpcMethodResponse*
Arena::CreateMaybeMessage< ::livekit::proto::UnregisterRpcMethodResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::UnregisterRpcMethodResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RpcMethodInvocationResponseResponse*
Arena::CreateMaybeMessage< ::livekit::proto::RpcMethodInvocationResponseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RpcMethodInvocationResponseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::PerformRpcCallback*
Arena::CreateMaybeMessage< ::livekit::proto::PerformRpcCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::PerformRpcCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::RpcMethodInvocationEvent*
Arena::CreateMaybeMessage< ::livekit::proto::RpcMethodInvocationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::RpcMethodInvocationEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
