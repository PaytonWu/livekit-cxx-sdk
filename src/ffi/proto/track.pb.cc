// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track.proto

#include "track.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
namespace proto {
PROTOBUF_CONSTEXPR CreateVideoTrackRequest::CreateVideoTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_handle_)*/uint64_t{0u}} {}
struct CreateVideoTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateVideoTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateVideoTrackRequestDefaultTypeInternal() {}
  union {
    CreateVideoTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateVideoTrackRequestDefaultTypeInternal _CreateVideoTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateVideoTrackResponse::CreateVideoTrackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_)*/nullptr} {}
struct CreateVideoTrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateVideoTrackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateVideoTrackResponseDefaultTypeInternal() {}
  union {
    CreateVideoTrackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateVideoTrackResponseDefaultTypeInternal _CreateVideoTrackResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateAudioTrackRequest::CreateAudioTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_handle_)*/uint64_t{0u}} {}
struct CreateAudioTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAudioTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAudioTrackRequestDefaultTypeInternal() {}
  union {
    CreateAudioTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAudioTrackRequestDefaultTypeInternal _CreateAudioTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateAudioTrackResponse::CreateAudioTrackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_)*/nullptr} {}
struct CreateAudioTrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAudioTrackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAudioTrackResponseDefaultTypeInternal() {}
  union {
    CreateAudioTrackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAudioTrackResponseDefaultTypeInternal _CreateAudioTrackResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStatsRequest::GetStatsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_handle_)*/uint64_t{0u}} {}
struct GetStatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatsRequestDefaultTypeInternal() {}
  union {
    GetStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatsRequestDefaultTypeInternal _GetStatsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatsResponse::GetStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct GetStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatsResponseDefaultTypeInternal() {}
  union {
    GetStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatsResponseDefaultTypeInternal _GetStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStatsCallback::GetStatsCallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_id_)*/uint64_t{0u}} {}
struct GetStatsCallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatsCallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatsCallbackDefaultTypeInternal() {}
  union {
    GetStatsCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatsCallbackDefaultTypeInternal _GetStatsCallback_default_instance_;
PROTOBUF_CONSTEXPR TrackEvent::TrackEvent(
    ::_pbi::ConstantInitialized) {}
struct TrackEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEventDefaultTypeInternal() {}
  union {
    TrackEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEventDefaultTypeInternal _TrackEvent_default_instance_;
PROTOBUF_CONSTEXPR TrackPublicationInfo::TrackPublicationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.simulcasted_)*/false
  , /*decltype(_impl_.muted_)*/false
  , /*decltype(_impl_.remote_)*/false
  , /*decltype(_impl_.encryption_type_)*/0} {}
struct TrackPublicationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPublicationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPublicationInfoDefaultTypeInternal() {}
  union {
    TrackPublicationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPublicationInfoDefaultTypeInternal _TrackPublicationInfo_default_instance_;
PROTOBUF_CONSTEXPR OwnedTrackPublication::OwnedTrackPublication(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr} {}
struct OwnedTrackPublicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnedTrackPublicationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnedTrackPublicationDefaultTypeInternal() {}
  union {
    OwnedTrackPublication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnedTrackPublicationDefaultTypeInternal _OwnedTrackPublication_default_instance_;
PROTOBUF_CONSTEXPR TrackInfo::TrackInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.stream_state_)*/0
  , /*decltype(_impl_.muted_)*/false
  , /*decltype(_impl_.remote_)*/false} {}
struct TrackInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackInfoDefaultTypeInternal() {}
  union {
    TrackInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackInfoDefaultTypeInternal _TrackInfo_default_instance_;
PROTOBUF_CONSTEXPR OwnedTrack::OwnedTrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr} {}
struct OwnedTrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnedTrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnedTrackDefaultTypeInternal() {}
  union {
    OwnedTrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnedTrackDefaultTypeInternal _OwnedTrack_default_instance_;
PROTOBUF_CONSTEXPR LocalTrackMuteRequest::LocalTrackMuteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.mute_)*/false} {}
struct LocalTrackMuteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrackMuteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrackMuteRequestDefaultTypeInternal() {}
  union {
    LocalTrackMuteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrackMuteRequestDefaultTypeInternal _LocalTrackMuteRequest_default_instance_;
PROTOBUF_CONSTEXPR LocalTrackMuteResponse::LocalTrackMuteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.muted_)*/false} {}
struct LocalTrackMuteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrackMuteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrackMuteResponseDefaultTypeInternal() {}
  union {
    LocalTrackMuteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrackMuteResponseDefaultTypeInternal _LocalTrackMuteResponse_default_instance_;
PROTOBUF_CONSTEXPR EnableRemoteTrackRequest::EnableRemoteTrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.track_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.enabled_)*/false} {}
struct EnableRemoteTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableRemoteTrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableRemoteTrackRequestDefaultTypeInternal() {}
  union {
    EnableRemoteTrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableRemoteTrackRequestDefaultTypeInternal _EnableRemoteTrackRequest_default_instance_;
PROTOBUF_CONSTEXPR EnableRemoteTrackResponse::EnableRemoteTrackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_)*/false} {}
struct EnableRemoteTrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableRemoteTrackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableRemoteTrackResponseDefaultTypeInternal() {}
  union {
    EnableRemoteTrackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableRemoteTrackResponseDefaultTypeInternal _EnableRemoteTrackResponse_default_instance_;
PROTOBUF_CONSTEXPR SetTrackSubscriptionPermissionsRequest::SetTrackSubscriptionPermissionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.local_participant_handle_)*/uint64_t{0u}
  , /*decltype(_impl_.all_participants_allowed_)*/false} {}
struct SetTrackSubscriptionPermissionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrackSubscriptionPermissionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrackSubscriptionPermissionsRequestDefaultTypeInternal() {}
  union {
    SetTrackSubscriptionPermissionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrackSubscriptionPermissionsRequestDefaultTypeInternal _SetTrackSubscriptionPermissionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ParticipantTrackPermission::ParticipantTrackPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allowed_track_sids_)*/{}
  , /*decltype(_impl_.participant_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allow_all_)*/false} {}
struct ParticipantTrackPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantTrackPermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantTrackPermissionDefaultTypeInternal() {}
  union {
    ParticipantTrackPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantTrackPermissionDefaultTypeInternal _ParticipantTrackPermission_default_instance_;
PROTOBUF_CONSTEXPR SetTrackSubscriptionPermissionsResponse::SetTrackSubscriptionPermissionsResponse(
    ::_pbi::ConstantInitialized) {}
struct SetTrackSubscriptionPermissionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrackSubscriptionPermissionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrackSubscriptionPermissionsResponseDefaultTypeInternal() {}
  union {
    SetTrackSubscriptionPermissionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrackSubscriptionPermissionsResponseDefaultTypeInternal _SetTrackSubscriptionPermissionsResponse_default_instance_;
}  // namespace proto
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_track_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_track_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_track_2eproto = nullptr;

const uint32_t TableStruct_track_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackRequest, _impl_.source_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateVideoTrackResponse, _impl_.track_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackRequest, _impl_.source_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::CreateAudioTrackResponse, _impl_.track_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsRequest, _impl_.track_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsResponse, _impl_.async_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsCallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsCallback, _impl_.async_id_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsCallback, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::GetStatsCallback, _impl_.stats_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.simulcasted_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.muted_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.remote_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackPublicationInfo, _impl_.encryption_type_),
  0,
  1,
  3,
  4,
  7,
  5,
  6,
  2,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrackPublication, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrackPublication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrackPublication, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrackPublication, _impl_.info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_.stream_state_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_.muted_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::TrackInfo, _impl_.remote_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrack, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrack, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::OwnedTrack, _impl_.info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteRequest, _impl_.track_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteRequest, _impl_.mute_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::LocalTrackMuteResponse, _impl_.muted_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackRequest, _impl_.track_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackRequest, _impl_.enabled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::EnableRemoteTrackResponse, _impl_.enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetTrackSubscriptionPermissionsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetTrackSubscriptionPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetTrackSubscriptionPermissionsRequest, _impl_.local_participant_handle_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetTrackSubscriptionPermissionsRequest, _impl_.all_participants_allowed_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetTrackSubscriptionPermissionsRequest, _impl_.permissions_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantTrackPermission, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantTrackPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantTrackPermission, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantTrackPermission, _impl_.allow_all_),
  PROTOBUF_FIELD_OFFSET(::livekit::proto::ParticipantTrackPermission, _impl_.allowed_track_sids_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::proto::SetTrackSubscriptionPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::livekit::proto::CreateVideoTrackRequest)},
  { 10, 17, -1, sizeof(::livekit::proto::CreateVideoTrackResponse)},
  { 18, 26, -1, sizeof(::livekit::proto::CreateAudioTrackRequest)},
  { 28, 35, -1, sizeof(::livekit::proto::CreateAudioTrackResponse)},
  { 36, 43, -1, sizeof(::livekit::proto::GetStatsRequest)},
  { 44, 51, -1, sizeof(::livekit::proto::GetStatsResponse)},
  { 52, 61, -1, sizeof(::livekit::proto::GetStatsCallback)},
  { 64, -1, -1, sizeof(::livekit::proto::TrackEvent)},
  { 70, 87, -1, sizeof(::livekit::proto::TrackPublicationInfo)},
  { 98, 106, -1, sizeof(::livekit::proto::OwnedTrackPublication)},
  { 108, 120, -1, sizeof(::livekit::proto::TrackInfo)},
  { 126, 134, -1, sizeof(::livekit::proto::OwnedTrack)},
  { 136, 144, -1, sizeof(::livekit::proto::LocalTrackMuteRequest)},
  { 146, 153, -1, sizeof(::livekit::proto::LocalTrackMuteResponse)},
  { 154, 162, -1, sizeof(::livekit::proto::EnableRemoteTrackRequest)},
  { 164, 171, -1, sizeof(::livekit::proto::EnableRemoteTrackResponse)},
  { 172, 181, -1, sizeof(::livekit::proto::SetTrackSubscriptionPermissionsRequest)},
  { 184, 193, -1, sizeof(::livekit::proto::ParticipantTrackPermission)},
  { 196, -1, -1, sizeof(::livekit::proto::SetTrackSubscriptionPermissionsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::proto::_CreateVideoTrackRequest_default_instance_._instance,
  &::livekit::proto::_CreateVideoTrackResponse_default_instance_._instance,
  &::livekit::proto::_CreateAudioTrackRequest_default_instance_._instance,
  &::livekit::proto::_CreateAudioTrackResponse_default_instance_._instance,
  &::livekit::proto::_GetStatsRequest_default_instance_._instance,
  &::livekit::proto::_GetStatsResponse_default_instance_._instance,
  &::livekit::proto::_GetStatsCallback_default_instance_._instance,
  &::livekit::proto::_TrackEvent_default_instance_._instance,
  &::livekit::proto::_TrackPublicationInfo_default_instance_._instance,
  &::livekit::proto::_OwnedTrackPublication_default_instance_._instance,
  &::livekit::proto::_TrackInfo_default_instance_._instance,
  &::livekit::proto::_OwnedTrack_default_instance_._instance,
  &::livekit::proto::_LocalTrackMuteRequest_default_instance_._instance,
  &::livekit::proto::_LocalTrackMuteResponse_default_instance_._instance,
  &::livekit::proto::_EnableRemoteTrackRequest_default_instance_._instance,
  &::livekit::proto::_EnableRemoteTrackResponse_default_instance_._instance,
  &::livekit::proto::_SetTrackSubscriptionPermissionsRequest_default_instance_._instance,
  &::livekit::proto::_ParticipantTrackPermission_default_instance_._instance,
  &::livekit::proto::_SetTrackSubscriptionPermissionsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_track_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013track.proto\022\rlivekit.proto\032\ne2ee.proto"
  "\032\014handle.proto\032\013stats.proto\">\n\027CreateVid"
  "eoTrackRequest\022\014\n\004name\030\001 \002(\t\022\025\n\rsource_h"
  "andle\030\002 \002(\004\"D\n\030CreateVideoTrackResponse\022"
  "(\n\005track\030\001 \002(\0132\031.livekit.proto.OwnedTrac"
  "k\">\n\027CreateAudioTrackRequest\022\014\n\004name\030\001 \002"
  "(\t\022\025\n\rsource_handle\030\002 \002(\004\"D\n\030CreateAudio"
  "TrackResponse\022(\n\005track\030\001 \002(\0132\031.livekit.p"
  "roto.OwnedTrack\"\'\n\017GetStatsRequest\022\024\n\014tr"
  "ack_handle\030\001 \002(\004\"$\n\020GetStatsResponse\022\020\n\010"
  "async_id\030\001 \002(\004\"[\n\020GetStatsCallback\022\020\n\010as"
  "ync_id\030\001 \002(\004\022\r\n\005error\030\002 \001(\t\022&\n\005stats\030\003 \003"
  "(\0132\027.livekit.proto.RtcStats\"\014\n\nTrackEven"
  "t\"\243\002\n\024TrackPublicationInfo\022\013\n\003sid\030\001 \002(\t\022"
  "\014\n\004name\030\002 \002(\t\022&\n\004kind\030\003 \002(\0162\030.livekit.pr"
  "oto.TrackKind\022*\n\006source\030\004 \002(\0162\032.livekit."
  "proto.TrackSource\022\023\n\013simulcasted\030\005 \002(\010\022\r"
  "\n\005width\030\006 \002(\r\022\016\n\006height\030\007 \002(\r\022\021\n\tmime_ty"
  "pe\030\010 \002(\t\022\r\n\005muted\030\t \002(\010\022\016\n\006remote\030\n \002(\010\022"
  "6\n\017encryption_type\030\013 \002(\0162\035.livekit.proto"
  ".EncryptionType\"y\n\025OwnedTrackPublication"
  "\022-\n\006handle\030\001 \002(\0132\035.livekit.proto.FfiOwne"
  "dHandle\0221\n\004info\030\002 \002(\0132#.livekit.proto.Tr"
  "ackPublicationInfo\"\237\001\n\tTrackInfo\022\013\n\003sid\030"
  "\001 \002(\t\022\014\n\004name\030\002 \002(\t\022&\n\004kind\030\003 \002(\0162\030.live"
  "kit.proto.TrackKind\0220\n\014stream_state\030\004 \002("
  "\0162\032.livekit.proto.StreamState\022\r\n\005muted\030\005"
  " \002(\010\022\016\n\006remote\030\006 \002(\010\"c\n\nOwnedTrack\022-\n\006ha"
  "ndle\030\001 \002(\0132\035.livekit.proto.FfiOwnedHandl"
  "e\022&\n\004info\030\002 \002(\0132\030.livekit.proto.TrackInf"
  "o\";\n\025LocalTrackMuteRequest\022\024\n\014track_hand"
  "le\030\001 \002(\004\022\014\n\004mute\030\002 \002(\010\"\'\n\026LocalTrackMute"
  "Response\022\r\n\005muted\030\001 \002(\010\"A\n\030EnableRemoteT"
  "rackRequest\022\024\n\014track_handle\030\001 \002(\004\022\017\n\007ena"
  "bled\030\002 \002(\010\",\n\031EnableRemoteTrackResponse\022"
  "\017\n\007enabled\030\001 \002(\010\"\254\001\n&SetTrackSubscriptio"
  "nPermissionsRequest\022 \n\030local_participant"
  "_handle\030\001 \002(\004\022 \n\030all_participants_allowe"
  "d\030\002 \002(\010\022>\n\013permissions\030\003 \003(\0132).livekit.p"
  "roto.ParticipantTrackPermission\"i\n\032Parti"
  "cipantTrackPermission\022\034\n\024participant_ide"
  "ntity\030\001 \002(\t\022\021\n\tallow_all\030\002 \001(\010\022\032\n\022allowe"
  "d_track_sids\030\003 \003(\t\")\n\'SetTrackSubscripti"
  "onPermissionsResponse*=\n\tTrackKind\022\020\n\014KI"
  "ND_UNKNOWN\020\000\022\016\n\nKIND_AUDIO\020\001\022\016\n\nKIND_VID"
  "EO\020\002*\201\001\n\013TrackSource\022\022\n\016SOURCE_UNKNOWN\020\000"
  "\022\021\n\rSOURCE_CAMERA\020\001\022\025\n\021SOURCE_MICROPHONE"
  "\020\002\022\026\n\022SOURCE_SCREENSHARE\020\003\022\034\n\030SOURCE_SCR"
  "EENSHARE_AUDIO\020\004*D\n\013StreamState\022\021\n\rSTATE"
  "_UNKNOWN\020\000\022\020\n\014STATE_ACTIVE\020\001\022\020\n\014STATE_PA"
  "USED\020\002B\020\252\002\rLiveKit.Proto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_track_2eproto_deps[3] = {
  &::descriptor_table_e2ee_2eproto,
  &::descriptor_table_handle_2eproto,
  &::descriptor_table_stats_2eproto,
};
static ::_pbi::once_flag descriptor_table_track_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_track_2eproto = {
    false, false, 2024, descriptor_table_protodef_track_2eproto,
    "track.proto",
    &descriptor_table_track_2eproto_once, descriptor_table_track_2eproto_deps, 3, 19,
    schemas, file_default_instances, TableStruct_track_2eproto::offsets,
    file_level_metadata_track_2eproto, file_level_enum_descriptors_track_2eproto,
    file_level_service_descriptors_track_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_track_2eproto_getter() {
  return &descriptor_table_track_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_track_2eproto(&descriptor_table_track_2eproto);
namespace livekit {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_track_2eproto);
  return file_level_enum_descriptors_track_2eproto[0];
}
bool TrackKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_track_2eproto);
  return file_level_enum_descriptors_track_2eproto[1];
}
bool TrackSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_track_2eproto);
  return file_level_enum_descriptors_track_2eproto[2];
}
bool StreamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CreateVideoTrackRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateVideoTrackRequest>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CreateVideoTrackRequest::CreateVideoTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CreateVideoTrackRequest)
}
CreateVideoTrackRequest::CreateVideoTrackRequest(const CreateVideoTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateVideoTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.source_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.source_handle_ = from._impl_.source_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CreateVideoTrackRequest)
}

inline void CreateVideoTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.source_handle_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateVideoTrackRequest::~CreateVideoTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.CreateVideoTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateVideoTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CreateVideoTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateVideoTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CreateVideoTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.source_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVideoTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CreateVideoTrackRequest.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 source_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_handle(&has_bits);
          _impl_.source_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVideoTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CreateVideoTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CreateVideoTrackRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint64 source_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_source_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CreateVideoTrackRequest)
  return target;
}

size_t CreateVideoTrackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.CreateVideoTrackRequest)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_source_handle()) {
    // required uint64 source_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_handle());
  }

  return total_size;
}
size_t CreateVideoTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CreateVideoTrackRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 source_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVideoTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateVideoTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVideoTrackRequest::GetClassData() const { return &_class_data_; }


void CreateVideoTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateVideoTrackRequest*>(&to_msg);
  auto& from = static_cast<const CreateVideoTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CreateVideoTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_handle_ = from._impl_.source_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVideoTrackRequest::CopyFrom(const CreateVideoTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CreateVideoTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVideoTrackRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CreateVideoTrackRequest::InternalSwap(CreateVideoTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.source_handle_, other->_impl_.source_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVideoTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[0]);
}

// ===================================================================

class CreateVideoTrackResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateVideoTrackResponse>()._impl_._has_bits_);
  static const ::livekit::proto::OwnedTrack& track(const CreateVideoTrackResponse* msg);
  static void set_has_track(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::OwnedTrack&
CreateVideoTrackResponse::_Internal::track(const CreateVideoTrackResponse* msg) {
  return *msg->_impl_.track_;
}
CreateVideoTrackResponse::CreateVideoTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CreateVideoTrackResponse)
}
CreateVideoTrackResponse::CreateVideoTrackResponse(const CreateVideoTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateVideoTrackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::livekit::proto::OwnedTrack(*from._impl_.track_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CreateVideoTrackResponse)
}

inline void CreateVideoTrackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_){nullptr}
  };
}

CreateVideoTrackResponse::~CreateVideoTrackResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.CreateVideoTrackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateVideoTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.track_;
}

void CreateVideoTrackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateVideoTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CreateVideoTrackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.track_ != nullptr);
    _impl_.track_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVideoTrackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.OwnedTrack track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVideoTrackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CreateVideoTrackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.OwnedTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CreateVideoTrackResponse)
  return target;
}

size_t CreateVideoTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CreateVideoTrackResponse)
  size_t total_size = 0;

  // required .livekit.proto.OwnedTrack track = 1;
  if (_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVideoTrackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateVideoTrackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVideoTrackResponse::GetClassData() const { return &_class_data_; }


void CreateVideoTrackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateVideoTrackResponse*>(&to_msg);
  auto& from = static_cast<const CreateVideoTrackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CreateVideoTrackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_track()) {
    _this->_internal_mutable_track()->::livekit::proto::OwnedTrack::MergeFrom(
        from._internal_track());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVideoTrackResponse::CopyFrom(const CreateVideoTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CreateVideoTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVideoTrackResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_track()) {
    if (!_impl_.track_->IsInitialized()) return false;
  }
  return true;
}

void CreateVideoTrackResponse::InternalSwap(CreateVideoTrackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.track_, other->_impl_.track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVideoTrackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[1]);
}

// ===================================================================

class CreateAudioTrackRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAudioTrackRequest>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CreateAudioTrackRequest::CreateAudioTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CreateAudioTrackRequest)
}
CreateAudioTrackRequest::CreateAudioTrackRequest(const CreateAudioTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAudioTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.source_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.source_handle_ = from._impl_.source_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CreateAudioTrackRequest)
}

inline void CreateAudioTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.source_handle_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateAudioTrackRequest::~CreateAudioTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.CreateAudioTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAudioTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CreateAudioTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAudioTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CreateAudioTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.source_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAudioTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.CreateAudioTrackRequest.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 source_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_handle(&has_bits);
          _impl_.source_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAudioTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CreateAudioTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.CreateAudioTrackRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint64 source_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_source_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CreateAudioTrackRequest)
  return target;
}

size_t CreateAudioTrackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.CreateAudioTrackRequest)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_source_handle()) {
    // required uint64 source_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_handle());
  }

  return total_size;
}
size_t CreateAudioTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CreateAudioTrackRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 source_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_handle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAudioTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAudioTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAudioTrackRequest::GetClassData() const { return &_class_data_; }


void CreateAudioTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAudioTrackRequest*>(&to_msg);
  auto& from = static_cast<const CreateAudioTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CreateAudioTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_handle_ = from._impl_.source_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAudioTrackRequest::CopyFrom(const CreateAudioTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CreateAudioTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAudioTrackRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CreateAudioTrackRequest::InternalSwap(CreateAudioTrackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.source_handle_, other->_impl_.source_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAudioTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[2]);
}

// ===================================================================

class CreateAudioTrackResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAudioTrackResponse>()._impl_._has_bits_);
  static const ::livekit::proto::OwnedTrack& track(const CreateAudioTrackResponse* msg);
  static void set_has_track(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::livekit::proto::OwnedTrack&
CreateAudioTrackResponse::_Internal::track(const CreateAudioTrackResponse* msg) {
  return *msg->_impl_.track_;
}
CreateAudioTrackResponse::CreateAudioTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.CreateAudioTrackResponse)
}
CreateAudioTrackResponse::CreateAudioTrackResponse(const CreateAudioTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAudioTrackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::livekit::proto::OwnedTrack(*from._impl_.track_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.CreateAudioTrackResponse)
}

inline void CreateAudioTrackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_){nullptr}
  };
}

CreateAudioTrackResponse::~CreateAudioTrackResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.CreateAudioTrackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAudioTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.track_;
}

void CreateAudioTrackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAudioTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.CreateAudioTrackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.track_ != nullptr);
    _impl_.track_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAudioTrackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.OwnedTrack track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAudioTrackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.CreateAudioTrackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.OwnedTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.CreateAudioTrackResponse)
  return target;
}

size_t CreateAudioTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.CreateAudioTrackResponse)
  size_t total_size = 0;

  // required .livekit.proto.OwnedTrack track = 1;
  if (_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAudioTrackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAudioTrackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAudioTrackResponse::GetClassData() const { return &_class_data_; }


void CreateAudioTrackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAudioTrackResponse*>(&to_msg);
  auto& from = static_cast<const CreateAudioTrackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.CreateAudioTrackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_track()) {
    _this->_internal_mutable_track()->::livekit::proto::OwnedTrack::MergeFrom(
        from._internal_track());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAudioTrackResponse::CopyFrom(const CreateAudioTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.CreateAudioTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAudioTrackResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_track()) {
    if (!_impl_.track_->IsInitialized()) return false;
  }
  return true;
}

void CreateAudioTrackResponse::InternalSwap(CreateAudioTrackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.track_, other->_impl_.track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAudioTrackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[3]);
}

// ===================================================================

class GetStatsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStatsRequest>()._impl_._has_bits_);
  static void set_has_track_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GetStatsRequest::GetStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetStatsRequest)
}
GetStatsRequest::GetStatsRequest(const GetStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.track_handle_ = from._impl_.track_handle_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetStatsRequest)
}

inline void GetStatsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_handle_){uint64_t{0u}}
  };
}

GetStatsRequest::~GetStatsRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetStatsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetStatsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_handle_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 track_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_track_handle(&has_bits);
          _impl_.track_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 track_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_track_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetStatsRequest)
  return target;
}

size_t GetStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetStatsRequest)
  size_t total_size = 0;

  // required uint64 track_handle = 1;
  if (_internal_has_track_handle()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatsRequest::GetClassData() const { return &_class_data_; }


void GetStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatsRequest*>(&to_msg);
  auto& from = static_cast<const GetStatsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetStatsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_track_handle()) {
    _this->_internal_set_track_handle(from._internal_track_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatsRequest::CopyFrom(const GetStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatsRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetStatsRequest::InternalSwap(GetStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.track_handle_, other->_impl_.track_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[4]);
}

// ===================================================================

class GetStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStatsResponse>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GetStatsResponse::GetStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetStatsResponse)
}
GetStatsResponse::GetStatsResponse(const GetStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetStatsResponse)
}

inline void GetStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
}

GetStatsResponse::~GetStatsResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetStatsResponse)
  return target;
}

size_t GetStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetStatsResponse)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatsResponse::GetClassData() const { return &_class_data_; }


void GetStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatsResponse*>(&to_msg);
  auto& from = static_cast<const GetStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_async_id()) {
    _this->_internal_set_async_id(from._internal_async_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatsResponse::CopyFrom(const GetStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatsResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetStatsResponse::InternalSwap(GetStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[5]);
}

// ===================================================================

class GetStatsCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStatsCallback>()._impl_._has_bits_);
  static void set_has_async_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GetStatsCallback::clear_stats() {
  _impl_.stats_.Clear();
}
GetStatsCallback::GetStatsCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.GetStatsCallback)
}
GetStatsCallback::GetStatsCallback(const GetStatsCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatsCallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.async_id_ = from._impl_.async_id_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.GetStatsCallback)
}

inline void GetStatsCallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.error_){}
    , decltype(_impl_.async_id_){uint64_t{0u}}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStatsCallback::~GetStatsCallback() {
  // @@protoc_insertion_point(destructor:livekit.proto.GetStatsCallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatsCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  _impl_.error_.Destroy();
}

void GetStatsCallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatsCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.GetStatsCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.async_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatsCallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 async_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_async_id(&has_bits);
          _impl_.async_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.GetStatsCallback.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.RtcStats stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatsCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.GetStatsCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 async_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_async_id(), target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.GetStatsCallback.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // repeated .livekit.proto.RtcStats stats = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.GetStatsCallback)
  return target;
}

size_t GetStatsCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.GetStatsCallback)
  size_t total_size = 0;

  // required uint64 async_id = 1;
  if (_internal_has_async_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_async_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.RtcStats stats = 3;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatsCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatsCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatsCallback::GetClassData() const { return &_class_data_; }


void GetStatsCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatsCallback*>(&to_msg);
  auto& from = static_cast<const GetStatsCallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.GetStatsCallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.async_id_ = from._impl_.async_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatsCallback::CopyFrom(const GetStatsCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.GetStatsCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatsCallback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.stats_))
    return false;
  return true;
}

void GetStatsCallback::InternalSwap(GetStatsCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.async_id_, other->_impl_.async_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatsCallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[6]);
}

// ===================================================================

class TrackEvent::_Internal {
 public:
};

TrackEvent::TrackEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackEvent)
}
TrackEvent::TrackEvent(const TrackEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TrackEvent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackEvent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackEvent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TrackEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[7]);
}

// ===================================================================

class TrackPublicationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackPublicationInfo>()._impl_._has_bits_);
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_simulcasted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_encryption_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

TrackPublicationInfo::TrackPublicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackPublicationInfo)
}
TrackPublicationInfo::TrackPublicationInfo(const TrackPublicationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackPublicationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.simulcasted_){}
    , decltype(_impl_.muted_){}
    , decltype(_impl_.remote_){}
    , decltype(_impl_.encryption_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sid()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.kind_, &from._impl_.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encryption_type_) -
    reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.encryption_type_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackPublicationInfo)
}

inline void TrackPublicationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.simulcasted_){false}
    , decltype(_impl_.muted_){false}
    , decltype(_impl_.remote_){false}
    , decltype(_impl_.encryption_type_){0}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackPublicationInfo::~TrackPublicationInfo() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackPublicationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackPublicationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.mime_type_.Destroy();
}

void TrackPublicationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackPublicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackPublicationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.simulcasted_) -
        reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.simulcasted_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.muted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.encryption_type_) -
        reinterpret_cast<char*>(&_impl_.muted_)) + sizeof(_impl_.encryption_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPublicationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackPublicationInfo.sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackPublicationInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TrackKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::TrackKind_IsValid(val))) {
            _internal_set_kind(static_cast<::livekit::proto::TrackKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TrackSource source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::TrackSource_IsValid(val))) {
            _internal_set_source(static_cast<::livekit::proto::TrackSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool simulcasted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_simulcasted(&has_bits);
          _impl_.simulcasted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string mime_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackPublicationInfo.mime_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool muted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_muted(&has_bits);
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool remote = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_remote(&has_bits);
          _impl_.remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.EncryptionType encryption_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::EncryptionType_IsValid(val))) {
            _internal_set_encryption_type(static_cast<::livekit::proto::EncryptionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackPublicationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackPublicationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackPublicationInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackPublicationInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .livekit.proto.TrackKind kind = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  // required .livekit.proto.TrackSource source = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source(), target);
  }

  // required bool simulcasted = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_simulcasted(), target);
  }

  // required uint32 width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // required uint32 height = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_height(), target);
  }

  // required string mime_type = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackPublicationInfo.mime_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mime_type(), target);
  }

  // required bool muted = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_muted(), target);
  }

  // required bool remote = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_remote(), target);
  }

  // required .livekit.proto.EncryptionType encryption_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_encryption_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackPublicationInfo)
  return target;
}

size_t TrackPublicationInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackPublicationInfo)
  size_t total_size = 0;

  if (_internal_has_sid()) {
    // required string sid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_mime_type()) {
    // required string mime_type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  if (_internal_has_kind()) {
    // required .livekit.proto.TrackKind kind = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (_internal_has_source()) {
    // required .livekit.proto.TrackSource source = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  if (_internal_has_width()) {
    // required uint32 width = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  if (_internal_has_simulcasted()) {
    // required bool simulcasted = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_muted()) {
    // required bool muted = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_remote()) {
    // required bool remote = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_encryption_type()) {
    // required .livekit.proto.EncryptionType encryption_type = 11;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption_type());
  }

  return total_size;
}
size_t TrackPublicationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackPublicationInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string sid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string mime_type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

    // required .livekit.proto.TrackKind kind = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());

    // required .livekit.proto.TrackSource source = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());

    // required uint32 width = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());

    // required uint32 height = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());

    // required bool simulcasted = 5;
    total_size += 1 + 1;

    // required bool muted = 9;
    total_size += 1 + 1;

    // required bool remote = 10;
    total_size += 1 + 1;

    // required .livekit.proto.EncryptionType encryption_type = 11;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackPublicationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackPublicationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackPublicationInfo::GetClassData() const { return &_class_data_; }


void TrackPublicationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackPublicationInfo*>(&to_msg);
  auto& from = static_cast<const TrackPublicationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackPublicationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sid(from._internal_sid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.simulcasted_ = from._impl_.simulcasted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.muted_ = from._impl_.muted_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.remote_ = from._impl_.remote_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.encryption_type_ = from._impl_.encryption_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPublicationInfo::CopyFrom(const TrackPublicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackPublicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPublicationInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackPublicationInfo::InternalSwap(TrackPublicationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackPublicationInfo, _impl_.encryption_type_)
      + sizeof(TrackPublicationInfo::_impl_.encryption_type_)
      - PROTOBUF_FIELD_OFFSET(TrackPublicationInfo, _impl_.kind_)>(
          reinterpret_cast<char*>(&_impl_.kind_),
          reinterpret_cast<char*>(&other->_impl_.kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPublicationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[8]);
}

// ===================================================================

class OwnedTrackPublication::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnedTrackPublication>()._impl_._has_bits_);
  static const ::livekit::proto::FfiOwnedHandle& handle(const OwnedTrackPublication* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::TrackPublicationInfo& info(const OwnedTrackPublication* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::FfiOwnedHandle&
OwnedTrackPublication::_Internal::handle(const OwnedTrackPublication* msg) {
  return *msg->_impl_.handle_;
}
const ::livekit::proto::TrackPublicationInfo&
OwnedTrackPublication::_Internal::info(const OwnedTrackPublication* msg) {
  return *msg->_impl_.info_;
}
void OwnedTrackPublication::clear_handle() {
  if (_impl_.handle_ != nullptr) _impl_.handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OwnedTrackPublication::OwnedTrackPublication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.OwnedTrackPublication)
}
OwnedTrackPublication::OwnedTrackPublication(const OwnedTrackPublication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnedTrackPublication* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    _this->_impl_.handle_ = new ::livekit::proto::FfiOwnedHandle(*from._impl_.handle_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::livekit::proto::TrackPublicationInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.OwnedTrackPublication)
}

inline void OwnedTrackPublication::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}
  };
}

OwnedTrackPublication::~OwnedTrackPublication() {
  // @@protoc_insertion_point(destructor:livekit.proto.OwnedTrackPublication)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnedTrackPublication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.handle_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void OwnedTrackPublication::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnedTrackPublication::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.OwnedTrackPublication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.handle_ != nullptr);
      _impl_.handle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnedTrackPublication::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.FfiOwnedHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TrackPublicationInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnedTrackPublication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.OwnedTrackPublication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.FfiOwnedHandle handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::handle(this),
        _Internal::handle(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.TrackPublicationInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.OwnedTrackPublication)
  return target;
}

size_t OwnedTrackPublication::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.OwnedTrackPublication)
  size_t total_size = 0;

  if (_internal_has_handle()) {
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);
  }

  if (_internal_has_info()) {
    // required .livekit.proto.TrackPublicationInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t OwnedTrackPublication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.OwnedTrackPublication)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);

    // required .livekit.proto.TrackPublicationInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnedTrackPublication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnedTrackPublication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnedTrackPublication::GetClassData() const { return &_class_data_; }


void OwnedTrackPublication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnedTrackPublication*>(&to_msg);
  auto& from = static_cast<const OwnedTrackPublication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.OwnedTrackPublication)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handle()->::livekit::proto::FfiOwnedHandle::MergeFrom(
          from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::livekit::proto::TrackPublicationInfo::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnedTrackPublication::CopyFrom(const OwnedTrackPublication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.OwnedTrackPublication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedTrackPublication::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!_impl_.handle_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void OwnedTrackPublication::InternalSwap(OwnedTrackPublication* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnedTrackPublication, _impl_.info_)
      + sizeof(OwnedTrackPublication::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(OwnedTrackPublication, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnedTrackPublication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[9]);
}

// ===================================================================

class TrackInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackInfo>()._impl_._has_bits_);
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

TrackInfo::TrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.TrackInfo)
}
TrackInfo::TrackInfo(const TrackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.stream_state_){}
    , decltype(_impl_.muted_){}
    , decltype(_impl_.remote_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sid()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.kind_, &from._impl_.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remote_) -
    reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.remote_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.TrackInfo)
}

inline void TrackInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.stream_state_){0}
    , decltype(_impl_.muted_){false}
    , decltype(_impl_.remote_){false}
  };
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackInfo::~TrackInfo() {
  // @@protoc_insertion_point(destructor:livekit.proto.TrackInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sid_.Destroy();
  _impl_.name_.Destroy();
}

void TrackInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.TrackInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remote_) -
        reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.remote_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackInfo.sid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.TrackInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TrackKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::TrackKind_IsValid(val))) {
            _internal_set_kind(static_cast<::livekit::proto::TrackKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.StreamState stream_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::livekit::proto::StreamState_IsValid(val))) {
            _internal_set_stream_state(static_cast<::livekit::proto::StreamState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool muted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_muted(&has_bits);
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool remote = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_remote(&has_bits);
          _impl_.remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.TrackInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string sid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackInfo.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.TrackInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .livekit.proto.TrackKind kind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  // required .livekit.proto.StreamState stream_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stream_state(), target);
  }

  // required bool muted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_muted(), target);
  }

  // required bool remote = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_remote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.TrackInfo)
  return target;
}

size_t TrackInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.TrackInfo)
  size_t total_size = 0;

  if (_internal_has_sid()) {
    // required string sid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_kind()) {
    // required .livekit.proto.TrackKind kind = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (_internal_has_stream_state()) {
    // required .livekit.proto.StreamState stream_state = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stream_state());
  }

  if (_internal_has_muted()) {
    // required bool muted = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_remote()) {
    // required bool remote = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TrackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.TrackInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string sid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .livekit.proto.TrackKind kind = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());

    // required .livekit.proto.StreamState stream_state = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stream_state());

    // required bool muted = 5;
    total_size += 1 + 1;

    // required bool remote = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackInfo::GetClassData() const { return &_class_data_; }


void TrackInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackInfo*>(&to_msg);
  auto& from = static_cast<const TrackInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.TrackInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sid(from._internal_sid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.stream_state_ = from._impl_.stream_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.muted_ = from._impl_.muted_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.remote_ = from._impl_.remote_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackInfo::CopyFrom(const TrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TrackInfo::InternalSwap(TrackInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.remote_)
      + sizeof(TrackInfo::_impl_.remote_)
      - PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.kind_)>(
          reinterpret_cast<char*>(&_impl_.kind_),
          reinterpret_cast<char*>(&other->_impl_.kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[10]);
}

// ===================================================================

class OwnedTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnedTrack>()._impl_._has_bits_);
  static const ::livekit::proto::FfiOwnedHandle& handle(const OwnedTrack* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::livekit::proto::TrackInfo& info(const OwnedTrack* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::livekit::proto::FfiOwnedHandle&
OwnedTrack::_Internal::handle(const OwnedTrack* msg) {
  return *msg->_impl_.handle_;
}
const ::livekit::proto::TrackInfo&
OwnedTrack::_Internal::info(const OwnedTrack* msg) {
  return *msg->_impl_.info_;
}
void OwnedTrack::clear_handle() {
  if (_impl_.handle_ != nullptr) _impl_.handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OwnedTrack::OwnedTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.OwnedTrack)
}
OwnedTrack::OwnedTrack(const OwnedTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnedTrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    _this->_impl_.handle_ = new ::livekit::proto::FfiOwnedHandle(*from._impl_.handle_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::livekit::proto::TrackInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:livekit.proto.OwnedTrack)
}

inline void OwnedTrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){nullptr}
    , decltype(_impl_.info_){nullptr}
  };
}

OwnedTrack::~OwnedTrack() {
  // @@protoc_insertion_point(destructor:livekit.proto.OwnedTrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnedTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.handle_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void OwnedTrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnedTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.OwnedTrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.handle_ != nullptr);
      _impl_.handle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnedTrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .livekit.proto.FfiOwnedHandle handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .livekit.proto.TrackInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnedTrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.OwnedTrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .livekit.proto.FfiOwnedHandle handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::handle(this),
        _Internal::handle(this).GetCachedSize(), target, stream);
  }

  // required .livekit.proto.TrackInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.OwnedTrack)
  return target;
}

size_t OwnedTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.OwnedTrack)
  size_t total_size = 0;

  if (_internal_has_handle()) {
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);
  }

  if (_internal_has_info()) {
    // required .livekit.proto.TrackInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t OwnedTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.OwnedTrack)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .livekit.proto.FfiOwnedHandle handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_);

    // required .livekit.proto.TrackInfo info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnedTrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnedTrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnedTrack::GetClassData() const { return &_class_data_; }


void OwnedTrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnedTrack*>(&to_msg);
  auto& from = static_cast<const OwnedTrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.OwnedTrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handle()->::livekit::proto::FfiOwnedHandle::MergeFrom(
          from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::livekit::proto::TrackInfo::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnedTrack::CopyFrom(const OwnedTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.OwnedTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedTrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_handle()) {
    if (!_impl_.handle_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void OwnedTrack::InternalSwap(OwnedTrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnedTrack, _impl_.info_)
      + sizeof(OwnedTrack::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(OwnedTrack, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnedTrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[11]);
}

// ===================================================================

class LocalTrackMuteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrackMuteRequest>()._impl_._has_bits_);
  static void set_has_track_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LocalTrackMuteRequest::LocalTrackMuteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LocalTrackMuteRequest)
}
LocalTrackMuteRequest::LocalTrackMuteRequest(const LocalTrackMuteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTrackMuteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_handle_){}
    , decltype(_impl_.mute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.track_handle_, &from._impl_.track_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mute_) -
    reinterpret_cast<char*>(&_impl_.track_handle_)) + sizeof(_impl_.mute_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LocalTrackMuteRequest)
}

inline void LocalTrackMuteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_handle_){uint64_t{0u}}
    , decltype(_impl_.mute_){false}
  };
}

LocalTrackMuteRequest::~LocalTrackMuteRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.LocalTrackMuteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrackMuteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalTrackMuteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTrackMuteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LocalTrackMuteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.track_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mute_) -
        reinterpret_cast<char*>(&_impl_.track_handle_)) + sizeof(_impl_.mute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTrackMuteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 track_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_track_handle(&has_bits);
          _impl_.track_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool mute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mute(&has_bits);
          _impl_.mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrackMuteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LocalTrackMuteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 track_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_track_handle(), target);
  }

  // required bool mute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LocalTrackMuteRequest)
  return target;
}

size_t LocalTrackMuteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.LocalTrackMuteRequest)
  size_t total_size = 0;

  if (_internal_has_track_handle()) {
    // required uint64 track_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());
  }

  if (_internal_has_mute()) {
    // required bool mute = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LocalTrackMuteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LocalTrackMuteRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 track_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());

    // required bool mute = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTrackMuteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTrackMuteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTrackMuteRequest::GetClassData() const { return &_class_data_; }


void LocalTrackMuteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTrackMuteRequest*>(&to_msg);
  auto& from = static_cast<const LocalTrackMuteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LocalTrackMuteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.track_handle_ = from._impl_.track_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mute_ = from._impl_.mute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTrackMuteRequest::CopyFrom(const LocalTrackMuteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LocalTrackMuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrackMuteRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LocalTrackMuteRequest::InternalSwap(LocalTrackMuteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalTrackMuteRequest, _impl_.mute_)
      + sizeof(LocalTrackMuteRequest::_impl_.mute_)
      - PROTOBUF_FIELD_OFFSET(LocalTrackMuteRequest, _impl_.track_handle_)>(
          reinterpret_cast<char*>(&_impl_.track_handle_),
          reinterpret_cast<char*>(&other->_impl_.track_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrackMuteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[12]);
}

// ===================================================================

class LocalTrackMuteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrackMuteResponse>()._impl_._has_bits_);
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LocalTrackMuteResponse::LocalTrackMuteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.LocalTrackMuteResponse)
}
LocalTrackMuteResponse::LocalTrackMuteResponse(const LocalTrackMuteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTrackMuteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.muted_ = from._impl_.muted_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.LocalTrackMuteResponse)
}

inline void LocalTrackMuteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muted_){false}
  };
}

LocalTrackMuteResponse::~LocalTrackMuteResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.LocalTrackMuteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrackMuteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalTrackMuteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTrackMuteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.LocalTrackMuteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.muted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTrackMuteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool muted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_muted(&has_bits);
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrackMuteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.LocalTrackMuteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool muted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.LocalTrackMuteResponse)
  return target;
}

size_t LocalTrackMuteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.LocalTrackMuteResponse)
  size_t total_size = 0;

  // required bool muted = 1;
  if (_internal_has_muted()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTrackMuteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTrackMuteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTrackMuteResponse::GetClassData() const { return &_class_data_; }


void LocalTrackMuteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTrackMuteResponse*>(&to_msg);
  auto& from = static_cast<const LocalTrackMuteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.LocalTrackMuteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_muted()) {
    _this->_internal_set_muted(from._internal_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTrackMuteResponse::CopyFrom(const LocalTrackMuteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.LocalTrackMuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrackMuteResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LocalTrackMuteResponse::InternalSwap(LocalTrackMuteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.muted_, other->_impl_.muted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrackMuteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[13]);
}

// ===================================================================

class EnableRemoteTrackRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableRemoteTrackRequest>()._impl_._has_bits_);
  static void set_has_track_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

EnableRemoteTrackRequest::EnableRemoteTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.EnableRemoteTrackRequest)
}
EnableRemoteTrackRequest::EnableRemoteTrackRequest(const EnableRemoteTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnableRemoteTrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_handle_){}
    , decltype(_impl_.enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.track_handle_, &from._impl_.track_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.track_handle_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.EnableRemoteTrackRequest)
}

inline void EnableRemoteTrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.track_handle_){uint64_t{0u}}
    , decltype(_impl_.enabled_){false}
  };
}

EnableRemoteTrackRequest::~EnableRemoteTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.EnableRemoteTrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableRemoteTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableRemoteTrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableRemoteTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.EnableRemoteTrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.track_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.track_handle_)) + sizeof(_impl_.enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableRemoteTrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 track_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_track_handle(&has_bits);
          _impl_.track_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnableRemoteTrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.EnableRemoteTrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 track_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_track_handle(), target);
  }

  // required bool enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.EnableRemoteTrackRequest)
  return target;
}

size_t EnableRemoteTrackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.EnableRemoteTrackRequest)
  size_t total_size = 0;

  if (_internal_has_track_handle()) {
    // required uint64 track_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());
  }

  if (_internal_has_enabled()) {
    // required bool enabled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EnableRemoteTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.EnableRemoteTrackRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 track_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_track_handle());

    // required bool enabled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableRemoteTrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnableRemoteTrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableRemoteTrackRequest::GetClassData() const { return &_class_data_; }


void EnableRemoteTrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnableRemoteTrackRequest*>(&to_msg);
  auto& from = static_cast<const EnableRemoteTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.EnableRemoteTrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.track_handle_ = from._impl_.track_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableRemoteTrackRequest::CopyFrom(const EnableRemoteTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.EnableRemoteTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRemoteTrackRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EnableRemoteTrackRequest::InternalSwap(EnableRemoteTrackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableRemoteTrackRequest, _impl_.enabled_)
      + sizeof(EnableRemoteTrackRequest::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(EnableRemoteTrackRequest, _impl_.track_handle_)>(
          reinterpret_cast<char*>(&_impl_.track_handle_),
          reinterpret_cast<char*>(&other->_impl_.track_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableRemoteTrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[14]);
}

// ===================================================================

class EnableRemoteTrackResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableRemoteTrackResponse>()._impl_._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EnableRemoteTrackResponse::EnableRemoteTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.EnableRemoteTrackResponse)
}
EnableRemoteTrackResponse::EnableRemoteTrackResponse(const EnableRemoteTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnableRemoteTrackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enabled_ = from._impl_.enabled_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.EnableRemoteTrackResponse)
}

inline void EnableRemoteTrackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){false}
  };
}

EnableRemoteTrackResponse::~EnableRemoteTrackResponse() {
  // @@protoc_insertion_point(destructor:livekit.proto.EnableRemoteTrackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableRemoteTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableRemoteTrackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableRemoteTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.EnableRemoteTrackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableRemoteTrackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnableRemoteTrackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.EnableRemoteTrackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.EnableRemoteTrackResponse)
  return target;
}

size_t EnableRemoteTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.EnableRemoteTrackResponse)
  size_t total_size = 0;

  // required bool enabled = 1;
  if (_internal_has_enabled()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableRemoteTrackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnableRemoteTrackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableRemoteTrackResponse::GetClassData() const { return &_class_data_; }


void EnableRemoteTrackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnableRemoteTrackResponse*>(&to_msg);
  auto& from = static_cast<const EnableRemoteTrackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.EnableRemoteTrackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableRemoteTrackResponse::CopyFrom(const EnableRemoteTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.EnableRemoteTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRemoteTrackResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EnableRemoteTrackResponse::InternalSwap(EnableRemoteTrackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enabled_, other->_impl_.enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableRemoteTrackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[15]);
}

// ===================================================================

class SetTrackSubscriptionPermissionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTrackSubscriptionPermissionsRequest>()._impl_._has_bits_);
  static void set_has_local_participant_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_participants_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetTrackSubscriptionPermissionsRequest::SetTrackSubscriptionPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetTrackSubscriptionPermissionsRequest)
}
SetTrackSubscriptionPermissionsRequest::SetTrackSubscriptionPermissionsRequest(const SetTrackSubscriptionPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetTrackSubscriptionPermissionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.local_participant_handle_){}
    , decltype(_impl_.all_participants_allowed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.local_participant_handle_, &from._impl_.local_participant_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.all_participants_allowed_) -
    reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.all_participants_allowed_));
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetTrackSubscriptionPermissionsRequest)
}

inline void SetTrackSubscriptionPermissionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.permissions_){arena}
    , decltype(_impl_.local_participant_handle_){uint64_t{0u}}
    , decltype(_impl_.all_participants_allowed_){false}
  };
}

SetTrackSubscriptionPermissionsRequest::~SetTrackSubscriptionPermissionsRequest() {
  // @@protoc_insertion_point(destructor:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTrackSubscriptionPermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permissions_.~RepeatedPtrField();
}

void SetTrackSubscriptionPermissionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTrackSubscriptionPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permissions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.local_participant_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.all_participants_allowed_) -
        reinterpret_cast<char*>(&_impl_.local_participant_handle_)) + sizeof(_impl_.all_participants_allowed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTrackSubscriptionPermissionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 local_participant_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_participant_handle(&has_bits);
          _impl_.local_participant_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool all_participants_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_all_participants_allowed(&has_bits);
          _impl_.all_participants_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.proto.ParticipantTrackPermission permissions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTrackSubscriptionPermissionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 local_participant_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_participant_handle(), target);
  }

  // required bool all_participants_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_all_participants_allowed(), target);
  }

  // repeated .livekit.proto.ParticipantTrackPermission permissions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  return target;
}

size_t SetTrackSubscriptionPermissionsRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  size_t total_size = 0;

  if (_internal_has_local_participant_handle()) {
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());
  }

  if (_internal_has_all_participants_allowed()) {
    // required bool all_participants_allowed = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SetTrackSubscriptionPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 local_participant_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_participant_handle());

    // required bool all_participants_allowed = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.proto.ParticipantTrackPermission permissions = 3;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrackSubscriptionPermissionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetTrackSubscriptionPermissionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrackSubscriptionPermissionsRequest::GetClassData() const { return &_class_data_; }


void SetTrackSubscriptionPermissionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetTrackSubscriptionPermissionsRequest*>(&to_msg);
  auto& from = static_cast<const SetTrackSubscriptionPermissionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.local_participant_handle_ = from._impl_.local_participant_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.all_participants_allowed_ = from._impl_.all_participants_allowed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTrackSubscriptionPermissionsRequest::CopyFrom(const SetTrackSubscriptionPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.SetTrackSubscriptionPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTrackSubscriptionPermissionsRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.permissions_))
    return false;
  return true;
}

void SetTrackSubscriptionPermissionsRequest::InternalSwap(SetTrackSubscriptionPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTrackSubscriptionPermissionsRequest, _impl_.all_participants_allowed_)
      + sizeof(SetTrackSubscriptionPermissionsRequest::_impl_.all_participants_allowed_)
      - PROTOBUF_FIELD_OFFSET(SetTrackSubscriptionPermissionsRequest, _impl_.local_participant_handle_)>(
          reinterpret_cast<char*>(&_impl_.local_participant_handle_),
          reinterpret_cast<char*>(&other->_impl_.local_participant_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTrackSubscriptionPermissionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[16]);
}

// ===================================================================

class ParticipantTrackPermission::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticipantTrackPermission>()._impl_._has_bits_);
  static void set_has_participant_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_all(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ParticipantTrackPermission::ParticipantTrackPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.proto.ParticipantTrackPermission)
}
ParticipantTrackPermission::ParticipantTrackPermission(const ParticipantTrackPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantTrackPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allowed_track_sids_){from._impl_.allowed_track_sids_}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.allow_all_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant_identity()) {
    _this->_impl_.participant_identity_.Set(from._internal_participant_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.allow_all_ = from._impl_.allow_all_;
  // @@protoc_insertion_point(copy_constructor:livekit.proto.ParticipantTrackPermission)
}

inline void ParticipantTrackPermission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allowed_track_sids_){arena}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.allow_all_){false}
  };
  _impl_.participant_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantTrackPermission::~ParticipantTrackPermission() {
  // @@protoc_insertion_point(destructor:livekit.proto.ParticipantTrackPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantTrackPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allowed_track_sids_.~RepeatedPtrField();
  _impl_.participant_identity_.Destroy();
}

void ParticipantTrackPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantTrackPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.proto.ParticipantTrackPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allowed_track_sids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_.allow_all_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantTrackPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string participant_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participant_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantTrackPermission.participant_identity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_allow_all(&has_bits);
          _impl_.allow_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string allowed_track_sids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_track_sids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "livekit.proto.ParticipantTrackPermission.allowed_track_sids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantTrackPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.proto.ParticipantTrackPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string participant_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant_identity().data(), static_cast<int>(this->_internal_participant_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantTrackPermission.participant_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participant_identity(), target);
  }

  // optional bool allow_all = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_all(), target);
  }

  // repeated string allowed_track_sids = 3;
  for (int i = 0, n = this->_internal_allowed_track_sids_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_track_sids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "livekit.proto.ParticipantTrackPermission.allowed_track_sids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.proto.ParticipantTrackPermission)
  return target;
}

size_t ParticipantTrackPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.proto.ParticipantTrackPermission)
  size_t total_size = 0;

  // required string participant_identity = 1;
  if (_internal_has_participant_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participant_identity());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_track_sids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.allowed_track_sids_.size());
  for (int i = 0, n = _impl_.allowed_track_sids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.allowed_track_sids_.Get(i));
  }

  // optional bool allow_all = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantTrackPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantTrackPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantTrackPermission::GetClassData() const { return &_class_data_; }


void ParticipantTrackPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantTrackPermission*>(&to_msg);
  auto& from = static_cast<const ParticipantTrackPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.proto.ParticipantTrackPermission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allowed_track_sids_.MergeFrom(from._impl_.allowed_track_sids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant_identity(from._internal_participant_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.allow_all_ = from._impl_.allow_all_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantTrackPermission::CopyFrom(const ParticipantTrackPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.proto.ParticipantTrackPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantTrackPermission::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParticipantTrackPermission::InternalSwap(ParticipantTrackPermission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allowed_track_sids_.InternalSwap(&other->_impl_.allowed_track_sids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_identity_, lhs_arena,
      &other->_impl_.participant_identity_, rhs_arena
  );
  swap(_impl_.allow_all_, other->_impl_.allow_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantTrackPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[17]);
}

// ===================================================================

class SetTrackSubscriptionPermissionsResponse::_Internal {
 public:
};

SetTrackSubscriptionPermissionsResponse::SetTrackSubscriptionPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:livekit.proto.SetTrackSubscriptionPermissionsResponse)
}
SetTrackSubscriptionPermissionsResponse::SetTrackSubscriptionPermissionsResponse(const SetTrackSubscriptionPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetTrackSubscriptionPermissionsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:livekit.proto.SetTrackSubscriptionPermissionsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrackSubscriptionPermissionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrackSubscriptionPermissionsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetTrackSubscriptionPermissionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::proto::CreateVideoTrackRequest*
Arena::CreateMaybeMessage< ::livekit::proto::CreateVideoTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CreateVideoTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::CreateVideoTrackResponse*
Arena::CreateMaybeMessage< ::livekit::proto::CreateVideoTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CreateVideoTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::CreateAudioTrackRequest*
Arena::CreateMaybeMessage< ::livekit::proto::CreateAudioTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CreateAudioTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::CreateAudioTrackResponse*
Arena::CreateMaybeMessage< ::livekit::proto::CreateAudioTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::CreateAudioTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetStatsRequest*
Arena::CreateMaybeMessage< ::livekit::proto::GetStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetStatsResponse*
Arena::CreateMaybeMessage< ::livekit::proto::GetStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::GetStatsCallback*
Arena::CreateMaybeMessage< ::livekit::proto::GetStatsCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::GetStatsCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackEvent*
Arena::CreateMaybeMessage< ::livekit::proto::TrackEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackPublicationInfo*
Arena::CreateMaybeMessage< ::livekit::proto::TrackPublicationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackPublicationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OwnedTrackPublication*
Arena::CreateMaybeMessage< ::livekit::proto::OwnedTrackPublication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OwnedTrackPublication >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::TrackInfo*
Arena::CreateMaybeMessage< ::livekit::proto::TrackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::TrackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::OwnedTrack*
Arena::CreateMaybeMessage< ::livekit::proto::OwnedTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::OwnedTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LocalTrackMuteRequest*
Arena::CreateMaybeMessage< ::livekit::proto::LocalTrackMuteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LocalTrackMuteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::LocalTrackMuteResponse*
Arena::CreateMaybeMessage< ::livekit::proto::LocalTrackMuteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::LocalTrackMuteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::EnableRemoteTrackRequest*
Arena::CreateMaybeMessage< ::livekit::proto::EnableRemoteTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::EnableRemoteTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::EnableRemoteTrackResponse*
Arena::CreateMaybeMessage< ::livekit::proto::EnableRemoteTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::EnableRemoteTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetTrackSubscriptionPermissionsRequest*
Arena::CreateMaybeMessage< ::livekit::proto::SetTrackSubscriptionPermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetTrackSubscriptionPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::ParticipantTrackPermission*
Arena::CreateMaybeMessage< ::livekit::proto::ParticipantTrackPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::ParticipantTrackPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::proto::SetTrackSubscriptionPermissionsResponse*
Arena::CreateMaybeMessage< ::livekit::proto::SetTrackSubscriptionPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::proto::SetTrackSubscriptionPermissionsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
