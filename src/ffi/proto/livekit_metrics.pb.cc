// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_metrics.proto

#include "livekit_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR MetricsBatch::MetricsBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_data_)*/{}
  , /*decltype(_impl_.time_series_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.normalized_timestamp_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsBatchDefaultTypeInternal() {}
  union {
    MetricsBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsBatchDefaultTypeInternal _MetricsBatch_default_instance_;
PROTOBUF_CONSTEXPR TimeSeriesMetric::TimeSeriesMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.label_)*/0u
  , /*decltype(_impl_.participant_identity_)*/0u
  , /*decltype(_impl_.track_sid_)*/0u
  , /*decltype(_impl_.rid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeSeriesMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeSeriesMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeSeriesMetricDefaultTypeInternal() {}
  union {
    TimeSeriesMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeSeriesMetricDefaultTypeInternal _TimeSeriesMetric_default_instance_;
PROTOBUF_CONSTEXPR MetricSample::MetricSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.normalized_timestamp_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricSampleDefaultTypeInternal() {}
  union {
    MetricSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricSampleDefaultTypeInternal _MetricSample_default_instance_;
PROTOBUF_CONSTEXPR EventMetric::EventMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.normalized_start_timestamp_)*/nullptr
  , /*decltype(_impl_.normalized_end_timestamp_)*/nullptr
  , /*decltype(_impl_.label_)*/0u
  , /*decltype(_impl_.participant_identity_)*/0u
  , /*decltype(_impl_.start_timestamp_ms_)*/int64_t{0}
  , /*decltype(_impl_.end_timestamp_ms_)*/int64_t{0}
  , /*decltype(_impl_.track_sid_)*/0u
  , /*decltype(_impl_.rid_)*/0u} {}
struct EventMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventMetricDefaultTypeInternal() {}
  union {
    EventMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventMetricDefaultTypeInternal _EventMetric_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5fmetrics_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_livekit_5fmetrics_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5fmetrics_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.normalized_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.str_data_),
  PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.time_series_),
  PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.samples_),
  PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_.timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_.normalized_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.participant_identity_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.track_sid_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.start_timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.end_timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.normalized_start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.normalized_end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.rid_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::MetricsBatch)},
  { 11, -1, -1, sizeof(::livekit::TimeSeriesMetric)},
  { 22, -1, -1, sizeof(::livekit::MetricSample)},
  { 31, 46, -1, sizeof(::livekit::EventMetric)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_MetricsBatch_default_instance_._instance,
  &::livekit::_TimeSeriesMetric_default_instance_._instance,
  &::livekit::_MetricSample_default_instance_._instance,
  &::livekit::_EventMetric_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025livekit_metrics.proto\022\007livekit\032\037google"
  "/protobuf/timestamp.proto\"\306\001\n\014MetricsBat"
  "ch\022\024\n\014timestamp_ms\030\001 \001(\003\0228\n\024normalized_t"
  "imestamp\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\020\n\010str_data\030\003 \003(\t\022.\n\013time_series\030\004 \003("
  "\0132\031.livekit.TimeSeriesMetric\022$\n\006events\030\005"
  " \003(\0132\024.livekit.EventMetric\"\207\001\n\020TimeSerie"
  "sMetric\022\r\n\005label\030\001 \001(\r\022\034\n\024participant_id"
  "entity\030\002 \001(\r\022\021\n\ttrack_sid\030\003 \001(\r\022&\n\007sampl"
  "es\030\004 \003(\0132\025.livekit.MetricSample\022\013\n\003rid\030\005"
  " \001(\r\"m\n\014MetricSample\022\024\n\014timestamp_ms\030\001 \001"
  "(\003\0228\n\024normalized_timestamp\030\002 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\r\n\005value\030\003 \001(\002\"\334\002\n\013"
  "EventMetric\022\r\n\005label\030\001 \001(\r\022\034\n\024participan"
  "t_identity\030\002 \001(\r\022\021\n\ttrack_sid\030\003 \001(\r\022\032\n\022s"
  "tart_timestamp_ms\030\004 \001(\003\022\035\n\020end_timestamp"
  "_ms\030\005 \001(\003H\000\210\001\001\022>\n\032normalized_start_times"
  "tamp\030\006 \001(\0132\032.google.protobuf.Timestamp\022A"
  "\n\030normalized_end_timestamp\030\007 \001(\0132\032.googl"
  "e.protobuf.TimestampH\001\210\001\001\022\020\n\010metadata\030\010 "
  "\001(\t\022\013\n\003rid\030\t \001(\rB\023\n\021_end_timestamp_msB\033\n"
  "\031_normalized_end_timestamp*\201\007\n\013MetricLab"
  "el\022\023\n\017AGENTS_LLM_TTFT\020\000\022\023\n\017AGENTS_STT_TT"
  "FT\020\001\022\023\n\017AGENTS_TTS_TTFB\020\002\022(\n$CLIENT_VIDE"
  "O_SUBSCRIBER_FREEZE_COUNT\020\003\0221\n-CLIENT_VI"
  "DEO_SUBSCRIBER_TOTAL_FREEZE_DURATION\020\004\022\'"
  "\n#CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT\020\005\022"
  "1\n-CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_"
  "DURATION\020\006\022-\n)CLIENT_AUDIO_SUBSCRIBER_CO"
  "NCEALED_SAMPLES\020\007\0224\n0CLIENT_AUDIO_SUBSCR"
  "IBER_SILENT_CONCEALED_SAMPLES\020\010\022.\n*CLIEN"
  "T_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS\020\t\022"
  ".\n*CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_"
  "COUNT\020\n\0227\n3CLIENT_AUDIO_SUBSCRIBER_TOTAL"
  "_INTERRUPTION_DURATION\020\013\022)\n%CLIENT_SUBSC"
  "RIBER_JITTER_BUFFER_DELAY\020\014\0221\n-CLIENT_SU"
  "BSCRIBER_JITTER_BUFFER_EMITTED_COUNT\020\r\022@"
  "\n<CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITAT"
  "ION_DURATION_BANDWIDTH\020\016\022:\n6CLIENT_VIDEO"
  "_PUBLISHER_QUALITY_LIMITATION_DURATION_C"
  "PU\020\017\022<\n8CLIENT_VIDEO_PUBLISHER_QUALITY_L"
  "IMITATION_DURATION_OTHER\020\020\022\021\n\rPUBLISHER_"
  "RTT\020\021\022\023\n\017SERVER_MESH_RTT\020\022\022\022\n\016SUBSCRIBER"
  "_RTT\020\023\022&\n!METRIC_LABEL_PREDEFINED_MAX_VA"
  "LUE\020\200 BFZ#github.com/livekit/protocol/li"
  "vekit\252\002\rLiveKit.Proto\352\002\016LiveKit::Protob\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5fmetrics_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5fmetrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5fmetrics_2eproto = {
    false, false, 1846, descriptor_table_protodef_livekit_5fmetrics_2eproto,
    "livekit_metrics.proto",
    &descriptor_table_livekit_5fmetrics_2eproto_once, descriptor_table_livekit_5fmetrics_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_livekit_5fmetrics_2eproto::offsets,
    file_level_metadata_livekit_5fmetrics_2eproto, file_level_enum_descriptors_livekit_5fmetrics_2eproto,
    file_level_service_descriptors_livekit_5fmetrics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5fmetrics_2eproto_getter() {
  return &descriptor_table_livekit_5fmetrics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5fmetrics_2eproto(&descriptor_table_livekit_5fmetrics_2eproto);
namespace livekit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricLabel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_livekit_5fmetrics_2eproto);
  return file_level_enum_descriptors_livekit_5fmetrics_2eproto[0];
}
bool MetricLabel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 4096:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MetricsBatch::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_timestamp(const MetricsBatch* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetricsBatch::_Internal::normalized_timestamp(const MetricsBatch* msg) {
  return *msg->_impl_.normalized_timestamp_;
}
void MetricsBatch::clear_normalized_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.normalized_timestamp_ != nullptr) {
    delete _impl_.normalized_timestamp_;
  }
  _impl_.normalized_timestamp_ = nullptr;
}
MetricsBatch::MetricsBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.MetricsBatch)
}
MetricsBatch::MetricsBatch(const MetricsBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricsBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_data_){from._impl_.str_data_}
    , decltype(_impl_.time_series_){from._impl_.time_series_}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.normalized_timestamp_){nullptr}
    , decltype(_impl_.timestamp_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_normalized_timestamp()) {
    _this->_impl_.normalized_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.normalized_timestamp_);
  }
  _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:livekit.MetricsBatch)
}

inline void MetricsBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_data_){arena}
    , decltype(_impl_.time_series_){arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.normalized_timestamp_){nullptr}
    , decltype(_impl_.timestamp_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricsBatch::~MetricsBatch() {
  // @@protoc_insertion_point(destructor:livekit.MetricsBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricsBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_data_.~RepeatedPtrField();
  _impl_.time_series_.~RepeatedPtrField();
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.normalized_timestamp_;
}

void MetricsBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricsBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MetricsBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_data_.Clear();
  _impl_.time_series_.Clear();
  _impl_.events_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.normalized_timestamp_ != nullptr) {
    delete _impl_.normalized_timestamp_;
  }
  _impl_.normalized_timestamp_ = nullptr;
  _impl_.timestamp_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp normalized_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalized_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string str_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "livekit.MetricsBatch.str_data"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.TimeSeriesMetric time_series = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.EventMetric events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MetricsBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_ms(), target);
  }

  // .google.protobuf.Timestamp normalized_timestamp = 2;
  if (this->_internal_has_normalized_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normalized_timestamp(this),
        _Internal::normalized_timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated string str_data = 3;
  for (int i = 0, n = this->_internal_str_data_size(); i < n; i++) {
    const auto& s = this->_internal_str_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.MetricsBatch.str_data");
    target = stream->WriteString(3, s, target);
  }

  // repeated .livekit.TimeSeriesMetric time_series = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_time_series_size()); i < n; i++) {
    const auto& repfield = this->_internal_time_series(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .livekit.EventMetric events = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MetricsBatch)
  return target;
}

size_t MetricsBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MetricsBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str_data = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.str_data_.size());
  for (int i = 0, n = _impl_.str_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.str_data_.Get(i));
  }

  // repeated .livekit.TimeSeriesMetric time_series = 4;
  total_size += 1UL * this->_internal_time_series_size();
  for (const auto& msg : this->_impl_.time_series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .livekit.EventMetric events = 5;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp normalized_timestamp = 2;
  if (this->_internal_has_normalized_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normalized_timestamp_);
  }

  // int64 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricsBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsBatch::GetClassData() const { return &_class_data_; }


void MetricsBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricsBatch*>(&to_msg);
  auto& from = static_cast<const MetricsBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MetricsBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.str_data_.MergeFrom(from._impl_.str_data_);
  _this->_impl_.time_series_.MergeFrom(from._impl_.time_series_);
  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_normalized_timestamp()) {
    _this->_internal_mutable_normalized_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_normalized_timestamp());
  }
  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsBatch::CopyFrom(const MetricsBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MetricsBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsBatch::IsInitialized() const {
  return true;
}

void MetricsBatch::InternalSwap(MetricsBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.str_data_.InternalSwap(&other->_impl_.str_data_);
  _impl_.time_series_.InternalSwap(&other->_impl_.time_series_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.timestamp_ms_)
      + sizeof(MetricsBatch::_impl_.timestamp_ms_)
      - PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.normalized_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.normalized_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.normalized_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmetrics_2eproto_getter, &descriptor_table_livekit_5fmetrics_2eproto_once,
      file_level_metadata_livekit_5fmetrics_2eproto[0]);
}

// ===================================================================

class TimeSeriesMetric::_Internal {
 public:
};

TimeSeriesMetric::TimeSeriesMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.TimeSeriesMetric)
}
TimeSeriesMetric::TimeSeriesMetric(const TimeSeriesMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeSeriesMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.label_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.rid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.label_, &from._impl_.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rid_) -
    reinterpret_cast<char*>(&_impl_.label_)) + sizeof(_impl_.rid_));
  // @@protoc_insertion_point(copy_constructor:livekit.TimeSeriesMetric)
}

inline void TimeSeriesMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.samples_){arena}
    , decltype(_impl_.label_){0u}
    , decltype(_impl_.participant_identity_){0u}
    , decltype(_impl_.track_sid_){0u}
    , decltype(_impl_.rid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeSeriesMetric::~TimeSeriesMetric() {
  // @@protoc_insertion_point(destructor:livekit.TimeSeriesMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeSeriesMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.samples_.~RepeatedPtrField();
}

void TimeSeriesMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeSeriesMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TimeSeriesMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.samples_.Clear();
  ::memset(&_impl_.label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rid_) -
      reinterpret_cast<char*>(&_impl_.label_)) + sizeof(_impl_.rid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSeriesMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.participant_identity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 track_sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.track_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .livekit.MetricSample samples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 rid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeSeriesMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TimeSeriesMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 label = 1;
  if (this->_internal_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_label(), target);
  }

  // uint32 participant_identity = 2;
  if (this->_internal_participant_identity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_participant_identity(), target);
  }

  // uint32 track_sid = 3;
  if (this->_internal_track_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_track_sid(), target);
  }

  // repeated .livekit.MetricSample samples = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 rid = 5;
  if (this->_internal_rid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TimeSeriesMetric)
  return target;
}

size_t TimeSeriesMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.TimeSeriesMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .livekit.MetricSample samples = 4;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_impl_.samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 label = 1;
  if (this->_internal_label() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_label());
  }

  // uint32 participant_identity = 2;
  if (this->_internal_participant_identity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_participant_identity());
  }

  // uint32 track_sid = 3;
  if (this->_internal_track_sid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_track_sid());
  }

  // uint32 rid = 5;
  if (this->_internal_rid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeSeriesMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeSeriesMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeSeriesMetric::GetClassData() const { return &_class_data_; }


void TimeSeriesMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeSeriesMetric*>(&to_msg);
  auto& from = static_cast<const TimeSeriesMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TimeSeriesMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.samples_.MergeFrom(from._impl_.samples_);
  if (from._internal_label() != 0) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_participant_identity() != 0) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_track_sid() != 0) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_rid() != 0) {
    _this->_internal_set_rid(from._internal_rid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeSeriesMetric::CopyFrom(const TimeSeriesMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TimeSeriesMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesMetric::IsInitialized() const {
  return true;
}

void TimeSeriesMetric::InternalSwap(TimeSeriesMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.samples_.InternalSwap(&other->_impl_.samples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.rid_)
      + sizeof(TimeSeriesMetric::_impl_.rid_)
      - PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.label_)>(
          reinterpret_cast<char*>(&_impl_.label_),
          reinterpret_cast<char*>(&other->_impl_.label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSeriesMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmetrics_2eproto_getter, &descriptor_table_livekit_5fmetrics_2eproto_once,
      file_level_metadata_livekit_5fmetrics_2eproto[1]);
}

// ===================================================================

class MetricSample::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_timestamp(const MetricSample* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetricSample::_Internal::normalized_timestamp(const MetricSample* msg) {
  return *msg->_impl_.normalized_timestamp_;
}
void MetricSample::clear_normalized_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.normalized_timestamp_ != nullptr) {
    delete _impl_.normalized_timestamp_;
  }
  _impl_.normalized_timestamp_ = nullptr;
}
MetricSample::MetricSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.MetricSample)
}
MetricSample::MetricSample(const MetricSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.normalized_timestamp_){nullptr}
    , decltype(_impl_.timestamp_ms_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_normalized_timestamp()) {
    _this->_impl_.normalized_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.normalized_timestamp_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:livekit.MetricSample)
}

inline void MetricSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.normalized_timestamp_){nullptr}
    , decltype(_impl_.timestamp_ms_){int64_t{0}}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricSample::~MetricSample() {
  // @@protoc_insertion_point(destructor:livekit.MetricSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.normalized_timestamp_;
}

void MetricSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricSample::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MetricSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.normalized_timestamp_ != nullptr) {
    delete _impl_.normalized_timestamp_;
  }
  _impl_.normalized_timestamp_ = nullptr;
  ::memset(&_impl_.timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp normalized_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalized_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MetricSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_ms(), target);
  }

  // .google.protobuf.Timestamp normalized_timestamp = 2;
  if (this->_internal_has_normalized_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normalized_timestamp(this),
        _Internal::normalized_timestamp(this).GetCachedSize(), target, stream);
  }

  // float value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MetricSample)
  return target;
}

size_t MetricSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.MetricSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp normalized_timestamp = 2;
  if (this->_internal_has_normalized_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normalized_timestamp_);
  }

  // int64 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_ms());
  }

  // float value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricSample::GetClassData() const { return &_class_data_; }


void MetricSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricSample*>(&to_msg);
  auto& from = static_cast<const MetricSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MetricSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_normalized_timestamp()) {
    _this->_internal_mutable_normalized_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_normalized_timestamp());
  }
  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricSample::CopyFrom(const MetricSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MetricSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricSample::IsInitialized() const {
  return true;
}

void MetricSample::InternalSwap(MetricSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.value_)
      + sizeof(MetricSample::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.normalized_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.normalized_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.normalized_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmetrics_2eproto_getter, &descriptor_table_livekit_5fmetrics_2eproto_once,
      file_level_metadata_livekit_5fmetrics_2eproto[2]);
}

// ===================================================================

class EventMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<EventMetric>()._impl_._has_bits_);
  static void set_has_end_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_start_timestamp(const EventMetric* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& normalized_end_timestamp(const EventMetric* msg);
  static void set_has_normalized_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventMetric::_Internal::normalized_start_timestamp(const EventMetric* msg) {
  return *msg->_impl_.normalized_start_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventMetric::_Internal::normalized_end_timestamp(const EventMetric* msg) {
  return *msg->_impl_.normalized_end_timestamp_;
}
void EventMetric::clear_normalized_start_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.normalized_start_timestamp_ != nullptr) {
    delete _impl_.normalized_start_timestamp_;
  }
  _impl_.normalized_start_timestamp_ = nullptr;
}
void EventMetric::clear_normalized_end_timestamp() {
  if (_impl_.normalized_end_timestamp_ != nullptr) _impl_.normalized_end_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EventMetric::EventMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.EventMetric)
}
EventMetric::EventMetric(const EventMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.normalized_start_timestamp_){nullptr}
    , decltype(_impl_.normalized_end_timestamp_){nullptr}
    , decltype(_impl_.label_){}
    , decltype(_impl_.participant_identity_){}
    , decltype(_impl_.start_timestamp_ms_){}
    , decltype(_impl_.end_timestamp_ms_){}
    , decltype(_impl_.track_sid_){}
    , decltype(_impl_.rid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_normalized_start_timestamp()) {
    _this->_impl_.normalized_start_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.normalized_start_timestamp_);
  }
  if (from._internal_has_normalized_end_timestamp()) {
    _this->_impl_.normalized_end_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.normalized_end_timestamp_);
  }
  ::memcpy(&_impl_.label_, &from._impl_.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rid_) -
    reinterpret_cast<char*>(&_impl_.label_)) + sizeof(_impl_.rid_));
  // @@protoc_insertion_point(copy_constructor:livekit.EventMetric)
}

inline void EventMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.normalized_start_timestamp_){nullptr}
    , decltype(_impl_.normalized_end_timestamp_){nullptr}
    , decltype(_impl_.label_){0u}
    , decltype(_impl_.participant_identity_){0u}
    , decltype(_impl_.start_timestamp_ms_){int64_t{0}}
    , decltype(_impl_.end_timestamp_ms_){int64_t{0}}
    , decltype(_impl_.track_sid_){0u}
    , decltype(_impl_.rid_){0u}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventMetric::~EventMetric() {
  // @@protoc_insertion_point(destructor:livekit.EventMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.normalized_start_timestamp_;
  if (this != internal_default_instance()) delete _impl_.normalized_end_timestamp_;
}

void EventMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EventMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.normalized_start_timestamp_ != nullptr) {
    delete _impl_.normalized_start_timestamp_;
  }
  _impl_.normalized_start_timestamp_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.normalized_end_timestamp_ != nullptr);
    _impl_.normalized_end_timestamp_->Clear();
  }
  ::memset(&_impl_.label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.start_timestamp_ms_) -
      reinterpret_cast<char*>(&_impl_.label_)) + sizeof(_impl_.start_timestamp_ms_));
  _impl_.end_timestamp_ms_ = int64_t{0};
  ::memset(&_impl_.track_sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rid_) -
      reinterpret_cast<char*>(&_impl_.track_sid_)) + sizeof(_impl_.rid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 participant_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.participant_identity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 track_sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.track_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_timestamp_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.start_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_timestamp_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_end_timestamp_ms(&has_bits);
          _impl_.end_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp normalized_start_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalized_start_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalized_end_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.EventMetric.metadata"));
        } else
          goto handle_unusual;
        continue;
      // uint32 rid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.rid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EventMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 label = 1;
  if (this->_internal_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_label(), target);
  }

  // uint32 participant_identity = 2;
  if (this->_internal_participant_identity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_participant_identity(), target);
  }

  // uint32 track_sid = 3;
  if (this->_internal_track_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_track_sid(), target);
  }

  // int64 start_timestamp_ms = 4;
  if (this->_internal_start_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_start_timestamp_ms(), target);
  }

  // optional int64 end_timestamp_ms = 5;
  if (_internal_has_end_timestamp_ms()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_end_timestamp_ms(), target);
  }

  // .google.protobuf.Timestamp normalized_start_timestamp = 6;
  if (this->_internal_has_normalized_start_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::normalized_start_timestamp(this),
        _Internal::normalized_start_timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
  if (_internal_has_normalized_end_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::normalized_end_timestamp(this),
        _Internal::normalized_end_timestamp(this).GetCachedSize(), target, stream);
  }

  // string metadata = 8;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.EventMetric.metadata");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // uint32 rid = 9;
  if (this->_internal_rid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EventMetric)
  return target;
}

size_t EventMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.EventMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 8;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .google.protobuf.Timestamp normalized_start_timestamp = 6;
  if (this->_internal_has_normalized_start_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normalized_start_timestamp_);
  }

  // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normalized_end_timestamp_);
  }

  // uint32 label = 1;
  if (this->_internal_label() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_label());
  }

  // uint32 participant_identity = 2;
  if (this->_internal_participant_identity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_participant_identity());
  }

  // int64 start_timestamp_ms = 4;
  if (this->_internal_start_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_timestamp_ms());
  }

  // optional int64 end_timestamp_ms = 5;
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_timestamp_ms());
  }

  // uint32 track_sid = 3;
  if (this->_internal_track_sid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_track_sid());
  }

  // uint32 rid = 9;
  if (this->_internal_rid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventMetric::GetClassData() const { return &_class_data_; }


void EventMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventMetric*>(&to_msg);
  auto& from = static_cast<const EventMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EventMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_has_normalized_start_timestamp()) {
    _this->_internal_mutable_normalized_start_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_normalized_start_timestamp());
  }
  if (from._internal_has_normalized_end_timestamp()) {
    _this->_internal_mutable_normalized_end_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_normalized_end_timestamp());
  }
  if (from._internal_label() != 0) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_participant_identity() != 0) {
    _this->_internal_set_participant_identity(from._internal_participant_identity());
  }
  if (from._internal_start_timestamp_ms() != 0) {
    _this->_internal_set_start_timestamp_ms(from._internal_start_timestamp_ms());
  }
  if (from._internal_has_end_timestamp_ms()) {
    _this->_internal_set_end_timestamp_ms(from._internal_end_timestamp_ms());
  }
  if (from._internal_track_sid() != 0) {
    _this->_internal_set_track_sid(from._internal_track_sid());
  }
  if (from._internal_rid() != 0) {
    _this->_internal_set_rid(from._internal_rid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventMetric::CopyFrom(const EventMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EventMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetric::IsInitialized() const {
  return true;
}

void EventMetric::InternalSwap(EventMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.rid_)
      + sizeof(EventMetric::_impl_.rid_)
      - PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.normalized_start_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.normalized_start_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.normalized_start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fmetrics_2eproto_getter, &descriptor_table_livekit_5fmetrics_2eproto_once,
      file_level_metadata_livekit_5fmetrics_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::MetricsBatch*
Arena::CreateMaybeMessage< ::livekit::MetricsBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MetricsBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::TimeSeriesMetric*
Arena::CreateMaybeMessage< ::livekit::TimeSeriesMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::TimeSeriesMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::MetricSample*
Arena::CreateMaybeMessage< ::livekit::MetricSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::MetricSample >(arena);
}
template<> PROTOBUF_NOINLINE ::livekit::EventMetric*
Arena::CreateMaybeMessage< ::livekit::EventMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::EventMetric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
