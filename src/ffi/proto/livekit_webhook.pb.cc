// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livekit_webhook.proto

#include "livekit_webhook.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace livekit {
PROTOBUF_CONSTEXPR WebhookEvent::WebhookEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.participant_)*/nullptr
  , /*decltype(_impl_.track_)*/nullptr
  , /*decltype(_impl_.egress_info_)*/nullptr
  , /*decltype(_impl_.ingress_info_)*/nullptr
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.num_dropped_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WebhookEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebhookEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebhookEventDefaultTypeInternal() {}
  union {
    WebhookEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebhookEventDefaultTypeInternal _WebhookEvent_default_instance_;
}  // namespace livekit
static ::_pb::Metadata file_level_metadata_livekit_5fwebhook_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_livekit_5fwebhook_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_livekit_5fwebhook_2eproto = nullptr;

const uint32_t TableStruct_livekit_5fwebhook_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.egress_info_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.ingress_info_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.track_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::livekit::WebhookEvent, _impl_.num_dropped_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::livekit::WebhookEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::livekit::_WebhookEvent_default_instance_._instance,
};

const char descriptor_table_protodef_livekit_5fwebhook_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025livekit_webhook.proto\022\007livekit\032\024liveki"
  "t_models.proto\032\024livekit_egress.proto\032\025li"
  "vekit_ingress.proto\"\227\002\n\014WebhookEvent\022\r\n\005"
  "event\030\001 \001(\t\022\033\n\004room\030\002 \001(\0132\r.livekit.Room"
  "\022-\n\013participant\030\003 \001(\0132\030.livekit.Particip"
  "antInfo\022(\n\013egress_info\030\t \001(\0132\023.livekit.E"
  "gressInfo\022*\n\014ingress_info\030\n \001(\0132\024.liveki"
  "t.IngressInfo\022!\n\005track\030\010 \001(\0132\022.livekit.T"
  "rackInfo\022\n\n\002id\030\006 \001(\t\022\022\n\ncreated_at\030\007 \001(\003"
  "\022\023\n\013num_dropped\030\013 \001(\005BFZ#github.com/live"
  "kit/protocol/livekit\252\002\rLiveKit.Proto\352\002\016L"
  "iveKit::Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_livekit_5fwebhook_2eproto_deps[3] = {
  &::descriptor_table_livekit_5fegress_2eproto,
  &::descriptor_table_livekit_5fingress_2eproto,
  &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::_pbi::once_flag descriptor_table_livekit_5fwebhook_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_livekit_5fwebhook_2eproto = {
    false, false, 461, descriptor_table_protodef_livekit_5fwebhook_2eproto,
    "livekit_webhook.proto",
    &descriptor_table_livekit_5fwebhook_2eproto_once, descriptor_table_livekit_5fwebhook_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_livekit_5fwebhook_2eproto::offsets,
    file_level_metadata_livekit_5fwebhook_2eproto, file_level_enum_descriptors_livekit_5fwebhook_2eproto,
    file_level_service_descriptors_livekit_5fwebhook_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_livekit_5fwebhook_2eproto_getter() {
  return &descriptor_table_livekit_5fwebhook_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_livekit_5fwebhook_2eproto(&descriptor_table_livekit_5fwebhook_2eproto);
namespace livekit {

// ===================================================================

class WebhookEvent::_Internal {
 public:
  static const ::livekit::Room& room(const WebhookEvent* msg);
  static const ::livekit::ParticipantInfo& participant(const WebhookEvent* msg);
  static const ::livekit::EgressInfo& egress_info(const WebhookEvent* msg);
  static const ::livekit::IngressInfo& ingress_info(const WebhookEvent* msg);
  static const ::livekit::TrackInfo& track(const WebhookEvent* msg);
};

const ::livekit::Room&
WebhookEvent::_Internal::room(const WebhookEvent* msg) {
  return *msg->_impl_.room_;
}
const ::livekit::ParticipantInfo&
WebhookEvent::_Internal::participant(const WebhookEvent* msg) {
  return *msg->_impl_.participant_;
}
const ::livekit::EgressInfo&
WebhookEvent::_Internal::egress_info(const WebhookEvent* msg) {
  return *msg->_impl_.egress_info_;
}
const ::livekit::IngressInfo&
WebhookEvent::_Internal::ingress_info(const WebhookEvent* msg) {
  return *msg->_impl_.ingress_info_;
}
const ::livekit::TrackInfo&
WebhookEvent::_Internal::track(const WebhookEvent* msg) {
  return *msg->_impl_.track_;
}
void WebhookEvent::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
void WebhookEvent::clear_participant() {
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
}
void WebhookEvent::clear_egress_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.egress_info_ != nullptr) {
    delete _impl_.egress_info_;
  }
  _impl_.egress_info_ = nullptr;
}
void WebhookEvent::clear_ingress_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.ingress_info_ != nullptr) {
    delete _impl_.ingress_info_;
  }
  _impl_.ingress_info_ = nullptr;
}
void WebhookEvent::clear_track() {
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
}
WebhookEvent::WebhookEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:livekit.WebhookEvent)
}
WebhookEvent::WebhookEvent(const WebhookEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebhookEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.track_){nullptr}
    , decltype(_impl_.egress_info_){nullptr}
    , decltype(_impl_.ingress_info_){nullptr}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.num_dropped_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event().empty()) {
    _this->_impl_.event_.Set(from._internal_event(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::livekit::Room(*from._impl_.room_);
  }
  if (from._internal_has_participant()) {
    _this->_impl_.participant_ = new ::livekit::ParticipantInfo(*from._impl_.participant_);
  }
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::livekit::TrackInfo(*from._impl_.track_);
  }
  if (from._internal_has_egress_info()) {
    _this->_impl_.egress_info_ = new ::livekit::EgressInfo(*from._impl_.egress_info_);
  }
  if (from._internal_has_ingress_info()) {
    _this->_impl_.ingress_info_ = new ::livekit::IngressInfo(*from._impl_.ingress_info_);
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_dropped_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.num_dropped_));
  // @@protoc_insertion_point(copy_constructor:livekit.WebhookEvent)
}

inline void WebhookEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.participant_){nullptr}
    , decltype(_impl_.track_){nullptr}
    , decltype(_impl_.egress_info_){nullptr}
    , decltype(_impl_.ingress_info_){nullptr}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.num_dropped_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebhookEvent::~WebhookEvent() {
  // @@protoc_insertion_point(destructor:livekit.WebhookEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebhookEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.participant_;
  if (this != internal_default_instance()) delete _impl_.track_;
  if (this != internal_default_instance()) delete _impl_.egress_info_;
  if (this != internal_default_instance()) delete _impl_.ingress_info_;
}

void WebhookEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebhookEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.WebhookEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.egress_info_ != nullptr) {
    delete _impl_.egress_info_;
  }
  _impl_.egress_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ingress_info_ != nullptr) {
    delete _impl_.ingress_info_;
  }
  _impl_.ingress_info_ = nullptr;
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_dropped_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.num_dropped_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebhookEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.WebhookEvent.event"));
        } else
          goto handle_unusual;
        continue;
      // .livekit.Room room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.ParticipantInfo participant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "livekit.WebhookEvent.id"));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.TrackInfo track = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.EgressInfo egress_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_egress_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .livekit.IngressInfo ingress_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ingress_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_dropped = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.num_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebhookEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:livekit.WebhookEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event = 1;
  if (!this->_internal_event().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event().data(), static_cast<int>(this->_internal_event().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.WebhookEvent.event");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event(), target);
  }

  // .livekit.Room room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // .livekit.ParticipantInfo participant = 3;
  if (this->_internal_has_participant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::participant(this),
        _Internal::participant(this).GetCachedSize(), target, stream);
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "livekit.WebhookEvent.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // int64 created_at = 7;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_created_at(), target);
  }

  // .livekit.TrackInfo track = 8;
  if (this->_internal_has_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  // .livekit.EgressInfo egress_info = 9;
  if (this->_internal_has_egress_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::egress_info(this),
        _Internal::egress_info(this).GetCachedSize(), target, stream);
  }

  // .livekit.IngressInfo ingress_info = 10;
  if (this->_internal_has_ingress_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::ingress_info(this),
        _Internal::ingress_info(this).GetCachedSize(), target, stream);
  }

  // int32 num_dropped = 11;
  if (this->_internal_num_dropped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_num_dropped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.WebhookEvent)
  return target;
}

size_t WebhookEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:livekit.WebhookEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event = 1;
  if (!this->_internal_event().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event());
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .livekit.Room room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // .livekit.ParticipantInfo participant = 3;
  if (this->_internal_has_participant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.participant_);
  }

  // .livekit.TrackInfo track = 8;
  if (this->_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }

  // .livekit.EgressInfo egress_info = 9;
  if (this->_internal_has_egress_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.egress_info_);
  }

  // .livekit.IngressInfo ingress_info = 10;
  if (this->_internal_has_ingress_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ingress_info_);
  }

  // int64 created_at = 7;
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int32 num_dropped = 11;
  if (this->_internal_num_dropped() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_dropped());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebhookEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebhookEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebhookEvent::GetClassData() const { return &_class_data_; }


void WebhookEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebhookEvent*>(&to_msg);
  auto& from = static_cast<const WebhookEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.WebhookEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event().empty()) {
    _this->_internal_set_event(from._internal_event());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::livekit::Room::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_participant()) {
    _this->_internal_mutable_participant()->::livekit::ParticipantInfo::MergeFrom(
        from._internal_participant());
  }
  if (from._internal_has_track()) {
    _this->_internal_mutable_track()->::livekit::TrackInfo::MergeFrom(
        from._internal_track());
  }
  if (from._internal_has_egress_info()) {
    _this->_internal_mutable_egress_info()->::livekit::EgressInfo::MergeFrom(
        from._internal_egress_info());
  }
  if (from._internal_has_ingress_info()) {
    _this->_internal_mutable_ingress_info()->::livekit::IngressInfo::MergeFrom(
        from._internal_ingress_info());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_num_dropped() != 0) {
    _this->_internal_set_num_dropped(from._internal_num_dropped());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebhookEvent::CopyFrom(const WebhookEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.WebhookEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebhookEvent::IsInitialized() const {
  return true;
}

void WebhookEvent::InternalSwap(WebhookEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_, lhs_arena,
      &other->_impl_.event_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebhookEvent, _impl_.num_dropped_)
      + sizeof(WebhookEvent::_impl_.num_dropped_)
      - PROTOBUF_FIELD_OFFSET(WebhookEvent, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebhookEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_livekit_5fwebhook_2eproto_getter, &descriptor_table_livekit_5fwebhook_2eproto_once,
      file_level_metadata_livekit_5fwebhook_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::livekit::WebhookEvent*
Arena::CreateMaybeMessage< ::livekit::WebhookEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::livekit::WebhookEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
